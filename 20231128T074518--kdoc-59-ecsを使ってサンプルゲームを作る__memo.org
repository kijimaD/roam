:properties:
:ID: 20231128T074518
:end:
#+title:      KDOC 59: ECSを使ってサンプルゲームを作る
#+date:       [2023-11-28 Tue 07:45]
#+filetags:   :memo:
#+identifier: 20231128T074518

[[id:dc45bd7d-b8c4-47ef-ae84-c548f81c50bb][EntityComponentSystem]]を使って、サンプルゲームを作る。

#+caption: ゲーム
#+BEGIN_EXPORT html
<iframe width="560" height="315" src="https://kijimad.github.io/ruins/"></iframe>
#+END_EXPORT

実際のゲーム画面。ウィンドウにフォーカスして方向キーで操作できる。

- リポジトリ。[[https://github.com/kijimaD/ruins][kijimaD/ruins]]

* 方針
まずストーリー抜きで、RPGとしてゲームが成立するようにする。

* Todo
** TODO 装備画面のリファクタ
:LOGBOOK:
CLOCK: [2024-02-29 Thu 23:32]--[2024-02-29 Thu 23:57] =>  0:25
CLOCK: [2024-02-29 Thu 23:07]--[2024-02-29 Thu 23:32] =>  0:25
CLOCK: [2024-02-26 Mon 23:03]--[2024-02-26 Mon 23:29] =>  0:26
:END:
汚いので直す。

どこから直せばいいのかよくわからないな。
** TODO 合成のレアリティスコア
性能にスコアをつけ、結果的に出来上がったものに対してレアリティランクをつけるとよさそう。

** TODO 回復薬を割合回復にする

固定値ではないようにする。

** TODO イベント部分の設計
:LOGBOOK:
CLOCK: [2024-01-04 Thu 09:56]--[2024-01-04 Thu 10:21] =>  0:25
CLOCK: [2024-01-03 Wed 22:35]--[2024-01-03 Wed 23:00] =>  0:25
CLOCK: [2024-01-03 Wed 21:52]--[2024-01-03 Wed 22:17] =>  0:25
CLOCK: [2024-01-03 Wed 21:09]--[2024-01-03 Wed 21:34] =>  0:25
CLOCK: [2024-01-03 Wed 19:12]--[2024-01-03 Wed 19:37] =>  0:25
:END:
1章のうろつきをどうするか考える。

- ローグライト形式にすると物語に関してあまり考えなくてよい
  - 繰り返しのゲームプレイに変化をつけやすい
  - 設定とかが伝わりにくい可能性がある
  - Tipsという形式でオプショナルに読めればよさそう
  - Tipsだと自然に紹介できなさそうな感じもする
  - あまり物語性はない
  - 物語部分は背景や音声つきのメッセージ形式で良い
- 行けるところはランダムで選ばれた4つにする
  - 行った回数によってイベントが起こる
  - 背反なイベントがある
  - 回数を重ねることで仲間になったりアイテムがもらえたりする
    - 例
    - 市場 x 2 => 整備士が仲間になる
    - 広場 x 2 => 回復薬がもらえる
  - 単調な感じもする
- イベントによって仲間になったり、アイテムが増えたり、ステータスが変動したりする

** TODO アイテム使用・削除をsystem化する
wantsToUseエンティティを生成して、そのエンティティをsystemでキャッチする。

直接削除すると共通処理が追加しにくかったりする。

共通の関数化するだけでよさそうな感じもする。実行順とかがややこしくなるのかな。メッセージを伝える用のエンティティをいちいち作るのが面倒なんだよな。コードも増える。

** TODO モジュール分けする
名前がかぶってややこしいものは分ける。

- system
- app
- message engine
** TODO 味方一覧を共通化する
:LOGBOOK:
CLOCK: [2024-02-11 Sun 01:13]--[2024-02-11 Sun 01:38] =>  0:25
:END:

いろんなところで使いそうかつ、複数のパーツで構成されているので作成が面倒なので。

** TODO ステート切り替えが怪しい部分がある
特にpopしている部分。

- pushで、文字があると重なる
- popしたときにOnStartは走らないので、前の画面を削除するのはダメ

** TODO 図形 or 画像描画の方法を考える
UIのために図形描画したい。どうするか。画像を用意すればよいが、いい感じにやるためにはどうすればいいか。

** TODO 生成をランダム化する
ある程度ランダム化したい。プレイヤー、モンスター、ワープゲートの出る位置をバラけさせる。

** TODO 暗闇を追加する
未探検の部分は暗くなる。

** TODO 照明を追加する
照明がある部分は色が変わる。

** TODO キャラクタを生成する
味方/敵を生成する。

** TODO タイルの種類を増やす
:LOGBOOK:
CLOCK: [2023-12-03 Sun 18:19]--[2023-12-03 Sun 18:44] =>  0:25
:END:
見た目がよくないので、2種類の通常フロアを用意する。

ステージ作成が少し面倒になるか。2種類のタイルの違いをファイルに書き出したくないな。勝手に判断して入れてくれるのが一番良い。壁が隣接してたら〜とか。

** TODO ゲームループカウントをグローバル化する
数えてメッセージのアニメーションさせる用。汎用的なのでグローバルでやってよさそう。アニメーションのためのもっとよい方法がある可能性はある。ちゃんと調べないとな…。

** TODO アニメーションのやり方を考える
どうやっているのだろう。
** TODO 階の生成方法を考える
:LOGBOOK:
CLOCK: [2023-12-03 Sun 12:52]--[2023-12-03 Sun 13:17] =>  0:25
:END:

- ランダム選択の一般階層
  - ダンジョンによって選ばれやすさに偏りがある
  - 5の倍数の場合は帰還ワープも出す
  - すべてのマップに帰還ワープを設定しておく
- ボスの階層
  - 特殊マップ
  - 固定

** TODO メッセージシステムのパッケージを切り出す
今は1パッケージに入っていてわかりにくい。
* Archives
** DONE メッセージ表示できるようにする
CLOSED: [2023-11-28 Tue 07:55]
:PROPERTIES:
:Effort:   20:00
:END:
:LOGBOOK:
CLOCK: [2023-11-28 Tue 07:29]--[2023-11-28 Tue 07:54] =>  0:25
CLOCK: [2023-11-28 Tue 00:12]--[2023-11-28 Tue 00:37] =>  0:25
CLOCK: [2023-11-27 Mon 23:17]--[2023-11-27 Mon 23:42] =>  0:25
CLOCK: [2023-11-27 Mon 22:52]--[2023-11-27 Mon 23:17] =>  0:25
CLOCK: [2023-11-27 Mon 22:27]--[2023-11-27 Mon 22:52] =>  0:25
CLOCK: [2023-11-27 Mon 21:47]--[2023-11-27 Mon 22:12] =>  0:25
CLOCK: [2023-11-27 Mon 21:15]--[2023-11-27 Mon 21:40] =>  0:25
CLOCK: [2023-11-27 Mon 20:41]--[2023-11-27 Mon 21:06] =>  0:25
CLOCK: [2023-11-27 Mon 20:16]--[2023-11-27 Mon 20:41] =>  0:25
CLOCK: [2023-11-27 Mon 19:51]--[2023-11-27 Mon 20:16] =>  0:25
CLOCK: [2023-11-27 Mon 00:18]--[2023-11-27 Mon 00:43] =>  0:25
CLOCK: [2023-11-26 Sun 23:15]--[2023-11-26 Sun 23:40] =>  0:25
CLOCK: [2023-11-26 Sun 21:57]--[2023-11-26 Sun 22:22] =>  0:25
CLOCK: [2023-11-26 Sun 21:32]--[2023-11-26 Sun 21:57] =>  0:25
CLOCK: [2023-11-26 Sun 21:02]--[2023-11-26 Sun 21:27] =>  0:25
CLOCK: [2023-11-26 Sun 20:37]--[2023-11-26 Sun 21:02] =>  0:25
CLOCK: [2023-11-26 Sun 20:01]--[2023-11-26 Sun 20:26] =>  0:25
CLOCK: [2023-11-26 Sun 19:36]--[2023-11-26 Sun 20:01] =>  0:25
CLOCK: [2023-11-26 Sun 18:27]--[2023-11-26 Sun 18:52] =>  0:25
CLOCK: [2023-11-26 Sun 17:08]--[2023-11-26 Sun 17:33] =>  0:25
CLOCK: [2023-11-26 Sun 16:33]--[2023-11-26 Sun 16:58] =>  0:25
CLOCK: [2023-11-26 Sun 15:05]--[2023-11-26 Sun 15:30] =>  0:25
CLOCK: [2023-11-26 Sun 14:40]--[2023-11-26 Sun 15:05] =>  0:25
CLOCK: [2023-11-26 Sun 14:14]--[2023-11-26 Sun 14:39] =>  0:25
CLOCK: [2023-11-26 Sun 13:46]--[2023-11-26 Sun 14:11] =>  0:25
CLOCK: [2023-11-26 Sun 13:19]--[2023-11-26 Sun 13:44] =>  0:25
CLOCK: [2023-11-26 Sun 12:54]--[2023-11-26 Sun 13:19] =>  0:25
CLOCK: [2023-11-26 Sun 12:28]--[2023-11-26 Sun 12:53] =>  0:25
CLOCK: [2023-11-26 Sun 11:53]--[2023-11-26 Sun 12:18] =>  0:25
CLOCK: [2023-11-26 Sun 11:27]--[2023-11-26 Sun 11:52] =>  0:25
CLOCK: [2023-11-26 Sun 10:57]--[2023-11-26 Sun 11:22] =>  0:25
CLOCK: [2023-11-26 Sun 10:32]--[2023-11-26 Sun 10:57] =>  0:25
CLOCK: [2023-11-26 Sun 01:00]--[2023-11-26 Sun 01:25] =>  0:25
CLOCK: [2023-11-26 Sun 00:24]--[2023-11-26 Sun 00:49] =>  0:25
CLOCK: [2023-11-25 Sat 23:04]--[2023-11-25 Sat 23:29] =>  0:25
CLOCK: [2023-11-25 Sat 22:39]--[2023-11-25 Sat 23:04] =>  0:25
CLOCK: [2023-11-25 Sat 22:03]--[2023-11-25 Sat 22:28] =>  0:25
CLOCK: [2023-11-25 Sat 21:38]--[2023-11-25 Sat 22:03] =>  0:25
CLOCK: [2023-11-25 Sat 21:13]--[2023-11-25 Sat 21:38] =>  0:25
CLOCK: [2023-11-25 Sat 20:48]--[2023-11-25 Sat 21:13] =>  0:25
CLOCK: [2023-11-25 Sat 20:22]--[2023-11-25 Sat 20:47] =>  0:25
CLOCK: [2023-11-25 Sat 19:57]--[2023-11-25 Sat 20:22] =>  0:25
CLOCK: [2023-11-25 Sat 18:38]--[2023-11-25 Sat 19:03] =>  0:25
CLOCK: [2023-11-25 Sat 17:48]--[2023-11-25 Sat 18:13] =>  0:25
CLOCK: [2023-11-25 Sat 17:13]--[2023-11-25 Sat 17:38] =>  0:25
CLOCK: [2023-11-25 Sat 16:47]--[2023-11-25 Sat 17:12] =>  0:25
CLOCK: [2023-11-25 Sat 16:22]--[2023-11-25 Sat 16:47] =>  0:25
CLOCK: [2023-11-25 Sat 15:56]--[2023-11-25 Sat 16:21] =>  0:25
CLOCK: [2023-11-25 Sat 15:31]--[2023-11-25 Sat 15:56] =>  0:25
CLOCK: [2023-11-25 Sat 14:54]--[2023-11-25 Sat 15:19] =>  0:25
CLOCK: [2023-11-25 Sat 14:29]--[2023-11-25 Sat 14:54] =>  0:25
CLOCK: [2023-11-25 Sat 13:58]--[2023-11-25 Sat 14:23] =>  0:25
CLOCK: [2023-11-25 Sat 13:32]--[2023-11-25 Sat 13:57] =>  0:25
CLOCK: [2023-11-25 Sat 13:07]--[2023-11-25 Sat 13:32] =>  0:25
CLOCK: [2023-11-25 Sat 12:42]--[2023-11-25 Sat 13:07] =>  0:25
CLOCK: [2023-11-25 Sat 12:17]--[2023-11-25 Sat 12:42] =>  0:25
CLOCK: [2023-11-21 Tue 00:20]--[2023-11-21 Tue 00:45] =>  0:25
CLOCK: [2023-11-20 Mon 23:45]--[2023-11-21 Tue 00:10] =>  0:25
CLOCK: [2023-11-20 Mon 23:11]--[2023-11-20 Mon 23:36] =>  0:25
:END:
[[https://github.com/x-hgg-x/sokoban-go][x-hgg-x/sokoban-go]]を使って小さいサンプルを作る。
** DONE メッセージシステムのリファクタ
CLOSED: [2023-11-28 Tue 08:50]
:LOGBOOK:
CLOCK: [2023-11-28 Tue 08:21]--[2023-11-28 Tue 08:46] =>  0:25
CLOCK: [2023-11-28 Tue 07:56]--[2023-11-28 Tue 08:21] =>  0:25
:END:
使いにくいので直す。
** DONE メッセージシステムに自動改行を入れる
CLOSED: [2023-11-28 Tue 08:50]
飛び出すのを防ぐ。
** DONE ファイルを埋め込む
CLOSED: [2023-11-29 Wed 21:48]
:PROPERTIES:
:Effort:   3:00
:END:
:LOGBOOK:
CLOCK: [2023-11-29 Wed 21:14]--[2023-11-29 Wed 21:39] =>  0:25
CLOCK: [2023-11-29 Wed 20:46]--[2023-11-29 Wed 21:11] =>  0:25
CLOCK: [2023-11-29 Wed 20:21]--[2023-11-29 Wed 20:46] =>  0:25
CLOCK: [2023-11-29 Wed 19:46]--[2023-11-29 Wed 20:11] =>  0:25
:END:
デプロイで扱いやすいように。

** DONE CI設定
CLOSED: [2023-11-29 Wed 21:48]
:LOGBOOK:
CLOCK: [2023-11-29 Wed 00:19]--[2023-11-29 Wed 00:44] =>  0:25
CLOCK: [2023-11-28 Tue 23:44]--[2023-11-29 Wed 00:09] =>  0:25
CLOCK: [2023-11-28 Tue 23:19]--[2023-11-28 Tue 23:44] =>  0:25
CLOCK: [2023-11-28 Tue 08:50]--[2023-11-28 Tue 08:52] =>  0:02
:END:
テストとビルドとデプロイする。

デプロイしたけど、ブラウザで表示できてないな。
** DONE フィールドで動けるようにする
CLOSED: [2023-12-03 Sun 10:40]
:PROPERTIES:
:Effort:   30:00
:END:
:LOGBOOK:
CLOCK: [2023-12-02 Sat 19:45]--[2023-12-02 Sat 20:10] =>  0:25
CLOCK: [2023-12-02 Sat 18:55]--[2023-12-02 Sat 19:20] =>  0:25
CLOCK: [2023-12-02 Sat 16:08]--[2023-12-02 Sat 16:33] =>  0:25
CLOCK: [2023-12-02 Sat 15:42]--[2023-12-02 Sat 16:07] =>  0:25
CLOCK: [2023-12-02 Sat 15:17]--[2023-12-02 Sat 15:42] =>  0:25
CLOCK: [2023-12-02 Sat 14:49]--[2023-12-02 Sat 15:14] =>  0:25
CLOCK: [2023-12-02 Sat 14:24]--[2023-12-02 Sat 14:49] =>  0:25
CLOCK: [2023-12-02 Sat 13:45]--[2023-12-02 Sat 14:11] =>  0:26
CLOCK: [2023-12-02 Sat 13:20]--[2023-12-02 Sat 13:45] =>  0:25
CLOCK: [2023-12-02 Sat 12:55]--[2023-12-02 Sat 13:20] =>  0:25
CLOCK: [2023-12-02 Sat 12:30]--[2023-12-02 Sat 12:55] =>  0:25
CLOCK: [2023-12-01 Fri 08:56]--[2023-12-01 Fri 09:21] =>  0:25
CLOCK: [2023-12-01 Fri 00:42]--[2023-12-01 Fri 01:07] =>  0:25
CLOCK: [2023-12-01 Fri 00:15]--[2023-12-01 Fri 00:40] =>  0:25
CLOCK: [2023-11-30 Thu 23:50]--[2023-12-01 Fri 00:15] =>  0:25
CLOCK: [2023-11-30 Thu 23:14]--[2023-11-30 Thu 23:39] =>  0:25
CLOCK: [2023-11-30 Thu 22:48]--[2023-11-30 Thu 23:13] =>  0:25
CLOCK: [2023-11-30 Thu 00:35]--[2023-11-30 Thu 01:00] =>  0:25
CLOCK: [2023-11-30 Thu 00:06]--[2023-11-30 Thu 00:32] =>  0:26
CLOCK: [2023-11-29 Wed 23:41]--[2023-11-30 Thu 00:06] =>  0:25
CLOCK: [2023-11-29 Wed 22:10]--[2023-11-29 Wed 22:35] =>  0:25
CLOCK: [2023-11-29 Wed 21:44]--[2023-11-29 Wed 22:09] =>  0:25
CLOCK: [2023-11-28 Tue 08:52]--[2023-11-28 Tue 09:17] =>  0:25
:END:

- テキストで地図を読み込む
- コンポーネントを作る
- 地図を表示する
- 移動できるようにする

実行時エラーになる。表示できない。インターフェースが取り出せないよう。

- コンポーネントの初期化を忘れていた
- LoadLevel()によって読み込んだComponentListをAddEntities()->AddEntityComponent()に渡す。が、AddEntitiesで失敗する。テキストで読み込んだ内容をreflectでオブジェクト化するときに、新しく作成したコンポーネントを初期化するのに失敗している
- ecsComponentListを調べてみよう
  - ecvでGameが入ってない
  - world.Components.Game
- sokoban-go では main.goのw.InitWorld(&gc.Components{})の時点でworld.Components.Gameがセットされている
** DONE マップを表示できるようにする
CLOSED: [2023-12-03 Sun 10:41]
表示する。
** DONE 階数を移動できるようにする
CLOSED: [2023-12-03 Sun 14:41]
:LOGBOOK:
CLOCK: [2023-12-03 Sun 14:13]--[2023-12-03 Sun 14:38] =>  0:25
CLOCK: [2023-12-03 Sun 13:35]--[2023-12-03 Sun 14:00] =>  0:25
CLOCK: [2023-12-03 Sun 12:19]--[2023-12-03 Sun 12:44] =>  0:25
CLOCK: [2023-12-03 Sun 11:33]--[2023-12-03 Sun 11:58] =>  0:25
CLOCK: [2023-12-03 Sun 11:08]--[2023-12-03 Sun 11:33] =>  0:25
CLOCK: [2023-12-03 Sun 10:43]--[2023-12-03 Sun 11:08] =>  0:25
:END:
1階からはじまって、次の階層に移動する。

ワープホール。
** DONE クロスコンパイルする
CLOSED: [2023-12-03 Sun 15:45]
:LOGBOOK:
CLOCK: [2023-12-03 Sun 15:19]--[2023-12-03 Sun 15:44] =>  0:25
:END:
一応CIに設定して保証しておく。
** DONE メッセージが飛び出すのを直す
CLOSED: [2023-12-03 Sun 17:50]
ステート遷移イベントを作る。
** DONE 次の階をランダムに選択する
CLOSED: [2023-12-03 Sun 18:14]
:LOGBOOK:
CLOCK: [2023-12-03 Sun 16:57]--[2023-12-03 Sun 17:22] =>  0:25
CLOCK: [2023-12-03 Sun 16:26]--[2023-12-03 Sun 16:51] =>  0:25
CLOCK: [2023-12-03 Sun 15:51]--[2023-12-03 Sun 16:16] =>  0:25
CLOCK: [2023-12-03 Sun 14:41]--[2023-12-03 Sun 15:06] =>  0:25
:END:
一覧からランダムに選択する。
** DONE HomeStateを作成する
CLOSED: [2023-12-04 Mon 20:44]
:LOGBOOK:
CLOCK: [2023-12-04 Mon 08:48]--[2023-12-04 Mon 09:13] =>  0:25
CLOCK: [2023-12-04 Mon 00:44]--[2023-12-04 Mon 01:09] =>  0:25
CLOCK: [2023-12-03 Sun 19:51]--[2023-12-03 Sun 20:16] =>  0:25
:END:
ゲームプレイの基軸になるメニュー。
** DONE 脱出できるようにする
CLOSED: [2023-12-04 Mon 20:45]
:LOGBOOK:
CLOCK: [2023-12-03 Sun 17:51]--[2023-12-03 Sun 18:16] =>  0:25
:END:
脱出階層で脱出できるようにする。
** DONE 背景を設定する
CLOSED: [2023-12-05 Tue 00:46]
:LOGBOOK:
CLOCK: [2023-12-04 Mon 22:24]--[2023-12-04 Mon 22:49] =>  0:25
CLOCK: [2023-12-04 Mon 21:59]--[2023-12-04 Mon 22:24] =>  0:25
CLOCK: [2023-12-04 Mon 21:34]--[2023-12-04 Mon 21:59] =>  0:25
:END:
背景を追加する。スプライトはあるけど、同じでいいのか。いや、スプライトは1枚の画像を分割するものだから、同じ感じでは扱えないな。変えるとsystemも変えないといけない。面倒なのでとりあえずいいか。
** DONE サブメニュー追加
CLOSED: [2023-12-07 Thu 00:31]
:LOGBOOK:
CLOCK: [2023-12-07 Thu 00:05]--[2023-12-07 Thu 00:30] =>  0:25
CLOCK: [2023-12-06 Wed 23:25]--[2023-12-06 Wed 23:50] =>  0:25
CLOCK: [2023-12-06 Wed 22:32]--[2023-12-06 Wed 22:57] =>  0:25
CLOCK: [2023-12-06 Wed 22:07]--[2023-12-06 Wed 22:32] =>  0:25
CLOCK: [2023-12-06 Wed 00:38]--[2023-12-06 Wed 01:03] =>  0:25
CLOCK: [2023-12-05 Tue 00:47]--[2023-12-05 Tue 01:12] =>  0:25
CLOCK: [2023-12-04 Mon 20:46]--[2023-12-04 Mon 21:11] =>  0:25
:END:
拠点メニューにはサブメニューがある。どうやるか考える。

- 別stateでやる
  - 大量にstateができるのどうなのという感じ。背景コンポーネントとかも同じ感じで準備しないといけない
- リファレンスではどうやっているのだろう。ポーズでは、後ろを透明に表示しつつ、メニューを表示している。あれと同じようなことができないか
  - ポーズメニューでは、OnStopでポーズメニューのエンティティのみを削除しているようだ。ほかのstateでは、すべてのエンティティを削除することが異なる
** DONE pauseステート作成
CLOSED: [2023-12-07 Thu 08:30]
:LOGBOOK:
CLOCK: [2023-12-07 Thu 08:05]--[2023-12-07 Thu 08:30] =>  0:25
CLOCK: [2023-12-07 Thu 00:31]--[2023-12-07 Thu 00:56] =>  0:25
:END:

デバッグで便利なので。
** DONE アイテムを生成する
CLOSED: [2023-12-10 Sun 11:16]
:LOGBOOK:
CLOCK: [2023-12-10 Sun 00:44]--[2023-12-10 Sun 01:09] =>  0:25
CLOCK: [2023-12-10 Sun 00:11]--[2023-12-10 Sun 00:36] =>  0:25
CLOCK: [2023-12-09 Sat 23:40]--[2023-12-10 Sun 00:05] =>  0:25
CLOCK: [2023-12-09 Sat 22:34]--[2023-12-09 Sat 22:59] =>  0:25
CLOCK: [2023-12-09 Sat 22:08]--[2023-12-09 Sat 22:33] =>  0:25
CLOCK: [2023-12-09 Sat 21:20]--[2023-12-09 Sat 21:45] =>  0:25
CLOCK: [2023-12-09 Sat 20:54]--[2023-12-09 Sat 21:19] =>  0:25
CLOCK: [2023-12-09 Sat 17:34]--[2023-12-09 Sat 17:59] =>  0:25
CLOCK: [2023-12-09 Sat 17:09]--[2023-12-09 Sat 17:34] =>  0:25
CLOCK: [2023-12-09 Sat 16:44]--[2023-12-09 Sat 17:09] =>  0:25
CLOCK: [2023-12-09 Sat 12:08]--[2023-12-09 Sat 12:33] =>  0:25
CLOCK: [2023-12-09 Sat 11:39]--[2023-12-09 Sat 12:04] =>  0:25
CLOCK: [2023-12-09 Sat 10:56]--[2023-12-09 Sat 11:21] =>  0:25
CLOCK: [2023-12-09 Sat 10:28]--[2023-12-09 Sat 10:53] =>  0:25
CLOCK: [2023-12-09 Sat 09:58]--[2023-12-09 Sat 10:23] =>  0:25
CLOCK: [2023-12-08 Fri 00:54]--[2023-12-08 Fri 01:19] =>  0:25
CLOCK: [2023-12-08 Fri 00:09]--[2023-12-08 Fri 00:34] =>  0:25
CLOCK: [2023-12-07 Thu 23:16]--[2023-12-07 Thu 23:41] =>  0:25
CLOCK: [2023-12-07 Thu 22:44]--[2023-12-07 Thu 23:09] =>  0:25
CLOCK: [2023-12-07 Thu 22:13]--[2023-12-07 Thu 22:38] =>  0:25
CLOCK: [2023-12-07 Thu 21:37]--[2023-12-07 Thu 22:02] =>  0:25
CLOCK: [2023-12-07 Thu 21:09]--[2023-12-07 Thu 21:34] =>  0:25
CLOCK: [2023-12-07 Thu 20:44]--[2023-12-07 Thu 21:09] =>  0:25
CLOCK: [2023-12-07 Thu 20:16]--[2023-12-07 Thu 20:41] =>  0:25
CLOCK: [2023-12-07 Thu 19:51]--[2023-12-07 Thu 20:16] =>  0:25
CLOCK: [2023-12-07 Thu 08:31]--[2023-12-07 Thu 08:56] =>  0:25
:END:
アイテムを追加する。

- item
  - consumable
  - name
  - description

まずそれぞれのコンポーネントの雛形をファイルで作成する。

- items
  - entityA
    - componentA(consumable)
    - componentB(weight)
  - entityB
    - componentA(consumable)
    - componentB(weight)

で、そのデータを読み込んでエンティティとコンポーネントを生成する関数を作る。

#+caption: engineも作らないといけない
#+begin_src go
	componentList := loader.EntityComponentList{}
	// engineとgameは同数でなければならない。分割されているのが面倒だな…
	componentList.Engine = append(componentList.Engine, loader.EngineComponentList{})
	componentList.Game = append(componentList.Game, gloader.GameComponentList{
		Item: &gc.Item{},
	})
	loader.AddEntities(world, componentList)
#+end_src

#+caption: 元ネタ
#+begin_src rust
pub fn spawn_named_item(
#+end_src
** DONE UI設計
CLOSED: [2023-12-10 Sun 12:55]
:LOGBOOK:
CLOCK: [2023-12-10 Sun 01:09]--[2023-12-10 Sun 01:34] =>  0:25
:END:
いちいちゲーム画面見るのもアレなので、書いておく。
** DONE UIエンティティだけを消す
CLOSED: [2023-12-10 Sun 12:55]
:LOGBOOK:
CLOCK: [2023-12-10 Sun 12:30]--[2023-12-10 Sun 12:55] =>  0:25
CLOCK: [2023-12-10 Sun 11:54]--[2023-12-10 Sun 12:19] =>  0:25
CLOCK: [2023-12-10 Sun 11:17]--[2023-12-10 Sun 11:42] =>  0:25
:END:
DeleteAllEntitiesでステート切り替え時のUIリセットをしている。entitiesが全部消えるので、困る。ほとんどの場合、UIだけをリセットすればよさそう。

UIコンポーネントと、UIコンポーネントを消す関数を作ればよさそう。
** DONE 各メニューを作成する
CLOSED: [2023-12-10 Sun 14:52]
:LOGBOOK:
CLOCK: [2023-12-10 Sun 14:22]--[2023-12-10 Sun 14:47] =>  0:25
CLOCK: [2023-12-10 Sun 13:53]--[2023-12-10 Sun 14:18] =>  0:25
CLOCK: [2023-12-10 Sun 13:12]--[2023-12-10 Sun 13:37] =>  0:25
:END:
仮の内容で全部作る。
** DONE アイテムを使う
CLOSED: [2023-12-24 Sun 08:38]
:PROPERTIES:
:Effort:   10:00
:END:
:LOGBOOK:
CLOCK: [2023-12-23 Sat 23:49]--[2023-12-24 Sun 00:14] =>  0:25
CLOCK: [2023-12-23 Sat 23:22]--[2023-12-23 Sat 23:47] =>  0:25
CLOCK: [2023-12-23 Sat 22:45]--[2023-12-23 Sat 23:10] =>  0:25
CLOCK: [2023-12-23 Sat 17:41]--[2023-12-23 Sat 18:06] =>  0:25
CLOCK: [2023-12-23 Sat 17:13]--[2023-12-23 Sat 17:38] =>  0:25
CLOCK: [2023-12-23 Sat 15:52]--[2023-12-23 Sat 16:17] =>  0:25
CLOCK: [2023-12-23 Sat 15:11]--[2023-12-23 Sat 15:36] =>  0:25
CLOCK: [2023-12-23 Sat 14:09]--[2023-12-23 Sat 14:34] =>  0:25
CLOCK: [2023-12-23 Sat 12:53]--[2023-12-23 Sat 13:18] =>  0:25
CLOCK: [2023-12-23 Sat 12:16]--[2023-12-23 Sat 12:41] =>  0:25
CLOCK: [2023-12-23 Sat 11:51]--[2023-12-23 Sat 12:16] =>  0:25
CLOCK: [2023-12-23 Sat 11:25]--[2023-12-23 Sat 11:50] =>  0:25
CLOCK: [2023-12-23 Sat 10:56]--[2023-12-23 Sat 11:21] =>  0:25
CLOCK: [2023-12-23 Sat 02:07]--[2023-12-23 Sat 02:32] =>  0:25
CLOCK: [2023-12-23 Sat 01:27]--[2023-12-23 Sat 01:52] =>  0:25
CLOCK: [2023-12-23 Sat 00:53]--[2023-12-23 Sat 01:18] =>  0:25
CLOCK: [2023-12-23 Sat 00:22]--[2023-12-23 Sat 00:47] =>  0:25
CLOCK: [2023-12-22 Fri 00:49]--[2023-12-22 Fri 01:14] =>  0:25
CLOCK: [2023-12-22 Fri 00:08]--[2023-12-22 Fri 00:33] =>  0:25
CLOCK: [2023-12-21 Thu 23:27]--[2023-12-21 Thu 23:52] =>  0:25
CLOCK: [2023-12-21 Thu 22:25]--[2023-12-21 Thu 22:50] =>  0:25
CLOCK: [2023-12-21 Thu 22:00]--[2023-12-21 Thu 22:25] =>  0:25
CLOCK: [2023-12-21 Thu 09:01]--[2023-12-21 Thu 09:26] =>  0:25
CLOCK: [2023-12-21 Thu 08:36]--[2023-12-21 Thu 09:01] =>  0:25
CLOCK: [2023-12-21 Thu 00:53]--[2023-12-21 Thu 01:18] =>  0:25
CLOCK: [2023-12-21 Thu 00:25]--[2023-12-21 Thu 00:50] =>  0:25
CLOCK: [2023-12-21 Thu 00:00]--[2023-12-21 Thu 00:25] =>  0:25
CLOCK: [2023-12-20 Wed 23:27]--[2023-12-20 Wed 23:52] =>  0:25
CLOCK: [2023-12-20 Wed 23:02]--[2023-12-20 Wed 23:27] =>  0:25
:END:

- キャラクタを作る
- ステータスを作る
- 影響を与えられるようにする
- memo
  - 可変のアイテムリストについて、選択中の印をつける必要がある
  - 選択中の座標をとってきて、選択印の位置を変化させればいいのかな

- ゲーム
  - 戦車にしたいけど、戦闘システムがややこしくなる
  - 合成とかで各自の装備メインにしたいんだよな
** DONE アイテムを選択して使えるようにする
CLOSED: [2023-12-24 Sun 10:19]
:PROPERTIES:
:Effort:   3:00
:END:
:LOGBOOK:
CLOCK: [2023-12-24 Sun 09:35]--[2023-12-24 Sun 10:00] =>  0:25
CLOCK: [2023-12-24 Sun 09:10]--[2023-12-24 Sun 09:35] =>  0:25
CLOCK: [2023-12-24 Sun 08:40]--[2023-12-24 Sun 09:05] =>  0:25
:END:
今は固定にしている。
** DONE アイテムリストをebitenUIで作る
CLOSED: [2023-12-30 Sat 17:04]
:LOGBOOK:
CLOCK: [2023-12-30 Sat 16:21]--[2023-12-30 Sat 16:46] =>  0:25
CLOCK: [2023-12-30 Sat 15:50]--[2023-12-30 Sat 16:15] =>  0:25
CLOCK: [2023-12-30 Sat 15:10]--[2023-12-30 Sat 15:35] =>  0:25
:END:
いい感じに、スクロールできるようにする。
** DONE サイドメニューを表示する
CLOSED: [2023-12-30 Sat 22:17]
:LOGBOOK:
CLOCK: [2023-12-30 Sat 18:21]--[2023-12-30 Sat 19:08] =>  0:47
:END:

性能を表示するサイドパネル。

- [X] メニューバーが太いのを直す
** DONE UIをリロードせずに反映できるようにする
CLOSED: [2024-01-03 Wed 17:33]
アイテムを使用したときにUIをリロードしているが、スクロール位置が元へ戻ってしまうのでリロードしないようにする。

また、表示ジャンルの切替もあるので、リロードすると保持しなくて困る。
** DONE ebitenUIを使う
CLOSED: [2024-01-03 Wed 17:54]
:PROPERTIES:
:Effort:   5:00
:END:
:LOGBOOK:
CLOCK: [2023-12-30 Sat 16:46]--[2023-12-30 Sat 17:11] =>  0:25
CLOCK: [2023-12-30 Sat 10:57]--[2023-12-30 Sat 10:58] =>  0:01
CLOCK: [2023-12-29 Fri 22:25]--[2023-12-29 Fri 22:50] =>  0:25
CLOCK: [2023-12-29 Fri 21:59]--[2023-12-29 Fri 22:24] =>  0:25
CLOCK: [2023-12-27 Wed 17:57]--[2023-12-27 Wed 18:10] =>  0:13
CLOCK: [2023-12-27 Wed 15:31]--[2023-12-27 Wed 16:12] =>  0:41
CLOCK: [2023-12-27 Wed 00:52]--[2023-12-27 Wed 01:17] =>  0:25
CLOCK: [2023-12-27 Wed 00:27]--[2023-12-27 Wed 00:52] =>  0:25
CLOCK: [2023-12-25 Mon 23:46]--[2023-12-26 Tue 00:11] =>  0:25
CLOCK: [2023-12-25 Mon 23:11]--[2023-12-25 Mon 23:36] =>  0:25
CLOCK: [2023-12-25 Mon 22:46]--[2023-12-25 Mon 23:11] =>  0:25
CLOCK: [2023-12-25 Mon 22:02]--[2023-12-25 Mon 22:27] =>  0:25
CLOCK: [2023-12-25 Mon 21:36]--[2023-12-25 Mon 22:01] =>  0:25
CLOCK: [2023-12-24 Sun 23:19]--[2023-12-24 Sun 23:44] =>  0:25
CLOCK: [2023-12-24 Sun 22:52]--[2023-12-24 Sun 23:17] =>  0:25
CLOCK: [2023-12-24 Sun 22:27]--[2023-12-24 Sun 22:52] =>  0:25
CLOCK: [2023-12-24 Sun 20:37]--[2023-12-24 Sun 21:02] =>  0:25
CLOCK: [2023-12-24 Sun 19:26]--[2023-12-24 Sun 19:51] =>  0:25
CLOCK: [2023-12-24 Sun 18:57]--[2023-12-24 Sun 19:22] =>  0:25
CLOCK: [2023-12-24 Sun 18:28]--[2023-12-24 Sun 18:53] =>  0:25
CLOCK: [2023-12-24 Sun 18:02]--[2023-12-24 Sun 18:27] =>  0:25
CLOCK: [2023-12-24 Sun 17:25]--[2023-12-24 Sun 17:50] =>  0:25
CLOCK: [2023-12-24 Sun 15:58]--[2023-12-24 Sun 16:23] =>  0:25
CLOCK: [2023-12-24 Sun 15:32]--[2023-12-24 Sun 15:57] =>  0:25
CLOCK: [2023-12-24 Sun 15:07]--[2023-12-24 Sun 15:32] =>  0:25
:END:
使う。
** DONE アイテムに対するアクションを選べるようにする
CLOSED: [2024-01-03 Wed 18:19]
:LOGBOOK:
CLOCK: [2024-01-03 Wed 17:54]--[2024-01-03 Wed 18:19] =>  0:25
CLOCK: [2023-12-24 Sun 14:31]--[2023-12-24 Sun 14:56] =>  0:25
CLOCK: [2023-12-24 Sun 14:06]--[2023-12-24 Sun 14:31] =>  0:25
CLOCK: [2023-12-24 Sun 12:36]--[2023-12-24 Sun 13:01] =>  0:25
CLOCK: [2023-12-24 Sun 12:10]--[2023-12-24 Sun 12:35] =>  0:25
CLOCK: [2023-12-24 Sun 11:39]--[2023-12-24 Sun 12:04] =>  0:25
CLOCK: [2023-12-24 Sun 11:10]--[2023-12-24 Sun 11:35] =>  0:25
CLOCK: [2023-12-24 Sun 10:44]--[2023-12-24 Sun 11:09] =>  0:25
CLOCK: [2023-12-24 Sun 10:19]--[2023-12-24 Sun 10:44] =>  0:25
:END:
- [X] 使う
- [X] 捨てる
- [X] キャンセル

- ebitenUIを組み込もうとしている
  - うまくUpdateできてないからか、windowが開けない
  - 今の構造だと、作成したuiをDrawとUpdateの2つができない
    - UIもコンポーネント
- ebitenUIだとキーボード志向にしにくそう
  - いや対応できるか
** DONE メッセージシステムの命令追加
CLOSED: [2024-01-16 Tue 08:23]
:PROPERTIES:
:Effort:   5:00
:END:
:LOGBOOK:
CLOCK: [2024-01-15 Mon 23:34]--[2024-01-15 Mon 23:59] =>  0:25
CLOCK: [2024-01-15 Mon 22:57]--[2024-01-15 Mon 23:22] =>  0:25
CLOCK: [2024-01-15 Mon 22:15]--[2024-01-15 Mon 22:40] =>  0:25
CLOCK: [2024-01-15 Mon 21:50]--[2024-01-15 Mon 22:15] =>  0:25
CLOCK: [2024-01-15 Mon 00:32]--[2024-01-15 Mon 00:57] =>  0:25
CLOCK: [2024-01-14 Sun 22:29]--[2024-01-14 Sun 22:54] =>  0:25
CLOCK: [2024-01-14 Sun 22:02]--[2024-01-14 Sun 22:27] =>  0:25
CLOCK: [2024-01-14 Sun 21:27]--[2024-01-14 Sun 21:52] =>  0:25
CLOCK: [2024-01-14 Sun 20:44]--[2024-01-14 Sun 21:09] =>  0:25
CLOCK: [2024-01-14 Sun 20:19]--[2024-01-14 Sun 20:44] =>  0:25
CLOCK: [2024-01-14 Sun 19:52]--[2024-01-14 Sun 20:17] =>  0:25
CLOCK: [2024-01-14 Sun 16:41]--[2024-01-14 Sun 17:06] =>  0:25
CLOCK: [2024-01-14 Sun 16:14]--[2024-01-14 Sun 16:39] =>  0:25
CLOCK: [2024-01-14 Sun 15:44]--[2024-01-14 Sun 16:09] =>  0:25
CLOCK: [2024-01-14 Sun 15:16]--[2024-01-14 Sun 15:41] =>  0:25
CLOCK: [2024-01-14 Sun 15:01]--[2024-01-14 Sun 15:16] =>  0:15
CLOCK: [2024-01-14 Sun 14:30]--[2024-01-14 Sun 14:55] =>  0:25
CLOCK: [2024-01-14 Sun 14:02]--[2024-01-14 Sun 14:27] =>  0:25
CLOCK: [2024-01-14 Sun 13:36]--[2024-01-14 Sun 14:01] =>  0:25
CLOCK: [2024-01-14 Sun 13:10]--[2024-01-14 Sun 13:35] =>  0:25
CLOCK: [2024-01-14 Sun 12:42]--[2024-01-14 Sun 13:07] =>  0:25
CLOCK: [2024-01-14 Sun 12:14]--[2024-01-14 Sun 12:39] =>  0:25
CLOCK: [2024-01-14 Sun 11:37]--[2024-01-14 Sun 12:02] =>  0:25
CLOCK: [2024-01-14 Sun 11:11]--[2024-01-14 Sun 11:36] =>  0:25
CLOCK: [2024-01-14 Sun 10:39]--[2024-01-14 Sun 11:04] =>  0:25
CLOCK: [2024-01-14 Sun 10:14]--[2024-01-14 Sun 10:39] =>  0:25
:END:

背景とか。

- 文字列に開始の合図がないから、識別子との判断ができてないみたい
- 画像を重ねる順番を指定できない
- 倉庫番のポーズではできてるからできそう
  - ただポーズは表示順が後なので...。明らかにポーズ画面は後だ。メッセージシステムの場合は背景が後で変わる可能性がある。
** DONE インベントリメニューでpanicになる
CLOSED: [2024-01-19 Fri 00:24]
別のステートに遷移したあと、再び戻ってクリックするとエラーになる。

- アイテム選択
- 「使う」クリックでpanic
- partyContainerの数が2つずつ増えているようだ
- 1度しか付与されないようにしたら解決した
** DONE アイテムを使う対象を選べるようにする
CLOSED: [2024-01-20 Sat 11:58]
:PROPERTIES:
:Effort:   5:00
:END:
:LOGBOOK:
CLOCK: [2024-01-17 Wed 22:39]--[2024-01-17 Wed 23:04] =>  0:25
CLOCK: [2024-01-17 Wed 21:48]--[2024-01-17 Wed 22:13] =>  0:25
CLOCK: [2024-01-17 Wed 08:25]--[2024-01-17 Wed 08:51] =>  0:26
CLOCK: [2024-01-17 Wed 07:36]--[2024-01-17 Wed 08:01] =>  0:25
CLOCK: [2024-01-17 Wed 07:11]--[2024-01-17 Wed 07:36] =>  0:25
CLOCK: [2024-01-17 Wed 06:46]--[2024-01-17 Wed 07:11] =>  0:25
CLOCK: [2024-01-16 Tue 23:46]--[2024-01-17 Wed 00:11] =>  0:25
CLOCK: [2024-01-16 Tue 23:17]--[2024-01-16 Tue 23:42] =>  0:25
CLOCK: [2024-01-16 Tue 08:37]--[2024-01-16 Tue 09:02] =>  0:25
CLOCK: [2024-01-04 Thu 12:37]--[2024-01-04 Thu 13:02] =>  0:25
CLOCK: [2024-01-04 Thu 11:11]--[2024-01-04 Thu 11:36] =>  0:25
CLOCK: [2024-01-04 Thu 10:46]--[2024-01-04 Thu 11:11] =>  0:25
CLOCK: [2024-01-04 Thu 10:21]--[2024-01-04 Thu 10:46] =>  0:25
:END:
- 回復薬の場合は1人の味方を選ぶ
- 回復スプレーの場合は全員を選択している画面になる
- ロケット弾の場合は1人の敵を選ぶ
- 決めること
  - 使う対象
    - 敵
    - 味方
    - なし
  - 対象数
    - 単数
    - 複数
  - 使う場面
    - 戦闘中のみと制限されるものがある
    - 戦闘中
    - フィールド / 拠点

- パーティ一覧を表示する
- 選択したときに適用する
- ProvidesHealingがあるものは自動で仲間対象でも良い、が
** DONE ゲーム設計
CLOSED: [2024-01-20 Sat 11:55]
:LOGBOOK:
CLOCK: [2024-01-13 Sat 23:10]--[2024-01-13 Sat 23:35] =>  0:25
CLOCK: [2024-01-13 Sat 22:45]--[2024-01-13 Sat 23:10] =>  0:25
CLOCK: [2024-01-13 Sat 22:19]--[2024-01-13 Sat 22:44] =>  0:25
CLOCK: [2024-01-12 Fri 00:18]--[2024-01-12 Fri 00:43] =>  0:25
CLOCK: [2024-01-11 Thu 23:10]--[2024-01-11 Thu 23:35] =>  0:25
CLOCK: [2024-01-10 Wed 21:10]--[2024-01-10 Wed 21:35] =>  0:25
CLOCK: [2024-01-07 Sun 22:18]--[2024-01-07 Sun 22:43] =>  0:25
CLOCK: [2024-01-07 Sun 16:34]--[2024-01-07 Sun 16:59] =>  0:25
CLOCK: [2024-01-06 Sat 18:52]--[2024-01-06 Sat 19:17] =>  0:25
:END:
どうするか。
** DONE UIのリファクタ
CLOSED: [2024-02-18 Sun 16:58]
:LOGBOOK:
CLOCK: [2024-02-18 Sun 16:33]--[2024-02-18 Sun 16:58] =>  0:25
CLOCK: [2024-02-18 Sun 14:01]--[2024-02-18 Sun 14:26] =>  0:25
CLOCK: [2024-02-18 Sun 12:18]--[2024-02-18 Sun 12:43] =>  0:25
CLOCK: [2024-02-18 Sun 11:50]--[2024-02-18 Sun 12:15] =>  0:25
CLOCK: [2024-02-18 Sun 11:25]--[2024-02-18 Sun 11:50] =>  0:25
CLOCK: [2024-02-18 Sun 11:00]--[2024-02-18 Sun 11:25] =>  0:25
CLOCK: [2024-02-18 Sun 01:15]--[2024-02-18 Sun 01:40] =>  0:25
CLOCK: [2024-02-18 Sun 00:34]--[2024-02-18 Sun 00:59] =>  0:25
CLOCK: [2024-02-17 Sat 22:49]--[2024-02-17 Sat 23:14] =>  0:25
CLOCK: [2024-02-17 Sat 22:20]--[2024-02-17 Sat 22:45] =>  0:25
CLOCK: [2024-02-17 Sat 21:54]--[2024-02-17 Sat 22:19] =>  0:25
CLOCK: [2024-02-17 Sat 21:17]--[2024-02-17 Sat 21:42] =>  0:25
CLOCK: [2024-02-17 Sat 20:49]--[2024-02-17 Sat 21:14] =>  0:25
CLOCK: [2024-02-17 Sat 20:23]--[2024-02-17 Sat 20:48] =>  0:25
CLOCK: [2024-02-17 Sat 16:57]--[2024-02-17 Sat 17:22] =>  0:25
CLOCK: [2024-01-01 Mon 20:26]--[2024-01-01 Mon 20:51] =>  0:25
CLOCK: [2024-01-01 Mon 20:01]--[2024-01-01 Mon 20:26] =>  0:25
CLOCK: [2023-12-31 Sun 09:21]--[2023-12-31 Sun 09:46] =>  0:25
CLOCK: [2023-12-30 Sat 22:23]--[2023-12-30 Sat 22:48] =>  0:25
:END:

- [X] 統一感をもって扱えるようにする
- [X] 説明文とメニューの間隔を空ける
- resourceに各UI(idle, hover, pressed)を初期化しておく
- 参考コードを見てどうやっているかを調べる
- 完璧でなくてよい。やっても成果が見えなくて辛いので、次をやるか
- UI間に依存があって、思ったよりきれいに書けなかった感
- まあ、アイテム画面と同じスタイルで別のメニューを表示したくなったら考えればいい
** DONE 武器を追加する
CLOSED: [2024-02-18 Sun 22:56]
:LOGBOOK:
CLOCK: [2024-02-18 Sun 21:19]--[2024-02-18 Sun 21:44] =>  0:25
CLOCK: [2024-02-18 Sun 20:53]--[2024-02-18 Sun 21:18] =>  0:25
CLOCK: [2024-02-18 Sun 20:27]--[2024-02-18 Sun 20:52] =>  0:25
CLOCK: [2024-02-18 Sun 19:56]--[2024-02-18 Sun 20:21] =>  0:25
CLOCK: [2024-02-18 Sun 18:23]--[2024-02-18 Sun 18:48] =>  0:25
CLOCK: [2024-02-18 Sun 17:57]--[2024-02-18 Sun 18:22] =>  0:25
CLOCK: [2024-02-18 Sun 17:26]--[2024-02-18 Sun 17:51] =>  0:25
CLOCK: [2024-02-18 Sun 16:59]--[2024-02-18 Sun 17:24] =>  0:25
:END:
使うアイテムとは別枠で表示できる。

- 武器名
- 元となった武器名
- 攻撃力
- 命中
- 攻撃回数
- 属性
  - 拳銃
  - 小銃
  - 刀剣

武器の性能にはばらつきがある。種類によってベースがある。ばらつきやすさが違う。

メニューをトグルさせるためにどうするか。既存のchildを削除して、再度追加すればいいか。
** DONE 素材を追加する
CLOSED: [2024-02-21 Wed 00:20]
:LOGBOOK:
CLOCK: [2024-02-21 Wed 19:25]--[2024-02-21 Wed 19:50] =>  0:25
:END:
- 素材は表示が違う。個数を表示することになっている。どうするか
- 素材はグローバルに個数カウントできればよい。そのへんはほかのエンティティと事情が違う
- 表示方法を変えないといけないがどうするか
  - しょせん中のテキストが違うだけ
- [ ] 素材を追加する
  - 素材は個数カウント。エンティティを追加する必要はあるか。単なるmapでもよい
  - ただ、同じtomlで生成できるほうがわかりやすい。nameとdescriptionあるし

インターフェースから考える。

#+begin_src go
  // tomlにあるものはカウント0で初期化される

  material.GetCount("ガラクタ") // => 3
  material.IncCount("ガラクタ", 1)
  material.DeclCount("小さな花", 1)
#+end_src
** DONE 合成画面を作る
CLOSED: [2024-02-23 Fri 01:49]
:LOGBOOK:
CLOCK: [2024-02-22 Thu 23:29]--[2024-02-22 Thu 23:54] =>  0:25
CLOCK: [2024-02-22 Thu 23:02]--[2024-02-22 Thu 23:27] =>  0:25
CLOCK: [2024-02-22 Thu 22:05]--[2024-02-22 Thu 22:30] =>  0:25
CLOCK: [2024-02-22 Thu 21:33]--[2024-02-22 Thu 21:58] =>  0:25
CLOCK: [2024-02-22 Thu 20:50]--[2024-02-22 Thu 21:15] =>  0:25
CLOCK: [2024-02-22 Thu 20:23]--[2024-02-22 Thu 20:48] =>  0:25
CLOCK: [2024-02-22 Thu 18:49]--[2024-02-22 Thu 19:14] =>  0:25
CLOCK: [2024-02-22 Thu 18:18]--[2024-02-22 Thu 18:43] =>  0:25
CLOCK: [2024-02-22 Thu 15:48]--[2024-02-22 Thu 16:13] =>  0:25
CLOCK: [2024-02-22 Thu 15:23]--[2024-02-22 Thu 15:48] =>  0:25
CLOCK: [2024-02-22 Thu 00:16]--[2024-02-22 Thu 00:41] =>  0:25
CLOCK: [2024-02-21 Wed 23:46]--[2024-02-22 Thu 00:11] =>  0:25
CLOCK: [2024-02-21 Wed 22:33]--[2024-02-21 Wed 22:58] =>  0:25
CLOCK: [2024-02-21 Wed 22:02]--[2024-02-21 Wed 22:27] =>  0:25
CLOCK: [2024-02-21 Wed 21:32]--[2024-02-21 Wed 21:57] =>  0:25
CLOCK: [2024-02-21 Wed 20:16]--[2024-02-21 Wed 20:41] =>  0:25
CLOCK: [2024-02-21 Wed 19:51]--[2024-02-21 Wed 20:16] =>  0:25
CLOCK: [2024-02-21 Wed 19:00]--[2024-02-21 Wed 19:25] =>  0:25
CLOCK: [2024-02-21 Wed 00:45]--[2024-02-21 Wed 01:10] =>  0:25
CLOCK: [2024-02-21 Wed 00:20]--[2024-02-21 Wed 00:45] =>  0:25
CLOCK: [2024-02-20 Tue 23:17]--[2024-02-20 Tue 23:42] =>  0:25
CLOCK: [2024-02-20 Tue 22:31]--[2024-02-20 Tue 22:56] =>  0:25
CLOCK: [2024-02-20 Tue 21:49]--[2024-02-20 Tue 22:14] =>  0:25
CLOCK: [2024-02-20 Tue 21:22]--[2024-02-20 Tue 21:47] =>  0:25
CLOCK: [2024-02-20 Tue 20:57]--[2024-02-20 Tue 21:22] =>  0:25
CLOCK: [2024-02-20 Tue 00:36]--[2024-02-20 Tue 01:01] =>  0:25
CLOCK: [2024-02-20 Tue 00:05]--[2024-02-20 Tue 00:30] =>  0:25
CLOCK: [2024-02-19 Mon 22:49]--[2024-02-19 Mon 23:14] =>  0:25
CLOCK: [2024-02-19 Mon 21:32]--[2024-02-19 Mon 21:57] =>  0:25
CLOCK: [2024-02-19 Mon 20:50]--[2024-02-19 Mon 21:16] =>  0:26
CLOCK: [2024-02-19 Mon 20:14]--[2024-02-19 Mon 20:39] =>  0:25
CLOCK: [2024-02-19 Mon 19:24]--[2024-02-19 Mon 19:49] =>  0:25
:END:
まず画面を作って、そこから共通化していけばいいか。

- 装備画面
- 合成画面
- 使用画面

これらは似たようなUIを持つ。

- カテゴリ選択
- アイテムメニュー(左)
  - 中身の取得ロジックは異なる
  - 中に入るデータの種類が違うということ
- 性能メニュー(右)

あたりは共通。ボタンのアクションが違うくらいか。

合成に必要なもの。

- レシピ
  - 素材の種類と個数
  - 鉄の剣 = ~[{鉄くず,2}, {木の棒,1}]~
- [X] レシピを表示する
- [X] 合成する関数を作成する
  - アイテム名からベースアイテムを作成する
  - 加工する
- [ ] レシピをもとに作成できるようにする
  - 所持数量とレシピを比較して満たしていると合成が選択できる
  - 合成を選択すると、所持数量を減らし該当アイテムを追加する

#+begin_src go
  gc := Craft("ハンドガン", 4) ecs.Entity // 品名、合成オプション
  Spawn(gc, spawntype.OnBackpack)
#+end_src
** DONE アイテムUIまわりをリファクタする
CLOSED: [2024-02-23 Fri 01:49]
:LOGBOOK:
CLOCK: [2024-02-18 Sun 23:40]--[2024-02-19 Mon 00:05] =>  0:25
CLOCK: [2024-02-18 Sun 23:01]--[2024-02-18 Sun 23:26] =>  0:25
:END:
- [X] グローバル変数を構造体のフィールドに移す

合成とか装備品変更とか、よく似たUIで別画面を作ることになる。別で作ってたら大変なことになる。再利用するためにはどうすればよいか。
** DONE 乗り物をどうするか
CLOSED: [2024-02-23 Fri 01:49]

結論、小さなSFチックな機械を導入する。戦闘には参加しないがサポートする。知能は持たない。

パーティ全体を強化できるようなのがあると面白そうに思える。乗り物はそういう強化が自然にできて面白い。人だけだとつけ外し要素がない。ただし、戦車だとシステムが複雑になる可能性がある。アイテム合成が生きないような。

- ドローンやタレットとか、自律的な何か
- 戦闘で交じるのはややこしくて困る
- 非戦闘な乗り物ってないな
- 歩数制限のもっともな理由がほしい
  - 燃料とか食べ物の類
- 小さなSFチックな機械を導入する。それがないと遺跡に入れない的な。いろいろ効果をつけられる
- 戦車は逆に敵が強くなるとかの理由をつけて遺跡に入らない。戦闘が面倒になるので
** DONE タイル移動でなくするか
CLOSED: [2024-02-23 Fri 01:57]
いやでもアニメーションやリアルタイムとなると大変そうだから、タイル移動のままがよさそう。

あまりローグライクさせる意味はなさそう。敵を避けにくい。banbandonを参考にして自由移動にするか。
** DONE 一貫させるためインターフェースを定義する
CLOSED: [2024-02-23 Fri 17:15]
stateごとにコードがバラバラで、直していくのが辛い。

一部共通部分もあるが、違う部分も多いので、しょうがないところではある。

インターフェース化して、ある程度同じにするか。とはいえ、アイテム画面がそこまで種類多いかと言われるとそうでもない。3、4個だからあまり神経質にならなくてもいい。
** DONE 武器コンポーネントに属性を追加する
CLOSED: [2024-02-23 Fri 21:30]
:LOGBOOK:
CLOCK: [2024-02-23 Fri 21:04]--[2024-02-23 Fri 21:30] =>  0:26
CLOCK: [2024-02-23 Fri 20:33]--[2024-02-23 Fri 20:58] =>  0:25
CLOCK: [2024-02-23 Fri 19:51]--[2024-02-23 Fri 20:16] =>  0:25
CLOCK: [2024-02-23 Fri 19:15]--[2024-02-23 Fri 19:40] =>  0:25
CLOCK: [2024-02-23 Fri 18:50]--[2024-02-23 Fri 19:15] =>  0:25
CLOCK: [2024-02-23 Fri 18:25]--[2024-02-23 Fri 18:50] =>  0:25
CLOCK: [2024-02-23 Fri 17:42]--[2024-02-23 Fri 18:07] =>  0:25
:END:
- 火炎(耐火)
- 電気(耐電)
- 光力(耐光)

だとそのまますぎるか。光は異色だが、SFらしさを出すのに良い。ややこしいのであまり属性を増やしたくない。冷気(耐冷)を追加した。

時代背景的に、SFではない。でも合成するとSFになるよな。SFよりの現代、でよいか。
** DONE アイテム種別に防具を追加する
CLOSED: [2024-02-24 Sat 17:57]
:LOGBOOK:
CLOCK: [2024-02-24 Sat 01:05]--[2024-02-24 Sat 01:30] =>  0:25
CLOCK: [2024-02-24 Sat 00:40]--[2024-02-24 Sat 01:05] =>  0:25
CLOCK: [2024-02-23 Fri 22:59]--[2024-02-23 Fri 23:24] =>  0:25
CLOCK: [2024-02-23 Fri 22:24]--[2024-02-23 Fri 22:49] =>  0:25
:END:
- 消耗品
- 武器
- 防具
- 素材

で、種別が揃う。
** DONE 武器種別を追加する
CLOSED: [2024-02-24 Sat 19:39]
:LOGBOOK:
CLOCK: [2024-02-24 Sat 19:07]--[2024-02-24 Sat 19:32] =>  0:25
CLOCK: [2024-02-24 Sat 18:07]--[2024-02-24 Sat 18:32] =>  0:25
:END:
剣とか銃とか。
** DONE 合成画面をリファクタする
CLOSED: [2024-02-24 Sat 19:33]
:LOGBOOK:
CLOCK: [2024-02-23 Fri 16:36]--[2024-02-23 Fri 17:01] =>  0:25
CLOCK: [2024-02-23 Fri 15:22]--[2024-02-23 Fri 15:47] =>  0:25
CLOCK: [2024-02-23 Fri 14:49]--[2024-02-23 Fri 15:14] =>  0:25
CLOCK: [2024-02-23 Fri 14:08]--[2024-02-23 Fri 14:33] =>  0:25
CLOCK: [2024-02-23 Fri 13:43]--[2024-02-23 Fri 14:08] =>  0:25
CLOCK: [2024-02-23 Fri 13:13]--[2024-02-23 Fri 13:38] =>  0:25
CLOCK: [2024-02-23 Fri 12:48]--[2024-02-23 Fri 13:13] =>  0:25
CLOCK: [2024-02-23 Fri 12:14]--[2024-02-23 Fri 12:39] =>  0:25
CLOCK: [2024-02-23 Fri 11:23]--[2024-02-23 Fri 11:48] =>  0:25
CLOCK: [2024-02-23 Fri 10:58]--[2024-02-23 Fri 11:23] =>  0:25
CLOCK: [2024-02-23 Fri 10:33]--[2024-02-23 Fri 10:58] =>  0:25
CLOCK: [2024-02-23 Fri 10:07]--[2024-02-23 Fri 10:32] =>  0:25
CLOCK: [2024-02-23 Fri 02:04]--[2024-02-23 Fri 02:29] =>  0:25
:END:
書き直す。
** DONE 装備画面を作る
CLOSED: [2024-02-26 Mon 23:01]
:LOGBOOK:
CLOCK: [2024-02-25 Sun 15:09]--[2024-02-25 Sun 15:34] =>  0:25
CLOCK: [2024-02-25 Sun 14:40]--[2024-02-25 Sun 15:05] =>  0:25
CLOCK: [2024-02-25 Sun 14:12]--[2024-02-25 Sun 14:37] =>  0:25
CLOCK: [2024-02-25 Sun 13:45]--[2024-02-25 Sun 14:10] =>  0:25
CLOCK: [2024-02-25 Sun 13:07]--[2024-02-25 Sun 13:32] =>  0:25
CLOCK: [2024-02-25 Sun 12:41]--[2024-02-25 Sun 13:06] =>  0:25
CLOCK: [2024-02-25 Sun 12:16]--[2024-02-25 Sun 12:41] =>  0:25
CLOCK: [2024-02-25 Sun 11:51]--[2024-02-25 Sun 12:16] =>  0:25
CLOCK: [2024-02-25 Sun 11:16]--[2024-02-25 Sun 11:41] =>  0:25
CLOCK: [2024-02-25 Sun 10:50]--[2024-02-25 Sun 11:15] =>  0:25
CLOCK: [2024-02-25 Sun 10:24]--[2024-02-25 Sun 10:49] =>  0:25
CLOCK: [2024-02-25 Sun 09:59]--[2024-02-25 Sun 10:24] =>  0:25
CLOCK: [2024-02-25 Sun 01:47]--[2024-02-25 Sun 02:12] =>  0:25
CLOCK: [2024-02-25 Sun 01:22]--[2024-02-25 Sun 01:47] =>  0:25
CLOCK: [2024-02-25 Sun 00:47]--[2024-02-25 Sun 01:12] =>  0:25
CLOCK: [2024-02-24 Sat 22:58]--[2024-02-24 Sat 23:23] =>  0:25
CLOCK: [2024-02-24 Sat 20:30]--[2024-02-24 Sat 20:55] =>  0:25
CLOCK: [2024-02-24 Sat 19:54]--[2024-02-24 Sat 20:19] =>  0:25
:END:
- [X] スロットを作成する
  - コードから装備させる
- [X] 装備画面を作成する
  - スロット表示画面。各キャラごと
- [X] 選択画面を作成する
  - ここで選択したものが前で選択したスロットに装備される
  - モードをどう表現するか。これをstateとしてやるのはやりすぎな気もする
  - 選択モードとだけしとけばいいか
  - 選択モードだと、左側を武器リストにする。スライダーがあるから、全く同じにならなそうだな
** DONE enumのバリデーション
CLOSED: [2024-03-01 Fri 22:19]
:LOGBOOK:
CLOCK: [2024-03-01 Fri 21:43]--[2024-03-01 Fri 22:08] =>  0:25
CLOCK: [2024-03-01 Fri 21:18]--[2024-03-01 Fri 21:43] =>  0:25
CLOCK: [2024-03-01 Fri 20:46]--[2024-03-01 Fri 21:11] =>  0:25
:END:
楽にバリデーションできる書き方にする。
