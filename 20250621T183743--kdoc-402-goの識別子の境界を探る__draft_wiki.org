:properties:
:ID: 20250621T183743
:mtime:    20250622075806
:ctime:    20250621183747
:end:
#+title:      KDOC 402: Goの識別子の境界を探る
#+date:       [2025-06-21 Sat 18:37]
#+filetags:   :draft:wiki:
#+identifier: 20250621T183743

# (kd/denote-kdoc-rename)
# (denote-rename-file-using-front-matter (buffer-file-name) 0)
# (save-excursion (while (re-search-backward ":draft" nil t) (replace-match "")))
# (flush-lines "^\\#\s.+?")

# ====ポリシー。
# 1ファイル1アイデア。
# 1ファイルで内容を完結させる。
# 常にほかのエントリとリンクする。
# 自分の言葉を使う。
# 参考文献を残しておく。
# 文献メモの場合は、感想と混ぜないこと。1つのアイデアに反する
# ツェッテルカステンの議論に寄与するか。それで本を書けと言われて書けるか
# 頭のなかやツェッテルカステンにある問いとどのようにかかわっているか
# エントリ間の接続を発見したら、接続エントリを追加する。カード間にあるリンクの関係を説明するカード。
# アイデアがまとまったらアウトラインエントリを作成する。リンクをまとめたエントリ。
# エントリを削除しない。古いカードのどこが悪いかを説明する新しいカードへのリンクを追加する。
# 恐れずにカードを追加する。無意味の可能性があっても追加しておくことが重要。
# 個人の感想・意思表明ではない。事実や書籍情報に基づいている

# ====永久保存メモのルール。
# 自分の言葉で書く。
# 後から読み返して理解できる。
# 他のメモと関連付ける。
# ひとつのメモにひとつのことだけを書く。
# メモの内容は1枚で完結させる。
# 論文の中に組み込み、公表できるレベルである。

# ====水準を満たす価値があるか。
# その情報がどういった文脈で使えるか。
# どの程度重要な情報か。
# そのページのどこが本当に必要な部分なのか。
# 公表できるレベルの洞察を得られるか

# ====フロー。
# 1. 「走り書きメモ」「文献メモ」を書く
# 2. 1日1回既存のメモを見て、自分自身の研究、思考、興味にどのように関係してくるかを見る
# 3. 追加すべきものだけ追加する

* この文書のステータス
- 作成
  - [X] 2025-06-21 貴島
- レビュー
  - [ ] <署名>
# (progn (kill-line -1) (insert (format "  - [X] %s 貴島" (format-time-string "%Y-%m-%d"))))

# チェックリスト ================
# 関連をつけた。
# タイトルがフォーマット通りにつけられている。
# 内容をブラウザに表示して読んだ(作成とレビューのチェックは同時にしない)。
# 文脈なく読めるのを確認した。
# おばあちゃんに説明できる。
# いらない見出しを削除した。
# タグを適切にした。
# すべてのコメントを削除した。
* 概要
# 本文(見出しも設定する)

多くの現代的なプログラミング言語では識別子にUnicodeの文字(コードポイント)を使えるということを知っていたが、ちゃんとGoの仕様を調べたことはなかった。確認する。

最初に、何も調べずに実行してみて確かめてみる。違和感がすごいが、英語ネイティブが見ているのはこういう景色なのだろう。

#+caption: すべて正しいシンタックス。ビルド、実行できる
#+begin_src go
  import "fmt"
  func main() {
          // 変数名に日本語が使える
          あ := "a"
          fmt.Println(あ)

          // 関数名に日本語が使える
          漢字()

          // 型名に日本語が使える
          type 地名 struct {}
          var 江戸川橋 地名
          fmt.Println(江戸川橋)
  }

  func 漢字() {}
#+end_src

#+RESULTS:
#+begin_src
a
{}
#+end_src

調べてみる。

[[https://go.dev/ref/spec#letter][言語仕様書]]によると、識別子(~identifier~)の定義はこうだ。出てきた ~letter~, ~unicode_letter~ も辿って調べた。

#+caption: identifierの定義
#+begin_src code
  identifier = letter { letter | unicode_digit } .
  letter     = unicode_letter | "_" .
  unicode_letter = /* a Unicode code point categorized as "Letter" */ .
#+end_src

ここからわかること、考察。

- Unicodeにはカテゴリという概念がある。letter(文字), mark(結合記号), number(数字), punctuation(句読点), ...
  - 結合記号はアクセント記号のように、ほかの文字と組み合わせて使う記号のことである
  - たとえば漢字はletterのサブカテゴリotherに属する
- 識別子の先頭にletterカテゴリの文字があれば、あとはなんでもいい。逆にいえば、結合記号、数字、句読点、...から開始できない
- アンダースコア ~_~ は句読点カテゴリの文字である。例外的にletterとして許容されている
  - 自然に使っていて、全く意識してなかった

以上から、無効なパターンを試した[fn:1]。

#+caption: 結合記号、数字、句読点、...から開始できない
#+begin_src shell :results output
  tmpfile=$(mktemp /tmp/tmpgo.XXXXXX.go)

  cat > $tmpfile <<EOF
  package main

  func main() {
    // 先頭のアクセント記号は不可
    ◌̀ := "あ"
    print(◌̀)

    // 先頭の数字は不可
    ９ := "あ"
    print(９)

    // 先頭の漢数字はletter扱いなので問題ない
    九 := "あ"
    print(九)

    // 先頭の句読点は不可
    、 := "あ"
    print(、)

    // 先頭のシンボルは不可
    👍 := "あ"
    print(👍)
  }
  EOF

  go run $tmpfile 2>&1
  rm $tmpfile
#+end_src

#+RESULTS:
#+begin_src
# command-line-arguments
/tmp/tmpgo.FO1KQz.go:5:3: invalid character U+25CC '◌' in identifier
/tmp/tmpgo.FO1KQz.go:5:6: invalid character U+0300 '̀' in identifier
/tmp/tmpgo.FO1KQz.go:6:9: invalid character U+25CC '◌' in identifier
/tmp/tmpgo.FO1KQz.go:6:12: invalid character U+0300 '̀' in identifier
/tmp/tmpgo.FO1KQz.go:9:3: identifier cannot begin with digit U+FF19 '９'
/tmp/tmpgo.FO1KQz.go:10:9: identifier cannot begin with digit U+FF19 '９'
/tmp/tmpgo.FO1KQz.go:17:3: invalid character U+3001 '、' in identifier
/tmp/tmpgo.FO1KQz.go:18:9: invalid character U+3001 '、' in identifier
/tmp/tmpgo.FO1KQz.go:21:3: invalid character U+1F44D '👍' in identifier
/tmp/tmpgo.FO1KQz.go:22:9: invalid character U+1F44D '👍' in identifier
/tmp/tmpgo.FO1KQz.go:22:9: too many errors
#+end_src

調べる前の認識は、正確ではなかったのがわかった。

* 関連
# 関連するエントリ。なぜ関連させたか理由を書く。意味のあるつながりを意識的につくる。
# - この事実は自分のこのアイデアとどう整合するか。
# - この現象はあの理論でどう説明できるか。
# - ふたつのアイデアは互いに矛盾するか、互いを補っているか。
# - いま聞いた内容は以前に聞いたことがなかったか。
# - メモ y についてメモ x はどういう意味か。
# - 対立する
# - 修正する
# - 補足する
# - 付け加えるもの
# - アイデア同士を組み合わせて新しいものを生み出せないか
# - どんな疑問が浮かんだか
- [[https://en.wikipedia.org/wiki/Unicode_character_property][Unicode character property - Wikipedia]]。カテゴリ表を参考にした
- [[https://go.dev/ref/spec#letter][The Go Programming Language Specification]]。Goの言語仕様書

* Footnotes

[fn:1] org-babelで標準エラーを出すためシェルスクリプトから実行している。
