#+title: create-link
#+author: kijimad

* Emacsパッケージ(#2)を作りました。
[[https://github.com/kijimaD/create-link][GitHub - kijimaD/create-link: Formatted link generator package for Emacs.]]
* やったこと
** Chrome拡張CreateLinkをEmacsに移植した
~CreateLink~ というChrome拡張があります。それのEmacs版を作成してみました。

** 元になったCreateLinkの説明🔗
現在のページの名前のついたリンクを取得する拡張です。GitHubとかSlackに貼り付けるときに便利なやつです。

- CreateLinkのリンク(Chrome ウェブストア)
https://chrome.google.com/webstore/detail/create-link/gcmghdmnkfdbncmnmlkkglmnnhagajbm?hl=ja

- 例: Markdownリンクだと、
https://www.google.com -> [Google](https://www.google.com/) みたいな。

(ブラウザのデモ)
** 作成したcreate-linkのデモ
- 各種ブラウザ eww, w3m
- 各種フォーマット HTML(default), LaTeX, Markdown, MediaWiki, Org-mode
- ブラウザ以外のときはローカルファイルのパスを取得する

に対応してます。

(実行・オプション操作のデモ)
* コード
作ってすぐ公式パッケージ集にPRを送りました(まだ返信来ない)。
ライセンスの部分を除くと、90行くらいしかありません。

半分くらいはユーザ設定のための決まりきった記述のため、実際は40行ほど。

#+begin_src emacs-lisp
;;; Code:

(require 'eww)
(require 'w3m)

(defgroup create-link nil
  "Generate a formatted current page link."
  :group 'convenience
  :prefix "create-link-")

(defcustom create-link-default-format 'html
  "Default link format."
  :group 'create-link
  :type '(choice (const :tag "html" html)
                 (const :tag "markdown" markdown)
                 (other :tag "org" org)
                 (other :tag "media-wiki" media-wiki)
		 (other :tag "latex" latex)))

;; Format keywords:
;; %url% - http://www.google.com/
;; %title% - Google
(defcustom create-link-format-html "<a href='%url%'>%title%</a>"
  "HTML link format."
  :group 'create-link
  :type 'string)

(defcustom create-link-format-markdown "[%title%](%url%)"
  "Markdown link format."
  :group 'create-link
  :type 'string)

(defcustom create-link-format-org "[[%url%][%title%]]"
  "Org-mode link format."
  :group 'create-link
  :type 'string)

(defcustom create-link-format-media-wiki "[%url% %title%]"
  "Media Wiki link format."
  :group 'create-link
  :type 'string)

(defcustom create-link-format-latex "\\href{%url%}{%title%}"
  "Latex link format."
  :group 'create-link
  :type 'string)

(defun create-link-raw-format ()
  "Choose a format type by the custom variable."
  (pcase create-link-default-format
    (`html
     create-link-format-html)
    (`markdown
     create-link-format-markdown)
    (`org
     create-link-format-org)
    (`media-wiki
     create-link-format-media-wiki)
    (`latex
     create-link-format-latex)))

(defun create-link-replace-dictionary ()
  "Convert format keyword to corresponding one."
  `(("%url%" . ,(cdr (assoc 'url (create-link-get-information))))
    ("%title%" . ,(cdr (assoc 'title (create-link-get-information))))))

(defun create-link-make-format ()
  "Fill format keywords."
  (seq-reduce
   (lambda (string regexp-replacement-pair)
     (replace-regexp-in-string
      (car regexp-replacement-pair)
      (cdr regexp-replacement-pair)
      string))
   (create-link-replace-dictionary)
   (create-link-raw-format))) ;; <a href='%url%'>%title%</a> とか。ループのinitial value。

;; <a href='%url%'>%title%</a>
;; <a href='https://...'>%title%</a> 前の値を保持
;; <a href='https://...'>Google</a> さらに置換

#+begin_comment
;; ここを綺麗に書くのが一番むずかしかった。...複数の文字列置換
;; 一つの置換(replace-regexp-in-string)は関数があるが、複数指定はできない。

;; (seq-reduce)の第一引数はコードブロックに相当するところ。ループ一回で何をするか。
;; stringはraw-format(<a href='%url%'>%title%</a>など)を受け取り、regexp-replacement-pairはreplace-dictionaryのイテレーション分が入る。ブロック引数。
#+end_comment

(defun create-link-get-information ()
  "Get keyword information on your browser."
  (cond ((string-match-p "eww" (buffer-name))
         `((title . ,(plist-get eww-data :title))
           (url . ,(plist-get eww-data :url))))
        ((string-match-p "w3m" (buffer-name))
         `((title . ,w3m-current-title)
           (url . ,w3m-current-url)))
        ;; otherwise, create-link to the file-buffer
        (t
         `((title . ,(buffer-name))
           (url . ,(buffer-file-name))))))

;; エントリーポイント
;;;###autoload
(defun create-link ()
  "Create formatted link."
  (interactive)
  (message "Copied! %s" (create-link-make-format))
  (kill-new (create-link-make-format)))

(provide 'create-link)

;;; create-link.el ends here
#+end_src

* 知見
** 短くてもOK
コードやアイデアの参考にするため使っているパッケージのコードを眺めていて、こういう短いものでも多くの人に使われているパッケージはけっこうあることに気づきました。

これらはけっこう使われているもの。

[[/home/kijima/.emacs.d/.cask/27.1/elpa/add-node-modules-path-20210305.312/add-node-modules-path.el][add-node-modules-path.el]] - node環境の読み込み 86行
[[/home/kijima/.emacs.d/.cask/27.1/elpa/org-bullets-20200317.1740/org-bullets.el][org-bullets.el]] - リストをいい感じに表示する 109行
[[/home/kijima/.emacs.d/.cask/27.1/elpa/define-word-20210103.1812/define-word.el][define-word.el]] - オンライン辞書 132行
[[/home/kijima/.emacs.d/.cask/27.1/elpa/rubocop-20210309.1241/rubocop.el][rubocop.el]] - rubocopをいい感じに 267行

- 重要なのは一つのことをうまくやること。

** 他の人に使ってもらえるとうれしい
パッケージ集PRは審査中ですが、マージ前に使ってくれた人がいて、PRが来ました。
褒めてくれてテンション上がる。
https://github.com/kijimaD/create-link/pull/7

#+begin_quote
I like this package, is simple and useful.
#+end_quote

審査にむけてやったこと↓

- わかりやすいコンセプト。
- 空気を読んだ動作をする、限られたインターフェース(create-link)という関数1つで、複数フォーマット・ブラウザに対応できる。
- ちゃんとドキュメントを用意した [[https://github.com/kijimaD/create-link][kijimaD/create-link]]
- オプションを用意した。フォーマットの種類やブラウザを増やすのは、とても簡単です。


* ロードマップ
フォーマットリンクを取得するだけのシンプルなコードではありますが、拡張はいろいろ考えられます。

** 入出力のバリエーションを増やす
- エクスポート形式増加 HTML,LaTeX,Markdown,MediaWiki,Org-mode
- ユーザ定義のフィルター … chromeの拡張の方にはある
- ~Magit(Gitクライアント)~ の場合。(すでにGitHubリンクの生成はある) ~git-link~ これの整形バージョン、みたいな
- PDF(ページを取ることはできそう。リンクでページ番号を表現できるか？)
- シェルだったらカレントディレクトリを取る
- Gitリポジトリのときは、相対ディレクトリを取得するオプション

** コンテクストによる動作のバリエーションを増やす
- 明示して出力フォーマットを選べるコマンドを追加

- テキスト選択中だと、タイトルに選択したところを入れる
or
- 選択URLにアクセスして、Titleをスクレイピング。リンクを完成させる

** ユーザの拡張性を増やす
- フックを追加…たとえばリンク生成 → {フック} → コピー前としておく。
フックでは式が使えるのでなんでもできる。動的にタイムスタンプを加えたり、連番を振ったりとか？。単なる文字列フィルターよりはるかに強力。誰かがもっと便利な使い方を編み出してくれるかもしれない。

** まとめ
0. 移植技を覚えました。要件が明確＋元ソースを読むことができると楽。プログラムに集中できて美味しい。
1. ちょっとした不便さは少ないコードで解決できるかもしれません。
2. ごく単純なコンセプトでも、拡張の方向性は意外と多いです。
