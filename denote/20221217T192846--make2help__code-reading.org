:PROPERTIES:
:header-args+: :wrap :results raw
:END:
#+title:      make2helpを読んだメモ
#+date:       [2022-12-17 Sat 19:28]
#+filetags:   :code-reading:
#+identifier: 20221217T192846

* make2help
:LOGBOOK:
CLOCK: [2022-12-17 Sat 21:08]--[2022-12-17 Sat 21:33] =>  0:25
CLOCK: [2022-12-17 Sat 20:43]--[2022-12-17 Sat 21:08] =>  0:25
CLOCK: [2022-12-17 Sat 20:18]--[2022-12-17 Sat 20:43] =>  0:25
:END:
make2helpはmakefileのヘルプを表示する Go パッケージ。Makefileのコメントから自動生成してくれる。ミニマルな機能で取り組みやすかった。

** 流れ
- コマンドライン処理
- ファイルをパース
- 固定のキーワードは無視
- タスクとコメントを抽出
- いい感じに表示

** ファイル分け
*** rules
表示を扱うmap構造とメソッド集。
*** make2help
ファイルのスキャンしてrulesを生成する。
*** cli
コマンドライン引数を処理する。
*** cmd/main
cli構造体のメソッドを実行する。
* 一般的に使えそうなmemo
** cliが呼び出す部分
#+begin_src git-permalink
https://github.com/Songmu/make2help/blob/7d76187a6c490467f3e0ca879ae6eb1c1ec0d30b/cli.go#L43-L53
#+end_src

#+RESULTS:
#+begin_results go
	r := rules{}
	for _, f := range argv {
		tmpRule, err := scan(f)
		if err != nil {
			fmt.Fprintln(cli.ErrStream, err)
			return exitCodeErr
		}
		r = r.merge(tmpRule)
	}
	fmt.Fprint(cli.OutStream, r.string(all, colorful))
	return exitCodeOK
#+end_results

- CLIがiotaでOKや各種Errorを返す。すべて正常実行の扱いで、panicを使わない
- ruleを作成して、それぞれバッファに書き込む

** 引数をparseする
#+begin_src git-permalink
https://github.com/Songmu/make2help/blob/7d76187a6c490467f3e0ca879ae6eb1c1ec0d30b/cli.go#L61-L74
#+end_src

#+RESULTS:
#+begin_results go
func parseFlags(argv []string) (restArgv []string, isHelp, isAll bool) {
	for _, v := range argv {
		if helpReg.MatchString(v) {
			isHelp = true
			return
		}
		if allReg.MatchString(v) {
			isAll = true
			continue
		}
		restArgv = append(restArgv, v)
	}
	return
}
#+end_results

直に受け取ったargvをパースする。

** 正規表現 MustCompile を使う

動的ではなく、コンパイル前に実行する。

#+begin_src git-permalink
https://github.com/Songmu/make2help/blob/7d76187a6c490467f3e0ca879ae6eb1c1ec0d30b/cli.go#L56-L59
#+end_src

#+RESULTS:
#+begin_results go
var (
	helpReg = regexp.MustCompile(`^--?h(?:elp)?$`)
	allReg  = regexp.MustCompile(`^--?all$`)
)
#+end_results

** 定数で扱う

文字列が、キーワードに含まれるどうかを判定する。

#+caption: 最初に、定数で各キーワードを定義しておく
#+begin_src git-permalink
https://github.com/Songmu/make2help/blob/7d76187a6c490467f3e0ca879ae6eb1c1ec0d30b/make2help.go#L12-L14
#+end_src

#+RESULTS:
#+begin_results go
const (
	builtInTargetPhony              = ".PHONY"
	builtInTargetSuffixes           = ".SUFFIXES"
#+end_results

それをmapにする。

#+caption: mapにする
#+begin_src git-permalink
https://github.com/Songmu/make2help/blob/7d76187a6c490467f3e0ca879ae6eb1c1ec0d30b/make2help.go#L29-L34
#+end_src

#+RESULTS:
#+begin_results go

var (
	ruleReg          = regexp.MustCompile(`^([^\s]+)\s*:`)
	isBuiltInTargets = map[string]bool{
		builtInTargetPhony:              true,
		builtInTargetSuffixes:           true,
#+end_results

使用例。targetにキーワードが含まれていれば、trueを返す。

#+begin_src git-permalink
https://github.com/Songmu/make2help/blob/7d76187a6c490467f3e0ca879ae6eb1c1ec0d30b/make2help.go#L69
#+end_src

#+RESULTS:
#+begin_results go
			if isBuiltInTargets[target] {
#+end_results

** cmd/main.goでは構造体の初期化と1メソッドを呼び出すだけ
1行だけでシンプル。

#+begin_src git-permalink
https://github.com/Songmu/make2help/blob/7d76187a6c490467f3e0ca879ae6eb1c1ec0d30b/cmd/make2help/main.go#L10
#+end_src

#+RESULTS:
#+begin_results go
	os.Exit((&make2help.CLI{ErrStream: os.Stderr, OutStream: os.Stdout}).Run(os.Args[1:]))
#+end_results

** 同じことを検証する

#+caption: reflect.DeepEqualを使う
#+begin_src git-permalink
https://github.com/Songmu/make2help/blob/7d76187a6c490467f3e0ca879ae6eb1c1ec0d30b/make2help_test.go#L25-L27
#+end_src

#+RESULTS:
#+begin_results
	if !reflect.DeepEqual(r, expect) {
		t.Errorf("somthing went wrong\n   got: %#v\nexpect: %#v", r, expect)
	}
#+end_results

** rulesのメソッド

#+caption: rulesはmap
#+begin_src git-permalink
https://github.com/Songmu/make2help/blob/7d76187a6c490467f3e0ca879ae6eb1c1ec0d30b/rules.go#L11
#+end_src

#+RESULTS:
#+begin_results go
type rules map[string][]string
#+end_results

rulesに定義されているメソッドはmerge, string, indentAndRules。シンプルな定義と、一般的な操作として定義されている。
