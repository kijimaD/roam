#+title:      Cコンパイラを書く
#+date:       [2023-08-15 Tue 23:14]
#+filetags:   :code:
#+identifier: 20230815T231456

* Cコンパイラを書く
:LOGBOOK:
CLOCK: [2023-08-14 Mon 23:16]--[2023-08-14 Mon 23:41] =>  0:25
CLOCK: [2023-08-14 Mon 22:24]--[2023-08-14 Mon 22:49] =>  0:25
CLOCK: [2023-08-14 Mon 21:19]--[2023-08-14 Mon 21:44] =>  0:25
CLOCK: [2023-08-14 Mon 20:45]--[2023-08-14 Mon 21:10] =>  0:25
CLOCK: [2023-08-14 Mon 20:20]--[2023-08-14 Mon 20:45] =>  0:25
CLOCK: [2023-08-14 Mon 00:13]--[2023-08-14 Mon 00:38] =>  0:25
CLOCK: [2023-08-13 Sun 23:39]--[2023-08-14 Mon 00:04] =>  0:25
CLOCK: [2023-08-13 Sun 22:47]--[2023-08-13 Sun 23:12] =>  0:25
CLOCK: [2023-08-13 Sun 22:13]--[2023-08-13 Sun 22:38] =>  0:25
CLOCK: [2023-08-13 Sun 21:36]--[2023-08-13 Sun 22:01] =>  0:25
CLOCK: [2023-08-13 Sun 17:42]--[2023-08-13 Sun 18:07] =>  0:25
CLOCK: [2023-08-13 Sun 15:31]--[2023-08-13 Sun 15:56] =>  0:25
CLOCK: [2023-08-13 Sun 13:02]--[2023-08-13 Sun 13:27] =>  0:25
CLOCK: [2023-08-13 Sun 12:33]--[2023-08-13 Sun 12:58] =>  0:25
CLOCK: [2023-08-13 Sun 11:46]--[2023-08-13 Sun 12:11] =>  0:25
CLOCK: [2023-08-13 Sun 11:10]--[2023-08-13 Sun 11:35] =>  0:25
CLOCK: [2023-08-13 Sun 10:45]--[2023-08-13 Sun 11:10] =>  0:25
CLOCK: [2023-08-13 Sun 10:20]--[2023-08-13 Sun 10:45] =>  0:25
CLOCK: [2023-08-13 Sun 09:55]--[2023-08-13 Sun 10:20] =>  0:25
CLOCK: [2023-08-13 Sun 01:46]--[2023-08-13 Sun 02:11] =>  0:25
CLOCK: [2023-08-12 Sat 22:56]--[2023-08-12 Sat 23:21] =>  0:25
CLOCK: [2023-08-12 Sat 22:31]--[2023-08-12 Sat 22:56] =>  0:25
CLOCK: [2023-08-12 Sat 22:06]--[2023-08-12 Sat 22:31] =>  0:25
CLOCK: [2023-08-12 Sat 21:41]--[2023-08-12 Sat 22:06] =>  0:25
CLOCK: [2023-08-12 Sat 21:03]--[2023-08-12 Sat 21:28] =>  0:25
CLOCK: [2023-08-12 Sat 16:34]--[2023-08-12 Sat 16:59] =>  0:25
CLOCK: [2023-08-12 Sat 16:08]--[2023-08-12 Sat 16:33] =>  0:25
CLOCK: [2023-08-12 Sat 15:30]--[2023-08-12 Sat 15:55] =>  0:25
CLOCK: [2023-08-12 Sat 15:05]--[2023-08-12 Sat 15:30] =>  0:25
CLOCK: [2023-08-12 Sat 14:40]--[2023-08-12 Sat 15:05] =>  0:25
CLOCK: [2023-08-02 Wed 21:59]--[2023-08-02 Wed 22:24] =>  0:25
CLOCK: [2023-08-02 Wed 21:32]--[2023-08-02 Wed 21:57] =>  0:25
CLOCK: [2023-08-02 Wed 21:07]--[2023-08-02 Wed 21:32] =>  0:25
CLOCK: [2023-08-01 Tue 23:54]--[2023-08-02 Wed 00:19] =>  0:25
CLOCK: [2023-08-01 Tue 23:29]--[2023-08-01 Tue 23:54] =>  0:25
CLOCK: [2023-08-01 Tue 23:03]--[2023-08-01 Tue 23:28] =>  0:25
CLOCK: [2023-08-01 Tue 00:37]--[2023-08-01 Tue 01:02] =>  0:25
CLOCK: [2023-08-01 Tue 00:04]--[2023-08-01 Tue 00:29] =>  0:25
CLOCK: [2023-07-31 Mon 23:27]--[2023-07-31 Mon 23:52] =>  0:25
CLOCK: [2023-07-31 Mon 22:28]--[2023-07-31 Mon 22:53] =>  0:25
CLOCK: [2023-07-31 Mon 21:29]--[2023-07-31 Mon 21:54] =>  0:25
CLOCK: [2023-07-31 Mon 20:59]--[2023-07-31 Mon 21:24] =>  0:25
CLOCK: [2023-07-30 Sun 22:38]--[2023-07-30 Sun 23:03] =>  0:25
CLOCK: [2023-07-30 Sun 20:54]--[2023-07-30 Sun 21:19] =>  0:25
CLOCK: [2023-07-30 Sun 16:38]--[2023-07-30 Sun 17:03] =>  0:25
CLOCK: [2023-07-30 Sun 16:09]--[2023-07-30 Sun 16:34] =>  0:25
CLOCK: [2023-07-30 Sun 15:44]--[2023-07-30 Sun 16:09] =>  0:25
CLOCK: [2023-07-30 Sun 15:01]--[2023-07-30 Sun 15:26] =>  0:25
CLOCK: [2023-07-30 Sun 14:36]--[2023-07-30 Sun 15:01] =>  0:25
CLOCK: [2023-07-30 Sun 14:08]--[2023-07-30 Sun 14:34] =>  0:26
CLOCK: [2023-07-30 Sun 13:43]--[2023-07-30 Sun 14:08] =>  0:25
CLOCK: [2023-07-30 Sun 11:38]--[2023-07-30 Sun 12:03] =>  0:25
CLOCK: [2023-07-29 Sat 20:59]--[2023-07-29 Sat 21:24] =>  0:25
CLOCK: [2023-07-29 Sat 20:27]--[2023-07-29 Sat 20:52] =>  0:25
CLOCK: [2023-07-29 Sat 20:00]--[2023-07-29 Sat 20:25] =>  0:25
CLOCK: [2023-07-29 Sat 18:56]--[2023-07-29 Sat 19:21] =>  0:25
CLOCK: [2023-07-29 Sat 18:29]--[2023-07-29 Sat 18:55] =>  0:26
CLOCK: [2023-07-29 Sat 18:03]--[2023-07-29 Sat 18:28] =>  0:25
CLOCK: [2023-07-29 Sat 12:48]--[2023-07-29 Sat 13:13] =>  0:25
CLOCK: [2023-07-29 Sat 12:23]--[2023-07-29 Sat 12:48] =>  0:25
CLOCK: [2023-07-29 Sat 11:58]--[2023-07-29 Sat 12:23] =>  0:25
CLOCK: [2023-07-29 Sat 11:33]--[2023-07-29 Sat 11:58] =>  0:25
CLOCK: [2023-07-28 Fri 23:16]--[2023-07-28 Fri 23:41] =>  0:25
CLOCK: [2023-07-28 Fri 22:39]--[2023-07-28 Fri 23:04] =>  0:25
CLOCK: [2023-07-28 Fri 22:14]--[2023-07-28 Fri 22:39] =>  0:25
CLOCK: [2023-07-28 Fri 21:37]--[2023-07-28 Fri 22:02] =>  0:25
CLOCK: [2023-07-28 Fri 21:00]--[2023-07-28 Fri 21:25] =>  0:25
CLOCK: [2023-07-28 Fri 01:36]--[2023-07-28 Fri 02:01] =>  0:25
CLOCK: [2023-07-27 Thu 09:09]--[2023-07-27 Thu 09:34] =>  0:25
CLOCK: [2023-07-27 Thu 00:38]--[2023-07-27 Thu 01:03] =>  0:25
CLOCK: [2023-07-27 Thu 00:12]--[2023-07-27 Thu 00:37] =>  0:25
CLOCK: [2023-07-26 Wed 22:59]--[2023-07-26 Wed 23:24] =>  0:25
CLOCK: [2023-07-26 Wed 22:34]--[2023-07-26 Wed 22:59] =>  0:25
CLOCK: [2023-07-26 Wed 22:06]--[2023-07-26 Wed 22:31] =>  0:25
CLOCK: [2023-07-26 Wed 21:37]--[2023-07-26 Wed 22:02] =>  0:25
CLOCK: [2023-07-26 Wed 21:02]--[2023-07-26 Wed 21:27] =>  0:25
CLOCK: [2023-07-26 Wed 20:37]--[2023-07-26 Wed 21:02] =>  0:25
CLOCK: [2023-07-26 Wed 20:12]--[2023-07-26 Wed 20:37] =>  0:25
CLOCK: [2023-07-26 Wed 19:46]--[2023-07-26 Wed 20:12] =>  0:26
CLOCK: [2023-07-26 Wed 00:51]--[2023-07-26 Wed 01:16] =>  0:25
CLOCK: [2023-07-26 Wed 00:21]--[2023-07-26 Wed 00:46] =>  0:25
CLOCK: [2023-07-25 Tue 23:56]--[2023-07-26 Wed 00:21] =>  0:25
:END:
** この文書のステータス
- [ ] 作成
- [ ] レビュー
** 概要
自作言語だとだるくなるので、既存の言語仕様で作る。

- 8ccを参考にする。アセンブラの部分が参考になる
- いきなりGoを書いているけど、いったん理解してからがいい感じがする...
- パーサーとかレキサーを他から持ってきているので、乖離していく
- ちょっとずつ進めること、動作テストコードを書く。各コミットでテストがあるので、追いつくことはできる
- まだ1文しか考えなくてよい
** 導入
背景。
* Tasks
** WIP 8ccを読む
:LOGBOOK:
CLOCK: [2023-08-26 Sat 10:55]--[2023-08-26 Sat 11:20] =>  0:25
CLOCK: [2023-08-26 Sat 10:30]--[2023-08-26 Sat 10:55] =>  0:25
CLOCK: [2023-08-25 Fri 22:37]--[2023-08-25 Fri 23:02] =>  0:25
CLOCK: [2023-08-25 Fri 21:36]--[2023-08-25 Fri 22:01] =>  0:25
CLOCK: [2023-08-25 Fri 20:42]--[2023-08-25 Fri 21:07] =>  0:25
CLOCK: [2023-08-25 Fri 20:16]--[2023-08-25 Fri 20:41] =>  0:25
CLOCK: [2023-08-24 Thu 23:16]--[2023-08-24 Thu 23:41] =>  0:25
CLOCK: [2023-08-22 Tue 17:43]--[2023-08-22 Tue 18:08] =>  0:25
CLOCK: [2023-08-11 Fri 17:44]--[2023-08-11 Fri 18:09] =>  0:25
CLOCK: [2023-08-11 Fri 17:15]--[2023-08-11 Fri 17:40] =>  0:25
CLOCK: [2023-08-11 Fri 16:17]--[2023-08-11 Fri 16:42] =>  0:25
CLOCK: [2023-08-11 Fri 15:24]--[2023-08-11 Fri 15:50] =>  0:26
CLOCK: [2023-08-11 Fri 14:43]--[2023-08-11 Fri 15:08] =>  0:25
CLOCK: [2023-08-11 Fri 14:18]--[2023-08-11 Fri 14:43] =>  0:25
CLOCK: [2023-08-09 Wed 23:58]--[2023-08-10 Thu 00:23] =>  0:25
CLOCK: [2023-08-09 Wed 22:52]--[2023-08-09 Wed 23:17] =>  0:25
CLOCK: [2023-08-09 Wed 22:21]--[2023-08-09 Wed 22:46] =>  0:25
CLOCK: [2023-08-09 Wed 21:25]--[2023-08-09 Wed 21:50] =>  0:25
CLOCK: [2023-08-05 Sat 16:59]--[2023-08-05 Sat 17:24] =>  0:25
CLOCK: [2023-07-30 Sun 11:02]--[2023-07-30 Sun 11:27] =>  0:25
CLOCK: [2023-07-30 Sun 10:29]--[2023-07-30 Sun 10:54] =>  0:25
CLOCK: [2023-07-29 Sat 23:03]--[2023-07-29 Sat 23:28] =>  0:25
CLOCK: [2023-07-29 Sat 22:33]--[2023-07-29 Sat 22:58] =>  0:25
:END:

まず全体像を把握する。
** TODO 終端のチェックをやる
セミコロンをチェックする。
** TODO 変数宣言まわりで式の評価順が間違っているのを直す
:LOGBOOK:
CLOCK: [2023-08-15 Tue 23:50]--[2023-08-16 Wed 00:15] =>  0:25
CLOCK: [2023-08-15 Tue 21:25]--[2023-08-15 Tue 21:50] =>  0:25
:END:

なぜか違う値になる。

#+caption: 期待している答えは3だが、4が返ってくる
#+begin_src shell
echo 'int a = 1;a+2' | go run ./main.go > gogo.s
#+end_src

#+caption: 変数を使ってコンパイルしたほう。4は誤っている
#+begin_src asm
.text
	.global mymain
mymain:
	mov $1, %eax
	mov %eax, -4(%rbp)
	mov $2, %eax
	push %rax
	mov %eax, -4(%rbp)
	pop %rbx
	add %ebx, %eax
	ret
#+end_src

#+caption: 変数を使わずにコンパイルした場合。正しく3になる
#+begin_export asm
.text
	.global mymain
mymain:
	mov $2, %eax
	push %rax
	mov $1, %eax
	pop %rbx
	add %ebx, %eax
	ret
#+end_export
** TODO DeclStatementは中置演算子で書けないか
別枠にしているが、中置演算子で共用するときれいにかけるのではないか。

宣言文は ~int a = 1~ みたいな文。

今はidentが特定の名前だったらトークン認識するが、これは最初の判定にイコールを使ったほうがよさそうだ。代入しなおすときに型名はないから。イコールを使えば中置演算子とできそう。
** TODO 変数宣言の名前をDecl → Assignにしたほうがよさそう
ヘッダファイルで書くものも宣言という。関数の本体が書かれたのは定義。8ccに合わせる。
* Archives
** DONE 関数呼び出しを実装する
CLOSED: [2023-08-23 Wed 00:14]
:LOGBOOK:
CLOCK: [2023-08-22 Tue 23:27]--[2023-08-22 Tue 23:52] =>  0:25
CLOCK: [2023-08-22 Tue 22:51]--[2023-08-22 Tue 23:16] =>  0:25
CLOCK: [2023-08-22 Tue 22:03]--[2023-08-22 Tue 22:28] =>  0:25
CLOCK: [2023-08-22 Tue 21:38]--[2023-08-22 Tue 22:03] =>  0:25
CLOCK: [2023-08-22 Tue 21:13]--[2023-08-22 Tue 21:38] =>  0:25
CLOCK: [2023-08-22 Tue 20:42]--[2023-08-22 Tue 21:07] =>  0:25
CLOCK: [2023-08-22 Tue 20:17]--[2023-08-22 Tue 20:42] =>  0:25
CLOCK: [2023-08-22 Tue 19:23]--[2023-08-22 Tue 19:48] =>  0:25
CLOCK: [2023-08-22 Tue 18:57]--[2023-08-22 Tue 19:22] =>  0:25
CLOCK: [2023-08-22 Tue 18:32]--[2023-08-22 Tue 18:57] =>  0:25
:END:

関数定義は後でやる。
** DONE charを実装する
CLOSED: [2023-08-23 Wed 22:17]
:LOGBOOK:
CLOCK: [2023-08-23 Wed 21:52]--[2023-08-23 Wed 22:17] =>  0:25
CLOCK: [2023-08-23 Wed 20:48]--[2023-08-23 Wed 21:13] =>  0:25
CLOCK: [2023-08-23 Wed 20:00]--[2023-08-23 Wed 20:25] =>  0:25
:END:
文字列と同じ感じでいけそう。
** DONE 文字列のテスト落ちを直す
CLOSED: [2023-08-16 Wed 10:10]
:LOGBOOK:
CLOCK: [2023-08-15 Tue 23:17]--[2023-08-15 Tue 23:42] =>  0:25
:END:

テスト用のCの関数がintを返すようになっているから、文字列は返せないんだな。8ccではASTで文字列を返すようになっているので、同じ感じにする。
** DONE identを直す
CLOSED: [2023-08-15 Tue 21:24]
:LOGBOOK:
CLOCK: [2023-08-15 Tue 20:42]--[2023-08-15 Tue 21:07] =>  0:25
CLOCK: [2023-08-15 Tue 20:16]--[2023-08-15 Tue 20:41] =>  0:25
:END:

envが初期状態のままになっているようだ。分岐の箇所を間違っていた。
** DONE stringを直す
CLOSED: [2023-08-15 Tue 20:13]
:LOGBOOK:
CLOCK: [2023-08-15 Tue 19:47]--[2023-08-15 Tue 20:12] =>  0:25
CLOCK: [2023-08-15 Tue 00:32]--[2023-08-15 Tue 00:57] =>  0:25
CLOCK: [2023-08-15 Tue 00:07]--[2023-08-15 Tue 00:32] =>  0:25
:END:
データラベルが必要。
** DONE 文字列テストを書き直す
CLOSED: [2023-08-24 Thu 22:40]
:LOGBOOK:
CLOCK: [2023-08-24 Thu 22:06]--[2023-08-24 Thu 22:31] =>  0:25
CLOCK: [2023-08-24 Thu 21:41]--[2023-08-24 Thu 22:06] =>  0:25
CLOCK: [2023-08-24 Thu 21:16]--[2023-08-24 Thu 21:41] =>  0:25
:END:
printf関数を使って文字列テストをやる。
** DONE lexerまわりのリファクタ
CLOSED: [2023-08-25 Fri 20:11]
:LOGBOOK:
CLOCK: [2023-08-24 Thu 22:40]--[2023-08-24 Thu 23:05] =>  0:25
:END:
細かいやつ。
