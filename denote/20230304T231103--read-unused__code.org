:PROPERTIES:
:header-args+: :wrap :results raw
:END:
#+title:      unusedを読む
#+date:       [2023-03-04 Sat 23:11]
#+filetags:   :code:
#+identifier: 20230304T231103

* unusedを読む

使われてないパッケージの識別子を探す。

- [[https://github.com/gostaticanalysis/unused][gostaticanalysis/unused: Analyzer: unused finds unused package level identifiers]]

** 検知部分

#+caption: ベースがskipする形。使われてないものがあるとreportを実行する
#+begin_src git-permalink
https://github.com/gostaticanalysis/unused/blob/17bc41fa0d5fdae5bb1a28f83236fa0dc574b666/unused.go#L23-L32
#+end_src

#+RESULTS:
#+begin_results go
func run(pass *analysis.Pass) (interface{}, error) {
	m := pass.ResultOf[ident.Analyzer].(ident.Map)
	for o := range m {
		if !skip(o) && len(m[o]) == 1 {
			n := m[o][0]
			pass.Reportf(n.Pos(), "%s is unused", n.Name)
		}
	}
	return nil, nil
}
#+end_results

- mにはmapで識別子が入っている
- どこか別で呼び出されるとlen(m[o])は1より大きくなる
- 一度しか出現してないと、スライスの長さは1になる(定義の1回分)
- m[o]には*ast.Identの配列が入ってる
- skip()はいったんおいておいて、ロジックは明快
  - 識別子の数が1なら定義でしか出てきてないので、呼び出されてないことになる

** skip関数
:LOGBOOK:
CLOCK: [2023-03-06 Mon 23:53]--[2023-03-07 Tue 00:18] =>  0:25
CLOCK: [2023-03-06 Mon 23:11]--[2023-03-06 Mon 23:36] =>  0:25
CLOCK: [2023-03-06 Mon 22:38]--[2023-03-06 Mon 23:03] =>  0:25
CLOCK: [2023-03-06 Mon 22:03]--[2023-03-06 Mon 22:28] =>  0:25
CLOCK: [2023-03-06 Mon 21:35]--[2023-03-06 Mon 22:00] =>  0:25
CLOCK: [2023-03-06 Mon 20:52]--[2023-03-06 Mon 21:17] =>  0:25
CLOCK: [2023-03-06 Mon 20:21]--[2023-03-06 Mon 20:46] =>  0:25
CLOCK: [2023-03-05 Sun 23:36]--[2023-03-06 Mon 00:01] =>  0:25
CLOCK: [2023-03-05 Sun 23:11]--[2023-03-05 Sun 23:36] =>  0:25
CLOCK: [2023-03-05 Sun 22:46]--[2023-03-05 Sun 23:11] =>  0:25
CLOCK: [2023-03-05 Sun 22:13]--[2023-03-05 Sun 22:38] =>  0:25
CLOCK: [2023-03-05 Sun 21:48]--[2023-03-05 Sun 22:13] =>  0:25
CLOCK: [2023-03-05 Sun 21:16]--[2023-03-05 Sun 21:41] =>  0:25
CLOCK: [2023-03-05 Sun 20:15]--[2023-03-05 Sun 20:40] =>  0:25
CLOCK: [2023-03-05 Sun 14:59]--[2023-03-05 Sun 15:24] =>  0:25
:END:

本質的な関数。

#+caption: 最初の分岐
#+begin_src git-permalink
https://github.com/gostaticanalysis/unused/blob/17bc41fa0d5fdae5bb1a28f83236fa0dc574b666/unused.go#L36-L38
#+end_src

#+RESULTS:
#+begin_results
	if o == nil || o.Parent() == types.Universe || o.Exported() {
		return true
	}
#+end_results

- なんで代入なんだろう
- objectがnilであれスキップ
- parentがUniverseスコープ…つまり組み込みの識別子であればスキップ
- 公開した識別子であればスキップ。パッケージ外で使われてる可能性があるから

#+caption: パッケージ名はスキップする
#+begin_src git-permalink
https://github.com/gostaticanalysis/unused/blob/17bc41fa0d5fdae5bb1a28f83236fa0dc574b666/unused.go#L41-L42
#+end_src

#+RESULTS:
#+begin_results go
	case *types.PkgName:
		return true
#+end_results

- types.Objectで分岐する
  - パッケージ名の場合
    - 飛ばす
    - パッケージ名は明らかに1回しか出てこないので、まあわかる
  - 変数の場合
    - 特定のケースでスキップ
    - types.Varではvarがくるときとfieldが来るときがある。フィールドを初期化するときのものか
    - オブジェクトのフィールド、無名関数、などが関係する
  - 関数の場合
    - object名がmainかつパッケージ名がmainのときはスキップ
      - mainパッケージのmain()は呼び出しはない
    - object名がinitかつスコープが親と同じ場合スキップ
    - メソッドだと、インターフェース内の関数を実装していれば使っているということになる
      - インターフェース定義の中に来るのは関数

- o.Parent()ってなんだろう。
- オブジェクトの名前と、オブジェクトが属するパッケージの名前がある。

#+caption: 変数の場合
#+begin_src git-permalink
https://github.com/gostaticanalysis/unused/blob/17bc41fa0d5fdae5bb1a28f83236fa0dc574b666/unused.go#L43-L47
#+end_src

#+RESULTS:
#+begin_results go
	case *types.Var:
		if o.Pkg().Scope() != o.Parent() &&
			!(o.IsField() && !o.Anonymous() && isFieldInNamedStruct(o)) {
			return true
		}
#+end_results

- scopeの知識が必要そう
  - scopeは木構造で、parentが取れる
  - 一致しなければスルー(skip) ... trueを返す可能性
    - (フィールドであるかつ、無名関数ではないかつ、構造体の名前付きフィールドである(不明))…ではない
  - 一致してればskipしない ... falseを返す
  - 2回目として出てきたなら、parentが取れるはずで、一致しないだろう。なのでskip
