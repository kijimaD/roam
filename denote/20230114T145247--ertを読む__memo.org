:PROPERTIES:
:header-args+: :wrap :results raw
:END:
#+title:      ertを読む
#+date:       [2023-01-14 Sat 14:52]
#+filetags:   :memo:
#+identifier: 20230114T145247

ertは[[id:1ad8c3d5-97ba-4905-be11-e6f2626127ad][Emacs]]組み込みのテストフレームワーク。

* Tasks
** TODO shouldはどうやって検証しているか
:LOGBOOK:
CLOCK: [2023-02-11 Sat 19:50]--[2023-02-11 Sat 20:15] =>  0:25
:END:
ertで定義された関数では、shouldで検証している。名前的にertに含まれないように見えるが、ertファイルで定義されている。

#+begin_src git-permalink
https://github.com/kd-collective/emacs/blob/30cf1f34c583d6ed16bdc5b9578370f30c95fe1b/lisp/emacs-lisp/ert.el#L378-L379
#+end_src

#+RESULTS:
#+begin_results
(cl-defmacro should (form)
  "Evaluate FORM.  If it returns nil, abort the current test as failed.
#+end_results

- should
  - ert--expand-should
    - ert--expand-should1

** TODO 失敗時の値の比較表示はどうやっているか
expectedとresultの値を表示して、どこがおかしいのかを表示してくれる。
** TODO 統計記録をどうやっているか
:LOGBOOK:
CLOCK: [2023-09-27 Wed 00:40]--[2023-09-27 Wed 01:06] =>  0:26
:END:
実行テストは選択できる。実行したテストについて、成功数や時間を表示する。
** TODO 結果バッファの表示をどうやっているか
テスト結果が表示される。
** TODO =cl-defmacro= と =defmacro= の違い
使い分けているように見えるが、何が違うのかわからない。
** TODO run-test-at-pointを作ってみる
リストから選ぶのが面倒なので、実行できるようにする。
* Memo
** ertの全体像
:PROPERTIES:
:Effort:   2:00
:END:
:LOGBOOK:
CLOCK: [2023-01-15 Sun 11:53]--[2023-01-15 Sun 12:18] =>  0:25
CLOCK: [2023-01-15 Sun 11:20]--[2023-01-15 Sun 11:45] =>  0:25
CLOCK: [2023-01-15 Sun 10:52]--[2023-01-15 Sun 11:17] =>  0:25
CLOCK: [2023-01-15 Sun 01:07]--[2023-01-15 Sun 01:32] =>  0:25
CLOCK: [2023-01-15 Sun 00:42]--[2023-01-15 Sun 01:07] =>  0:25
CLOCK: [2023-01-14 Sat 22:32]--[2023-01-14 Sat 22:57] =>  0:25
CLOCK: [2023-01-14 Sat 21:29]--[2023-01-14 Sat 21:54] =>  0:25
CLOCK: [2023-01-14 Sat 20:53]--[2023-01-14 Sat 21:18] =>  0:25
CLOCK: [2023-01-14 Sat 20:28]--[2023-01-14 Sat 20:53] =>  0:25
:END:

テストフレームワークの全体像をソースコードから把握する。

- テスト定義
- マッチャ関数
- テスト実行
- エラー時の値表示
- テストセレクタ
- テストのサマリー表示
  - 成功数
  - 失敗数
  - 開始時間
- バッチ実行
- JUnit形式出力
- 実行テスト登録・削除
- プログレスバー
- モードライン表示
- 成功時・失敗時のface設定
- =ert-results-mode= の各種機能・キーバインド

** デバッグ情報を定義する
defmacroにメタ情報を定義するときは、declareを使う。

#+caption: デバッグ情報の定義
#+begin_src git-permalink
https://github.com/kd-collective/emacs/blob/30cf1f34c583d6ed16bdc5b9578370f30c95fe1b/lisp/emacs-lisp/ert.el#L215-L217
#+end_src

#+RESULTS:
#+begin_results
  (declare (debug (&define [&name "test@" symbolp]
			   sexp [&optional stringp]
			   [&rest keywordp sexp] def-body))
#+end_results
** エラーを定義する

#+caption: エラーを定義する
#+begin_src emacs-lisp
  (define-error 'my-failed "failed")
#+end_src

プロパティにmy-failedを登録する。
** UI用の関数
- insert-text-button
  - ボタンを追加する
** deftestを実行するとどうなるか
CLOSED: [2023-01-15 Sun 17:18]
:PROPERTIES:
:Effort:   3:00
:END:
:LOGBOOK:
CLOCK: [2023-01-15 Sun 16:36]--[2023-01-15 Sun 17:01] =>  0:25
CLOCK: [2023-01-15 Sun 15:52]--[2023-01-15 Sun 16:17] =>  0:25
CLOCK: [2023-01-15 Sun 12:23]--[2023-01-15 Sun 12:48] =>  0:25
CLOCK: [2023-01-14 Sat 22:04]--[2023-01-14 Sat 22:29] =>  0:25
CLOCK: [2023-01-14 Sat 19:44]--[2023-01-14 Sat 20:09] =>  0:25
CLOCK: [2023-01-14 Sat 19:08]--[2023-01-14 Sat 19:33] =>  0:25
:END:

- ert-deftest 構造体に必要な情報を収集
  - ert-set-test make-ert-testで作った構造体でシンボルを登録する
      - make-ert-test テスト実行に必要なスロットを用意したオブジェクトを作る。test name, body, doc, file name ...

ということで、テスト構造体がシンボルとして登録される、という感じか。単純。

#+caption: メインの関数
#+begin_src git-permalink
https://github.com/kd-collective/emacs/blob/30cf1f34c583d6ed16bdc5b9578370f30c95fe1b/lisp/emacs-lisp/ert.el#L191
#+end_src

#+RESULTS:
#+begin_results elisp
(cl-defmacro ert-deftest (name () &body docstring-keys-and-body)
#+end_results

#+caption: テスト構造体を作る関数
#+begin_src git-permalink
https://github.com/kd-collective/emacs/blob/30cf1f34c583d6ed16bdc5b9578370f30c95fe1b/lisp/emacs-lisp/ert.el#L140
#+end_src

#+RESULTS:
#+begin_results
(defun ert-set-test (symbol definition)
#+end_results

** 実行テストリストをどうやって表示しているか
CLOSED: [2023-01-15 Sun 20:35]
:LOGBOOK:
CLOCK: [2023-01-15 Sun 20:14]--[2023-01-15 Sun 20:35] =>  0:21
CLOCK: [2023-01-15 Sun 19:36]--[2023-01-15 Sun 20:01] =>  0:25
CLOCK: [2023-01-15 Sun 19:10]--[2023-01-15 Sun 19:35] =>  0:25
:END:
実行できる実行の一覧から選んで実行することになる。このリストはどうやって表示しているのだろうか。

- obarray シンボルテーブル
- seq-filter リストをフィルタする
- obarray の中から、ert-test に割り当てられたものをフィルタリングして、ert-deftestで定義されたテストオブジェクトを取り出している
- 取り出したリストをcompleting-readに渡して選択肢表示する

** テストを実行するとき何が起きているか
:LOGBOOK:
CLOCK: [2023-01-30 Mon 22:48]--[2023-01-30 Mon 23:13] =>  0:25
CLOCK: [2023-01-21 Sat 12:47]--[2023-01-21 Sat 13:12] =>  0:25
CLOCK: [2023-01-21 Sat 11:44]--[2023-01-21 Sat 12:09] =>  0:25
CLOCK: [2023-01-21 Sat 10:50]--[2023-01-21 Sat 11:15] =>  0:25
CLOCK: [2023-01-21 Sat 10:23]--[2023-01-21 Sat 10:48] =>  0:25
CLOCK: [2023-01-20 Fri 23:18]--[2023-01-20 Fri 23:43] =>  0:25
CLOCK: [2023-01-20 Fri 00:43]--[2023-01-20 Fri 01:08] =>  0:25
CLOCK: [2023-01-20 Fri 00:12]--[2023-01-20 Fri 00:37] =>  0:25
CLOCK: [2023-01-19 Thu 23:38]--[2023-01-20 Fri 00:03] =>  0:25
CLOCK: [2023-01-19 Thu 23:10]--[2023-01-19 Thu 23:35] =>  0:25
CLOCK: [2023-01-18 Wed 00:27]--[2023-01-18 Wed 00:52] =>  0:25
CLOCK: [2023-01-17 Tue 23:58]--[2023-01-18 Wed 00:23] =>  0:25
CLOCK: [2023-01-17 Tue 23:29]--[2023-01-17 Tue 23:54] =>  0:25
CLOCK: [2023-01-17 Tue 00:20]--[2023-01-17 Tue 00:45] =>  0:25
CLOCK: [2023-01-16 Mon 23:09]--[2023-01-16 Mon 23:34] =>  0:25
CLOCK: [2023-01-15 Sun 22:24]--[2023-01-15 Sun 22:30] =>  0:06
:END:

- ert-run-tests-interactively 実行可能なテストのリストを選択、バッファ表示、実行
  - listenerはevent-typeを受け取る無名関数
  - ert-run-tests 特定したテストを実行する
    - 結果を取得し、変数most-recent-resultに保存する

#+caption: テスト実行関数
#+begin_src git-permalink
https://github.com/kd-collective/emacs/blob/30cf1f34c583d6ed16bdc5b9578370f30c95fe1b/lisp/emacs-lisp/ert.el#L2254
#+end_src

#+RESULTS:
#+begin_results
(defun ert-run-tests-interactively (selector)
#+end_results

#+caption: 関数評価で実行するときは引数を渡す必要がある
#+begin_src emacs-lisp
(ert-run-tests-interactively 'cl-remove-if-not-test)
#+end_src

- ert-run-tests-interactively
  - テストそのものというより、ユーザ入力とバッファで見せる部分が多くを占める
  - interactive関数によって、M-xで呼んだときにはcompletionの値が入る
  - この引数の名前はselectorという名前がついている
  - listerはどういう意味か。関数なのは確か
    - event-typeによって処理が変わる関数
    - run-startedのときは準備バッファを表示する
    - run-endedのとき成功してたら統計バッファを表示する
    - test-startedのとき
      - ewocって何だ
        - ewoc関係の関数は組み込みで入っている
    - test-endedのときは統計バッファを更新する

- ert-run-tests
  - ert-run-or-rerun-test
  - ert-run-test
    - ert--run-test-internal
      - デバッグ関連の情報を付加する
