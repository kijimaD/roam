#+title:      sokoban-goを読む
#+date:       [2023-11-16 Thu 22:59]
#+filetags:   :memo:
#+identifier: 20231116T225938

ゲームを作るけど最後までうまくいった試しがない。人のコードを見る。

- タイル空間の定石を探る
  - 移動
- コンポーネントシステムの定石を探る

* タイル - スプライト

タイルの上にあるものはスプライトとしているよう。[fn:1]

#+begin_src git-permalink
https://github.com/x-hgg-x/sokoban-go/blob/e9d204aeebe393d730fb4bdcb060d249f1470485/lib/loader/level.go#L23-L30
#+end_src

#+RESULTS:
#+begin_results
const (
	exteriorSpriteNumber = 0
	wallSpriteNumber     = 1
	floorSpriteNumber    = 2
	goalSpriteNumber     = 3
	boxSpriteNumber      = 4
	playerSpriteNumber   = 5
)
#+end_results

* タイルに対する操作

タイルに対する操作一覧。論理演算で判断しているな。Set関数では自身を書き換える。

#+begin_src git-permalink
https://github.com/x-hgg-x/sokoban-go/blob/e9d204aeebe393d730fb4bdcb060d249f1470485/lib/loader/level.go#L54-L84
#+end_src

#+RESULTS:
#+begin_results
// Tile is a game tile
type Tile uint8

// List of game tiles
const (
	TilePlayer Tile = 1 << iota
	TileBox
	TileGoal
	TileWall
	TileEmpty Tile = 0
)

// Contains checks if a game tile contains the provided tile
func (t *Tile) Contains(other Tile) bool {
	return (*t & other) == other
}

// ContainsAny checks if a game tile contains any of the provided tiles
func (t *Tile) ContainsAny(other Tile) bool {
	return (*t & other) != 0
}

// Set adds the provided tile to a game tile
func (t *Tile) Set(other Tile) {
	*t |= other
}

// Remove removes the provided tile to a game tile
func (t *Tile) Remove(other Tile) {
	*t &= 0xFF ^ other
}
#+end_results

* 読み込み

タイルはファイルから読み込んでいるようだ。よくわからない。タイルの縦×横の集合体がグリッドだ。

#+caption: func normalizeLevel(lines []string) ([][]byte, error)
#+begin_src git-permalink
https://github.com/x-hgg-x/sokoban-go/blob/e9d204aeebe393d730fb4bdcb060d249f1470485/lib/loader/level.go#L165
#+end_src

#+RESULTS:
#+begin_results
	grid := make([][]byte, len(lines))
#+end_results

コンポーネントを追加している↓。

#+caption: func createFloorEntity(componentList *loader.EntityComponentList, gameSpriteSheet)
#+begin_src git-permalink
https://github.com/x-hgg-x/sokoban-go/blob/e9d204aeebe393d730fb4bdcb060d249f1470485/lib/loader/level.go#L319-L327
#+end_src

#+RESULTS:
#+begin_results
func createFloorEntity(componentList *loader.EntityComponentList, gameSpriteSheet *ec.SpriteSheet, line, col int) {
	componentList.Engine = append(componentList.Engine, loader.EngineComponentList{
		SpriteRender: &ec.SpriteRender{SpriteSheet: gameSpriteSheet, SpriteNumber: floorSpriteNumber},
		Transform:    &ec.Transform{},
	})
	componentList.Game = append(componentList.Game, gameComponentList{
		GridElement: &gc.GridElement{Line: line, Col: col},
	})
}
#+end_results

* コンポーネントの定義

コンポーネントの種類の定義↓。

#+begin_src git-permalink
https://github.com/x-hgg-x/sokoban-go/blob/e9d204aeebe393d730fb4bdcb060d249f1470485/lib/loader/lib.go#L13-L19
#+end_src

#+RESULTS:
#+begin_results
type gameComponentList struct {
	GridElement *gc.GridElement
	Player      *gc.Player
	Box         *gc.Box
	Goal        *gc.Goal
	Wall        *gc.Wall
}
#+end_results

保持している構造体↓。コンポーネントを入れる。

#+begin_src git-permalink
https://github.com/x-hgg-x/sokoban-go/blob/e9d204aeebe393d730fb4bdcb060d249f1470485/lib/components/lib.go#L5-L12
#+end_src

#+RESULTS:
#+begin_results
// Components contains references to all game components
type Components struct {
	GridElement *ecs.SliceComponent
	Player      *ecs.NullComponent
	Box         *ecs.NullComponent
	Goal        *ecs.NullComponent
	Wall        *ecs.NullComponent
}
#+end_results

* resources

アクションが定数として表現されている。アクションmapのキーとして利用する。

#+caption: 定数
#+begin_src git-permalink
https://github.com/x-hgg-x/sokoban-go/blob/e9d204aeebe393d730fb4bdcb060d249f1470485/lib/resources/controls.go#L3-L7
#+end_src

#+RESULTS:
#+begin_results
const (
	// MoveUpAction is the action for moving up
	MoveUpAction = "MoveUp"
	// MoveUpFastAction is the action for moving up fast
	MoveUpFastAction = "MoveUpFast"
#+end_results

アクションを初期化している部分(ライブラリ)↓。TOMLファイルから読み取って設定するよう。

#+caption: func LoadControls(controlsConfigPath string, axes []string, actions []string) (resources.Controls, resources.InputHandler)
#+begin_src git-permalink
	inputHandler.Actions = make(map[string]bool)
#+end_src

TOMLファイル。対応関係がわかりやすい。

#+begin_src git-permalink
https://github.com/x-hgg-x/sokoban-go/blob/e9d204aeebe393d730fb4bdcb060d249f1470485/config/controls.toml#L1-L6
#+end_src

#+RESULTS:
#+begin_results
[controls.actions.MoveUp]
combinations = [[{ key = "Up" }]]
once = true

[controls.actions.MoveUpFast]
combinations = [[{ key = "ShiftLeft" }, { key = "Up" }], [{ key = "ShiftRight" }, { key = "Up" }]]
#+end_results

* prefab

prefabが具体的にどういうことをするのかわからない。メニュー画面それぞれを保持しているぽい。

#+begin_src git-permalink
https://github.com/x-hgg-x/sokoban-go/blob/e9d204aeebe393d730fb4bdcb060d249f1470485/lib/resources/prefab.go#L5-L13
#+end_src

#+RESULTS:
#+begin_results
// MenuPrefabs contains menu prefabs
type MenuPrefabs struct {
	MainMenu          loader.EntityComponentList
	ChoosePackageMenu loader.EntityComponentList
	PauseMenu         loader.EntityComponentList
	LevelCompleteMenu loader.EntityComponentList
	HighscoresMenu    loader.EntityComponentList
	SolutionsMenu     loader.EntityComponentList
}
#+end_results

* UI更新

UIもコンポーネントである。↓UIコンポーネントを書き換えて表示する。

#+caption: UIコンポーネント更新
#+begin_src git-permalink
https://github.com/x-hgg-x/sokoban-go/blob/e9d204aeebe393d730fb4bdcb060d249f1470485/lib/states/pause_menu.go#L123-L137
#+end_src

#+RESULTS:
#+begin_results
	// Update text components
	world.Manager.Join(world.Components.Engine.Text, world.Components.Engine.UITransform).Visit(ecs.Visit(func(entity ecs.Entity) {
		text := world.Components.Engine.Text.Get(entity).(*ec.Text)

		switch text.ID {
		case "view_highscore":
			if st.invalidHighscore {
				text.Color = color.RGBA{0, 0, 0, 120}
			}
		case "view_solution":
			if st.invalidSolution {
				text.Color = color.RGBA{0, 0, 0, 120}
			}
		}
	}))
#+end_results

↓コンポーネントはTOMLで定義されているようだ。各メニューごとにファイルがあるな。

#+begin_src git-permalink
https://github.com/x-hgg-x/sokoban-go/blob/e9d204aeebe393d730fb4bdcb060d249f1470485/assets/metadata/entities/ui/main_menu.toml#L27-L34
#+end_src

#+RESULTS:
#+begin_results
[entity.components.Text]
id = "cursor_view_highscores"
text = "\u25ba"
font_face = { font = "hack", options.size = 60.0 }
color = [255, 255, 255, 255]

[entity.components.UITransform]
translation = { x = 40, y = 400 }
#+end_results

* メニューコンポーネントのマウスオーバーイベント

↓メニューコンポーネントそれぞれで、マウスが上にあるかを判定する。

#+caption: func updateMenu(menu menu, world w.World) states.Transition {
#+begin_src git-permalink
https://github.com/x-hgg-x/sokoban-go/blob/e9d204aeebe393d730fb4bdcb060d249f1470485/lib/states/menu.go#L41-L46
#+end_src

#+RESULTS:
#+begin_results
	// Handle mouse events only if mouse is moved or clicked
	x, y := ebiten.CursorPosition()
	if x != menuLastCursorPosition.X || y != menuLastCursorPosition.Y || inpututil.IsMouseButtonJustPressed(ebiten.MouseButtonLeft) {
		menuLastCursorPosition = m.VectorInt2{X: x, Y: y}

		for iElem, id := range menu.getMenuIDs() {
#+end_results

↓コンポーネントのクエリ。レンダーできる、変形可能、マウスが反応可能、といった性質を持つものを対象にする。

#+caption: func updateMenu(menu menu, world w.World) states.Transition {
#+begin_src git-permalink
https://github.com/x-hgg-x/sokoban-go/blob/e9d204aeebe393d730fb4bdcb060d249f1470485/lib/states/menu.go#L47
#+end_src

#+RESULTS:
#+begin_results
			if world.Manager.Join(world.Components.Engine.SpriteRender, world.Components.Engine.Transform, world.Components.Engine.MouseReactive).Visit(
#+end_results

↓コンポーネントを特定して、stateの ~selection~ (選択中の項目)を変える。クリックされていた場合は、遷移する。

#+caption: func updateMenu(menu menu, world w.World) states.Transition {
#+begin_src git-permalink
https://github.com/x-hgg-x/sokoban-go/blob/e9d204aeebe393d730fb4bdcb060d249f1470485/lib/states/menu.go#L48-L59
#+end_src

#+RESULTS:
#+begin_results
				func(index int) (skip bool) {
					mouseReactive := world.Components.Engine.MouseReactive.Get(ecs.Entity(index)).(*ec.MouseReactive)
					if mouseReactive.ID == id && mouseReactive.Hovered {
						menu.setSelection(iElem)
						if mouseReactive.JustClicked {
							transition = menu.confirmSelection(world)
							return true
						}
					}
					return false
				}) {
				return transition
#+end_results

* GridElementとは何か

↓グリッドを置き換えるシステムがある。グリッドは座標を持つことを示す。

#+begin_src git-permalink
https://github.com/x-hgg-x/sokoban-go/blob/e9d204aeebe393d730fb4bdcb060d249f1470485/lib/systems/grid_transform.go#L16-L17
#+end_src

#+RESULTS:
#+begin_results
// GridTransformSystem sets transform for grid elements
func GridTransformSystem(world w.World) {
#+end_results

#+begin_src git-permalink
https://github.com/x-hgg-x/sokoban-go/blob/e9d204aeebe393d730fb4bdcb060d249f1470485/lib/systems/grid_transform.go#L20
#+end_src

#+RESULTS:
#+begin_results
	world.Manager.Join(gameComponents.GridElement, world.Components.Engine.SpriteRender, world.Components.Engine.Transform).Visit(ecs.Visit(func(entity ecs.Entity) {
#+end_results

- GridElement -- 座標を持つことを示す
- SpriteRender -- 描画可能なことを示す
- Transform -- 何かわからない
  - 壁、箱、プレイヤー、UI…など描画されるものについている
  - 画像変換か

このシステムはタイルの変化をEntityに及ぼす、という感じか。

↓タイルの中からプレイヤー、箱を探す。

#+caption: プレイヤー、箱を探す
#+begin_src git-permalink
https://github.com/x-hgg-x/sokoban-go/blob/e9d204aeebe393d730fb4bdcb060d249f1470485/lib/systems/grid_update.go#L18-L25
#+end_src

#+RESULTS:
#+begin_results
	for iTile, tile := range gameResources.Level.Grid.Data {
		switch {
		case tile.Contains(resources.TilePlayer):
			playerIndex = iTile
		case tile.Contains(resources.TileBox):
			boxIndices = append(boxIndices, iTile)
		}
	}
#+end_results

プレイヤーコンポーネント、箱コンポーネントのgridElementを更新する。

#+caption: コンポーネントによって分岐
#+begin_src git-permalink
https://github.com/x-hgg-x/sokoban-go/blob/e9d204aeebe393d730fb4bdcb060d249f1470485/lib/systems/grid_update.go#L33-L47
#+end_src

#+RESULTS:
#+begin_results
	world.Manager.Join(gameComponents.GridElement).Visit(ecs.Visit(func(entity ecs.Entity) {
		switch {
		case entity.HasComponent(gameComponents.Player):
			gridElement := gameComponents.GridElement.Get(entity).(*gc.GridElement)
			gridElement.Line = paddingRow + playerIndex/levelWidth
			gridElement.Col = paddingCol + playerIndex%levelWidth

		case entity.HasComponent(gameComponents.Box):
			gridElement := gameComponents.GridElement.Get(entity).(*gc.GridElement)
			boxIndex := boxIndices[0]
			boxIndices = boxIndices[1:]
			gridElement.Line = paddingRow + boxIndex/levelWidth
			gridElement.Col = paddingCol + boxIndex%levelWidth
		}
	}))
#+end_results

* InfoSystemとは何か

GridElementと同様に、タイルの状態をエンティティに反映する。今回はUIエンティティ。

↓箱の数、正しく配置されている箱の数をカウントする。

#+caption: func InfoSystem(world w.World, solutionMode bool) {}
#+begin_src git-permalink
https://github.com/x-hgg-x/sokoban-go/blob/e9d204aeebe393d730fb4bdcb060d249f1470485/lib/systems/info.go#L21-L29
#+end_src

#+RESULTS:
#+begin_results go
	for _, tile := range gameResources.Level.Grid.Data {
		if tile.Contains(resources.TileBox) {
			boxCount += 1

			if tile.Contains(resources.TileGoal) {
				boxOnGoalCount += 1
			}
		}
	}
#+end_results

↓テキストコンポーネントを更新する。IDで分岐する。

#+begin_src git-permalink
https://github.com/x-hgg-x/sokoban-go/blob/e9d204aeebe393d730fb4bdcb060d249f1470485/lib/systems/info.go#L31-L51
#+end_src

#+RESULTS:
#+begin_results go
	// Set text info
	world.Manager.Join(world.Components.Engine.Text, world.Components.Engine.UITransform).Visit(ecs.Visit(func(entity ecs.Entity) {
		text := world.Components.Engine.Text.Get(entity).(*ec.Text)

		switch text.ID {
		case "level":
			text.Text = fmt.Sprintf("LEVEL %d/%d", gameResources.Level.CurrentNum+1, len(gameResources.Package.Levels))
			if !solutionMode && gameResources.Level.Modified {
				text.Text += "(*)"
			}
		case "box":
			text.Text = fmt.Sprintf("BOX: %d/%d", boxOnGoalCount, boxCount)
		case "step":
			text.Text = fmt.Sprintf("STEPS: %d", len(gameResources.Level.Movements))
		case "package":
			text.Text = fmt.Sprintf("Package: %s", gameResources.Package.Name)
			if solutionMode {
				text.Text += " - Replaying solution..."
			}
		}
	}))
#+end_results

* Resourceとは何か

ECS用語におけるリソースとは何か。エンティティに関係ないデータのこと。マップデータとかかな。

#+begin_src go
// Resources contains references to data not related to any entity
type Resources struct {
#+end_src

↓ゲームリソース。

#+begin_src git-permalink
https://github.com/x-hgg-x/sokoban-go/blob/e9d204aeebe393d730fb4bdcb060d249f1470485/lib/resources/game.go#L128-L135
#+end_src

#+RESULTS:
#+begin_results
// Game contains game resources
type Game struct {
	StateEvent StateEvent
	Package    PackageData
	Level      Level
	GridLayout GridLayout
	SaveConfig SaveConfig
}
#+end_results

- StateEvent :: 完了したかどうか
- PackageData :: 読み込んだPackageのデータ。Packageはステージのセット
- Level :: 現在の階層(難易度)。階層数、移動履歴、グリッド情報を持つ

* タイル

↓タイルの状態一覧。

#+begin_src git-permalink
https://github.com/x-hgg-x/sokoban-go/blob/e9d204aeebe393d730fb4bdcb060d249f1470485/lib/resources/game.go#L105-L112
#+end_src

#+RESULTS:
#+begin_results
// List of game tiles
const (
	TilePlayer = gloader.TilePlayer
	TileBox    = gloader.TileBox
	TileGoal   = gloader.TileGoal
	TileWall   = gloader.TileWall
	TileEmpty  = gloader.TileEmpty
)
#+end_results

* stateとsystemの関係

stateによって適用systemが異なる。

#+begin_src git-permalink
https://github.com/x-hgg-x/sokoban-go/blob/e9d204aeebe393d730fb4bdcb060d249f1470485/lib/states/gameplay.go#L65-L72
#+end_src

#+RESULTS:
#+begin_results
func (st *GameplayState) Update(world w.World) states.Transition {
	g.SwitchLevelSystem(world)
	g.UndoSystem(world)
	g.MoveSystem(world)
	g.SaveSystem(world)
	g.InfoSystem(world, false)
	g.GridUpdateSystem(world)
	g.GridTransformSystem(world)
#+end_results

* 移動はどうやっているか

↓systemではこうしている。シンプルにリソースの値に応じてMove()を呼んでいる。ボタン押下に応じて、Actionsがセットされてるはず。

#+begin_src git-permalink
https://github.com/x-hgg-x/sokoban-go/blob/e9d204aeebe393d730fb4bdcb060d249f1470485/lib/systems/move.go#L9-L11
#+end_src

#+RESULTS:
#+begin_results
// MoveSystem moves player
func MoveSystem(world w.World) {
	moveUpAction := world.Resources.InputHandler.Actions[resources.MoveUpAction]
#+end_results

#+begin_src git-permalink
https://github.com/x-hgg-x/sokoban-go/blob/e9d204aeebe393d730fb4bdcb060d249f1470485/lib/systems/move.go#L21-L23
#+end_src

#+RESULTS:
#+begin_results
	switch {
	case moveUpAction || moveUpFastAction:
		resources.Move(world, resources.MovementUp)
#+end_results

↓Actionsの中身は、アクション文字列とboolのマップである。

#+begin_src go
// InputHandler contains input axis values and actions corresponding to specified controls
type InputHandler struct {
	// Axes contains input axis values
	Axes map[string]float64
	// Actions contains input actions
	Actions map[string]bool
}
#+end_src

↓このように、キーボード押下時Actionsにセットする。

#+caption: func (st *LevelCompleteState) Update(world w.World) states.Transition {}
#+begin_src git-permalink
https://github.com/x-hgg-x/sokoban-go/blob/e9d204aeebe393d730fb4bdcb060d249f1470485/lib/states/level_complete_menu.go#L121-L123
#+end_src

#+RESULTS:
#+begin_results
		if inpututil.IsKeyJustPressed(ebiten.KeyEnter) || inpututil.IsKeyJustPressed(ebiten.KeySpace) {
			world.Resources.InputHandler.Actions[resources.RestartAction] = true
		}
#+end_results

↓そのあとsystemで処理する。

#+caption: func SwitchLevelSystem(world w.World) bool {}
#+begin_src git-permalink
https://github.com/x-hgg-x/sokoban-go/blob/e9d204aeebe393d730fb4bdcb060d249f1470485/lib/systems/switch_level.go#L17
#+end_src

#+RESULTS:
#+begin_results
	restartAction := world.Resources.InputHandler.Actions[resources.RestartAction]
#+end_results

#+caption: func SwitchLevelSystem(world w.World) bool {}
#+begin_src git-permalink
https://github.com/x-hgg-x/sokoban-go/blob/e9d204aeebe393d730fb4bdcb060d249f1470485/lib/systems/switch_level.go#L25-L28
#+end_src

#+RESULTS:
#+begin_results go
	case restartAction:
		gameResources.Level.Movements = []resources.MovementType{}
		gameResources.Level.Modified = true
		newLevel = gameResources.Level.CurrentNum
#+end_results

* InputHandlerのリセットはどこでやっているか

world.Resources.InputHandlerはさまざまなところで使われている。これはボタンの押下状態に応じて値が変わるように見える。リセットが必要だが、どこでやっているか。

↓ECSライブラリのなかでやっている。

#+caption: func InputSystem(world w.World) {}
#+begin_src go
	for k, v := range world.Resources.Controls.Actions {
		world.Resources.InputHandler.Actions[k] = isActionDone(v)
	}
#+end_src

↑InputSyste関数は、StateMachineのUpdateで呼ばれる。なので、毎回リセットされているのだろう。

この設計にすることで、キーボード押下を1箇所で管理できる。直接それぞれの箇所でキーボード押下を検知するよりも見通しやすい。キー検知は具体的すぎるコードだ。

* Tasks
** TODO 読む
:PROPERTIES:
:Effort:   10:00
:END:
:LOGBOOK:
CLOCK: [2023-11-20 Mon 20:45]--[2023-11-20 Mon 21:10] =>  0:25
CLOCK: [2023-11-20 Mon 00:07]--[2023-11-20 Mon 00:32] =>  0:25
CLOCK: [2023-11-19 Sun 23:30]--[2023-11-19 Sun 23:56] =>  0:26
CLOCK: [2023-11-19 Sun 21:16]--[2023-11-19 Sun 21:41] =>  0:25
CLOCK: [2023-11-19 Sun 20:50]--[2023-11-19 Sun 21:15] =>  0:25
CLOCK: [2023-11-19 Sun 20:14]--[2023-11-19 Sun 20:39] =>  0:25
CLOCK: [2023-11-19 Sun 19:49]--[2023-11-19 Sun 20:14] =>  0:25
CLOCK: [2023-11-19 Sun 18:40]--[2023-11-19 Sun 19:05] =>  0:25
CLOCK: [2023-11-19 Sun 18:11]--[2023-11-19 Sun 18:36] =>  0:25
CLOCK: [2023-11-19 Sun 17:45]--[2023-11-19 Sun 18:10] =>  0:25
CLOCK: [2023-11-19 Sun 17:20]--[2023-11-19 Sun 17:45] =>  0:25
:END:
コードを読む。
* Footnotes

[fn:1]ゲームづくりの定石知識が足りてない。
