#+title:      レビューツール メモ
#+date:       [2022-12-01 Thu 22:55]
#+filetags:   :hack:
#+identifier: 20221201T225506

* レビューツール開発メモ
:LOGBOOK:
CLOCK: [2022-12-10 Sat 12:37]--[2022-12-10 Sat 13:02] =>  0:25
CLOCK: [2022-12-10 Sat 11:16]--[2022-12-10 Sat 11:41] =>  0:25
CLOCK: [2022-12-10 Sat 10:51]--[2022-12-10 Sat 11:16] =>  0:25
CLOCK: [2022-12-10 Sat 10:25]--[2022-12-10 Sat 10:50] =>  0:25
CLOCK: [2022-12-04 Sun 20:02]--[2022-12-04 Sun 20:27] =>  0:25
CLOCK: [2022-12-04 Sun 19:37]--[2022-12-04 Sun 20:02] =>  0:25
CLOCK: [2022-12-04 Sun 18:39]--[2022-12-04 Sun 19:04] =>  0:25
CLOCK: [2022-12-04 Sun 18:14]--[2022-12-04 Sun 18:39] =>  0:25
CLOCK: [2022-12-04 Sun 17:45]--[2022-12-04 Sun 18:10] =>  0:25
CLOCK: [2022-12-04 Sun 17:11]--[2022-12-04 Sun 17:36] =>  0:25
CLOCK: [2022-12-04 Sun 16:46]--[2022-12-04 Sun 17:11] =>  0:25
CLOCK: [2022-12-04 Sun 16:19]--[2022-12-04 Sun 16:44] =>  0:25
CLOCK: [2022-12-04 Sun 15:54]--[2022-12-04 Sun 16:19] =>  0:25
CLOCK: [2022-12-04 Sun 13:55]--[2022-12-04 Sun 14:21] =>  0:26
CLOCK: [2022-12-04 Sun 13:30]--[2022-12-04 Sun 13:55] =>  0:25
CLOCK: [2022-12-04 Sun 13:05]--[2022-12-04 Sun 13:30] =>  0:25
CLOCK: [2022-12-04 Sun 12:40]--[2022-12-04 Sun 13:05] =>  0:25
CLOCK: [2022-12-04 Sun 12:14]--[2022-12-04 Sun 12:40] =>  0:26
CLOCK: [2022-12-04 Sun 11:49]--[2022-12-04 Sun 12:14] =>  0:25
CLOCK: [2022-12-04 Sun 11:09]--[2022-12-04 Sun 11:34] =>  0:25
CLOCK: [2022-12-04 Sun 10:44]--[2022-12-04 Sun 11:09] =>  0:25
CLOCK: [2022-12-04 Sun 10:19]--[2022-12-04 Sun 10:44] =>  0:25
CLOCK: [2022-12-03 Sat 22:00]--[2022-12-03 Sat 22:25] =>  0:25
CLOCK: [2022-12-03 Sat 21:35]--[2022-12-03 Sat 22:00] =>  0:25
CLOCK: [2022-12-03 Sat 21:10]--[2022-12-03 Sat 21:35] =>  0:25
CLOCK: [2022-12-03 Sat 20:34]--[2022-12-03 Sat 20:59] =>  0:25
CLOCK: [2022-12-03 Sat 18:46]--[2022-12-03 Sat 19:11] =>  0:25
CLOCK: [2022-12-03 Sat 18:21]--[2022-12-03 Sat 18:46] =>  0:25
CLOCK: [2022-12-03 Sat 17:56]--[2022-12-03 Sat 18:21] =>  0:25
CLOCK: [2022-12-03 Sat 17:11]--[2022-12-03 Sat 17:36] =>  0:25
CLOCK: [2022-12-03 Sat 16:45]--[2022-12-03 Sat 17:10] =>  0:25
CLOCK: [2022-12-03 Sat 13:15]--[2022-12-03 Sat 13:40] =>  0:25
CLOCK: [2022-12-03 Sat 12:50]--[2022-12-03 Sat 13:15] =>  0:25
CLOCK: [2022-12-03 Sat 12:25]--[2022-12-03 Sat 12:50] =>  0:25
CLOCK: [2022-12-03 Sat 11:59]--[2022-12-03 Sat 12:24] =>  0:25
CLOCK: [2022-12-03 Sat 11:33]--[2022-12-03 Sat 11:58] =>  0:25
CLOCK: [2022-12-02 Fri 09:24]--[2022-12-02 Fri 09:49] =>  0:25
:END:

GitHub のレビューで、対応コミットを返信するツールを作る。レビューしてもらったとき、対応したコミットを返信する。自分が対応したことのチェックと、相手にとってわかりやすくするため。


レビュー例。
- ここはタイポではないでしょうか
  - コミット ABCDEFG で修正しました 👈ここを自動化する

しかし面倒だ。さらに逐次で返信するのではなくて、レビュー送信するときみたいに、一気に返信したい。

- GitHubのUIとエディタを行き来することがない。まあ結局コメントのリンクは取得しなきゃいけないんだが
- ちくちく返信して相手を煩わせることがない
- pushしないと、Gitハッシュはリンク化されない。そのため、[Git→push→GitHub]→[Git→push→GitHub]…としなければならない

などの理由によって。

バッチでコメントを送信することで、[Git→GitHub]→[Git→GitHub]→...→push→コマンド実行 となる。
* 使用の流れ
- リンクをつけてコミットする

#+begin_src
build: 修正した

https://github.com/kijimaD/gar/pull/1#discussion_r1037682054
#+end_src

- git pushする。プッシュしないと、コメントのgitハッシュがリンク化されない
- コマンドを実行する ~gar 223~
- 実行されるであろうことを出力する
- yesを押す
- 送信

* memo
https://github.com/kijimaD/gar/pull/1#discussion_r1037682054

レビューコメント一覧。後で使う。

#+begin_src shell
  curl \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer ..." \
  https://api.github.com/repos/kijimaD/gar/pulls/1/reviews
#+end_src

#+caption: コメント返信。コメントのURLからrを除いたのがID
#+begin_src shell
  curl \
      -X POST \
      -H "Accept: application/vnd.github+json" \
      -H "Authorization: Bearer ..." \
      https://api.github.com/repos/kijimaD/gar/pulls/1/comments/1037682054/replies \
      -d '{"body":"comment from API!"}'
#+end_src

対象とするコミット群をどうやって取るか。未マージ分をどうやって判定するか。

PRからターゲットブランチとブランチ名を取得して、対象コミットを取得するのが確実そう。コマンド実行時にPR番号を入力させる。ちょっとメンドイけどターゲットブランチはしょうがなさそう。

#+caption: 例
#+begin_src shell
gar 111
#+end_src

#+caption: PRの詳細
#+begin_src shell
curl \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer ..." \
  https://api.github.com/repos/kijimaD/gar/pulls/1
#+end_src

- カレントブランチ: head -> rev
- デフォルトブランチ: repo -> default_branch

#+caption: リモートを取得する
#+begin_src shell
git config --get remote.origin.url
#+end_src
