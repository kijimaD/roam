#+title:      ECSを使ってサンプルゲームを作る
#+date:       [2023-11-28 Tue 07:45]
#+filetags:   :memo:
#+identifier: 20231128T074518

[[id:dc45bd7d-b8c4-47ef-ae84-c548f81c50bb][EntityComponentSystem]]を使って、サンプルゲームを作る。

やること。

* Todo
** TODO アイテムを使う

- キャラクタを作る
- ステータスを作る
- 影響を与えられるようにする

** TODO ステート切り替えが怪しい部分がある
特にpopしている部分。

- pushで、文字があると重なる
- popしたときにOnStartは走らないので、前の画面を削除するのはダメ

** TODO 図形 or 画像描画の方法を考える
UIのために図形描画したい。どうするか。画像を用意すればよいが、いい感じにやるためにはどうすればいいか。

** TODO 生成をランダム化する
ある程度ランダム化したい。プレイヤー、モンスター、ワープゲートの出る位置をバラけさせる。

** TODO 暗闇を追加する
未探検の部分は暗くなる。

** TODO 照明を追加する
照明がある部分は色が変わる。

** TODO キャラクタを生成する
味方/敵を生成する。

** TODO タイルの種類を増やす
:LOGBOOK:
CLOCK: [2023-12-03 Sun 18:19]--[2023-12-03 Sun 18:44] =>  0:25
:END:
見た目がよくないので、2種類の通常フロアを用意する。

ステージ作成が少し面倒になるか。2種類のタイルの違いをファイルに書き出したくないな。勝手に判断して入れてくれるのが一番良い。壁が隣接してたら〜とか。

** TODO ゲームループカウントをグローバル化する
数えてメッセージのアニメーションさせる用。汎用的なのでグローバルでやってよさそう。アニメーションのためのもっとよい方法がある可能性はある。ちゃんと調べないとな…。

** TODO アニメーションのやり方を考える
どうやっているのだろう。
** TODO 階の生成方法を考える
:LOGBOOK:
CLOCK: [2023-12-03 Sun 12:52]--[2023-12-03 Sun 13:17] =>  0:25
:END:

- ランダム選択の一般階層
  - ダンジョンによって選ばれやすさに偏りがある
  - 5の倍数の場合は帰還ワープも出す
  - すべてのマップに帰還ワープを設定しておく
- ボスの階層
  - 特殊マップ
  - 固定

** TODO メッセージシステムのパッケージを切り出す
今は1パッケージに入っていてわかりにくい。
* Memo
- entityはcomponentの集合体

* Archives
** DONE メッセージ表示できるようにする
CLOSED: [2023-11-28 Tue 07:55]
:PROPERTIES:
:Effort:   20:00
:END:
:LOGBOOK:
CLOCK: [2023-11-28 Tue 07:29]--[2023-11-28 Tue 07:54] =>  0:25
CLOCK: [2023-11-28 Tue 00:12]--[2023-11-28 Tue 00:37] =>  0:25
CLOCK: [2023-11-27 Mon 23:17]--[2023-11-27 Mon 23:42] =>  0:25
CLOCK: [2023-11-27 Mon 22:52]--[2023-11-27 Mon 23:17] =>  0:25
CLOCK: [2023-11-27 Mon 22:27]--[2023-11-27 Mon 22:52] =>  0:25
CLOCK: [2023-11-27 Mon 21:47]--[2023-11-27 Mon 22:12] =>  0:25
CLOCK: [2023-11-27 Mon 21:15]--[2023-11-27 Mon 21:40] =>  0:25
CLOCK: [2023-11-27 Mon 20:41]--[2023-11-27 Mon 21:06] =>  0:25
CLOCK: [2023-11-27 Mon 20:16]--[2023-11-27 Mon 20:41] =>  0:25
CLOCK: [2023-11-27 Mon 19:51]--[2023-11-27 Mon 20:16] =>  0:25
CLOCK: [2023-11-27 Mon 00:18]--[2023-11-27 Mon 00:43] =>  0:25
CLOCK: [2023-11-26 Sun 23:15]--[2023-11-26 Sun 23:40] =>  0:25
CLOCK: [2023-11-26 Sun 21:57]--[2023-11-26 Sun 22:22] =>  0:25
CLOCK: [2023-11-26 Sun 21:32]--[2023-11-26 Sun 21:57] =>  0:25
CLOCK: [2023-11-26 Sun 21:02]--[2023-11-26 Sun 21:27] =>  0:25
CLOCK: [2023-11-26 Sun 20:37]--[2023-11-26 Sun 21:02] =>  0:25
CLOCK: [2023-11-26 Sun 20:01]--[2023-11-26 Sun 20:26] =>  0:25
CLOCK: [2023-11-26 Sun 19:36]--[2023-11-26 Sun 20:01] =>  0:25
CLOCK: [2023-11-26 Sun 18:27]--[2023-11-26 Sun 18:52] =>  0:25
CLOCK: [2023-11-26 Sun 17:08]--[2023-11-26 Sun 17:33] =>  0:25
CLOCK: [2023-11-26 Sun 16:33]--[2023-11-26 Sun 16:58] =>  0:25
CLOCK: [2023-11-26 Sun 15:05]--[2023-11-26 Sun 15:30] =>  0:25
CLOCK: [2023-11-26 Sun 14:40]--[2023-11-26 Sun 15:05] =>  0:25
CLOCK: [2023-11-26 Sun 14:14]--[2023-11-26 Sun 14:39] =>  0:25
CLOCK: [2023-11-26 Sun 13:46]--[2023-11-26 Sun 14:11] =>  0:25
CLOCK: [2023-11-26 Sun 13:19]--[2023-11-26 Sun 13:44] =>  0:25
CLOCK: [2023-11-26 Sun 12:54]--[2023-11-26 Sun 13:19] =>  0:25
CLOCK: [2023-11-26 Sun 12:28]--[2023-11-26 Sun 12:53] =>  0:25
CLOCK: [2023-11-26 Sun 11:53]--[2023-11-26 Sun 12:18] =>  0:25
CLOCK: [2023-11-26 Sun 11:27]--[2023-11-26 Sun 11:52] =>  0:25
CLOCK: [2023-11-26 Sun 10:57]--[2023-11-26 Sun 11:22] =>  0:25
CLOCK: [2023-11-26 Sun 10:32]--[2023-11-26 Sun 10:57] =>  0:25
CLOCK: [2023-11-26 Sun 01:00]--[2023-11-26 Sun 01:25] =>  0:25
CLOCK: [2023-11-26 Sun 00:24]--[2023-11-26 Sun 00:49] =>  0:25
CLOCK: [2023-11-25 Sat 23:04]--[2023-11-25 Sat 23:29] =>  0:25
CLOCK: [2023-11-25 Sat 22:39]--[2023-11-25 Sat 23:04] =>  0:25
CLOCK: [2023-11-25 Sat 22:03]--[2023-11-25 Sat 22:28] =>  0:25
CLOCK: [2023-11-25 Sat 21:38]--[2023-11-25 Sat 22:03] =>  0:25
CLOCK: [2023-11-25 Sat 21:13]--[2023-11-25 Sat 21:38] =>  0:25
CLOCK: [2023-11-25 Sat 20:48]--[2023-11-25 Sat 21:13] =>  0:25
CLOCK: [2023-11-25 Sat 20:22]--[2023-11-25 Sat 20:47] =>  0:25
CLOCK: [2023-11-25 Sat 19:57]--[2023-11-25 Sat 20:22] =>  0:25
CLOCK: [2023-11-25 Sat 18:38]--[2023-11-25 Sat 19:03] =>  0:25
CLOCK: [2023-11-25 Sat 17:48]--[2023-11-25 Sat 18:13] =>  0:25
CLOCK: [2023-11-25 Sat 17:13]--[2023-11-25 Sat 17:38] =>  0:25
CLOCK: [2023-11-25 Sat 16:47]--[2023-11-25 Sat 17:12] =>  0:25
CLOCK: [2023-11-25 Sat 16:22]--[2023-11-25 Sat 16:47] =>  0:25
CLOCK: [2023-11-25 Sat 15:56]--[2023-11-25 Sat 16:21] =>  0:25
CLOCK: [2023-11-25 Sat 15:31]--[2023-11-25 Sat 15:56] =>  0:25
CLOCK: [2023-11-25 Sat 14:54]--[2023-11-25 Sat 15:19] =>  0:25
CLOCK: [2023-11-25 Sat 14:29]--[2023-11-25 Sat 14:54] =>  0:25
CLOCK: [2023-11-25 Sat 13:58]--[2023-11-25 Sat 14:23] =>  0:25
CLOCK: [2023-11-25 Sat 13:32]--[2023-11-25 Sat 13:57] =>  0:25
CLOCK: [2023-11-25 Sat 13:07]--[2023-11-25 Sat 13:32] =>  0:25
CLOCK: [2023-11-25 Sat 12:42]--[2023-11-25 Sat 13:07] =>  0:25
CLOCK: [2023-11-25 Sat 12:17]--[2023-11-25 Sat 12:42] =>  0:25
CLOCK: [2023-11-21 Tue 00:20]--[2023-11-21 Tue 00:45] =>  0:25
CLOCK: [2023-11-20 Mon 23:45]--[2023-11-21 Tue 00:10] =>  0:25
CLOCK: [2023-11-20 Mon 23:11]--[2023-11-20 Mon 23:36] =>  0:25
:END:
[[https://github.com/x-hgg-x/sokoban-go][x-hgg-x/sokoban-go]]を使って小さいサンプルを作る。
** DONE メッセージシステムのリファクタ
CLOSED: [2023-11-28 Tue 08:50]
:LOGBOOK:
CLOCK: [2023-11-28 Tue 08:21]--[2023-11-28 Tue 08:46] =>  0:25
CLOCK: [2023-11-28 Tue 07:56]--[2023-11-28 Tue 08:21] =>  0:25
:END:
使いにくいので直す。
** DONE メッセージシステムに自動改行を入れる
CLOSED: [2023-11-28 Tue 08:50]
飛び出すのを防ぐ。
** DONE ファイルを埋め込む
CLOSED: [2023-11-29 Wed 21:48]
:PROPERTIES:
:Effort:   3:00
:END:
:LOGBOOK:
CLOCK: [2023-11-29 Wed 21:14]--[2023-11-29 Wed 21:39] =>  0:25
CLOCK: [2023-11-29 Wed 20:46]--[2023-11-29 Wed 21:11] =>  0:25
CLOCK: [2023-11-29 Wed 20:21]--[2023-11-29 Wed 20:46] =>  0:25
CLOCK: [2023-11-29 Wed 19:46]--[2023-11-29 Wed 20:11] =>  0:25
:END:
デプロイで扱いやすいように。

** DONE CI設定
CLOSED: [2023-11-29 Wed 21:48]
:LOGBOOK:
CLOCK: [2023-11-29 Wed 00:19]--[2023-11-29 Wed 00:44] =>  0:25
CLOCK: [2023-11-28 Tue 23:44]--[2023-11-29 Wed 00:09] =>  0:25
CLOCK: [2023-11-28 Tue 23:19]--[2023-11-28 Tue 23:44] =>  0:25
CLOCK: [2023-11-28 Tue 08:50]--[2023-11-28 Tue 08:52] =>  0:02
:END:
テストとビルドとデプロイする。

デプロイしたけど、ブラウザで表示できてないな。
** DONE フィールドで動けるようにする
CLOSED: [2023-12-03 Sun 10:40]
:PROPERTIES:
:Effort:   30:00
:END:
:LOGBOOK:
CLOCK: [2023-12-02 Sat 19:45]--[2023-12-02 Sat 20:10] =>  0:25
CLOCK: [2023-12-02 Sat 18:55]--[2023-12-02 Sat 19:20] =>  0:25
CLOCK: [2023-12-02 Sat 16:08]--[2023-12-02 Sat 16:33] =>  0:25
CLOCK: [2023-12-02 Sat 15:42]--[2023-12-02 Sat 16:07] =>  0:25
CLOCK: [2023-12-02 Sat 15:17]--[2023-12-02 Sat 15:42] =>  0:25
CLOCK: [2023-12-02 Sat 14:49]--[2023-12-02 Sat 15:14] =>  0:25
CLOCK: [2023-12-02 Sat 14:24]--[2023-12-02 Sat 14:49] =>  0:25
CLOCK: [2023-12-02 Sat 13:45]--[2023-12-02 Sat 14:11] =>  0:26
CLOCK: [2023-12-02 Sat 13:20]--[2023-12-02 Sat 13:45] =>  0:25
CLOCK: [2023-12-02 Sat 12:55]--[2023-12-02 Sat 13:20] =>  0:25
CLOCK: [2023-12-02 Sat 12:30]--[2023-12-02 Sat 12:55] =>  0:25
CLOCK: [2023-12-01 Fri 08:56]--[2023-12-01 Fri 09:21] =>  0:25
CLOCK: [2023-12-01 Fri 00:42]--[2023-12-01 Fri 01:07] =>  0:25
CLOCK: [2023-12-01 Fri 00:15]--[2023-12-01 Fri 00:40] =>  0:25
CLOCK: [2023-11-30 Thu 23:50]--[2023-12-01 Fri 00:15] =>  0:25
CLOCK: [2023-11-30 Thu 23:14]--[2023-11-30 Thu 23:39] =>  0:25
CLOCK: [2023-11-30 Thu 22:48]--[2023-11-30 Thu 23:13] =>  0:25
CLOCK: [2023-11-30 Thu 00:35]--[2023-11-30 Thu 01:00] =>  0:25
CLOCK: [2023-11-30 Thu 00:06]--[2023-11-30 Thu 00:32] =>  0:26
CLOCK: [2023-11-29 Wed 23:41]--[2023-11-30 Thu 00:06] =>  0:25
CLOCK: [2023-11-29 Wed 22:10]--[2023-11-29 Wed 22:35] =>  0:25
CLOCK: [2023-11-29 Wed 21:44]--[2023-11-29 Wed 22:09] =>  0:25
CLOCK: [2023-11-28 Tue 08:52]--[2023-11-28 Tue 09:17] =>  0:25
:END:

- テキストで地図を読み込む
- コンポーネントを作る
- 地図を表示する
- 移動できるようにする

実行時エラーになる。表示できない。インターフェースが取り出せないよう。

- コンポーネントの初期化を忘れていた
- LoadLevel()によって読み込んだComponentListをAddEntities()->AddEntityComponent()に渡す。が、AddEntitiesで失敗する。テキストで読み込んだ内容をreflectでオブジェクト化するときに、新しく作成したコンポーネントを初期化するのに失敗している
- ecsComponentListを調べてみよう
  - ecvでGameが入ってない
  - world.Components.Game
- sokoban-go では main.goのw.InitWorld(&gc.Components{})の時点でworld.Components.Gameがセットされている
** DONE マップを表示できるようにする
CLOSED: [2023-12-03 Sun 10:41]
表示する。
** DONE 階数を移動できるようにする
CLOSED: [2023-12-03 Sun 14:41]
:LOGBOOK:
CLOCK: [2023-12-03 Sun 14:13]--[2023-12-03 Sun 14:38] =>  0:25
CLOCK: [2023-12-03 Sun 13:35]--[2023-12-03 Sun 14:00] =>  0:25
CLOCK: [2023-12-03 Sun 12:19]--[2023-12-03 Sun 12:44] =>  0:25
CLOCK: [2023-12-03 Sun 11:33]--[2023-12-03 Sun 11:58] =>  0:25
CLOCK: [2023-12-03 Sun 11:08]--[2023-12-03 Sun 11:33] =>  0:25
CLOCK: [2023-12-03 Sun 10:43]--[2023-12-03 Sun 11:08] =>  0:25
:END:
1階からはじまって、次の階層に移動する。

ワープホール。
** DONE クロスコンパイルする
CLOSED: [2023-12-03 Sun 15:45]
:LOGBOOK:
CLOCK: [2023-12-03 Sun 15:19]--[2023-12-03 Sun 15:44] =>  0:25
:END:
一応CIに設定して保証しておく。
** DONE メッセージが飛び出すのを直す
CLOSED: [2023-12-03 Sun 17:50]
ステート遷移イベントを作る。
** DONE 次の階をランダムに選択する
CLOSED: [2023-12-03 Sun 18:14]
:LOGBOOK:
CLOCK: [2023-12-03 Sun 16:57]--[2023-12-03 Sun 17:22] =>  0:25
CLOCK: [2023-12-03 Sun 16:26]--[2023-12-03 Sun 16:51] =>  0:25
CLOCK: [2023-12-03 Sun 15:51]--[2023-12-03 Sun 16:16] =>  0:25
CLOCK: [2023-12-03 Sun 14:41]--[2023-12-03 Sun 15:06] =>  0:25
:END:
一覧からランダムに選択する。
** DONE HomeStateを作成する
CLOSED: [2023-12-04 Mon 20:44]
:LOGBOOK:
CLOCK: [2023-12-04 Mon 08:48]--[2023-12-04 Mon 09:13] =>  0:25
CLOCK: [2023-12-04 Mon 00:44]--[2023-12-04 Mon 01:09] =>  0:25
CLOCK: [2023-12-03 Sun 19:51]--[2023-12-03 Sun 20:16] =>  0:25
:END:
ゲームプレイの基軸になるメニュー。
** DONE 脱出できるようにする
CLOSED: [2023-12-04 Mon 20:45]
:LOGBOOK:
CLOCK: [2023-12-03 Sun 17:51]--[2023-12-03 Sun 18:16] =>  0:25
:END:
脱出階層で脱出できるようにする。
** DONE 背景を設定する
CLOSED: [2023-12-05 Tue 00:46]
:LOGBOOK:
CLOCK: [2023-12-04 Mon 22:24]--[2023-12-04 Mon 22:49] =>  0:25
CLOCK: [2023-12-04 Mon 21:59]--[2023-12-04 Mon 22:24] =>  0:25
CLOCK: [2023-12-04 Mon 21:34]--[2023-12-04 Mon 21:59] =>  0:25
:END:
背景を追加する。スプライトはあるけど、同じでいいのか。いや、スプライトは1枚の画像を分割するものだから、同じ感じでは扱えないな。変えるとsystemも変えないといけない。面倒なのでとりあえずいいか。
** DONE サブメニュー追加
CLOSED: [2023-12-07 Thu 00:31]
:LOGBOOK:
CLOCK: [2023-12-07 Thu 00:05]--[2023-12-07 Thu 00:30] =>  0:25
CLOCK: [2023-12-06 Wed 23:25]--[2023-12-06 Wed 23:50] =>  0:25
CLOCK: [2023-12-06 Wed 22:32]--[2023-12-06 Wed 22:57] =>  0:25
CLOCK: [2023-12-06 Wed 22:07]--[2023-12-06 Wed 22:32] =>  0:25
CLOCK: [2023-12-06 Wed 00:38]--[2023-12-06 Wed 01:03] =>  0:25
CLOCK: [2023-12-05 Tue 00:47]--[2023-12-05 Tue 01:12] =>  0:25
CLOCK: [2023-12-04 Mon 20:46]--[2023-12-04 Mon 21:11] =>  0:25
:END:
拠点メニューにはサブメニューがある。どうやるか考える。

- 別stateでやる
  - 大量にstateができるのどうなのという感じ。背景コンポーネントとかも同じ感じで準備しないといけない
- リファレンスではどうやっているのだろう。ポーズでは、後ろを透明に表示しつつ、メニューを表示している。あれと同じようなことができないか
  - ポーズメニューでは、OnStopでポーズメニューのエンティティのみを削除しているようだ。ほかのstateでは、すべてのエンティティを削除することが異なる
** DONE pauseステート作成
CLOSED: [2023-12-07 Thu 08:30]
:LOGBOOK:
CLOCK: [2023-12-07 Thu 08:05]--[2023-12-07 Thu 08:30] =>  0:25
CLOCK: [2023-12-07 Thu 00:31]--[2023-12-07 Thu 00:56] =>  0:25
:END:

デバッグで便利なので。
** DONE アイテムを生成する
CLOSED: [2023-12-10 Sun 11:16]
:LOGBOOK:
CLOCK: [2023-12-10 Sun 00:44]--[2023-12-10 Sun 01:09] =>  0:25
CLOCK: [2023-12-10 Sun 00:11]--[2023-12-10 Sun 00:36] =>  0:25
CLOCK: [2023-12-09 Sat 23:40]--[2023-12-10 Sun 00:05] =>  0:25
CLOCK: [2023-12-09 Sat 22:34]--[2023-12-09 Sat 22:59] =>  0:25
CLOCK: [2023-12-09 Sat 22:08]--[2023-12-09 Sat 22:33] =>  0:25
CLOCK: [2023-12-09 Sat 21:20]--[2023-12-09 Sat 21:45] =>  0:25
CLOCK: [2023-12-09 Sat 20:54]--[2023-12-09 Sat 21:19] =>  0:25
CLOCK: [2023-12-09 Sat 17:34]--[2023-12-09 Sat 17:59] =>  0:25
CLOCK: [2023-12-09 Sat 17:09]--[2023-12-09 Sat 17:34] =>  0:25
CLOCK: [2023-12-09 Sat 16:44]--[2023-12-09 Sat 17:09] =>  0:25
CLOCK: [2023-12-09 Sat 12:08]--[2023-12-09 Sat 12:33] =>  0:25
CLOCK: [2023-12-09 Sat 11:39]--[2023-12-09 Sat 12:04] =>  0:25
CLOCK: [2023-12-09 Sat 10:56]--[2023-12-09 Sat 11:21] =>  0:25
CLOCK: [2023-12-09 Sat 10:28]--[2023-12-09 Sat 10:53] =>  0:25
CLOCK: [2023-12-09 Sat 09:58]--[2023-12-09 Sat 10:23] =>  0:25
CLOCK: [2023-12-08 Fri 00:54]--[2023-12-08 Fri 01:19] =>  0:25
CLOCK: [2023-12-08 Fri 00:09]--[2023-12-08 Fri 00:34] =>  0:25
CLOCK: [2023-12-07 Thu 23:16]--[2023-12-07 Thu 23:41] =>  0:25
CLOCK: [2023-12-07 Thu 22:44]--[2023-12-07 Thu 23:09] =>  0:25
CLOCK: [2023-12-07 Thu 22:13]--[2023-12-07 Thu 22:38] =>  0:25
CLOCK: [2023-12-07 Thu 21:37]--[2023-12-07 Thu 22:02] =>  0:25
CLOCK: [2023-12-07 Thu 21:09]--[2023-12-07 Thu 21:34] =>  0:25
CLOCK: [2023-12-07 Thu 20:44]--[2023-12-07 Thu 21:09] =>  0:25
CLOCK: [2023-12-07 Thu 20:16]--[2023-12-07 Thu 20:41] =>  0:25
CLOCK: [2023-12-07 Thu 19:51]--[2023-12-07 Thu 20:16] =>  0:25
CLOCK: [2023-12-07 Thu 08:31]--[2023-12-07 Thu 08:56] =>  0:25
:END:
アイテムを追加する。

- item
  - consumable
  - name
  - description

まずそれぞれのコンポーネントの雛形をファイルで作成する。

- items
  - entityA
    - componentA(consumable)
    - componentB(weight)
  - entityB
    - componentA(consumable)
    - componentB(weight)

で、そのデータを読み込んでエンティティとコンポーネントを生成する関数を作る。

#+caption: engineも作らないといけない
#+begin_src go
	componentList := loader.EntityComponentList{}
	// engineとgameは同数でなければならない。分割されているのが面倒だな…
	componentList.Engine = append(componentList.Engine, loader.EngineComponentList{})
	componentList.Game = append(componentList.Game, gloader.GameComponentList{
		Item: &gc.Item{},
	})
	loader.AddEntities(world, componentList)
#+end_src

#+caption: 元ネタ
#+begin_src rust
pub fn spawn_named_item(
#+end_src
** DONE UI設計
CLOSED: [2023-12-10 Sun 12:55]
:LOGBOOK:
CLOCK: [2023-12-10 Sun 01:09]--[2023-12-10 Sun 01:34] =>  0:25
:END:
いちいちゲーム画面見るのもアレなので、書いておく。
** DONE UIエンティティだけを消す
CLOSED: [2023-12-10 Sun 12:55]
:LOGBOOK:
CLOCK: [2023-12-10 Sun 12:30]--[2023-12-10 Sun 12:55] =>  0:25
CLOCK: [2023-12-10 Sun 11:54]--[2023-12-10 Sun 12:19] =>  0:25
CLOCK: [2023-12-10 Sun 11:17]--[2023-12-10 Sun 11:42] =>  0:25
:END:
DeleteAllEntitiesでステート切り替え時のUIリセットをしている。entitiesが全部消えるので、困る。ほとんどの場合、UIだけをリセットすればよさそう。

UIコンポーネントと、UIコンポーネントを消す関数を作ればよさそう。
** DONE 各メニューを作成する
CLOSED: [2023-12-10 Sun 14:52]
:LOGBOOK:
CLOCK: [2023-12-10 Sun 14:22]--[2023-12-10 Sun 14:47] =>  0:25
CLOCK: [2023-12-10 Sun 13:53]--[2023-12-10 Sun 14:18] =>  0:25
CLOCK: [2023-12-10 Sun 13:12]--[2023-12-10 Sun 13:37] =>  0:25
:END:
仮の内容で全部作る。
