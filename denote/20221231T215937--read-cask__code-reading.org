:PROPERTIES:
:header-args+: :wrap :results raw
:END:
#+title:      Emacs Caskのコードを読む
#+date:       [2022-12-31 Sat 21:59]
#+filetags:   :code:
#+identifier: 20221231T215937

CaskはEmacsのプロジェクト管理ツール。ファイルに依存ライブラリを列挙し、同じ環境を再現できる。Caskの仕組みを知る。

* memo
:LOGBOOK:
CLOCK: [2023-01-05 Thu 23:49]--[2023-01-06 Fri 00:14] =>  0:25
CLOCK: [2023-01-05 Thu 23:14]--[2023-01-05 Thu 23:39] =>  0:25
CLOCK: [2023-01-05 Thu 22:41]--[2023-01-05 Thu 23:06] =>  0:25
CLOCK: [2023-01-05 Thu 22:16]--[2023-01-05 Thu 22:41] =>  0:25
CLOCK: [2023-01-05 Thu 00:29]--[2023-01-05 Thu 00:54] =>  0:25
CLOCK: [2023-01-04 Wed 23:33]--[2023-01-04 Wed 23:58] =>  0:25
CLOCK: [2023-01-04 Wed 23:08]--[2023-01-04 Wed 23:33] =>  0:25
CLOCK: [2023-01-04 Wed 22:40]--[2023-01-04 Wed 23:05] =>  0:25
CLOCK: [2023-01-04 Wed 22:15]--[2023-01-04 Wed 22:40] =>  0:25
CLOCK: [2023-01-04 Wed 21:46]--[2023-01-04 Wed 22:11] =>  0:25
CLOCK: [2023-01-04 Wed 20:04]--[2023-01-04 Wed 20:29] =>  0:25
CLOCK: [2023-01-04 Wed 19:14]--[2023-01-04 Wed 19:39] =>  0:25
:END:
** 機能
:LOGBOOK:
CLOCK: [2023-01-04 Wed 14:35]--[2023-01-04 Wed 15:00] =>  0:25
CLOCK: [2023-01-01 Sun 16:27]--[2023-01-01 Sun 18:00] =>  1:33
:END:
そもそもどんな機能があるか。

~define-error~ 各エラーの定義。

~defstruct~ は構造体を定義する Common Lisp の関数。使い方がわからない。

~check-parens~ カッコの対応をチェックする関数。
** helpの出力
そもそもinstall以外の機能を知らない。

#+begin_src
  USAGE: cask [COMMAND] [OPTIONS]

Emacs dependency management made easy

COMMANDS:

 pkg-file                                Write a ‘define-package’ file.

                                         The file is written to the Cask project root path with name
                                         {project-name}-pkg.el.
 install                                 Install all packages specified in the Cask-file.

                                         The dependencies to packages are also installed.  If a package
                                         already is installed, it will not be installed again.
 update                                  Update package versions.

                                         All packages that are specified in the Cask-file will be updated
                                         including their dependencies.
 upgrade                                 Upgrade Cask itself and its dependencies.

                                         This command requires that Cask is installed using Git and that
                                         Git is available in ‘exec-path’.
 upgrade-cask                            Upgrade Cask itself and its dependencies.

                                         This command requires that Cask is installed using Git and that
                                         Git is available in ‘exec-path’.
 exec [*]                                Execute ARGS with correct ‘exec-path’ and ‘load-path’.
 version                                 Print version for the current project.
 list                                    List this package dependencies.
 info                                    Show info about the current package.
 help [command]                          Display usage information or documentation for COMMAND-NAME.
 load-path                               Print ‘load-path’ for all packages and dependencies.

                                         The output is formatted as a colon path.
 exec-path                               Print ‘exec-path’ for all packages and dependencies.

                                         A dependency will be included in this list of the package has a
                                         directory called bin in the root directory.

                                         The output is formatted as a colon path.
 eval <form>                             Eval FORM with the ‘load-path’ set according to the project.
 path                                    Print ‘exec-path’ for all packages and dependencies.

                                         A dependency will be included in this list of the package has a
                                         directory called bin in the root directory.

                                         The output is formatted as a colon path.
 package-directory                       Print current package installation directory.
 outdated                                Print list of outdated packages.

                                         That is packages that have a more recent version available for
                                         installation.
 files                                   Print list of files specified in the files directive.
                                         If no files directive or no files, do nothing.
 build                                   Build all Elisp files in the files directive.
 clean-elc                               Remove all byte compiled Elisp files in the files directive.
 link [*]                                Manage links.

                                         A link is just that, a symbolic link.  The purpose of the link
                                         command is that you should be able to work with local
                                         dependencies.

                                         For example, let’s say you are developing an Emacs package that
                                         depends on f.el. Consider what happens if you need to extend f.el
                                         with some function that your package requires.

                                         With the link command, you can checkout f.el locally, add it as a
                                         link in your local package.  That means that when you require
                                         f.el, you will require the local package instead of the one
                                         fetched from the ELPA mirror.  Now you add the desired function
                                         to f.el and use your library to try it out.

                                         COMMAND-OR-NAME can be one of: delete, list or a link name.
                                         ARG is sent to some of the commands.

                                         Commands:

                                          $ cask link list

                                           List all project links.

                                          $ cask link name path

                                           Add local link with NAME to PATH.

                                          $ cask link delete name

                                           Delete local link with NAME.
 package [target-dir]                    Build package and put in TARGET-DIR or dist if not specified.
 emacs [*]                               Execute emacs with the appropriate environment.

OPTIONS:

 --proxy <host>                          Set Emacs proxy for HTTP and HTTPS to HOST.
 --http-proxy <host>                     Set Emacs proxy for HTTP to HOST.
 --https-proxy <host>                    Set Emacs proxy for HTTPS to HOST.
 --no-proxy <host>                       Set Emacs no-proxy to HOST.
 --version                               Print Cask’s version.
 -h [command], --help [command]          Display usage information or documentation for COMMAND-NAME.
 --debug                                 Turn on debug output.
 --path <path>                           Run command in this PATH instead of in ‘default-directory’.
 --verbose                               Be verbose and show debug output.
 --silent                                Be silent and do not print anything.
#+end_src
** eplって何
パッケージ関連のライブラリ。

- [[https://github.com/cask/epl][cask/epl: Emacs Package Library]]

** cask--exit-error
渡されたエラーの種類によって正しいメッセージを返す。

#+begin_src git-permalink
https://github.com/kd-collective/cask/blob/467979414c85bb2ce83f5c6ab9f95721164e9efa/cask.el#L237
#+end_src

#+RESULTS:
#+begin_results
  (defun cask--exit-error (bundle err)
#+end_results

#+caption: read は読み進める関数
#+begin_src emacs-lisp
  (read (current-buffer))
#+end_src
** signal
エラーをシグナルする関数。
** cl-flet
ローカル定義関数を作る。
** declare

[[https://ayatakesi.github.io/emacs/24.5/elisp_html/Declare-Form.html][Declare Form (GNU Emacs Lisp Reference Manual)]]

関数やマクロにメタプロパティを付与するのに使う。陳腐化マークをつけたり、TABインデント規則をつけたりできる。たとえば通常defunでは第3引数に来るdoc stringを、ほかのマクロで定義するのに使う。

** cask--with-file
引数のcaskが存在すれば、bodyを評価するマクロ。

- f-file? :: file-regular-p  のエイリアス。regular file って何

** commander
CLIの実行には、commanderというパーサーライブラリを使っているようだ。これを使ってEmacs Lispで書かれた関数をシェルから呼び出せるようにしている。サブコマンド・オプション・ヘルプ表示などをommanderでしている。
** TODO どうやってinstallしているか
:PROPERTIES:
:Effort:   05:00
:END:
:LOGBOOK:
CLOCK: [2023-01-07 Sat 16:32]
CLOCK: [2023-01-07 Sat 16:06]--[2023-01-07 Sat 16:31] =>  0:25
CLOCK: [2023-01-07 Sat 15:38]--[2023-01-07 Sat 16:03] =>  0:25
CLOCK: [2023-01-07 Sat 14:25]--[2023-01-07 Sat 14:50] =>  0:25
CLOCK: [2023-01-07 Sat 12:33]--[2023-01-07 Sat 12:58] =>  0:25
CLOCK: [2023-01-07 Sat 12:07]--[2023-01-07 Sat 12:32] =>  0:25
CLOCK: [2023-01-07 Sat 11:42]--[2023-01-07 Sat 12:07] =>  0:25
CLOCK: [2023-01-07 Sat 00:23]--[2023-01-07 Sat 00:48] =>  0:25
:END:

- cask-install
  - cask--with-environment
    - cl-destructuring-bind 実行結果で変数をバインドする
      - cask--dependencies-and-missing 依存関係を集める
      - cask--install-dependency 個別にインストールを実行
      - missing-dependencies のときはエラーを吐く

bundle構造体に対して、さまざまなアクセサがある感じか。bundleがよくわかってなくてピンときてない感じ。ほとんどの関数はbundleを引数にとる。

- cask--install-dependency
  - print関係やってる
  - 本質的にはepl-install-file か epl-package-install を使ってインストール
    - install-fileはファイルからインストールし、package installは名前からダウンロードか
    - fetcherによって分岐するようだ。fetcherとは
  - epl-refresh package descriptionを更新するs
  - cask--checkout-and-package-dependency パッケージのパスを返す
  - cask-dependency 系は何をやっているのだろう
  - cask--with-package 引数がパッケージであればbodyを評価し、パッケージでなければ例外を返す

** TODO cask-printの仕組み
:PROPERTIES:
:Effort:   02:00
:END:
cask-print内でgreen関数を使って出力を色付けできる。直接green関数は中でないと利用できない。これはどういう仕組みになっているのだろう。

#+caption:
#+begin_src emacs-lisp
(cask-print "----" (green "green") "----")
#+end_src

#+RESULTS:
#+begin_results
----[32mgreen[0m----
#+end_results

** TODO どこでcask structをセットしているか
テストを見ればよさそうに見える。

** TODO fetcherとは何か
どのバージョン管理を使うかということに見える。

#+caption: デフォルト値
#+begin_src emacs-lisp
  (:git :bzr :hg :darcs :svn :cvs)
#+end_src

** TODO recipeとは何か
