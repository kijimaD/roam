#+title:      KDOC 53: Goで独自定義のエラーをconstにする方法
#+date:       [2023-11-03 Fri 21:40]
#+filetags:   :code:
#+identifier: 20231103T214045

Goではプログラマを縛る方法が少なく、開発者を信用し性善説で行く方針になっている。

constの制約が大きく、例えば独自定義のエラーを定義するとき、以下のように書けない。

#+caption: インスタンスや実行するまで値が決まらないものはconstに指定できない
#+begin_src go
  const errNotFound = errors.New("not found")
#+end_src

いっぽうvarで定義すると簡単にできる。

#+caption: varで定義すると簡単にできる
#+begin_src go
  var errNotFound = errors.New("not found")
#+end_src

しかしvarなので、書き換えができてしまう。これを、書き換えられないようにするには、というのが本題である。以下のようにする。

#+caption: プリミティブ型の定義型を作って、そのインスタンスを入れる
#+begin_src go
  // プリミティブ型の定義型を作る
  type errNotFound int
  // メソッドを定義してerrorインターフェースを満たす
  func (e errNotFound) Error() string {
          return "not found error"
  }
  // インスタンス(プリミティブ型)をconstにする
  const (
    ErrNotFound errNotFound = 0
  )
#+end_src

関連。
- [[https://www.oreilly.co.jp/books/9784873119694/][実用 Go言語]]で解説されていた方法
