:properties:
:ID: 20250703T174843
:mtime:    20250703185549
:ctime:    20250703174853
:end:
#+title:      KDOC 418: 実行時のオーバーヘッドなしで型のサイズを判定する
#+date:       [2025-07-03 Thu 17:48]
#+filetags:   :draft:wiki:
#+identifier: 20250703T174843

# (kd/denote-kdoc-rename)
# (denote-rename-file-using-front-matter (buffer-file-name) 0)
# (save-excursion (while (re-search-backward ":draft" nil t) (replace-match "")))
# (flush-lines "^\\#\s.+?")

# ====ポリシー。
# 1ファイル1アイデア。
# 1ファイルで内容を完結させる。
# 常にほかのエントリとリンクする。
# 自分の言葉を使う。
# 参考文献を残しておく。
# 文献メモの場合は、感想と混ぜないこと。1つのアイデアに反する
# ツェッテルカステンの議論に寄与するか。それで本を書けと言われて書けるか
# 頭のなかやツェッテルカステンにある問いとどのようにかかわっているか
# エントリ間の接続を発見したら、接続エントリを追加する。カード間にあるリンクの関係を説明するカード。
# アイデアがまとまったらアウトラインエントリを作成する。リンクをまとめたエントリ。
# エントリを削除しない。古いカードのどこが悪いかを説明する新しいカードへのリンクを追加する。
# 恐れずにカードを追加する。無意味の可能性があっても追加しておくことが重要。
# 個人の感想・意思表明ではない。事実や書籍情報に基づいている

# ====永久保存メモのルール。
# 自分の言葉で書く。
# 後から読み返して理解できる。
# 他のメモと関連付ける。
# ひとつのメモにひとつのことだけを書く。
# メモの内容は1枚で完結させる。
# 論文の中に組み込み、公表できるレベルである。

# ====水準を満たす価値があるか。
# その情報がどういった文脈で使えるか。
# どの程度重要な情報か。
# そのページのどこが本当に必要な部分なのか。
# 公表できるレベルの洞察を得られるか

# ====フロー。
# 1. 「走り書きメモ」「文献メモ」を書く
# 2. 1日1回既存のメモを見て、自分自身の研究、思考、興味にどのように関係してくるかを見る
# 3. 追加すべきものだけ追加する

* この文書のステータス
- 作成
  - [ ] <署名>
# (progn (kill-line -1) (insert (format "  - [X] %s 貴島" (format-time-string "%Y-%m-%d"))))
- レビュー
  - [ ] <署名>
# (progn (kill-line -1) (insert (format "  - [X] %s 貴島" (format-time-string "%Y-%m-%d"))))

# チェックリスト ================
# 関連をつけた。
# タイトルがフォーマット通りにつけられている。
# 内容をブラウザに表示して読んだ(作成とレビューのチェックは同時にしない)。
# 文脈なく読めるのを確認した。
# おばあちゃんに説明できる。
# いらない見出しを削除した。
# タグを適切にした。
# すべてのコメントを削除した。
* 概要
# 本文(見出しも設定する)

CPUアーキテクチャによって、型のサイズは異なることがある。実行時のオーバーヘッドなしで判定しているのをGo言語自体のソースコードで見かけた。

#+caption: uint型のビットサイズを判定する
#+begin_src git-permalink
https://github.com/golang/go/blob/0f8ab2db177baee7b04182f5641693df3b212aa9/src/math/bits/bits.go#L17
#+end_src

#+RESULTS:
#+begin_src
const uintSize = 32 << (^uint(0) >> 63) // 32 or 64
#+end_src

ビット演算に慣れてないので、一瞬でわからない。確認する。

- ~^~ でビット反転する
- >> で右ビット演算する
- << で左ビット演算する

中心になるアイデアは、すべてのビットに1が立つとビットサイズの違いが現れるということだ。分解して見る。

#+caption: それぞれ見る(64bitアーキテクチャで実行した)
#+begin_src go
  import "fmt"
  func main() {
    fmt.Printf("%b\n", uint(0))
    fmt.Printf("%b\n", ^uint(0))

    fmt.Printf("%d\n", 32 << 0) // 32bitの場合、すべてシフトされて0になっている。移動しない
    fmt.Printf("%d\n", 32 << 1) // 64bitの場合、シフトして1が残る。1だけ左シフトする
  }
#+end_src

#+RESULTS:
#+begin_src
0
1111111111111111111111111111111111111111111111111111111111111111
32
64
#+end_src

ビットシフト演算子のどちらが移動量かわからなくなるので確認する。移動元と移動量の位置は同じで、向きでシフトの向きが異なると覚える。

#+begin_src go
  import "fmt"
  func main() {
    fmt.Printf("%b\n", 0b0010 << 1)
    fmt.Printf("%b\n", 0b0010 >> 1)
  }
#+end_src

#+RESULTS:
#+begin_src
100
1
#+end_src

* 関連
# 関連するエントリ。なぜ関連させたか理由を書く。意味のあるつながりを意識的につくる。
# - この事実は自分のこのアイデアとどう整合するか。
# - この現象はあの理論でどう説明できるか。
# - ふたつのアイデアは互いに矛盾するか、互いを補っているか。
# - いま聞いた内容は以前に聞いたことがなかったか。
# - メモ y についてメモ x はどういう意味か。
# - 対立する
# - 修正する
# - 補足する
# - 付け加えるもの
# - アイデア同士を組み合わせて新しいものを生み出せないか
# - どんな疑問が浮かんだか
なし。
