:PROPERTIES:
:ID:       5f669fae-12c2-4562-a037-a67f58a0dc72
:END:
#+title: deploy
* 概要
デプロイは、開発したアプリケーションをサーバに展開して利用できるようにすること。現代的な開発においてはデプロイを頻繁にして次々とリリースしていくため、デプロイのコストが低いことは重視される。
* Memo
** 実際のチーム開発に必要な周辺ツール
単にデプロイが実行できるだけではチーム開発では不便である。

- 検証環境用デプロイ
  ブランチとマシン環境を指定できる。
- 本番環境用デプロイ
  事故防止のため、デフォルトブランチだけをproductionマシンにデプロイできる。
- デプロイのトリガー通知
  誰がどのブランチを、どのマシン環境に向けてデプロイしたのか。誰かと同時に実行してないか。
- デプロイの成功/失敗通知
  デプロイが成功したか。失敗した場合はジョブへのリンクを表示する。
** コンテナデプロイとGitデプロイの違い
EC2インスタンスやオンプレミスでサーバを動かす旧来の方法は、本質的にgit pullによって変更コードを取り込み、ビルドしてリリースする。git管理しているコードしか反映できず、言語環境や環境変数、秘密情報はサーバを操作する必要がある。そのため変更を追うのが難しく、それぞれの環境が異なるので再現性に欠ける。

コンテナデプロイでは、コードに加えて言語環境やライブラリも含めてコンテナに封入する。コンテナホストサービスによって秘密情報の登録もサポートされている。再現性が高く、宣言的に記述するためメンテナンスしやすい。
** ブルーグリーン・デプロイ
古い環境はブルー、新しい環境はグリーン。古いデプロイと新しいデプロイが同時に混在する環境を構築した後、ロードバランサー等によってトラフィックを切り替え、ダウンタイムなしで環境を切り替えること。ユーザ側からみるとどちらかの状態しかなく、整合性が保たれている。
** ローリングアップデート
稼働中のシステムを完全には停止させずに、徐々に新しいものに入れ替えていく方式。更新中は新旧のバージョンが混在するので整合性を維持しなければならない。
** カナリアリリース
新機能を一部ユーザーのみが利用できるようにリリースして、新機能に問題がないことを確認しながら、段階的に全体に展開していくデプロイ手法のこと。
* Tasks
** TODO [[https://www.amazon.co.jp/Release-%E6%9C%AC%E7%95%AA%E7%94%A8%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E8%A3%BD%E5%93%81%E3%81%AE%E8%A8%AD%E8%A8%88%E3%81%A8%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AB-Michael-T-Nygard/dp/4274067491][Release It! 本番用ソフトウェア製品の設計とデプロイのために | Michael T. Nygard, でびあんぐる |本 | 通販 | Amazon]]
本番用ソフトウェアの本。
* Reference
** [[https://www.amazon.co.jp/dp/B01N0SS6NF/ref=dp-kindle-redirect?_encoding=UTF8&btkr=1][Amazon.co.jp: Deploying Rails with Docker, Kubernetes and ECS (English Edition) eBook : Acuña, Pablo: Foreign Language Books]]
[[id:1658782a-d331-464b-9fd7-1f8233b8b7f8][Docker]], [[id:81b73757-21b3-438c-ab65-680b5ad88a1b][Kubernetes]], [[id:d17ea774-2739-44f3-89dc-97a86b2c7bf7][AWS]] ECSで[[id:e04aa1a3-509c-45b2-ac64-53d69c961214][Rails]]をデプロイする本。
* Archives
