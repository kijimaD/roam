<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><author><name>Kijima Daigo</name></author>
<title>Insomnia</title>
<generator>Emacs webfeeder.el</generator>
<link href="https://kijimad.github.io/roam"/>
<link href="https://kijimad.github.io/roam/atom.xml" rel="self"/>
<id>https://kijimad.github.io/roam/atom.xml</id>
<updated>2025-06-14T13:31:59+09:00</updated>
<entry>
  <title>Org-roam</title>
  <author><name>root</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orgc741ec8" class="outline-2">
 <h2 id="orgc741ec8"> <a href="#orgc741ec8">概要</a></h2>
 <div class="outline-text-2" id="text-orgc741ec8">
 <p>
Org-roamはRoam Research <sup> <a id="fnr.1" class="footref" href="#fn.1" role="doc-backlink">1</a></sup>に着想を得て作られた <a href="20210508234743-emacs.html#ID-1ad8c3d5-97ba-4905-be11-e6f2626127ad">Emacs</a>のメモパッケージ。 <a href="20210907012153-org_mode.html#ID-7e85e3f3-a6b9-447e-9826-307a3618dac8">org-mode</a>をベースに、目的ファイルへのアクセスしやすさ、リンク、グラフ化の機能を強化する。
</p>

 <p>
本文書のトップページ <a href="index.html#ID-2709c815-cd38-4679-86e8-ff2d3b8817e4">Insomnia</a>のグラフは、org-roamが生成するsqliteレコードを加工して作成している。
</p>

 <dl class="org-dl"> <dt>GitHubリポジトリ</dt> <dd> <a href="https://github.com/org-roam/org-roam">https://github.com/org-roam/org-roam</a></dd>
 <dt>公式サイト</dt> <dd> <a href="https://www.orgroam.com/">https://www.orgroam.com/</a></dd>
 <dt>マニュアル</dt> <dd> <a href="https://www.orgroam.com/manual.html">https://www.orgroam.com/manual.html</a></dd>
</dl></div>
</div>
 <div id="outline-container-org7759c40" class="outline-2">
 <h2 id="org7759c40"> <a href="#org7759c40">Memo</a></h2>
 <div class="outline-text-2" id="text-org7759c40">
</div>
 <div id="outline-container-org630aa12" class="outline-3">
 <h3 id="org630aa12"> <a href="#org630aa12">db関連がおかしくなったとき</a></h3>
 <div class="outline-text-3" id="text-org630aa12">
 <p>
dbへ書き込みできませんエラーが出たとき。
</p>

 <ul class="org-ul"> <li> <code>(org-roam-db-location)</code> でDBが保存されているパスを調べる。</li>
 <li>.dbファイルを削除。</li>
 <li> <code>(org-roam-db-clear-all)</code> でキャッシュ削除。</li>
 <li> <code>(org-roam-db-sync)</code> によってdbファイルを再作成。</li>
</ul> <p>
 <code>Selecting deleted buffer</code> が出るとき。
</p>

 <ul class="org-ul"> <li>ライブラリをすべて削除してインストールし直す</li>
 <li>emacsql-sqliteを保存しているディレクトリに行く。sqliteディレクトリ下でmakeしなおす
 <ul class="org-ul"> <li>make clean && make emacsql-sqlite</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org4ec22bd" class="outline-3">
 <h3 id="org4ec22bd"> <a href="#org4ec22bd">バックエンドの違いを吸収する関数</a></h3>
 <div class="outline-text-3" id="text-org4ec22bd">
 <p>
いわゆるコネクターパターン。接続に使用する関数を返す関数。
</p>

 <div class="org-src-container">
 <pre class="src src-git-permalink">https://github.com/kd-collective/org-roam/blob/abe63b436035049923ae96639b9b856697047779/org-roam-db.el#L123-L137
</pre>
</div>

 <div class="results" id="org3146f34">
 <p>
(defun org-roam-db–conn-fn ()
  “Return the function for creating the database connection.”
  (cl-case org-roam-database-connector
    (sqlite
     (progn
       (require ’emacsql-sqlite)
       #’emacsql-sqlite))
    (libsqlite3
     (progn
       (require ’emacsql-libsqlite3)
       #’emacsql-libsqlite3))
    (sqlite3
     (progn
       (require ’emacsql-sqlite3)
       #’emacsql-sqlite3))))
</p>

</div>
</div>
</div>
</div>
 <div id="outline-container-org0a94a09" class="outline-2">
 <h2 id="org0a94a09"> <a href="#org0a94a09">Tasks</a></h2>
</div>
 <div id="outline-container-orgfa8f0a9" class="outline-2">
 <h2 id="orgfa8f0a9"> <a href="#orgfa8f0a9">References</a></h2>
 <div class="outline-text-2" id="text-orgfa8f0a9">
</div>
 <div id="outline-container-orgd03ff4a" class="outline-3">
 <h3 id="orgd03ff4a"> <a href="#orgd03ff4a"></a> <a href="https://futurismo.biz/using-org-roam-one-year-2022/">🖊知的生産のキラーアプリOrg-roamを１年使い倒し学ぶとはなにか考えたポエム(2022) | Futurismo</a></h3>
 <div class="outline-text-3" id="text-orgd03ff4a">
 <p>
ZettelkastenやOrg-roamの解説。
</p>
</div>
</div>
 <div id="outline-container-org6a4aa60" class="outline-3">
 <h3 id="org6a4aa60"> <a href="#org6a4aa60"></a> <a href="https://www.orgroam.com/manual.html">Org-roam User Manual</a></h3>
 <div class="outline-text-3" id="text-org6a4aa60">
 <p>
マニュアル。
</p>
</div>
</div>
 <div id="outline-container-orge33287f" class="outline-3">
 <h3 id="orge33287f"> <a href="#orge33287f"></a> <a href="https://www.youtube.com/watch?v=AyhPmypHDEw">Getting Started with Org Roam - Build a Second Brain in Emacs - YouTube</a></h3>
 <div class="outline-text-3" id="text-orge33287f">
 <p>
 <a href="20210915221421-systemcrafters.html#ID-fa497359-ae3f-494a-b24a-9822eefe67ad">System Crafters</a>のOrg Roam紹介。
</p>
</div>
</div>
 <div id="outline-container-org0c53af5" class="outline-3">
 <h3 id="org0c53af5"> <a href="#org0c53af5"></a> <a href="https://www.mhatta.org/wp/2021/02/20/org-mode-101-9/#org125e180">Org mode 教室 その9: org-roam でアイデアをひねり出す</a></h3>
 <div class="outline-text-3" id="text-org0c53af5">
 <p>
具体的なワークフローがわかりやすい。
</p>
</div>
</div>
 <div id="outline-container-orgf1ef9f0" class="outline-3">
 <h3 id="orgf1ef9f0"> <a href="#orgf1ef9f0"></a> <a href="https://blog.jethro.dev/posts/introducing_org_roam/">https://blog.jethro.dev/posts/introducing_org_roam/</a></h3>
 <div class="outline-text-3" id="text-orgf1ef9f0">
 <p>
作者サイトのマニュアル。
</p>
</div>
</div>
 <div id="outline-container-org3e38a80" class="outline-3">
 <h3 id="org3e38a80"> <a href="#org3e38a80"></a> <a href="https://blog.jethro.dev/posts/org_mode_workflow_preview/">https://blog.jethro.dev/posts/org_mode_workflow_preview/</a></h3>
 <div class="outline-text-3" id="text-org3e38a80">
 <p>
org-modeのワークフロー。
</p>
</div>
</div>
</div>
 <div id="outline-container-orgc7035f4" class="outline-2">
 <h2 id="orgc7035f4"> <a href="#orgc7035f4">Archives</a></h2>
 <div class="outline-text-2" id="text-orgc7035f4">
</div>
 <div id="outline-container-orga98ab2e" class="outline-3">
 <h3 id="orga98ab2e"> <a href="#orga98ab2e"> <span class="done CLOSE">CLOSE</span> Unify workflow management with roam</a></h3>
 <div class="outline-text-3" id="text-orga98ab2e">
 <p>
 <a href="https://d12frosted.io/posts/2021-01-16-task-management-with-roam-vol5.html">https://d12frosted.io/posts/2021-01-16-task-management-with-roam-vol5.html</a>
</p>
</div>
</div>
 <div id="outline-container-org51c20d4" class="outline-3">
 <h3 id="org51c20d4"> <a href="#org51c20d4"> <span class="done CLOSE">CLOSE</span> CI, sqliteを入れて試してみる</a></h3>
 <div class="outline-text-3" id="text-org51c20d4">
 <ul class="org-ul"> <li>search emacsql</li>
</ul> <p>
Default install sqlite on ubuntu, so does not matter.
</p>
</div>
</div>
 <div id="outline-container-orgf4dd882" class="outline-3">
 <h3 id="orgf4dd882"> <a href="#orgf4dd882"> <span class="done DONE">DONE</span> 基本的キーバインド</a></h3>
 <div class="outline-text-3" id="text-orgf4dd882">
 <ul class="org-ul"> <li>find(C-c n f)</li>
 <li>バックリンク(C-c n l)</li>
 <li>Roamリンク挿入(C-c n i)補完を有効にすることであまり使わなくなる。</li>
</ul></div>
</div>
 <div id="outline-container-orgeb6ece8" class="outline-3">
 <h3 id="orgeb6ece8"> <a href="#orgeb6ece8"> <span class="done DONE">DONE</span> idリンクをpublishできない問題</a></h3>
 <div class="outline-text-3" id="text-orgeb6ece8">
 <p>
roamのidがhtmlに変換できないよう。
</p>
 <blockquote>
 <p>
Unable to resolve link
</p>
</blockquote>
 <p>
になる。
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">setq</span> org-hugo-base-dir  <span class="org-string">"."</span>)
( <span class="org-keyword">setq</span> org-export-with-broken-links t)
</pre>
</div>
 <p>
するとできるが、idリンクを辿れない。
ほかのサイトではidがあってもできてるように見える。
 <a href="https://hugocisneros.com/blog/my-org-roam-notes-workflow/">https://hugocisneros.com/blog/my-org-roam-notes-workflow/</a>
orgのバージョンを最新にしたが変わらず。
</p>

 <p>
公式で言及。
 <a href="https://github.com/org-roam/org-roam/wiki/Hitchhiker's-Rough-Guide-to-Org-roam-V2#export">https://github.com/org-roam/org-roam/wiki/Hitchhiker's-Rough-Guide-to-Org-roam-V2#export</a>
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">setq</span> org-id-link-to-org-use-id t)
( <span class="org-keyword">setq</span> org-id-extra-files (org-roam--list-files org-roam-directory))
</pre>
</div>
 <p>
↓で設定していた。これを設定すると成功した。
 <a href="https://hugocisneros.com/org-config/#configuration">https://hugocisneros.com/org-config/#configuration</a>
</p>

 <p>
 <a href="https://gist.github.com/hugcis/1f2d2ad4b98b07ee543f10232ba1b025">https://gist.github.com/hugcis/1f2d2ad4b98b07ee543f10232ba1b025</a>
</p>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">require</span> ' <span class="org-constant">find-lisp</span>)
( <span class="org-keyword">defun</span>  <span class="org-function-name">hugcis/publish-note</span> (file)
   <span class="org-doc">"Publish a note in FILE."</span>
  ( <span class="org-keyword">interactive</span>)
  ( <span class="org-keyword">with-current-buffer</span> (find-file-noselect file)
    (projectile-mode -1)
    ( <span class="org-keyword">setq</span> org-hugo-section  <span class="org-string">"notes"</span>
          org-hugo-base-dir  <span class="org-string">"."</span>
          citeproc-org-org-bib-header  <span class="org-string">"* Bibliography\n<ol class=\"biblio-list\">"</span>
          citeproc-org-org-bib-footer  <span class="org-string">"</ol>"</span>)
    ( <span class="org-keyword">let</span> ((org-id-extra-files (find-lisp-find-files org-roam-directory  <span class="org-string">"</span> <span class="org-string"> <span class="org-warning">\</span></span> <span class="org-string">.org$"</span>)))
        (org-hugo-export-wim-to-md))))
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-shell">find . -name  <span class="org-string">'*.org'</span> | emacs --batch -l ./publish.el --funcall kd/publish
</pre>
</div>
</div>
</div>
 <div id="outline-container-org29ac480" class="outline-3">
 <h3 id="org29ac480"> <a href="#org29ac480"> <span class="done DONE">DONE</span> 初期設定</a></h3>
 <div class="outline-text-3" id="text-org29ac480">
 <p>
⚠バージョンが上がって設定が変わった。この内容は古い。
roamのデフォルトディレクトリを作成して、そこでファイルが作成されたり、検索対象になる。
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">require</span> ' <span class="org-constant">org-roam</span>)
(add-hook 'after-init-hook 'org-roam-mode)
(make-directory  <span class="org-string">"~/roam"</span> t)
( <span class="org-keyword">setq</span> org-roam-directory  <span class="org-string">"~/roam"</span>)
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">setq</span> org-roam-completion-everywhere t)
(define-key org-mode-map (kbd  <span class="org-string">"C-M-i"</span>) 'completion-at-point)
</pre>
</div>
 <p>
リンク補完が有効になります。非常に便利。
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(define-key org-roam-mode-map (kbd  <span class="org-string">"C-c n l"</span>) 'org-roam)
(define-key org-roam-mode-map (kbd  <span class="org-string">"C-c n f"</span>) 'org-roam-find-file)
(define-key org-roam-mode-map (kbd  <span class="org-string">"C-c n g"</span>) 'org-roam-graph)
(define-key org-mode-map (kbd  <span class="org-string">"C-c n i"</span>) 'org-roam-insert)
(define-key org-mode-map (kbd  <span class="org-string">"C-c n I"</span>) 'org-roam-insert-immediate)
</pre>
</div>
</div>
</div>
 <div id="outline-container-org53f5560" class="outline-3">
 <h3 id="org53f5560"> <a href="#org53f5560"> <span class="done DONE">DONE</span> 外部リンクをグラフに表示したくない</a></h3>
 <div class="outline-text-3" id="text-org53f5560">
 <p>
 <code>org-roam-graph</code> でファイルリンクだけのつながりを表示したい。
v1ではファイルリンクだけで、外部リンクは出てなくてわかりやすかった。
</p>

 <p>
 <a href="https://github.com/org-roam/org-roam-ui">org-roam-ui</a>を使ってみた。めちゃかっこいい。
</p>

 <p>
org-roam-graph-link-hidden-types でhttp, httpsを指定すると消せた。
これでCIでも出力できるはず。
</p>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">setq</span> org-roam-graph-link-hidden-types '( <span class="org-string">"https"</span>  <span class="org-string">"http"</span>  <span class="org-string">"file"</span>))
</pre>
</div>
</div>
</div>
 <div id="outline-container-org93498e2" class="outline-3">
 <h3 id="org93498e2"> <a href="#org93498e2"> <span class="done DONE">DONE</span> d3でのグラフ出力</a></h3>
 <div class="outline-text-3" id="text-org93498e2">
 <ol class="org-ol"> <li>org-roam-db-syncでdbファイルを生成する</li>
 <li>dbファイルをグラフとしてjsonに変換する</li>
 <li> <a href="20210509100112-javascript.html#ID-a6980e15-ecee-466e-9ea7-2c0210243c0d">JavaScript</a>のd3ライブラリでjsonを読み込む</li>
 <li>ブラウザ描画</li>
</ol></div>
</div>
 <div id="outline-container-orgf4b774f" class="outline-3">
 <h3 id="orgf4b774f"> <a href="#orgf4b774f"> <span class="done CLOSE">CLOSE</span> Selecting deleted bufferエラー</a></h3>
 <div class="outline-text-3" id="text-orgf4b774f">
 <p>
新しく構築した環境にて、  <code>(org-roam-db-sync)</code> をやると  <code>Selecting deleted buffer</code> がエラーが出る。
依存しているemacs-sqlite関係でなにかおかしくなっているよう。同じくemacs-sqliteに依存しているmagit-forgeも動かない。
</p>

 <p>
メインマシン、 <a href="20220427215330-github_actions.html#ID-2d35ac9e-554a-4142-bba7-3c614cbfe4c4">GitHub Actions</a>環境ではうまくいっているので、sqlite関係か、.emacs.dで何か起きている。
うまくいくようになった。関連ライブラリが修正されたよう。
</p>
</div>
</div>
 <div id="outline-container-org7071643" class="outline-3">
 <h3 id="org7071643"> <a href="#org7071643"> <span class="done DONE">DONE</span> dbを使って何をしているのか    <span class="tag"> <span class="DontKnow">DontKnow</span></span></a></h3>
 <div class="outline-text-3" id="text-org7071643">
 <p>
デフォルトではsqliteを利用しているのは知っているが、実際何をしているのだろうか。結論: ファイルの変更をdbに同期し、再利用しやすいようにしている。
</p>

 <p>
まずorg-roam-db.elを見てみる。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 1: </span>Database APIの箇所に、クエリを実行する関数がある。削除関数…dbのバイナリファイルを見て、存在していればテーブルを消す</label> <pre class="src src-git-permalink">https://github.com/kd-collective/org-roam/blob/abe63b436035049923ae96639b9b856697047779/org-roam-db.el#L279-L288
</pre>
</div>

 <div class="results" id="org3305131">
 <p>
;;; Database API
;;;; Clearing
(defun org-roam-db-clear-all ()
  “Clears all entries in the Org-roam cache.”
  (interactive)
  (when (file-exists-p org-roam-db-location)
    (dolist (table (mapcar #’car org-roam-db–table-schemata))
      (org-roam-db-query `[:delete :from ,table]))))
</p>

 <p>
(defun org-roam-db-clear-file (&optional file)
</p>

</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 2: </span>ファイル情報をinsertする。syncしたときに呼び出す</label> <pre class="src src-git-permalink">https://github.com/kd-collective/org-roam/blob/abe63b436035049923ae96639b9b856697047779/org-roam-db.el#L309-L323
</pre>
</div>

 <div class="results" id="orgd08c53e">
 <p>
(defun org-roam-db-insert-file ()
  “Update the files table for the current buffer.
If UPDATE-P is non-nil, first remove the file in the database.”
  (let* ((file (buffer-file-name))
         (file-title (org-roam-db–file-title))
         (attr (file-attributes file))
         (atime (file-attribute-access-time attr))
         (mtime (file-attribute-modification-time attr))
         (hash (org-roam-db–file-hash)))
    (org-roam-db-query
     [:insert :into files
      :values $v1]
     (list (vector file file-title hash atime mtime)))))
</p>

 <p>
(defun org-roam-db-get-scheduled-time ()
</p>

</div>

 <p>
org-roam-db-insert-fileが呼ばれることによって、orgファイルの追加をdbと同期する。こういった感じで1ファイルの追加、削除、変更に対応する同期関数がある。
</p>

 <p>
↑のみでは1ファイルのみなので、org-roamファイル全体に大して同期をかける関数がある。org-roam-db-sync。変更のタイプを判定して、各関数で処理し、orgファイルとdbの内容を同期する。なるほど。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 3: </span>全org-roamファイルに対して、差分があればdb同期をかける</label> <pre class="src src-git-permalink">https://github.com/kd-collective/org-roam/blob/abe63b436035049923ae96639b9b856697047779/org-roam-db.el#L611-L643
</pre>
</div>

 <div class="results" id="org1437635">
 <p>
(defun org-roam-db-sync (&optional force)
  “Synchronize the cache state with the current Org files on-disk.
If FORCE, force a rebuild of the cache from scratch.”
  (interactive “P”)
  (org-roam-db–close) ;; Force a reconnect
  (when force (delete-file org-roam-db-location))
  (org-roam-db) ;; To initialize the database, no-op if already initialized
  (org-roam-require ’(org-ref oc))
  (let* ((gc-cons-threshold org-roam-db-gc-threshold)
         (org-agenda-files nil)
         (org-roam-files (org-roam-list-files))
         (current-files (org-roam-db–get-current-files))
         (modified-files nil))
    (dolist (file org-roam-files)
      (let ((contents-hash (org-roam-db–file-hash file)))
        (unless (string= (gethash file current-files)
                         contents-hash)
          (push file modified-files)))
      (remhash file current-files))
    (emacsql-with-transaction (org-roam-db)
      (org-roam-dolist-with-progress (file (hash-table-keys current-files))
          “Clearing removed files…”
        (org-roam-db-clear-file file))
      (org-roam-dolist-with-progress (file modified-files)
          “Processing modified files…”
        (condition-case err
            (org-roam-db-update-file file ’no-require)
          (error
           (org-roam-db-clear-file file)
           (lwarn ’org-roam :error “Failed to process %s with error %s, skipping…”
                  file (error-message-string err))))))))
</p>

 <p>
;;;###autoload
</p>

</div>

 <p>
直にdbに追加する関数を呼ぶことはなく、ファイルの変更をもとに同期関数経由でdbに追加されるようだ。ファイルの方が先に存在していて、後でdbと同期する。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 4: </span>取得関数</label> <pre class="src src-git-permalink">https://github.com/kd-collective/org-roam/blob/abe63b436035049923ae96639b9b856697047779/org-roam-node.el#L461-L477
</pre>
</div>

 <div class="results" id="orgfd8baeb">
 <p>
;;;###autoload
(cl-defun org-roam-node-find (&optional other-window initial-input filter-fn &key templates)
  “Find and open an Org-roam node by its title or alias.
INITIAL-INPUT is the initial input for the prompt.
FILTER-FN is a function to filter out nodes: it takes an `org-roam-node’,
and when nil is returned the node will be filtered out.
If OTHER-WINDOW, visit the NODE in another window.
The TEMPLATES, if provided, override the list of capture templates (see
`org-roam-capture-’.)”
  (interactive current-prefix-arg)
  (let ((node (org-roam-node-read initial-input filter-fn)))
    (if (org-roam-node-file node)
        (org-roam-node-visit node other-window)
      (org-roam-capture-
       :node node
       :templates templates
       :props ’(:finalize find-file)))))
</p>

</div>

 <ul class="org-ul"> <li>ファイルがあれば、visitを呼び出す</li>
 <li>ファイルがなければ、作成するためにcaptureを呼び出す。dbと関係することは同期時にやるので、ここでは一切考えなくてよく、責務分離できている</li>
</ul> <p>
dbへの同期をみた。利用はどうしているのだろうか。
</p>

 <p>
探す系は、org-roam-node.elに含まれている。
</p>

 <div class="org-src-container">
 <pre class="src src-git-permalink">https://github.com/kd-collective/org-roam/blob/abe63b436035049923ae96639b9b856697047779/org-roam-node.el#L461-L477
</pre>
</div>

 <div class="results" id="org196d41e">
 <p>
;;;###autoload
(cl-defun org-roam-node-find (&optional other-window initial-input filter-fn &key templates)
  “Find and open an Org-roam node by its title or alias.
INITIAL-INPUT is the initial input for the prompt.
FILTER-FN is a function to filter out nodes: it takes an `org-roam-node’,
and when nil is returned the node will be filtered out.
If OTHER-WINDOW, visit the NODE in another window.
The TEMPLATES, if provided, override the list of capture templates (see
`org-roam-capture-’.)”
  (interactive current-prefix-arg)
  (let ((node (org-roam-node-read initial-input filter-fn)))
    (if (org-roam-node-file node)
        (org-roam-node-visit node other-window)
      (org-roam-capture-
       :node node
       :templates templates
       :props ’(:finalize find-file)))))
</p>

</div>

 <ul class="org-ul"> <li>nodeが存在していればファイルを開く。そうでなければorg-roam-captureでテンプレート画面を開く</li>
 <li>開くときもdbに接続して情報を取ってくるはずだが、コードのどの箇所かわからなかった</li>
</ul></div>
</div>
 <div id="outline-container-org32fa3c7" class="outline-3">
 <h3 id="org32fa3c7"> <a href="#org32fa3c7"> <span class="done DONE">DONE</span> メモのとり方について再考</a></h3>
 <div class="outline-text-3" id="text-org32fa3c7">
 <ul class="org-ul"> <li>denoteとroamの使い分けが微妙</li>
 <li>1つの見出しが1つのファイルに属するとは限らない</li>
 <li>文章としてあまり読みやすいものではない</li>
</ul></div>
</div>
 <div id="outline-container-org70877c4" class="outline-3">
 <h3 id="org70877c4"> <a href="#org70877c4"> <span class="done DONE">DONE</span> </a> <a href="https://www.amazon.co.jp/TAKE-NOTES-%E2%80%95%E2%80%95%E3%83%A1%E3%83%A2%E3%81%A7%E3%80%81%E3%81%82%E3%81%AA%E3%81%9F%E3%81%A0%E3%81%91%E3%81%AE%E3%82%A2%E3%82%A6%E3%83%88%E3%83%97%E3%83%83%E3%83%88%E3%81%8C%E8%87%AA%E7%84%B6%E3%81%AB%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%AA%E3%82%8B-%E3%82%BA%E3%83%B3%E3%82%AF%E3%83%BB%E3%82%A2%E3%83%BC%E3%83%AC%E3%83%B3%E3%82%B9-ebook/dp/B09HZ38SFZ/ref=sr_1_1?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&crid=4MF6SE54C9DJ&keywords=take+notes&qid=1696764621&sprefix=take+note%2Caps%2C196&sr=8-1">Amazon.co.jp: TAKE NOTES!――メモで、あなただけのアウトプットが自然にできるようになる eBook : ズンク・アーレンス, 二木 夢子: Kindleストア</a></h3>
 <div class="outline-text-3" id="text-org70877c4">
 <p>
Zettelkastenの解説本。
</p>
</div>
</div>
</div>
 <div id="outline-container-orgf13cfc0" class="outline-2">
 <h2 id="orgf13cfc0"> <a href="#orgf13cfc0">脚注</a></h2>
 <div class="outline-text-2" id="text-orgf13cfc0">
</div>
</div>
 <div id="outline-container-org34b3df6" class="outline-2">
 <h2 id="org34b3df6"> <a href="#org34b3df6">Backlinks</a></h2>
 <div class="outline-text-2" id="text-org34b3df6">
 <ul class="org-ul"> <li> <a href="./20210508234743-emacs.html">Emacs</a></li>
 <li> <a href="./20210907012153-org_mode.html">org-mode</a></li>
 <li> <a href="./20210915221421-systemcrafters.html">System Crafters</a></li>
 <li> <a href="./20221026T102641--kdoc-1-denoteを使う__essay.html">KDOC 1: denoteを使う</a></li>
 <li> <a href="./20240218T162607--kdoc-98-org-roam-node-findでエントリが出なくなったときの直し方__wiki.html">KDOC 98: org-roam-node-findでエントリが出なくなったときの直し方</a></li>
 <li> <a href="./20240430T111500--kdoc-146-org-roam-uiをデプロイした__wiki.html">KDOC 146: org-roam-uiをデプロイした</a></li>
</ul></div>
</div>
 <div id="footnotes">
 <h2 class="footnotes">Footnotes: </h2>
 <div id="text-footnotes">

 <div class="footdef"> <sup> <a id="fn.1" class="footnum" href="#fnr.1" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"> <p class="footpara">
 <a href="https://roamresearch.com/">https://roamresearch.com/</a> Webでのアウトラインツール。
</p></div></div>


</div>
</div></div>]]></content>
  <link href="https://kijimad.github.io/roam/20210508233810-org_roam.html"/>
  <id>https://kijimad.github.io/roam/20210508233810-org_roam.html</id>
  <updated>2025-06-14T00:00:00+09:00</updated>
</entry>
<entry>
  <title>Emacs</title>
  <author><name>root</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orgc961e49" class="outline-2">
 <h2 id="orgc961e49"> <a href="#orgc961e49">概要</a></h2>
 <div class="outline-text-2" id="text-orgc961e49">
 <p>
Emacsは非常に優れた拡張性を特徴とするテキストエディタ。
エディタに内蔵された言語 <a href="20210509122633-emacs_lisp.html#ID-c7e81fac-9f8b-4538-9851-21d4ff3c2b08">Emacs Lisp</a>で柔軟に設定を変更できる。
</p>

 <p>
できること。
</p>

 <ul class="org-ul"> <li>情報集積( <a href="20210907012153-org_mode.html#ID-7e85e3f3-a6b9-447e-9826-307a3618dac8">org-mode</a>,  <a href="20210508233810-org_roam.html#ID-815a2c31-7ddb-40ad-bae0-f84e1cfd8de1">Org-roam</a>)</li>
 <li>タスク管理( <a href="20210907012153-org_mode.html#ID-7e85e3f3-a6b9-447e-9826-307a3618dac8">org-mode</a>)</li>
 <li> <a href="20210901104129-git.html#ID-90c6b715-9324-46ce-a354-63d09403b066">Git</a>( <a href="20210922005248-magit.html#ID-5ba43a42-93cb-48fa-8578-0558c757493f">magit</a>) +  <a href="20210926103926-github.html#ID-6b889822-21f1-4a3e-9755-e3ca52fa0bc4">GitHub</a>( <a href="20210922004953-magit_forge.html#ID-4a80d381-2620-40dc-8588-cda910c3d785">magit-forge</a>)</li>
 <li>コマンド実行と結果出力( <a href="20210907012153-org_mode.html#ID-7e85e3f3-a6b9-447e-9826-307a3618dac8">org-mode</a>)</li>
 <li>ウィンドウマネージャ( <a href="20210905140122-exwm.html#ID-eb196529-bdbd-48c5-9d5b-a156fe5c2f41">EXWM</a>)</li>
 <li>静的サイトジェネレータ( <a href="20210907012153-org_mode.html#ID-7e85e3f3-a6b9-447e-9826-307a3618dac8">org-mode</a>)</li>
 <li>ブラウザ(eww)</li>
 <li>インターネットラジオプレーヤ(eradio)</li>
 <li>フィードリーダー(elfeed.el)</li>
 <li>ファイラ</li>
 <li>表計算</li>
 <li>テスト実行(rspec-mode)</li>
 <li>ターミナル実行(vterm)</li>
 <li> <a href="20210805005543-docker.html#ID-1658782a-d331-464b-9fd7-1f8233b8b7f8">Docker</a>管理(docker-mode)</li>
 <li>リマインダー(org-alert)</li>
 <li>PDF閲覧(pdf-tools)</li>
</ul> <p>
の機能を、共通の効率的なキーボード操作、プレーンテキストベースで行える。
</p>

 <p>
自分の文芸的設定は <a href="https://kijimad.github.io/.emacs.d/">kijimad Emacs Config</a>にまとめてある。
</p>
</div>
</div>
 <div id="outline-container-org65295e9" class="outline-2">
 <h2 id="org65295e9"> <a href="#org65295e9">Memo</a></h2>
 <div class="outline-text-2" id="text-org65295e9">
</div>
 <div id="outline-container-org48ee011" class="outline-3">
 <h3 id="org48ee011"> <a href="#org48ee011">guix でビルドする</a></h3>
 <div class="outline-text-3" id="text-org48ee011">
 <p>
ビルドしてからパッケージを登録する。
</p>

 <div class="org-src-container">
 <pre class="src src-shell">guix build emacs@29.1
guix package -i emacs@29.1
guix package --roll-back  <span class="org-comment-delimiter"># </span> <span class="org-comment">ロールバックしたいとき</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-org83bcbab" class="outline-3">
 <h3 id="org83bcbab"> <a href="#org83bcbab">doom-modelineでアイコンが表示できないのを直す</a></h3>
 <div class="outline-text-3" id="text-org83bcbab">
 <p>
 <code>(all-the-icons-install-fonts)</code> しても直らないので困っていた。nerd-fontsでフォントを追加すると表示されるようになった。良い。
</p>

 <p>
インストール方法のメモ。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 1: </span>nerd-fontsをインストールする</label> <pre class="src src-shell">$ git clone --depth 1 git@github.com:ryanoasis/nerd-fonts.git
$ ./install.sh
</pre>
</div>
</div>
</div>
 <div id="outline-container-org66d75ce" class="outline-3">
 <h3 id="org66d75ce"> <a href="#org66d75ce">コンパイルする</a></h3>
 <div class="outline-text-3" id="text-org66d75ce">
 <p>
 <a href="https://naoking158.pages.dev/posts/building-emacs-on-ubuntu/">Ubuntu 18.04.5 で Gcc Emacs をビルドする | Braindump</a>を参考にコンパイルする。
</p>

 <p>
ソースコードをクローンしてくる。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 2: </span>クローン</label> <pre class="src src-shell">$ git clone --single-branch --depth=1 https://github.com/emacs-mirror/emacs.git
</pre>
</div>

 <p>
.configureを生成する。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 3: </span>.configure生成</label> <pre class="src src-shell">$ ./autogen.sh
</pre>
</div>

 <p>
configureを実行する。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 4: </span>一気にインストールまで</label> <pre class="src src-shel">$ ./configure --with-native-compilation=aot --with-modules --with-x && \
make && \
sudo make install
</pre>
</div>

 <ul class="org-ul"> <li> <code>--with-native-compilation</code> でelispをネイティブコンパイルして高速化する
 <ul class="org-ul"> <li> <a href="https://blog.tomoya.dev/posts/hello-native-comp-emacs/">ネイティブコンパイルEmacsの登場 | 日々、とんは語る。</a></li>
</ul></li>
 <li> <code>--with-x</code> でX Windowで動かすようにする</li>
</ul></div>
</div>
 <div id="outline-container-org5f8dd34" class="outline-3">
 <h3 id="org5f8dd34"> <a href="#org5f8dd34">2つのregionを比較する</a></h3>
 <div class="outline-text-3" id="text-org5f8dd34">
 <p>
 <code>ediff-regions-wordwise</code> を使う。
</p>
</div>
</div>
 <div id="outline-container-org8d85269" class="outline-3">
 <h3 id="org8d85269"> <a href="#org8d85269">エラー時に表示する</a></h3>
 <div class="outline-text-3" id="text-org8d85269">
 <p>
 <code>M-x toggle-debug-on-error</code> で、エラー時にトレースバッファが表示されるようになる。デバッグがしやすい。
</p>
</div>
</div>
 <div id="outline-container-org0c1b0ed" class="outline-3">
 <h3 id="org0c1b0ed"> <a href="#org0c1b0ed">subrを探索する</a></h3>
 <div class="outline-text-3" id="text-org0c1b0ed">
 <p>
使用頻度の高いマクロが多数定義されている。
</p>

 <ul class="org-ul"> <li>thread-first</li>
 <li>defsubst</li>
 <li>named-let</li>
</ul></div>
</div>
 <div id="outline-container-org7bc57d4" class="outline-3">
 <h3 id="org7bc57d4"> <a href="#org7bc57d4">mermaidをorg-babelで実行する</a></h3>
 <div class="outline-text-3" id="text-org7bc57d4">
 <ul class="org-ul"> <li>mermaidインストールが面倒なのでDockerでやりたい</li>
 <li>mermaid-modeは対応してるのだが、org-babelでのコマンドが間違っているので関数を修正</li>
 <li>画像は保存して、orgファイルにインライン表示したい
 <ul class="org-ul"> <li>名前がかぶって消されるとやっかいなので、ランダム文字列を自動生成する関数を作成</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org6b96c68" class="outline-3">
 <h3 id="org6b96c68"> <a href="#org6b96c68">UbuntuでEmacsをビルドする</a></h3>
 <div class="outline-text-3" id="text-org6b96c68">
 <p>
 <a href="https://systemcrafters.net/live-streams/august-20-2021/">System Crafters Live! - August 20, 2021 - System Crafters</a>を参考に、ローカルマシン(Ubuntu)でビルドする。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 5: </span>必要なライブラリをインストール</label> <pre class="src src-shell">sudo apt install ncurses-dev gnutls-bin
</pre>
</div>

 <p>
あとはINSTALL.repoに乗っているコマンドを実行する。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 6: </span>ビルドコマンド</label> <pre class="src src-shell">./autogen.sh
./configure
make
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 7: </span>src下に生成する</label> <pre class="src src-emacs-lisp">./src/emacs
</pre>
</div>
</div>
</div>
 <div id="outline-container-org41112d5" class="outline-3">
 <h3 id="org41112d5"> <a href="#org41112d5">Emacs本体のテストが参考になる</a></h3>
 <div class="outline-text-3" id="text-org41112d5">
 <p>
本体のテストが使い方の参考になる。
</p>
 <ul class="org-ul"> <li> <a href="https://github.com/kd-collective/emacs/blob/30cf1f34c583d6ed16bdc5b9578370f30c95fe1b/test/lisp/simple-tests.el#L440">https://github.com/kd-collective/emacs/blob/30cf1f34c583d6ed16bdc5b9578370f30c95fe1b/test/lisp/simple-tests.el#L440</a></li>
</ul></div>
</div>
 <div id="outline-container-org83dab83" class="outline-3">
 <h3 id="org83dab83"> <a href="#org83dab83">コマンドを再実行する</a></h3>
 <div class="outline-text-3" id="text-org83dab83">
 <p>
 <code>C-x z (repeat)</code> で直前のコマンドを再実行できる。
</p>

 <p>
 <code>C-x M-: (repeat-complex-command)</code> で直前のコマンドをS式表示しつつ実行できる。
</p>
</div>
</div>
 <div id="outline-container-orge860abf" class="outline-3">
 <h3 id="orge860abf"> <a href="#orge860abf"> <span class="todo TODO">TODO</span> 覚えるコマンド</a></h3>
 <div class="outline-text-3" id="text-orge860abf">
 <p>
移動に便利なコマンド。
</p>

 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> M– マイナスの前置引数
 <ul class="org-ul"> <li>例えばC-M– C-f は1文字戻る</li>
 <li>M– M-d 前の単語を削除</li>
 <li>M– C-k kill-lineの逆、行の左側を削除</li>
</ul></li>
 <li class="off"> <input type="checkbox"></input> C-M-d, C-M-u S式の中、外に移動する</li>
 <li class="off"> <input type="checkbox"></input> C-M-n, C-M-p 次のリスト、前のリストに移動する</li>
 <li class="off"> <input type="checkbox"></input> C-M-k S式を削除する</li>
 <li class="off"> <input type="checkbox"></input> M-}, M-{ パラグラフの最後、最初に移動する</li>
 <li class="on"> <input type="checkbox" checked="checked"></input> M-a, M-e センテンスの先頭、最後に移動する</li>
 <li class="on"> <input type="checkbox" checked="checked"></input> C-M-a, C-M-e defunの先頭、最後に移動する</li>
 <li class="off"> <input type="checkbox"></input> C-M-v 別ウィンドウを下方にスクロール</li>
 <li class="off"> <input type="checkbox"></input> M-r ポイントを左上、左、左下に移動</li>
</ul> <p>
削除。
</p>

 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> M-k センテンスを削除</li>
 <li class="off"> <input type="checkbox"></input> C-M-k S式を削除</li>
 <li class="off"> <input type="checkbox"></input> C-S-<backspace> 現在の行を削除</li>
</ul> <p>
ブックマーク。
</p>

 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> C-x r m ブックマークをセット</li>
</ul> <p>
レジスター。
</p>

 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> C-x r s レジスターにリージョンを保存</li>
 <li class="off"> <input type="checkbox"></input> C-x r SPC レジスターにポイントを保存</li>
 <li class="off"> <input type="checkbox"></input> C-x r j レジスターにジャンプ</li>
 <li class="off"> <input type="checkbox"></input> C-x r i レジスターの内容を挿入</li>
</ul> <p>
マーク。
</p>

 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> M-h 次のパラグラフをマーク</li>
 <li class="off"> <input type="checkbox"></input> C-M-h 次のdefunをマーク</li>
 <li class="off"> <input type="checkbox"></input> C-x h バッファー全体をマーク</li>
 <li class="off"> <input type="checkbox"></input> C-x C-p 次のページをマーク</li>
 <li class="on"> <input type="checkbox" checked="checked"></input> M-@ 次の単語をマーク</li>
 <li class="off"> <input type="checkbox"></input> C-M-@ 次のS式をマーク</li>
</ul> <p>
検索。
</p>

 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> C-M-s regexpインクリメンタル検索を開始する</li>
</ul> <p>
キルリング。
</p>

 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> C-M-w 次のコマンドがkillコマンドなら、killリングに追加する</li>
</ul> <p>
入れ替え。
</p>

 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> C-x C-t 行の入れ替え</li>
</ul> <p>
コメント。
</p>

 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> C-x C-; 行をコメント化あるいは非コメント化</li>
 <li class="on"> <input type="checkbox" checked="checked"></input> M-x comment-box リージョンを囲み枠でコメント化する</li>
</ul> <p>
大文字化。
</p>

 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> M-c 次の単語をcapitalize(Word)</li>
 <li class="off"> <input type="checkbox"></input> M-u 次の単語を大文字に(WORD)</li>
 <li class="off"> <input type="checkbox"></input> M-l 次の単語を小文字に(word)</li>
</ul></div>
</div>
 <div id="outline-container-org9a04399" class="outline-3">
 <h3 id="org9a04399"> <a href="#org9a04399">現在実行しているコマンドが入る変数</a></h3>
 <div class="outline-text-3" id="text-org9a04399">
 <ul class="org-ul"> <li> <code>this-command</code></li>
</ul></div>
</div>
 <div id="outline-container-org75d0a03" class="outline-3">
 <h3 id="org75d0a03"> <a href="#org75d0a03">リンクを開くときにブラウザにフォーカスさせない</a></h3>
 <div class="outline-text-3" id="text-org75d0a03">
 <p>
firefox側で設定する。about:config をURLバーに打ち込み、設定項目 browser.tabs.loadDivertedInBackground を true にする。
 <a href="https://stackoverflow.com/questions/10506496/run-browse-url-in-emacs-without-giving-focus-to-the-browser">https://stackoverflow.com/questions/10506496/run-browse-url-in-emacs-without-giving-focus-to-the-browser</a>
</p>
</div>
</div>
 <div id="outline-container-orgd59c538" class="outline-3">
 <h3 id="orgd59c538"> <a href="#orgd59c538">バッファ管理</a></h3>
 <div class="outline-text-3" id="text-orgd59c538">
 <p>
rails開発で処理が多くのファイルに分散していて、同じような名前のファイルが多い場合、集中のスイッチングコストが大きくなる。今まではあまりファイル分散してなかったので  <code>counsel-switch-buffer</code> ひとつで問題なかったが、タスクやコードの構造によって問題になりうる。ファイル移動しようとするたびに思考が中断される。
</p>

 <ul class="org-ul"> <li>方法1: projectile-railsのキーバインドを覚える  <a href="https://qiita.com/yoshinarl/items/8e3c4b075a181f224591">https://qiita.com/yoshinarl/items/8e3c4b075a181f224591</a>
 <ul class="org-ul"> <li>projectile-rails-find-current-spec(C-c r P) 対応するテストファイルを開く</li>
 <li>MVC系の移動 C-c r M、C-c r C、C-c r V</li>
</ul></li>
 <li>方法2: バッファをリセットする
 <ul class="org-ul"> <li>無関係な似たような名前のバッファが溜まるのが問題であって、そもそもこまめにリセットすれば見やすくなる説</li>
</ul></li>
 <li>方法3: ブックマーク
 <ul class="org-ul"> <li>必要なものはブックマークしておく。メンドイ。</li>
</ul></li>
 <li>方法4: タブ表示
 <ul class="org-ul"> <li>ブラウザのように、タブに表示する。結局ファイル名が長かったり、ファイル名が多くなるとやりにくくなるのだが、直近3つくらいのファイルが見られるだけでも改善する</li>
</ul></li>
</ul> <p>
良いページを発見した。 <a href="https://wikemacs.org/wiki/Buffer_management">Buffer management - WikEmacs</a>
</p>
</div>
</div>
 <div id="outline-container-org64d9279" class="outline-3">
 <h3 id="org64d9279"> <a href="#org64d9279">リストの重複を削除する</a></h3>
 <div class="outline-text-3" id="text-org64d9279">
 <div class="org-src-container">
 <pre class="src src-git-permalink">https://github.com/kd-collective/emacs/blob/30cf1f34c583d6ed16bdc5b9578370f30c95fe1b/lisp/subr.el#L731-L751
</pre>
</div>

 <div class="results" id="orgaea235a">
 <p>
(defun delete-dups (list)
  “Destructively remove `equal’ duplicates from LIST.
Store the result in LIST and return it.  LIST must be a proper list.
Of several `equal’ occurrences of an element in LIST, the first
one is kept.  See `seq-uniq’ for non-destructive operation.”
  (let ((l (length list)))
    (if (> l 100)
        (let ((hash (make-hash-table :test #’equal :size l))
              (tail list) retail)
          (puthash (car list) t hash)
          (while (setq retail (cdr tail))
            (let ((elt (car retail)))
              (if (gethash elt hash)
                  (setcdr tail (cdr retail))
                (puthash elt t hash)
                (setq tail retail)))))
      (let ((tail list))
        (while tail
          (setcdr tail (delete (car tail) (cdr tail)))
          (setq tail (cdr tail))))))
  list)
</p>

</div>
</div>
 <div id="outline-container-orgdd773e8" class="outline-4">
 <h4 id="orgdd773e8"> <a href="#orgdd773e8">100以下の処理</a></h4>
 <div class="outline-text-4" id="text-orgdd773e8">
 <p>
リストの長さによって処理が分岐していることがわかる。まず100行以下での処理を見る。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 8: </span>100行以下の処理</label> <pre class="src src-emacs-lisp">( <span class="org-keyword">let</span> ((tail list))
        ( <span class="org-keyword">while</span> tail
          (setcdr tail (delete (car tail) (cdr tail)))
          ( <span class="org-keyword">setq</span> tail (cdr tail))))
</pre>
</div>

 <p>
これで重複削除になるのか、と不思議な感じがする。不明な関数を調べる。
</p>
</div>
</div>
 <div id="outline-container-orga3413c2" class="outline-4">
 <h4 id="orga3413c2"> <a href="#orga3413c2">setcdr</a></h4>
 <div class="outline-text-4" id="text-orga3413c2">
 <p>
 <a href="https://ayatakesi.github.io/emacs/24.5/elisp_html/Setcdr.html">Setcdr (GNU Emacs Lisp Reference Manual)</a>
</p>

 <p>
setcdrが非常に重要な処理をしているように見えるので調べる。
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">setq</span> x '(1 2 3))
(setcdr x '(4))
x
</pre>
</div>

 <div class="results" id="org72c8685">
 <p>
(1 4)
</p>

</div>

 <p>
コンスセルのcdrを変更することで、他のリストに置き換える働きをする。
</p>
</div>
</div>
 <div id="outline-container-org0267dcd" class="outline-4">
 <h4 id="org0267dcd"> <a href="#org0267dcd">delete</a></h4>
 <div class="outline-text-4" id="text-org0267dcd">
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">setq</span> x '(1 2 3 4))
(delete x '(3))
x
</pre>
</div>

 <div class="results" id="orge32ab5a">
 <p>
(1 2 3 4)
</p>

</div>
</div>
</div>
 <div id="outline-container-org34a7fc9" class="outline-4">
 <h4 id="org34a7fc9"> <a href="#org34a7fc9">処理に戻る</a></h4>
 <div class="outline-text-4" id="text-org34a7fc9">
 <p>
本筋に戻る。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 9: </span>抜粋。削除</label> <pre class="src src-emacs-lisp">(delete (car tail) (cdr tail))
</pre>
</div>

 <p>
は、値を決めて(car tail)、それをリストから取り除く。
例) ’(1 1 2 3) -> ’(2 3) になる。carの1を取り上げて、cdrに含まれる1を削除する。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 10: </span>抜粋。連結</label> <pre class="src src-emacs-lisp">(setcdr tail (delete (car tail) (cdr tail)))
</pre>
</div>

 <p>
そしてsetcdrによって、1つになった値と残りの値を連結する。
’(1) + ’(2 3) -> ’(1 2 3)
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 11: </span>次ループに向けて</label> <pre class="src src-emacs-lisp">( <span class="org-keyword">setq</span> tail (cdr tail))
</pre>
</div>

 <p>
次の値を計算するために、単独になった値を除いたリストにする。
’(1 2 3) -> ’(2 3)
</p>

 <p>
ここでは、tailだけが次の計算に向けて再代入されたのであって、値の元になったlistは再代入されずに’(1 2 3)が入ったままになっている。すべての計算が終わったあとlistを評価すれば、望みの値が得られる。tailはループ用で、最終的にnilになる。
</p>
</div>
</div>
 <div id="outline-container-org7e98018" class="outline-4">
 <h4 id="org7e98018"> <a href="#org7e98018">ハッシュテーブルを使うバージョン</a></h4>
 <div class="outline-text-4" id="text-org7e98018">
 <p>
リストの要素が100より大きいとき、ハッシュテーブルを使う実装になっている。100は何基準だろうか。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 12: </span>ハッシュテーブルを使う</label> <pre class="src src-emacs-lisp">( <span class="org-keyword">let</span> ((hash (make-hash-table  <span class="org-builtin">:test</span> #'equal  <span class="org-builtin">:size</span> l))
      (tail list) retail)
  (puthash (car list) t hash)
  ( <span class="org-keyword">while</span> ( <span class="org-keyword">setq</span> retail (cdr tail))
    ( <span class="org-keyword">let</span> ((elt (car retail)))
      ( <span class="org-keyword">if</span> (gethash elt hash)
          (setcdr tail (cdr retail))
        (puthash elt t hash)
        ( <span class="org-keyword">setq</span> tail retail)))))
</pre>
</div>

 <ul class="org-ul"> <li>ハッシュにすでに入っている値であれば、その要素を取り除いて次の探索へ</li>
 <li>ハッシュに入っていなければ登録して次の探索</li>
</ul> <p>
この方法だとループは多いけど、メモリ消費がとても少ないということか。一度のループで比較するのは最初の要素とハッシュの要素だけだ。
</p>
</div>
</div>
</div>
 <div id="outline-container-orgb936134" class="outline-3">
 <h3 id="orgb936134"> <a href="#orgb936134">インライン展開するdefsubst</a></h3>
 <div class="outline-text-3" id="text-orgb936134">
 <p>
 <a href="https://www.mew.org/~kazu/doc/elisp/defsubst.html">Emacs Lisp</a>
defsubstで定義した関数はbyte compileのときにインライン展開される。つまり、コンパイルして関数実行時の関数呼び出しのコストがなくなり高速になる。頻繁に用いられる小さな関数で有効。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 13: </span>defunで定義した場合は、lst plus2と、関数名がそのまま表示され、インライン展開されない</label> <pre class="src src-emacs-lisp">( <span class="org-keyword">defun</span>  <span class="org-function-name">plus2</span> (x)
  (+ x 2))
(byte-compile 'plus2)

( <span class="org-keyword">defun</span>  <span class="org-function-name">foo</span> (lst)
  (plus2 lst))
(byte-compile 'foo)
</pre>
</div>

 <div class="results" id="orgdc9a6f4">
 <p>
#[(lst) \301!\207 [lst plus2] 2]
</p>

</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 14: </span>plus2をdefsubstに変更する。関数の中身lst x 2とインライン展開されていることがわかる</label> <pre class="src src-emacs-lisp">( <span class="org-keyword">defsubst</span>  <span class="org-function-name">plus2</span> (x)
  (+ x 2))
(byte-compile 'plus2)

( <span class="org-keyword">defun</span>  <span class="org-function-name">foo</span> (lst)
  (plus2 lst))
(byte-compile 'foo)
</pre>
</div>

 <div class="results" id="org4a60402">
 <p>
#[(lst) “\211\302\\)\207” [lst x 2] 3]
</p>

</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 15: </span>optimizerをつけていることがわかる</label> <pre class="src src-git-permalink">https://github.com/kd-collective/emacs/blob/30cf1f34c583d6ed16bdc5b9578370f30c95fe1b/lisp/emacs-lisp/byte-run.el#L480-L495
</pre>
</div>

 <div class="results" id="org9f3ecfb">
 <p>
(defmacro defsubst (name arglist &rest body)
  "Define an inline function.  The syntax is just like that of `defun’.
</p>

 <p>
\(fn NAME ARGLIST &optional DOCSTRING DECL &rest BODY)“
  (declare (debug defun) (doc-string 3) (indent 2))
  (or (memq (get name ’byte-optimizer)
	    ’(nil byte-compile-inline-expand))
      (error ”`%s’ is a primitive" name))
  `(prog1
       (defun ,name ,arglist ,@body)
     (eval-and-compile
       ;; Never native-compile defsubsts as we need the byte
       ;; definition in `byte-compile-unfold-bcf’ to perform the
       ;; inlining (Bug#42664, Bug#43280, Bug#44209).
       ,(byte-run–set-speed name nil -1)
       (put ’,name ’byte-optimizer ’byte-compile-inline-expand))))
</p>

</div>
</div>
</div>
 <div id="outline-container-org55fe9af" class="outline-3">
 <h3 id="org55fe9af"> <a href="#org55fe9af">編集関数ファイルsimple.el</a></h3>
 <div class="outline-text-3" id="text-org55fe9af">
 <p>
/lisp/simple.elには基本的な編集関数がある。
</p>

 <div class="org-src-container">
 <pre class="src src-git-permalink">https://github.com/kd-collective/emacs/blob/30cf1f34c583d6ed16bdc5b9578370f30c95fe1b/lisp/simple.el#L1
</pre>
</div>

 <div class="results" id="org95f1586">
 <p>
;;; simple.el — basic editing commands for Emacs  - <b>- lexical-binding: t -</b>-
</p>

</div>
</div>
</div>
 <div id="outline-container-org0cd7e60" class="outline-3">
 <h3 id="org0cd7e60"> <a href="#org0cd7e60">正規表現置換</a></h3>
 <div class="outline-text-3" id="text-org0cd7e60">
 <p>
入れ替えとかしたい。
</p>
</div>
</div>
 <div id="outline-container-orgf475444" class="outline-3">
 <h3 id="orgf475444"> <a href="#orgf475444">検索結果に対する置換 counsel-git-grep-query-replace</a></h3>
 <div class="outline-text-3" id="text-orgf475444">
 <p>
counsel-git-grep したあとに counsel-git-grep-query-replace(M-q)することで、git grepした結果に対して置換をかけられる。
</p>
</div>
</div>
 <div id="outline-container-orgfdb353a" class="outline-3">
 <h3 id="orgfdb353a"> <a href="#orgfdb353a">message関数はどう動いているか</a></h3>
 <div class="outline-text-3" id="text-orgfdb353a">
 <p>
message関数はメッセージをmessageバッファ、モードラインに表示する関数である。フォーマットを指定できる機能もある。これはどうやって動いているのだろうか。Lispの形をしたC言語で定義されている。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 16: </span>コード。読みやすくするためにコメントを削除・追加している</label> <pre class="src src-git-permalink">https://github.com/kd-collective/emacs/blob/d983e080e027bd7b680b1e40ccfa0c71d6a3cd94/src/editfns.c#L2849-L2884
</pre>
</div>

 <div class="results" id="orgd2d4266">
 <p>
DEFUN (“message”, Fmessage, Smessage, 1, MANY, 0,
       doc: /* Display a message at the bottom of the screen.
  (ptrdiff_t nargs, Lisp_Object *args)
{
  if (NILP (args[0])
</p>
 <table> <colgroup> <col class="org-left"></col> <col class="org-left"></col></colgroup> <tbody> <tr> <td class="org-left"> </td>
 <td class="org-left">(STRINGP (args[0])</td>
</tr></tbody></table> <p>
	  && SBYTES (args[0]) == 0))
    {
      ;; 最初の引数(表示文字列)がないときはクリア
      message1 (0);
      return args[0];
    }
  else
    ;; 引数があるとき、オプションをLisp Objectにして関数に渡す
    {
      Lisp_Object val = Fformat_message (nargs, args); ;; フォーマット
      message3 (val); ;; 表示
      return val;;
    }
}
</p>

</div>

 <p>
文字列のときはそのまま表示し、フォーマットが必要なときはフォーマットする、ということか。message3とmessage1の違いは何。この関数名の意味。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 17: </span>messageの定義</label> <pre class="src src-git-permalink">https://github.com/kd-collective/emacs/blob/d983e080e027bd7b680b1e40ccfa0c71d6a3cd94/src/xdisp.c#L11588-L11608
</pre>
</div>

 <div class="results" id="org608b1a0">
 <p>
void
message3 (Lisp_Object m)
{
  clear_message (true, true);  <i>/ メッセージ削除
  cancel_echoing (); /</i> エコーエリアをリセット
</p>

 <p>
   <i>* First flush out any partial line written with print.  *</i>
  message_log_maybe_newline ();
  if (STRINGP (m))
    {
      ptrdiff_t nbytes = SBYTES (m);
      bool multibyte = STRING_MULTIBYTE (m);
      char *buffer;
      USE_SAFE_ALLOCA;
      SAFE_ALLOCA_STRING (buffer, m);
      message_dolog (buffer, nbytes, true, multibyte); // 本筋の処理
      SAFE_FREE ();
    }
  if (! inhibit_message)
    message3_nolog (m);
}
</p>

</div>

 <p>
本筋はmessage_dologを呼ぶこと。ほかはそのための準備とか、オプションに対応してる部分。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 18: </span>message1はmessage3によって定義される</label> <pre class="src src-git-permalink">https://github.com/kd-collective/emacs/blob/d983e080e027bd7b680b1e40ccfa0c71d6a3cd94/src/xdisp.c#L11693-L11697
</pre>
</div>

 <div class="results" id="org3d7cb04">
 <p>
void
message1 (const char *m)
{
  message3 (m ? build_unibyte_string (m) : Qnil);
}
</p>

</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 19: </span>改行を入れる処理。message_dologに空文字と改行オプションを指定して、改行する</label> <pre class="src src-git-permalink">https://github.com/kd-collective/emacs/blob/30cf1f34c583d6ed16bdc5b9578370f30c95fe1b/src/xdisp.c#L11430-L11435
</pre>
</div>

 <div class="results" id="org0dbb630">
 <p>
void
message_log_maybe_newline (void)
{
  if (message_log_need_newline)
    message_dolog (“”, 0, true, false);
}
</p>

</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 20: </span>message_dologする前に呼び出してる関数</label> <pre class="src src-git-permalink">https://github.com/kd-collective/emacs/blob/30cf1f34c583d6ed16bdc5b9578370f30c95fe1b/src/lisp.h#L5292-L5294
</pre>
</div>

 <div class="results" id="org3671906">
 <p>
#define USE_SAFE_ALLOCA   \
  ptrdiff_t sa_avail = MAX_ALLOCA;	\
  specpdl_ref sa_count = SPECPDL_INDEX ()
</p>

</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 21: </span>message_dologする前に呼び出してる関数2。memcpyでメモリをコピーする</label> <pre class="src src-git-permalink">https://github.com/kd-collective/emacs/blob/30cf1f34c583d6ed16bdc5b9578370f30c95fe1b/src/lisp.h#L5319-L5325
</pre>
</div>

 <div class="results" id="orgcd105a4">
 <p>
 <i>* SAFE_ALLOCA_STRING allocates a C copy of a Lisp string.  *</i>
</p>

 <p>
#define SAFE_ALLOCA_STRING(ptr, string)			\
  do {							\
    (ptr) = SAFE_ALLOCA (SBYTES (string) + 1);		\
    memcpy (ptr, SDATA (string), SBYTES (string) + 1);	\
  } while (false)
</p>

</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 22: </span>メッセージログに追加する関数。長い</label> <pre class="src src-git-permalink">https://github.com/kd-collective/emacs/blob/30cf1f34c583d6ed16bdc5b9578370f30c95fe1b/src/xdisp.c#L11438-L11633
</pre>
</div>

 <div class="results" id="orgba04419">
 <p>
/* Add a string M of length NBYTES to the message log, optionally
   terminated with a newline when NLFLAG is true.  MULTIBYTE, if
   true, means interpret the contents of M as multibyte.  This
   function calls low-level routines in order to bypass text property
   hooks, etc. which might not be safe to run.
</p>

 <p>
This may GC (insert may run before/after change hooks),
so the buffer M must NOT point to a Lisp string.  */
</p>

 <p>
void
message_dolog (const char *m, ptrdiff_t nbytes, bool nlflag, bool multibyte)
{
  const unsigned char *msg = (const unsigned char *) m;
</p>

 <p>
if (!NILP (Vmemory_full))
  return;
</p>

 <p>
if (!NILP (Vmessage_log_max))
  {
    struct buffer *oldbuf;
    Lisp_Object oldpoint, oldbegv, oldzv;
    int old_windows_or_buffers_changed = windows_or_buffers_changed;
    ptrdiff_t point_at_end = 0;
    ptrdiff_t zv_at_end = 0;
    Lisp_Object old_deactivate_mark;
</p>

 <p>
old_deactivate_mark = Vdeactivate_mark;
oldbuf = current_buffer;
</p>

 <p>
 <i>* Sanity check, in case the variable has been set to something
   invalid.  *</i>
if (! STRINGP (Vmessages_buffer_name))
  Vmessages_buffer_name = build_string (“ <b>Messages</b>”);
 <i>* Ensure the Messages buffer exists, and switch to it.
   If we created it, set the major-mode.  *</i>
bool newbuffer = NILP (Fget_buffer (Vmessages_buffer_name));
Fset_buffer (Fget_buffer_create (Vmessages_buffer_name, Qnil));
if (newbuffer
    && !NILP (Ffboundp (intern (“messages-buffer-mode”))))
  call0 (intern (“messages-buffer-mode”));
</p>

 <p>
bset_undo_list (current_buffer, Qt);
bset_cache_long_scans (current_buffer, Qnil);
</p>

 <p>
oldpoint = message_dolog_marker1;
set_marker_restricted_both (oldpoint, Qnil, PT, PT_BYTE);
oldbegv = message_dolog_marker2;
set_marker_restricted_both (oldbegv, Qnil, BEGV, BEGV_BYTE);
oldzv = message_dolog_marker3;
set_marker_restricted_both (oldzv, Qnil, ZV, ZV_BYTE);
</p>

 <p>
if (PT  <code>= Z)
	point_at_end = 1;
      if (ZV =</code> Z)
  zv_at_end = 1;
</p>

 <p>
BEGV = BEG;
BEGV_BYTE = BEG_BYTE;
ZV = Z;
ZV_BYTE = Z_BYTE;
TEMP_SET_PT_BOTH (Z, Z_BYTE);
</p>

 <p>
 <i>* Insert the string–maybe converting multibyte to single byte
   or vice versa, so that all the text fits the buffer.  *</i>
if (multibyte
    && NILP (BVAR (current_buffer, enable_multibyte_characters)))
  {
     <i>* Convert a multibyte string to single-byte
       for the  <b>Message</b> buffer.  *</i>
    for (ptrdiff_t i = 0; i < nbytes; )
      {
	int char_bytes, c = check_char_and_length (msg + i, &char_bytes);
	char work = CHAR_TO_BYTE8 (c);
	insert_1_both (&work, 1, 1, true, false, false);
	i  <del>= char_bytes;
      }
  }
else if (! multibyte
	 && ! NILP (BVAR (current_buffer, enable_multibyte_characters)))
  {
     <i>* Convert a single-byte string to multibyte
       for the  <b>Message</b> buffer.  *</i>
    for (ptrdiff_t i = 0; i < nbytes; i+</del>)
      {
	int c = make_char_multibyte (msg[i]);
	unsigned char str[MAX_MULTIBYTE_LENGTH];
	int char_bytes = CHAR_STRING (c, str);
	insert_1_both ((char *) str, 1, char_bytes, true, false, false);
      }
  }
else if (nbytes)
  insert_1_both (m, chars_in_text (msg, nbytes), nbytes,
		 true, false, false);
</p>

 <p>
if (nlflag)
  {
    ptrdiff_t this_bol, this_bol_byte, prev_bol, prev_bol_byte;
    intmax_t dups;
</p>

 <p>
 <i>* Since we call del_range_both passing false for PREPARE,
   we aren’t prepared to run modification hooks (we could
   end up calling modification hooks from another buffer and
   only with AFTER=t, Bug#21824).  *</i>
specpdl_ref count = SPECPDL_INDEX ();
specbind (Qinhibit_modification_hooks, Qt);
</p>

 <p>
insert_1_both (“\n”, 1, 1, true, false, false);
</p>

 <p>
scan_newline (Z, Z_BYTE, BEG, BEG_BYTE, -2, false);
this_bol = PT;
this_bol_byte = PT_BYTE;
</p>

 <p>
 <i>* See if this line duplicates the previous one.
   If so, combine duplicates.  *</i>
if (this_bol > BEG)
  {
    scan_newline (PT, PT_BYTE, BEG, BEG_BYTE, -2, false);
    prev_bol = PT;
    prev_bol_byte = PT_BYTE;
</p>

 <p>
dups = message_log_check_duplicate (prev_bol_byte,
				    this_bol_byte);
if (dups)
  {
    del_range_both (prev_bol, prev_bol_byte,
		    this_bol, this_bol_byte, false);
    if (dups > 1)
      {
	char dupstr[sizeof “ [ times]”
</p>
 <ul class="org-ul"> <li>INT_STRLEN_BOUND (dups)];</li>
</ul> <p>
	   <i>* If you change this format, don’t forget to also
	     change message_log_check_duplicate.  *</i>
	  int duplen = sprintf (dupstr, “ [%”PRIdMAX“ times]”,
				dups);
	  TEMP_SET_PT_BOTH (Z - 1, Z_BYTE - 1);
	  insert_1_both (dupstr, duplen, duplen,
			 true, false, true);
	}
    }
}
</p>

 <p>
 <i>* If we have more than the desired maximum number of lines
   in the  <b>Messages</b> buffer now, delete the oldest ones.
   This is safe because we don’t have undo in this buffer.  *</i>
</p>

 <p>
if (FIXNATP (Vmessage_log_max))
  {
    scan_newline (Z, Z_BYTE, BEG, BEG_BYTE,
		  -XFIXNAT (Vmessage_log_max) - 1, false);
    del_range_both (BEG, BEG_BYTE, PT, PT_BYTE, false);
  }
</p>

 <p>
    unbind_to (count, Qnil);
  }
BEGV = marker_position (oldbegv);
BEGV_BYTE = marker_byte_position (oldbegv);
</p>

 <p>
if (zv_at_end)
  {
    ZV = Z;
    ZV_BYTE = Z_BYTE;
  }
else
  {
    ZV = marker_position (oldzv);
    ZV_BYTE = marker_byte_position (oldzv);
  }
</p>

 <p>
if (point_at_end)
  TEMP_SET_PT_BOTH (Z, Z_BYTE);
else
   <i>* We can’t do Fgoto_char (oldpoint) because it will run some
     Lisp code.  *</i>
  TEMP_SET_PT_BOTH (marker_position (oldpoint),
		    marker_byte_position (oldpoint));
</p>

 <p>
unchain_marker (XMARKER (oldpoint));
unchain_marker (XMARKER (oldbegv));
unchain_marker (XMARKER (oldzv));
</p>

 <p>
 <i>* We called insert_1_both above with its 5th argument (PREPARE)
   false, which prevents insert_1_both from calling
   prepare_to_modify_buffer, which in turns prevents us from
   incrementing windows_or_buffers_changed even if  <b>Messages</b> is
   shown in some window.  So we must manually set
   windows_or_buffers_changed here to make up for that.  *</i>
windows_or_buffers_changed = old_windows_or_buffers_changed;
bset_redisplay (current_buffer);
</p>

 <p>
set_buffer_internal (oldbuf);
</p>

 <p>
      message_log_need_newline = !nlflag;
      Vdeactivate_mark = old_deactivate_mark;
    }
}
</p>

</div>
</div>
</div>
 <div id="outline-container-org63d4bd0" class="outline-3">
 <h3 id="org63d4bd0"> <a href="#org63d4bd0">本体コードを読む</a></h3>
 <div class="outline-text-3" id="text-org63d4bd0">
 <p>
 <a href="https://systemcrafters.net/live-streams/august-20-2021/">https://systemcrafters.net/live-streams/august-20-2021/</a>
まずビルドする。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 23: </span>Guix環境の場合</label> <pre class="src src-shell">guix environment --pure emacs-next --ad-hoc git
</pre>
</div>

 <p>
ほとんどは <a href="20210509122633-emacs_lisp.html#ID-c7e81fac-9f8b-4538-9851-21d4ff3c2b08">Emacs Lisp</a>で書かれている。コアな部分は <a href="20210911104632-c_language.html#ID-656a0aa4-e5d3-416f-82d5-f909558d0639">C言語</a>。
 <code>src/*</code> にはCのコードがある。
 <code>src/lisp.h</code> は <a href="20210509122633-emacs_lisp.html#ID-c7e81fac-9f8b-4538-9851-21d4ff3c2b08">Emacs Lisp</a>そのもののコードで重要。
</p>

 <p>
 <a href="https://www.reddit.com/r/emacs/comments/7i2alo/how_to_read_and_understand_gnu_emacs_source_code/">How to read (and understand) GNU Emacs source code? : emacs</a>
</p>

 <p>
コードの読み方の参考。
 <a href="https://solist.work/blog/posts/git-history-tool/">ソースコードの読み方 - Solist Work Blog</a>
</p>
</div>
</div>
 <div id="outline-container-org33e705f" class="outline-3">
 <h3 id="org33e705f"> <a href="#org33e705f">プロセス管理</a></h3>
 <div class="outline-text-3" id="text-org33e705f">
 <p>
最初から入っている  <code>proced</code> が便利。一覧に加えてkillもできる。
</p>
</div>
</div>
 <div id="outline-container-org704bf40" class="outline-3">
 <h3 id="org704bf40"> <a href="#org704bf40">デフォルトの動的補完 dabbrev</a></h3>
 <div class="outline-text-3" id="text-org704bf40">
 <p>
dabbrevはEmacsデフォルトの補完機能。大雑把で高速。
dabbrev-expand (M-/)
</p>
</div>
</div>
 <div id="outline-container-org64f0a94" class="outline-3">
 <h3 id="org64f0a94"> <a href="#org64f0a94">デフォルトの定義探す系 xref</a></h3>
 <div class="outline-text-3" id="text-org64f0a94">
 <dl class="org-dl"> <dt>xref-find-definitions (M-.)</dt> <dd>定義ジャンプ</dd>
 <dt>xref-find-references (M-?)</dt> <dd>参照箇所(使われてるところ)にジャンプ</dd>
</dl> <p>
lspと接続しているとそっちを使って辿るようだ。
</p>
</div>
</div>
 <div id="outline-container-org8c5c8ec" class="outline-3">
 <h3 id="org8c5c8ec"> <a href="#org8c5c8ec">LSP設定</a></h3>
 <div class="outline-text-3" id="text-org8c5c8ec">
 <p>
 <a href="20220305121848-lsp.html#ID-eb807577-cd69-478c-8f82-264243c67354">LSP</a>を設定する。
</p>

 <ul class="org-ul"> <li>lsp-modeは <a href="20220305121848-lsp.html#ID-eb807577-cd69-478c-8f82-264243c67354">LSP</a>全般を扱うパッケージである。lsp-install-serverで各プログラミング言語の <a href="20220305121848-lsp.html#ID-eb807577-cd69-478c-8f82-264243c67354">LSP</a> serverをダウンロード・起動することで有効化できる。</li>
 <li>lsp-ui-modeはlsp-modeのグラフィック面を強化するパッケージである(optional)。ドキュメント表示、エラー表示などができるようになる</li>
</ul> <p>
 <a href="20220108003324-scala.html#ID-b2f63c13-4b30-481c-9c95-8abe388254fd">Scala</a>の <a href="20220305121848-lsp.html#ID-eb807577-cd69-478c-8f82-264243c67354">LSP</a>サーバーであるmetalsはGPGエラーでインストールできない状態だった。
 <code>(setq lsp-verify-signature nil)</code> するとインストールできる。
</p>

 <p>
 <a href="https://github.com/coursier/coursier/issues/2346">https://github.com/coursier/coursier/issues/2346</a>
</p>
</div>
</div>
 <div id="outline-container-orgd6486e8" class="outline-3">
 <h3 id="orgd6486e8"> <a href="#orgd6486e8">corfu設定</a></h3>
 <div class="outline-text-3" id="text-orgd6486e8">
 <ul class="org-ul"> <li>ミニマルなパッケージを組み合わせる方法が主流である。</li>
 <li>各パッケージの概要:  <a href="https://tam5917.hatenablog.com/entry/2022/02/05/141115">https://tam5917.hatenablog.com/entry/2022/02/05/141115</a></li>
</ul></div>
</div>
 <div id="outline-container-org582ce60" class="outline-3">
 <h3 id="org582ce60"> <a href="#org582ce60">git-timemachineで歴史を見る</a></h3>
 <div class="outline-text-3" id="text-org582ce60">
 <p>
 <a href="https://github.com/emacsmirror/git-timemachine">emacsmirror/git-timemachine: Walk through git revisions of a file</a>
 <code>git-timemachine</code> を使うと、ファイルごとで軽々とコミットを辿れて楽しい。すごいのにあまり有名ではないよう。
</p>

 <ul class="org-ul"> <li>n で次のコミット、p で前のコミットに移る。</li>
 <li>c でコミット内容を見る。ファイルビューではコミット時点のファイルだけなので、差分をみたいときにはこっちを使う。</li>
</ul></div>
</div>
 <div id="outline-container-org394934f" class="outline-3">
 <h3 id="org394934f"> <a href="#org394934f">faceを調べる</a></h3>
 <div class="outline-text-3" id="text-org394934f">
 <p>
M-x list-faces-display
</p>
</div>
</div>
 <div id="outline-container-orgc74cbf2" class="outline-3">
 <h3 id="orgc74cbf2"> <a href="#orgc74cbf2">diredでzip展開</a></h3>
 <div class="outline-text-3" id="text-orgc74cbf2">
 <p>
dired-modeで Z …  <code>dired-do-compress</code> で展開か圧縮できる。
</p>
</div>
</div>
 <div id="outline-container-org2b7d954" class="outline-3">
 <h3 id="org2b7d954"> <a href="#org2b7d954">矩形選択する</a></h3>
 <div class="outline-text-3" id="text-org2b7d954">
 <p>
 <code>rectangle-mark-mode</code> – C-x SPC
で矩形選択できる。
</p>

 <p>
back-button-modeのキーバインドが衝突してたのでback-button-modeの方を無効化。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 24: </span>無効化</label> <pre class="src src-emacs-lisp">(define-key back-button-mode-map (kbd  <span class="org-string">"C-x SPC"</span>) nil)
</pre>
</div>
</div>
</div>
 <div id="outline-container-orge33218f" class="outline-3">
 <h3 id="orge33218f"> <a href="#orge33218f">pdf-tools</a></h3>
 <div class="outline-text-3" id="text-orge33218f">
 <p>
pdf-toolsはEmacs内でPDFを閲覧できるパッケージ。
インストールしても、しばらくすると利用不可になってることがあるのでinstallしなおす。
インストールするとdiredから選択するとpdf-toolsが使われる。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 25: </span>インストールする</label> <pre class="src src-emacs-lisp">(pdf-tools-install)
</pre>
</div>
</div>
</div>
 <div id="outline-container-orga7df8af" class="outline-3">
 <h3 id="orga7df8af"> <a href="#orga7df8af">ivy-occurで一括置換する</a></h3>
 <div class="outline-text-3" id="text-orga7df8af">
 <p>
occurの特徴はeでedit-modeに入れる点。一覧にして複数ファイルをそのまま置換できる。
</p>

 <p>
プロジェクトのファイルにすべてに対してoccurしたいとき。
 <code>counsel-git-grep</code> して絞り込んだものに対して  <code>(ivy-occur)</code> =  <code>C-c C-o</code> でoccurできる。
</p>

 <p>
edit-modeに入るには。
 <code>(ivy-wgrep-change-to-wgrep-mode)</code> =  <code>C-x C-q</code>
occurでの変更をコミットするには。
 <code>C-x C-s</code> 。覚えにくい。
</p>
</div>
</div>
 <div id="outline-container-org3d55bed" class="outline-3">
 <h3 id="org3d55bed"> <a href="#org3d55bed">絵文字挿入</a></h3>
 <div class="outline-text-3" id="text-org3d55bed">
 <p>
 <code>C-x 8 return</code>
</p>
</div>
</div>
 <div id="outline-container-org3db2785" class="outline-3">
 <h3 id="org3db2785"> <a href="#org3db2785">elisp-refs</a></h3>
 <div class="outline-text-3" id="text-org3db2785">
 <p>
 <a href="https://github.com/Wilfred/elisp-refs">Wilfred/elisp-refs: semantic code search for emacs lisp</a>
関数や変数の参照を見つけるパッケージ。
じっさいに使われている例を探し出すことができる。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 26: </span>popで検索してみた例</label> <pre class="src src-emacs-lisp">File: /gnu/store/lnwgc4ww47vkq2wv2ay3rdm0ppnmgyfy-emacs-27.2/share/emacs/27.2/lisp/format.el.gz
( <span class="org-keyword">setq</span> prop ( <span class="org-keyword">pop</span> props))

File: /gnu/store/lnwgc4ww47vkq2wv2ay3rdm0ppnmgyfy-emacs-27.2/share/emacs/27.2/lisp/window.el.gz
( <span class="org-keyword">let</span> ((window ( <span class="org-keyword">pop</span> window-state-put-stale-windows)))
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgc0f5119" class="outline-3">
 <h3 id="orgc0f5119"> <a href="#orgc0f5119">キーバインドの一覧を出力するコマンド</a></h3>
 <div class="outline-text-3" id="text-orgc0f5119">
 <p>
キーバインドの一覧を出力するコマンド。
 <code>make-command-summary</code> 。
</p>
</div>
</div>
 <div id="outline-container-org87d4a2f" class="outline-3">
 <h3 id="org87d4a2f"> <a href="#org87d4a2f">複数行に空白挿入</a></h3>
 <div class="outline-text-3" id="text-org87d4a2f">
 <p>
複数行一気に空白を挿入してインデントを整えるとき。
 <code>C-x C-i</code> で挿入モードにあるのであとは方向キーで微調整できる。
</p>
</div>
</div>
 <div id="outline-container-org03727a1" class="outline-3">
 <h3 id="org03727a1"> <a href="#org03727a1">文字コード変更</a></h3>
 <div class="outline-text-3" id="text-org03727a1">
 <p>
改行コードなどで問題が生じたとき。^Mが表示されるとか。
 <code>C-x RET f utf-8-unix</code>
で文字コードを変更して保存する。
</p>
</div>
</div>
 <div id="outline-container-org3e60ed5" class="outline-3">
 <h3 id="org3e60ed5"> <a href="#org3e60ed5">カウントダウンタイマー</a></h3>
 <div class="outline-text-3" id="text-org3e60ed5">
 <p>
カップ麺の3分を測りたい、みたいなとき。
 <code>(org-timer-set-timer)</code>
</p>
</div>
</div>
 <div id="outline-container-org1bb9c79" class="outline-3">
 <h3 id="org1bb9c79"> <a href="#org1bb9c79">company-documentation</a></h3>
 <div class="outline-text-3" id="text-org1bb9c79">
 <p>
Company is input complement package.
Read document on complementation list.
 <code>Ctrl + Shift + h</code>
</p>
</div>
</div>
 <div id="outline-container-org1890df2" class="outline-3">
 <h3 id="org1890df2"> <a href="#org1890df2">vtermのbash_profileを設定する</a></h3>
 <div class="outline-text-3" id="text-org1890df2">
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 27: </span>.bash_profile</label> <pre class="src src-shell"> <span class="org-keyword">if</span> [[  <span class="org-string">"$INSIDE_EMACS"</span> =  <span class="org-string">'vterm'</span> ]]  <span class="org-sh-escaped-newline">\</span>
    && [[ -n ${ <span class="org-variable-name">EMACS_VTERM_PATH</span>} ]]  <span class="org-sh-escaped-newline">\</span>
    && [[ -f ${ <span class="org-variable-name">EMACS_VTERM_PATH</span>}/etc/emacs-vterm-bash.sh ]];  <span class="org-keyword">then</span>
    source ${ <span class="org-variable-name">EMACS_VTERM_PATH</span>}/etc/emacs-vterm-bash.sh
 <span class="org-keyword">fi</span>
</pre>
</div>
 <p>
 <a href="https://naokton.hatenablog.com/entry/2020/12/08/150130">vterm-modeを使う - technokton</a>
</p>
</div>
</div>
 <div id="outline-container-org6266ab2" class="outline-3">
 <h3 id="org6266ab2"> <a href="#org6266ab2">パッケージのソースコードメモ</a></h3>
 <div class="outline-text-3" id="text-org6266ab2">
 <ul class="org-ul"> <li>org-lint
 <ul class="org-ul"> <li> <a href="https://github.com/kijimaD/emacs/blob/master/lisp/org/org-lint.el#L124">https://github.com/kijimaD/emacs/blob/master/lisp/org/org-lint.el#L124</a></li>
</ul></li>
 <li>interactive
 <ul class="org-ul"> <li> <a href="https://github.com/kijimaD/emacs/blob/master/src/callint.c#L37">https://github.com/kijimaD/emacs/blob/master/src/callint.c#L37</a></li>
</ul></li>
 <li>defun
 <ul class="org-ul"> <li> <a href="https://github.com/kijimaD/emacs/blob/master/lisp/emacs-lisp/byte-run.el#L280">https://github.com/kijimaD/emacs/blob/master/lisp/emacs-lisp/byte-run.el#L280</a></li>
 <li> <a href="https://github.com/kijimaD/emacs/blob/master/lisp/emacs-lisp/cl-macs.el#L339">https://github.com/kijimaD/emacs/blob/master/lisp/emacs-lisp/cl-macs.el#L339</a></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org0d0c3c0" class="outline-3">
 <h3 id="org0d0c3c0"> <a href="#org0d0c3c0">projectile-toggle-between-implementation-and-test ( <code>C-c p t</code>)</a></h3>
 <div class="outline-text-3" id="text-org0d0c3c0">
 <p>
テストとプロダクトコードを切り替える。
</p>
</div>
</div>
 <div id="outline-container-orgf46ca37" class="outline-3">
 <h3 id="orgf46ca37"> <a href="#orgf46ca37">(magit-topic)</a></h3>
 <div class="outline-text-3" id="text-orgf46ca37">
 <p>
一覧でPRとIssueにアクセスできると行き来がしやすそう。
Forgeのトピック間移動がhelmでできたらいいのにな。
</p>
</div>
</div>
 <div id="outline-container-orgf00e539" class="outline-3">
 <h3 id="orgf00e539"> <a href="#orgf00e539"></a> <a href="20210829232020-mysql.html#ID-7dab097c-60ba-43b9-949f-c58bf3151aa8">MySQL</a>と接続して <a href="20210725100835-sql.html#ID-8b69b8d4-1612-4dc5-8412-96b431fdd101">SQL</a>を直に実行する</h3>
 <div class="outline-text-3" id="text-orgf00e539">
 <div class="org-src-container">
 <pre class="src src-nil">M-x customize-variable RET sql-connection-alist RET ...
M-x sql-connect
open buffer...
M-x sql-mode
M-x sql-set-sqli-buffer RET
sql-send-buffer (C-c C-b)
sqlup-capitalize-keywords-in-region (C-c u)
</pre>
</div>
</div>
</div>
 <div id="outline-container-org7210e10" class="outline-3">
 <h3 id="org7210e10"> <a href="#org7210e10">Macでの置換</a></h3>
 <div class="outline-text-3" id="text-org7210e10">
 <ul class="org-ul"> <li>Macでは  <code>query-replace</code> ( <code>M-%</code>)が奪われて押せないので、  <code>query-replace-regexp</code> ( <code>C-M-%</code>)する。</li>
</ul></div>
</div>
 <div id="outline-container-orgf92e935" class="outline-3">
 <h3 id="orgf92e935"> <a href="#orgf92e935">spring </a> <a href="20210831223434-rspec.html#ID-afccf86d-70b8-44c0-86a8-cdac25f7dfd3">RSpec</a></h3>
 <div class="outline-text-3" id="text-orgf92e935">
 <p>
 <a href="20210509095946-rails.html#ID-e04aa1a3-509c-45b2-ac64-53d69c961214">Rails</a>でspringを走らせておくと <a href="20210831223434-rspec.html#ID-afccf86d-70b8-44c0-86a8-cdac25f7dfd3">RSpec</a>が高速に動作する。
</p>

 <p>
いつのまにかEmacsでspringが動かなくなっていた。コマンドでは  <code>spring rspec</code> などで動かせるが、Emacsではふつうの  <code>bundle exec ...</code> になっていた。前は早くできていたはず。ネットの記事を参考に修正した。
</p>

 <blockquote>
 <p>
emacsのrspec-modeで、上記のようにしてspringを使うと、自動ではspringがONにならない。 これはtmpにpidファイルが作られないため。 強制的にspringを使うには、次のように設定する。
</p>
</blockquote>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">require</span> ' <span class="org-constant">rspec-mode</span>)
( <span class="org-keyword">defun</span>  <span class="org-function-name">rspec-spring-p</span> ()
  ( <span class="org-keyword">and</span> rspec-use-spring-when-possible
       (stringp (executable-find  <span class="org-string">"spring"</span>))))
</pre>
</div>

 <p>
springを自動で検出してくれるらしい(何より今までできてた)。
 <code>spring status</code> でspringが動いてるかチェックする。動いてなかったら  <code>spring rspec</code> する。
</p>
</div>
</div>
 <div id="outline-container-orgf9a92d0" class="outline-3">
 <h3 id="orgf9a92d0"> <a href="#orgf9a92d0">デバッグ起動する</a></h3>
 <div class="outline-text-3" id="text-orgf9a92d0">
 <div class="org-src-container">
 <pre class="src src-shell">$ emacs -q
 <span class="org-comment-delimiter"># </span> <span class="org-comment">init読み込まない</span>
$ emacs --debug-init
 <span class="org-comment-delimiter"># </span> <span class="org-comment">デバッグモードで起動する</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-org27368e1" class="outline-3">
 <h3 id="org27368e1"> <a href="#org27368e1"></a> <a href="20210915221421-systemcrafters.html#ID-fa497359-ae3f-494a-b24a-9822eefe67ad">System Crafters</a> IRC</h3>
 <div class="outline-text-3" id="text-org27368e1">
 <blockquote>
 <p>
erc-tls
irc.libera.chat
6697
/join #systemcrafters
</p>
</blockquote>
</div>
</div>
 <div id="outline-container-org0106376" class="outline-3">
 <h3 id="org0106376"> <a href="#org0106376">mermaid.jsをEmacsで使う</a></h3>
 <div class="outline-text-3" id="text-org0106376">
 <p>
mermaidはプレーンテキストで図を作れるツール。 <a href="20210509100112-javascript.html#ID-a6980e15-ecee-466e-9ea7-2c0210243c0d">JavaScript</a>で書かれている。
これをEmacsで扱えるようにするのがmermaid-mode。
</p>

 <ul class="org-ul"> <li> <a href="https://github.com/abrochard/mermaid-mode">https://github.com/abrochard/mermaid-mode</a></li>
</ul> <div class="org-src-container">
 <pre class="src src-shell">npm install -g @mermaid-js/mermaid-cli
</pre>
</div>
 <p>
して、C-cで画像にコンパイルできる。
</p>
</div>
</div>
 <div id="outline-container-org35b210a" class="outline-3">
 <h3 id="org35b210a"> <a href="#org35b210a">各Window managerでEmacs風キーバインドにする</a></h3>
 <div class="outline-text-3" id="text-org35b210a">
 <ul class="org-ul"> <li> <a href="https://linuxfan.info/linux-emacs-keybindings-matome">https://linuxfan.info/linux-emacs-keybindings-matome</a></li>
</ul> <div class="org-src-container">
 <pre class="src src-shell"> <span class="org-comment-delimiter"># </span> <span class="org-comment">gnome</span>
gsettings set org.gnome.desktop.interface gtk-key-theme Emacs
 <span class="org-comment-delimiter"># </span> <span class="org-comment">MATE</span>
gsettings set org.mate.interface gtk-key-theme Emacs
 <span class="org-comment-delimiter"># </span> <span class="org-comment">Cinnamon</span>
gsettings set org.cinnamon.desktop.interface gtk-key-theme Emacs
</pre>
</div>
</div>
</div>
 <div id="outline-container-org6591eea" class="outline-3">
 <h3 id="org6591eea"> <a href="#org6591eea">counsel-find-fileで新しいファイルを作る</a></h3>
 <div class="outline-text-3" id="text-org6591eea">
 <p>
補完選択になってしまって新しくファイルが作れないときは、C-M-jで新規作成できる。
</p>

 <p>
counselのリポジトリのREADMEの最後に書かれてた。
</p>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">setq</span> ivy-use-selectable-prompt t)
</pre>
</div>
 <p>
をすると上下選択できるようになる。
選択一覧にはでないのでわかりにくい。
</p>
</div>
</div>
 <div id="outline-container-orgdf007c9" class="outline-3">
 <h3 id="orgdf007c9"> <a href="#orgdf007c9">blame系関数</a></h3>
 <div class="outline-text-3" id="text-orgdf007c9">
 <ul class="org-ul"> <li> <code>vc-annotate</code></li>
 <li> <code>magit-blame</code></li>
 <li> <code>blamer</code></li>
</ul></div>
</div>
 <div id="outline-container-org418edd1" class="outline-3">
 <h3 id="org418edd1"> <a href="#org418edd1">keybinding一覧</a></h3>
 <div class="outline-text-3" id="text-org418edd1">
 <p>
 <code>(make-command-summary)</code> や  <code>(describe-bindings)</code> で生成できる。
</p>
</div>
</div>
 <div id="outline-container-orgda397c8" class="outline-3">
 <h3 id="orgda397c8"> <a href="#orgda397c8">リンクを開くときにブラウザにフォーカスさせない</a></h3>
 <div class="outline-text-3" id="text-orgda397c8">
 <p>
firefox側で設定する。about:config をURLバーに打ち込み、設定項目 browser.tabs.loadDivertedInBackground を true にする。
 <a href="https://stackoverflow.com/questions/10506496/run-browse-url-in-emacs-without-giving-focus-to-the-browser">https://stackoverflow.com/questions/10506496/run-browse-url-in-emacs-without-giving-focus-to-the-browser</a>
</p>
</div>
</div>
</div>
 <div id="outline-container-orgf61c808" class="outline-2">
 <h2 id="orgf61c808"> <a href="#orgf61c808">Tasks</a></h2>
 <div class="outline-text-2" id="text-orgf61c808">
</div>
 <div id="outline-container-org533ded0" class="outline-3">
 <h3 id="org533ded0"> <a href="#org533ded0"> <span class="todo TODO">TODO</span> </a> <a href="https://dl.acm.org/doi/pdf/10.1145/3386324">Evolution of Emacs Lisp</a></h3>
 <div class="outline-text-3" id="text-org533ded0">
 <p>
Emacs Lispの進歩。
</p>
</div>
</div>
 <div id="outline-container-org137847e" class="outline-3">
 <h3 id="org137847e"> <a href="#org137847e"> <span class="todo TODO">TODO</span> </a> <a href="https://github.com/melpa/melpa/pull/8574">Add persist-state package by bram85 · Pull Request #8574 · melpa/melpa</a></h3>
 <div class="outline-text-3" id="text-org137847e">
 <p>
Package-Versionは不要になった。
</p>
</div>
</div>
 <div id="outline-container-org5173321" class="outline-3">
 <h3 id="org5173321"> <a href="#org5173321"> <span class="todo TODO">TODO</span> textlintのパッケージを作る</a></h3>
 <div class="outline-text-3" id="text-org5173321">
 <p>
今のところ、ない。
</p>
</div>
</div>
 <div id="outline-container-orgde76a42" class="outline-3">
 <h3 id="orgde76a42"> <a href="#orgde76a42"> <span class="todo TODO">TODO</span> マシンごとの分岐をする</a></h3>
 <div class="outline-text-3" id="text-orgde76a42">
 <ul class="org-ul"> <li>仕事用とプライベート用の違い</li>
 <li>デスクトップとラップトップの違い</li>
 <li>モニター解像度の違い</li>
</ul> <p>
があるので、判定できるようにする。
</p>
</div>
</div>
 <div id="outline-container-org20ae031" class="outline-3">
 <h3 id="org20ae031"> <a href="#org20ae031"> <span class="todo TODO">TODO</span> denoteを読む</a></h3>
 <div class="outline-text-3" id="text-org20ae031">
 <p>
シンプルなノートパッケージ。
</p>
</div>
</div>
 <div id="outline-container-org2adaf75" class="outline-3">
 <h3 id="org2adaf75"> <a href="#org2adaf75"> <span class="todo TODO">TODO</span> rfc-modeを読む</a></h3>
 <div class="outline-text-3" id="text-org2adaf75">
 <p>
rfcドキュメントを読むモード。あまり変化しない特定のドキュメントに特化したモードは便利そう。
</p>
</div>
</div>
 <div id="outline-container-org914ba1a" class="outline-3">
 <h3 id="org914ba1a"> <a href="#org914ba1a"> <span class="todo TODO">TODO</span> hydraはどうやって登録キーをキーマップに登録しているか    <span class="tag"> <span class="DontKnow">DontKnow</span></span></a></h3>
 <div class="outline-text-3" id="text-org914ba1a">
 <p>
アルファベットで指定して初期化するだけでメニュー表示に追加し、キーバインドを作成する。これはどうやっているか。hydra起動中はキーバインドが一切衝突しないのも気になる。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 28: </span>hydraメニュー定義の例</label> <pre class="src src-emacs-lisp">(defhydra hydra-zoom (global-map  <span class="org-string">"<f2>"</span>)
   <span class="org-string">"zoom"</span>
  ( <span class="org-string">"g"</span> text-scale-increase  <span class="org-string">"in"</span>)
  ( <span class="org-string">"l"</span> text-scale-decrease  <span class="org-string">"out"</span>))
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 29: </span>ポップ中のキーバインドを限定してそうな部分</label> <pre class="src src-git-permalink">https://github.com/kd-collective/hydra/blob/2d553787aca1aceb3e6927e426200e9bb9f056f1/hydra.el#L160-L161
</pre>
</div>

 <div class="results" id="org2df2101">
 <p>
(when overriding-terminal-local-map
  (internal-pop-keymap hydra-curr-map ’overriding-terminal-local-map))))
</p>

</div>
</div>
</div>
 <div id="outline-container-org0317ab0" class="outline-3">
 <h3 id="org0317ab0"> <a href="#org0317ab0"> <span class="todo TODO">TODO</span> バッファ管理</a></h3>
 <div class="outline-text-3" id="text-org0317ab0">
 <p>
rails開発で処理が多くのファイルに分散していて、同じような名前のファイルが多い場合、集中のスイッチングコストが大きくなる。今まではあまりファイル分散してなかったので  <code>counsel-switch-buffer</code> ひとつで問題なかったが、タスクやコードの構造によって問題になりうる。ファイル移動しようとするたびに思考が中断される。
</p>

 <ul class="org-ul"> <li>方法1: projectile-railsのキーバインドを覚える  <a href="https://qiita.com/yoshinarl/items/8e3c4b075a181f224591">https://qiita.com/yoshinarl/items/8e3c4b075a181f224591</a>
 <ul class="org-ul"> <li>projectile-rails-find-current-spec(C-c r P) 対応するテストファイルを開く</li>
 <li>MVC系の移動 C-c r M、C-c r C、C-c r V</li>
</ul></li>
 <li>方法2: バッファをリセットする
 <ul class="org-ul"> <li>無関係な似たような名前のバッファが溜まるのが問題であって、そもそもこまめにリセットすれば見やすくなる説</li>
</ul></li>
 <li>方法3: ブックマーク
 <ul class="org-ul"> <li>必要なものはブックマークしておく。メンドイ。</li>
</ul></li>
 <li>方法4: タブ表示
 <ul class="org-ul"> <li>ブラウザのように、タブに表示する。結局ファイル名が長かったり、ファイル名が多くなるとやりにくくなるのだが、直近3つくらいのファイルが見られるだけでも改善する</li>
</ul></li>
</ul> <p>
良いページを発見した。 <a href="https://wikemacs.org/wiki/Buffer_management">Buffer management - WikEmacs</a>
</p>
</div>
</div>
 <div id="outline-container-org38c9922" class="outline-3">
 <h3 id="org38c9922"> <a href="#org38c9922"> <span class="todo TODO">TODO</span> </a> <a href="https://daregada.sakuraweb.com/paredit_tutorial_ja.html">ParEdit チュートリアル</a></h3>
 <div class="outline-text-3" id="text-org38c9922">
 <p>
すごい便利らしいのでやってみる。
</p>
</div>
</div>
 <div id="outline-container-org79b7949" class="outline-3">
 <h3 id="org79b7949"> <a href="#org79b7949"> <span class="todo TODO">TODO</span> use-packageでパッケージ設定を書き直す</a></h3>
 <div class="outline-text-3" id="text-org79b7949">
 <p>
パッケージごとの設定がわかりづらい状態なので、書き直す。とくにhook、keybindあたりはあちこちに散らかっている。
</p>
</div>
</div>
 <div id="outline-container-org5265655" class="outline-3">
 <h3 id="org5265655"> <a href="#org5265655"> <span class="todo TODO">TODO</span> 今日の残り時間をゲージで表示する</a></h3>
 <div class="outline-text-3" id="text-org5265655">
 <p>
時計より視覚的にわかりやすそうなので、polybarで出すようにしよう。
</p>
</div>
</div>
 <div id="outline-container-org1284b25" class="outline-3">
 <h3 id="org1284b25"> <a href="#org1284b25"> <span class="todo TODO">TODO</span> recompileが別ウィンドウで立ち上がるようにする</a></h3>
 <div class="outline-text-3" id="text-org1284b25">
 <p>
recompileは直前のcompilationの再実行関数。
実行して別ウィンドウのバッファが残るはずなのだが、何かウィンドウに関するパッケージを入れたせいで挙動が変わっている。
消えてしまう。
</p>
</div>
</div>
 <div id="outline-container-org30f56f3" class="outline-3">
 <h3 id="org30f56f3"> <a href="#org30f56f3"> <span class="todo TODO">TODO</span> 正規表現置換が2度目以降失敗する</a></h3>
 <div class="outline-text-3" id="text-org30f56f3">
 <p>
プログラム関係のmodeで起こることを確認(orgでは起こらない)。
</p>
 <blockquote>
 <p>
vr–perform-query-replace: Match data clobbered by buffer modification hooks
</p>
</blockquote>
</div>
</div>
 <div id="outline-container-orgaeec1a0" class="outline-3">
 <h3 id="orgaeec1a0"> <a href="#orgaeec1a0"> <span class="todo TODO">TODO</span> Slackを見られるようにする</a></h3>
</div>
 <div id="outline-container-org5f003a8" class="outline-3">
 <h3 id="org5f003a8"> <a href="#org5f003a8"> <span class="todo TODO">TODO</span> mailを読めるようにする</a></h3>
</div>
 <div id="outline-container-org9f22761" class="outline-3">
 <h3 id="org9f22761"> <a href="#org9f22761"> <span class="todo TODO">TODO</span> Vtermのログ件数を増やす</a></h3>
</div>
 <div id="outline-container-org91461d2" class="outline-3">
 <h3 id="org91461d2"> <a href="#org91461d2"> <span class="todo TODO">TODO</span> </a> <a href="https://solist.work/blog/posts/git-history-tool/">ソースコードの読み方 - Solist Work Blog</a></h3>
 <div class="outline-text-3" id="text-org91461d2">
 <p>
Emacs, Magitで解説している。
</p>
</div>
</div>
 <div id="outline-container-org9264fb8" class="outline-3">
 <h3 id="org9264fb8"> <a href="#org9264fb8"> <span class="todo TODO">TODO</span> </a> <a href="https://dev.classmethod.jp/articles/emacs-multiple-cursors/">複数カーソルを操作するパッケージ multiple-cursors.el のご紹介 | DevelopersIO</a></h3>
</div>
 <div id="outline-container-org120dfa6" class="outline-3">
 <h3 id="org120dfa6"> <a href="#org120dfa6"> <span class="todo TODO">TODO</span> .emacs.d整理</a></h3>
 <div class="outline-text-3" id="text-org120dfa6">
 <p>
package管理もちゃんと使って設定したい。
</p>

 <ul class="org-ul"> <li>leaf  <a href="https://qiita.com/conao3/items/dc88bdadb0523ef95878">https://qiita.com/conao3/items/dc88bdadb0523ef95878</a></li>
</ul></div>
</div>
 <div id="outline-container-org7709c22" class="outline-3">
 <h3 id="org7709c22"> <a href="#org7709c22"> <span class="todo TODO">TODO</span> wikipediaを直に検索できるようにする</a></h3>
</div>
 <div id="outline-container-org47180bf" class="outline-3">
 <h3 id="org47180bf"> <a href="#org47180bf"> <span class="todo TODO">TODO</span> popper(emacs package)</a></h3>
 <div class="outline-text-3" id="text-org47180bf">
 <p>
ウィンドウの出る方法を設定できるパッケージ。
</p>
</div>
</div>
 <div id="outline-container-orgd66da56" class="outline-3">
 <h3 id="orgd66da56"> <a href="#orgd66da56"> <span class="todo TODO">TODO</span> shackle.el設定</a></h3>
</div>
 <div id="outline-container-orgb553924" class="outline-3">
 <h3 id="orgb553924"> <a href="#orgb553924"> <span class="todo TODO">TODO</span> EmacsとレプリカDB接続</a></h3>
 <div class="outline-text-3" id="text-orgb553924">
 <p>
ローカルではできるが、SSHを使う方法がわかっていない。
SQLを打つときに不便なので。
</p>
</div>
</div>
 <div id="outline-container-org8f1cfd1" class="outline-3">
 <h3 id="org8f1cfd1"> <a href="#org8f1cfd1"> <span class="todo TODO">TODO</span> lsp-mode が何かと競合する</a></h3>
 <div class="outline-text-3" id="text-org8f1cfd1">
 <p>
消したときに近くの矩形が消されてしまう謎の挙動。
</p>
</div>
</div>
 <div id="outline-container-org708b9b2" class="outline-3">
 <h3 id="org708b9b2"> <a href="#org708b9b2"> <span class="todo TODO">TODO</span> プロジェクトファイル限定のswitch-buffer。</a></h3>
 <div class="outline-text-3" id="text-org708b9b2">
 <p>
projectile-switch-to-buffer (C-c p b)
</p>
</div>
</div>
 <div id="outline-container-org4dc02ea" class="outline-3">
 <h3 id="org4dc02ea"> <a href="#org4dc02ea"> <span class="todo TODO">TODO</span> キーバインドの一覧を表示</a></h3>
 <div class="outline-text-3" id="text-org4dc02ea">
 <p>
<F1> b
</p>
</div>
</div>
 <div id="outline-container-orgcf1eef7" class="outline-3">
 <h3 id="orgcf1eef7"> <a href="#orgcf1eef7"> <span class="todo TODO">TODO</span> プロジェクトをag検索</a></h3>
 <div class="outline-text-3" id="text-orgcf1eef7">
 <p>
projectile-ag ( <code>C-c p s s</code>)
</p>
</div>
</div>
 <div id="outline-container-org0e4e2ed" class="outline-3">
 <h3 id="org0e4e2ed"> <a href="#org0e4e2ed"> <span class="todo TODO">TODO</span> vtermでカッコが入力できない</a></h3>
 <div class="outline-text-3" id="text-org0e4e2ed">
 <p>
vtermは互換性が高い <a href="20210606192338-shell.html#ID-585d3b5e-989d-4363-bcc3-894402fcfcf9">Shell</a>のターミナルパッケージ。
</p>

 <p>
カッコを自動入力するモードにしていると入力できなる。
なのでカッコ関係はコピペする羽目になる。
</p>
</div>
</div>
 <div id="outline-container-org0ef2889" class="outline-3">
 <h3 id="org0ef2889"> <a href="#org0ef2889"> <span class="todo TODO">TODO</span>  <code>highlight-indent-guides-mode</code> でコピペしたときにおかしい</a></h3>
 <div class="outline-text-3" id="text-org0ef2889">
 <p>
 <code>highlight-indent-guides-mode</code> でコピペしたときに表示がおかしい。
faceまでコピーするから仕方ないのかな。
</p>
</div>
</div>
 <div id="outline-container-org9771e05" class="outline-3">
 <h3 id="org9771e05"> <a href="#org9771e05"> <span class="todo TODO">TODO</span> GTAGSを使えるようにする</a></h3>
 <div class="outline-text-3" id="text-org9771e05">
 <p>
読むときにたどれないと不便。
</p>
</div>
</div>
 <div id="outline-container-orgf13fdd7" class="outline-3">
 <h3 id="orgf13fdd7"> <a href="#orgf13fdd7"> <span class="todo TODO">TODO</span> 使ってないコマンドを開拓するパッケージ</a></h3>
 <div class="outline-text-3" id="text-orgf13fdd7">
 <p>
最初にコマンド一覧をどこからか出力する。それから、何かコマンドを打つごとに数を保存する。そうしてしばらく使っていくと、使ったことのないコマンドが明らかになる。カバレッジ率的にやって面白そうだろう。
</p>
</div>
</div>
 <div id="outline-container-org5483839" class="outline-3">
 <h3 id="org5483839"> <a href="#org5483839"> <span class="todo TODO">TODO</span> </a> <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Tips.html">Appendix D Tips and Conventions</a></h3>
 <div class="outline-text-3" id="text-org5483839">
 <p>
Emacs Lisp Manual。いくつか面白そうな章がある。
</p>
</div>
</div>
 <div id="outline-container-org36a3b0b" class="outline-3">
 <h3 id="org36a3b0b"> <a href="#org36a3b0b"> <span class="todo TODO">TODO</span> </a> <a href="https://qiita.com/takaxp/items/a5a3383d7358c58240d0">org-mode のキーバインド、その先 - Qiita</a></h3>
 <div class="outline-text-3" id="text-org36a3b0b">
 <p>
キーバインドの記事。
</p>
</div>
</div>
</div>
 <div id="outline-container-orga4bf0eb" class="outline-2">
 <h2 id="orga4bf0eb"> <a href="#orga4bf0eb">References</a></h2>
 <div class="outline-text-2" id="text-orga4bf0eb">
</div>
 <div id="outline-container-orgb021645" class="outline-3">
 <h3 id="orgb021645"> <a href="#orgb021645"></a> <a href="https://protesilaos.com/emacs/spacious-padding">Spacious Padding (spacious-padding.el) | Protesilaos Stavrou</a></h3>
 <div class="outline-text-3" id="text-orgb021645">
 <p>
Emacsのpaddingをいい感じにするパッケージ。
</p>
</div>
</div>
 <div id="outline-container-org3e574a6" class="outline-3">
 <h3 id="org3e574a6"> <a href="#org3e574a6"></a> <a href="https://www2.lib.uchicago.edu/keith/emacs/">Use GNU Emacs</a></h3>
 <div class="outline-text-3" id="text-org3e574a6">
 <p>
新しいチュートリアル。
</p>
</div>
</div>
 <div id="outline-container-orgc765757" class="outline-3">
 <h3 id="orgc765757"> <a href="#orgc765757"></a> <a href="https://olmon.gitlab.io/org-themes/">Org Themes collection</a></h3>
 <div class="outline-text-3" id="text-orgc765757">
 <p>
Org Exportテーマのコレクション。
</p>
</div>
</div>
 <div id="outline-container-orge57ab5f" class="outline-3">
 <h3 id="orge57ab5f"> <a href="#orge57ab5f"></a> <a href="https://takaxp.github.io/init.html">Configurations for GNU Emacs</a></h3>
 <div class="outline-text-3" id="text-orge57ab5f">
 <p>
文芸的プログラミング。
</p>
</div>
</div>
 <div id="outline-container-org8b1aeb8" class="outline-3">
 <h3 id="org8b1aeb8"> <a href="#org8b1aeb8"></a> <a href="https://ezoeryou.github.io/blog/article/2022-11-09-emacs.html">ドイツでは航空交通管制にEmacsが使われていた</a></h3>
 <div class="outline-text-3" id="text-org8b1aeb8">
 <p>
面白話。
</p>
</div>
</div>
 <div id="outline-container-org5f17baa" class="outline-3">
 <h3 id="org5f17baa"> <a href="#org5f17baa"></a> <a href="https://www.youtube.com/watch?v=Ag1AKIl_2GM">Free software, free society: Richard Stallman at TEDxGeneva 2014 - YouTube</a></h3>
 <div class="outline-text-3" id="text-org5f17baa">
 <p>
リチャード・ストールマンのTED Talk。
</p>
</div>
</div>
 <div id="outline-container-orga64fac9" class="outline-3">
 <h3 id="orga64fac9"> <a href="#orga64fac9"></a> <a href="https://migrev-dolseg.com/">cysh</a></h3>
 <div class="outline-text-3" id="text-orga64fac9">
 <p>
独自のサイトジェネレータで作成されたサイト。
</p>
</div>
</div>
 <div id="outline-container-orge826a7f" class="outline-3">
 <h3 id="orge826a7f"> <a href="#orge826a7f"></a> <a href="https://hangstuck.com/emacs-deepl/">Emacs から直接 DeepL を使う設定方法 | ハングスタック</a></h3>
 <div class="outline-text-3" id="text-orge826a7f">
 <p>
Emacsでdeeplを使う方法。
</p>
</div>
</div>
 <div id="outline-container-orgc10e047" class="outline-3">
 <h3 id="orgc10e047"> <a href="#orgc10e047"></a> <a href="https://zenn.dev/nasum/articles/2020-12-06-emacs-init-el-dev">emacs.d でないところで init.el を育てる方法</a></h3>
 <div class="outline-text-3" id="text-orgc10e047">
 <p>
ユーザディレクトリ以外に配置した.emacs.dを使う方法。
</p>
</div>
</div>
 <div id="outline-container-orgbc36de9" class="outline-3">
 <h3 id="orgbc36de9"> <a href="#orgbc36de9"></a> <a href="http://pragmaticemacs.com/">Pragmatic Emacs | practical tips for everyday emacs</a></h3>
 <div class="outline-text-3" id="text-orgbc36de9">
 <p>
役立つtipsが紹介されているサイト。
</p>
</div>
</div>
 <div id="outline-container-org362ebcc" class="outline-3">
 <h3 id="org362ebcc"> <a href="#org362ebcc"></a> <a href="http://www.modernemacs.com/post/pretty-magit/">Pretty Magit - Integrating commit leaders | Modern Emacs</a></h3>
 <div class="outline-text-3" id="text-org362ebcc">
 <p>
 <a href="20211209223810-conventional_commits.html#ID-36da3e35-29c9-480f-99b3-4a297345bd5d">Conventional Commits</a>を絵文字表示にする。
</p>
</div>
</div>
 <div id="outline-container-org86bf0f0" class="outline-3">
 <h3 id="org86bf0f0"> <a href="#org86bf0f0"></a> <a href="https://www.slideshare.net/yukihiro_matz/how-emacs-changed-my-life">How Emacs changed my life</a></h3>
 <div class="outline-text-3" id="text-org86bf0f0">
 <p>
Matzのスライド。
Emacsを単に道具として使うだけでなく、 <a href="20210509095513-ruby.html#ID-cfd092c4-1bb2-43d3-88b1-9f647809e546">Ruby</a>を書くうえでの参考にもなったという。
</p>
</div>
</div>
 <div id="outline-container-orgeb76851" class="outline-3">
 <h3 id="orgeb76851"> <a href="#orgeb76851"></a> <a href="https://zenn.dev/lambdagonbei/articles/1b2bce27673078">【Emacs入門】②バージョン28で新たにビルトインされるModus Themesを使おう</a></h3>
 <div class="outline-text-3" id="text-orgeb76851">
 <p>
新しく追加されたthemeとその設定方法。
</p>
</div>
</div>
 <div id="outline-container-org1864d69" class="outline-3">
 <h3 id="org1864d69"> <a href="#org1864d69"></a> <a href="https://karthinks.com/software/avy-can-do-anything/">Avy can do anything | Karthinks</a></h3>
 <div class="outline-text-3" id="text-org1864d69">
 <p>
avyの解説。
</p>
</div>
</div>
 <div id="outline-container-org8b02c4f" class="outline-3">
 <h3 id="org8b02c4f"> <a href="#org8b02c4f"></a> <a href="https://www.emacswiki.org/emacs/HackerGuide">EmacsWiki: Hacker Guide</a></h3>
 <div class="outline-text-3" id="text-org8b02c4f">
 <p>
Emacsの簡単な概要。
</p>
</div>
</div>
 <div id="outline-container-orgce6b888" class="outline-3">
 <h3 id="orgce6b888"> <a href="#orgce6b888"></a> <a href="https://leanpub.com/hacking-your-way-emacs/">Hacking your way around in… by Marcin Borkowski</a></h3>
 <div class="outline-text-3" id="text-orgce6b888">
 <p>
Emacsの本。買うか迷ってる。
</p>
</div>
</div>
 <div id="outline-container-org5cce8cb" class="outline-3">
 <h3 id="org5cce8cb"> <a href="#org5cce8cb"></a> <a href="https://www.slideshare.net/nanasess/emacs-5282932">Emacs アイコンがコミットされるまで</a></h3>
 <div class="outline-text-3" id="text-org5cce8cb">
 <p>
こんな流れなんだ。
</p>
</div>
</div>
 <div id="outline-container-org25dd97a" class="outline-3">
 <h3 id="org25dd97a"> <a href="#org25dd97a"></a> <a href="https://www.macs.hw.ac.uk/~rs46/posts/2018-12-29-textlint-flycheck.html">A textlint flycheck checker in Emacs</a></h3>
 <div class="outline-text-3" id="text-org25dd97a">
 <p>
EmacsでのTextlint設定方法。
</p>
</div>
</div>
 <div id="outline-container-org41af9af" class="outline-3">
 <h3 id="org41af9af"> <a href="#org41af9af"></a> <a href="https://rubikitch.hatenadiary.org/entry/20101109/mouse">Emacsでマウスを有効活用する方法 - http://rubikitch.com/に移転しました</a></h3>
 <div class="outline-text-3" id="text-org41af9af">
 <p>
マウス活用の方法。
</p>
</div>
</div>
 <div id="outline-container-orgbe766de" class="outline-3">
 <h3 id="orgbe766de"> <a href="#orgbe766de"></a> <a href="https://stackoverflow.com/questions/15272841/how-to-remove-a-function-from-run-with-idle-timer">emacs - How to remove a function from run-with-idle-timer? - Stack Overflow</a></h3>
 <div class="outline-text-3" id="text-orgbe766de">
 <p>
timerのキャンセル方法。
</p>
</div>
</div>
 <div id="outline-container-orgbfb6847" class="outline-3">
 <h3 id="orgbfb6847"> <a href="#orgbfb6847"></a> <a href="https://spin.atomicobject.com/2016/05/27/write-emacs-package/">A Simple Guide to Writing & Publishing Emacs Packages</a></h3>
 <div class="outline-text-3" id="text-orgbfb6847">
 <p>
パッケージを作ってみる記事。
</p>
</div>
</div>
 <div id="outline-container-org220d5c9" class="outline-3">
 <h3 id="org220d5c9"> <a href="#org220d5c9"></a> <a href="https://github.com/alphapapa/emacs-package-dev-handbook">alphapapa/emacs-package-dev-handbook</a></h3>
 <div class="outline-text-3" id="text-org220d5c9">
 <p>
Emacsパッケージのハンドブック。
</p>
</div>
</div>
 <div id="outline-container-org4d97261" class="outline-3">
 <h3 id="org4d97261"> <a href="#org4d97261"></a> <a href="https://zeekat.nl/articles/making-emacs-work-for-me.html">Making Emacs Work For Me</a></h3>
 <div class="outline-text-3" id="text-org4d97261">
 <p>
設定解説。
</p>
</div>
</div>
 <div id="outline-container-org3b09363" class="outline-3">
 <h3 id="org3b09363"> <a href="#org3b09363"></a> <a href="http://www.takuichi.net/hobby/symbolic/lisp/build-in.html">Emacs Lisp 組込み関数</a></h3>
 <div class="outline-text-3" id="text-org3b09363">
 <p>
基本的な関数をまとめたリスト。
</p>
</div>
</div>
 <div id="outline-container-orge82a012" class="outline-3">
 <h3 id="orge82a012"> <a href="#orge82a012"></a> <a href="https://batsov.com/">(think)</a></h3>
 <div class="outline-text-3" id="text-orge82a012">
 <p>
Emacsのブログ。
</p>
</div>
</div>
 <div id="outline-container-org30f397d" class="outline-3">
 <h3 id="org30f397d"> <a href="#org30f397d"></a> <a href="https://irreal.org/blog/">Irreal | The minds had long ago come up with a proper name for it; they called it the Irreal, but they thought of it as Infinite Fun. That was what they really knew it as. The Land of Infinite Fun. –Iain M. Banks, Excession</a></h3>
 <div class="outline-text-3" id="text-org30f397d">
 <p>
Emacsのブログ。
</p>
</div>
</div>
 <div id="outline-container-org0445d53" class="outline-3">
 <h3 id="org0445d53"> <a href="#org0445d53"></a> <a href="https://kitchingroup.cheme.cmu.edu/blog/">The Kitchin Research Group</a></h3>
 <div class="outline-text-3" id="text-org0445d53">
 <p>
Emacsのブログ。
</p>
</div>
</div>
 <div id="outline-container-org6ccb927" class="outline-3">
 <h3 id="org6ccb927"> <a href="#org6ccb927"></a> <a href="https://planet.emacsen.org/">Theresa O’Connor</a></h3>
 <div class="outline-text-3" id="text-org6ccb927">
 <p>
Emacsの情報集約サイト。
</p>
</div>
</div>
 <div id="outline-container-org095d39f" class="outline-3">
 <h3 id="org095d39f"> <a href="#org095d39f"></a> <a href="https://project-mage.org/emacs-is-not-enough">Emacs is Not Enough</a></h3>
 <div class="outline-text-3" id="text-org095d39f">
 <p>
読み物。
</p>
</div>
</div>
</div>
 <div id="outline-container-org0e90683" class="outline-2">
 <h2 id="org0e90683"> <a href="#org0e90683">Archives</a></h2>
 <div class="outline-text-2" id="text-org0e90683">
</div>
 <div id="outline-container-org9361745" class="outline-3">
 <h3 id="org9361745"> <a href="#org9361745"> <span class="done DONE">DONE</span> git-linkでコミットハッシュからリンクを取る</a></h3>
 <div class="outline-text-3" id="text-org9361745">
 <p>
デフォルトだと現在のブランチから名前を取るため、remoteに存在しないブランチのとき無効なリンクになる。
ブランチ名を固定もできるが、汎用性がなくなる。
コミットハッシュから取ればいい。
</p>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">setq</span> git-link-use-commit t)
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgd7f0dea" class="outline-3">
 <h3 id="orgd7f0dea"> <a href="#orgd7f0dea"> <span class="done DONE">DONE</span> ivy化</a></h3>
 <div class="outline-text-3" id="text-orgd7f0dea">
 <p>
 <a href="https://qiita.com/takaxp/items/2fde2c119e419713342b">helm を背に ivy の門を叩く - Qiita</a>
</p>
</div>
</div>
 <div id="outline-container-org0da005a" class="outline-3">
 <h3 id="org0da005a"> <a href="#org0da005a"> <span class="done DONE">DONE</span> esh-autosuggestを導入する</a></h3>
 <div class="outline-text-3" id="text-org0da005a">
 <p>
履歴を自動入力。
</p>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">use-package</span> esh-autosuggest
   <span class="org-builtin">:hook</span> (eshell-mode . esh-autosuggest-mode)
   <span class="org-builtin">:config</span>
  ( <span class="org-keyword">setq</span> esh-autosuggest-delay 0.5)
  (set-face-foreground 'company-preview-common  <span class="org-string">"#4b5668"</span>)
  (set-face-background 'company-preview nil))
</pre>
</div>
</div>
</div>
 <div id="outline-container-org6fb5271" class="outline-3">
 <h3 id="org6fb5271"> <a href="#org6fb5271"> <span class="done DONE">DONE</span> undo履歴を保持しないときがある</a></h3>
 <div class="outline-text-3" id="text-org6fb5271">
 <p>
3つくらいしか戻れないときがあり、原因は不明。
undo-treeで戻れる。
</p>
</div>
</div>
 <div id="outline-container-orge2d5803" class="outline-3">
 <h3 id="orge2d5803"> <a href="#orge2d5803"> <span class="done DONE">DONE</span>  <code>vterm-toggle</code> をもっと良い感じに出てくるようにしたい。toggleでオフになったとき分割ウィンドウが消える。</a></h3>
 <div class="outline-text-3" id="text-orge2d5803">
 <p>
設定を追加した。
</p>
</div>
</div>
 <div id="outline-container-orgd842b60" class="outline-3">
 <h3 id="orgd842b60"> <a href="#orgd842b60"> <span class="done DONE">DONE</span>  <code>markdown-mode</code> でHelm-M-xが作動しない。…emacs-mozcを使っていて日本語入力モードのときhelmがうまく作動しない。</a></h3>
 <div class="outline-text-3" id="text-orgd842b60">
 <p>
よくわからないのでclose。
</p>
</div>
</div>
 <div id="outline-container-org1b54acc" class="outline-3">
 <h3 id="org1b54acc"> <a href="#org1b54acc"> <span class="done DONE">DONE</span> 列名を表示する</a></h3>
 <div class="outline-text-3" id="text-org1b54acc">
 <p>
(global-display-line-numbers-mode)
linum-modeよりこっちのほうがいいらしい。
linum-modeは重かった。
外観も綺麗。
</p>
</div>
</div>
 <div id="outline-container-orge9b6d06" class="outline-3">
 <h3 id="orge9b6d06"> <a href="#orge9b6d06"> <span class="done DONE">DONE</span> diredで直に編集する</a></h3>
 <div class="outline-text-3" id="text-orge9b6d06">
 <p>
(wdired-change-to-wdired-mode)
編集モードにして  <code>C-c C-c</code> で実行する。
</p>
</div>
</div>
 <div id="outline-container-orga2a7e4a" class="outline-3">
 <h3 id="orga2a7e4a"> <a href="#orga2a7e4a"> <span class="done DONE">DONE</span> 見出しレベル替え</a></h3>
 <div class="outline-text-3" id="text-orga2a7e4a">
 <p>
(org-cycle-level)
何も書いてない見出しでtab。
</p>
</div>
</div>
 <div id="outline-container-orgb32213c" class="outline-3">
 <h3 id="orgb32213c"> <a href="#orgb32213c"> <span class="done DONE">DONE</span> 見出し挿入</a></h3>
 <div class="outline-text-3" id="text-orgb32213c">
 <p>
C-enter
前の項目がリストでも見出しが挿入できる。
</p>
</div>
</div>
 <div id="outline-container-orgd4704e1" class="outline-3">
 <h3 id="orgd4704e1"> <a href="#orgd4704e1"> <span class="done DONE">DONE</span>  <code>C-c n</code></a></h3>
 <div class="outline-text-3" id="text-orgd4704e1">
 <p>
roam のプレフィクスキー。
</p>
</div>
</div>
 <div id="outline-container-org4e4480d" class="outline-3">
 <h3 id="org4e4480d"> <a href="#org4e4480d"> <span class="done DONE">DONE</span> wdired-change-to-wdired-mode dired</a></h3>
 <div class="outline-text-3" id="text-org4e4480d">
 <p>
便利な置換。
</p>
</div>
</div>
 <div id="outline-container-org0ed37f8" class="outline-3">
 <h3 id="org0ed37f8"> <a href="#org0ed37f8"> <span class="done DONE">DONE</span> org-mode の各種挿入  <code>C-c C-,</code></a></h3>
 <div class="outline-text-3" id="text-org0ed37f8">
</div>
</div>
 <div id="outline-container-orgeba8f8e" class="outline-3">
 <h3 id="orgeba8f8e"> <a href="#orgeba8f8e"> <span class="done DONE">DONE</span>  <code>projectile-find-file</code> ( <code>C-c p f</code>)</a></h3>
 <div class="outline-text-3" id="text-orgeba8f8e">
 <p>
プロジェクト全体のファイル名検索。
</p>
</div>
</div>
 <div id="outline-container-orgcc7103c" class="outline-3">
 <h3 id="orgcc7103c"> <a href="#orgcc7103c"> <span class="done DONE">DONE</span>  <code>projectile-switch-project</code> ( <code>C-c p p</code>)</a></h3>
 <div class="outline-text-3" id="text-orgcc7103c">
 <p>
プロジェクトを切り替える。
CLOSED:  <span class="timestamp-wrapper"> <span class="timestamp">[2021-06-03 木 21:42]</span></span>
</p>
</div>
</div>
 <div id="outline-container-org5ff1dd0" class="outline-3">
 <h3 id="org5ff1dd0"> <a href="#org5ff1dd0"> <span class="done DONE">DONE</span>  <code>robe-doc</code> ( <code>C-c C-d</code>)</a></h3>
 <div class="outline-text-3" id="text-org5ff1dd0">
 <p>
Rubyメソッドを調べられる。gemがあるプロジェクトのGemfileで  <code>pry</code>,  <code>pry-doc</code> をインストールして実行するとpryが起動して、以後使えるようになる。これは補完の  <code>company.el</code> と連携させているため、pryを起動しないことにはgemの補完は表示されない。
</p>
</div>
</div>
 <div id="outline-container-org3377fd6" class="outline-3">
 <h3 id="org3377fd6"> <a href="#org3377fd6"> <span class="done DONE">DONE</span>  <code>vterm-copy-mode</code> →  <code>C-c C-t</code></a></h3>
 <div class="outline-text-3" id="text-org3377fd6">
 <p>
vterm上で、eshellなどのように自由に動き回るモード。
</p>
</div>
</div>
 <div id="outline-container-orgd9e423e" class="outline-3">
 <h3 id="orgd9e423e"> <a href="#orgd9e423e"> <span class="done DONE">DONE</span> C-c C-w (org-refile)</a></h3>
 <div class="outline-text-3" id="text-orgd9e423e">
 <p>
 <a href="https://orgmode.org/manual/Refile-and-Copy.html#Refile-and-Copy">https://orgmode.org/manual/Refile-and-Copy.html#Refile-and-Copy</a>
見出しの移動。
</p>
</div>
</div>
 <div id="outline-container-orgc764360" class="outline-3">
 <h3 id="orgc764360"> <a href="#orgc764360"> <span class="done DONE">DONE</span> 使用パッケージで分岐するとき、どうやってbyte-compileエラーを回避するのか</a></h3>
 <div class="outline-text-3" id="text-orgc764360">
 <p>
たとえばhelmを使ってるときはこれ、ivyのときはこれとかでrequireするものは変わるものだが。既存パッケージはどうしているのだろう。
</p>

 <p>
↓とかやった。外部のコマンドは最初に定義しておいた。
</p>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">defvar</span>  <span class="org-variable-name">w3m-current-url</span>)
( <span class="org-keyword">declare-function</span> w3m-current-title  <span class="org-string">"ext:w3m-util"</span>)
</pre>
</div>
</div>
</div>
 <div id="outline-container-org8c6d2c1" class="outline-3">
 <h3 id="org8c6d2c1"> <a href="#org8c6d2c1"> <span class="done CLOSE">CLOSE</span> Emacsをビルドしてみる</a></h3>
 <div class="outline-text-3" id="text-org8c6d2c1">
 <p>
 <a href="https://systemcrafters.net/live-streams/august-20-2021/">https://systemcrafters.net/live-streams/august-20-2021/</a>
</p>

 <p>
この通りにやって簡単にできた。
</p>

 <p>
src/emacs にビルド結果が生成される。
</p>
</div>
</div>
 <div id="outline-container-org195ac40" class="outline-3">
 <h3 id="org195ac40"> <a href="#org195ac40"> <span class="done DONE">DONE</span> roamリポジトリをサイト公開する</a></h3>
 <div class="outline-text-3" id="text-org195ac40">
 <p>
どうにかして静的ページとして公開できるはず。
かっこいいのがなければ作る。
</p>

 <p>
いい感じにやっているサイトはいくつもある。
</p>

 <ul class="org-ul"> <li> <a href="http://juanjose.garciaripoll.com/blog/org-mode-html-templates/index.html">http://juanjose.garciaripoll.com/blog/org-mode-html-templates/index.html</a></li>
 <li> <a href="https://diego.codes/post/blogging-with-org/">https://diego.codes/post/blogging-with-org/</a></li>
 <li> <a href="https://hugocisneros.com/org-config/#configuration">https://hugocisneros.com/org-config/#configuration</a></li>
 <li> <a href="https://hugocisneros.com/blog/my-org-roam-notes-workflow/">https://hugocisneros.com/blog/my-org-roam-notes-workflow/</a></li>
 <li> <a href="https://doubleloop.net/2020/08/21/how-publish-org-roam-wiki-org-publish/">https://doubleloop.net/2020/08/21/how-publish-org-roam-wiki-org-publish/</a></li>
 <li> <a href="https://notes.alexkehayias.com/org-roam/">https://notes.alexkehayias.com/org-roam/</a></li>
 <li> <a href="https://www.mtsolitary.com/20210318221148-emacs-configuration/#hugo-support">https://www.mtsolitary.com/20210318221148-emacs-configuration/#hugo-support</a></li>
</ul></div>
</div>
 <div id="outline-container-org5860d82" class="outline-3">
 <h3 id="org5860d82"> <a href="#org5860d82"> <span class="done DONE">DONE</span> org-publishのスタイルを設定する</a></h3>
 <div class="outline-text-3" id="text-org5860d82">
 <p>
 <a href="https://ogbe.net/blog/blogging_with_org.html">https://ogbe.net/blog/blogging_with_org.html</a>
</p>

 <p>
contentのhtmlをいじることができなかったが、とりあえずcssで指定してOK。
</p>
</div>
</div>
 <div id="outline-container-orgb37ea42" class="outline-3">
 <h3 id="orgb37ea42"> <a href="#orgb37ea42"> <span class="done DONE">DONE</span> autosaveが出てきてうざい</a></h3>
 <div class="outline-text-3" id="text-orgb37ea42">
 <p>
Guixでは編集すると毎回プロンプトが出てくる。
</p>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">defun</span>  <span class="org-function-name">ask-user-about-supersession-threat</span> (fn)
   <span class="org-doc">"blatantly ignore files that changed on disk"</span>
)
( <span class="org-keyword">defun</span>  <span class="org-function-name">ask-user-about-lock</span> (file opponent)
   <span class="org-doc">"always grab lock"</span>
t)

 <span class="org-comment-delimiter">;; </span> <span class="org-comment">or</span>

( <span class="org-keyword">setq</span> revert-without-query '( <span class="org-string">".*"</span>))
</pre>
</div>
 <p>
を実行したが、変わらなかった。
</p>

 <p>
↓できた。
</p>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">setq</span> auto-save-timeout 2)
( <span class="org-keyword">setq</span> auto-save-visited-interval 2)
( <span class="org-keyword">setq</span> auto-save-no-message t)
(auto-save-visited-mode)
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgb98f198" class="outline-3">
 <h3 id="orgb98f198"> <a href="#orgb98f198"> <span class="done CLOSE">CLOSE</span> Projectileの幅がせまくて見づらい</a></h3>
 <div class="outline-text-3" id="text-orgb98f198">
 <p>
ほかのcompletionは幅いっぱいにハイライトされるが、projectileは文字のあるところしかハイライトされないので短い検索のときに見えにくい。たとえば  <code>counsel-find-file</code> とか  <code>counsel-find-file</code> と比べるとわかる。
</p>

 <p>
counsel-projectileを使えば問題ない。でもデフォルトの動作がおかしいので修正したいところ。
いや、ivyの問題ぽい。ivy yasnippetをすると同じような状態になる。テーマを変えてもそうなる。
</p>

 <p>
org-refileでも同じような感じ。要調査。
共通点は、右側にアノテーションが出ないときか。そのときはfaceが設定されないので右側まで伸びない。
</p>
</div>
</div>
 <div id="outline-container-org4e5fa5c" class="outline-3">
 <h3 id="org4e5fa5c"> <a href="#org4e5fa5c"> <span class="done DONE">DONE</span> org-mode のキーバインド</a></h3>
 <div class="outline-text-3" id="text-org4e5fa5c">
 <p>
見出し移動とか。
</p>
</div>
</div>
 <div id="outline-container-org1a274b5" class="outline-3">
 <h3 id="org1a274b5"> <a href="#org1a274b5"> <span class="done DONE">DONE</span> lsp setup(</a> <a href="20210831232330-typescript.html#ID-ad1527ee-63b3-4a9b-a553-10899f57c234">TypeScript</a>)</h3>
 <div class="outline-text-3" id="text-org1a274b5">
 <ol class="org-ol"> <li>install language-server</li>
</ol> <p>
 <a href="https://deno.land/#installation">https://deno.land/#installation</a>
</p>
 <div class="org-src-container">
 <pre class="src src-shell">curl -fsSL https://deno.land/x/install/install.sh | sh
</pre>
</div>
 <ol class="org-ol"> <li>Install lsp-mode package</li>
 <li>Add lsp settings to init.el</li>

 <li value="reference"> <a href="https://takeokunn.xyz/blog/post/emacs-lsp-mode">emacsにlsp-mode入れた - takeokunn’s blog</a></li>
</ol></div>
</div>
 <div id="outline-container-orga54918b" class="outline-3">
 <h3 id="orga54918b"> <a href="#orga54918b"> <span class="done DONE">DONE</span> Vterm settings</a></h3>
 <div class="outline-text-3" id="text-orga54918b">
 <ul class="org-ul"> <li>prompt settings</li>
</ul></div>
</div>
 <div id="outline-container-orgaa2e068" class="outline-3">
 <h3 id="orgaa2e068"> <a href="#orgaa2e068"> <span class="done DONE">DONE</span> lispxmpを設定する</a></h3>
 <div class="outline-text-3" id="text-orgaa2e068">
 <p>
xmp-filterのelisp版。
</p>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">require</span> ' <span class="org-constant">lispxmp</span>)
(define-key emacs-lisp-mode-map (kbd  <span class="org-string">"C-c C-d"</span>) 'lispxmp)
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgfdba9b6" class="outline-3">
 <h3 id="orgfdba9b6"> <a href="#orgfdba9b6"> <span class="done DONE">DONE</span> pareditを設定する</a></h3>
 <div class="outline-text-3" id="text-orgfdba9b6">
 <div class="org-src-container">
 <pre class="src src-emacs-lisp"> <span class="org-comment-delimiter">;;;</span> <span class="org-comment">括弧の対応を保持して編集する設定</span>
( <span class="org-keyword">require</span> ' <span class="org-constant">paredit</span>)
(add-hook 'emacs-lisp-mode-hook 'enable-paredit-mode)
(add-hook 'lisp-interaction-mode-hook 'enable-paredit-mode)
(add-hook 'lisp-mode-hook 'enable-paredit-mode)
(add-hook 'ielm-mode-hook 'enable-paredit-mode)
</pre>
</div>
</div>
</div>
 <div id="outline-container-org8c68d0f" class="outline-3">
 <h3 id="org8c68d0f"> <a href="#org8c68d0f"> <span class="done DONE">DONE</span> リンクを保存する方法をどうにかする</a></h3>
 <div class="outline-text-3" id="text-org8c68d0f">
 <p>
ブラウザからコピペするのがメンドイのでどうにかする。
org-protocolを設定して簡単に保存できるようにした。
</p>
</div>
</div>
 <div id="outline-container-orgabcaede" class="outline-3">
 <h3 id="orgabcaede"> <a href="#orgabcaede"> <span class="done DONE">DONE</span> 踏み台SSH接続を簡単にできるように</a></h3>
 <div class="outline-text-3" id="text-orgabcaede">
 <p>
Emacsはあまり関係ない。
pecoを設定して簡単に接続できるようにした。
 <a href="https://qiita.com/jagio/items/7b020df50c4b1bdc6ad0">Ubuntuにpecoを導入する(for bash) (for fish) - Qiita</a>
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 30: </span>~/.bashrc</label> <pre class="src src-shell">alias  <span class="org-variable-name">sshp</span>= <span class="org-string">'ssh $(grep Host ~/.ssh/config | grep -v HostName | cut -d" " -f2 | peco)'</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgfe0b80d" class="outline-3">
 <h3 id="orgfe0b80d"> <a href="#orgfe0b80d"> <span class="done DONE">DONE</span> EXWMとの連携を行う</a></h3>
 <div class="outline-text-3" id="text-orgfe0b80d">
 <p>
 <a href="https://www.youtube.com/watch?v=usCfMstCZ7E">The Perfect Panel: Integrating Polybar with Emacs - Emacs Desktop Environment #5 - YouTube</a>
</p>
</div>
</div>
 <div id="outline-container-orga1e62c3" class="outline-3">
 <h3 id="orga1e62c3"> <a href="#orga1e62c3"> <span class="done DONE">DONE</span> vterm-toggleで初回崩れるのを直す</a></h3>
 <div class="outline-text-3" id="text-orga1e62c3">
 <p>
READMEに書かれている設定を書いたら直った。前もコピペしてたはずなので、修正されたのだろう。
</p>
</div>
</div>
 <div id="outline-container-org4647251" class="outline-3">
 <h3 id="org4647251"> <a href="#org4647251"> <span class="done DONE">DONE</span> hydra設定</a></h3>
 <div class="outline-text-3" id="text-org4647251">
 <p>
すぐ自分で設定したキーバインドを忘れる対策で、hydraを設定した。
</p>
</div>
</div>
 <div id="outline-container-orgc3b7290" class="outline-3">
 <h3 id="orgc3b7290"> <a href="#orgc3b7290"> <span class="done DONE">DONE</span> leaf.elはどうやって動いているか    <span class="tag"> <span class="DontKnow">DontKnow</span></span></a></h3>
 <div class="outline-text-3" id="text-orgc3b7290">
 <ul class="org-ul"> <li> <a href="https://github.com/conao3/leaf.el">conao3/leaf.el: Flexible, declarative, and modern init.el package configuration</a></li>
</ul> <p>
基本の動きは把握した。
</p>

 <p>
キーワードを指定することで、インストール、フック、キーボードバインドまで、パッケージ周りの設定をうまくやってくれる。これはどうやっているのだろうか。
</p>

 <ul class="org-ul"> <li>キーワードをマクロで変換して、処理を実行してるぽい。たとえばpackageキーワードの場合、最終的にpackage.elのpackage-installが呼ばれてインストールする、というように。leaf自体が処理を持っているわけではない</li>
 <li>leaf関数がメイン。各キーワードをapplyして、対応する関数を実行している</li>
 <li>leaf keywordで定義されているキーワードの処理の中身はhandler系</li>
 <li>defmacroが大量に使われている。マクロを理解していないと読めない
 <ul class="org-ul"> <li> <a href="https://www.tohoho-web.com/ex/lisp.html#defmacro">とほほのLISP入門 - とほほのWWW入門</a>でdefmacroをおさらいする</li>
</ul></li>
</ul> <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 31: </span>(* 2 3) というマクロが生成され、実行される</label> <pre class="src src-emacs-lisp">( <span class="org-keyword">defmacro</span>  <span class="org-function-name">double</span> (x) (list '* 2 x))
(double 3)
</pre>
</div>

 <div class="results" id="org1561a98">
 <p>
6
</p>

</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 32: </span>式が生成されたあと、a1が2回インクリメントされる</label> <pre class="src src-emacs-lisp">( <span class="org-keyword">defmacro</span>  <span class="org-function-name">double</span> (x) (list '+ x x))
( <span class="org-keyword">defvar</span>  <span class="org-variable-name">a1</span> 2)
(double (incf a1))
 <span class="org-comment-delimiter">;; </span> <span class="org-comment">(+ (incf a1) (incf a1))</span>
 <span class="org-comment-delimiter">;; </span> <span class="org-comment">(+ 3 4)</span>
</pre>
</div>

 <div class="results" id="org6b7a527">
 <p>
7
</p>

</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 33: </span>マクロの展開形を確認する</label> <pre class="src src-emacs-lisp">( <span class="org-keyword">defmacro</span>  <span class="org-function-name">double</span> (x) (list '+ x x))
( <span class="org-keyword">defvar</span>  <span class="org-variable-name">a1</span> 2)
(macroexpand '(double (incf a1)))
</pre>
</div>

 <div class="results" id="orga2e3bcc">
 <p>
(+ (incf a1) (incf a1))
</p>

</div>

 <p>
バッククォートでマクロを表現。コンマで部分評価する。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 34: </span>↓同じ意味のふたつの書き方</label> <pre class="src src-emacs-lisp">( <span class="org-keyword">defmacro</span>  <span class="org-function-name">add</span>(x y) (list '+ x y))  <span class="org-comment-delimiter">; </span> <span class="org-comment">`を使わないと、若干面倒</span>
( <span class="org-keyword">defmacro</span>  <span class="org-function-name">add</span>(x y) `(+ ,x ,y))  <span class="org-comment-delimiter">;; </span> <span class="org-comment">x, yを評価</span>
(add 1 2)
</pre>
</div>

 <div class="results" id="org585ef9a">
 <p>
3
</p>

</div>

 <p>
リスト展開。
</p>
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 35: </span>シングルクォートの中で@,で、リスト展開する</label> <pre class="src src-emacs-lisp">( <span class="org-keyword">defmacro</span>  <span class="org-function-name">if-do</span> (test  <span class="org-type">&body</span> do-list)
  `( <span class="org-keyword">if</span> ,test ( <span class="org-keyword">progn</span> ,@do-list)))
(if-do (> 5 3) (print  <span class="org-string">"AAA"</span>) (print  <span class="org-string">"BBB"</span>))
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgebfbbee" class="outline-3">
 <h3 id="orgebfbbee"> <a href="#orgebfbbee"> <span class="done DONE">DONE</span> </a> <a href="https://masteringemacs.org/">Mastering Emacs</a></h3>
 <div class="outline-text-3" id="text-orgebfbbee">
 <p>
Emacsの本。
</p>

 <p>
メモ。
</p>

 <ul class="org-ul"> <li>paragraph-start 巨大な正規表現…</li>
 <li>リージョンの選択領域が出るのはtransient markモードを使用しているから。これがデフォルトになる前は記憶していた…</li>
</ul></div>
</div>
 <div id="outline-container-orgcd8cc7a" class="outline-3">
 <h3 id="orgcd8cc7a"> <a href="#orgcd8cc7a"> <span class="done DONE">DONE</span> effortをpolybarに表示する</a></h3>
 <div class="outline-text-3" id="text-orgcd8cc7a">
 <ul class="org-ul"> <li>[0:54/2:00] の時間を表示
 <ul class="org-ul"> <li>目標時間は org-clock-effort</li>
</ul></li>
 <li>effortが設定されてないときは設定してない表示をする</li>
 <li>開始してないときは何も表示しない</li>
</ul></div>
</div>
 <div id="outline-container-org378b7da" class="outline-3">
 <h3 id="org378b7da"> <a href="#org378b7da"> <span class="done DONE">DONE</span> 最後に開いていたworkspaceコマンドを開く関数を追加する</a></h3>
 <div class="outline-text-3" id="text-org378b7da">
 <p>
マルチディスプレイを使うときに不便なので、トグル形式で切り替えられるようにする。
</p>
</div>
</div>
 <div id="outline-container-orgffe318b" class="outline-3">
 <h3 id="orgffe318b"> <a href="#orgffe318b"> <span class="done DONE">DONE</span> 設定をエクスポートして文芸的にする</a></h3>
 <div class="outline-text-3" id="text-orgffe318b">
 <p>
自分だけでなく、他人も理解できるようにする。
</p>
</div>
</div>
 <div id="outline-container-org6e7bd75" class="outline-3">
 <h3 id="org6e7bd75"> <a href="#org6e7bd75"> <span class="done CLOSE">CLOSE</span> vtermでコピーしたときにキルリングに入らない</a></h3>
 <div class="outline-text-3" id="text-org6e7bd75">
 <p>
一度読み取り専用バッファにして、コピーしないといけない。
</p>
</div>
</div>
 <div id="outline-container-org0b65530" class="outline-3">
 <h3 id="org0b65530"> <a href="#org0b65530"> <span class="done DONE">DONE</span> 設定整理</a></h3>
 <div class="outline-text-3" id="text-org0b65530">
 <ul class="org-ul"> <li>使ってないパッケージの整理</li>
 <li>サジェストまわりの設定</li>
</ul></div>
</div>
 <div id="outline-container-org8e93f3c" class="outline-3">
 <h3 id="org8e93f3c"> <a href="#org8e93f3c"> <span class="done DONE">DONE</span> 補完まわりをちゃんとする</a></h3>
 <div class="outline-text-3" id="text-org8e93f3c">
 <p>
うまく設定できていない。
</p>

 <ul class="org-ul"> <li>go-modeで補完が正しく出ない。見当はずれなのが出る</li>
 <li>lisp-modeでは出ている</li>
 <li>eglotを使うようにして、設定をいじって補完が出るようになった</li>
</ul></div>
</div>
</div>
 <div id="outline-container-org044d3be" class="outline-2">
 <h2 id="org044d3be"> <a href="#org044d3be">Backlinks</a></h2>
 <div class="outline-text-2" id="text-org044d3be">
 <ul class="org-ul"> <li> <a href="./20210508233810-org_roam.html">Org-roam</a></li>
 <li> <a href="./20210509095513-ruby.html">Ruby</a></li>
 <li> <a href="./20210509095946-rails.html">Rails</a></li>
 <li> <a href="./20210509122633-emacs_lisp.html">Emacs Lisp</a></li>
 <li> <a href="./20210511013549-textlint.html">TextLint</a></li>
 <li> <a href="./20210512001700-create_link.html">create-link</a></li>
 <li> <a href="./20210703105033-archive.html">Archive</a></li>
 <li> <a href="./20210805005543-docker.html">Docker</a></li>
 <li> <a href="./20210817003906-history.html">History</a></li>
 <li> <a href="./20210817094357-ej_dict.html">ej-dict</a></li>
 <li> <a href="./20210901101339-rust.html">Rust</a></li>
 <li> <a href="./20210901104129-git.html">Git</a></li>
 <li> <a href="./20210904124352-workflow.html">workflow</a></li>
 <li> <a href="./20210905140122-exwm.html">EXWM</a></li>
 <li> <a href="./20210907012153-org_mode.html">org-mode</a></li>
 <li> <a href="./20210911104632-c_language.html">C言語</a></li>
 <li> <a href="./20210911113057-go.html">Go</a></li>
 <li> <a href="./20210911183844-lisp.html">LISP</a></li>
 <li> <a href="./20210912124846-dotfiles.html">dotfiles</a></li>
 <li> <a href="./20210915221421-systemcrafters.html">System Crafters</a></li>
 <li> <a href="./20210922004953-magit_forge.html">magit-forge</a></li>
 <li> <a href="./20210922005248-magit.html">magit</a></li>
 <li> <a href="./20210922005532-projectile.html">projectile</a></li>
 <li> <a href="./20210926100207-wikipedia.html">Wikipedia</a></li>
 <li> <a href="./20210926144137-career.html">career</a></li>
 <li> <a href="./20210926144734-gnu.html">GNU</a></li>
 <li> <a href="./20211002090535-100knocks.html">100knocks</a></li>
 <li> <a href="./20211030122204-graphql.html">GraphQL</a></li>
 <li> <a href="./20211127104120-gemat.html">gemat</a></li>
 <li> <a href="./20211212120517-chore.html">chore</a></li>
 <li> <a href="./20221026T102641--kdoc-1-denoteを使う__essay.html">KDOC 1: denoteを使う</a></li>
 <li> <a href="./20221231T215937--kdoc-15-emacs-caskを読む__project.html">KDOC 15: Emacs Caskを読む</a></li>
 <li> <a href="./20230101T175751--kdoc-16-2022年のまとめ__essay.html">KDOC 16: 2022年のまとめ</a></li>
 <li> <a href="./20230205172738-mermaid.html">Mermaid</a></li>
 <li> <a href="./20240218T162607--kdoc-98-org-roam-node-findでエントリが出なくなったときの直し方__wiki.html">KDOC 98: org-roam-node-findでエントリが出なくなったときの直し方</a></li>
 <li> <a href="./20240224T030106--kdoc-104-やりたいことが多すぎる__essay.html">KDOC 104: やりたいことが多すぎる</a></li>
 <li> <a href="./20240301T235312--kdoc-116-コードへの過大評価__essay.html">KDOC 116: コードへの過大評価</a></li>
 <li> <a href="./20240302T024538--kdoc-118-ハックできる認知範囲を増やす__essay.html">KDOC 118: ハックできる認知範囲を増やす</a></li>
 <li> <a href="./20240430T111500--kdoc-146-org-roam-uiをデプロイした__wiki.html">KDOC 146: org-roam-uiをデプロイした</a></li>
 <li> <a href="./20250501T191528--kdoc-354-ワード移動を可視化するパッケージを作る__project.html">KDOC 354: ワード移動を可視化するパッケージを作る</a></li>
 <li> <a href="./index.html">Insomnia</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20210508234743-emacs.html"/>
  <id>https://kijimad.github.io/roam/20210508234743-emacs.html</id>
  <updated>2025-06-14T00:00:00+09:00</updated>
</entry>
<entry>
  <title>Ruby</title>
  <author><name>root</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org580f597" class="outline-2">
 <h2 id="org580f597"> <a href="#org580f597">概要</a></h2>
 <div class="outline-text-2" id="text-org580f597">
 <p>
Rubyはオブジェクト指向の <a href="20210509101246-programming_language.html#ID-868ac56a-2d42-48d7-ab7f-7047c85a8f39">Programming Language</a>である。
Webフレームワークの <a href="20210509095946-rails.html#ID-e04aa1a3-509c-45b2-ac64-53d69c961214">Rails</a>が有名で、採用されるケースはRailsを使うためが多い。
</p>

 <p>
コンパイル不要なスクリプト言語、動的型付け、WEBに使用される、といった点で <a href="20210725134208-python.html#ID-a6c9c9ad-d9b1-4e13-8992-75d8590e464c">Python</a>と競合している。
</p>
</div>
</div>
 <div id="outline-container-orgf828e01" class="outline-2">
 <h2 id="orgf828e01"> <a href="#orgf828e01">Memo</a></h2>
 <div class="outline-text-2" id="text-orgf828e01">
</div>
 <div id="outline-container-org8c8464b" class="outline-3">
 <h3 id="org8c8464b"> <a href="#org8c8464b">countにブロックを渡す</a></h3>
 <div class="outline-text-3" id="text-org8c8464b">
 <p>
countにブロックを渡して配列の数を調べられる。
↓二行は同じ意味。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby">expect(item_type_pool.types.select { |t| t.category ==  <span class="org-constant">:canon</span> }.length).to be > 10
expect(item_type_pool.types.count { |t| t.category ==  <span class="org-constant">:canon</span> }).to be > 10
</pre>
</div>
</div>
</div>
 <div id="outline-container-org95204b1" class="outline-3">
 <h3 id="org95204b1"> <a href="#org95204b1">継承関係を辿る</a></h3>
 <div class="outline-text-3" id="text-org95204b1">
 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-constant">true</span>.class.ancestors
</pre>
</div>
</div>
</div>
 <div id="outline-container-orga341e75" class="outline-3">
 <h3 id="orga341e75"> <a href="#orga341e75">オブジェクトのメソッド一覧を見る</a></h3>
 <div class="outline-text-3" id="text-orga341e75">
 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-constant">true</span>.public_methods
</pre>
</div>

 <p>
falseを渡すと祖先のメソッドを表示しない。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-constant">true</span>.public_methods( <span class="org-constant">false</span>)
= <span class="org-comment-delimiter"># </span> <span class="org-comment">=> [:===, :^, :inspect, :to_s, :&, :|]</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgd513c8c" class="outline-3">
 <h3 id="orgd513c8c"> <a href="#orgd513c8c">group_by</a></h3>
 <div class="outline-text-3" id="text-orgd513c8c">
 <p>
 <code>Enumerable#group_by</code>
ブロックを評価した結果をキー、対応する要素の配列を値とするハッシュを返す。
</p>

 <p>
QueryMethodの  <code>where</code> で取った値をハッシュにして、後で使いまわせる。N+1問題の回避に使える。QueryMethodぽい名前だが無関係。
</p>
</div>
</div>
 <div id="outline-container-orgdf79ec4" class="outline-3">
 <h3 id="orgdf79ec4"> <a href="#orgdf79ec4">index_by</a></h3>
 <div class="outline-text-3" id="text-orgdf79ec4">
 <p>
viewで何かモデルに関することをループさせないといけないときに役立つ。モデルを一度にハッシュとして取ることで、パフォーマンスを改善できる。
</p>
</div>
</div>
 <div id="outline-container-org4260b7e" class="outline-3">
 <h3 id="org4260b7e"> <a href="#org4260b7e">インスタンスメソッドを調査する</a></h3>
 <div class="outline-text-3" id="text-org4260b7e">
 <p>
 <code>String.instance_methods(false).sort</code>
 <code>false</code> によってクラスの継承メソッドを表示しないため、クラス単体を調べるのに役立つ。
</p>
</div>
</div>
 <div id="outline-container-orge05be96" class="outline-3">
 <h3 id="orge05be96"> <a href="#orge05be96">トップレベルで実行できる理由</a></h3>
 <div class="outline-text-3" id="text-orge05be96">
 <p>
クラスがなくトップレベルで定義されたメソッドのレシーバーは  <code>Object</code> クラス。クラスの中にないトップレベルメソッドでさまざまなことが行えるのは、  <code>Object</code> のおかげ。  <code>ruby -e 'p Kernel.private_instance_methods.sort'</code> でチェックできる。
</p>
 <ul class="org-ul"> <li> <code>puts</code> がレシーバーなしで呼び出せるのは、  <code>Object</code> クラスが  <code>puts</code> のある  <code>Kernel</code> クラスをincludeしているから。</li>
 <li> <code>.to_d</code> - BigDecimalに変換する。</li>
 <li> <code>index</code> - 配列を検索して添字を返す。</li>
</ul></div>
</div>
 <div id="outline-container-org78c3826" class="outline-3">
 <h3 id="org78c3826"> <a href="#org78c3826">何のメソッドがわからないとき</a></h3>
 <div class="outline-text-3" id="text-org78c3826">
 <ul class="org-ul"> <li> <a href="20210508234743-emacs.html#ID-1ad8c3d5-97ba-4905-be11-e6f2626127ad">Emacs</a>だと  <code>robe-doc</code> がとても便利。すでにあるローカルにあるドキュメントを活用するべき。</li>
</ul></div>
</div>
 <div id="outline-container-orgc9c556d" class="outline-3">
 <h3 id="orgc9c556d"> <a href="#orgc9c556d">when句</a></h3>
 <div class="outline-text-3" id="text-orgc9c556d">
 <p>
 <a href="https://stackoverflow.com/questions/3908380/ruby-class-types-and-case-statements/3908411">https://stackoverflow.com/questions/3908380/ruby-class-types-and-case-statements/3908411</a>
</p>

 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-keyword">case</span> item
 <span class="org-keyword">when</span>  <span class="org-type">MyClass</span>
...
 <span class="org-keyword">when</span>  <span class="org-type">Array</span>
...
 <span class="org-keyword">when</span>  <span class="org-type">String</span>
...
</pre>
</div>
 <p>
is really
</p>

 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-keyword">if</span>  <span class="org-type">MyClass</span> === item
...
 <span class="org-keyword">elsif</span>  <span class="org-type">Array</span> === item
...
 <span class="org-keyword">elsif</span>  <span class="org-type">String</span> === item
...
</pre>
</div>

 <p>
 <code>===</code> は内部的に  <code>is_a?</code> を使っている。
</p>

 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-keyword">if</span> item.is_a?( <span class="org-type">MyClass</span>)
...
 <span class="org-keyword">elsif</span> item.is_a?( <span class="org-type">Array</span>)
...
 <span class="org-keyword">elsif</span> item.is_a?( <span class="org-type">String</span>)
...
</pre>
</div>
 <p>
をcaseに書き換えるには一番上の書き方でよい。たぶん。
</p>
</div>
</div>
 <div id="outline-container-org79f286e" class="outline-3">
 <h3 id="org79f286e"> <a href="#org79f286e">singletonをクリーンにテストする</a></h3>
 <div class="outline-text-3" id="text-org79f286e">
 <p>
singletonをそのまま使うと状況依存のテストになるため、毎回newする必要がある。
</p>

 <p>
 <a href="https://stackoverflow.com/questions/1909181/how-to-test-a-singleton-class">https://stackoverflow.com/questions/1909181/how-to-test-a-singleton-class</a>
</p>

 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-keyword">def</span>  <span class="org-keyword">self</span>. <span class="org-function-name">instance</span>
   <span class="org-variable-name">@instance</span> ||= new
 <span class="org-keyword">end</span>

 <span class="org-builtin">private_class_method</span>  <span class="org-constant">:new</span>
</pre>
</div>

 <p>
So you can bypass the memoization altogether by calling the private method new using send
</p>

 <div class="org-src-container">
 <pre class="src src-ruby">let( <span class="org-constant">:instance</span>) {  <span class="org-type">GlobalClass</span>.send( <span class="org-constant">:new</span>) }
</pre>
</div>
 <p>
A nice benefit of this way is that no global state is modified as a result of your tests running.
</p>

 <p>
Probably a better way, from this answer:
</p>

 <div class="org-src-container">
 <pre class="src src-ruby">let( <span class="org-constant">:instance</span>) {  <span class="org-type">Class</span>.new( <span class="org-type">GlobalClass</span>).instance }
</pre>
</div>
</div>
</div>
 <div id="outline-container-org1532baf" class="outline-3">
 <h3 id="org1532baf"> <a href="#org1532baf">評価結果アノテーションを付与するxmpfilter</a></h3>
 <div class="outline-text-3" id="text-org1532baf">
 <p>
便利ツールを集めた  <a href="https://github.com/rcodetools/rcodetools">https://github.com/rcodetools/rcodetools</a> というgemがある。
そのなかにインラインで実行した結果を表示するスクリプトがある。
 <a href="20210508234743-emacs.html#ID-1ad8c3d5-97ba-4905-be11-e6f2626127ad">Emacs</a>用のコードもある。 <a href="https://github.com/rcodetools/rcodetools/blob/master/misc/rcodetools.el">https://github.com/rcodetools/rcodetools/blob/master/misc/rcodetools.el</a> rubykitch氏作成。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby">1.to_s  <span class="org-comment-delimiter"># </span> <span class="org-comment">=> "1"</span>
</pre>
</div>
 <p>
というように、irbのように挿入してくれる。とても便利。
</p>
</div>
</div>
 <div id="outline-container-org2bef755" class="outline-3">
 <h3 id="org2bef755"> <a href="#org2bef755">bundle installの並列数</a></h3>
 <div class="outline-text-3" id="text-org2bef755">
 <p>
 <code>bundle install --jobs 4</code> などとして並列処理数を指定できる。
このマックスの数の調べ方。
</p>

 <p>
 <code>getconf _NPROCESSORS_ONLN</code>
</p>

 <p>
なので、マシンごとで最速の設定で実行するためには。
</p>

 <p>
 <code>bundle install --jobs `getconf _NPROCESSORS_ONLN`</code> とする。
 <a href="https://stackoverflow.com/questions/39163758/bundle-how-many-parallel-jobs">https://stackoverflow.com/questions/39163758/bundle-how-many-parallel-jobs</a>
</p>
</div>
</div>
 <div id="outline-container-org1b2464d" class="outline-3">
 <h3 id="org1b2464d"> <a href="#org1b2464d">transform_values</a></h3>
 <div class="outline-text-3" id="text-org1b2464d">
 <p>
 <code>map { } .to_h</code> はtransform_valuesで書き直せる。
</p>

 <div class="org-src-container">
 <pre class="src src-ruby">h = {  <span class="org-constant">a:</span> 1,  <span class="org-constant">b:</span> 2 }
h.map { |k, v| [k, v.to_s] }.to_h
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-ruby">h = {  <span class="org-constant">a:</span> 1,  <span class="org-constant">b:</span> 2 }
h.transform_values(& <span class="org-constant">:to_s</span>)
</pre>
</div>

 <p>
 <a href="https://github.com/rubocop/rubocop-jp/issues/33">https://github.com/rubocop/rubocop-jp/issues/33</a>
</p>
</div>
</div>
 <div id="outline-container-orga2acf27" class="outline-3">
 <h3 id="orga2acf27"> <a href="#orga2acf27">日付計算でのRational</a></h3>
 <div class="outline-text-3" id="text-orga2acf27">
 <p>
日付計算でDate同士を計算するときがある。
そのとき返ってくる値を表示すると-1/1みたいに表示される。
これはRational(有理数)オブジェクトである。
.to_iで整数に変換できる。
</p>

 <p>
 <a href="https://docs.ruby-lang.org/ja/2.4.0/method/Date/i/=2d.html">Date#- (Ruby 2.4.0 リファレンスマニュアル)</a>
</p>
</div>
</div>
 <div id="outline-container-org3c91a7f" class="outline-3">
 <h3 id="org3c91a7f"> <a href="#org3c91a7f">マッチした部分文字列の配列を返すscan</a></h3>
 <div class="outline-text-3" id="text-org3c91a7f">
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 1: </span>2文字づつ分割</label> <pre class="src src-ruby"> <span class="org-string">"foobar"</span>.scan( <span class="org-string">/../</span>)
</pre>
</div>

 <div class="results" id="org99c5d81">
 <p>
[“fo”, “ob”, “ar”]
</p>

</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 2: </span>数字クラスごとで分割</label> <pre class="src src-ruby"> <span class="org-string">"1 2 3"</span>.scan( <span class="org-string">/\d+/</span>)
</pre>
</div>

 <div class="results" id="org81f37bd">
 <p>
[“1”, “2”, “3”]
</p>

</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 3: </span>セパレータが違っても↑と同じ結果を返す</label> <pre class="src src-ruby"> <span class="org-string">"1, 2, 3"</span>.scan( <span class="org-string">/\d+/</span>)
</pre>
</div>

 <div class="results" id="org3016b5e">
 <p>
[“1”, “2”, “3”]
</p>

</div>
</div>
</div>
 <div id="outline-container-orgfc9c087" class="outline-3">
 <h3 id="orgfc9c087"> <a href="#orgfc9c087">メモリ使用量を調べる</a></h3>
 <div class="outline-text-3" id="text-orgfc9c087">
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 4: </span>すべてのメモリ使用量を調べる</label> <pre class="src src-ruby"> <span class="org-builtin">require</span>  <span class="org-string">'objspace'</span>
 <span class="org-builtin">puts</span>  <span class="org-string">"</span> <span class="org-variable-name">#{ObjectSpace.memsize_of_all / (1000.0 * 1000.0)}</span> <span class="org-string"> MB"</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgab1ec65" class="outline-3">
 <h3 id="orgab1ec65"> <a href="#orgab1ec65">irbでgemを読み込む</a></h3>
 <div class="outline-text-3" id="text-orgab1ec65">
 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-builtin">require</span>  <span class="org-string">'rspec'</span>
 <span class="org-builtin">include</span>  <span class="org-type">RSpec</span>:: <span class="org-type">Matchers</span>

 <span class="org-builtin">include</span>  <span class="org-type">ActionView</span>:: <span class="org-type">Helpers</span>:: <span class="org-type">OutputSafetyHelper</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgc88d948" class="outline-3">
 <h3 id="orgc88d948"> <a href="#orgc88d948">クラスの読み込み順</a></h3>
 <div class="outline-text-3" id="text-orgc88d948">
 <p>
親(抽象)クラスは、子(具体)クラスよりも先に読み込む必要がある。
普通に開発していると1つのファイルに入れることはないので気づきにくい、はまりやすい。
</p>

 <p>
↓はエラーになる。
</p>
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 5: </span>Bが名前解決できずエラー</label> <pre class="src src-ruby"> <span class="org-keyword">class</span>  <span class="org-type">A</span> <  <span class="org-type">B</span>
 <span class="org-keyword">end</span>

 <span class="org-keyword">class</span>  <span class="org-type">B</span>
 <span class="org-keyword">end</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgc8f39f1" class="outline-3">
 <h3 id="orgc8f39f1"> <a href="#orgc8f39f1">親クラスから子クラスの定数にアクセス</a></h3>
 <div class="outline-text-3" id="text-orgc8f39f1">
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 6: </span>具体クラスの定数が入る。子クラスに移譲できる</label> <pre class="src src-ruby"> <span class="org-keyword">class</span>  <span class="org-type">Abstruct</span>
   <span class="org-keyword">def</span>  <span class="org-function-name">print_child_constant</span>
     <span class="org-keyword">self</span>.class:: <span class="org-type">NAME</span>
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>

 <span class="org-keyword">class</span>  <span class="org-type">A</span> <  <span class="org-type">Abstruct</span>
   <span class="org-type">NAME</span> =  <span class="org-string">'AA'</span>
 <span class="org-keyword">end</span>

 <span class="org-keyword">class</span>  <span class="org-type">B</span> <  <span class="org-type">Abstruct</span>
   <span class="org-type">NAME</span> =  <span class="org-string">'BB'</span>
 <span class="org-keyword">end</span>

 <span class="org-builtin">p</span>  <span class="org-type">A</span>.new.print_child_constant  <span class="org-comment-delimiter"># </span> <span class="org-comment">AA</span>
</pre>
</div>

 <p>
 <a href="https://easyramble.com/access-subclass-constant-from-superclass.html">Rubyで親クラスから子クラスの定数を参照 | EasyRamble</a>
</p>
</div>
</div>
 <div id="outline-container-orgbe8385e" class="outline-3">
 <h3 id="orgbe8385e"> <a href="#orgbe8385e">配列をマージ/結合</a></h3>
 <div class="outline-text-3" id="text-orgbe8385e">
 <p>
 <code>merge</code> メソッドはHashクラスのメソッドであり、配列では使えない。
</p>

 <p>
単純な結合。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 7: </span>結合</label> <pre class="src src-ruby">[ <span class="org-string">'a'</span>,  <span class="org-string">'b'</span>] + [ <span class="org-string">'a'</span>,  <span class="org-string">'b'</span>]
</pre>
</div>

 <div class="results" id="org4b51634">
 <p>
[“a”, “b”, “a”, “b”]
</p>

</div>

 <p>
マージ(=かぶってたら削除)。
</p>
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 8: </span>マージ</label> <pre class="src src-ruby">[ <span class="org-string">'a'</span>,  <span class="org-string">'b'</span>] | [ <span class="org-string">'a'</span>,  <span class="org-string">'b'</span>]
</pre>
</div>

 <div class="results" id="orgc2782f0">
 <p>
[“a”, “b”]
</p>

</div>

 <p>
uniqでも同じ。
</p>
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 9: </span>uniq</label> <pre class="src src-ruby">([ <span class="org-string">'a'</span>,  <span class="org-string">'b'</span>] + [ <span class="org-string">'a'</span>,  <span class="org-string">'b'</span>]).uniq
</pre>
</div>

 <div class="results" id="orga9c625d">
 <p>
[“a”, “b”]
</p>

</div>
</div>
</div>
 <div id="outline-container-org0e894c8" class="outline-3">
 <h3 id="org0e894c8"> <a href="#org0e894c8">Struct(構造体クラス)</a></h3>
 <div class="outline-text-3" id="text-org0e894c8">
 <p>
structは簡易的なclassのようなもの。
データをまとめるのに使う。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 10: </span>structで定義する</label> <pre class="src src-ruby">user =  <span class="org-type">Struct</span>.new( <span class="org-constant">:name</span>,  <span class="org-constant">:age</span>)
user.new( <span class="org-string">'taro'</span>, 15)
</pre>
</div>

 <div class="results" id="org9bffbf9">
 <p>
#<struct name=“taro”, age=15>
</p>

</div>

 <p>
 <a href="https://qiita.com/k-penguin-sato/items/54189d5ed4e5f7463266">【Ruby】Struct(構造体クラス)を理解する - Qiita</a>
</p>
</div>
</div>
 <div id="outline-container-org5a7e1ea" class="outline-3">
 <h3 id="org5a7e1ea"> <a href="#org5a7e1ea">thor</a></h3>
 <div class="outline-text-3" id="text-org5a7e1ea">
 <p>
thorはコマンドを作るgem。
同じようなライブラリにrakeがあるが、rakeは引数を渡す方法が特殊なのでthorが好まれる。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-keyword">module</span>  <span class="org-type">Gemat</span>
   <span class="org-keyword">class</span>  <span class="org-type">Cli</span> <  <span class="org-type">Thor</span>
    class_options  <span class="org-constant">input:</span>  <span class="org-constant">:string</span>,  <span class="org-constant">output:</span>  <span class="org-constant">:string</span>,  <span class="org-constant">columns:</span>  <span class="org-constant">:array</span>,  <span class="org-constant">all:</span>  <span class="org-constant">:boolean</span>
     <span class="org-comment-delimiter"># </span> <span class="org-comment">メソッド共通のオプション</span>

    desc  <span class="org-string">'csv'</span>,  <span class="org-string">'csv command description'</span>
     <span class="org-keyword">def</span>  <span class="org-function-name">csv</span>
     <span class="org-keyword">end</span>

    desc md,  <span class="org-string">'md command description'</span>
     <span class="org-keyword">def</span>  <span class="org-function-name">md</span>
     <span class="org-keyword">end</span>

    no_tasks  <span class="org-keyword">do</span>
       <span class="org-keyword">def</span>  <span class="org-function-name">command</span>(options, method_name)
       <span class="org-keyword">end</span>
     <span class="org-keyword">end</span>
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-shell">$ gemat csv
</pre>
</div>
</div>
</div>
 <div id="outline-container-org0491c0e" class="outline-3">
 <h3 id="org0491c0e"> <a href="#org0491c0e">pp</a></h3>
 <div class="outline-text-3" id="text-org0491c0e">
 <p>
Hashが見づらいときは、  <code>pp</code> を使うと綺麗に表示できる。
 <a href="https://docs.ruby-lang.org/ja/latest/library/pp.html">https://docs.ruby-lang.org/ja/latest/library/pp.html</a>
</p>
</div>
</div>
 <div id="outline-container-orgbd33700" class="outline-3">
 <h3 id="orgbd33700"> <a href="#orgbd33700">map</a></h3>
 <div class="outline-text-3" id="text-orgbd33700">
 <p>
mapの返り値は、ブロックの最後の値である。
だから↓みたく途中でセットしたい、というときは最後配列に入れたいものを置く必要がある。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby">options[ <span class="org-constant">:columns</span>].map  <span class="org-keyword">do</span> |column|
  od =  <span class="org-type">OutDsl</span>.new(column)
  od.idx = index
  od  <span class="org-comment-delimiter"># </span> <span class="org-comment">ここ</span>
 <span class="org-keyword">end</span>
</pre>
</div>
 <p>
mapは1行で書くこと多いので忘れがち。
</p>
</div>
</div>
 <div id="outline-container-orga8b25a3" class="outline-3">
 <h3 id="orga8b25a3"> <a href="#orga8b25a3">rubygemsのcredential入手</a></h3>
 <div class="outline-text-3" id="text-orga8b25a3">
 <p>
 <a href="https://rubygems.org/">https://rubygems.org/</a> であらかじめログインしておく。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby">curl -u {user名} https <span class="org-constant">:/</span>/rubygems.org/api/v1/api_key.yaml > ~ <span class="org-string">/.gem/</span>credentials; chmod 0600 ~ <span class="org-string">/.gem/</span>credentials
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-shell">rake release
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgbd52583" class="outline-3">
 <h3 id="orgbd52583"> <a href="#orgbd52583">presense</a></h3>
 <div class="outline-text-3" id="text-orgbd52583">
 <p>
 <code>present?</code> の結果がtrueのときレシーバ自身を返す。falseのときはnilを返す。
</p>

 <div class="org-src-container">
 <pre class="src src-ruby">object.present? ? object :  <span class="org-constant">nil</span>
object.presense
</pre>
</div>

 <p>
これらは等価である。
</p>

 <ul class="org-ul"> <li> <a href="https://apidock.com/rails/Object/presence">https://apidock.com/rails/Object/presence</a></li>
</ul></div>
</div>
 <div id="outline-container-org1d0db28" class="outline-3">
 <h3 id="org1d0db28"> <a href="#org1d0db28">tap</a></h3>
 <div class="outline-text-3" id="text-org1d0db28">
 <p>
処理に関わらずselfを返す。
メソッドチェーンへのデバッグに便利。
</p>

 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-builtin">p</span> ( 1 .. 5 )
.tap{|obj|  <span class="org-builtin">puts</span> obj.class}
.to_a.tap{|obj|  <span class="org-builtin">puts</span> obj.class}
</pre>
</div>

 <div class="results" id="org9d44449">
 <p>
Range
Array
[1, 2, 3, 4, 5]
</p>

</div>

 <p>
メソッドチェーンの途中で分岐として使えそう。
</p>
</div>
</div>
 <div id="outline-container-orgab83942" class="outline-3">
 <h3 id="orgab83942"> <a href="#orgab83942">min_by</a></h3>
 <div class="outline-text-3" id="text-orgab83942">
 <p>
配列から最大/最小の値を取りたいというとき、min_byが便利。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby">[5, -8, 3, 9].min_by{|num| num.abs }
</pre>
</div>

 <pre class="example">
3
</pre>


 <p>
order → first と冗長に書いてしまいがち。
</p>
</div>
</div>
 <div id="outline-container-org9c70428" class="outline-3">
 <h3 id="org9c70428"> <a href="#org9c70428">&: 記法</a></h3>
 <div class="outline-text-3" id="text-org9c70428">
 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-string">%w{ a b c }</span>.map(& <span class="org-constant">:capitalize</span>)
</pre>
</div>
 <ul class="org-ul"> <li>& ->  <code>to_proc</code> trigger</li>
 <li>: -> symbol</li>
</ul></div>
</div>
 <div id="outline-container-org7dabc51" class="outline-3">
 <h3 id="org7dabc51"> <a href="#org7dabc51">ファイルを作らずにファイルオブジェクトを作ってテストする</a></h3>
 <div class="outline-text-3" id="text-org7dabc51">
 <p>
ファイル入力のあるプログラムがあるとする。
テストするとき、普通はファイルを作って読み込むことになる。
しかしいちいちファイルを用意するほどではない、みたいな場合もある。
そのときは  <code>StringIO</code> を使うと気軽に試せる。
</p>

 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-builtin">require</span>  <span class="org-string">'stringio'</span>
string =  <span class="org-string"><<EOM</span>
 <span class="org-string">  aaa</span>
 <span class="org-string">  "aaa"</span>
 <span class="org-string">EOM</span>

file1 =  <span class="org-type">StringIO</span>.new(string)
file.read  <span class="org-comment-delimiter"># </span> <span class="org-comment">=> aaa\n"aaa"</span>
file2 =  <span class="org-type">StringIO</span>.new( <span class="org-string">''</span>)
file.read  <span class="org-comment-delimiter"># </span> <span class="org-comment">=> ""</span>
</pre>
</div>
 <p>
としておいて、あとは普通のFIleオブジェクトにするように、  <code>StringIO</code> オブジェクトに対して各種操作ができる。
</p>
</div>
</div>
</div>
 <div id="outline-container-org591e2dc" class="outline-2">
 <h2 id="org591e2dc"> <a href="#org591e2dc">Mastering Ruby Closure</a></h2>
 <div class="outline-text-2" id="text-org591e2dc">
 <p>
DEADLINE:  <span class="timestamp-wrapper"> <span class="timestamp"><2021-11-21 日></span></span>
</p>
 <ul class="org-ul"> <li>10, 15, 20, 36, 38, 55, 57, 61, 68</li>
</ul></div>
 <div id="outline-container-org5cbe237" class="outline-3">
 <h3 id="org5cbe237"> <a href="#org5cbe237">定義</a></h3>
 <div class="outline-text-3" id="text-org5cbe237">
 <ul class="org-ul"> <li>関数を必要とする</li>
 <li>親スコープで定義される変数を参照する</li>
</ul></div>
</div>
 <div id="outline-container-org3314b56" class="outline-3">
 <h3 id="org3314b56"> <a href="#org3314b56">レキシカルバインディング</a></h3>
 <div class="outline-text-3" id="text-org3314b56">
 <div class="org-src-container">
 <pre class="src src-ruby">msg =  <span class="org-string">"aaa"</span>
3.times  <span class="org-keyword">do</span>
  prefix =  <span class="org-string">"I"</span>
   <span class="org-builtin">puts</span>  <span class="org-string">"</span> <span class="org-variable-name">#{prefix}</span> <span class="org-string"> </span> <span class="org-variable-name">#{msg}</span> <span class="org-string">"</span>
 <span class="org-keyword">end</span>
</pre>
</div>

 <div class="results" id="orgc25a8cd">
 <p>
I aaa
I aaa
I aaa
</p>

</div>

 <p>
ブロックの内側から外側にはアクセスできる。
</p>

 <div class="org-src-container">
 <pre class="src src-ruby">msg =  <span class="org-string">"aaa"</span>
3.times  <span class="org-keyword">do</span>
  prefix =  <span class="org-string">"I"</span>
   <span class="org-builtin">puts</span>  <span class="org-string">"</span> <span class="org-variable-name">#{prefix}</span> <span class="org-string"> </span> <span class="org-variable-name">#{msg}</span> <span class="org-string">"</span>
 <span class="org-keyword">end</span>
prefix
</pre>
</div>

 <p>
ブロックの外側から内側にアクセスできない。
</p>
</div>
</div>
 <div id="outline-container-orgc2dbf17" class="outline-3">
 <h3 id="orgc2dbf17"> <a href="#orgc2dbf17">自由変数</a></h3>
 <div class="outline-text-3" id="text-orgc2dbf17">
 <div class="org-src-container">
 <pre class="src src-ruby">chalkboard_gag =  <span class="org-builtin">lambda</span>  <span class="org-keyword">do</span> |msg|
   <span class="org-builtin">lambda</span>  <span class="org-keyword">do</span>
    prefix =  <span class="org-string">"I will not"</span>
     <span class="org-string">"</span> <span class="org-variable-name">#{prefix}</span> <span class="org-string"> </span> <span class="org-variable-name">#{msg}</span> <span class="org-string">"</span>
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>
chalkboard_gag
inner_lambda = chalkboard_gag.call( <span class="org-string">"drive the car"</span>)
inner_lambda.call
</pre>
</div>

 <div class="results" id="org169d775">
 <p>
I will not drive the car
</p>

</div>
</div>
</div>
 <div id="outline-container-orgf02fb7c" class="outline-3">
 <h3 id="orgf02fb7c"> <a href="#orgf02fb7c">例) カウンター</a></h3>
 <div class="outline-text-3" id="text-orgf02fb7c">
 <p>
2つ目のlambdaから見ると、  <code>x</code> は注入されてるので自由変数。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby">counter =  <span class="org-builtin">lambda</span>  <span class="org-keyword">do</span>
  x = 0
  get_x =  <span class="org-builtin">lambda</span> {  <span class="org-builtin">p</span> x }  <span class="org-comment-delimiter"># </span> <span class="org-comment">x is free variable</span>
  incr =  <span class="org-builtin">lambda</span> {  <span class="org-builtin">p</span> x += 1 }
  decr =  <span class="org-builtin">lambda</span> {  <span class="org-builtin">p</span> x -= 1 }

  { <span class="org-constant">get_x:</span> get_x,  <span class="org-constant">incr:</span> incr,  <span class="org-constant">decr:</span> decr}
 <span class="org-keyword">end</span>
c1 = counter.call
c1[ <span class="org-constant">:incr</span>].call
c1[ <span class="org-constant">:incr</span>].call
c1[ <span class="org-constant">:incr</span>].call
c1[ <span class="org-constant">:get_x</span>].call
c1[ <span class="org-constant">:decr</span>].call
c1[ <span class="org-constant">:decr</span>].call

c2 = counter.call
c2[ <span class="org-constant">:get_x</span>].call
</pre>
</div>

 <div class="results" id="orgf242d1d">
 <p>
1
2
3
3
2
1
0
</p>

</div>
</div>
</div>
 <div id="outline-container-org22d1cf5" class="outline-3">
 <h3 id="org22d1cf5"> <a href="#org22d1cf5">コールバック関数</a></h3>
 <div class="outline-text-3" id="text-org22d1cf5">
 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-keyword">class</span>  <span class="org-type">Generator</span>
   <span class="org-builtin">attr_reader</span>  <span class="org-constant">:report</span>

   <span class="org-keyword">def</span>  <span class="org-function-name">initialize</span>(report)
     <span class="org-variable-name">@report</span> = report
   <span class="org-keyword">end</span>

   <span class="org-keyword">def</span>  <span class="org-function-name">run</span>
    report.to_csv
   <span class="org-keyword">end</span>

 <span class="org-type">Notifier</span>.new( <span class="org-type">Generator</span>.new(good_report),
              <span class="org-constant">on_success:</span>  <span class="org-builtin">lambda</span> { |r|  <span class="org-builtin">puts</span>  <span class="org-string">"Send </span> <span class="org-variable-name">#{r}</span> <span class="org-string"> to boss"</span> },
              <span class="org-constant">on_failure:</span>  <span class="org-builtin">lambda</span> {  <span class="org-builtin">puts</span>  <span class="org-string">"Send to ben"</span> }
            ).tap  <span class="org-keyword">do</span> |n|
  n.run
 <span class="org-keyword">end</span>
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-ruby">is_even =  <span class="org-builtin">lambda</span> { |x| x % 2 == 0 }
is_even.call(3)
</pre>
</div>

 <div class="results" id="org9e1b690">
 <p>
false
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-ruby">is_even =  <span class="org-builtin">lambda</span> { |x| x % 2 == 0 }
 <span class="org-keyword">def</span>  <span class="org-function-name">complement</span>(predicate, value)
   <span class="org-keyword">not</span> predicate.call(value)
 <span class="org-keyword">end</span>
complement(is_even, 3)
</pre>
</div>

 <div class="results" id="orgbecf537">
 <p>
true
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-ruby">is_even =  <span class="org-builtin">lambda</span> { |x| x % 2 == 0 }
 <span class="org-keyword">def</span>  <span class="org-function-name">complement</span>(predicate)
   <span class="org-builtin">lambda</span>  <span class="org-keyword">do</span> |value|
     <span class="org-keyword">not</span> predicate.call(value)
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>
complement(is_even).call(4)
complement(is_even).call(5)
</pre>
</div>

 <div class="results" id="orgb4e4e4a">
 <p>
true
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-keyword">class</span>  <span class="org-type">Generator</span>
   <span class="org-builtin">attr_reader</span>  <span class="org-constant">:report</span>

   <span class="org-keyword">def</span>  <span class="org-function-name">initialize</span>(report)
     <span class="org-variable-name">@report</span> = report
   <span class="org-keyword">end</span>

   <span class="org-keyword">def</span>  <span class="org-function-name">run</span>
    report.to_csv
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>

 <span class="org-keyword">class</span>  <span class="org-type">Notifier</span>
   <span class="org-builtin">attr_reader</span>  <span class="org-constant">:generator</span>,  <span class="org-constant">:callbacks</span>

   <span class="org-keyword">def</span>  <span class="org-function-name">initialize</span>(generator, callbacks)
     <span class="org-variable-name">@generator</span> = generator
     <span class="org-variable-name">@callbacks</span> = callbacks
   <span class="org-keyword">end</span>

   <span class="org-keyword">def</span>  <span class="org-function-name">run</span>
    result = generator.run
     <span class="org-keyword">if</span> result
      callbacks.fetch( <span class="org-constant">:on_success</span>).call(result)
     <span class="org-keyword">else</span>
      callbacks.fetch( <span class="org-constant">:on_failure</span>).call
     <span class="org-keyword">end</span>
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>

good_report =  <span class="org-type">OpenStruct</span>.new( <span class="org-constant">to_csv:</span>  <span class="org-string">"59.99, Great Success"</span>)

 <span class="org-type">Notifier</span>.new( <span class="org-type">Generator</span>.new(good_report),
              <span class="org-constant">on_success:</span>  <span class="org-builtin">lambda</span> { |r|  <span class="org-builtin">puts</span>  <span class="org-string">"Send </span> <span class="org-variable-name">#{r}</span> <span class="org-string"> to boss"</span> },
              <span class="org-constant">on_failure:</span>  <span class="org-builtin">lambda</span> {  <span class="org-builtin">puts</span>  <span class="org-string">"Send email to ben"</span> }
            ).tap  <span class="org-keyword">do</span> |n|
  n.run  <span class="org-comment-delimiter">#</span> <span class="org-comment">=> send 59.99, great succes to boss</span>
 <span class="org-keyword">end</span>
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-ruby">good_report =  <span class="org-type">OpenStruct</span>.new( <span class="org-constant">to_csv:</span>  <span class="org-constant">nil</span>)

 <span class="org-type">Notifier</span>.new( <span class="org-type">Generator</span>.new(good_report),
              <span class="org-constant">on_success:</span>  <span class="org-builtin">lambda</span> { |r|  <span class="org-builtin">puts</span>  <span class="org-string">"Send </span> <span class="org-variable-name">#{r}</span> <span class="org-string"> to boss"</span> },
              <span class="org-constant">on_failure:</span>  <span class="org-builtin">lambda</span> {  <span class="org-builtin">puts</span>  <span class="org-string">"Send email to ben"</span> }
            ).tap  <span class="org-keyword">do</span> |n|
  n.run  <span class="org-comment-delimiter">#</span> <span class="org-comment">=> ben</span>
 <span class="org-keyword">end</span>
</pre>
</div>
 <p>
元のNotifierクラスに手を加えることなく、ログ機能を追加できた。
</p>
</div>
</div>
 <div id="outline-container-orgf4b6386" class="outline-3">
 <h3 id="orgf4b6386"> <a href="#orgf4b6386">reduce</a></h3>
 <div class="outline-text-3" id="text-orgf4b6386">
 <p>
既存のreduceの例。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby">[1, 2, 3, 4, 5].reduce(10) { |acc, x|  <span class="org-builtin">p</span>  <span class="org-string">"</span> <span class="org-variable-name">#{acc}</span> <span class="org-string">, </span> <span class="org-variable-name">#{x}</span> <span class="org-string">"</span>; acc + x }
</pre>
</div>

 <div class="results" id="org7516f5d">
 <p>
25
</p>

</div>

 <p>
eachを使わずに実装。再帰になる。
</p>

 <div class="org-src-container">
 <pre class="src src-ruby">adder =  <span class="org-builtin">lambda</span>  <span class="org-keyword">do</span> |acc, arr|
   <span class="org-keyword">if</span> arr.empty?
    acc
   <span class="org-keyword">else</span>
    adder.call(acc + arr.first, arr.drop(1))
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>
adder.call(10, [1, 2, 3, 4, 5])
</pre>
</div>

 <div class="results" id="org6ec8856">
 <p>
25
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-ruby">multiplier =  <span class="org-builtin">lambda</span>  <span class="org-keyword">do</span> |acc, arr|
   <span class="org-keyword">if</span> arr.empty?
    acc
   <span class="org-keyword">else</span>
    multiplier.call(acc * arr.first, arr.drop(1))
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>
multiplier.call(10, [1, 2, 3, 4, 5])
</pre>
</div>

 <div class="results" id="org395a996">
 <p>
1200
</p>

</div>

 <p>
変わったのは演算子だけで、DRYでない。
抽象化する。
</p>

 <div class="org-src-container">
 <pre class="src src-ruby">reducer =  <span class="org-builtin">lambda</span>  <span class="org-keyword">do</span> |acc, arr, binary_function|
   <span class="org-keyword">if</span> arr.empty?
    acc
   <span class="org-keyword">else</span>
    reducer.call(binary_function.call(acc, arr.first), arr.drop(1), binary_function)
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>
reducer.call(1, [1, 2, 3, 4, 5],  <span class="org-builtin">lambda</span> { |x, y| x + y })
</pre>
</div>

 <div class="results" id="orgada4c73">
 <p>
16
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-ruby">reducer =  <span class="org-builtin">lambda</span>  <span class="org-keyword">do</span> |acc, arr, binary_function|
  reducer_aux =  <span class="org-builtin">lambda</span>  <span class="org-keyword">do</span> |acc, arr|
     <span class="org-keyword">if</span> arr.empty?
      acc
     <span class="org-keyword">else</span>
      reducer_aux.call(binary_function.call(acc, arr.first), arr.drop(1))
     <span class="org-keyword">end</span>
   <span class="org-keyword">end</span>

  reducer_aux.call(acc, arr)
 <span class="org-keyword">end</span>

reducer.call(1, [1, 2, 3, 4, 5],  <span class="org-builtin">lambda</span> { |x, y| x + y })
</pre>
</div>

 <div class="results" id="org6281c96">
 <p>
16
</p>

</div>
</div>
</div>
 <div id="outline-container-org0dfcde8" class="outline-3">
 <h3 id="org0dfcde8"> <a href="#org0dfcde8">ex1</a></h3>
 <div class="outline-text-3" id="text-org0dfcde8">
 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-keyword">def</span>  <span class="org-function-name">is_larger_than</span>(amount)
   <span class="org-builtin">lambda</span>  <span class="org-keyword">do</span> |a|
    a > amount  <span class="org-comment-delimiter"># </span> <span class="org-comment">amount is free variable</span>
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>

larger_than_5 = is_larger_than(5)
larger_than_5.call(7)
larger_than_5.call(3)
</pre>
</div>

 <div class="results" id="orgb1b869c">
 <p>
false
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-ruby">new_db =  <span class="org-builtin">lambda</span>  <span class="org-keyword">do</span>
  db = {}
  insert =  <span class="org-builtin">lambda</span>  <span class="org-keyword">do</span> |key, value|
     <span class="org-builtin">p</span> db.store(key, value)
   <span class="org-keyword">end</span>
  dump =  <span class="org-builtin">lambda</span> {  <span class="org-builtin">p</span> db }
  delete =  <span class="org-builtin">lambda</span>  <span class="org-keyword">do</span> |key|
     <span class="org-builtin">p</span> db.delete(key)
   <span class="org-keyword">end</span>
  { <span class="org-constant">insert:</span> insert,  <span class="org-constant">dump:</span> dump,  <span class="org-constant">delete:</span> delete}
 <span class="org-keyword">end</span>
db = new_db.call
db[ <span class="org-constant">:insert</span>].call( <span class="org-string">"this is key"</span>,  <span class="org-string">"this is value"</span>)
db[ <span class="org-constant">:dump</span>].call
db[ <span class="org-constant">:delete</span>].call( <span class="org-string">"this is key"</span>)
db[ <span class="org-constant">:dump</span>].call
</pre>
</div>

 <div class="results" id="orgf05edbe">
 <p>
“this is value”
{“this is key”=>“this is value”}
“this is value”
{}
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-ruby">complement =  <span class="org-builtin">lambda</span>  <span class="org-keyword">do</span> |function|
   <span class="org-builtin">lambda</span>  <span class="org-keyword">do</span> |arg|
     <span class="org-keyword">not</span> function.call(arg)
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>

is_even =  <span class="org-builtin">lambda</span> { |x| x % 2 == 0 }
complement.call(is_even).call(5)
</pre>
</div>

 <div class="results" id="orgfdb2b9b">
 <p>
true
</p>

</div>

 <p>
この部分遅延させる感じが本質か。
</p>

 <p>
畳み込み演算の配列バージョン。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby">[1, 2, 3, 4, 5].reduce( <span class="org-type">Array</span>.new()) { |result, item| result << item * 2 }
</pre>
</div>

 <div class="results" id="org8233ced">
 <p>
[2, 4, 6, 8, 10]
</p>

</div>
</div>
</div>
 <div id="outline-container-org619e7cd" class="outline-3">
 <h3 id="org619e7cd"> <a href="#org619e7cd">ブロック</a></h3>
 <div class="outline-text-3" id="text-org619e7cd">
 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-keyword">def</span>  <span class="org-function-name">do_it</span>
   <span class="org-keyword">yield</span>
 <span class="org-keyword">end</span>
do_it { <span class="org-string">"I'm doing it."</span>}
</pre>
</div>

 <div class="results" id="org2fcf236">
 <p>
I’m doing it.
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-keyword">def</span>  <span class="org-function-name">do_it</span>
   <span class="org-keyword">yield</span>
 <span class="org-keyword">end</span>
do_it { [1, 2, 3] << 4}
</pre>
</div>

 <div class="results" id="org3f2884e">
 <p>
[1, 2, 3, 4]
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-keyword">def</span>  <span class="org-function-name">do_it</span>(x, y)
   <span class="org-keyword">yield</span>(x, y)
 <span class="org-keyword">end</span>
do_it(2, 3) { |x, y| x + y }
do_it( <span class="org-string">"Ohai"</span>,  <span class="org-string">"Dictator"</span>)  <span class="org-keyword">do</span> |greeting, title|
     <span class="org-string">"</span> <span class="org-variable-name">#{greeting}</span> <span class="org-string">, </span> <span class="org-variable-name">#{title}</span> <span class="org-string">!!!"</span>
 <span class="org-keyword">end</span>
</pre>
</div>

 <div class="results" id="orgc1a6687">
 <p>
Ohai, Dictator!!!
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-keyword">def</span>  <span class="org-function-name">do_it</span>(x)
   <span class="org-keyword">yield</span> x
 <span class="org-keyword">end</span>
do_it(42) { |num, line|  <span class="org-string">"</span> <span class="org-variable-name">#{num}</span> <span class="org-string">: </span> <span class="org-variable-name">#{line}</span> <span class="org-string">"</span> }
</pre>
</div>

 <div class="results" id="orge6b72a4">
 <p>
42:
</p>

</div>

 <p>
ブロックは無名関数に似ている。名前がかぶると外側にあっても上書きする。
</p>

 <div class="org-src-container">
 <pre class="src src-ruby">x =  <span class="org-string">"outside x"</span>
1.times { x =  <span class="org-string">"modified from the outside block"</span> }
x
</pre>
</div>

 <div class="results" id="org03db6a3">
 <p>
modified from the outside block
</p>

</div>

 <p>
ブロック変数を使うとブロック外を上書きしない。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby">x =  <span class="org-string">"outside x"</span>
1.times { |;x| x =  <span class="org-string">"modified from the outside block"</span> }
x
</pre>
</div>

 <div class="results" id="orgc36826c">
 <p>
outside x
</p>

</div>
</div>
</div>
 <div id="outline-container-orgeb90bf5" class="outline-3">
 <h3 id="orgeb90bf5"> <a href="#orgeb90bf5">Fixnum#times</a></h3>
 <div class="outline-text-3" id="text-orgeb90bf5">
 <p>
↓みたいなことができるのはどうしてか。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby">3.times {  <span class="org-builtin">puts</span>  <span class="org-string">"D'oh!"</span> }
</pre>
</div>

 <div class="results" id="orgf30f6fc">
 <p>
D’oh!
D’oh!
D’oh!
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-keyword">class</span>  <span class="org-type">Fixnum</span>
   <span class="org-keyword">def</span>  <span class="org-function-name">times</span>
     <span class="org-builtin">puts</span>  <span class="org-string">"This does nothing yet!"</span>
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>
3.times {  <span class="org-builtin">puts</span>  <span class="org-string">"D'oh!"</span> }
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-keyword">class</span>  <span class="org-type">Array</span>
   <span class="org-keyword">def</span>  <span class="org-function-name">each</span>
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>
 <span class="org-string">%w(look ma no for loops)</span>.each  <span class="org-keyword">do</span> |x|
   <span class="org-builtin">puts</span> x
 <span class="org-keyword">end</span>
</pre>
</div>

 <p>
eachを作ってみる。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-keyword">class</span>  <span class="org-type">Array</span>
   <span class="org-keyword">def</span>  <span class="org-function-name">each</span>
    x = 0
     <span class="org-keyword">while</span> x <  <span class="org-keyword">self</span>.length
       <span class="org-keyword">yield</span>  <span class="org-keyword">self</span>[x]
      x += 1
     <span class="org-keyword">end</span>
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>

 <span class="org-string">%w(look me no for loops)</span>.each  <span class="org-keyword">do</span> |x|
   <span class="org-builtin">puts</span> x
 <span class="org-keyword">end</span>

 <span class="org-comment-delimiter"># </span> <span class="org-comment">look</span>
 <span class="org-comment-delimiter"># </span> <span class="org-comment">me</span>
 <span class="org-comment-delimiter"># </span> <span class="org-comment">no</span>
 <span class="org-comment-delimiter"># </span> <span class="org-comment">for</span>
 <span class="org-comment-delimiter"># </span> <span class="org-comment">loops</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-org18df715" class="outline-3">
 <h3 id="org18df715"> <a href="#org18df715">IO close利用</a></h3>
 <div class="outline-text-3" id="text-org18df715">
 <p>
ブロックはファイルクローズのし忘れ防止にも使える。これはどうやって実装しているか。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-type">File</span>.open()  <span class="org-keyword">do</span> |f|
  f <<  <span class="org-string">"aaa"</span>
 <span class="org-keyword">end</span>
</pre>
</div>

 <p>
実装してみる。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-keyword">class</span>  <span class="org-type">File</span>
   <span class="org-keyword">def</span>  <span class="org-keyword">self</span>. <span class="org-function-name">open</span>(name, mode)
    file = new(name, mode)
     <span class="org-keyword">return</span> file  <span class="org-keyword">unless</span>  <span class="org-builtin">block_given?</span>
     <span class="org-keyword">yield</span>(file)
   <span class="org-keyword">ensure</span>
    file.close
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-org9296dca" class="outline-3">
 <h3 id="org9296dca"> <a href="#org9296dca">オブジェクトの初期化</a></h3>
 <div class="outline-text-3" id="text-org9296dca">
 <p>
ブロックはオブジェクトの初期化にも使える。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-keyword">module</span>  <span class="org-type">Twitter</span>
   <span class="org-keyword">module</span>  <span class="org-type">REST</span>
     <span class="org-keyword">class</span>  <span class="org-type">Client</span>
       <span class="org-builtin">attr_accessor</span>  <span class="org-constant">:consumer_key</span>,  <span class="org-constant">:consumer_secret</span>,
                     <span class="org-constant">:access_token</span>,  <span class="org-constant">:access_token_secret</span>
       <span class="org-keyword">def</span>  <span class="org-function-name">initialize</span>
         <span class="org-keyword">yield</span>  <span class="org-keyword">self</span>  <span class="org-keyword">if</span>  <span class="org-builtin">block_given?</span>
       <span class="org-keyword">end</span>
     <span class="org-keyword">end</span>
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>

client =  <span class="org-type">Twitter</span>:: <span class="org-type">REST</span>:: <span class="org-type">Client</span>.new  <span class="org-keyword">do</span> |config|
  config.consumer_key        =  <span class="org-string">"YOUR_CONSUMER_KEY"</span>
  config.consumer_secret     =  <span class="org-string">"YOUR_CONSUMER_SECRET"</span>
  config.access_token        =  <span class="org-string">"YOUR_ACCESS_TOKEN"</span>
  config.access_token_secret =  <span class="org-string">"YOUR_ACCESS_SECRET"</span>
 <span class="org-keyword">end</span>

 <span class="org-comment-delimiter">#</span> <span class="org-comment"><Twitter::REST::Client:0x000056204ff8f410 @consumer_key="YOUR_CONSUMER_KEY", @consumer_secret="YOUR_CONSUMER_SECRET", @access_token="YOUR_ACCESS_TOKEN", @access_token_secret="YOUR_ACCESS_SECRET"></span>
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-keyword">class</span>  <span class="org-type">Router</span>
   <span class="org-keyword">def</span>  <span class="org-function-name">initialize</span>
     <span class="org-keyword">yield</span>  <span class="org-keyword">self</span>
   <span class="org-keyword">end</span>

   <span class="org-keyword">def</span>  <span class="org-function-name">match</span>(route)
     <span class="org-builtin">puts</span> route
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>

routes =  <span class="org-type">Router</span>.new  <span class="org-keyword">do</span> |r|
  r.match  <span class="org-string">'/about'</span> =>  <span class="org-string">'home#about'</span>
  r.match  <span class="org-string">'/users'</span> =>  <span class="org-string">'users#index'</span>
 <span class="org-keyword">end</span>
</pre>
</div>

 <p>
 <a href="20210509095946-rails.html#ID-e04aa1a3-509c-45b2-ac64-53d69c961214">Rails</a>のrouterでやっているように、ここからどうやってレシーバーの  <code>r</code> を使わずに指定できるのか。
</p>

 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-keyword">def</span>  <span class="org-function-name">foo</span>
   <span class="org-keyword">yield</span>  <span class="org-keyword">self</span>
 <span class="org-keyword">end</span>

foo  <span class="org-keyword">do</span>
   <span class="org-builtin">puts</span>  <span class="org-keyword">self</span>
 <span class="org-keyword">end</span>
 <span class="org-comment-delimiter"># </span> <span class="org-comment">=> main</span>
</pre>
</div>

 <p>
ブロック内のselfはブロックが定義されたところのselfになる。ということで、selfを変えたければブロックが定義されるコンテキストを変えなければならない。
</p>

 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-keyword">class</span>  <span class="org-type">Router</span>
   <span class="org-keyword">def</span>  <span class="org-function-name">initialize</span>(&block)
    instance_eval &block
   <span class="org-keyword">end</span>

   <span class="org-keyword">def</span>  <span class="org-function-name">match</span>(route)
     <span class="org-builtin">puts</span> route
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>

routes =  <span class="org-type">Router</span>.new  <span class="org-keyword">do</span>
  match  <span class="org-string">'/about'</span> =>  <span class="org-string">'home#about'</span>
 <span class="org-keyword">end</span>
</pre>
</div>
 <p>
Routerコンテキストになるので、デフォルトレシーバーでmatchが呼べる。
</p>

 <p>
オプションをハッシュで受け取る。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-keyword">module</span>  <span class="org-type">Twitter</span>
   <span class="org-keyword">module</span>  <span class="org-type">REST</span>
     <span class="org-keyword">class</span>  <span class="org-type">Client</span>
       <span class="org-builtin">attr_accessor</span>  <span class="org-constant">:consumer_key</span>,  <span class="org-constant">:consumer_secret</span>,
                     <span class="org-constant">:access_token</span>,  <span class="org-constant">:access_token_secret</span>

       <span class="org-keyword">def</span>  <span class="org-function-name">initialize</span>(options = {}, &block)
        options.each { |k, v| send( <span class="org-string">"</span> <span class="org-variable-name">#{k}</span> <span class="org-string">="</span>, v) }
        instance_eval(&block)  <span class="org-keyword">if</span>  <span class="org-builtin">block_given?</span>
       <span class="org-keyword">end</span>
     <span class="org-keyword">end</span>
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>

client =  <span class="org-type">Twitter</span>:: <span class="org-type">REST</span>:: <span class="org-type">Client</span>.new({ <span class="org-constant">consumer_key:</span>  <span class="org-string">"YOUR_CONSUMER_KEY"</span>})  <span class="org-keyword">do</span>
  consumer_secret     =  <span class="org-string">"YOUR_CONSUMER_SECRET"</span>
  access_token        =  <span class="org-string">"YOUR_ACCESS_TOKEN"</span>
  access_token_secret =  <span class="org-string">"YOUR_ACCESS_SECRET"</span>
 <span class="org-keyword">end</span>
</pre>
</div>
 <p>
オプションハッシュを使うか、ブロックを使うか、あるいは両方を使うか選択できる。
</p>
</div>
</div>
 <div id="outline-container-org216fbfe" class="outline-3">
 <h3 id="org216fbfe"> <a href="#org216fbfe">ex2</a></h3>
 <div class="outline-text-3" id="text-org216fbfe">
 <p>
eachを使ってmapを実装する。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-keyword">class</span>  <span class="org-type">Array</span>
   <span class="org-keyword">def</span>  <span class="org-function-name">map</span>
    array = []
    each  <span class="org-keyword">do</span> |x|
      array.push( <span class="org-keyword">yield</span> x)
     <span class="org-keyword">end</span>
    array
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>
goal =  <span class="org-string">%w(look ma no for loops)</span>.map  <span class="org-keyword">do</span> |x|
  x.upcase
 <span class="org-keyword">end</span>
 <span class="org-builtin">p</span> goal

</pre>
</div>

 <p>
each_wordを実装する。
例えば↓みたいな動作イメージ。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-string">"Nothing lasts forever but cold November Rain"</span>.each_word  <span class="org-keyword">do</span> |x|
   <span class="org-builtin">puts</span> x
 <span class="org-keyword">end</span>
 <span class="org-comment-delimiter"># </span> <span class="org-comment">=> Nothing</span>
 <span class="org-comment-delimiter"># </span> <span class="org-comment">=> lasts</span>
 <span class="org-comment-delimiter"># </span> <span class="org-comment">=> forever ...</span>
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-keyword">class</span>  <span class="org-type">String</span>
   <span class="org-keyword">def</span>  <span class="org-function-name">each_word</span>
    split.each  <span class="org-keyword">do</span> |x|
       <span class="org-keyword">yield</span> x
     <span class="org-keyword">end</span>
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>

 <span class="org-string">"Nothing lasts forever but cold November Rain"</span>.each_word  <span class="org-keyword">do</span> |x|
   <span class="org-builtin">puts</span> x
 <span class="org-keyword">end</span>
</pre>
</div>

 <p>
Active RecordのDSLを実装する。
例えば。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-type">ActiveRecord</span>:: <span class="org-type">Schema</span>.define( <span class="org-constant">version:</span> 20130314230445)  <span class="org-keyword">do</span>
  create_table  <span class="org-string">"microposts"</span>,  <span class="org-constant">force:</span>  <span class="org-constant">true</span>  <span class="org-keyword">do</span> |t|
    t.string  <span class="org-string">"content"</span>
    t.integer  <span class="org-string">"user_id"</span>
    t.datetime  <span class="org-string">"created_at"</span>
    t.datetime  <span class="org-string">"updated_at"</span>
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-keyword">module</span>  <span class="org-type">ActiveRecord</span>
   <span class="org-keyword">class</span>  <span class="org-type">Schema</span>
     <span class="org-keyword">def</span>  <span class="org-keyword">self</span>. <span class="org-function-name">define</span>(version, &block)
      version
      instance_eval(&block)  <span class="org-keyword">if</span>  <span class="org-builtin">block_given?</span>
     <span class="org-keyword">end</span>

     <span class="org-keyword">def</span>  <span class="org-keyword">self</span>. <span class="org-function-name">create_table</span>(table_name, options = {}, &block)
      t =  <span class="org-type">Table</span>.new(table_name, options)
       <span class="org-keyword">yield</span> t  <span class="org-keyword">if</span>  <span class="org-builtin">block_given?</span>
     <span class="org-keyword">end</span>
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>

 <span class="org-keyword">class</span>  <span class="org-type">Table</span>
   <span class="org-keyword">def</span>  <span class="org-function-name">initialize</span>(name, options)
     <span class="org-variable-name">@name</span> = name
     <span class="org-variable-name">@options</span> = options
   <span class="org-keyword">end</span>

   <span class="org-keyword">def</span>  <span class="org-function-name">string</span>(value)
     <span class="org-builtin">puts</span>  <span class="org-string">"Creating column of type string named </span> <span class="org-variable-name">#{value}</span> <span class="org-string">"</span>
   <span class="org-keyword">end</span>

   <span class="org-keyword">def</span>  <span class="org-function-name">integer</span>(value)
     <span class="org-builtin">puts</span>  <span class="org-string">"Creating column of type integer named </span> <span class="org-variable-name">#{value}</span> <span class="org-string">"</span>
   <span class="org-keyword">end</span>

   <span class="org-keyword">def</span>  <span class="org-function-name">datetime</span>(value)
     <span class="org-builtin">puts</span>  <span class="org-string">"Creating column of type datetime named </span> <span class="org-variable-name">#{value}</span> <span class="org-string">"</span>
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>

 <span class="org-type">ActiveRecord</span>:: <span class="org-type">Schema</span>.define( <span class="org-constant">version:</span> 20130315230445)  <span class="org-keyword">do</span>
  create_table  <span class="org-string">"microposts"</span>,  <span class="org-constant">force:</span>  <span class="org-constant">true</span>  <span class="org-keyword">do</span> |t|
    t.string  <span class="org-string">"content"</span>
    t.integer  <span class="org-string">"user_id"</span>
    t.datetime  <span class="org-string">"created_at"</span>
    t.datetime  <span class="org-string">"updated_at"</span>
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>

 <span class="org-comment-delimiter"># </span> <span class="org-comment">Output</span>
 <span class="org-comment-delimiter"># </span> <span class="org-comment">Creating column of type string named content</span>
 <span class="org-comment-delimiter"># </span> <span class="org-comment">Creating column of type string named user_id</span>
 <span class="org-comment-delimiter"># </span> <span class="org-comment">Creating column of type string named created_at</span>
 <span class="org-comment-delimiter"># </span> <span class="org-comment">Creating column of type string named updated_at</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgcd99641" class="outline-3">
 <h3 id="orgcd99641"> <a href="#orgcd99641">Proc</a></h3>
 <div class="outline-text-3" id="text-orgcd99641">
 <p>
ブロックは単体で存在できないが、ProcとLambdaは単体でオブジェクトとして存在できる。
</p>

 <div class="org-src-container">
 <pre class="src src-ruby">p =  <span class="org-builtin">proc</span> { |x, y| x + y }
</pre>
</div>

 <div class="results" id="org5108fde">
 <p>
#<Proc:0x000055b7801c80d0 -:3>
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-ruby">p =  <span class="org-type">Kernel</span>.proc { |x, y| x + y }
</pre>
</div>

 <div class="results" id="org9b6f27c">
 <p>
#<Proc:0x0000557970bb7a58 -:3>
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-ruby">p =  <span class="org-builtin">proc</span> { |x, y|  <span class="org-builtin">p</span> x + y }
p.call( <span class="org-string">"oh"</span>,  <span class="org-string">"ai"</span>)
p.call(4, 2)
</pre>
</div>

 <div class="results" id="org74b0690">
 <p>
“ohai”
6
</p>

</div>

 <p>
短縮記法もある。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby">p =  <span class="org-builtin">proc</span> { |x, y|  <span class="org-builtin">p</span> x + y }
p.( <span class="org-string">"oh"</span>,  <span class="org-string">"ai"</span>)
p.(1, 2)
</pre>
</div>

 <div class="results" id="orgb78423b">
 <p>
“ohai”
3
</p>

</div>

 <p>
この記法は、call()が実装されているクラスならどこでも使用できる。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-keyword">class</span>  <span class="org-type">Carly</span>
   <span class="org-keyword">def</span>  <span class="org-function-name">call</span>(who)
     <span class="org-string">"call </span> <span class="org-variable-name">#{who}</span> <span class="org-string">, maybe"</span>
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>
c =  <span class="org-type">Carly</span>.new
c.( <span class="org-string">"me"</span>)
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-ruby">even =  <span class="org-builtin">proc</span> { |x| x % 2 == 0 }
 <span class="org-builtin">p</span> even === 11
 <span class="org-builtin">p</span> even === 10
</pre>
</div>

 <div class="results" id="org9b2ae78">
 <p>
false
true
</p>

</div>
</div>
</div>
 <div id="outline-container-org3a0a8b4" class="outline-3">
 <h3 id="org3a0a8b4"> <a href="#org3a0a8b4">Lambda</a></h3>
 <div class="outline-text-3" id="text-org3a0a8b4">
 <p>
lambdaのクラスはProcである。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-builtin">lambda</span> {}.class
</pre>
</div>

 <div class="results" id="orgf4e8835">
 <p>
Proc
</p>

</div>

 <p>
procのクラスはProcである。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-builtin">proc</span> {}.class
</pre>
</div>

 <div class="results" id="org4737524">
 <p>
Proc
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-builtin">lambda</span> { |x, y| x + y }.call(x, y)
 <span class="org-builtin">lambda</span> { |x, y| x + y }[x, y]
 <span class="org-builtin">lambda</span> { |x, y| x + y }.(x, y)
 <span class="org-builtin">lambda</span> { |x, y| x + y } === [x, y]

-> (x, y){ x + y }.call(x, y)
-> (x, y){ x + y }[x, y]
-> (x, y){ x + y }.(x, y)
-> (x, y){ x + y } === [x, y]
</pre>
</div>

 <div class="results" id="orgad420fa">

</div>

 <p>
->がよくラムダ計算表記に使われるのは、λに似てるかららしい。まじか。
</p>

 <p>
procは引数の数が合ってなくてもエラーにならない。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby">l =  <span class="org-builtin">lambda</span> { |x, y|  <span class="org-builtin">puts</span>  <span class="org-string">"x: </span> <span class="org-variable-name">#{x}</span> <span class="org-string">, y: </span> <span class="org-variable-name">#{y}</span> <span class="org-string">"</span> }
l.call( <span class="org-string">"Ohai"</span>,  <span class="org-string">"Gentle Reader"</span>)
p =  <span class="org-builtin">proc</span> { |x, y|  <span class="org-builtin">puts</span>  <span class="org-string">"x: </span> <span class="org-variable-name">#{x}</span> <span class="org-string">, y: </span> <span class="org-variable-name">#{y}</span> <span class="org-string">"</span> }
p.call( <span class="org-string">"Ohai"</span>,  <span class="org-string">"Gentle Reader"</span>)
p.call( <span class="org-string">"Ohai"</span>)
</pre>
</div>

 <div class="results" id="orgcb6d2d9">
 <p>
x: Ohai, y: Gentle Reader
x: Ohai, y: Gentle Reader
x: Ohai, y:
</p>

</div>

 <p>
lambdaは引数の数が合ってないとエラーになる。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby">l =  <span class="org-builtin">lambda</span> { |x, y|  <span class="org-builtin">puts</span>  <span class="org-string">"x: </span> <span class="org-variable-name">#{x}</span> <span class="org-string">, y: </span> <span class="org-variable-name">#{y}</span> <span class="org-string">"</span> }
l.call( <span class="org-string">"Ohai"</span>)
</pre>
</div>

 <div class="results" id="orgfc18bf2">
 <p>
-:3:in `block in main’: wrong number of arguments (given 1, expected 2) (ArgumentError)
	from -:4:in `main’
	from -:6:in `<main>’
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-keyword">class</span>  <span class="org-type">SomeClass</span>
   <span class="org-keyword">def</span>  <span class="org-function-name">method_that_calls_proc_or_lambda</span>(procy)
     <span class="org-builtin">puts</span>  <span class="org-string">"calling </span> <span class="org-variable-name">#{proc_or_lambda(procy)}</span> <span class="org-string"> now!"</span>
    procy.call
     <span class="org-builtin">puts</span>  <span class="org-string">"</span> <span class="org-variable-name">#{proc_or_lambda(procy)}</span> <span class="org-string"> gets called!"</span>
   <span class="org-keyword">end</span>

   <span class="org-keyword">def</span>  <span class="org-function-name">proc_or_lambda</span>(proc_like_thing)
    proc_like_thing.lambda? ?  <span class="org-string">"lambda"</span> :  <span class="org-string">"Proc"</span>
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>

c =  <span class="org-type">SomeClass</span>.new
c.method_that_calls_proc_or_lambda  <span class="org-builtin">lambda</span> {  <span class="org-keyword">return</span> }  <span class="org-comment-delimiter"># </span> <span class="org-comment">OK</span>
c.method_that_calls_proc_or_lambda  <span class="org-builtin">proc</span> {  <span class="org-keyword">return</span> }  <span class="org-comment-delimiter"># </span> <span class="org-comment">gets calledまで到達しない。procはmainコンテキストで作られる。</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-org941d42b" class="outline-3">
 <h3 id="org941d42b"> <a href="#org941d42b">Symbol#to_proc</a></h3>
 <div class="outline-text-3" id="text-org941d42b">
 <p>
Rubyでは、  <code>&</code> があるとprocに変換しようとする。
なので↓は。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby">[ <span class="org-string">"a"</span>,  <span class="org-string">"i"</span>,  <span class="org-string">"u"</span>].map { |s| s.length }
</pre>
</div>

 <div class="results" id="org4ff201c">
 <p>
[1, 1, 1]
</p>

</div>

 <p>
省略記法で書ける。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby">[ <span class="org-string">"a"</span>,  <span class="org-string">"i"</span>,  <span class="org-string">"u"</span>].map(& <span class="org-constant">:length</span>)
</pre>
</div>

 <div class="results" id="orge21660e">
 <p>
[1, 1, 1]
</p>

</div>

 <p>
これは引数がProcでないのでエラーになる。
Objectクラスがprocへの変換のやり方を知らないため。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby">obj =  <span class="org-type">Object</span>.new
[1, 2, 3].map &obj
</pre>
</div>

 <p>
↓こうするとエラーにはならない。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-keyword">class</span>  <span class="org-type">Object</span>
   <span class="org-keyword">def</span>  <span class="org-function-name">to_proc</span>
     <span class="org-builtin">proc</span> {}
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>
obj =  <span class="org-type">Object</span>.new
 <span class="org-builtin">p</span> [1, 2, 3].map &obj  <span class="org-comment-delimiter"># </span> <span class="org-comment">=> [nil, nil, nil]</span>
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-keyword">class</span>  <span class="org-type">Object</span>
   <span class="org-keyword">def</span>  <span class="org-function-name">to_proc</span>
     <span class="org-builtin">proc</span> { |x|  <span class="org-string">"Here's </span> <span class="org-variable-name">#{x}</span> <span class="org-string">!"</span> }
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>
obj =  <span class="org-type">Object</span>.new
 <span class="org-builtin">p</span> [1, 2, 3].map(&obj)  <span class="org-comment-delimiter"># </span> <span class="org-comment">=> ["Here's 1!", "Here's 2!", "Here's 3!"]</span>
</pre>
</div>

 <p>
汎用化させる。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-keyword">class</span>  <span class="org-type">Symbol</span>
   <span class="org-keyword">def</span>  <span class="org-function-name">to_proc</span>
     <span class="org-builtin">proc</span> { |obj| obj.send( <span class="org-keyword">self</span>) }
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>
 <span class="org-builtin">p</span> [ <span class="org-string">"ai"</span>,  <span class="org-string">"iue"</span>,  <span class="org-string">"u"</span>].map(& <span class="org-constant">:length</span>)
 <span class="org-comment-delimiter"># </span> <span class="org-comment">=> [2, 3, 1]</span>
 <span class="org-builtin">p</span> [ <span class="org-string">"ai"</span>,  <span class="org-string">"iue"</span>,  <span class="org-string">"u"</span>].map(& <span class="org-constant">:upcase</span>)
 <span class="org-comment-delimiter"># </span> <span class="org-comment">=> ["AI", "IUE", "U"]</span>
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-builtin">p</span> [1, 2, 3].inject(0) { |result, element| result + element }
 <span class="org-builtin">p</span> [1, 2, 3].inject(& <span class="org-constant">:+</span>)
</pre>
</div>

 <div class="results" id="org4fab5dd">
 <p>
6
6
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-keyword">class</span>  <span class="org-type">Symbol</span>
   <span class="org-keyword">def</span>  <span class="org-function-name">to_proc</span>
     <span class="org-builtin">lambda</span> { |obj, args| obj.send( <span class="org-keyword">self</span>, *args) }
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>
 <span class="org-builtin">p</span> [1, 2, 3].inject(& <span class="org-constant">:+</span>)
</pre>
</div>
</div>
</div>
 <div id="outline-container-org998f5a2" class="outline-3">
 <h3 id="org998f5a2"> <a href="#org998f5a2">カリー化</a></h3>
 <div class="outline-text-3" id="text-org998f5a2">
 <p>
評価を遅延させること。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby">discriminant =  <span class="org-builtin">lambda</span> { |a|  <span class="org-builtin">lambda</span> { |b|  <span class="org-builtin">lambda</span> { |c| b **2 - 4*a*c } } }
discriminant.call(5).call(6).call(7)
</pre>
</div>

 <div class="results" id="org8082e5a">
 <p>
-104
</p>

</div>

 <p>
同じ意味で、簡潔に書ける。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby">discriminant =  <span class="org-builtin">lambda</span> { |a, b, c| b**2 - 4*a*c }.curry
discriminant.call(5).call(6).call(7)
</pre>
</div>

 <div class="results" id="org59e2d56">
 <p>
-104
</p>

</div>

 <p>
これが利用できるシチュエーションを考える。
↓は重複がたくさんある。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby">sum_ints =  <span class="org-builtin">lambda</span>  <span class="org-keyword">do</span> |start,stop|
  (start..stop).inject{ |sum,x| sum + x }
 <span class="org-keyword">end</span>

sum_of_squares=  <span class="org-builtin">lambda</span>  <span class="org-keyword">do</span> |start,stop|
  (start..stop).inject{ |sum,x| sum + x*x }
 <span class="org-keyword">end</span>

sum_of_cubes =  <span class="org-builtin">lambda</span>  <span class="org-keyword">do</span> |start,stop|
  (start..stop).inject{ |sum,x| sum + x*x*x}
 <span class="org-keyword">end</span>
</pre>
</div>

 <p>
共通化できる。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby">sum =  <span class="org-builtin">lambda</span>  <span class="org-keyword">do</span> |fun, start, stop|
  (start..stop).inject { |sum, x| sum + fun.call(x) }
 <span class="org-keyword">end</span>

 <span class="org-builtin">p</span> sum_of_ints = sum.( <span class="org-builtin">lambda</span> { |x| x }, 1, 10)
 <span class="org-builtin">p</span> sum_of_square = sum.( <span class="org-builtin">lambda</span> { |x| x*x }, 1, 10)
 <span class="org-builtin">p</span> sum_of_cubes = sum.( <span class="org-builtin">lambda</span> { |x| x*x*x }, 1, 10)
</pre>
</div>

 <div class="results" id="org76bc49e">
 <p>
55
385
3025
</p>

</div>

 <p>
さらにカリー化。
</p>

 <div class="org-src-container">
 <pre class="src src-ruby">sum =  <span class="org-builtin">lambda</span>  <span class="org-keyword">do</span> |fun, start, stop|
  (start..stop).inject { |sum, x| sum + fun.call(x) }
 <span class="org-keyword">end</span>

sum_of_squares = sum.curry.( <span class="org-builtin">lambda</span> { |x| x*x })
sum_of_squares.(1).(10)
sum_of_squares.(50).(100)
</pre>
</div>

 <div class="results" id="org774da21">
 <p>
295475
</p>

</div>
</div>
</div>
 <div id="outline-container-org692f925" class="outline-3">
 <h3 id="org692f925"> <a href="#org692f925">ex3</a></h3>
 <div class="outline-text-3" id="text-org692f925">
 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-keyword">class</span>  <span class="org-type">Symbol</span>
   <span class="org-keyword">def</span>  <span class="org-function-name">to_proc</span>
     <span class="org-builtin">proc</span> { |obj, args| obj.send( <span class="org-keyword">self</span>, *args) }
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-string">"aaaa"</span>.send( <span class="org-constant">:length</span>)
</pre>
</div>

 <div class="results" id="org7e89da3">
 <p>
4
</p>

</div>

 <p>
to_procを初期化に使うことができる。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-keyword">class</span>  <span class="org-type">SpiceGirl</span>
   <span class="org-keyword">def</span>  <span class="org-function-name">initialize</span>(name, nick)
     <span class="org-variable-name">@name</span> = name
     <span class="org-variable-name">@nick</span> = nick
   <span class="org-keyword">end</span>

   <span class="org-keyword">def</span>  <span class="org-function-name">inspect</span>
     <span class="org-string">"</span> <span class="org-variable-name">#{@name}</span> <span class="org-string"> (</span> <span class="org-variable-name">#{@nick}</span> <span class="org-string"> Spice)"</span>
   <span class="org-keyword">end</span>

   <span class="org-keyword">def</span>  <span class="org-keyword">self</span>. <span class="org-function-name">to_proc</span>
     <span class="org-builtin">proc</span> { |obj|  <span class="org-keyword">self</span>.new(obj[0], obj[1]) }
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>

spice_girls = [[ <span class="org-string">"tarou"</span>,  <span class="org-string">"T"</span>], [ <span class="org-string">"jirou"</span>,  <span class="org-string">"J"</span>]]
 <span class="org-builtin">p</span> spice_girls.map(& <span class="org-type">SpiceGirl</span>)
 <span class="org-comment-delimiter"># </span> <span class="org-comment">=> [tarou (T Spice), jirou (J Spice)]</span>
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-builtin">p</span>  <span class="org-builtin">proc</span> {}.class
 <span class="org-builtin">p</span>  <span class="org-builtin">proc</span> {}.lambda?
 <span class="org-builtin">p</span>  <span class="org-builtin">lambda</span> {}.class
 <span class="org-builtin">p</span>  <span class="org-builtin">lambda</span> {}.lambda?
 <span class="org-builtin">p</span> -> {}.class
 <span class="org-builtin">p</span>  <span class="org-builtin">lambda</span> {}.lambda?
</pre>
</div>

 <div class="results" id="org775feb0">
 <p>
Proc
false
Proc
true
Proc
true
</p>

</div>

 <p>
lambdaは引数の数が合わないとエラーになる。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby">j1 =  <span class="org-builtin">proc</span>   { |x,y,z|  <span class="org-string">"</span> <span class="org-variable-name">#{x}</span> <span class="org-string">, </span> <span class="org-variable-name">#{y}</span> <span class="org-string">, </span> <span class="org-variable-name">#{z}</span> <span class="org-string">"</span> }
j2 =  <span class="org-builtin">lambda</span> { |x,y,z|  <span class="org-string">"</span> <span class="org-variable-name">#{x}</span> <span class="org-string">, </span> <span class="org-variable-name">#{y}</span> <span class="org-string">, </span> <span class="org-variable-name">#{z}</span> <span class="org-string">"</span> }
j1.call( <span class="org-string">"hello"</span>,  <span class="org-string">"world"</span>)
 <span class="org-comment-delimiter"># </span> <span class="org-comment">j2.call("hello", "world") # argument error</span>
</pre>
</div>

 <div class="results" id="orgc16874a">
 <p>
hello, world,
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-ruby">j1 =  <span class="org-builtin">proc</span> { |x,y,z| x + y + z }
j2 =  <span class="org-builtin">lambda</span> { |x,y,z| x + y + z }
 <span class="org-comment-delimiter"># </span> <span class="org-comment">j1.call(1, 2) # -:3:in `+': nil can't be coerced into Integer (TypeError)</span>
 <span class="org-comment-delimiter"># </span> <span class="org-comment">j2.call(1, 2) # -:4:in `block in main': wrong number of arguments (given 2, expected 3) (ArgumentError)</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-org82a9c0a" class="outline-3">
 <h3 id="org82a9c0a"> <a href="#org82a9c0a">enumerable</a></h3>
 <div class="outline-text-3" id="text-org82a9c0a">
 <ul class="org-ul"> <li>enumerable: 機能を持ったモジュール(ArrayとかHashと同列)。include先のクラスが持つ each メソッドを元に、様々なメソッドを提供する。</li>
 <li>enumerator: 実際にenumerateするオブジェクト。each 以外のメソッドにも Enumerable の機能を提供するためのラッパークラス。外部イテレータとしても使える。</li>
</ul> <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-builtin">p</span> 1.upto( <span class="org-type">Float</span>:: <span class="org-type">INFINITY</span>)  <span class="org-comment-delimiter"># </span> <span class="org-comment">評価せずオブジェクトを返す</span>
 <span class="org-builtin">p</span> 1.upto(5).to_a  <span class="org-comment-delimiter"># </span> <span class="org-comment">評価する</span>
 <span class="org-comment-delimiter"># </span> <span class="org-comment">p 1.upto(Float::INFINITY).to_a # 処理は終わらない</span>
</pre>
</div>

 <div class="results" id="org93cdf33">
 <p>
#<Enumerator: 1:upto(Infinity)>
[1, 2, 3, 4, 5]
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-builtin">p</span> 1.upto( <span class="org-type">Float</span>:: <span class="org-type">INFINITY</span>).lazy.map { |x| x * x }
 <span class="org-builtin">p</span> 1.upto( <span class="org-type">Float</span>:: <span class="org-type">INFINITY</span>).lazy.map { |x| x * x }.take(10)
 <span class="org-builtin">p</span> 1.upto( <span class="org-type">Float</span>:: <span class="org-type">INFINITY</span>).lazy.map { |x| x * x }.take(10).to_a
</pre>
</div>

 <div class="results" id="org10a4761">
 <p>
#<Enumerator::Lazy: #<Enumerator::Lazy: #<Enumerator: 1:upto(Infinity)>>:map>
#<Enumerator::Lazy: #<Enumerator::Lazy: #<Enumerator::Lazy: #<Enumerator: 1:upto(Infinity)>>:map>:take(10)>
[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
</p>

</div>
</div>
</div>
 <div id="outline-container-org28d949b" class="outline-3">
 <h3 id="org28d949b"> <a href="#org28d949b">internal iterationとexternal iteration</a></h3>
 <div class="outline-text-3" id="text-org28d949b">
 <p>
internalは、Arrayオブジェクトがiterateをコントロールする。戻れない。
externalは、包んでいる外部のオブジェクトがiterateをコントロールする。状態を持っているので戻ったり止めたりできる。
</p>

 <p>
EnumeratorはEnumerableを包んでいる。
Arrayを入れてみる。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-builtin">p</span> e =  <span class="org-type">Enumerator</span>.new([1, 2, 3])
 <span class="org-builtin">p</span> e.next
 <span class="org-builtin">p</span> e.next
 <span class="org-builtin">p</span> e.next
</pre>
</div>

 <div class="results" id="org3cc551a">
 <p>
#<Enumerator: [1, 2, 3]:each>
1
2
3
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-ruby">e =  <span class="org-type">Enumerator</span>.new  <span class="org-keyword">do</span> |yielder|
  [1, 2, 3].each  <span class="org-keyword">do</span> |val|
    yielder << val
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>
</pre>
</div>

 <p>
fiberクラスは内部iteratorを外部iteratorに変換する。
</p>

 <div class="org-src-container">
 <pre class="src src-ruby">f =  <span class="org-type">Fiber</span>.new  <span class="org-keyword">do</span>
  x = 0
   <span class="org-builtin">loop</span>  <span class="org-keyword">do</span>
     <span class="org-type">Fiber</span>.yield x
    x += 1
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>

 <span class="org-builtin">p</span> f.resume
 <span class="org-builtin">p</span> f.resume
 <span class="org-builtin">p</span> f.resume
</pre>
</div>

 <div class="results" id="org8f4eb88">
 <p>
0
1
2
</p>

</div>
</div>
</div>
 <div id="outline-container-org7cd9a8a" class="outline-3">
 <h3 id="org7cd9a8a"> <a href="#org7cd9a8a">EnumerableとEnumerator</a></h3>
 <div class="outline-text-3" id="text-org7cd9a8a">
 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-keyword">module</span>  <span class="org-type">Enumerable</span>
   <span class="org-keyword">def</span>  <span class="org-function-name">lax</span>
     <span class="org-type">Lax</span>.new( <span class="org-keyword">self</span>)
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>

 <span class="org-keyword">class</span>  <span class="org-type">Lax</span> <  <span class="org-type">Enumerator</span>
   <span class="org-keyword">def</span>  <span class="org-function-name">initialize</span>(receiver)
     <span class="org-keyword">super</span>()  <span class="org-keyword">do</span> |yielder|
      receiver.each  <span class="org-keyword">do</span> |val|
        yielder << val
       <span class="org-keyword">end</span>
     <span class="org-keyword">end</span>
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>

e = 1.upto( <span class="org-type">Float</span>:: <span class="org-type">INFINITY</span>).lax
 <span class="org-builtin">p</span> e.next  <span class="org-comment-delimiter"># </span> <span class="org-comment">1</span>
 <span class="org-builtin">p</span> e.next  <span class="org-comment-delimiter"># </span> <span class="org-comment">2</span>
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-keyword">module</span>  <span class="org-type">Enumerable</span>
   <span class="org-keyword">def</span>  <span class="org-function-name">lax</span>
     <span class="org-type">Lax</span>.new( <span class="org-keyword">self</span>)
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>

 <span class="org-keyword">class</span>  <span class="org-type">Lax</span> <  <span class="org-type">Enumerator</span>
   <span class="org-keyword">def</span>  <span class="org-function-name">initialize</span>(receiver)
     <span class="org-keyword">super</span>()  <span class="org-keyword">do</span> |yielder|
      receiver.each  <span class="org-keyword">do</span> |val|
         <span class="org-builtin">puts</span>  <span class="org-string">"add: </span> <span class="org-variable-name">#{val}</span> <span class="org-string">"</span>
        yielder << val
       <span class="org-keyword">end</span>
     <span class="org-keyword">end</span>
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>

lax =  <span class="org-type">Lax</span>.new([1, 2, 3])
lax.map { |x|  <span class="org-builtin">puts</span>  <span class="org-string">"map: </span> <span class="org-variable-name">#{x}</span> <span class="org-string">; x"</span> }

 <span class="org-comment-delimiter"># </span> <span class="org-comment">add: 1</span>
 <span class="org-comment-delimiter"># </span> <span class="org-comment">map: 1; x</span>
 <span class="org-comment-delimiter"># </span> <span class="org-comment">add: 2</span>
 <span class="org-comment-delimiter"># </span> <span class="org-comment">map: 2; x</span>
 <span class="org-comment-delimiter"># </span> <span class="org-comment">add: 3</span>
 <span class="org-comment-delimiter"># </span> <span class="org-comment">map: 3; x</span>
</pre>
</div>

 <p>
lazy mapの実装。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-keyword">module</span>  <span class="org-type">Enumerable</span>
   <span class="org-keyword">def</span>  <span class="org-function-name">lax</span>
     <span class="org-type">Lax</span>.new( <span class="org-keyword">self</span>)
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>

 <span class="org-keyword">class</span>  <span class="org-type">Lax</span> <  <span class="org-type">Enumerator</span>
   <span class="org-keyword">def</span>  <span class="org-function-name">initialize</span>(receiver)
     <span class="org-keyword">super</span>()  <span class="org-keyword">do</span> |yielder|
      receiver.each  <span class="org-keyword">do</span> |val|
         <span class="org-keyword">if</span>  <span class="org-builtin">block_given?</span>
           <span class="org-keyword">yield</span>(yielder, val)
         <span class="org-keyword">else</span>
          yielder << val
         <span class="org-keyword">end</span>
       <span class="org-keyword">end</span>
     <span class="org-keyword">end</span>
   <span class="org-keyword">end</span>

   <span class="org-keyword">def</span>  <span class="org-function-name">map</span>(&block)
     <span class="org-type">Lax</span>.new( <span class="org-keyword">self</span>)  <span class="org-keyword">do</span> |yielder, val|
      yielder << block.call(val)
     <span class="org-keyword">end</span>
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>

 <span class="org-builtin">p</span> 1.upto( <span class="org-type">Float</span>:: <span class="org-type">INFINITY</span>).lax.map { |x| x*x }.map { |x| x+1 }.first(5)
 <span class="org-comment-delimiter"># </span> <span class="org-comment">[2, 5, 10, 17, 26]</span>
</pre>
</div>

 <p>
lazy takeの実装。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-keyword">def</span>  <span class="org-function-name">take</span>(n)
  taken = 0
   <span class="org-type">Lax</span>.new( <span class="org-keyword">self</span>)  <span class="org-keyword">do</span> |yielder, val|
     <span class="org-keyword">if</span> taken < n
      yielder << val
      taken += 1
     <span class="org-keyword">else</span>
       <span class="org-builtin">raise</span>  <span class="org-type">StopIteration</span>
     <span class="org-keyword">end</span>
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>
 <span class="org-builtin">p</span> 1.upto( <span class="org-type">Float</span>:: <span class="org-type">INFINITY</span>).lax.take(5).first(5)
 <span class="org-comment-delimiter"># </span> <span class="org-comment">[1, 2, 3, 4, 5]</span>
</pre>
</div>

 <p>
まとめ。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-keyword">class</span>  <span class="org-type">Lax</span> <  <span class="org-type">Enumerator</span>
   <span class="org-keyword">def</span>  <span class="org-function-name">initialize</span>(receiver)
     <span class="org-keyword">super</span>()  <span class="org-keyword">do</span> |yielder|
      receiver.each  <span class="org-keyword">do</span> |val|
         <span class="org-keyword">if</span>  <span class="org-builtin">block_given?</span>
           <span class="org-keyword">yield</span>(yielder, val)
         <span class="org-keyword">else</span>
          yielder << val
         <span class="org-keyword">end</span>
       <span class="org-keyword">end</span>
     <span class="org-keyword">rescue</span>  <span class="org-type">StopIteration</span>
     <span class="org-keyword">end</span>
   <span class="org-keyword">end</span>

   <span class="org-keyword">def</span>  <span class="org-function-name">map</span>(&block)
     <span class="org-type">Lax</span>.new( <span class="org-keyword">self</span>)  <span class="org-keyword">do</span> |yielder, val|
      yielder << block.call(val)
     <span class="org-keyword">end</span>
   <span class="org-keyword">end</span>

   <span class="org-keyword">def</span>  <span class="org-function-name">take</span>(n)
    taken = 0
     <span class="org-type">Lax</span>.new( <span class="org-keyword">self</span>)  <span class="org-keyword">do</span> |yielder, val|
       <span class="org-keyword">if</span> taken < n
        yielder << val
        taken += 1
       <span class="org-keyword">else</span>
         <span class="org-builtin">raise</span>  <span class="org-type">StopIteration</span>
       <span class="org-keyword">end</span>
     <span class="org-keyword">end</span>
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>

 <span class="org-builtin">p</span> 1.upto( <span class="org-type">Float</span>:: <span class="org-type">INFINITY</span>).lax.map { |x| x*x }.map { |x| x+1 }.first(5)
 <span class="org-builtin">p</span> 1.upto( <span class="org-type">Float</span>:: <span class="org-type">INFINITY</span>).lax.map { |x| x*x }.map { |x| x+1 }.take(5).to_a  <span class="org-comment-delimiter"># </span> <span class="org-comment">↑と結果は同じ</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-org8861e46" class="outline-3">
 <h3 id="org8861e46"> <a href="#org8861e46">ex4</a></h3>
 <div class="outline-text-3" id="text-org8861e46">
 <p>
selectのlazy版。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-keyword">def</span>  <span class="org-function-name">select</span>(&block)
   <span class="org-type">Lax</span>.new( <span class="org-keyword">self</span>)  <span class="org-keyword">do</span> |yielder, val|
     <span class="org-keyword">if</span> block.call(val)
      yielder << val
     <span class="org-keyword">end</span>
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>

 <span class="org-builtin">p</span> 1.upto( <span class="org-type">Float</span>:: <span class="org-type">INFINITY</span>).lax.take(5).select { |x| x % 2 == 0 }.to_a
 <span class="org-comment-delimiter"># </span> <span class="org-comment">=> [2, 4]</span>
</pre>
</div>

 <p>
dropのlazy版。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-keyword">def</span>  <span class="org-function-name">drop</span>(n)
  dropped = 0
   <span class="org-type">Lax</span>.new( <span class="org-keyword">self</span>)  <span class="org-keyword">do</span> |yielder, val|
     <span class="org-keyword">if</span> dropped < n
      dropped += 1
     <span class="org-keyword">else</span>
      yielder << val
     <span class="org-keyword">end</span>
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>

 <span class="org-builtin">p</span> 1.upto( <span class="org-type">Float</span>:: <span class="org-type">INFINITY</span>).lax.take(5).drop(3).to_a
 <span class="org-comment-delimiter"># </span> <span class="org-comment">=> [4, 5]</span>
</pre>
</div>
</div>
</div>
</div>
 <div id="outline-container-orgd6ae347" class="outline-2">
 <h2 id="orgd6ae347"> <a href="#orgd6ae347">Ruby kaigi 2021</a></h2>
 <div class="outline-text-2" id="text-orgd6ae347">
</div>
 <div id="outline-container-org83a40f7" class="outline-3">
 <h3 id="org83a40f7"> <a href="#org83a40f7">VSCode extension for ruby type</a></h3>
 <div class="outline-text-3" id="text-org83a40f7">
 <p>
 <a href="https://www.slideshare.net/mametter/typeprof-for-ide-enrich-development-experience-without-annotations">https://www.slideshare.net/mametter/typeprof-for-ide-enrich-development-experience-without-annotations</a>
</p>

 <ul class="org-ul"> <li>言語自体を変えなくても、現代的なIDEの恩恵を受けられる。</li>
 <li>特に静的型付け言語だと引数の型などを表示できる。</li>
 <li id="RBS">ruby official type definition language</li>
 <li>型レベルに抽象化して情報を解析する。</li>

 <li> <a href="https://github.com/usaito">https://github.com/usaito</a> Special Thanksに載ってた人。年下だ…。本物の工学の人。</li>
 <li>あまり専門的な内容には触れなかった。</li>
</ul></div>
</div>
 <div id="outline-container-org065a0ec" class="outline-3">
 <h3 id="org065a0ec"> <a href="#org065a0ec">Why Ruby’s JIT was slow</a></h3>
 <div class="outline-text-3" id="text-org065a0ec">
 <ul class="org-ul"> <li>RubyのJITの状況、高速化。</li>
 <li>方式の違い。</li>
</ul></div>
</div>
 <div id="outline-container-org70772c4" class="outline-3">
 <h3 id="org70772c4"> <a href="#org70772c4">RuboCop in 2021: Stable and Beyond</a></h3>
 <div class="outline-text-3" id="text-org70772c4">
 <ul class="org-ul"> <li>Rubocopの状況。過去、現在、未来。</li>
 <li>autocorrectが安全な修正をするように設計。</li>
</ul></div>
</div>
 <div id="outline-container-orgec54510" class="outline-3">
 <h3 id="orgec54510"> <a href="#orgec54510">The Art of Execution Control for Ruby’s Debugger</a></h3>
 <div class="outline-text-3" id="text-orgec54510">
 <ul class="org-ul"> <li>歯のメンテナンス</li>
 <li>新しいデバッガ:  <code>debug.gem</code> Rails7からこれを使うようになるよう</li>
 <li>rubyにおけるデバッガーの状況、ツール作った理由、使い方。</li>
 <li>gem  <code>rdbg</code></li>
 <li> <code>info</code> コマンド</li>
 <li>一部分だけトレースできる。</li>
 <li>PostMortem debugging…検死、なぜプログラムが終了したか調べる。</li>
 <li>Record and play debug…戻れる。</li>
</ul></div>
</div>
 <div id="outline-container-org836ec6b" class="outline-3">
 <h3 id="org836ec6b"> <a href="#org836ec6b">Toycol: Define your own application protocol</a></h3>
 <div class="outline-text-3" id="text-org836ec6b">
 <ul class="org-ul"> <li>プロトコルの各レイヤーが責任を持つ</li>
 <li>プロトコルをサーバとクライアントが知っているものであれば、なんだって通信。自作プロトコルでも。</li>
 <li>自作プロトコルの使い方と動作の仕組み</li>
</ul></div>
</div>
 <div id="outline-container-org87a804b" class="outline-3">
 <h3 id="org87a804b"> <a href="#org87a804b">dRuby in the real-world embedded systems</a></h3>
 <div class="outline-text-3" id="text-org87a804b">
 <ul class="org-ul"> <li>CT装置</li>
 <li>胆石</li>
</ul></div>
</div>
 <div id="outline-container-org48710dd" class="outline-3">
 <h3 id="org48710dd"> <a href="#org48710dd">Regular Expressions: Amazing and Dangerous</a></h3>
 <div class="outline-text-3" id="text-org48710dd">
 <p>
なぜ危険か。
</p>
 <ul class="org-ul"> <li> <code>+?</code> によって非常に時間がかかる <a href="20210910104106-regular_expression.html#ID-f054b2d4-c7f9-4bf2-be9c-e29a7f97cb45">Regular Expression</a>になる可能性がある。文字列が非常に長い場合、組み合わせ数が爆発的に増えるため。</li>
 <li>サービスがダウンすることもある。Stack Overflow, Cloudflare, Atom…であったインシデントのいくつか…はRubyの <a href="20210910104106-regular_expression.html#ID-f054b2d4-c7f9-4bf2-be9c-e29a7f97cb45">Regular Expression</a>由来のものだった</li>
 <li>gemの中から危険な表現が使われているところを検索する。多くヒットした</li>
</ul> <p>
対策。
</p>
 <ul class="org-ul"> <li> <code>//x</code> を使う</li>
 <li>正規表現のテストを書く。カバレッジは正規表現の中までは見ない…</li>
 <li>入力の長さを制限する</li>
</ul></div>
</div>
 <div id="outline-container-orgd8cf85d" class="outline-3">
 <h3 id="orgd8cf85d"> <a href="#orgd8cf85d">Demystifying DSLs for better analysis and understanding</a></h3>
 <div class="outline-text-3" id="text-orgd8cf85d">
 <ul class="org-ul"> <li>Domain Specific Language</li>
 <li> <a href="20210910104106-regular_expression.html#ID-f054b2d4-c7f9-4bf2-be9c-e29a7f97cb45">Regular Expression</a>, Rakefile, RSpec…</li>
 <li> <a href="20210509095946-rails.html#ID-e04aa1a3-509c-45b2-ac64-53d69c961214">Rails</a> provide many DSL</li>
 <li>Tapioca gem</li>
 <li>generate rbi file from Model</li>
</ul></div>
</div>
 <div id="outline-container-org6537b48" class="outline-3">
 <h3 id="org6537b48"> <a href="#org6537b48">The Future Shape of Ruby Objects</a></h3>
 <div class="outline-text-3" id="text-org6537b48">
 <ul class="org-ul"> <li>Rubyのオブジェクトの実装を見ながら解説。</li>
 <li>オブジェクト指向言語 <a href="20210910102223-smalltalk.html#ID-2a420174-482b-4a3e-868a-3a447572f1be">Smalltalk</a>のselfオブジェクト</li>
 <li>classとshape</li>
 <li> <a href="20210509100112-javascript.html#ID-a6980e15-ecee-466e-9ea7-2c0210243c0d">JavaScript</a>とかのプロトタイプ言語的アプローチ。</li>
 <li> <a href="https://github.com/Shopify/truffleruby">Shopify/truffleruby</a></li>
</ul></div>
</div>
 <div id="outline-container-org351e823" class="outline-3">
 <h3 id="org351e823"> <a href="#org351e823">PRK Firmware: Keyboard is Essentially Ruby</a></h3>
 <div class="outline-text-3" id="text-org351e823">
 <ul class="org-ul"> <li>自作キーボードを制御するfirmwareをRubyで書く</li>
</ul></div>
</div>
 <div id="outline-container-orgec3495e" class="outline-3">
 <h3 id="orgec3495e"> <a href="#orgec3495e">The newsletter of RBS updates</a></h3>
 <div class="outline-text-3" id="text-orgec3495e">
 <ul class="org-ul"> <li> <a href="https://github.com/ruby/rbs">ruby/rbs</a></li>
 <li>RBS → Rubyで型を定義するためのDSL</li>
 <li>サードパーティgemのRBSコレクションを作成している</li>
 <li>Railsに導入する方法</li>
</ul></div>
</div>
 <div id="outline-container-org97ab40b" class="outline-3">
 <h3 id="org97ab40b"> <a href="#org97ab40b">Parsing Ruby</a></h3>
 <div class="outline-text-3" id="text-org97ab40b">
 <ul class="org-ul"> <li>Rubyの記法の変遷。パーサの変遷</li>
 <li>コアに追従することは難しい</li>
 <li>少しの文法の変更でも大きな影響範囲がある</li>
 <li>少しの変更も拡張が難しい</li>
</ul></div>
</div>
 <div id="outline-container-org3d428a7" class="outline-3">
 <h3 id="org3d428a7"> <a href="#org3d428a7">Use Macro all the time ~ マクロを使いまくろ ~</a></h3>
 <div class="outline-text-3" id="text-org3d428a7">
 <ul class="org-ul"> <li>ASTレベルでRubyコードを置き換える</li>
 <li>パッケージの紹介</li>
</ul></div>
</div>
 <div id="outline-container-org261da5e" class="outline-3">
 <h3 id="org261da5e"> <a href="#org261da5e">Charty: Statistical data visualization in Ruby</a></h3>
 <div class="outline-text-3" id="text-org261da5e">
 <ul class="org-ul"> <li>Rubyでのグラフ描画ツール、charty</li>
 <li>パッケージの紹介</li>
</ul></div>
</div>
 <div id="outline-container-orgb1f9dc8" class="outline-3">
 <h3 id="orgb1f9dc8"> <a href="#orgb1f9dc8">Dive into Encoding</a></h3>
 <div class="outline-text-3" id="text-orgb1f9dc8">
 <ul class="org-ul"> <li>Relineのバグ修正で文字コードを深く知るきっかけ</li>
 <li>文字コードを実装して学ぶ</li>
 <li>Coded Charcter Set</li>
 <li>Character Encoding Scheme</li>
 <li>Conversion table</li>
 <li>Encoding constant</li>
</ul></div>
</div>
 <div id="outline-container-orgc3d28ae" class="outline-3">
 <h3 id="orgc3d28ae"> <a href="#orgc3d28ae">How to develop the Standard Libraries of Ruby</a></h3>
 <div class="outline-text-3" id="text-orgc3d28ae">
 <ul class="org-ul"> <li>標準ライブラリの作り方</li>
 <li>gemification - 本体添付からgemに切り離す</li>
 <li> <a href="https://github.com/rubygems/rubygems">rubygems/rubygems</a></li>
</ul></div>
</div>
 <div id="outline-container-org4bb132b" class="outline-3">
 <h3 id="org4bb132b"> <a href="#org4bb132b">Ruby, Ractor, QUIC</a></h3>
 <div class="outline-text-3" id="text-org4bb132b">
 <ul class="org-ul"> <li>QUICはGoogleによって開発された高速なプロトコル。</li>
 <li>クラウドゲーミングでは高速性が必要</li>
 <li>TCPとUDPの特性の違い</li>
</ul></div>
</div>
 <div id="outline-container-orgb6125d6" class="outline-3">
 <h3 id="orgb6125d6"> <a href="#orgb6125d6">10 years of Ruby-powered citizen science</a></h3>
 <div class="outline-text-3" id="text-orgb6125d6">
 <ul class="org-ul"> <li> <a href="https://github.com/Safecast/safecastapi">Safecast/safecastapi: The app that powers api.safecast.org</a></li>
 <li>放射線の観測デバイス</li>
 <li>デバイスが送信する観測データを各クラウドにキャストする</li>
 <li>Dashboardで加工、アクセスできるようにする</li>
 <li>マップ、グラフ、UI/UX、データバリデーション…課題はまだまだある</li>
</ul></div>
</div>
 <div id="outline-container-org8140c5c" class="outline-3">
 <h3 id="org8140c5c"> <a href="#org8140c5c">Matz Keynote</a></h3>
 <div class="outline-text-3" id="text-org8140c5c">
 <ul class="org-ul"> <li>Ruby 3.0</li>
 <li>互換性大事</li>
 <li>静的型付け言語が流行している。ほかの動的言語にも導入されている。Rubyにはどうか、答えはNo。</li>
 <li>言語仕様としては型を実装することはない。周辺ツールで行う</li>
 <li>型,LSP,チェッカ,…ツールを応援する</li>
 <li>パフォーマンスは重要。動機づけになる、問題を解決する</li>
 <li>パフォーマンスは評判に直結する</li>
 <li>マイクロベンチマーク(素数解析とか、単純な計算をもとにパフォーマンスを示す)は現実世界に影響するか → 実際にはしないけど、人々は信用しがちなので重要ではある</li>
 <li id="Ruby3x3">Ruby3.XはRuby3.0より3倍早い</li>
</ul></div>
</div>
 <div id="outline-container-org6c985aa" class="outline-3">
 <h3 id="org6c985aa"> <a href="#org6c985aa">Graphical Terminal User Interface of Ruby 3.1</a></h3>
 <div class="outline-text-3" id="text-org6c985aa">
 <ul class="org-ul"> <li>沢登り</li>
 <li>irbに補完機能をつける</li>
</ul></div>
</div>
 <div id="outline-container-orgd5272d2" class="outline-3">
 <h3 id="orgd5272d2"> <a href="#orgd5272d2">Ruby Committers vs the World</a></h3>
 <div class="outline-text-3" id="text-orgd5272d2">
 <ul class="org-ul"> <li>Rubyコミッターの人たちによる座談会</li>
 <li>cool</li>
</ul></div>
</div>
</div>
 <div id="outline-container-org89ab1f8" class="outline-2">
 <h2 id="org89ab1f8"> <a href="#org89ab1f8">Source code</a></h2>
 <div class="outline-text-2" id="text-org89ab1f8">
 <p>
本体コードで気になったところのメモ。
</p>
</div>
 <div id="outline-container-org876a012" class="outline-3">
 <h3 id="org876a012"> <a href="#org876a012">概要</a></h3>
 <div class="outline-text-3" id="text-org876a012">
 <ul class="org-ul"> <li>文法規則ファイル parse.y</li>
 <li>実際に字句解析する関数 parser_yylex</li>
 <li>予約語の一覧 ./defs/keywords</li>
 <li>Rubyは <a href="20210911104632-c_language.html#ID-656a0aa4-e5d3-416f-82d5-f909558d0639">C言語</a>で用いられるLex字句解析ツールは使用しない。パフォーマンス、特殊なルールが必要だったために字句解析のコードを自前で用意している</li>
 <li>字句解析->(トークン列)->構文解析->(ASTノード)->コンパイル。構文解析の段階でシンタックスチェックを行う</li>
 <li>Rubyをビルドする過程で、 <a href="20220508115739-bison.html#ID-3466af69-175d-4c59-977a-7b8216514999">Bison</a>という <a href="20220508115155-parser_generator.html#ID-df0c9fc5-2c5c-4026-b451-b8485bbd26cd">parser generator</a>を使ってパーサコードを生成する。Bisonは文法規則ルール(parse.y)からパーサコード(parse.c)を生成する</li>
</ul></div>
</div>
 <div id="outline-container-orgd82c97a" class="outline-3">
 <h3 id="orgd82c97a"> <a href="#orgd82c97a">Ripper</a></h3>
 <div class="outline-text-3" id="text-orgd82c97a">
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 11: </span>字句解析ライブラリRipperによって、ソースコードに対して生成するトークン列を確認できる。[0.コード位置、1.シンボルとして表示したトークン、2.対応したテキスト文字列、3.元の値]。</label> <pre class="src src-ruby">   <span class="org-builtin">require</span>  <span class="org-string">'ripper'</span>
   <span class="org-builtin">require</span>  <span class="org-string">'pp'</span>
  code =  <span class="org-string"><<STR</span>
 <span class="org-string">10.times do |n|</span>
 <span class="org-string">  puts n</span>
 <span class="org-string">end</span>
 <span class="org-string">STR</span>
   <span class="org-builtin">puts</span> code
  pp  <span class="org-type">Ripper</span>.lex(code)
</pre>
</div>

 <div class="results" id="org38037b5">
 <p>
10.times do |n|
  puts n
end
[[[1, 0], :on_int, “10”, END],
 [[1, 2], :on_period, “.”, DOT],
 [[1, 3], :on_ident, “times”, ARG],
 [[1, 8], :on_sp, “ ”, ARG],
 [[1, 9], :on_kw, “do”, BEG],
 [[1, 11], :on_sp, “ ”, BEG],
 [[1, 12], :on_op, “|”, BEG|LABEL],
 [[1, 13], :on_ident, “n”, ARG],
 [[1, 14], :on_op, “|”, BEG|LABEL],
 [[1, 15], :on_ignored_nl, “\n”, BEG|LABEL],
 [[2, 0], :on_sp, “  ”, BEG|LABEL],
 [[2, 2], :on_ident, “puts”, CMDARG],
 [[2, 6], :on_sp, “ ”, CMDARG],
 [[2, 7], :on_ident, “n”, END|LABEL],
 [[2, 8], :on_nl, “\n”, BEG],
 [[3, 0], :on_kw, “end”, END],
 [[3, 3], :on_nl, “\n”, BEG]]
</p>

</div>
</div>
</div>
 <div id="outline-container-org29f409c" class="outline-3">
 <h3 id="org29f409c"> <a href="#org29f409c">attr_accessor</a></h3>
 <div class="outline-text-3" id="text-org29f409c">
 <ul class="org-ul"> <li> <a href="https://github.com/kd-collective/ruby/blob/f5829e293583aa6ba6a1f1314ee22881d58a5f96/object.c#L2204">https://github.com/kd-collective/ruby/blob/f5829e293583aa6ba6a1f1314ee22881d58a5f96/object.c#L2204</a></li>
</ul></div>
</div>
</div>
 <div id="outline-container-orgb24fb56" class="outline-2">
 <h2 id="orgb24fb56"> <a href="#orgb24fb56">Tasks</a></h2>
 <div class="outline-text-2" id="text-orgb24fb56">
</div>
 <div id="outline-container-orgcba011b" class="outline-3">
 <h3 id="orgcba011b"> <a href="#orgcba011b"> <span class="todo TODO">TODO</span> </a> <a href="https://techracho.bpsinc.jp/hachi8833/2024_07_08/142763">Ruby研究シリーズ1: メソッド定義構文はどう決定され、どう進化したか（翻訳）｜TechRacho by BPS株式会社</a></h3>
 <div class="outline-text-3" id="text-orgcba011b">
 <p>
構文について。
</p>
</div>
</div>
 <div id="outline-container-org1ca975d" class="outline-3">
 <h3 id="org1ca975d"> <a href="#org1ca975d"> <span class="todo TODO">TODO</span> </a> <a href="https://gihyo.jp/book/2016/978-4-7741-7802-8">APIデザインケーススタディ ――Rubyの実例から学ぶ。問題に即したデザインと普遍の考え方：書籍案内｜技術評論社</a></h3>
 <div class="outline-text-3" id="text-org1ca975d">
 <p>
RubyライブラリをテーマにしたAPI設計の本。
</p>
</div>
</div>
 <div id="outline-container-org08b3873" class="outline-3">
 <h3 id="org08b3873"> <a href="#org08b3873"> <span class="todo TODO">TODO</span> Rubyのしくみ: Ruby Under a microscope</a></h3>
 <div class="outline-text-3" id="text-org08b3873">
 <ul class="org-ul"> <li>JavaコードをJVM命令列にコンパイルするように、Rubyコード(ASTノード)をYARV命令列…Rubyコードを実行する仮想マシンにコンパイルする
 <ul class="org-ul"> <li>コンパイルして、C言語と機械語になる</li>
</ul></li>
 <li>RubyVM::InstructionSequence で、Rubyでコードをどうコンパイルするかを確認できる</li>
</ul> <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 12: </span>YARVバイトコードを出力する</label> <pre class="src src-ruby">code =  <span class="org-string">"a = 1+2; a"</span>
 <span class="org-type">RubyVM</span>:: <span class="org-type">InstructionSequence</span>.compile(code).disasm
</pre>
</div>

 <div class="results" id="orgfb4b4d6">
 <p>
== disasm: #<ISeq:<compiled>@<compiled>:1 (1,0)-(1,10)> (catch: FALSE)
local table (size: 1, argc: 0 [opts: 0, rest: -1, post: 0, block: -1, kw: -1@-1, kwrest: -1])
[ 1] a@0
0000 putobject_INT2FIX_1_                                             (   1)[Li]
0001 putobject                              2
0003 opt_plus                               <calldata!mid:+, argc:1, ARGS_SIMPLE>[CcCr]
0005 setlocal_WC_0                          a@0
0007 getlocal_WC_0                          a@0
0009 leave
</p>

</div>

 <p>
計算に必要な1と2をpushしたあと、足し算している。
</p>

 <div class="org-src-container">
 <pre class="src src-ruby">code =  <span class="org-string">"a = 'hello' + 'world'; a"</span>
 <span class="org-type">RubyVM</span>:: <span class="org-type">InstructionSequence</span>.compile(code).disasm
</pre>
</div>

 <div class="results" id="orgf2314c7">
 <p>
== disasm: #<ISeq:<compiled>@<compiled>:1 (1,0)-(1,24)> (catch: FALSE)
local table (size: 1, argc: 0 [opts: 0, rest: -1, post: 0, block: -1, kw: -1@-1, kwrest: -1])
[ 1] a@0
0000 putstring                              “hello”                   (   1)[Li]
0002 putstring                              “world”
0004 opt_plus                               <calldata!mid:+, argc:1, ARGS_SIMPLE>[CcCr]
0006 setlocal_WC_0                          a@0
0008 getlocal_WC_0                          a@0
0010 leave
</p>

</div>

 <p>
文字列でも同様。
</p>

 <div class="org-src-container">
 <pre class="src src-ruby">code =  <span class="org-string">"a=[1, 2, 3]; a[0]=100;"</span>
 <span class="org-type">RubyVM</span>:: <span class="org-type">InstructionSequence</span>.compile(code).disasm
</pre>
</div>

 <div class="results" id="orgec28377">
 <p>
 <code>= disasm: #<ISeq:<compiled>@<compiled>:1 (1,0)-(1,22)> (catch: FALSE)
local table (size: 1, argc: 0 [opts: 0, rest: -1, post: 0, block: -1, kw: -1@-1, kwrest: -1])
[ 1] a@0
0000 duparray                               [1, 2, 3]                 (   1)[Li]
0002 setlocal_WC_0                          a@0
0004 putnil
0005 getlocal_WC_0                          a@0
0007 putobject_INT2FIX_0_
0008 putobject                              100
0010 setn                                   3
0012 opt_aset                               <calldata!mid:[]</code>, argc:2, ARGS_SIMPLE>[CcCr]
0014 pop
0015 leave
</p>

</div>
</div>
</div>
 <div id="outline-container-orgf97e546" class="outline-3">
 <h3 id="orgf97e546"> <a href="#orgf97e546"> <span class="todo TODO">TODO</span> Refactoring: Rubyエディション</a></h3>
 <div class="outline-text-3" id="text-orgf97e546">
</div>
</div>
 <div id="outline-container-orgf4a23fc" class="outline-3">
 <h3 id="orgf4a23fc"> <a href="#orgf4a23fc"> <span class="todo TODO">TODO</span> </a> <a href="https://danieljamescolson.com/blog/meta-factory">Metaprogramming All The Way Down</a></h3>
 <div class="outline-text-3" id="text-orgf4a23fc">
 <p>
FactoryBotの詳細な説明。
</p>
</div>
</div>
 <div id="outline-container-org3c97a66" class="outline-3">
 <h3 id="org3c97a66"> <a href="#org3c97a66"> <span class="todo TODO">TODO</span> </a> <a href="https://docs.ruby-lang.org/ja/latest/method/Enumerable/i/inject.html">Enumerable#inject (Ruby 3.0.0 リファレンスマニュアル)</a></h3>
 <div class="outline-text-3" id="text-org3c97a66">
 <p>
使えるようにしておく。まとめる。
</p>
</div>
</div>
 <div id="outline-container-org7fb28a4" class="outline-3">
 <h3 id="org7fb28a4"> <a href="#org7fb28a4"> <span class="todo TODO">TODO</span> </a> <a href="http://ruby-operators.herokuapp.com/rose_memoization">Ruby Operators</a></h3>
 <div class="outline-text-3" id="text-org7fb28a4">
 <p>
Rubyの特殊な演算子の名前と説明。
</p>
</div>
</div>
 <div id="outline-container-org1685784" class="outline-3">
 <h3 id="org1685784"> <a href="#org1685784"> <span class="todo TODO">TODO</span> Practical Ruby Project</a></h3>
 <div class="outline-text-3" id="text-org1685784">
 <ul class="org-ul"> <li>254, 265, 272, 283</li>
</ul> <p>
Rubyでのちょっと変わった、面白いプロジェクトを紹介している。
</p>
 <ul class="org-ul"> <li>経済ゲームを作る</li>
 <li>Lispを実装</li>
 <li>パーサを実装</li>
</ul></div>
</div>
 <div id="outline-container-org6b8042c" class="outline-3">
 <h3 id="org6b8042c"> <a href="#org6b8042c"> <span class="todo TODO">TODO</span> </a> <a href="https://magazine.rubyist.net/articles/0061/0061-ForeWord.html">0061号 コンピュータサイエンスが気になるプログラマに勧める書籍リスト</a></h3>
 <div class="outline-text-3" id="text-org6b8042c">
 <p>
書籍リスト。
</p>
</div>
</div>
 <div id="outline-container-org255cd20" class="outline-3">
 <h3 id="org255cd20"> <a href="#org255cd20"> <span class="todo TODO">TODO</span> </a> <a href="https://i.loveruby.net/ja/rhg/book/">Rubyソースコード完全解説</a></h3>
 <div class="outline-text-3" id="text-org255cd20">
 <p>
Rubyのコードの解説。
</p>
</div>
</div>
</div>
 <div id="outline-container-org5af7be3" class="outline-2">
 <h2 id="org5af7be3"> <a href="#org5af7be3">Archives</a></h2>
 <div class="outline-text-2" id="text-org5af7be3">
</div>
 <div id="outline-container-org15f252e" class="outline-3">
 <h3 id="org15f252e"> <a href="#org15f252e"> <span class="done DONE">DONE</span> The well-grounded rubyist  <code>[100%]</code></a></h3>
 <div class="outline-text-3" id="text-org15f252e">
</div>
 <div id="outline-container-org5f6e2b6" class="outline-4">
 <h4 id="org5f6e2b6"> <a href="#org5f6e2b6"> <span class="done DONE">DONE</span> 420</a></h4>
 <div class="outline-text-4" id="text-org5f6e2b6">
</div>
</div>
 <div id="outline-container-org0c45d88" class="outline-4">
 <h4 id="org0c45d88"> <a href="#org0c45d88"> <span class="done DONE">DONE</span> 430</a></h4>
 <div class="outline-text-4" id="text-org0c45d88">
</div>
</div>
 <div id="outline-container-org6a12a17" class="outline-4">
 <h4 id="org6a12a17"> <a href="#org6a12a17"> <span class="done DONE">DONE</span> 440</a></h4>
 <div class="outline-text-4" id="text-org6a12a17">
</div>
</div>
 <div id="outline-container-org4f7e99d" class="outline-4">
 <h4 id="org4f7e99d"> <a href="#org4f7e99d"> <span class="done DONE">DONE</span> 450</a></h4>
 <div class="outline-text-4" id="text-org4f7e99d">
 <p>

</p>
</div>
</div>
 <div id="outline-container-orgfea1489" class="outline-4">
 <h4 id="orgfea1489"> <a href="#orgfea1489"> <span class="done DONE">DONE</span> 460</a></h4>
 <div class="outline-text-4" id="text-orgfea1489">
 <p>

</p>
</div>
</div>
 <div id="outline-container-org7899a22" class="outline-4">
 <h4 id="org7899a22"> <a href="#org7899a22"> <span class="done DONE">DONE</span> 470</a></h4>
 <div class="outline-text-4" id="text-org7899a22">
 <p>

</p>
</div>
</div>
 <div id="outline-container-org2e417a2" class="outline-4">
 <h4 id="org2e417a2"> <a href="#org2e417a2"> <span class="done DONE">DONE</span> 480</a></h4>
 <div class="outline-text-4" id="text-org2e417a2">
 <p>

</p>
</div>
</div>
 <div id="outline-container-org8f02b02" class="outline-4">
 <h4 id="org8f02b02"> <a href="#org8f02b02"> <span class="done DONE">DONE</span> 490</a></h4>
 <div class="outline-text-4" id="text-org8f02b02">
 <p>

</p>
</div>
</div>
</div>
 <div id="outline-container-org52e947c" class="outline-3">
 <h3 id="org52e947c"> <a href="#org52e947c"> <span class="done CLOSE">CLOSE</span> 見てみるgemを選ぶ</a></h3>
 <div class="outline-text-3" id="text-org52e947c">
 <p>
まず探すのが大変なので、読んでみるgemを選ぶ。
手軽にできるのが良い。
</p>

 <p>
曖昧なタスクなのでcloseする。
</p>
</div>
</div>
 <div id="outline-container-org98f107e" class="outline-3">
 <h3 id="org98f107e"> <a href="#org98f107e"> <span class="done DONE">DONE</span> Rubyの公式リファレンスが読めるようになる本</a></h3>
 <div class="outline-text-3" id="text-org98f107e">
 <ul class="org-ul"> <li> <a href="https://zenn.dev/jnchito/books/how-to-read-ruby-reference">https://zenn.dev/jnchito/books/how-to-read-ruby-reference</a></li>
</ul></div>
</div>
 <div id="outline-container-orge3435ff" class="outline-3">
 <h3 id="orge3435ff"> <a href="#orge3435ff"> <span class="done CLOSE">CLOSE</span> おみくじ作り</a></h3>
 <div class="outline-text-3" id="text-orge3435ff">
 <p>
Ruby上で <a href="20210911183844-lisp.html#ID-18fbe00f-4ec8-4ca0-adfa-2d1381669642">LISP</a>を実装しておみくじを作ってみる。
</p>

 <p>
funcallを実装しようとして詰まる。単純な例だとできるようになったが、ネストしたときにうまく動いてない。
テストをちゃんと書くことと、デバッグ方法をちゃんとしないと厳しい。
</p>

 <p>
1週間でできそうということではじめたが、時間がかかるので後回し。
言語実装に取り組むのはもっとも抽象的で難しい。だが無限の可能性を持っていてめちゃくちゃ楽しい。
もっとも難しいことをしたおかげで、ほかのことに自信をもって取り組みやすくなったように思える。ほとんどのことは言語を実装することに比べれば、簡単だ。
</p>
</div>
</div>
 <div id="outline-container-org069486f" class="outline-3">
 <h3 id="org069486f"> <a href="#org069486f"> <span class="done DONE">DONE</span> 誤字修正</a></h3>
 <div class="outline-text-3" id="text-org069486f">
 <p>
るりまの誤字を発見した。いくつか発見してまとめてPRを送ろう。
</p>

 <ul class="org-ul"> <li>同じにように(Proc)</li>
</ul></div>
</div>
 <div id="outline-container-orgfda82f5" class="outline-3">
 <h3 id="orgfda82f5"> <a href="#orgfda82f5"> <span class="done DONE">DONE</span> </a> <a href="https://softantenna.com/blog/gem-codesearch/">gem-codesearch – rubygemsをフルテキストサーチすることができる豪快なソフト | ソフトアンテナ</a></h3>
 <div class="outline-text-3" id="text-orgfda82f5">
 <p>
面白そう。
</p>
</div>
</div>
 <div id="outline-container-orge2088ec" class="outline-3">
 <h3 id="orge2088ec"> <a href="#orge2088ec"> <span class="done DONE">DONE</span> </a> <a href="https://techracho.bpsinc.jp/hachi8833/2020_11_06/59639">Ruby: eachよりもmapなどのコレクションを積極的に使おう（社内勉強会）｜TechRacho by BPS株式会社</a></h3>
 <div class="outline-text-3" id="text-orge2088ec">
</div>
</div>
 <div id="outline-container-orgf2110b3" class="outline-3">
 <h3 id="orgf2110b3"> <a href="#orgf2110b3"> <span class="done CLOSE">CLOSE</span> rubocop issue(allow multiline)</a></h3>
 <div class="outline-text-3" id="text-orgf2110b3">
 <p>
 <a href="https://github.com/rubocop/rubocop/issues/9365">https://github.com/rubocop/rubocop/issues/9365</a>
どうにかなりそうではある。コメントルールをマルチラインに対応させる。
</p>

 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-comment-delimiter"># </span> <span class="org-comment">これは検知される</span>
foo(
   <span class="org-comment-delimiter"># </span> <span class="org-comment">aaaa</span>

  22
)

 <span class="org-comment-delimiter"># </span> <span class="org-comment">これはセーフ。これで間に合うように感じる。</span>
foo(
   <span class="org-comment-delimiter"># </span> <span class="org-comment">bbbb</span>
  22
)
</pre>
</div>

 <p>
コメントのあとは空白行を無視したいらしいが、あまり意味を感じない。実装はできるが、目的があまりよくないように思える。
</p>
</div>
</div>
 <div id="outline-container-org83d4918" class="outline-3">
 <h3 id="org83d4918"> <a href="#org83d4918"> <span class="done CLOSE">CLOSE</span> rubocop issue(yoda expression)</a></h3>
 <div class="outline-text-3" id="text-org83d4918">
 <p>
 <a href="https://github.com/rubocop/rubocop/issues/9222">https://github.com/rubocop/rubocop/issues/9222</a>
New cop for yoda expressions.
</p>

 <p>
TSLintにすでにあるので、実装の参考にすればいい。
 <a href="https://palantir.github.io/tslint/rules/binary-expression-operand-order/">Rule: binary-expression-operand-order</a>
</p>

 <dl class="org-dl"> <dt>二項演算子(Binary Operator)</dt> <dd>式を書いたときに、被演算子（変数とか値）が2つ登場する演算子</dd>
</dl> <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-keyword">def</span>  <span class="org-function-name">on_send</span>(node)
  method = node.method_name
  lhs = node.receiver
  rhs = node.first_argument

   <span class="org-comment-delimiter"># </span> <span class="org-comment">a.+(b)</span>
   <span class="org-comment-delimiter"># </span> <span class="org-comment">a -> lhs</span>
   <span class="org-comment-delimiter"># </span> <span class="org-comment">+ -> method</span>
   <span class="org-comment-delimiter"># </span> <span class="org-comment">b -> rhs</span>
 <span class="org-keyword">end</span>
</pre>
</div>

 <p>
conditionの方と合体させてもよさそう。TSLintはそうしてる。共通しているところは多い。全く別のcopにする方針で一応書けたが、本質的にcondition operatorとやってることは同じだ。
</p>

 <p>
方式が違うので難しいな。明らかにTSLintのやり方が簡潔に書かれているように見える。rubocopの方はゴテゴテと条件が多い。単に対応オペレータを増やすだけだが、よくわからない。conditionを前提に書かれているところも難しい。
</p>

 <p>
ちょっとやってどうにかなるものでなさそう。追加されないのには、理由があった。まず既存のがごちゃついてるので、それを整理する必要がある。
</p>
</div>
</div>
</div>
 <div id="outline-container-org0cbfef7" class="outline-2">
 <h2 id="org0cbfef7"> <a href="#org0cbfef7">References</a></h2>
 <div class="outline-text-2" id="text-org0cbfef7">
</div>
 <div id="outline-container-org67e8764" class="outline-3">
 <h3 id="org67e8764"> <a href="#org67e8764"></a> <a href="https://rurema.clear-code.com/3.0.0/doc/glossary.html">Ruby用語集 (Ruby 3.0.0)</a></h3>
 <div class="outline-text-3" id="text-org67e8764">
 <p>
おもしろい。
</p>
</div>
</div>
 <div id="outline-container-orgbb15896" class="outline-3">
 <h3 id="orgbb15896"> <a href="#orgbb15896"></a> <a href="http://franzejr.github.io/best-ruby/">Introduction | Ruby Tricks, Idiomatic Ruby, Refactorings and Best Practices</a></h3>
 <div class="outline-text-3" id="text-orgbb15896">
 <p>
Rubyのベストプラクティス集。
</p>
</div>
</div>
 <div id="outline-container-org8ed7f2a" class="outline-3">
 <h3 id="org8ed7f2a"> <a href="#org8ed7f2a"></a> <a href="https://practicingruby.com/articles/building-enumerable-and-enumerator">Building Enumerable & Enumerator in Ruby</a></h3>
 <div class="outline-text-3" id="text-org8ed7f2a">
 <p>
Enumerableの詳しい解説。
</p>
</div>
</div>
 <div id="outline-container-orge7c9986" class="outline-3">
 <h3 id="orge7c9986"> <a href="#orge7c9986"></a> <a href="https://blog.freedom-man.com/try-rubygem-codereading">RubyGemコードリーディングのすすめ</a></h3>
</div>
 <div id="outline-container-org14cf8e2" class="outline-3">
 <h3 id="org14cf8e2"> <a href="#org14cf8e2"></a> <a href="http://www.aoky.net/articles/why_poignant_guide_to_ruby/index.html">ホワイの(感動的)Rubyガイド</a></h3>
 <div class="outline-text-3" id="text-org14cf8e2">
 <p>
ちょっと変わったRuby入門。
</p>
</div>
</div>
 <div id="outline-container-orge39f648" class="outline-3">
 <h3 id="orge39f648"> <a href="#orge39f648"></a> <a href="https://docs.ruby-lang.org/ja/">プログラミング言語 Ruby リファレンスマニュアル</a></h3>
 <div class="outline-text-3" id="text-orge39f648">
 <p>
rubyのドキュメント。
</p>
</div>
</div>
 <div id="outline-container-org4af8d51" class="outline-3">
 <h3 id="org4af8d51"> <a href="#org4af8d51"></a> <a href="https://rubular.com/">Rubular: a Ruby regular expression editor</a></h3>
 <div class="outline-text-3" id="text-org4af8d51">
 <p>
Rubyの正規表現チェッカ。
</p>
</div>
</div>
</div>
 <div id="outline-container-org381fd10" class="outline-2">
 <h2 id="org381fd10"> <a href="#org381fd10">Backlinks</a></h2>
 <div class="outline-text-2" id="text-org381fd10">
 <ul class="org-ul"> <li> <a href="./20210508234743-emacs.html">Emacs</a></li>
 <li> <a href="./20210509095946-rails.html">Rails</a></li>
 <li> <a href="./20210615222732-project.html">project</a></li>
 <li> <a href="./20210624232811-digger.html">ローグライク作り</a></li>
 <li> <a href="./20210703105033-archive.html">Archive</a></li>
 <li> <a href="./20210805005543-docker.html">Docker</a></li>
 <li> <a href="./20210817003906-history.html">History</a></li>
 <li> <a href="./20210831223434-rspec.html">RSpec</a></li>
 <li> <a href="./20210831225930-test.html">Test</a></li>
 <li> <a href="./20210911104632-c_language.html">C言語</a></li>
 <li> <a href="./20210926150327-oss.html">OSS</a></li>
 <li> <a href="./20211030122204-graphql.html">GraphQL</a></li>
 <li> <a href="./20211107104950-linter.html">Linter</a></li>
 <li> <a href="./20211127104120-gemat.html">gemat</a></li>
 <li> <a href="./20220108003324-scala.html">Scala</a></li>
 <li> <a href="./20220508115739-bison.html">Bison</a></li>
 <li> <a href="./20240301T205049--kdoc-115-負の値が関わる剰余挙動の違い__wiki.html">KDOC 115: 負の値が関わる剰余挙動の違い</a></li>
 <li> <a href="./20240623T212808--kdoc-193-共通言語として役立つプログラミング言語__essay.html">KDOC 193: 共通言語として役立つプログラミング言語</a></li>
 <li> <a href="./index.html">Insomnia</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20210509095513-ruby.html"/>
  <id>https://kijimad.github.io/roam/20210509095513-ruby.html</id>
  <updated>2025-06-14T00:00:00+09:00</updated>
</entry>
<entry>
  <title>Rails</title>
  <author><name>root</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orge1ab8b8" class="outline-2">
 <h2 id="orge1ab8b8"> <a href="#orge1ab8b8">概要</a></h2>
 <div class="outline-text-2" id="text-orge1ab8b8">
 <p>
Railsは <a href="20210509095513-ruby.html#ID-cfd092c4-1bb2-43d3-88b1-9f647809e546">Ruby</a>でWEBサイトを作るためのフレームワーク。
</p>
</div>
</div>
 <div id="outline-container-org38d30fc" class="outline-2">
 <h2 id="org38d30fc"> <a href="#org38d30fc">Memo</a></h2>
 <div class="outline-text-2" id="text-org38d30fc">
</div>
 <div id="outline-container-orge59bf12" class="outline-3">
 <h3 id="orge59bf12"> <a href="#orge59bf12">集計時のN+1回避</a></h3>
 <div class="outline-text-3" id="text-orge59bf12">
 <p>
異なる条件の複数の件数を表示したいとき。たとえば↓レコードで、Receiptsに載っているproductの数ごとに集計したい。
</p>

 <ul class="org-ul"> <li>最終型</li>
</ul> <table> <colgroup> <col class="org-left"></col> <col class="org-right"></col></colgroup> <tbody> <tr> <td class="org-left">products.name</td>
 <td class="org-right">count</td>
</tr> <tr> <td class="org-left">おにぎり</td>
 <td class="org-right">2</td>
</tr> <tr> <td class="org-left">お茶</td>
 <td class="org-right">1</td>
</tr></tbody></table> <ul class="org-ul"> <li>Receipts</li>
</ul> <table> <colgroup> <col class="org-right"></col> <col class="org-right"></col> <col class="org-left"></col></colgroup> <tbody> <tr> <td class="org-right">id</td>
 <td class="org-right">product_id</td>
 <td class="org-left"> </td>
</tr> <tr> <td class="org-right">1</td>
 <td class="org-right">1</td>
 <td class="org-left"> </td>
</tr> <tr> <td class="org-right">2</td>
 <td class="org-right">1</td>
 <td class="org-left"> </td>
</tr> <tr> <td class="org-right">3</td>
 <td class="org-right">2</td>
 <td class="org-left"> </td>
</tr></tbody></table> <ul class="org-ul"> <li>Products</li>
</ul> <table> <colgroup> <col class="org-right"></col> <col class="org-left"></col></colgroup> <tbody> <tr> <td class="org-right">id</td>
 <td class="org-left">name</td>
</tr> <tr> <td class="org-right">1</td>
 <td class="org-left">おにぎり</td>
</tr> <tr> <td class="org-right">2</td>
 <td class="org-left">お茶</td>
</tr></tbody></table> <p>
こうやって書くと明らかにSQLのgroup関数を使おう、となる。が、実際のコードでは気づかずに条件を変えてeachで繰り返す…としてN+1にしてしまうことがある。こうする。
</p>

 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-type">Receipt</span>.group( <span class="org-type">Product</span>.arel_table[ <span class="org-constant">:id</span>]).count
</pre>
</div>

 <p>
このようなハッシュテーブルを返す。
</p>

 <div class="org-src-container">
 <pre class="src src-json">// product_id => count
{
  1=>2,
  2=>1
}
</pre>
</div>

 <p>
product_idがわかっているので、あとはProductをfindして名前を引けばいい。
</p>
</div>
</div>
 <div id="outline-container-orge3640d5" class="outline-3">
 <h3 id="orge3640d5"> <a href="#orge3640d5">エラー表示</a></h3>
 <div class="outline-text-3" id="text-orge3640d5">
 <p>
ブラウザでのエラー表示は、configで設定できる。
デフォルトのproduction, sandbox, stagingではfalseになっていて、エラーは表示されない。
これらの環境で表示するには、↓を加える。
</p>
 <div class="org-src-container">
 <pre class="src src-shell">config.consider_all_requests_local = true
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgaaf0320" class="outline-3">
 <h3 id="orgaaf0320"> <a href="#orgaaf0320">viewでcontrollerクラスの情報を得る</a></h3>
 <div class="outline-text-3" id="text-orgaaf0320">
 <p>
たまに必要なことがある。
controllerオブジェクトが柔軟な感じ。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 1: </span>viewファイル</label> <pre class="src src-ruby">controller.class  <span class="org-comment-delimiter"># </span> <span class="org-comment">=> #<Admin::UserController></span>
controller_name  <span class="org-comment-delimiter"># </span> <span class="org-comment">=> users</span>
controller_path  <span class="org-comment-delimiter"># </span> <span class="org-comment">=> admin/users</span>
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 2: </span>controllerが特定のmoduleをincludeしているか判定</label> <pre class="src src-ruby">controller.class.included_modules.include?( <span class="org-type">User</span>::concern)
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgd3b27e0" class="outline-3">
 <h3 id="orgd3b27e0"> <a href="#orgd3b27e0">定義ジャンプ</a></h3>
 <div class="outline-text-3" id="text-orgd3b27e0">
 <p>
 <a href="20210508234743-emacs.html#ID-1ad8c3d5-97ba-4905-be11-e6f2626127ad">Emacs</a>から定義ジャンプしたい。
ほかの言語やフレームワークだと <a href="20220305121848-lsp.html#ID-eb807577-cd69-478c-8f82-264243c67354">LSP</a>だのを使えばいいが、Railsではどうするのかよくわからない。
TAGSファイルを生成して使う。
</p>

 <div class="org-src-container">
 <pre class="src src-shell">gem install ripper-tags
ripper-tags -e -R -f TAGS
</pre>
</div>

 <p>
あとは、C-. で生成したタグを指定すればOK。
</p>

 <p>
gemも定義ジャンプ対象にしたい場合、作業ディレクトリ内にgemのソースコードを置けばよい。
</p>
 <div class="org-src-container">
 <pre class="src src-shell">bundle install --path vendor/bundle
</pre>
</div>

 <p>
 <a href="https://qiita.com/arakaji/items/0cdfa843a0e0233df153">Railsアプリ内をEmacsで自由にタグジャンプ! - Qiita</a>
</p>
</div>
</div>
 <div id="outline-container-orgd3e788c" class="outline-3">
 <h3 id="orgd3e788c"> <a href="#orgd3e788c">mailerはキューにためられるので、Serializationできない値は渡すとエラーになる</a></h3>
 <div class="outline-text-3" id="text-orgd3e788c">
 <p>
SerializationErrorになる。
メーラーに対して、シリアライゼーションできないオブジェクトは渡すことができない。
Railsから <a href="20220420225811-redis.html#ID-48b99bce-05ce-49af-921d-1e321e5a4f8b">Redis</a>に渡されるが、 <a href="20220420225811-redis.html#ID-48b99bce-05ce-49af-921d-1e321e5a4f8b">Redis</a>はkey-value storeの形でないと保存できないから。
 <a href="https://github.com/rails/rails/issues/18519">Mail and deliver_later doesn’t work with date argument · Issue #18519 · rails/rails</a>
</p>
</div>
</div>
 <div id="outline-container-org259500d" class="outline-3">
 <h3 id="org259500d"> <a href="#org259500d">join先のテーブルでwhere</a></h3>
 <div class="outline-text-3" id="text-org259500d">
 <p>
A -< B -< C -< D みたいな関係。
</p>
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 3: </span>mergeで関連テーブル先で条件を絞れる</label> <pre class="src src-ruby">a =  <span class="org-type">A</span>.joins( <span class="org-constant">b:</span> [ <span class="org-constant">c:</span>  <span class="org-constant">:d</span>])
      .where( <span class="org-constant">a:</span> {  <span class="org-constant">flag_a:</span>  <span class="org-constant">true</span> })
      .merge( <span class="org-type">D</span>.where( <span class="org-constant">flag_d:</span>  <span class="org-constant">true</span>))
</pre>
</div>

 <p>
同じ意味のダサい書き方。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby">a = a.joins( <span class="org-constant">b:</span> [ <span class="org-constant">c:</span>  <span class="org-constant">:d</span>])
      .where( <span class="org-constant">a:</span> {  <span class="org-constant">flag_a:</span>  <span class="org-constant">true</span> })
      .where( <span class="org-constant">d:</span> {  <span class="org-constant">flag_d:</span>  <span class="org-constant">true</span> })
</pre>
</div>
</div>
</div>
 <div id="outline-container-org1bf7634" class="outline-3">
 <h3 id="org1bf7634"> <a href="#org1bf7634"></a> <a href="20210805005543-docker.html#ID-1658782a-d331-464b-9fd7-1f8233b8b7f8">Docker</a>サンプル</h3>
 <div class="outline-text-3" id="text-org1bf7634">
 <p>
開発用環境のサンプル。サクっと起動したい用。
プロジェクトのあちこちで使ってるので、どこかにまとめたほうがよさそうだな。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 4: </span>Dockerfile</label> <pre class="src src-nil">FROM phusion/passenger-ruby27:latest

WORKDIR /tmp

ADD Gemfile /tmp/
ADD Gemfile.lock /tmp/
RUN gem update --system
RUN bundle install

COPY . /home/app/webapp
RUN usermod -u 1000 app
RUN chown -R app:app /home/app/webapp
WORKDIR /home/app/webapp

RUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
</pre>
</div>

 <p>
かぶり防止のため3001番ポートの方を変えてブラウザアクセスする。
</p>
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 5: </span>docker-compose.yml</label> <pre class="src src-yaml">version: '3'

services:
  rails:
    container_name: rails
    build: .
    command: bash -c 'rm -f tmp/pids/server.pid && bundle exec rails s -b 0.0.0.0'
    volumes:
      - .:/home/app/webapp
    ports:
      - "3001:3000"
</pre>
</div>
</div>
</div>
 <div id="outline-container-org9a8a482" class="outline-3">
 <h3 id="org9a8a482"> <a href="#org9a8a482">依存関係一切なくrails newする</a></h3>
 <div class="outline-text-3" id="text-org9a8a482">
 <p>
公式のrailsコンテナ内でrails newすればよい。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 6: </span>依存がない作成方法。user周りは権限問題のため⚠一行</label> <pre class="src src-shell">docker run -it --rm --user  <span class="org-string">"$(id -u):$(id -g)"</span> -v  <span class="org-string">"$PWD"</span>:/usr/src/app -w /usr/src/app rails rails new --skip-bundle --api --database postgresql .
</pre>
</div>

 <p>
依存がないbundle install。
ruby:2.7.5イメージで走らせる。
</p>
 <div class="org-src-container">
 <pre class="src src-shell">docker run --rm -v  <span class="org-string">"$PWD"</span>:/usr/src/app -w /usr/src/app ruby:2.7.5 bundle install
</pre>
</div>
</div>
</div>
 <div id="outline-container-org39e8bde" class="outline-3">
 <h3 id="org39e8bde"> <a href="#org39e8bde">factoryがないモデルを検知するタスク</a></h3>
 <div class="outline-text-3" id="text-org39e8bde">
 <p>
factoryはテストで使うので、fixtureほど忘れることはない。作り忘れたり、過去もので漏れているものがたまにあるので検知する。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 7: </span>rakeタスクファイルにて</label> <pre class="src src-ruby"> <span class="org-builtin">require</span>  <span class="org-string">"factory_bot_rails"</span>
 <span class="org-builtin">include</span>  <span class="org-type">FactoryBot</span>:: <span class="org-type">Syntax</span>:: <span class="org-type">Methods</span>
 <span class="org-builtin">include</span>  <span class="org-type">ActionDispatch</span>:: <span class="org-type">TestProcess</span>  <span class="org-comment-delimiter">#  </span> <span class="org-comment"># fixture_file_uploadメソッドでエラーになるため必要。</span>

task  <span class="org-constant">factory:</span>  <span class="org-constant">:environment</span>  <span class="org-keyword">do</span>
    msg = []
    errors = []

     <span class="org-type">Rails</span>.application.eager_load!
     <span class="org-type">ApplicationRecord</span>.subclasses.each  <span class="org-keyword">do</span> |model|
       <span class="org-keyword">begin</span>
        create(model.name.underscore.gsub( <span class="org-string">%r{/}</span>,  <span class="org-string">'_'</span>))  <span class="org-comment-delimiter"># </span> <span class="org-comment">factoryのメソッド</span>
         <span class="org-comment-delimiter"># </span> <span class="org-comment">UserPayment -> user_payment</span>
         <span class="org-comment-delimiter"># </span> <span class="org-comment">admin/user_payment -> admin_user_payment</span>
       <span class="org-keyword">rescue</span> => e
        errors << e  <span class="org-keyword">if</span> e.class ==  <span class="org-type">KeyError</span>
       <span class="org-keyword">end</span>
     <span class="org-keyword">end</span>

     <span class="org-builtin">puts</span> errors

     <span class="org-builtin">raise</span>  <span class="org-string">'登録されてないfactoryがあります'</span>  <span class="org-keyword">if</span> errors
   <span class="org-keyword">end</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-orga07339e" class="outline-3">
 <h3 id="orga07339e"> <a href="#orga07339e">レコードがないテーブルを検知するタスク</a></h3>
 <div class="outline-text-3" id="text-orga07339e">
 <p>
fixtureの作り忘れなどよくあるので、seedを実行したあとにチェックするタスクを走らせるとよい。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 8: </span>rakeタスクファイルにて</label> <pre class="src src-ruby">task  <span class="org-constant">lint:</span>  <span class="org-constant">:environment</span>  <span class="org-keyword">do</span>
  msg = []
  invalid =  <span class="org-constant">false</span>

   <span class="org-type">Rails</span>.application.eager_load!
   <span class="org-type">ApplicationRecord</span>.subclasses.each  <span class="org-keyword">do</span> |model|
    msg <<  <span class="org-string">"</span> <span class="org-variable-name">#{model.name}</span> <span class="org-string"> => </span> <span class="org-variable-name">#{model.count}</span> <span class="org-string">"</span>
    invalid =  <span class="org-constant">true</span>  <span class="org-keyword">if</span> model.count.zero?
   <span class="org-keyword">end</span>

   <span class="org-builtin">puts</span> msg

   <span class="org-builtin">raise</span>  <span class="org-string">'レコードがないテーブルがあります'</span>  <span class="org-keyword">if</span> invalid
 <span class="org-keyword">end</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgd92f28c" class="outline-3">
 <h3 id="orgd92f28c"> <a href="#orgd92f28c">seed_fu内でfactory botを使う</a></h3>
 <div class="outline-text-3" id="text-orgd92f28c">
 <p>
SeedFu.seedを実行するコンテキストでrequire, includeしておけばメソッドが使える。
</p>
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 9: </span>rakeタスクファイル</label> <pre class="src src-ruby"> <span class="org-builtin">require</span>  <span class="org-string">"factory_bot_rails"</span>
 <span class="org-builtin">include</span>  <span class="org-type">FactoryBot</span>:: <span class="org-type">Syntax</span>:: <span class="org-type">Methods</span>
 <span class="org-builtin">include</span>  <span class="org-type">ActionDispatch</span>:: <span class="org-type">TestProcess</span>
 <span class="org-type">SeedFu</span>.quiet =  <span class="org-constant">true</span>

task  <span class="org-constant">lint:</span>  <span class="org-constant">:environment</span>  <span class="org-keyword">do</span>
   <span class="org-type">SeedFu</span>.seed( <span class="org-string">"db/fixtures/</span> <span class="org-variable-name">#{env}</span> <span class="org-string">"</span>)
 <span class="org-keyword">end</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-org5b4f85a" class="outline-3">
 <h3 id="org5b4f85a"> <a href="#org5b4f85a">rakeタスク</a></h3>
 <div class="outline-text-3" id="text-org5b4f85a">
 <p>
rakeタスクは、普通ターミナルから実行するが、ほかから実行したいときがある(テストとか)。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 10: </span>rails_helper.rbにて</label> <pre class="src src-ruby">config.before( <span class="org-constant">:each</span>)  <span class="org-keyword">do</span>
   <span class="org-type">Rake</span>.application.tasks.each(& <span class="org-constant">:reenable</span>)
 <span class="org-keyword">end</span>
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 11: </span>テスト上にて実行する</label> <pre class="src src-ruby"> <span class="org-type">Rake</span>.application[ <span class="org-string">'namespace:command'</span>].invoke
</pre>
</div>

 <p>
のようにして、実行できる。
</p>
</div>
</div>
 <div id="outline-container-orga38cc5a" class="outline-3">
 <h3 id="orga38cc5a"> <a href="#orga38cc5a">非同期処理</a></h3>
 <div class="outline-text-3" id="text-orga38cc5a">
 <p>
Webにおける非同期処理はメールとか、外部とのAPI連携とか、比較的時間のかかる処理で用いられている。
とりあえず画面を返し、待たせないようにする。
</p>

 <p>
sidekiqは非同期タスクワーカー。
 <a href="20220420225811-redis.html#ID-48b99bce-05ce-49af-921d-1e321e5a4f8b">Redis</a>はインメモリデータベース。
</p>

 <p>
たとえばRails上でメールを送る処理が走るとき、railsはそのタスクをredisに送り、保持する(キューする)。sidekiqは、キューされたタスクを順次処理していく。
クラウドサービスの <a href="20220420225811-redis.html#ID-48b99bce-05ce-49af-921d-1e321e5a4f8b">Redis</a>を用いることで、ダウンしても未処理のジョブを失わない。
</p>
</div>
</div>
 <div id="outline-container-org34d2674" class="outline-3">
 <h3 id="org34d2674"> <a href="#org34d2674">preload, eager_load, includes</a></h3>
 <div class="outline-text-3" id="text-org34d2674">
 <p>
ややこしいがパフォーマンスを考えるうえで必要なので理解しておく。
</p>

 <ul class="org-ul"> <li> <a href="https://tech.stmn.co.jp/entry/2020/11/30/145159">preload、eager_load、includesの挙動を理解して使い分ける - stmn tech blog</a></li>
</ul> <table> <colgroup> <col class="org-left"></col> <col class="org-left"></col> <col class="org-left"></col> <col class="org-left"></col></colgroup> <thead> <tr> <th scope="col" class="org-left">メソッド</th>
 <th scope="col" class="org-left">キャッシュ</th>
 <th scope="col" class="org-left">クエリ</th>
 <th scope="col" class="org-left">用途</th>
</tr></thead> <tbody> <tr> <td class="org-left">joins</td>
 <td class="org-left">しない</td>
 <td class="org-left">単数</td>
 <td class="org-left">絞り込み</td>
</tr> <tr> <td class="org-left">eager_load</td>
 <td class="org-left">する</td>
 <td class="org-left">単数</td>
 <td class="org-left">キャッシュと絞り込み</td>
</tr> <tr> <td class="org-left">preload</td>
 <td class="org-left">する</td>
 <td class="org-left">複数</td>
 <td class="org-left">キャッシュ</td>
</tr> <tr> <td class="org-left">includes</td>
 <td class="org-left">する</td>
 <td class="org-left">場合による</td>
 <td class="org-left">キャッシュ、必要なら絞り込み</td>
</tr></tbody></table> <blockquote>
 <p>
そのテーブルとのJOINを禁止したいケースではpreloadを指定し、JOINしても問題なくてとりあえずeager loadingしたい場合はincludesを使い、必ずJOINしたい場合はeager_loadを使いましょう。
</p>
</blockquote>

 <ul class="org-ul"> <li> <a href="https://qiita.com/ryosuketter/items/097556841ec8e1b2940f">ActiveRecordのincludesは使わずにpreloadとeager_loadを使い分ける理由 - Qiita</a></li>
</ul> <table> <colgroup> <col class="org-left"></col> <col class="org-left"></col> <col class="org-left"></col> <col class="org-left"></col> <col class="org-left"></col></colgroup> <thead> <tr> <th scope="col" class="org-left">メソッド</th>
 <th scope="col" class="org-left">SQL(クエリ)</th>
 <th scope="col" class="org-left">キャッシュ</th>
 <th scope="col" class="org-left">アソシエーション先のデータ参照</th>
 <th scope="col" class="org-left">デメリット</th>
</tr></thead> <tbody> <tr> <td class="org-left">joins</td>
 <td class="org-left">INNER JOIN</td>
 <td class="org-left">しない</td>
 <td class="org-left">できる</td>
 <td class="org-left">N+1問題</td>
</tr> <tr> <td class="org-left">preload</td>
 <td class="org-left">JOINせずそれぞれSELECT</td>
 <td class="org-left">する</td>
 <td class="org-left">できない</td>
 <td class="org-left">IN句大きくなりがち</td>
</tr> <tr> <td class="org-left">eager_load</td>
 <td class="org-left">LEFT JOIN</td>
 <td class="org-left">する</td>
 <td class="org-left">できる</td>
 <td class="org-left">LEFT JOINなので、相手が存在しなくても全部ロードしてしまう</td>
</tr> <tr> <td class="org-left">includes</td>
 <td class="org-left">場合による</td>
 <td class="org-left">する</td>
 <td class="org-left">できる</td>
 <td class="org-left">ただしく理解してないと挙動がコントロールできない</td>
</tr></tbody></table> <ul class="org-ul"> <li>preload
 <ul class="org-ul"> <li>多対多のアソシエーションの場合
 <ul class="org-ul"> <li> <a href="20210725100835-sql.html#ID-8b69b8d4-1612-4dc5-8412-96b431fdd101">SQL</a>を分割して取得するため、レスポンスタイムが早くなるため</li>
</ul></li>
 <li>アソシエーション先のデータ参照ができない</li>
 <li>データ量が大きいと、メモリを圧迫する可能性がある</li>
</ul></li>

 <li>eager_load
 <ul class="org-ul"> <li>1対1あるいはN対1のアソシエーションをJOINする場合</li>
 <li>JOIN先のテーブルを参照したい場合</li>
</ul></li>

 <li>joins
 <ul class="org-ul"> <li>メモリの使用量を必要最低限に抑えたい場合</li>
 <li>JOINした先のデータを参照せず、絞り込み結果だけが必要な場合</li>
</ul></li>

 <li>includes
 <ul class="org-ul"> <li>なるべく使わないほうがいい</li>
 <li>条件によってpreloadとeager_loadを振り分ける</li>
</ul></li>

 <li> <a href="https://qiita.com/k0kubun/items/80c5a5494f53bb88dc58">ActiveRecordのjoinsとpreloadとincludesとeager_loadの違い - Qiita</a></li>
</ul></div>
</div>
 <div id="outline-container-org32322a6" class="outline-3">
 <h3 id="org32322a6"> <a href="#org32322a6">Railsの</a> <a href="20210926150327-oss.html#ID-bb71747d-8599-4aee-b747-13cb44c05773">OSS</a></h3>
 <div class="outline-text-3" id="text-org32322a6">
 <p>
Railsをどう書くかの参考になりそうなリポジトリ。
</p>

 <ul class="org-ul"> <li> <a href="https://github.com/gitlabhq/gitlabhq">gitlabhq/gitlabhq: GitLab CE Mirror | Please open new issues in our issue tracker on GitLab.com</a></li>
 <li> <a href="https://github.com/rubygems/rubygems.org">rubygems/rubygems.org: The Ruby community’s gem hosting service.</a></li>
 <li> <a href="https://github.com/discourse/discourse">discourse/discourse: A platform for community discussion. Free, open, simple.</a></li>
 <li> <a href="https://github.com/mastodon/mastodon">mastodon/mastodon: Your self-hosted, globally interconnected microblogging community</a></li>
 <li> <a href="https://github.com/diaspora/diaspora">diaspora/diaspora: A privacy-aware, distributed, open source social network.</a></li>
 <li> <a href="https://github.com/forem/forem">forem/forem: For empowering community 🌱</a></li>
</ul></div>
</div>
 <div id="outline-container-orgaa5b3d8" class="outline-3">
 <h3 id="orgaa5b3d8"> <a href="#orgaa5b3d8">ルーティングのファイルと名前空間を切り出す</a></h3>
 <div class="outline-text-3" id="text-orgaa5b3d8">
 <p>
 <a href="https://qiita.com/sibakenY/items/973fbe635a7f91ae105c">Railsのルーティングをdrawを使ってまとめる - Qiita</a>
</p>

 <p>
ファイル読み込みでルーティングのDSLを評価するメソッドを作る。
これによって、ファイルで名前空間を分割できる。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 12: </span>config/initializers/draw_routes.rb</label> <pre class="src src-ruby"> <span class="org-keyword">module</span>  <span class="org-type">DrawRoute</span>
   <span class="org-type">RoutesNotFound</span> =  <span class="org-type">Class</span>.new( <span class="org-type">StandardError</span>)

   <span class="org-keyword">def</span>  <span class="org-function-name">draw</span>(routes_name)
    drawn_any = draw_route(routes_name)

    drawn_any ||  <span class="org-builtin">raise</span>( <span class="org-type">RoutesNotFound</span>,  <span class="org-string">"Cannot find </span> <span class="org-variable-name">#{routes_name}</span> <span class="org-string">"</span>)
   <span class="org-keyword">end</span>

   <span class="org-keyword">def</span>  <span class="org-function-name">route_path</span>(routes_name)
     <span class="org-type">Rails</span>.root.join(routes_name)
   <span class="org-keyword">end</span>

   <span class="org-keyword">def</span>  <span class="org-function-name">draw_route</span>(routes_name)
    path = route_path( <span class="org-string">"config/routes/</span> <span class="org-variable-name">#{routes_name}</span> <span class="org-string">.rb"</span>)
     <span class="org-keyword">if</span>  <span class="org-type">File</span>.exist?(path)
      instance_eval( <span class="org-type">File</span>.read(path))
       <span class="org-constant">true</span>
     <span class="org-keyword">else</span>
       <span class="org-constant">false</span>
     <span class="org-keyword">end</span>
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>

 <span class="org-type">ActionDispatch</span>:: <span class="org-type">Routing</span>:: <span class="org-type">Mapper</span>.prepend  <span class="org-type">DrawRoute</span>
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 13: </span>config/routes/admin.rb</label> <pre class="src src-ruby">namespace  <span class="org-constant">:admin</span>  <span class="org-keyword">do</span>
  resources  <span class="org-constant">:users</span>
 <span class="org-keyword">end</span>
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 14: </span>routes.rb</label> <pre class="src src-ruby"> <span class="org-type">Rails</span>.application.routes.draw  <span class="org-keyword">do</span>
  draw  <span class="org-constant">:admin</span>
 <span class="org-keyword">end</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-org15a49ed" class="outline-3">
 <h3 id="org15a49ed"> <a href="#org15a49ed">時間関係</a></h3>
 <div class="outline-text-3" id="text-org15a49ed">
 <p>
 <a href="https://qiita.com/jnchito/items/cae89ee43c30f5d6fa2c">RubyとRailsにおけるTime, Date, DateTime, TimeWithZoneの違い - Qiita</a>
</p>
</div>
</div>
 <div id="outline-container-orge437df5" class="outline-3">
 <h3 id="orge437df5"> <a href="#orge437df5">ネストしたトランザクション</a></h3>
 <div class="outline-text-3" id="text-orge437df5">
 <p>
ネストしたトランザクションでは内側のロールバックが、無視されるケースがある。
トランザクションを再利用するため。
なので、トランザクションを再利用しないように明示すればよい。
</p>

 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-type">ActiveRecord</span>:: <span class="org-type">Base</span>.transaction( <span class="org-constant">joinable:</span>  <span class="org-constant">false</span>,  <span class="org-constant">requires_new:</span>  <span class="org-constant">true</span>)  <span class="org-keyword">do</span>
   <span class="org-comment-delimiter"># </span> <span class="org-comment">inner code</span>
 <span class="org-keyword">end</span>
</pre>
</div>

 <p>
 <a href="https://qiita.com/jnchito/items/930575c18679a5dbe1a0">【翻訳】ActiveRecordにおける、ネストしたトランザクションの落とし穴 - Qiita</a>
 <a href="https://api.rubyonrails.org/classes/ActiveRecord/Transactions/ClassMethods.html">ActiveRecord::Transactions::ClassMethods</a>
</p>
</div>
</div>
 <div id="outline-container-org954db42" class="outline-3">
 <h3 id="org954db42"> <a href="#org954db42">Fakerでboolean生成</a></h3>
 <div class="outline-text-3" id="text-org954db42">
 <p>
↓以下2つは同じ意味。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 15: </span>fakerで</label> <pre class="src src-rb">Faker::Boolean.boolean
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 16: </span>sampleで</label> <pre class="src src-ruby">[ <span class="org-constant">true</span>,  <span class="org-constant">false</span>].sample
</pre>
</div>
</div>
</div>
 <div id="outline-container-org3181347" class="outline-3">
 <h3 id="org3181347"> <a href="#org3181347">マイグレーションでカラムの型を変える</a></h3>
 <div class="outline-text-3" id="text-org3181347">
 <p>
usersのdeleted_atカラムをinteger型 から datetime型に変える例。
</p>

 <ol class="org-ol"> <li>一時カラムを作ってそこで値を作成する</li>
 <li>旧カラムを削除する</li>
 <li>一時カラムの名前を変えて新カラムにする</li>
</ol> <p>
 <code>ActiveRecord::Base.connection.execute(sql)</code> を使うと生の <a href="20210725100835-sql.html#ID-8b69b8d4-1612-4dc5-8412-96b431fdd101">SQL</a>を実行できる。
</p>

 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-keyword">def</span>  <span class="org-function-name">up</span>
  connection.execute  <span class="org-string">'ALTER TABLE users ADD deleted_at_tmp datetime'</span>
  connection.execute  <span class="org-string">'UPDATE users SET deleted_at_tmp = FROM_UNIXTIME(deleted_at)'</span>
  connection.execute  <span class="org-string">'ALTER TABLE users DROP COLUMN deleted_at'</span>
  connection.execute  <span class="org-string">'ALTER TABLE users CHANGE deleted_at_tmp deleted_at datetime'</span>
 <span class="org-keyword">end</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-orge35ffca" class="outline-3">
 <h3 id="orge35ffca"> <a href="#orge35ffca">便利なデバッガweb-console</a></h3>
 <div class="outline-text-3" id="text-orge35ffca">
 <p>
view内でブレークポイントを設定し、ブラウザ上でコンソールを立ち上げることができるライブラリ。
Railsにデフォルトで入っている。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 18: </span>任意のview, controllerに追加する</label> <pre class="src src-html"><% console %>
</pre>
</div>

 <p>
あとは該当箇所にブラウザでアクセスするとコンソールが立ち上がる。
再実行性がないので、テストでやるのが一番だとは感じる。
</p>
</div>
</div>
 <div id="outline-container-org35a3f59" class="outline-3">
 <h3 id="org35a3f59"> <a href="#org35a3f59">update_atを更新しない</a></h3>
 <div class="outline-text-3" id="text-org35a3f59">
 <p>
バッチ処理でいじった場合は更新するとよくないことがある。
</p>

 <ul class="org-ul"> <li> <a href="https://ohbarye.hatenablog.jp/entry/2016/08/02/213444">更新時に updated_at, created_at を更新しない - valid,invalid</a></li>
</ul> <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-comment-delimiter"># </span> <span class="org-comment">Active Record レベル</span>
 <span class="org-type">ActiveRecord</span>:: <span class="org-type">Base</span>.record_timestamps =  <span class="org-constant">false</span>

 <span class="org-comment-delimiter"># </span> <span class="org-comment">モデルのみ</span>
 <span class="org-type">User</span>.record_timestamps =  <span class="org-constant">false</span>

 <span class="org-comment-delimiter"># </span> <span class="org-comment">インスタンスのみ</span>
user.record_timestamps =  <span class="org-constant">false</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-org92b4bf3" class="outline-3">
 <h3 id="org92b4bf3"> <a href="#org92b4bf3">save(validate: false)</a></h3>
 <div class="outline-text-3" id="text-org92b4bf3">
 <p>
バリデーションが不要なとき、  <code>user.save!(validate: false)</code> とすると無効化できる。
データを不整合を直したいけどほかのバリデーションにかかる、ようなときに使う。
</p>

 <p>
あるいは  <code>assign_attribute</code> でもよい。
</p>
</div>
</div>
 <div id="outline-container-org89f9039" class="outline-3">
 <h3 id="org89f9039"> <a href="#org89f9039">presence: trueなのにnilがあるレコードを検知する</a></h3>
 <div class="outline-text-3" id="text-org89f9039">
 <p>
モデルバリデーションがかかっていても、既存のレコードはnilを含む可能性がある。
モデルバリデーションは入出力のみ監視する。だから既存レコードに残っている可能性がある。
この場合、編集できなくて不便。検知してテーブルにも制約をかけると安全になる。DBバリデーションは、既存レコードにも入ってないことを保証できる。
</p>

 <p>
直にテーブルの制約を辿る方法がわからないのでレコードを探索する感じになった。レコードがたくさんある環境で実行すると検知できる。全部辿るのでクソ重い。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby">msgs = {}

 <span class="org-type">Rails</span>.application.eager_load!
 <span class="org-type">ApplicationRecord</span>.subclasses.each  <span class="org-keyword">do</span> |model|
  presence_validates = model.validators.select { |v| v.class.to_s.include?( <span class="org-string">'ActiveRecord::Validations::PresenceValidator'</span>) }
  presence_validates.each  <span class="org-keyword">do</span> |presence_validate|
    model.all.find_each  <span class="org-keyword">do</span> |record|
      msgs[ <span class="org-string">"</span> <span class="org-variable-name">#{record.class}</span> <span class="org-string"> </span> <span class="org-variable-name">#{presence_validate.attributes.first}</span> <span class="org-string">"</span>] =  <span class="org-string">'❌ presence: trueあるのにnilレコードがある><'</span>  <span class="org-keyword">unless</span> record.send(presence_validate.attributes.first)
     <span class="org-keyword">end</span>
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>

pp msgs.sort  <span class="org-comment-delimiter">#  </span> <span class="org-comment">[["User name", "❌ presence: trueあるのにnilレコードがある><"]]</span>
</pre>
</div>

 <p>
まずnilをなくす。それからテーブルのバリデーションを追加する。
</p>
</div>
</div>
 <div id="outline-container-orga6a00f2" class="outline-3">
 <h3 id="orga6a00f2"> <a href="#orga6a00f2">バックエンドエンジニアというときの正確なスコープ</a></h3>
 <div class="outline-text-3" id="text-orga6a00f2">
 <p>
APIサーバとしての利用、バックとフロントの分割が主流になっている。
採用者がRailsのバックエンド開発者を探している、というときはAPI開発経験がある人材を探しているといえる。
</p>
</div>
</div>
 <div id="outline-container-org3a93d02" class="outline-3">
 <h3 id="org3a93d02"> <a href="#org3a93d02">テストによるスマートな画像確認</a></h3>
 <div class="outline-text-3" id="text-org3a93d02">
 <p>
system specでスクショをとって確認する。
わざわざ用意して確認しない。
</p>

 <p>
TDDを徹底し、一切ブラウザ確認せずにプロダクトを開発した、という偉人もいる。
</p>
</div>
</div>
 <div id="outline-container-org505309b" class="outline-3">
 <h3 id="org505309b"> <a href="#org505309b">オートロードするgem: zeitwerk</a></h3>
 <div class="outline-text-3" id="text-org505309b">
 <p>
zeitwerkはオートロードするgem。Rails 6で使われている。
Railsでrequireしなくていいのはこれを使っているから。
 <a href="https://github.com/fxn/zeitwerk">fxn/zeitwerk: Efficient and thread-safe code loader for Ruby</a>
</p>
</div>
</div>
 <div id="outline-container-org34b38a0" class="outline-3">
 <h3 id="org34b38a0"> <a href="#org34b38a0">デフォルトスコープを無視できるreorder</a></h3>
 <div class="outline-text-3" id="text-org34b38a0">
 <p>
デフォルトスコープを無視できる。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 19: </span>updated_atをソートに使う</label> <pre class="src src-ruby"> <span class="org-type">User</span>.order( <span class="org-constant">:id</span>).reorder( <span class="org-constant">:updated_at</span>)
</pre>
</div>
</div>
</div>
 <div id="outline-container-org1982ab0" class="outline-3">
 <h3 id="org1982ab0"> <a href="#org1982ab0">開発用データの用意</a></h3>
 <div class="outline-text-3" id="text-org1982ab0">
 <p>
開発用データにはいくつかの方法がある。
</p>

 <ul class="org-ul"> <li>seedデータで用意する。毎回必要なときにresetして開発する
 <ul class="org-ul"> <li>クリーンな環境で再現性が高い開発を行える。</li>
 <li>早い</li>
</ul></li>

 <li>本番データに近いデータで行う
 <ul class="org-ul"> <li>デザインや性能の問題に気づきやすい</li>
 <li>ユースケースがイメージしやすい</li>
 <li>データの準備が楽</li>
 <li>整合性のメンテナンスが必要</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org9c5cd2d" class="outline-3">
 <h3 id="org9c5cd2d"> <a href="#org9c5cd2d">ALTER TABLEは重い</a></h3>
 <div class="outline-text-3" id="text-org9c5cd2d">
 <p>
テーブルのコピーを作るので重い。
bulk: trueをつけるとALTER TABLEをまとめるので高速になる。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-keyword">def</span>  <span class="org-function-name">up</span>
  change_table  <span class="org-constant">:legal_engine_forms</span>,  <span class="org-constant">bulk:</span>  <span class="org-constant">true</span>  <span class="org-keyword">do</span> |t|
    ...
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgb5517a9" class="outline-3">
 <h3 id="orgb5517a9"> <a href="#orgb5517a9">テーブル名にプレフィクスを設定する</a></h3>
 <div class="outline-text-3" id="text-orgb5517a9">
 <p>
特定の機能に対して、関係したテーブルを複数つくるとき、プレフィクスのような形でモデル名やテーブル名を決めることがある。
admin_user、admin_page、admin_permissionとか。
こうすることの問題点: 衝突を避けるためにmodel名とテーブル名が長くなる。ディレクトリも見にくくなる。一語だとまだいいのだが、複数名になるとつらくなる。
</p>

 <p>
解決のためには、moduleを定義し、内部でtable_name_prefixを設定するといい。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 20: </span>modelにて</label> <pre class="src src-ruby"> <span class="org-keyword">module</span>  <span class="org-type">Admin</span>
   <span class="org-keyword">def</span>  <span class="org-keyword">self</span>. <span class="org-function-name">table_name_prefix</span>
     <span class="org-string">'admin_'</span>
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>

 <span class="org-keyword">module</span>  <span class="org-type">Admin</span>
   <span class="org-keyword">class</span>  <span class="org-type">User</span> <  <span class="org-type">ApplicationRecord</span>
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>
</pre>
</div>

 <p>
こうするとモデル名はAdmin::Userで、テーブル名はadmin_usersになりわかりやすい。
</p>
</div>
</div>
 <div id="outline-container-org021db06" class="outline-3">
 <h3 id="org021db06"> <a href="#org021db06">Rails環境でバッチ処理する</a></h3>
 <div class="outline-text-3" id="text-org021db06">
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 21: </span>Rails環境でのクラスを実行できる</label> <pre class="src src-ruby">rails runner  <span class="org-string">"User.first"</span>
rails r  <span class="org-string">"User.first"</span>
</pre>
</div>

 <p>
サービスクラス化したコマンドを実行するときに使える。
</p>
</div>
</div>
 <div id="outline-container-org6222654" class="outline-3">
 <h3 id="org6222654"> <a href="#org6222654">routesの制約</a></h3>
 <div class="outline-text-3" id="text-org6222654">
 <div class="org-src-container">
 <pre class="src src-ruby">constraints(-> (req) { req.env[ <span class="org-string">"HTTP_USER_AGENT"</span>] =~  <span class="org-string">/iPhone/</span> })  <span class="org-keyword">do</span>
  resources  <span class="org-constant">:iphones</span>
 <span class="org-keyword">end</span>
</pre>
</div>

 <p>
 <a href="https://api.rubyonrails.org/v6.0.2/classes/ActionDispatch/Routing/Mapper/Scoping.html#method-i-constraints-label-Dynamic+request+matching">ActionDispatch::Routing::Mapper::Scoping</a>
</p>
</div>
</div>
 <div id="outline-container-org92c809b" class="outline-3">
 <h3 id="org92c809b"> <a href="#org92c809b">大量のroutes変更を楽に確認する</a></h3>
 <div class="outline-text-3" id="text-org92c809b">
 <p>
redirect設定やリファクタリングでroutesを大量に変更して、挙動の変更を追いたい場合。
rails routesの結果のdiffを取れば、楽に確認できる。
</p>
</div>
</div>
 <div id="outline-container-org043aff9" class="outline-3">
 <h3 id="org043aff9"> <a href="#org043aff9">create_or_find_by</a></h3>
 <div class="outline-text-3" id="text-org043aff9">
 <p>
データベースのユニーク制約を使って作成、できなければ初めの1件を取得する。
find_or_create_byでは作成されるまでに別プロセスによって作成されている可能性があったので、その問題を解決した処理。
 <code>create_or_find_by!</code> はエラーの時に例外が発生する。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 22: </span>データベースのユニーク制約を使って作成、できなければ初めの1件を取得</label> <pre class="src src-ruby"> <span class="org-type">User</span>.create_or_find_by( <span class="org-constant">name:</span>  <span class="org-string">'aaa'</span>)
</pre>
</div>

 <p>
 <a href="https://railsdoc.com/page/create_or_find_by">create_or_find_by | Railsドキュメント</a>
</p>
</div>
</div>
 <div id="outline-container-org2988d13" class="outline-3">
 <h3 id="org2988d13"> <a href="#org2988d13">使われてないファイルを検索する</a></h3>
 <div class="outline-text-3" id="text-org2988d13">
 <p>
assetsは相対パスが利用されないので絶対パスで検索してヒットしなければ未使用と判断できる、とのこと。
</p>
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 23: </span>検査タスクの例</label> <pre class="src src-ruby">namespace  <span class="org-constant">:assets</span>  <span class="org-keyword">do</span>
  desc  <span class="org-string">'prune needless image file'</span>
  task  <span class="org-string">'prune:images'</span> =>  <span class="org-constant">:environment</span>  <span class="org-keyword">do</span>
    base =  <span class="org-type">Rails</span>.root.join( <span class="org-string">'app/assets/images/'</span>)

     <span class="org-type">Dir</span>[ <span class="org-type">Rails</span>.root.join( <span class="org-string">'app/assets/images/**/*.{jpg,jpeg,gif,png,svg}'</span>)].each  <span class="org-keyword">do</span> |path|
      target_path = path.to_s.gsub( <span class="org-string">/</span> <span class="org-variable-name">#{base}</span> <span class="org-string">/</span>,  <span class="org-string">''</span>)
       <span class="org-builtin">puts</span>  <span class="org-string">"execute: git grep '</span> <span class="org-variable-name">#{target_path}</span> <span class="org-string">'"</span>
      res =  <span class="org-string">`git grep '</span> <span class="org-variable-name">#{target_path}</span> <span class="org-string">'`</span>

       <span class="org-keyword">if</span> res.empty?
         <span class="org-builtin">puts</span>  <span class="org-string">"execute: rm </span> <span class="org-variable-name">#{path}</span> <span class="org-string">"</span>
         <span class="org-type">FileUtils</span>.rm path
         <span class="org-builtin">puts</span>  <span class="org-string">'=> removed'</span>
       <span class="org-keyword">else</span>
         <span class="org-builtin">puts</span>  <span class="org-string">'=> used somewhere'</span>
       <span class="org-keyword">end</span>

       <span class="org-builtin">puts</span>
     <span class="org-keyword">end</span>
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgb2ecc19" class="outline-3">
 <h3 id="orgb2ecc19"> <a href="#orgb2ecc19"></a> <a href="20210509095513-ruby.html#ID-cfd092c4-1bb2-43d3-88b1-9f647809e546">Ruby</a>バージョンアップデート</h3>
 <div class="outline-text-3" id="text-orgb2ecc19">
 <p>
超強い人が言っていたメモ。
コマンドを組み合わせて一気に置換して検討していく。
</p>
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 24: </span>2.6.5 -> 2.7.1に全体を置換する</label> <pre class="src src-shell">git grep -l  <span class="org-string">'2\.6\.5'</span> | xargs sed -i  <span class="org-string">'s/2\.6\.5/2.7.1/g'</span>
</pre>
</div>
 <p>
vendor/bundle を削除して、bundle install。
マイナーバージョンを変更した場合は .rubocop.yml の RUBY_VERSION を修正(parser gemの指定)。
</p>
</div>
</div>
 <div id="outline-container-org1fc99e6" class="outline-3">
 <h3 id="org1fc99e6"> <a href="#org1fc99e6">新規作成時はform表示しない</a></h3>
 <div class="outline-text-3" id="text-org1fc99e6">
 <p>
formを共通化しているようなとき。
このカラムはedit時のみ出したい、というようなことがある。
</p>
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 25: </span>new時persistされてないので表示されない</label> <pre class="src src-ruby">form_for  <span class="org-keyword">do</span> |f|
  f.number_field  <span class="org-constant">:position</span>  <span class="org-keyword">if</span>  <span class="org-variable-name">@content_category</span>.persisted?
 <span class="org-keyword">end</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgc4588c3" class="outline-3">
 <h3 id="orgc4588c3"> <a href="#orgc4588c3">一部アクションだけvalidation</a></h3>
 <div class="outline-text-3" id="text-orgc4588c3">
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 26: </span>onでアクションを指定できる。</label> <pre class="src src-ruby">validates  <span class="org-constant">:user_id</span>,  <span class="org-constant">presence:</span>  <span class="org-constant">true</span>,  <span class="org-constant">:on</span> =>  <span class="org-constant">:create</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-orge1d4c70" class="outline-3">
 <h3 id="orge1d4c70"> <a href="#orge1d4c70">便利な日付操作</a></h3>
 <div class="outline-text-3" id="text-orge1d4c70">
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 27: </span>Time.zone</label> <pre class="src src-ruby"> <span class="org-type">Time</span>.zone.yesterday
 <span class="org-type">Time</span>.zone.today.ago(7.days)
</pre>
</div>

 <p>
 <a href="https://qiita.com/mmmm/items/efda48f1ac0267c95c29">Railsでの日付操作でよく使うものまとめ - Qiita</a>
</p>
</div>
</div>
 <div id="outline-container-org26920cb" class="outline-3">
 <h3 id="org26920cb"> <a href="#org26920cb">安全に関連カラムを追加する</a></h3>
 <div class="outline-text-3" id="text-org26920cb">
 <p>
Blogにuser_idを後から追加したい、みたいなとき。User -< Blog。
最初にnullableで外部キーを作成する。
</p>

 <p>
次に、新規作成時にmodelでvalidationをかける。
すると既存レコードの外部キーはnull、新しくできるレコードは外部キーありという状態になる。
外部キーなしが増えることはない。移行をする。
nullのレコードがゼロになってから外部キー制約をつけて関連カラム追加完了。
</p>
</div>
</div>
 <div id="outline-container-orgd924452" class="outline-3">
 <h3 id="orgd924452"> <a href="#orgd924452">関連カラムを安全に変更する</a></h3>
 <div class="outline-text-3" id="text-orgd924452">
 <p>
レコードがすでに入っているテーブルの関連を変更する場合。
たとえば、blogs >- somethings >- users を blogs >- users というような。somethingsテーブルは何もしてないので削除したい、とする。
何も考えずにやると、一気にすべてを切り替えることになりがち。
</p>

 <p>
悪い例を示す。
</p>
 <ol class="org-ol"> <li> <p>
最初に関連カラムを変更する。
</p>
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 28: </span>modelファイルで関連変更</label> <pre class="src src-ruby">belongs_to  <span class="org-constant">:user</span>  <span class="org-comment-delimiter"># </span> <span class="org-comment">旧 belongs_to :something</span>
</pre>
</div></li>
 <li>旧関連を使ってたアプリケーション側をすべて変更する。MVCすべて。</li>
 <li>新しい関連カラムは空で、旧データを移行しないといけない。移行は↑のデプロイと同時にしないと不整合になる。デプロイと移行スクリプトの間の変更は無視されるから。</li>
 <li>1~3をまとめて一気にリリースする</li>
</ol> <p>
ということで、大量な複数層の変更をぶっつけ本番でしないといけなくなる。途中で嫌になるだろうし、運が悪ければミスって大変なことになる。
</p>

 <p>
ではどうするか。根本的なアイデアは、2つの関連を同時に保持しておくことだ。
同時に持っておけば、大丈夫なことを確認してから関連を変更するだけでいい。そうやって遅延させることで、一気にいろいろな変更をしなくてよくなる。
</p>

 <p>
具体的にどうやるか。良い例。
</p>
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 29: </span>modelのbefore_saveでオンデマンドコピー</label> <pre class="src src-ruby"> <span class="org-keyword">class</span>  <span class="org-type">Blog</span> <  <span class="org-type">ApplicationRecord</span>
  before_save  <span class="org-keyword">do</span>
     <span class="org-keyword">self</span>.user_id ||= something.user_id
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>
</pre>
</div>

 <p>
としておくと、保存時にblog.user_idとblog.something.user_idの両方に関連がコピーされる。somethingsを経由しないでよくなる。
</p>

 <p>
既存データについても処理を追加しておく。
</p>
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 30: </span>modelにメソッドを作っておく</label> <pre class="src src-ruby"> <span class="org-keyword">class</span>  <span class="org-type">User</span> <  <span class="org-type">ApplicationRecord</span>
   <span class="org-keyword">def</span>  <span class="org-function-name">migrate</span>
     <span class="org-keyword">self</span>.user_id ||= something.user_id
    save!
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>
</pre>
</div>
 <p>
そして、全Userでmigrateを実行すれば既存データにも新しいカラムが入る。
</p>

 <p>
既存データと新しく作成されるレコードをおさえたので、新旧2つの関連カラムは完全に同等になる。
ここまででマージ、リリースする。
問題ないことを確認したあとで、新旧カラムが使える状態を活かしてアプリケーション側の変更…実際の関連の変更をやる(一番の目的の箇所)。
ここまででマージ、リリースする。
</p>

 <p>
その後、移行処理とカラムを削除して片付ければ完了。(あるいは移行処理は前の時点で消す)
関連カラムだけでなく、何かカラムを移すときにはすべて同様にできる。
</p>

 <p>
実際のタスクでは、migration処理をする箇所は複数になるので前もって調査が必要。
</p>
</div>
</div>
 <div id="outline-container-orge082fe3" class="outline-3">
 <h3 id="orge082fe3"> <a href="#orge082fe3">カラム名を安全に変更する</a></h3>
 <div class="outline-text-3" id="text-orge082fe3">
 <p>
カラム名変更とアプリケーション側の変更を分け、変更範囲を狭める。
alias_attributeを追加する。すると、新しいカラム名でもアクセスできるようになる。
依存しているほかのアプリケーションの変更をする(new_user_idに書き換える)。
</p>
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 31: </span>modelファイルにて、追加</label> <pre class="src src-ruby">alias_attribute  <span class="org-constant">:new_user_id</span>,  <span class="org-constant">:typo_user_id</span>
</pre>
</div>

 <p>
それらを書き換えたらマージ、リリースする。
その後、カラム名を書き換えるマイグレーションを作成する。使っている箇所はないので安全に変更できる。
マイグレーション後、alias_attributeを削除する。
</p>
</div>
</div>
 <div id="outline-container-org26e98d7" class="outline-3">
 <h3 id="org26e98d7"> <a href="#org26e98d7">テーブル名を安全に変更する</a></h3>
 <div class="outline-text-3" id="text-org26e98d7">
 <p>
最初にmodel クラス名を変更し、テーブルの参照先に変更前のものを設定する。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-keyword">class</span>  <span class="org-type">Blog_After</span> <  <span class="org-type">ApplicationRecord</span>
   <span class="org-keyword">self</span>.table_name =  <span class="org-constant">:blog_before</span>
 <span class="org-keyword">end</span>
</pre>
</div>
 <p>
すると、アプリケーション側だけの変更で、DBの変更はない状態で動作上の変更はなくなる。
次にアプリケーションの、ほかの依存している箇所を修正する。
ここまで1つのPRにする。
</p>

 <p>
テストが通ったりリリースできたら、テーブル名変更のマイグレーションを作成し、modelでのtable_name設定を削除するPRをつくる。
安全に変更が完了する。
テーブルの変更と、アプリケーションの変更を同時にやらないと安全だし分割できてすっきりする。
</p>
</div>
</div>
 <div id="outline-container-orgb1712fb" class="outline-3">
 <h3 id="orgb1712fb"> <a href="#orgb1712fb">modelのログを保持する</a></h3>
 <div class="outline-text-3" id="text-orgb1712fb">
 <p>
 <a href="https://github.com/paper-trail-gem/paper_trail">paper-trail-gem/paper_trail: Track changes to your rails models</a>
変更や差分、変更時の何らかの情報(つまり、作業者とか)を保存、閲覧できる。
</p>

 <p>
 <a href="https://github.com/ankit1910/paper_trail-globalid">ankit1910/paper_trail-globalid: An extension to paper_trail, using this you can fetch actual object who was responsible for this change</a>
paper_trailの拡張。変更したか取得できるようになる。
</p>
</div>
</div>
 <div id="outline-container-org0b818c3" class="outline-3">
 <h3 id="org0b818c3"> <a href="#org0b818c3">サロゲートキー</a></h3>
 <div class="outline-text-3" id="text-org0b818c3">
 <p>
Railsでいうところの  <code>id</code> のこと。Rails5 からはbigintで設定されている。
主キーとして使う人工的な値、というのがポイント。
</p>

 <p>
 <a href="https://e-words.jp/w/%E3%82%B5%E3%83%AD%E3%82%B2%E3%83%BC%E3%83%88%E3%82%AD%E3%83%BC.html">サロゲートキー（surrogate key）とは - IT用語辞典 e-Words</a>
</p>
 <blockquote>
 <p>
サロゲートキーとは、データベースのテーブルの主キーとして、自動割り当ての連続した通し番号のように、利用者や記録する対象とは直接関係のない人工的な値を用いること。また、そのために設けられたカラムのこと。
</p>
</blockquote>
</div>
</div>
 <div id="outline-container-org8cba7a1" class="outline-3">
 <h3 id="org8cba7a1"> <a href="#org8cba7a1">ロールバックできないマイグレーションであることを明示する</a></h3>
 <div class="outline-text-3" id="text-org8cba7a1">
 <p>
たいていの場合はコメントでロールバックできないなどと書けばよいが、rollbackが破壊的な動作になる場合があるのでdownに書く。
</p>
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 32: </span>ActiveRecord::IrreversibleMigration</label> <pre class="src src-ruby"> <span class="org-keyword">def</span>  <span class="org-function-name">down</span>
   <span class="org-builtin">raise</span>  <span class="org-type">ActiveRecord</span>:: <span class="org-type">IrreversibleMigration</span>
 <span class="org-keyword">end</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-org4708fa9" class="outline-3">
 <h3 id="org4708fa9"> <a href="#org4708fa9">null制約を追加しつつdefault設定</a></h3>
 <div class="outline-text-3" id="text-org4708fa9">
 <p>
 <a href="https://qiita.com/akinov/items/852fe789fe98a44350a9">Railsのmigrationで後からNULL制約を設定する - Qiita</a>
</p>

 <p>
null制約追加には、  <code>change_column_null</code> を使う。
null制約だけ追加すると変更前にnullだったレコードでエラーになってしまうので、同時にdefaultを設定するとよい。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 33: </span>null制約 + default設定</label> <pre class="src src-ruby"> <span class="org-keyword">class</span>  <span class="org-type">ChangePointColumnOnPost</span> <  <span class="org-type">ActiveRecord</span>:: <span class="org-type">Migration</span>[5.2]
   <span class="org-keyword">def</span>  <span class="org-function-name">change</span>
    change_column_null  <span class="org-constant">:posts</span>,  <span class="org-constant">:point</span>,  <span class="org-constant">false</span>, 0
    change_column_default  <span class="org-constant">:posts</span>,  <span class="org-constant">:point</span>,  <span class="org-constant">from:</span>  <span class="org-constant">nil</span>,  <span class="org-constant">to:</span> 0
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 34: </span>↑falseはnullオプション</label> <pre class="src src-ruby">change_column_null(table_name, column_name, null, default =  <span class="org-constant">nil</span>)
</pre>
</div>
</div>
</div>
 <div id="outline-container-org03d68cf" class="outline-3">
 <h3 id="org03d68cf"> <a href="#org03d68cf">migrationファイルによる不整合解消タスク</a></h3>
 <div class="outline-text-3" id="text-org03d68cf">
 <p>
migrationファイルは一部DSLが扱われるだけで普通のrubyファイルと変わらない。
データベースの不整合を解消することにも使える。
</p>

 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-keyword">def</span>  <span class="org-function-name">up</span>
   <span class="org-type">Blog</span>.unscoped.where( <span class="org-constant">user_id:</span>  <span class="org-constant">nil</span>).delete_all
 <span class="org-keyword">end</span>
</pre>
</div>
 <p>
というように。
環境別にconsoleでコマンドを実行する必要がないので便利。
</p>
</div>
</div>
 <div id="outline-container-org39eee59" class="outline-3">
 <h3 id="org39eee59"> <a href="#org39eee59">unscopedでdefault_scopeを無効化</a></h3>
 <div class="outline-text-3" id="text-org39eee59">
 <p>
 <code>unscoped</code> はdefault_scopeを無効化する。
 <a href="https://apidock.com/rails/ActiveRecord/Base/unscoped/class">unscoped (ActiveRecord::Base) - APIdock</a>
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 36: </span>自動でpublishedの条件が発行されていることがわかる</label> <pre class="src src-ruby"> <span class="org-keyword">class</span>  <span class="org-type">Post</span> <  <span class="org-type">ActiveRecord</span>:: <span class="org-type">Base</span>
   <span class="org-keyword">def</span>  <span class="org-keyword">self</span>. <span class="org-function-name">default_scope</span>
    where  <span class="org-constant">:published</span> =>  <span class="org-constant">true</span>
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>

 <span class="org-type">Post</span>.all           <span class="org-comment-delimiter"># </span> <span class="org-comment">Fires "SELECT * FROM posts WHERE published = true"</span>
 <span class="org-type">Post</span>.unscoped.all  <span class="org-comment-delimiter"># </span> <span class="org-comment">Fires "SELECT * FROM posts"</span>
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 37: </span>default_scopeの条件がなくなる</label> <pre class="src src-ruby"> <span class="org-type">Post</span>.unscoped {
   <span class="org-type">Post</span>.limit(10)  <span class="org-comment-delimiter"># </span> <span class="org-comment">Fires "SELECT * FROM posts LIMIT 10"</span>
}
</pre>
</div>
</div>
</div>
 <div id="outline-container-orga0b411f" class="outline-3">
 <h3 id="orga0b411f"> <a href="#orga0b411f">inverse_ofで双方向の不整合を防ぐ</a></h3>
 <div class="outline-text-3" id="text-orga0b411f">
 <p>
 <a href="https://qiita.com/itp926/items/9cac175d3b35945b8f7e">inverse_of について - Qiita</a>
</p>

 <p>
双方向の関連付けの不整合を防ぐ関連オプション。belongs_to, has_many等ではデフォルトでオンになっているよう。
</p>

 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-keyword">class</span>  <span class="org-type">Category</span>
  has_many  <span class="org-constant">:blog</span>
 <span class="org-keyword">end</span>

 <span class="org-keyword">class</span>  <span class="org-type">Order</span>
  belongs_to  <span class="org-constant">:category</span>
 <span class="org-keyword">end</span>
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 39: </span>不整合</label> <pre class="src src-ruby">c =  <span class="org-type">Category</span>.first
b = c.orders.first

c.title =  <span class="org-string">"change"</span>
c.title == b.category.title  <span class="org-comment-delimiter">#</span> <span class="org-comment">=> false 値は異なる</span>
c.equal? b.category  <span class="org-comment-delimiter">#</span> <span class="org-comment">=> false 同じオブジェクトでない</span>
</pre>
</div>
 <p>
inverse_ofを使うと同じオブジェクトを使うようになる。
</p>
</div>
</div>
 <div id="outline-container-org87496ef" class="outline-3">
 <h3 id="org87496ef"> <a href="#org87496ef">リレーションの不整合を検知する</a></h3>
 <div class="outline-text-3" id="text-org87496ef">
 <p>
よくわからない。
全部辿る方法は色々応用が効きそう。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 40: </span>不整合検知タスク</label> <pre class="src src-ruby">desc  <span class="org-string">'外部キーの整合性を検証する'</span>
task  <span class="org-constant">extract_mismatch_records:</span>  <span class="org-constant">:environment</span>  <span class="org-keyword">do</span>
   <span class="org-type">Rails</span>.application.eager_load!

   <span class="org-type">ApplicationRecord</span>.subclasses.each  <span class="org-keyword">do</span> |model|
    model.reflections.select { |_, reflection| reflection.is_a?( <span class="org-type">ActiveRecord</span>:: <span class="org-type">Reflection</span>:: <span class="org-type">BelongsToReflection</span>) }.each  <span class="org-keyword">do</span> |name, reflection|
      model_name = model.model_name.human
      foreign_key = reflection.options[ <span class="org-constant">:foreign_key</span>] ||  <span class="org-string">"</span> <span class="org-variable-name">#{name}</span> <span class="org-string">_id"</span>

       <span class="org-keyword">unless</span> model.columns.any? { |column| column.name == foreign_key.to_s }
         <span class="org-builtin">puts</span>  <span class="org-string">"💢 </span> <span class="org-variable-name">#{model_name}</span> <span class="org-string"> には </span> <span class="org-variable-name">#{foreign_key}</span> <span class="org-string"> フィールドがありません"</span>
         <span class="org-keyword">next</span>
       <span class="org-keyword">end</span>

      parent_model_class_name = reflection.options[ <span class="org-constant">:class_name</span>] || reflection.name.to_s.classify
      parent_model = parent_model_class_name.safe_constantize

       <span class="org-keyword">unless</span> parent_model
         <span class="org-builtin">puts</span>  <span class="org-string">"💢 </span> <span class="org-variable-name">#{model_name}</span> <span class="org-string"> が依存している </span> <span class="org-variable-name">#{parent_model_class_name}</span> <span class="org-string"> は参照できません"</span>
         <span class="org-keyword">next</span>
       <span class="org-keyword">end</span>

      parent_model_name = parent_model.model_name.human

       <span class="org-keyword">begin</span>
         <span class="org-comment-delimiter"># </span> <span class="org-comment">NOTE: 親テーブルのIDとして存在しない外部キーの数を照会</span>
        relation = model.unscoped.where.not(foreign_key => parent_model.unscoped.select( <span class="org-constant">:id</span>)).where.not(foreign_key =>  <span class="org-constant">nil</span>)
        sql = relation.to_sql
        count = relation.count

         <span class="org-keyword">if</span> count.zero?
           <span class="org-builtin">puts</span>  <span class="org-string">"💡 </span> <span class="org-variable-name">#{model_name}</span> <span class="org-string"> の </span> <span class="org-variable-name">#{parent_model_name}</span> <span class="org-string"> の外部キーは整合性が保証されています"</span>  <span class="org-keyword">unless</span>  <span class="org-type">ENV</span>[ <span class="org-string">'ONLY_FAILURE'</span>]
         <span class="org-keyword">else</span>
           <span class="org-builtin">puts</span>  <span class="org-string">"💣 </span> <span class="org-variable-name">#{model_name}</span> <span class="org-string"> の </span> <span class="org-variable-name">#{parent_model_name}</span> <span class="org-string"> の外部キーで不正なキーが </span> <span class="org-variable-name">#{count}</span> <span class="org-string"> 件 設定されています"</span>
         <span class="org-keyword">end</span>

         <span class="org-keyword">if</span>  <span class="org-type">ENV</span>[ <span class="org-string">'DEBUG'</span>]
           <span class="org-builtin">puts</span>  <span class="org-string">"=> </span> <span class="org-variable-name">#{sql}</span> <span class="org-string">\n"</span>
           <span class="org-builtin">puts</span>
         <span class="org-keyword">end</span>
       <span class="org-keyword">rescue</span>  <span class="org-type">StandardError</span>
         <span class="org-comment-delimiter"># </span> <span class="org-comment">NOTE: マスタデータの場合はスキップ</span>
         <span class="org-builtin">puts</span>  <span class="org-string">"🈳 </span> <span class="org-variable-name">#{model_name}</span> <span class="org-string"> の </span> <span class="org-variable-name">#{parent_model_name}</span> <span class="org-string"> の整合性の検証をスキップしました"</span>  <span class="org-keyword">unless</span>  <span class="org-type">ENV</span>[ <span class="org-string">'ONLY_FAILURE'</span>]
       <span class="org-keyword">end</span>
     <span class="org-keyword">end</span>
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>
</pre>
</div>

 <p>
Reflectionクラスはアソシエーション関係のmoduleのよう。
 <a href="https://github.com/kd-collective/rails/blob/f132be462b957ea4cd8b72bf9e7be77a184a887b/activerecord/lib/active_record/reflection.rb#L49">https://github.com/kd-collective/rails/blob/f132be462b957ea4cd8b72bf9e7be77a184a887b/activerecord/lib/active_record/reflection.rb#L49</a>
</p>

 <blockquote>
 <p>
Reflection enables the ability to examine the associations and aggregations of Active Record classes and objects. This information, for example, can be used in a form builder that takes an Active Record object and creates input fields for all of the attributes depending on their type and displays the associations to other objects.
</p>

 <p>
Reflectionを使用すると、Active Recordのクラスやオブジェクトの関連付けや集計を調べることができます。この情報は、例えば、Active Recordオブジェクトを受け取り、その型に応じてすべての属性の入力フィールドを作成します。他のオブジェクトとの関連を表示するフォームビルダーで使用できます。
</p>
</blockquote>

 <p>
Reflectionに関する記事。
 <a href="https://qiita.com/kkyouhei/items/067d5bb8d79c71f1646b">Railsのコードを読む アソシエーションについて - Qiita</a>
</p>
</div>
</div>
 <div id="outline-container-org8f1526a" class="outline-3">
 <h3 id="org8f1526a"> <a href="#org8f1526a">クエリ高速化</a></h3>
 <div class="outline-text-3" id="text-org8f1526a">
 <p>
ネストしてクエリを発行してるときは何かがおかしい。
</p>

 <ul class="org-ul"> <li>parent_category -> category -> blog のような構造</li>
</ul> <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 41: </span>ひどいクエリメソッド</label> <pre class="src src-ruby">parent_categories.each  <span class="org-keyword">do</span> |parent_category|
  parent_category.categories.each  <span class="org-keyword">do</span> |category|
    category.blogs.each  <span class="org-keyword">do</span> |blog|
       <span class="org-variable-name">@content</span> << blog.content
     <span class="org-keyword">end</span>
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>
</pre>
</div>

 <ul class="org-ul"> <li>parent_category -> category -> blog</li>
</ul> <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 42: </span>joins</label> <pre class="src src-ruby"> <span class="org-type">Blog</span>.joins( <span class="org-constant">categories:</span> category)
  .merge( <span class="org-type">Category</span>.where( <span class="org-constant">parent_category:</span> parent_large_categories))
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgf18617f" class="outline-3">
 <h3 id="orgf18617f"> <a href="#orgf18617f">Migrationファイルをまとめて高速化する</a></h3>
 <div class="outline-text-3" id="text-orgf18617f">
 <p>
Migrationファイルは変更しないのが基本だが、数が多い場合、  <code>rails migrate:reset</code> に時間がかかる。
</p>

 <p>
db/schema.rbの内容を、最新のタイムスタンプのマイグレーションにコピーする。
</p>

 <ul class="org-ul"> <li>つまり現在のDB状況が、そのまま1つのmigrationとなる。DSLが同じなので問題ない。</li>
 <li>migrationのタイムスタンプはすでに実行済みのため、動作に影響しない。</li>
</ul></div>
</div>
 <div id="outline-container-orgebe090e" class="outline-3">
 <h3 id="orgebe090e"> <a href="#orgebe090e">Gemfileで環境指定する</a></h3>
 <div class="outline-text-3" id="text-orgebe090e">
 <p>
Gemfileのgroupキーワードは、指定環境でしかインストールしないことを示す。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 43: </span>developmentでしかインストールされない</label> <pre class="src src-ruby">group  <span class="org-constant">:development</span>  <span class="org-keyword">do</span>
  gem  <span class="org-string">'annotate'</span>,  <span class="org-builtin">require</span>:  <span class="org-constant">false</span>
 <span class="org-keyword">end</span>
</pre>
</div>

 <p>
なので環境を指定せずにテストを実行したとき、gem not foundが出る。実行されたのがdevelopment環境で、テストのgemが読み込まれてないから。  <code>RAILS_ENV=test</code> がついているか確認する。
</p>
</div>
</div>
 <div id="outline-container-org2a07a87" class="outline-3">
 <h3 id="org2a07a87"> <a href="#org2a07a87">論理削除と物理削除</a></h3>
 <div class="outline-text-3" id="text-org2a07a87">
 <p>
論理削除は削除したときレコードを削除するのではなく、フラグをトグルするもの。
逆に物理削除はレコードから削除すること。
</p>

 <p>
論理削除のメリットは、データが戻せること。
</p>

 <p>
が、データベースの運用的に、後から問題となることの方が多い。
</p>

 <ul class="org-ul"> <li>削除フラグを付け忘れると事故になる。削除したはずなのに表示したり、計算に入れたりしてしまう</li>
 <li>データが多くなるためパフォーマンスが悪くなる</li>
</ul> <p>
Railsではgem act_as_paranoidを使って簡単に論理削除処理を追加できる。deleted_atカラムを論理削除を管理するフラグとして用いる。
</p>
</div>
</div>
 <div id="outline-container-orgb018e68" class="outline-3">
 <h3 id="orgb018e68"> <a href="#orgb018e68">find、find_by、whereの違い</a></h3>
 <div class="outline-text-3" id="text-orgb018e68">
 <p>
 <a href="https://qiita.com/tsuchinoko_run/items/f3926caaec461cfa1ca3">find、find_by、whereの違い - Qiita</a>
</p>

 <dl class="org-dl"> <dt>find</dt> <dd>各モデルのidを検索キーとしてデータを取得するメソッド。モデルインスタンスが返る</dd>
 <dt>find_by</dt> <dd>id以外をキーとして検索。複数あった場合は最初だけ取る。モデルインスタンスが返る。</dd>
 <dt>where</dt> <dd>id以外をキーとして検索。モデルインスタンスの入った配列が返る。</dd>
</dl></div>
</div>
 <div id="outline-container-orgf364b15" class="outline-3">
 <h3 id="orgf364b15"> <a href="#orgf364b15">acts_as_list</a></h3>
 <div class="outline-text-3" id="text-orgf364b15">
 <p>
acts_as_listは順番を管理するgem。
 <a href="https://github.com/brendon/acts_as_list">brendon/acts_as_list: An ActiveRecord plugin for managing lists.</a>
</p>

 <p>
順番の生成と、操作を可能にする。
modelに順番カラムを指定すると、create時に自動で番号が格納される。
逆にフォームで番号格納しているとそれが優先して入るため自動採番されない。
new時には番号フォームを表示しないなどが必要。
</p>
</div>
</div>
 <div id="outline-container-orgc5edea5" class="outline-3">
 <h3 id="orgc5edea5"> <a href="#orgc5edea5">テーブル名と名前空間</a></h3>
</div>
 <div id="outline-container-org987b47a" class="outline-3">
 <h3 id="org987b47a"> <a href="#org987b47a">pluck</a></h3>
 <div class="outline-text-3" id="text-org987b47a">
 <p>
 <code>pluck</code> は、各レコードを丸ごとオブジェクトとしてとってくるのではなく、引数で指定したカラムのみの  <b>配列</b> で返すメソッド。
 <a href="https://railsdoc.com/page/model_pluck">pluck | Railsドキュメント</a>
</p>

 <p>
 <code>select</code> はカラム指定というところは同じだがオブジェクトを返す。
</p>
</div>
</div>
 <div id="outline-container-org620afe0" class="outline-3">
 <h3 id="org620afe0"> <a href="#org620afe0">まとめて処理して高速化</a></h3>
 <div class="outline-text-3" id="text-org620afe0">
 <p>
1つ1つ処理するのではなくて、同時に複数のレコードを処理することで高速化する。
</p>
</div>
</div>
 <div id="outline-container-orgf0b3a02" class="outline-3">
 <h3 id="orgf0b3a02"> <a href="#orgf0b3a02">該当レコード数が莫大な場合</a></h3>
 <div class="outline-text-3" id="text-orgf0b3a02">
 <p>
メモリに全体を展開するのでなく、ある数ずつ展開してメモリ消費を抑える。
</p>

 <p>
 <a href="https://railsdoc.com/page/find_each">find_each | Railsドキュメント</a> … 1件ずつ処理。
 <a href="https://railsdoc.com/page/find_in_batches">find_in_batches | Railsドキュメント</a> … 配列で処理。
</p>
</div>
</div>
 <div id="outline-container-org578def9" class="outline-3">
 <h3 id="org578def9"> <a href="#org578def9">並列処理の例</a></h3>
 <div class="outline-text-3" id="text-org578def9">
 <p>
parallel gemによって。
</p>
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 44: </span>例</label> <pre class="src src-ruby"> <span class="org-builtin">require</span>  <span class="org-string">'parallel'</span>
result =  <span class="org-type">Parallel</span>.each(1..10)  <span class="org-keyword">do</span> |item|
    item ** 2
 <span class="org-keyword">end</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgcfe53b1" class="outline-3">
 <h3 id="orgcfe53b1"> <a href="#orgcfe53b1">開発に便利なページ</a></h3>
 <div class="outline-text-3" id="text-orgcfe53b1">
 <ul class="org-ul"> <li>/rails/info/routes
routes一覧。</li>
 <li>/letter_opener(自分で設定する)
送信したメール一覧を見られる。
gemが入ってる場合。
 <a href="https://github.com/ryanb/letter_opener">ryanb/letter_opener: Preview mail in the browser instead of sending.</a></li>
 <li>rails/mailers/
Action Mailerのプレビューを見られる。
previewを準備しておくといちいち送信せずとも、ローカルでダミーが入った文面を確認できる。</li>
</ul></div>
</div>
 <div id="outline-container-org61e825e" class="outline-3">
 <h3 id="org61e825e"> <a href="#org61e825e">開発環境でしか使えないメソッドが存在する</a></h3>
 <div class="outline-text-3" id="text-org61e825e">
 <p>
 <code>class_name</code> は開発環境でしか使えない。
gemによってはそういうパターンで使えないことがあることに注意しておく。
</p>

 <ul class="org-ul"> <li> <a href="https://stackoverflow.com/questions/38776080/method-class-name-undefined-for-class-object-in-rails">https://stackoverflow.com/questions/38776080/method-class-name-undefined-for-class-object-in-rails</a></li>
</ul> <blockquote>
 <p>
class_name method is defined by yard gem. it works only development env.
</p>
</blockquote>
</div>
</div>
 <div id="outline-container-orgb36b70d" class="outline-3">
 <h3 id="orgb36b70d"> <a href="#orgb36b70d">rails console -s</a></h3>
 <div class="outline-text-3" id="text-orgb36b70d">
 <p>
 <code>rails console -s</code> としてconsole起動すると、sandbox-modeになりコンソール内のDB操作が終了時にリセットされる。
便利。
</p>
</div>
</div>
 <div id="outline-container-org332b117" class="outline-3">
 <h3 id="org332b117"> <a href="#org332b117">rails cできないとき</a></h3>
 <div class="outline-text-3" id="text-org332b117">
 <p>
springはキャッシュを保存して次のコマンド実行を早くするgem。
テストも高速化できるので便利だが、たまに壊れて反映しなくなったりする。
</p>

 <p>
まずspringを止めて確認する。
</p>
 <div class="org-src-container">
 <pre class="src src-shell">bundle exec spring stop
</pre>
</div>
</div>
</div>
 <div id="outline-container-org33cecb7" class="outline-3">
 <h3 id="org33cecb7"> <a href="#org33cecb7">system specでTCP error がでるとき</a></h3>
 <div class="outline-text-3" id="text-org33cecb7">
 <p>
テストがある程度の長さを超えると、メモリの量が足りなくなってエラーを出す。
特にMacだと起こるよう。
</p>
 <div class="org-src-container">
 <pre class="src src-shell"> <span class="org-builtin">ulimit</span> -n 1024
</pre>
</div>
</div>
</div>
 <div id="outline-container-org3c3f203" class="outline-3">
 <h3 id="org3c3f203"> <a href="#org3c3f203">seed_fuのlint</a></h3>
 <div class="outline-text-3" id="text-org3c3f203">
 <p>
走らせてエラーがないかチェックする。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby">namespace  <span class="org-constant">:db</span>  <span class="org-keyword">do</span>
  namespace  <span class="org-constant">:seed_fu</span>  <span class="org-keyword">do</span>
    desc  <span class="org-string">'Verify that all fixtures are valid'</span>
    task  <span class="org-constant">lint:</span>  <span class="org-constant">:environment</span>  <span class="org-keyword">do</span>
       <span class="org-keyword">if</span>  <span class="org-type">Rails</span>.env.test?
        conn =  <span class="org-type">ActiveRecord</span>:: <span class="org-type">Base</span>.connection

         <span class="org-string">%w[development test production]</span>.each  <span class="org-keyword">do</span> |env|
          conn.transaction  <span class="org-keyword">do</span>
             <span class="org-type">SeedFu</span>.seed( <span class="org-string">"db/fixtures/</span> <span class="org-variable-name">#{env}</span> <span class="org-string">"</span>)
             <span class="org-builtin">raise</span>  <span class="org-type">ActiveRecord</span>:: <span class="org-type">Rollback</span>
           <span class="org-keyword">end</span>
         <span class="org-keyword">end</span>
       <span class="org-keyword">else</span>
         <span class="org-builtin">system</span>( <span class="org-string">"bundle exec rails db:seed_fu:lint RAILS_ENV='test'"</span>)
         <span class="org-builtin">raise</span>  <span class="org-keyword">if</span>  <span class="org-builtin">$CHILD_STATUS</span>.exitstatus.nonzero?
       <span class="org-keyword">end</span>
     <span class="org-keyword">end</span>
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgae2f046" class="outline-3">
 <h3 id="orgae2f046"> <a href="#orgae2f046">どのメソッドか調べる</a></h3>
 <div class="outline-text-3" id="text-orgae2f046">
 <p>
どのgemのメソッドかわからないときに  <code>source_location</code> が便利。
 <a href="https://docs.ruby-lang.org/ja/latest/method/Method/i/source_location.html">https://docs.ruby-lang.org/ja/latest/method/Method/i/source_location.html</a>
</p>
 <div class="org-src-container">
 <pre class="src src-ruby">character.method( <span class="org-constant">:draw</span>).source_location
</pre>
</div>
</div>
</div>
 <div id="outline-container-org82e9656" class="outline-3">
 <h3 id="org82e9656"> <a href="#org82e9656">DBリセット</a></h3>
 <div class="outline-text-3" id="text-org82e9656">
 <p>
環境を指定して、リセットを行う。
データの初期化にseed_fu gemを使っている。
</p>

 <div class="org-src-container">
 <pre class="src src-shell">bundle exec rails db:migrate:reset && rails db:seed_fu
</pre>
</div>
</div>
</div>
 <div id="outline-container-org5cac7ef" class="outline-3">
 <h3 id="org5cac7ef"> <a href="#org5cac7ef">デイリーでやること</a></h3>
 <div class="outline-text-3" id="text-org5cac7ef">
 <p>
gemのupdateやマイグレーションが起きたときにやる。
どこかで定型化して一気に実行するようにする。
</p>
 <div class="org-src-container">
 <pre class="src src-shell">git checkout develop && bundle install && bundle exec rails db:migrate
</pre>
</div>
</div>
</div>
 <div id="outline-container-orged4fbfd" class="outline-3">
 <h3 id="orged4fbfd"> <a href="#orged4fbfd">scope</a></h3>
 <div class="outline-text-3" id="text-orged4fbfd">
 <p>
scopeはクラスメソッド的なやつ。
インスタンスには使えない。  <code>User.scope...</code>
 <a href="https://railsguides.jp/active_record_querying.html#%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%97">Active Record クエリインターフェイス - Railsガイド</a>
</p>

 <blockquote>
 <p>
スコープを設定することで、関連オブジェクトやモデルへのメソッド呼び出しとして参照される、よく使用されるクエリを指定することができます。
</p>
</blockquote>
</div>
</div>
 <div id="outline-container-org3b53c04" class="outline-3">
 <h3 id="org3b53c04"> <a href="#org3b53c04">validation</a></h3>
 <div class="outline-text-3" id="text-org3b53c04">
 <p>
 <code>valid?</code> はAction Modelのバリデーションメソッド。
 <a href="https://devdocs.io/rails~6.1/activemodel/validations#method-i-valid-3F">Ruby on Rails 6.1 / ActiveModel::Validations#valid? — DevDocs</a>
引っかかってたらfalseになる。
オーバーライドしてしまいそうになるメソッド名なのに注意。
</p>
</div>
</div>
 <div id="outline-container-org64701a8" class="outline-3">
 <h3 id="org64701a8"> <a href="#org64701a8">ネストしたvalidateは反応しない</a></h3>
 <div class="outline-text-3" id="text-org64701a8">
 <p>
特定の条件だけで発動するvalidation + 条件。`with_options: if`内で`if`を使うと、中のif条件が優先して実行されるため、こう書く必要がある。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby">validates  <span class="org-constant">:term_date</span>,  <span class="org-constant">date:</span> {  <span class="org-constant">after:</span>  <span class="org-builtin">proc</span> {  <span class="org-type">Time</span>.zone.now } },  <span class="org-keyword">if</span>:  <span class="org-builtin">proc</span> { |p| p.term_date? && p.sellable?  }
</pre>
</div>
</div>
</div>
 <div id="outline-container-org730f00a" class="outline-3">
 <h3 id="org730f00a"> <a href="#org730f00a">N+1問題</a></h3>
 <div class="outline-text-3" id="text-org730f00a">
 <p>
 <a href="20210725100835-sql.html#ID-8b69b8d4-1612-4dc5-8412-96b431fdd101">SQL</a>がたくさん実行されて遅くなること。ループしているとレコードの数だけSQLが発行され、一気に遅くなる。
includesを使うと少ないSQLにまとめられる。
 <a href="https://qiita.com/hirotakasasaki/items/e0be0b3fd7b0eb350327">https://qiita.com/hirotakasasaki/items/e0be0b3fd7b0eb350327</a>
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 45: </span>includesで関連テーブルをまとめて取得する</label> <pre class="src src-ruby"> <span class="org-type">Page</span>.includes( <span class="org-constant">:category</span>)
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgb283695" class="outline-3">
 <h3 id="orgb283695"> <a href="#orgb283695">子のデータが存在するとき関連削除しないようにする</a></h3>
 <div class="outline-text-3" id="text-orgb283695">
 <p>
 <code>dependent: destroy</code> だと子のデータもすべて破壊して整合性を保つ。
それでは具合が悪いときもあるので、消さないようにする。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby">has_many  <span class="org-constant">:contents</span>,  <span class="org-constant">dependent:</span>  <span class="org-constant">:restrict_with_error</span>
</pre>
</div>

 <p>
あるいは、外部キーをnull更新する方法もある(nullableであれば)。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby">has_many  <span class="org-constant">:contents</span>,  <span class="org-constant">dependent:</span>  <span class="org-constant">:nullify</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-org85e7f26" class="outline-3">
 <h3 id="org85e7f26"> <a href="#org85e7f26">文字列で返ってくる真偽値をbooleanオブジェクトに変換する</a></h3>
 <div class="outline-text-3" id="text-org85e7f26">
 <p>
文字列で返ってくる真偽値を、booleanオブジェクトとして扱いとき。ActiveModelのmoduleを使用する。
言われてみるとDBでは文字列かをあまり意識せずに使える。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-type">ActiveModel</span>:: <span class="org-type">Type</span>:: <span class="org-type">Boolean</span>.new.cast(value) ==  <span class="org-constant">true</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-org2ab6dd0" class="outline-3">
 <h3 id="org2ab6dd0"> <a href="#org2ab6dd0">slimで条件分岐</a></h3>
 <div class="outline-text-3" id="text-org2ab6dd0">
 <p>
 <a href="https://qiita.com/mishiwata1015/items/407e924263d698ddeaae">【Rails】Slimで入れ子になっている要素の親タグのみを分岐させる - Qiita</a>
閉じタグがないため階層の上だけ条件分岐するためには特殊な書き方が必要になる。
</p>
- unless request.variant.present? && request.variant.include?(:phone)
  / PCでのみサイドバーに
  - args = [:section, class: 'sidebar']
- else
  / スマホではメインコンテンツに入れる
  - args = [:section]
= content_tag(*args)
</div>
</div>
 <div id="outline-container-orgcc4f99e" class="outline-3">
 <h3 id="orgcc4f99e"> <a href="#orgcc4f99e">migration例</a></h3>
 <div class="outline-text-3" id="text-orgcc4f99e">
 <div class="org-src-container">
 <pre class="src src-shell">$ rails g migration ChangeProductPrice
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-keyword">class</span>  <span class="org-type">ChangeProductsPrice</span> <  <span class="org-type">ActiveRecord</span>:: <span class="org-type">Migration</span>[7.0]
   <span class="org-keyword">def</span>  <span class="org-function-name">up</span>
    change_table  <span class="org-constant">:products</span>  <span class="org-keyword">do</span> |t|
      t.change  <span class="org-constant">:price</span>,  <span class="org-constant">:string</span>
     <span class="org-keyword">end</span>
   <span class="org-keyword">end</span>

   <span class="org-keyword">def</span>  <span class="org-function-name">down</span>
    change_table  <span class="org-constant">:products</span>  <span class="org-keyword">do</span> |t|
      t.change  <span class="org-constant">:price</span>,  <span class="org-constant">:integer</span>
     <span class="org-keyword">end</span>
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-shell">$ rails g migration AddNotNullOnBooks
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-keyword">class</span>  <span class="org-type">AddNotNullOnBooks</span> <  <span class="org-type">ActiveRecord</span>:: <span class="org-type">Migration</span>[6.0]
   <span class="org-keyword">def</span>  <span class="org-function-name">up</span>
    change_column_null  <span class="org-constant">:books</span>,  <span class="org-constant">:user_id</span>,  <span class="org-constant">false</span>
   <span class="org-keyword">end</span>

   <span class="org-keyword">def</span>  <span class="org-function-name">down</span>
    change_column_null  <span class="org-constant">:books</span>,  <span class="org-constant">:user_id</span>,  <span class="org-constant">true</span>
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>
</pre>
</div>
</div>
</div>
</div>
 <div id="outline-container-org71fffba" class="outline-2">
 <h2 id="org71fffba"> <a href="#org71fffba">Tasks</a></h2>
 <div class="outline-text-2" id="text-org71fffba">
</div>
 <div id="outline-container-orgc676920" class="outline-3">
 <h3 id="orgc676920"> <a href="#orgc676920"> <span class="todo TODO">TODO</span> ECRデプロイ</a></h3>
 <div class="outline-text-3" id="text-orgc676920">
</div>
</div>
 <div id="outline-container-org3e97ebf" class="outline-3">
 <h3 id="org3e97ebf"> <a href="#org3e97ebf"> <span class="todo TODO">TODO</span> 実行時のwaringをエラーとして検出させるオプションを見つける</a></h3>
</div>
 <div id="outline-container-org29c87b6" class="outline-3">
 <h3 id="org29c87b6"> <a href="#org29c87b6"> <span class="todo TODO">TODO</span> </a> <a href="https://egghead.io/blog/rails-graphql-typescript-react-apollo">Rails + GraphQL + TypeScript + React + Apollo | egghead.io</a></h3>
</div>
 <div id="outline-container-org0a9f410" class="outline-3">
 <h3 id="org0a9f410"> <a href="#org0a9f410"> <span class="todo TODO">TODO</span> </a> <a href="https://www.amazon.com/Advanced-Rails-Recipes-Mike-Clark/dp/0978739221">Advanced Rails Recipes</a></h3>
</div>
 <div id="outline-container-orge696287" class="outline-3">
 <h3 id="orge696287"> <a href="#orge696287"> <span class="todo TODO">TODO</span> </a> <a href="https://dxd2021.cto-a.org/program/time-table/b-3">クソコード動画「Userクラス」で考える技術的負債解消の観点/DXD2021</a></h3>
 <div class="outline-text-3" id="text-orge696287">
 <p>
クソコードから学ぶ。
</p>
</div>
</div>
 <div id="outline-container-org5d5b713" class="outline-3">
 <h3 id="org5d5b713"> <a href="#org5d5b713"> <span class="todo TODO">TODO</span> </a> <a href="https://railsguides.jp/">Ruby on Rails ガイド：体系的に Rails を学ぼう</a></h3>
 <div class="outline-text-3" id="text-org5d5b713">
 <p>
Rails のドキュメント。
</p>
</div>
</div>
 <div id="outline-container-orgdc44b00" class="outline-3">
 <h3 id="orgdc44b00"> <a href="#orgdc44b00"> <span class="todo TODO">TODO</span> </a> <a href="https://www.codewithjason.com/understanding-factory-bot-syntax-coding-factory-bot/">Understanding Factory Bot syntax by coding your own Factory Bot - Code with Jason</a></h3>
 <div class="outline-text-3" id="text-orgdc44b00">
 <p>
Factory Botの作り方。
</p>
</div>
</div>
 <div id="outline-container-org4ccb00d" class="outline-3">
 <h3 id="org4ccb00d"> <a href="#org4ccb00d"> <span class="todo TODO">TODO</span> Tips文書化</a></h3>
 <div class="outline-text-3" id="text-org4ccb00d">
 <ul class="org-ul"> <li>5730</li>
</ul></div>
</div>
</div>
 <div id="outline-container-org21cba05" class="outline-2">
 <h2 id="org21cba05"> <a href="#org21cba05">Archives</a></h2>
 <div class="outline-text-2" id="text-org21cba05">
</div>
 <div id="outline-container-orgc09ab2b" class="outline-3">
 <h3 id="orgc09ab2b"> <a href="#orgc09ab2b"> <span class="done DONE">DONE</span> 誤字</a></h3>
 <div class="outline-text-3" id="text-orgc09ab2b">
 <p>
 <a href="https://github.com/carrierwaveuploader/carrierwave/blob/a3ffc5381e70a4014b61b27b35540aa3b945910d/README.md#retry-option-for-douwload-from-remote-location">https://github.com/carrierwaveuploader/carrierwave/blob/a3ffc5381e70a4014b61b27b35540aa3b945910d/README.md#retry-option-for-douwload-from-remote-location</a>
</p>

 <p>
PR送信完了。一字だけ。
</p>
</div>
</div>
 <div id="outline-container-orgd8f91c3" class="outline-3">
 <h3 id="orgd8f91c3"> <a href="#orgd8f91c3"> <span class="done DONE">DONE</span> </a> <a href="https://zenn.dev/prune/books/0d7d6e3c5f0496">Rails+React（SPA）TODOアプリチュートリアル【0から学ぶ】</a></h3>
 <div class="outline-text-3" id="text-orgd8f91c3">
 <p>
 <a href="20210509095946-rails.html#ID-e04aa1a3-509c-45b2-ac64-53d69c961214">Rails</a>  +  <a href="20210902220546-react.html#ID-dc50d818-d7d1-48a8-ad76-62ead617c670">React</a>の本。
</p>

 <p>
ホットリロードができない。
</p>
</div>
</div>
 <div id="outline-container-org24c1823" class="outline-3">
 <h3 id="org24c1823"> <a href="#org24c1823"> <span class="done CLOSE">CLOSE</span> loggerを自動オン</a></h3>
 <div class="outline-text-3" id="text-org24c1823">
 <p>
Rails console。ENVで分岐すれば本番コンソールでログレベルを上げる、ということができるはず。
</p>
</div>
</div>
 <div id="outline-container-org057f461" class="outline-3">
 <h3 id="org057f461"> <a href="#org057f461"> <span class="done DONE">DONE</span> </a> <a href="https://qiita.com/k-penguin-sato/items/07fef2f26fd6339e0e69">【Rails】graphql-rubyでAPIを作成 - Qiita</a> -実行</h3>
 <div class="outline-text-3" id="text-org057f461">
 <p>
 <a href="20211030122204-graphql.html#ID-b4f456cf-d250-4877-ac4c-4b03144392f0">GraphQL</a>をrailsでやるチュートリアル。
</p>
</div>
</div>
 <div id="outline-container-org3214460" class="outline-3">
 <h3 id="org3214460"> <a href="#org3214460"> <span class="done CLOSE">CLOSE</span> </a> <a href="https://www.amazon.co.jp/dp/B01N0SS6NF/ref=dp-kindle-redirect?_encoding=UTF8&btkr=1">Amazon.co.jp: Deploying Rails with Docker, Kubernetes and ECS (English Edition) eBook : Acuña, Pablo: Foreign Language Books</a></h3>
 <div class="outline-text-3" id="text-org3214460">
 <ul class="org-ul"> <li>24, 51</li>
</ul> <p>
KubernetesでRails deployまでやる本。
AWSデプロイコマンドの挙動が違い、バージョンを合わせても動かずよくわからなかったので断念。こういうのは新しい本を買うべきだな。ローカル環境minikubeでの動作は確認できた。
</p>
</div>
</div>
 <div id="outline-container-orgd19299f" class="outline-3">
 <h3 id="orgd19299f"> <a href="#orgd19299f"> <span class="done DONE">DONE</span> RailsとPumaの関係性    <span class="tag"> <span class="DontKnow">DontKnow</span></span></a></h3>
 <div class="outline-text-3" id="text-orgd19299f">
 <p>
2つの違いは何で、実際どのように、どの境界で処理しているのか。
</p>

 <ul class="org-ul"> <li>rails: アプリケーション(ソースコード)</li>
 <li>puma: アプリケーションサーバ。アプリケーションを動かしているもの</li>
</ul> <blockquote>
 <p>
まず、webリクエストはwebサーバーが受け取ります。そのリクエストがRailsで処理できるものであれば、webサーバーはリクエストに簡単な処理を加えてアプリケーションサーバーに渡します。アプリケーションサーバーはRackを使ってRailsアプリケーションに話しかけます。Railsアプリケーションがリクエストの処理を終えると、Railsはレスポンスをアプリケーションサーバーに返します。そして、webサーバーはあなたのアプリケーションを使っているユーザーにレスポンスを返します。
</p>
</blockquote>

 <ul class="org-ul"> <li> <a href="https://qiita.com/jnchito/items/3884f9a2ccc057f8f3a3">Rails開発におけるwebサーバーとアプリケーションサーバーの違い（翻訳） - Qiita</a></li>
</ul></div>
</div>
</div>
 <div id="outline-container-org91213c8" class="outline-2">
 <h2 id="org91213c8"> <a href="#org91213c8">References</a></h2>
 <div class="outline-text-2" id="text-org91213c8">
</div>
 <div id="outline-container-org725161d" class="outline-3">
 <h3 id="org725161d"> <a href="#org725161d"></a> <a href="https://github.com/thoughtbot/ruby-science">thoughtbot/ruby-science: The reference for writing fantastic Rails applications</a></h3>
 <div class="outline-text-3" id="text-org725161d">
 <p>
ruby, railsのより良い書き方のガイド。
</p>
</div>
</div>
 <div id="outline-container-org578aae4" class="outline-3">
 <h3 id="org578aae4"> <a href="#org578aae4"></a> <a href="https://qiita.com/takahiro1127/items/fcb81753eaf381b4b33c">なぜrailsの本番環境ではUnicorn,Nginxを使うのか? 　~ Rack,Unicorn,Nginxの連携について ~【Ruby On Railsでwebサービス運営】 - Qiita</a></h3>
</div>
 <div id="outline-container-org7c8cc7c" class="outline-3">
 <h3 id="org7c8cc7c"> <a href="#org7c8cc7c"></a> <a href="https://stackoverflow.com/questions/61413196/how-to-run-capybara-tests-using-selenium-chrome-in-a-dockerised-rails-environm">docker - How to run Capybara tests using Selenium & Chrome in a Dockerised Rails environment on a Mac - Stack Overflow</a></h3>
 <div class="outline-text-3" id="text-org7c8cc7c">
 <p>
dockerのseleniumで動かす方法。
</p>
</div>
</div>
 <div id="outline-container-org0f05185" class="outline-3">
 <h3 id="org0f05185"> <a href="#org0f05185"></a> <a href="https://railsguides.jp/active_model_basics.html">Active Model の基礎 - Railsガイド</a></h3>
 <div class="outline-text-3" id="text-org0f05185">
 <p>
モデルの説明。
</p>
</div>
</div>
 <div id="outline-container-orgc1c2514" class="outline-3">
 <h3 id="orgc1c2514"> <a href="#orgc1c2514"></a> <a href="https://qiita.com/jnchito/items/0ee47108972a0e302caf">永久保存版！？伊藤さん式・Railsアプリのアップグレード手順 - Qiita</a></h3>
 <div class="outline-text-3" id="text-orgc1c2514">
 <p>
アップデートの流れ。
</p>
</div>
</div>
 <div id="outline-container-orgeff716a" class="outline-3">
 <h3 id="orgeff716a"> <a href="#orgeff716a"></a> <a href="https://tech.kitchhike.com/entry/2017/03/07/190739">DHH流のルーティングで得られるメリットと、取り入れる上でのポイント - KitchHike Tech Blog</a></h3>
 <div class="outline-text-3" id="text-orgeff716a">
 <p>
ルーティングをどうするかの指針。
</p>
</div>
</div>
 <div id="outline-container-org90f2466" class="outline-3">
 <h3 id="org90f2466"> <a href="#org90f2466"></a> <a href="https://github.com/ankane/strong_migrations">ankane/strong_migrations: Catch unsafe migrations in development</a></h3>
 <div class="outline-text-3" id="text-org90f2466">
 <p>
READMEに安全なマイグレーションの説明がある。
</p>
</div>
</div>
 <div id="outline-container-org2a86546" class="outline-3">
 <h3 id="org2a86546"> <a href="#org2a86546"></a> <a href="https://tech.speee.jp/entry/2020/06/30/110000">reg-suit によるビジュアルリグレッションテストで Rails アプリの CSS 改善サイクルが回り始めた話 - Speee DEVELOPER BLOG</a></h3>
 <div class="outline-text-3" id="text-org2a86546">
 <p>
ビジュアルリグレッションテストの運用方法。
</p>
</div>
</div>
 <div id="outline-container-org56d2811" class="outline-3">
 <h3 id="org56d2811"> <a href="#org56d2811"></a> <a href="https://zenn.dev/yukito0616/articles/d3b7032e9f1e90">Only My Rails Way</a></h3>
 <div class="outline-text-3" id="text-org56d2811">
 <p>
Rails Wayの定義について。
</p>
</div>
</div>
 <div id="outline-container-org62ba7ed" class="outline-3">
 <h3 id="org62ba7ed"> <a href="#org62ba7ed"></a> <a href="https://discuss.rubyonrails.org/">Ruby on Rails Discussions - Ruby on Rails Discussions</a></h3>
 <div class="outline-text-3" id="text-org62ba7ed">
 <p>
Rails開発のディスカッション。
</p>
</div>
</div>
 <div id="outline-container-org6072115" class="outline-3">
 <h3 id="org6072115"> <a href="#org6072115"></a> <a href="https://www.slideshare.net/ockeghem/ruby-on-rails-security-142250872">Railsエンジニアのためのウェブセキュリティ入門</a></h3>
 <div class="outline-text-3" id="text-org6072115">
 <p>
わかりやすいスライド。
</p>
</div>
</div>
 <div id="outline-container-orgc379a05" class="outline-3">
 <h3 id="orgc379a05"> <a href="#orgc379a05"></a> <a href="https://techracho.bpsinc.jp/hachi8833/2020_05_13/91211">Rails開発者が採用面接で聞かれる想定Q&A 53問（翻訳）｜TechRacho by BPS株式会社</a></h3>
 <div class="outline-text-3" id="text-orgc379a05">
 <p>
ちゃんとRailsガイドを読まないときついな。
</p>
</div>
</div>
</div>
 <div id="outline-container-orgfe01e26" class="outline-2">
 <h2 id="orgfe01e26"> <a href="#orgfe01e26">Backlinks</a></h2>
 <div class="outline-text-2" id="text-orgfe01e26">
 <ul class="org-ul"> <li> <a href="./20210508234743-emacs.html">Emacs</a></li>
 <li> <a href="./20210509095513-ruby.html">Ruby</a></li>
 <li> <a href="./20210509095946-rails.html">Rails</a></li>
 <li> <a href="./20210805005543-docker.html">Docker</a></li>
 <li> <a href="./20210817003906-history.html">History</a></li>
 <li> <a href="./20210831223434-rspec.html">RSpec</a></li>
 <li> <a href="./20210911113057-go.html">Go</a></li>
 <li> <a href="./20211217165855-web_api.html">Web API</a></li>
 <li> <a href="./20220113160623-network.html">network</a></li>
 <li> <a href="./20220126105030-deploy.html">deploy</a></li>
 <li> <a href="./20220414183922-nginx.html">Nginx</a></li>
 <li> <a href="./20220420223822-memcached.html">memcached</a></li>
 <li> <a href="./20220420225811-redis.html">Redis</a></li>
 <li> <a href="./20220521112115-ecs.html">ECS</a></li>
 <li> <a href="./20221119T014132--kdoc-6-教育サービス会社を退職した__essay.html">KDOC 6: 教育サービス会社を退職した</a></li>
 <li> <a href="./20221119T014335--kdoc-7-ドローン・地図関係の会社に入社した__essay.html">KDOC 7: ドローン・地図関係の会社に入社した</a></li>
 <li> <a href="./20230119001157-openapi.html">OpenAPI</a></li>
 <li> <a href="./20250501T192423--kdoc-355-プログラミングを仕事の梃子として使うとよい__essay.html">KDOC 355: プログラミングを仕事の梃子として使うとよい</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20210509095946-rails.html"/>
  <id>https://kijimad.github.io/roam/20210509095946-rails.html</id>
  <updated>2025-06-14T00:00:00+09:00</updated>
</entry>
<entry>
  <title>JavaScript</title>
  <author><name>root</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orgf484908" class="outline-2">
 <h2 id="orgf484908"> <a href="#orgf484908">概要</a></h2>
 <div class="outline-text-2" id="text-orgf484908">
 <p>
JavaScriptはブラウザ上で動作するのを特徴とする <a href="20210509101246-programming_language.html#ID-868ac56a-2d42-48d7-ab7f-7047c85a8f39">Programming Language</a>。WEB開発のフロントエンドに多用される。多くのフレームワーク、ライブラリが存在していて、活発に開発が進んでいる。
</p>

 <p>
古い本だと書き方が古くなってたり最悪動かなかったりする。最新のコードを読んでもよくわからない、ということも多い。書籍を買うときは発行年度を確かめることが必要。以前jsやってたので <a href="20210902220546-react.html#ID-dc50d818-d7d1-48a8-ad76-62ead617c670">React</a>, <a href="20210831232330-typescript.html#ID-ad1527ee-63b3-4a9b-a553-10899f57c234">TypeScript</a>にいって大丈夫だろう、は罠。学ぶ前に最新のjsをキャッチアップしておかないと、理解しにくい。
</p>
</div>
</div>
 <div id="outline-container-org861d2df" class="outline-2">
 <h2 id="org861d2df"> <a href="#org861d2df">Memo</a></h2>
 <div class="outline-text-2" id="text-org861d2df">
 <p>
新しく追加された構文などもあって、ややこしい。
</p>
</div>
 <div id="outline-container-orgdc1c319" class="outline-3">
 <h3 id="orgdc1c319"> <a href="#orgdc1c319">npxでライブラリの場所を探す</a></h3>
 <div class="outline-text-3" id="text-orgdc1c319">
 <p>
どこに実行ファイルがあるのか知りたいことがある。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 1: </span>実行ファイルを探す</label> <pre class="src src-shell">npx which textlint
</pre>
</div>

 <div class="results" id="org67f79e2">
 <p>
 <i>home/silver/roam/node_modules</i>.bin/textlint
</p>

</div>
</div>
</div>
 <div id="outline-container-org949f895" class="outline-3">
 <h3 id="org949f895"> <a href="#org949f895">文字コードの仕組み</a></h3>
 <div class="outline-text-3" id="text-org949f895">
 <ul class="org-ul"> <li> <a href="https://ja.javascript.info/arraybuffer-binary-arrays">ArrayBuffer, binary arrays</a></li>
 <li> <a href="https://qiita.com/mouseofmicky/items/ab6340a2a4634bee723d">JavaScriptのバイナリー文字列とatob、btoaの関係について - Qiita</a></li>
</ul> <p>
パラメータを圧縮する。
</p>
 <ul class="org-ul"> <li>元データ → 圧縮 → base64エンコード(圧縮によってURLに使えない文字が含まれるため) → URL表示形式</li>
</ul> <p>
パラメータを解凍する。
</p>
 <ul class="org-ul"> <li>URL表示形式 → base64デコード → 解凍 → 元データ</li>
</ul></div>
</div>
 <div id="outline-container-orgfd30d0a" class="outline-3">
 <h3 id="orgfd30d0a"> <a href="#orgfd30d0a">プロジェクトすべてにprettierをかける</a></h3>
 <div class="outline-text-3" id="text-orgfd30d0a">
 <p>
prettierは書式を整形しプロジェクトで一貫性をもたせられるツール。
</p>

 <div class="org-src-container">
 <pre class="src src-shell">npx prettier --write  <span class="org-string">"**/*.js"</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-org6702bcb" class="outline-3">
 <h3 id="org6702bcb"> <a href="#org6702bcb">インストールしてるのに開発用サーバでライブラリのエラーが出るとき</a></h3>
 <div class="outline-text-3" id="text-org6702bcb">
 <p>
 <code>npm install</code> などでライブラリを追加したあとは、  <code>npm start</code> を再起動する必要がある。
</p>
</div>
</div>
 <div id="outline-container-org608bd23" class="outline-3">
 <h3 id="org608bd23"> <a href="#org608bd23">create-react-appでエラーが出るとき</a></h3>
 <div class="outline-text-3" id="text-org608bd23">
 <p>
create-react-appを実行するとき、このようなエラーがでるとき。
</p>
 <blockquote>
 <p>
“You are running create-react-app 4.0.3 which is behind the latest release (5.0.0)”
</p>
</blockquote>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 2: </span>キャッシュを削除する</label> <pre class="src src-shell">npx clear-npx-cache
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 3: </span>バージョンを明示する</label> <pre class="src src-shell">npx create-react-app@latest my-app
</pre>
</div>
</div>
</div>
 <div id="outline-container-org8fe5bed" class="outline-3">
 <h3 id="org8fe5bed"> <a href="#org8fe5bed">D3.js: グラフ描画ライブラリ</a></h3>
 <div class="outline-text-3" id="text-org8fe5bed">
 <ul class="org-ul"> <li> <a href="https://d3js.org/">D3.js - Data-Driven Documents</a></li>
 <li> <a href="https://github.com/d3/d3">d3/d3: Bring data to life with SVG, Canvas and HTML.</a></li>
</ul> <p>
公式サイト。
</p>
</div>
</div>
 <div id="outline-container-orgd803991" class="outline-3">
 <h3 id="orgd803991"> <a href="#orgd803991">関数の合成</a></h3>
 <div class="outline-text-3" id="text-orgd803991">
 <p>
関数型プログラミングでは小さい関数を定義する。
それらを合成して、目的を達成する。
</p>

 <ul class="org-ul"> <li>返り値を工夫してメソッドチェーンにする。</li>
</ul> <p>
 <code>replace</code> は引数、返り値が文字列なので…。
</p>
 <div class="org-src-container">
 <pre class="src src-javascript"> <span class="org-keyword">const</span>  <span class="org-variable-name">template</span> =  <span class="org-string">"hh:mm:ss tt"</span>;
 <span class="org-keyword">const</span>  <span class="org-variable-name">clockTime</span> = template
      .replace( <span class="org-string">"hh"</span>,  <span class="org-string">"03"</span>)
      .replace( <span class="org-string">"mm"</span>,  <span class="org-string">"33"</span>)
      .replace( <span class="org-string">"ss"</span>,  <span class="org-string">"33"</span>)
      .replace( <span class="org-string">"tt"</span>,  <span class="org-string">"PM"</span>);
console.log(clockTime);
</pre>
</div>
 <p>
といったことができる。
</p>

 <ul class="org-ul"> <li>高階関数を利用する( <a href="https://www.oreilly.co.jp/books/9784873119380/">O’Reilly Japan - Reactハンズオンラーニング 第2版</a> p.62)</li>
</ul> <p>
関数を集約させるところに注目。
 <code>compose</code> で非破壊の関数をまとめて順番に評価している。
</p>
 <div class="org-src-container">
 <pre class="src src-javascript"> <span class="org-keyword">const</span>  <span class="org-variable-name">oneSecond</span> = () => 1000;
 <span class="org-keyword">const</span>  <span class="org-variable-name">getCurrentTime</span> = () =>  <span class="org-keyword">new</span>  <span class="org-type">Date</span>();
 <span class="org-keyword">const</span>  <span class="org-variable-name">clear</span> = () => console.clear();
 <span class="org-keyword">const</span>  <span class="org-variable-name">log</span> = message => console.log(message);

 <span class="org-keyword">const</span>  <span class="org-variable-name">serializeClockTime</span> = date => ({
    hours: date.getHours(),
    minutes: date.getMinutes(),
    seconds: date.getSeconds()
});

 <span class="org-keyword">const</span>  <span class="org-variable-name">civilianHours</span> = clockTime => ({
    ...clockTime,
    hours: clockTime.hours > 12 ? clockTime.hours - 12 : clockTime.hours
});

 <span class="org-keyword">const</span>  <span class="org-variable-name">appendAMPM</span> = clockTime => ({
    ...clockTime,
    ampm: clockTime.hours >= 12 ?  <span class="org-string">"PM"</span> :  <span class="org-string">"AM"</span>
})

 <span class="org-keyword">const</span>  <span class="org-variable-name">display</span> = target => time => target(time);

 <span class="org-keyword">const</span>  <span class="org-variable-name">formatClock</span> = format => time =>
      format
      .replace( <span class="org-string">"hh"</span>, time.hours)
      .replace( <span class="org-string">"mm"</span>, time.minutes)
      .replace( <span class="org-string">"ss"</span>, time.seconds)
      .replace( <span class="org-string">"tt"</span>, time.ampm);

 <span class="org-keyword">const</span>  <span class="org-variable-name">prependZero</span> = key => clockTime => ({
    ...clockTime,
    [key]: clockTime[key] < 10 ?  <span class="org-string">"0"</span> + clockTime[key] :  <span class="org-string">""</span> + clockTime[key]
});

 <span class="org-keyword">const</span>  <span class="org-variable-name">compose</span> = (...fns) => arg =>
      fns.reduce((conposed, f) => f(composed), arg);
 <span class="org-comment-delimiter">// </span> <span class="org-comment">reduceの第一引数はコールバック関数、第二引数は初期値。</span>
 <span class="org-comment-delimiter">// </span> <span class="org-comment">配列内の最初の関数は引数argで呼び出され、それ以降は前の関数の戻り値が次の関数の引数として渡される。</span>
 <span class="org-comment-delimiter">// </span> <span class="org-comment">配列内の関数は順に呼び出され、最後の関数の戻り値が最終的に戻り値として返される。</span>

 <span class="org-keyword">const</span>  <span class="org-variable-name">convertToCivilianTime</span> = clockTime =>
      compose(
          appendAMPM,
          civilianHours
      )(clockTime);

 <span class="org-keyword">const</span>  <span class="org-variable-name">doubleDigits</span> = civilianTime =>
      compose(
          prependZero( <span class="org-string">"hours"</span>),
          prependZero( <span class="org-string">"minutes"</span>),
          prependZero( <span class="org-string">"seconds"</span>)
      )(civilianTime);

 <span class="org-keyword">const</span>  <span class="org-variable-name">startTicking</span> = () =>
      setInterval(
          compose(
              clear,
              getCurrentTime,
              serializeClockTime,
              convertToCivilianTime,
              doubleDigits,
              formatClock( <span class="org-string">"hh:mm:ss tt"</span>),
              display(log)
          ),
          oneSecond()
      );

startTicking();
</pre>
</div>
</div>
</div>
 <div id="outline-container-org0d7e468" class="outline-3">
 <h3 id="org0d7e468"> <a href="#org0d7e468">再帰</a></h3>
 <div class="outline-text-3" id="text-org0d7e468">
 <p>
自身を呼び出す。非同期処理と組み合わさったときに真価を発揮する。
また、データ構造の探索に用いられる。
</p>
 <div class="org-src-container">
 <pre class="src src-javascript"> <span class="org-keyword">const</span>  <span class="org-variable-name">countdown</span> = (value, fn) => {
    fn(value);
     <span class="org-keyword">return</span> value > 0 ? countdown(value - 1, fn) : value;
};

countdown(10, value => console.log(value));
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgbb75aa2" class="outline-3">
 <h3 id="orgbb75aa2"> <a href="#orgbb75aa2">高階関数/カリー化</a></h3>
 <div class="outline-text-3" id="text-orgbb75aa2">
 <ul class="org-ul"> <li> <code>userLogs</code> 関数を定義。</li>
 <li> <code>userLogs</code> に引数を渡して  <code>logs</code> 関数を定義。</li>
 <li> <code>logs</code> 関数に値を渡す。すべてのコンソールの先頭に“grandpa23”が出る。</li>
</ul> <div class="org-src-container">
 <pre class="src src-javascript"> <span class="org-keyword">const</span>  <span class="org-variable-name">userLogs</span> = userName => message =>
      console.log( <span class="org-string">`${userName} -> ${message}`</span>);
 <span class="org-keyword">const</span>  <span class="org-variable-name">log</span> = userLogs( <span class="org-string">"grandpa23"</span>);
log( <span class="org-string">"attempted to load 20 fake members"</span>);
getFakeMembers(20).then(
    members => log( <span class="org-string">`successfully loaded ${members.length} members`</span>)
). <span class="org-keyword">catch</span>(
    error => log( <span class="org-string">"encountered an error loading members"</span>)
);
 <span class="org-comment-delimiter">// </span> <span class="org-comment">grandpa23 -> attempted to load 20 fake members</span>
 <span class="org-comment-delimiter">// </span> <span class="org-comment">grandpa23 -> successfully loaded 20 members</span>
 <span class="org-comment-delimiter">// </span> <span class="org-comment">grandpa23 -> attempted to load 20 fake members</span>
 <span class="org-comment-delimiter">// </span> <span class="org-comment">grandpa23 -> encountered an error loading members</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-org5e14c02" class="outline-3">
 <h3 id="org5e14c02"> <a href="#org5e14c02">reduce</a></h3>
 <div class="outline-text-3" id="text-org5e14c02">
 <p>
配列を単一の値へ変換する。
</p>

 <div class="org-src-container">
 <pre class="src src-javascript"> <span class="org-keyword">const</span>  <span class="org-variable-name">ages</span> = [21, 18, 42, 40, 64, 63, 34];
 <span class="org-keyword">const</span>  <span class="org-variable-name">maxAge</span> = ages.reduce((max, age) => {
    console.log( <span class="org-string">`${age} > ${max} = ${age > max}`</span>);
     <span class="org-keyword">if</span> (age > max) {
         <span class="org-keyword">return</span> age;
    }  <span class="org-keyword">else</span> {
         <span class="org-keyword">return</span> max;
    }
}, 0);

console.log( <span class="org-string">"maxAge"</span>, maxAge);

 <span class="org-comment-delimiter">// </span> <span class="org-comment">21 > 0 = true</span>
 <span class="org-comment-delimiter">// </span> <span class="org-comment">18 > 21 = false</span>
 <span class="org-comment-delimiter">// </span> <span class="org-comment">42 > 21 = true</span>
 <span class="org-comment-delimiter">// </span> <span class="org-comment">40 > 42 = false</span>
 <span class="org-comment-delimiter">// </span> <span class="org-comment">64 > 42 = true</span>
 <span class="org-comment-delimiter">// </span> <span class="org-comment">63 > 64 = false</span>
 <span class="org-comment-delimiter">// </span> <span class="org-comment">34 > 64 = false</span>
 <span class="org-comment-delimiter">// </span> <span class="org-comment">maxAge 64</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-org683fc93" class="outline-3">
 <h3 id="org683fc93"> <a href="#org683fc93">命令形 vs. 宣言型</a></h3>
 <div class="outline-text-3" id="text-org683fc93">
 <ul class="org-ul"> <li> <a href="https://www.oreilly.co.jp/books/9784873119380/">O’Reilly Japan - Reactハンズオンラーニング 第2版</a> p39</li>
</ul> <blockquote>
 <p>
関数型プログラミングは、宣言型プログラミングというより大きなプログラミングパラダイムの
一部です。宣言型プログラミングにおいては、「何をするのか」（what）が重要で、「どのようにす
るのか」（how）は重要ではありません。ひたすらwhat を記述することでアプリケーションを構築
するプログラミングのスタイルを宣言型と呼びます。
一方で、従来のプログラミング言語は、結果を得るための手順（how）を記述します。これを命
令型プログラミングと呼びます。
</p>
</blockquote>
</div>
</div>
 <div id="outline-container-org66945b5" class="outline-3">
 <h3 id="org66945b5"> <a href="#org66945b5">export</a></h3>
 <div class="outline-text-3" id="text-org66945b5">
 <p>
単一のオブジェクトをエクスポートする場合は、  <code>export default</code> と記述する。
</p>
 <div class="org-src-container">
 <pre class="src src-javascript"> <span class="org-keyword">export</span>  <span class="org-keyword">default</span>  <span class="org-keyword">new</span>  <span class="org-type">Expedition</span>( <span class="org-string">"Mt. Freel"</span>, 2, [ <span class="org-string">"water"</span>,  <span class="org-string">"snack"</span>]);
</pre>
</div>

 <p>
インポート側。
</p>
 <div class="org-src-container">
 <pre class="src src-javascript"> <span class="org-keyword">import</span> freel from  <span class="org-string">"./mt-freel"</span>
</pre>
</div>

 <p>
エクスポートするときの  <code>default</code> キーワードによって、インポートの記述が変わる。
</p>

 <p>
commonJSでは  <code>require</code> 関数を使う。
</p>
</div>
</div>
 <div id="outline-container-orga43424c" class="outline-3">
 <h3 id="orga43424c"> <a href="#orga43424c">async</a></h3>
 <div class="outline-text-3" id="text-orga43424c">
 <p>
 <code>async</code> 関数は、非同期関数を同期関数のように呼び出せる。
</p>

 <p>
エラー処理。
</p>
 <div class="org-src-container">
 <pre class="src src-javascript"> <span class="org-keyword">const</span>  <span class="org-variable-name">getFakePerson</span> =  <span class="org-keyword">async</span> () => {
     <span class="org-keyword">try</span> {
         <span class="org-keyword">const</span>  <span class="org-variable-name">res</span> =  <span class="org-keyword">await</span> fetch( <span class="org-string">"https://api.randomuser.me/?nat=US&results=1"</span>);
         <span class="org-keyword">const</span> { results } =  <span class="org-keyword">await</span> res.json();
        console.log(results);
    }  <span class="org-keyword">catch</span> (error) {
        console.error(error);
    }
};
</pre>
</div>
 <p>
単に関数呼び出しを囲うだけでいい。
</p>
</div>
</div>
 <div id="outline-container-org9bc90ae" class="outline-3">
 <h3 id="org9bc90ae"> <a href="#org9bc90ae">promise method</a></h3>
 <div class="outline-text-3" id="text-org9bc90ae">
 <p>
非同期のアクセス処理を行う関数。
アクセスに時間がかかる間待ってるのは無駄なので、平行処理させる。
</p>
 <div class="org-src-container">
 <pre class="src src-javascript">fetch( <span class="org-string">"https://google.com"</span>)  <span class="org-comment-delimiter">// </span> <span class="org-comment">promiseオブジェクトが返ってくるだけ</span>

fetch( <span class="org-string">"https://google.com"</span>).then(res =>
    res.json()  <span class="org-comment-delimiter">// </span> <span class="org-comment">非同期処理した結果が返ってくる</span>
)
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-javascript">fetch( <span class="org-string">"https://google.com"</span>)
  .then(res => res.json())
  .then(json => json.results)
  .then(console.log)
  . <span class="org-keyword">catch</span>(console.error);
</pre>
</div>
</div>
</div>
 <div id="outline-container-org867315a" class="outline-3">
 <h3 id="org867315a"> <a href="#org867315a">spread syntax</a></h3>
 <div class="outline-text-3" id="text-org867315a">
 <p>
 <code>...</code> : スプレッド構文。いくつかの用途がある。
</p>

 <ul class="org-ul"> <li>配列の連結に使用される。</li>
</ul> <div class="org-src-container">
 <pre class="src src-javascript"> <span class="org-keyword">const</span>  <span class="org-variable-name">peaks</span> = [ <span class="org-string">"Tallac"</span>,  <span class="org-string">"Ralston"</span>,  <span class="org-string">"Rose"</span>];
 <span class="org-keyword">const</span>  <span class="org-variable-name">canyons</span> = [ <span class="org-string">"Ward"</span>,  <span class="org-string">"Blackwood"</span>];
 <span class="org-keyword">const</span>  <span class="org-variable-name">tahoe</span> = [...peaks, ...canyons];

console.log(tahoe.join( <span class="org-string">", "</span>));  <span class="org-comment-delimiter">// </span> <span class="org-comment">Tallac, Ralston, Rose, Ward, Blackwood</span>
</pre>
</div>

 <ul class="org-ul"> <li>配列のコピー作成(イミュータブル)</li>
</ul> <div class="org-src-container">
 <pre class="src src-javascript"> <span class="org-keyword">const</span>  <span class="org-variable-name">peaks</span> = [ <span class="org-string">"Tallac"</span>,  <span class="org-string">"Ralton"</span>,  <span class="org-string">"Rose"</span>];
 <span class="org-keyword">const</span> [ <span class="org-variable-name">last</span>] = [...peaks].reverse();  <span class="org-comment-delimiter">// </span> <span class="org-comment">peaksがreverse()で破壊するのを防ぐため、コピーを作成する。そして配列の最初の要素をlastに代入する。</span>

console.log(last);  <span class="org-comment-delimiter">// </span> <span class="org-comment">Rose</span>
console.log(peaks.join( <span class="org-string">", "</span>));  <span class="org-comment-delimiter">// </span> <span class="org-comment">Tallac, Ralston, Rose => 破壊してない</span>
</pre>
</div>

 <ul class="org-ul"> <li>配列の「残り全部」を表現する</li>
</ul> <div class="org-src-container">
 <pre class="src src-javascript"> <span class="org-keyword">const</span>  <span class="org-variable-name">num</span> = [1, 2, 3]
 <span class="org-keyword">const</span> [first, ...others] = nums;
console.log(others.join( <span class="org-string">", "</span>));  <span class="org-comment-delimiter">// </span> <span class="org-comment">2, 3</span>
</pre>
</div>

 <ul class="org-ul"> <li>関数の引数を配列として受け取る</li>
</ul> <div class="org-src-container">
 <pre class="src src-javascript">funciton directions(...args) {
     <span class="org-keyword">let</span> [start, ...remaining] = args;
     <span class="org-keyword">let</span> [finish, ...stops] = remaining.reverse();

    args.length
    start
    finish
    stops.length
}

directions( <span class="org-string">"Truckee"</span>,  <span class="org-string">"Tahoe City"</span>,  <span class="org-string">"Sunnyside"</span>)  <span class="org-comment-delimiter">// </span> <span class="org-comment">任意の引数を受け取れる</span>
</pre>
</div>

 <ul class="org-ul"> <li> <p>
オブジェクトの連結
</p>
 <div class="org-src-container">
 <pre class="src src-javascript"> <span class="org-keyword">const</span>  <span class="org-variable-name">morning</span> = {
  breakfast:  <span class="org-string">"oatmeal"</span>,
  lunch:  <span class="org-string">"peanut butter and jelly"</span>
};

 <span class="org-keyword">const</span>  <span class="org-variable-name">dinner</span> =  <span class="org-string">"mac and cheese"</span>;
 <span class="org-keyword">const</span>  <span class="org-variable-name">backpackingMeals</span> = {
  ...morning,
  dinner
};

console.log(backpackingMeals);

 <span class="org-comment-delimiter">// </span> <span class="org-comment">{</span>
 <span class="org-comment-delimiter">//     </span> <span class="org-comment">breakfast: "oatmeals",</span>
 <span class="org-comment-delimiter">//     </span> <span class="org-comment">lunch: "peanut butter and jelly",</span>
 <span class="org-comment-delimiter">//     </span> <span class="org-comment">dinner: "mac and cheese"</span>
 <span class="org-comment-delimiter">// </span> <span class="org-comment">}</span>
</pre>
</div></li>
</ul></div>
</div>
 <div id="outline-container-orga772b6f" class="outline-3">
 <h3 id="orga772b6f"> <a href="#orga772b6f">object literal</a></h3>
 <div class="outline-text-3" id="text-orga772b6f">
 <p>
変数をオブジェクトのプロパティ名として記述する場合、プロパティ名を省略できる。
</p>
 <div class="org-src-container">
 <pre class="src src-javascript"> <span class="org-keyword">const</span>  <span class="org-variable-name">name</span> =  <span class="org-string">"Alice"</span>;
 <span class="org-keyword">const</span>  <span class="org-variable-name">age</span> = 9;

 <span class="org-keyword">const</span>  <span class="org-variable-name">person</span> = { name, age };
console.log(person);  <span class="org-comment-delimiter">// </span> <span class="org-comment">{ name: "Alice", age: 9 }</span>
</pre>
</div>

 <p>
関数もオブジェクトリテラル内に記述することが可能。
</p>
 <div class="org-src-container">
 <pre class="src src-javascript"> <span class="org-keyword">const</span>  <span class="org-variable-name">name</span> =  <span class="org-string">"Alice"</span>;
 <span class="org-keyword">const</span>  <span class="org-variable-name">age</span> = 9;
 <span class="org-keyword">const</span>  <span class="org-variable-name">print</span> =  <span class="org-keyword">function</span>() {
  console.log( <span class="org-string">`${this.name}`</span> is  <span class="org-string">`${this.age} years old.`</span>)
}

 <span class="org-keyword">const</span>  <span class="org-variable-name">person</span> = { name, age, print };
person.print();  <span class="org-comment-delimiter">// </span> <span class="org-comment">"Alice is 9 years old."</span>
</pre>
</div>

 <p>
オブジェクトリテラル内に関数を記述する際に、functionキーワードを省略できる。
</p>
 <div class="org-src-container">
 <pre class="src src-javascript"> <span class="org-keyword">const</span>  <span class="org-variable-name">skier</span> = {
    name,
    sound,
    powderYell() {
         <span class="org-keyword">let</span>  <span class="org-variable-name">yell</span> =  <span class="org-constant">this</span>.sound.toUpperCase();
        console.log( <span class="org-string">`${yell} ${yell} ${yell}`</span>);
    },
    speed(mph) {
         <span class="org-constant">this</span>.speed = mph;
        console.log( <span class="org-string">"speed:"</span>, mph);
    }
}
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgd70f68b" class="outline-3">
 <h3 id="orgd70f68b"> <a href="#orgd70f68b">destructuring</a></h3>
 <div class="outline-text-3" id="text-orgd70f68b">
 <p>
必要なプロパティのみを取捨選択して、代入できる機能。
</p>
 <div class="org-src-container">
 <pre class="src src-javascript"> <span class="org-keyword">const</span>  <span class="org-variable-name">aaa</span> = {
    bread:  <span class="org-string">"aaa"</span>,
    meat:  <span class="org-string">"bbb"</span>,
    cheese:  <span class="org-string">"ccc"</span>
};

 <span class="org-keyword">const</span> { bread, meat } = sandwitch  <span class="org-comment-delimiter">// </span> <span class="org-comment">オブジェクトから必要なプロパティのみを取捨選択する</span>
sandwitch  <span class="org-comment-delimiter">// </span> <span class="org-comment">=> aaa, bbb</span>
</pre>
</div>

 <p>
読み飛ばすことも可能。必要な要素のみを取得することをリストマッチングという。
</p>
 <div class="org-src-container">
 <pre class="src src-javascript"> <span class="org-keyword">const</span> [, ,  <span class="org-variable-name">thirdAnimal</span>] = [ <span class="org-string">"Horse"</span>,  <span class="org-string">"Mouse"</span>,  <span class="org-string">"Cat"</span>];

console.log(thirdAnimal);  <span class="org-comment-delimiter">// </span> <span class="org-comment">Cat</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-org372b088" class="outline-3">
 <h3 id="org372b088"> <a href="#org372b088">arrow function</a></h3>
 <div class="outline-text-3" id="text-org372b088">
 <div class="org-src-container">
 <pre class="src src-javascript"> <span class="org-keyword">const</span>  <span class="org-variable-name">aaa</span> = (arg) =>  <span class="org-string">`return_value: ${arg}`</span>;
</pre>
</div>

 <p>
戻り値のオブジェクトを括弧で囲む必要がある。
</p>
 <div class="org-src-container">
 <pre class="src src-javascript"> <span class="org-keyword">const</span>  <span class="org-variable-name">aaa</span> = (firstName) => ({
    first: firstName,
    last: lastName
})
</pre>
</div>

 <p>
アロー関数は独自のスコープを持たないので、アロー関数の外側と内側でスコープが保持される。
</p>
</div>
</div>
 <div id="outline-container-org4c74ff5" class="outline-3">
 <h3 id="org4c74ff5"> <a href="#org4c74ff5">巻き上げ</a></h3>
 <div class="outline-text-3" id="text-org4c74ff5">
 <p>
関数式は変数宣言の前で呼び出せない。
</p>
 <div class="org-src-container">
 <pre class="src src-javascript">aaa()  <span class="org-comment-delimiter">// </span> <span class="org-comment">これは呼び出せない</span>

 <span class="org-keyword">const</span> = aaa =  <span class="org-keyword">function</span>() {
   <span class="org-string">"aaa"</span>
}
</pre>
</div>

 <p>
関数宣言は宣言の前で呼び出すことができる。(巻き上げ)
</p>
 <div class="org-src-container">
 <pre class="src src-javascript">bbb()  <span class="org-comment-delimiter">// </span> <span class="org-comment">これは呼び出せる</span>

 <span class="org-keyword">function</span>  <span class="org-function-name">bbb</span>() {
   <span class="org-string">"bbb"</span>
  }
</pre>
</div>
</div>
</div>
 <div id="outline-container-org869f7a0" class="outline-3">
 <h3 id="org869f7a0"> <a href="#org869f7a0">node</a></h3>
 <div class="outline-text-3" id="text-org869f7a0">
 <p>
フルスタックアプリケーションを構築するために設計されたJavaScript実行環境。
</p>
</div>
</div>
 <div id="outline-container-org1b80230" class="outline-3">
 <h3 id="org1b80230"> <a href="#org1b80230">npm</a></h3>
 <div class="outline-text-3" id="text-org1b80230">
 <p>
Node.jsのパッケージ管理システム。
package.jsonで管理する。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 4: </span>初期化</label> <pre class="src src-shell">npm init
npm init -y  <span class="org-comment-delimiter"># </span> <span class="org-comment">デフォルトの設定を使用する</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-org0730981" class="outline-3">
 <h3 id="org0730981"> <a href="#org0730981">yarn</a></h3>
 <div class="outline-text-3" id="text-org0730981">
 <p>
Node.jsのパッケージ管理システム。
当時npmではできなかった依存パッケージのバージョン固定化のために実装された。
</p>
</div>
</div>
 <div id="outline-container-org25ab21b" class="outline-3">
 <h3 id="org25ab21b"> <a href="#org25ab21b">バージョンを無視してインストール</a></h3>
 <div class="outline-text-3" id="text-org25ab21b">
 <div class="org-src-container">
 <pre class="src src-shell">yarn install --ignore-engines
</pre>
</div>
</div>
</div>
 <div id="outline-container-org5d829ed" class="outline-3">
 <h3 id="org5d829ed"> <a href="#org5d829ed">スプレッド演算子</a></h3>
 <div class="outline-text-3" id="text-org5d829ed">
 <p>
 <code>...state</code> といった記法。中身を展開するスプレッド演算子。
 <a href="https://stackoverflow.com/questions/31048953/what-does-the-three-dots-notation-do-in-javascript">reactjs - What does the three dots notation do in Javascript? - Stack Overflow</a>
</p>

 <p>
↓2つは同じ意味。
</p>
 <div class="org-src-container">
 <pre class="src src-javascript"><Modal {... <span class="org-constant">this</span>.props} title= <span class="org-string">'Modal heading'</span> animation={ <span class="org-constant">false</span>}>
<Modal a={ <span class="org-constant">this</span>.props.a} b={ <span class="org-constant">this</span>.props.b} title= <span class="org-string">'Modal heading'</span> animation={ <span class="org-constant">false</span>}>
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgac8d313" class="outline-3">
 <h3 id="orgac8d313"> <a href="#orgac8d313">特徴</a></h3>
 <div class="outline-text-3" id="text-orgac8d313">
 <p>
 <a href="https://book.yyts.org/revisiting-javascript/objects-and-classes">JavaScriptのオブジェクトとクラス - サバイバルTypeScript-TypeScript入門</a>
</p>

 <blockquote>
 <p>
JavaScriptの特徴はオブジェクトリテラル{}という記法を用いて、簡単にオブジェクトを生成できる点です。
</p>

 <p>
JavaやPHPなどの言語では、オブジェクトを生成するにはまずクラスを定義し、そのクラスを元にインスタンスを作るのが普通ですが、JavaScriptはクラス定義がなくてもこのようにオブジェクトリテラルを書くと、オブジェクトをインラインで作れます。
オブジェクトリテラルがあるおかげで、JavaScriptでは自由度の高いコードが書けるようになっています。
</p>
</blockquote>

 <div class="org-src-container">
 <pre class="src src-javascript"> <span class="org-comment-delimiter">// </span> <span class="org-comment">空っぽのオブジェクトを生成</span>
 <span class="org-keyword">const</span>  <span class="org-variable-name">object</span> = {};

 <span class="org-comment-delimiter">// </span> <span class="org-comment">プロパティを指定しながらオブジェクトを生成</span>
 <span class="org-keyword">const</span>  <span class="org-variable-name">person</span> = { name:  <span class="org-string">"Bob"</span>, age: 25 };
</pre>
</div>

 <dl class="org-dl"> <dt>メソッド</dt> <dd>オブジェクトに関連づいた関数のことです。</dd>
</dl> <div class="org-src-container">
 <pre class="src src-javascript"> <span class="org-keyword">const</span>  <span class="org-variable-name">object</span> = {
   <span class="org-comment-delimiter">// </span> <span class="org-comment">キーと値に分けて書いたメソッド定義</span>
   <span class="org-function-name">printHello1</span>:  <span class="org-keyword">function</span> () {
    console.log( <span class="org-string">"Hello"</span>);
  },
   <span class="org-comment-delimiter">// </span> <span class="org-comment">短い構文を用いたメソッド定義</span>
  printHello2() {
    console.log( <span class="org-string">"Hello"</span>);
  },
};
</pre>
</div>

 <blockquote>
 <p>
JavaやPHPでは、オブジェクトのフィールドとメソッドははっきり区別されます。
一方、JavaScriptではその区別はきっちりしていません。Javaで言うところの
メソッドとフィールドは、JavaScriptでは同じように扱われます。たとえば、
メソッドにnullを代入することで、フィールドに変えてしまうこともできます。
</p>
</blockquote>

 <blockquote>
 <p>
このようにclassでクラスを定義し、newでインスタンスを生成するスタイルは、
JavaやPHP、Rubyなどと使用感がよく似ています。
</p>

 <p>
JavaScriptのクラスの特徴は、クラスもオブジェクトの一種というところです。
オブジェクトとは、プロパティの集合体だと前述しましたが、クラスもオブジェ
クトなのでプロパティの集合体としての性質を持ちます。したがって、定義し
たクラスはプロパティを追加したり、変更したりできます。
</p>
</blockquote>

 <div class="org-src-container">
 <pre class="src src-javascript"> <span class="org-keyword">const</span>  <span class="org-variable-name">myObject</span> = {};
myObject.key =  <span class="org-string">"value"</span>;  <span class="org-comment-delimiter">// </span> <span class="org-comment">プロパティを追加</span>
​ <span class="org-keyword">class</span> MyClass {}
MyClass.key =  <span class="org-string">"value"</span>;  <span class="org-comment-delimiter">// </span> <span class="org-comment">プロパティを追加</span>
</pre>
</div>

 <p>
ほかの言語ではクラスを後から変更できない。
</p>
 <div class="org-src-container">
 <pre class="src src-typescript">interface Person {
  name: string;
  age: number;
}
</pre>
</div>

 <p>
インターフェースでの型ガードを自前で実装する必要がある。
</p>
 <div class="org-src-container">
 <pre class="src src-typescript">type UnKnownObject<T extends object> = {
  [P in keyof T]: unknown;
};

function isStudent(obj: unknown): obj is Student {
  if (typeof obj !== 'object') {
    return false;
  }
  if (obj === null) {
    return false;
  }
  const {
    name,
    age,
    grade
  } = obj as UnKnownObject<Student>;
  if (typeof name !== 'string') {
    return false;
  }
  if (typeof age !== 'number') {
    return false;
  }
  if (typeof grade !== 'number') {
    return false;
  }
  return true;
}
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgb89d1f5" class="outline-3">
 <h3 id="orgb89d1f5"> <a href="#orgb89d1f5">配列</a></h3>
 <div class="outline-text-3" id="text-orgb89d1f5">
 <ul class="org-ul"> <li>配列を処理するときはやりたいことに応じて関数を選択します。するとやりたいことが明確になるのでわかりやすくもなります。除去したときは`filter()`、新しい配列を作るときは`map()`という感じです。</li>
</ul></div>
</div>
 <div id="outline-container-org3802f38" class="outline-3">
 <h3 id="org3802f38"> <a href="#org3802f38">コールバック関数</a></h3>
 <div class="outline-text-3" id="text-org3802f38">
 <ul class="org-ul"> <li>コールバック関数: 他の関数に引数として渡す関数のことです。</li>
</ul> <p>
 <a href="https://sbfl.net/blog/2019/02/08/javascript-callback-func/">JavaScriptの「コールバック関数」とは一体なんなのか</a>
</p>
</div>
</div>
 <div id="outline-container-orgba9d46c" class="outline-3">
 <h3 id="orgba9d46c"> <a href="#orgba9d46c">Eslint無視の方法</a></h3>
 <div class="outline-text-3" id="text-orgba9d46c">
 <div class="org-src-container">
 <pre class="src src-json">"rules": {
    "comma-dangle": "error",
    "require-yield": "error",
    "no-unused-vars": "off",
    "no-undef": "off",
},
</pre>
</div>

 <p>
などと書きます。
</p>
</div>
</div>
 <div id="outline-container-org02b2d6e" class="outline-3">
 <h3 id="org02b2d6e"> <a href="#org02b2d6e">クラスを使わずにモジュール分割する</a></h3>
 <div class="outline-text-3" id="text-org02b2d6e">
 <div class="org-src-container">
 <pre class="src src-javascript"> <span class="org-keyword">var</span>  <span class="org-variable-name">Msg</span> = ( <span class="org-keyword">function</span>() {
   <span class="org-keyword">function</span>  <span class="org-function-name">test</span>() {
  }
}
Msg.test()
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgf2737df" class="outline-3">
 <h3 id="orgf2737df"> <a href="#orgf2737df">命名の意味</a></h3>
 <div class="outline-text-3" id="text-orgf2737df">
 <ul class="org-ul"> <li> <code>_</code> で始まるのはプライベートメソッドです。言語によっては未使用変数ということもあります。</li>
</ul></div>
</div>
 <div id="outline-container-org23a1d24" class="outline-3">
 <h3 id="org23a1d24"> <a href="#org23a1d24">関数宣言と関数式</a></h3>
 <div class="outline-text-3" id="text-org23a1d24">
 <p>
2つの関数宣言の方法があります。
</p>

 <div class="org-src-container">
 <pre class="src src-javascript"> <span class="org-comment-delimiter">// </span> <span class="org-comment">関数宣言</span>
 <span class="org-keyword">function</span>  <span class="org-function-name">hello</span>() {
   <span class="org-keyword">return</span>  <span class="org-string">"hello"</span>;
}
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-javascript"> <span class="org-comment-delimiter">// </span> <span class="org-comment">関数式で関数を定義</span>
 <span class="org-keyword">let</span>  <span class="org-variable-name">hello</span> =  <span class="org-keyword">function</span> () {
     <span class="org-keyword">return</span>  <span class="org-string">"hello"</span>;
};  <span class="org-comment-delimiter">//</span> <span class="org-comment">←セミコロン</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgd6f81a4" class="outline-3">
 <h3 id="orgd6f81a4"> <a href="#orgd6f81a4">2つの関数式の書き方</a></h3>
 <div class="outline-text-3" id="text-orgd6f81a4">
 <p>
関数式には2つの書き方があります。
</p>

 <div class="org-src-container">
 <pre class="src src-javascript"> <span class="org-comment-delimiter">// </span> <span class="org-comment">function式を用いた関数式</span>
 <span class="org-keyword">const</span>  <span class="org-variable-name">hello</span> =  <span class="org-keyword">function</span> ( <span class="org-variable-name">name</span>) {
   <span class="org-keyword">return</span>  <span class="org-string">`Hello, ${name}!`</span>;
};

 <span class="org-comment-delimiter">// </span> <span class="org-comment">アロー関数の関数式</span>
 <span class="org-keyword">const</span>  <span class="org-variable-name">hello</span> = (name) => {
   <span class="org-keyword">return</span>  <span class="org-string">`Hello, ${name}!`</span>;
};
</pre>
</div>

 <p>
短く書けるのでアロー関数が好まれます。
</p>
</div>
</div>
 <div id="outline-container-org23e3fd7" class="outline-3">
 <h3 id="org23e3fd7"> <a href="#org23e3fd7">NodeList</a></h3>
 <div class="outline-text-3" id="text-org23e3fd7">
 <ul class="org-ul"> <li>NodeList -  <a href="https://developer.mozilla.org/ja/docs/Web/API/NodeList">https://developer.mozilla.org/ja/docs/Web/API/NodeList</a></li>
 <li>text node: タグに囲まれたもの。  <code><p>これ</p>。</code></li>
 <li>element node:  <code><p>や、</p></code></li>
 <li>DOMツリー: ブラウザがアクセスしてHTMLを解析すると文書の内容を表すオブジェクトのツリー構造が構築されます。これがDOMツリーです。DOMツリーを形成する1つ1つのオブジェクトがノードです。さらに子のオブジェクトを持っている可能性があります。</li>
</ul> <p>
 <a href="https://qiita.com/KDE_SPACE/items/e21bb31dd4d9c162c4a6">https://qiita.com/KDE_SPACE/items/e21bb31dd4d9c162c4a6</a>
</p>
</div>
</div>
 <div id="outline-container-org5710a5c" class="outline-3">
 <h3 id="org5710a5c"> <a href="#org5710a5c">package.json</a></h3>
 <div class="outline-text-3" id="text-org5710a5c">
 <p>
パッケージを理解するために不可欠です。
</p>
</div>
 <div id="outline-container-org360ff60" class="outline-4">
 <h4 id="org360ff60"> <a href="#org360ff60">scripts</a></h4>
 <div class="outline-text-4" id="text-org360ff60">
 <p>
makeのようなもの。
</p>
 <div class="org-src-container">
 <pre class="src src-shell">npm run <タスク名>
</pre>
</div>
 <p>
で実行できる。
</p>

 <div class="org-src-container">
 <pre class="src src-json">"scripts": {
    "build": "NODE_ENV=production babel src --out-dir lib --source-maps",
    "watch": "babel src --out-dir lib --watch --source-maps",
    "prepublish": "npm run --if-present build",
    "test": "mocha --require @babel/register test/*test.js"
}
</pre>
</div>
</div>
</div>
 <div id="outline-container-org1bef7c4" class="outline-4">
 <h4 id="org1bef7c4"> <a href="#org1bef7c4">files</a></h4>
 <div class="outline-text-4" id="text-org1bef7c4">
 <p>
npm installされたときに展開されるファイル、実行されるファイルを指定する。
</p>

 <div class="org-src-container">
 <pre class="src src-json">"main": "lib/index.js",
"files": [
    "lib",
    "src"
],
</pre>
</div>

 <p>
srcをコンパイルしてlibに格納、パッケージとしてはこちらを使用する、みたいなことを指定する。はず。
</p>
</div>
</div>
 <div id="outline-container-org7546c77" class="outline-4">
 <h4 id="org7546c77"> <a href="#org7546c77">GitHubリポジトリから読み込むとき</a></h4>
 <div class="outline-text-4" id="text-org7546c77">
 <div class="org-src-container">
 <pre class="src src-shell">npm install git@github.com:kijimaD/textlint-plugin-org#develop
</pre>
</div>
</div>
</div>
</div>
 <div id="outline-container-org28e21e8" class="outline-3">
 <h3 id="org28e21e8"> <a href="#org28e21e8">.babelrc</a></h3>
 <div class="outline-text-3" id="text-org28e21e8">
 <p>
babelの設定。presetは使うbabelと合わせる必要がある。
</p>
 <div class="org-src-container">
 <pre class="src src-json">{
  "presets": [
      "@babel/preset-env"
  ],
  "env": {
    "development": {
      "presets": [
          "jsdoc-to-assert",
          "power-assert"
      ]
    }
  }
}
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgb1997d5" class="outline-3">
 <h3 id="orgb1997d5"> <a href="#orgb1997d5">.eslintrc</a></h3>
 <div class="outline-text-3" id="text-orgb1997d5">
</div>
 <div id="outline-container-orgde79d15" class="outline-4">
 <h4 id="orgde79d15"> <a href="#orgde79d15">extends</a></h4>
 <div class="outline-text-4" id="text-orgde79d15">
 <p>
事前にnode i airbnb-baseしておいて
.eslintrcに追加するとルールセットを追加できる。
</p>
 <div class="org-src-container">
 <pre class="src src-json">"extends": "airbnb-base",
</pre>
</div>
</div>
</div>
</div>
 <div id="outline-container-org532b21a" class="outline-3">
 <h3 id="org532b21a"> <a href="#org532b21a">パッケージ関連の言葉</a></h3>
 <div class="outline-text-3" id="text-org532b21a">
 <p>
ややこしい。
</p>
</div>
 <div id="outline-container-org287658b" class="outline-4">
 <h4 id="org287658b"> <a href="#org287658b">npm パッケージマネージャ</a></h4>
 <div class="outline-text-4" id="text-org287658b">
 <p>
package.jsonに書かれた設定でいろいろ実行。
パッケージインストール、アップデート、タスク実行、などいろいろ。
パッケージをインストールするときには、これが実行されてコンパイルされて使える状態になってたりする。
</p>

 <div class="org-src-container">
 <pre class="src src-shell">npm i
</pre>
</div>

 <p>
パッケージ内のコマンドを実行する。おそらくbundle execとかと同じ。
</p>

 <div class="org-src-container">
 <pre class="src src-shell">npx lint
</pre>
</div>
</div>
</div>
 <div id="outline-container-org23b7dab" class="outline-4">
 <h4 id="org23b7dab"> <a href="#org23b7dab">node 実行環境</a></h4>
 <div class="outline-text-4" id="text-org23b7dab">
 <div class="org-src-container">
 <pre class="src src-shell">node  <span class="org-comment-delimiter"># </span> <span class="org-comment">repl起動</span>
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-shell">node -v
</pre>
</div>

 <p>
本体をバージョンアップしても反映されないときは実行場所を確認する。
nでバージョンしても、読んでるのはnvmだったりする。.bash_profileなどを確認。
</p>
</div>
</div>
</div>
 <div id="outline-container-org836cf7e" class="outline-3">
 <h3 id="org836cf7e"> <a href="#org836cf7e">便利コマンド</a></h3>
 <div class="outline-text-3" id="text-org836cf7e">
 <p>
ファイルに更新があったらテスト実行する。超便利。
</p>
 <div class="org-src-container">
 <pre class="src src-shell">npm test -- --watch
</pre>
</div>
</div>
</div>
 <div id="outline-container-org7ea4f2b" class="outline-3">
 <h3 id="org7ea4f2b"> <a href="#org7ea4f2b">npm publishのやりかた</a></h3>
 <div class="outline-text-3" id="text-org7ea4f2b">
 <ul class="org-ul"> <li>npm publishはローカルのファイルをアップロードして公開するので、ブランチ、  <code>git status</code> に気をつける。</li>
</ul> <div class="org-src-container">
 <pre class="src src-javascript"># タグ付けとコミットを行う。 <span class="org-keyword">package</span>.jsonも更新される。
npm login
npm version [ major | minor | patch ]
npm publish
git push --follow-tags
</pre>
</div>

 <ul class="org-ul"> <li> <a href="https://qiita.com/akameco/items/de7718c6e10dc22be5b0">npm publishの流れとそれを1コマンド行うnp - Qiita</a></li>
 <li> <a href="https://ja.wikipedia.org/wiki/%E3%82%BB%E3%83%9E%E3%83%B3%E3%83%86%E3%82%A3%E3%83%83%E3%82%AF%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%8B%E3%83%B3%E3%82%B0">セマンティックバージョニング - Wikipedia</a></li>
 <li> <a href="https://semver.org/lang/ja/">セマンティック バージョニング 2.0.0 | Semantic Versioning</a></li>
 <li> <a href="https://github.com/semver/semver">semver/semver: Semantic Versioning Specification</a></li>
</ul></div>
</div>
 <div id="outline-container-orgf5b4e27" class="outline-3">
 <h3 id="orgf5b4e27"> <a href="#orgf5b4e27">DOM操作</a></h3>
 <div class="outline-text-3" id="text-orgf5b4e27">
 <ul class="org-ul"> <li> <a href="https://qiita.com/uhyo/items/1c565b61d934cbb88c2e#rangesurroundcontents">全部言えたらDOMマスター！　HTML+DOMでノードを挿入する方法大全 - Qiita</a></li>
</ul></div>
</div>
</div>
 <div id="outline-container-org9e157f8" class="outline-2">
 <h2 id="org9e157f8"> <a href="#org9e157f8">Tasks</a></h2>
 <div class="outline-text-2" id="text-org9e157f8">
</div>
 <div id="outline-container-org4d63397" class="outline-3">
 <h3 id="org4d63397"> <a href="#org4d63397"> <span class="todo TODO">TODO</span> </a> <a href="https://jsprimer.net/basic/ecmascript/">ECMAScript · JavaScript Primer #jsprimer</a></h3>
 <div class="outline-text-3" id="text-org4d63397">
 <p>
ECMAScriptの仕様策定プロセス。
</p>
</div>
</div>
 <div id="outline-container-orga925345" class="outline-3">
 <h3 id="orga925345"> <a href="#orga925345"> <span class="todo TODO">TODO</span> </a> <a href="https://github.com/azu/large-scale-javascript">azu/large-scale-javascript: 複雑なJavaScriptアプリケーションを作るために考えること</a></h3>
 <div class="outline-text-3" id="text-orga925345">
 <p>
規模によって考えること。
</p>
</div>
</div>
 <div id="outline-container-org4db48b7" class="outline-3">
 <h3 id="org4db48b7"> <a href="#org4db48b7"> <span class="todo TODO">TODO</span> ネストしたコードの解消方法</a></h3>
 <div class="outline-text-3" id="text-org4db48b7">
 <p>
やたらネストして大きな関数になりがち。
どうやって解消すればよいのだろう。
</p>
</div>
</div>
 <div id="outline-container-org0c3fb90" class="outline-3">
 <h3 id="org0c3fb90"> <a href="#org0c3fb90"> <span class="todo TODO">TODO</span> 実際にinstallしてCIで確かめる</a></h3>
 <div class="outline-text-3" id="text-org0c3fb90">
 <p>
プラグイン本体でテストしてるが、実際にnpm installするわけではないので依存パッケージ検知できないことがある。
ローカルでクリーンインストールでもglobalにインストールしてたりしてるので検知できないのだろう。
</p>
</div>
</div>
</div>
 <div id="outline-container-org24816ef" class="outline-2">
 <h2 id="org24816ef"> <a href="#org24816ef">References</a></h2>
 <div class="outline-text-2" id="text-org24816ef">
</div>
 <div id="outline-container-org5f6cb50" class="outline-3">
 <h3 id="org5f6cb50"> <a href="#org5f6cb50"></a> <a href="https://www.fundely.co.jp/blog/tech/2019/10/09/180017/">Webで3Dモデルを扱いたい |</a></h3>
 <div class="outline-text-3" id="text-org5f6cb50">
 <p>
WebGLによる3Dモデルの概要。
</p>
</div>
</div>
 <div id="outline-container-org99f1dc8" class="outline-3">
 <h3 id="org99f1dc8"> <a href="#org99f1dc8"></a> <a href="https://azu.github.io/JavaScript-Plugin-Architecture/">この書籍について · JavaScript Plugin Architecture</a></h3>
 <div class="outline-text-3" id="text-org99f1dc8">
 <p>
プラグインのアーキテクチャに関する本。
</p>
</div>
</div>
 <div id="outline-container-org1ffa4ef" class="outline-3">
 <h3 id="org1ffa4ef"> <a href="#org1ffa4ef"></a> <a href="https://www.oreilly.co.jp/books/9784873119380/">O’Reilly Japan - Reactハンズオンラーニング 第2版</a></h3>
</div>
 <div id="outline-container-org38a344f" class="outline-3">
 <h3 id="org38a344f"> <a href="#org38a344f"></a> <a href="https://jsprimer.net/">JavaScript Primer - 迷わないための入門書 #jsprimer</a></h3>
</div>
 <div id="outline-container-org93f2fe8" class="outline-3">
 <h3 id="org93f2fe8"> <a href="#org93f2fe8"></a> <a href="https://book.yyts.org/">https://book.yyts.org/</a></h3>
</div>
 <div id="outline-container-org78f1819" class="outline-3">
 <h3 id="org78f1819"> <a href="#org78f1819"></a> <a href="https://future-architect.github.io/typescript-guide/index.html">https://future-architect.github.io/typescript-guide/index.html</a></h3>
</div>
 <div id="outline-container-org600e4bb" class="outline-3">
 <h3 id="org600e4bb"> <a href="#org600e4bb"></a> <a href="http://wiki.c2.com/?DeclarativeProgramming">Declarative Programming</a></h3>
</div>
</div>
 <div id="outline-container-org30563fe" class="outline-2">
 <h2 id="org30563fe"> <a href="#org30563fe">Backlinks</a></h2>
 <div class="outline-text-2" id="text-org30563fe">
 <ul class="org-ul"> <li> <a href="./20210508233810-org_roam.html">Org-roam</a></li>
 <li> <a href="./20210508234743-emacs.html">Emacs</a></li>
 <li> <a href="./20210509095513-ruby.html">Ruby</a></li>
 <li> <a href="./20210509101246-programming_language.html">Programming Language</a></li>
 <li> <a href="./20210511013549-textlint.html">TextLint</a></li>
 <li> <a href="./20210817003906-history.html">History</a></li>
 <li> <a href="./20210831232330-typescript.html">TypeScript</a></li>
 <li> <a href="./20210902220546-react.html">React</a></li>
 <li> <a href="./20211024115921-phaser.html">Phaser</a></li>
 <li> <a href="./20211030122204-graphql.html">GraphQL</a></li>
 <li> <a href="./20211107104950-linter.html">Linter</a></li>
 <li> <a href="./20220418004136-dart.html">Dart</a></li>
 <li> <a href="./20230205172738-mermaid.html">Mermaid</a></li>
 <li> <a href="./20240208T215527--kdoc-81-iframeの制約__wiki.html">KDOC 81: iframeの制約</a></li>
 <li> <a href="./20240213T094738--kdoc-93-access-control-allow-headersを調べた__wiki.html">KDOC 93: Access-Control-Allow-Headersを調べた</a></li>
 <li> <a href="./20240228T202130--kdoc-114-indexeddbの使い道__wiki.html">KDOC 114: IndexedDBの使い道</a></li>
 <li> <a href="./20241009T091810--kdoc-252-『月刊ラムダノート-4-3-9-2024』__book.html">KDOC 252: 『月刊ラムダノート 4-3-9-2024』</a></li>
 <li> <a href="./index.html">Insomnia</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20210509100112-javascript.html"/>
  <id>https://kijimad.github.io/roam/20210509100112-javascript.html</id>
  <updated>2025-06-14T00:00:00+09:00</updated>
</entry>
<entry>
  <title>Programming Language</title>
  <author><name>root</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org5d4652b" class="outline-2">
 <h2 id="org5d4652b"> <a href="#org5d4652b">概要</a></h2>
 <div class="outline-text-2" id="text-org5d4652b">
 <p>
プログラミング言語は、コンピュータへの命令を記述する言語。
</p>
</div>
</div>
 <div id="outline-container-org813c7ed" class="outline-2">
 <h2 id="org813c7ed"> <a href="#org813c7ed">Memo</a></h2>
 <div class="outline-text-2" id="text-org813c7ed">
</div>
 <div id="outline-container-org6be0e00" class="outline-3">
 <h3 id="org6be0e00"> <a href="#org6be0e00">DWARF（Debugging With Attributed Record Formats）</a></h3>
 <div class="outline-text-3" id="text-org6be0e00">
 <p>
DWARFは、デバッグ情報の形式の1つ。主にC、C++、およびその他のプログラミング言語のコンパイル済みバイナリに埋め込まれるデバッグ情報を記述するために使用される。DWARFは、ソースコードとバイナリコードの間の対応関係を確立し、デバッグ時にソースレベルの情報を提供するために設計されている。
</p>

 <p>
DWARFフォーマットは、変数の位置（Location）情報を表現するために使用される。これによってデバッガが変数の値を追跡したり、ブレークポイントを設定できる。また、ステップ実行したりする際に、変数のスコープや値を正確に把握できる。
</p>

 <p>
DWARF locationは、変数の値がどこに格納されているかを示す情報。変数がレジスタ内にある場合は、レジスタ番号やオフセットを指定する。変数がメモリに格納されている場合は、メモリアドレスやオフセットを指定する。デバッガは、DWARF location情報を解釈して、変数の現在の値を特定できる。
</p>

 <p>
DWARF location情報は、スタックフレームやグローバル変数、静的変数など、プログラム内のさまざまな場所で使用される。デバッグ情報の一部として、DWARF location情報はバイナリに埋め込まれ、デバッグ時に使用される。
</p>
</div>
</div>
 <div id="outline-container-orgb9324a2" class="outline-3">
 <h3 id="orgb9324a2"> <a href="#orgb9324a2">式(expression)と文(statement)</a></h3>
 <div class="outline-text-3" id="text-orgb9324a2">
 <p>
よく、わからなくなる。
</p>

 <ul class="org-ul"> <li> <a href="http://ichitcltk.hustle.ne.jp/gudon2/index.php?pageType=file&id=word_expression_statement.md">プログラミングにおける式と文とは - 愚鈍人</a>
 <ul class="org-ul"> <li>式は文の構成要素。 例えば、if文の中の判定条件は式
 <ul class="org-ul"> <li>条件判定の式の中でも、セミコロンを使って文にして代入とかできる</li>
</ul></li>
 <li>文と式の最大の違いは、値を返すのが式で、返さないのが文
 <ul class="org-ul"> <li>多くの言語でifで始まる構文は値を返さず、代入できないので文</li>
 <li>関数定義は文</li>
 <li>クラス定義は文</li>
 <li>代入は文</li>
 <li>代入の右辺は値を返しているので式</li>
 <li>returnの引数は値を返しているので式</li>
 <li>if 条件 本体 の全体は文。条件は式。本体は文。</li>
</ul></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org615ca89" class="outline-3">
 <h3 id="org615ca89"> <a href="#org615ca89">データ型uint8</a></h3>
 <div class="outline-text-3" id="text-org615ca89">
 <p>
uint8は8ビット(1バイト)の符号なし整数のデータ型。つまり2の8乗で0~255の値が入る。例えば、 <a href="20210509100112-javascript.html#ID-a6980e15-ecee-466e-9ea7-2c0210243c0d">JavaScript</a>ではバイナリを表示したときのuint8の配列で  <code>[1, 2, 3, 2, 5 ...]</code> というように返ってくる。uint8の配列によってバイナリを表現できる。
</p>
</div>
</div>
 <div id="outline-container-org1e090e8" class="outline-3">
 <h3 id="org1e090e8"> <a href="#org1e090e8">セマフォとは排他制御の仕組みのこと</a></h3>
 <div class="outline-text-3" id="text-org1e090e8">
 <ul class="org-ul"> <li> <a href="https://wa3.i-3-i.info/word13357.html">セマフォとは｜「分かりそう」で「分からない」でも「分かった」気になれるIT用語辞典</a></li>
</ul> <p>
排他制御の仕組みのこと。同時に使える人の数が決まっているものに割り当てられた「あと何人の人が使えるよ」を表した数字。
</p>

 <p>
最大接続数が3だとして、セマフォの中で実行を開始するとカウントが2になる。0になると実行開始をやめ、新規実行しなくなる。先に実行していたスレッドが終了するとカウントが1になり、再度実行開始されるようになる。
</p>

 <p>
セマフォを使ってプログラム間の足並みを揃えることもできる。ある共通リソースにアクセスする部分でだけ同期して、ほかの関係ない部分は並列することによって、資源を効率的に活用できる。
</p>
</div>
</div>
 <div id="outline-container-org28d7ff2" class="outline-3">
 <h3 id="org28d7ff2"> <a href="#org28d7ff2">式(expression)と文(statement)の違い</a></h3>
 <div class="outline-text-3" id="text-org28d7ff2">
 <p>
式は値を生成し、文はしない。
</p>

 <ul class="org-ul"> <li>5 は値5を生成するので式</li>
 <li>let a = 1 は値を生成しないので文</li>
</ul> <p>
値を生成するかどうかはプログラミング言語によって変わる。なので言語によってはif式、if文となる。
</p>
</div>
</div>
 <div id="outline-container-org45c9240" class="outline-3">
 <h3 id="org45c9240"> <a href="#org45c9240">まずインターフェースを決めてから実装する</a></h3>
 <div class="outline-text-3" id="text-org45c9240">
 <p>
設計のいい話。
</p>

 <p>
 <a href="https://doc.rust-jp.rs/book-ja/ch20-02-multithreaded.html">シングルスレッドサーバをマルチスレッド化する - The Rust Programming Language 日本語版</a>
</p>

 <blockquote>
 <p>
コードの設計を試みる際、 クライアントのインターフェイスをまず書くことは、設計を導く手助けになることがあります。呼び出したいように構成されるよう、 コードのAPIを記述してください; そして、機能を実装してから公開APIの設計をするのではなく、その構造内で機能を実装してください。
</p>
</blockquote>
</div>
</div>
 <div id="outline-container-org56142ae" class="outline-3">
 <h3 id="org56142ae"> <a href="#org56142ae">背景を理解する重要性</a></h3>
 <div class="outline-text-3" id="text-org56142ae">
 <p>
問題解決するだけでは応用性という点で十分でない。やっていることを完全理解するために調べたり書く。次の似たような問題が対応できるようになる。毎回ちょっと違うことをググることになるなら、理解できてない。
</p>
</div>
</div>
 <div id="outline-container-org97b47d8" class="outline-3">
 <h3 id="org97b47d8"> <a href="#org97b47d8">言語の学びやすさと分野</a></h3>
 <div class="outline-text-3" id="text-org97b47d8">
 <p>
言語そのものより、その分野に既存のプロジェクトがどれくらいあるか、も大きい。難しくても、参考になるコードが簡単に見つけられれば学習は容易になる。また、使い慣れたソフトがあるなら最高だ。何をするのかあらかじめわかっていれば理解しやすい。
</p>
</div>
</div>
 <div id="outline-container-org833338e" class="outline-3">
 <h3 id="org833338e"> <a href="#org833338e"></a> <a href="https://tatsu-zine.com/books/clean-architecture">Clean Architecture 達人に学ぶソフトウェアの構造と設計</a></h3>
 <div class="outline-text-3" id="text-org833338e">
 <ul class="org-ul"> <li>121,134,152,168,185, 235</li>
 <li>コードをどう組み合わせるか。アーキテクチャに関する本</li>
 <li>構造化、関数型、オブジェクト指向…プログラミングパラダイムは、どれも制限を課すものである</li>
 <li>オブジェクト指向のもっとも有益な特徴はポリモーフィズムである。ソースコードの依存関係を実行順序と関係なくできる。ビジネスロジックが最上位にあり、下位にライブラリやデータベースを置き、これらは交換可能である。実行順序とは逆だ</li>
 <li>プラグインアーキテクチャは、上位レベルの方針を含んだモジュールを下位レベルの詳細を含んだモジュールから独立させること。下位レベルの詳細はプラグインモジュールとなり、上位レベルの方針を含んだモジュールとは独立して、デプロイおよび開発することが可能となる</li>
 <li>単一責任原則(SRP)の失敗例: Employeeクラスに、経理、人事部門、データベース管理者の3つの部門の責務が入っているようなとき。
 <ul class="org-ul"> <li>つまり、アクターの異なるコードは分割すべきということ</li>
</ul></li>
 <li>オープン・クローズドの原則(OCP): ソフトウェアの振る舞いは、既存の成果物を変更せず拡張できるようにすべきである。
 <ul class="org-ul"> <li>ローグライクチュートリアルがまさにそんな感じだった。機能追加で既存の箇所をいじる必要はなく、独立している</li>
 <li>ちょっとした拡張のために大量の書き換えが必要になるようなら、そのソフトウェアシステムのアーキテクトは大失敗への道を突き進んでいる</li>
</ul></li>
 <li>依存性逆転の法則: ソースコードは具象に依存するべきではない。変化しやすい具象クラスを参照しない、継承しない。重要な部分が、重要でない部分に依存しないように設計すべき</li>
 <li>再利用・リリース等価の原則: 同じタイミングで変更されることが多いクラスはひとつにまとめる</li>
 <li>閉鎖性共通の原則: 同じ理由、同じタイミングで変更されるクラスをコンポーネントにまとめること。変更の理由やタイミングが異なるクラスは、別のコンポーネントに分けること</li>
 <li>全再利用の原則: コンポーネントのユーザに対して、実際には使わないものへの依存を強要してはいけない</li>
 <li>安定依存の原則: 安定度の高い方向に依存する</li>
 <li>安定度・抽象度等価の原則: コンポーネントの抽象度は、その安定度と同程度でなければならない。安定度の高いコンポーネントは抽象度も高くあるべき</li>
 <li>優れたアーキテクトは、方針と詳細を慎重に区別して、方針が詳細を把握することなく、決して依存することがないように、両者を切り離す</li>
 <li>アーキテクチャがサポートしなければいけないこと:
 <ul class="org-ul"> <li>システムのユースケース</li>
 <li>システムの運用</li>
 <li>システムの開発</li>
 <li>システムのデプロイ</li>
</ul></li>
 <li>注文入力システムに注文を追加するユースケースは、注文を削除するユースケースと比べると、明らかに異なる頻度と理由で変更される</li>
 <li>優れたアーキテクトは、システムの詳細の決定を従属的かつ遅延可能なものにする</li>
</ul></div>
</div>
</div>
 <div id="outline-container-orge6ced37" class="outline-2">
 <h2 id="orge6ced37"> <a href="#orge6ced37">Tasks</a></h2>
 <div class="outline-text-2" id="text-orge6ced37">
</div>
 <div id="outline-container-orge2313b8" class="outline-3">
 <h3 id="orge2313b8"> <a href="#orge2313b8"> <span class="todo TODO">TODO</span> </a> <a href="https://book.impress.co.jp/books/1122101087">インタプリタの作り方 －言語設計／開発の基本と2つの方式による実装－ - インプレスブックス</a></h3>
 <div class="outline-text-3" id="text-orge2313b8">
 <p>
作り方の解説本。
</p>
</div>
</div>
 <div id="outline-container-orgd24f8f6" class="outline-3">
 <h3 id="orgd24f8f6"> <a href="#orgd24f8f6"> <span class="todo TODO">TODO</span> </a> <a href="https://lambda00.hatenablog.com/entry/2023/04/27/231653">学生の頃に読みたかった本 (ゲームプログラマ志望) - おもちゃバコ</a></h3>
 <div class="outline-text-3" id="text-orgd24f8f6">
 <p>
ゲームプログラマのおすすめ本。
</p>
</div>
</div>
 <div id="outline-container-org0ff32a3" class="outline-3">
 <h3 id="org0ff32a3"> <a href="#org0ff32a3"> <span class="todo TODO">TODO</span> </a> <a href="http://createyourproglang.com/">Create Your Own Programming Language</a></h3>
 <div class="outline-text-3" id="text-org0ff32a3">
 <p>
プログラミング言語を作る本。
</p>
</div>
</div>
 <div id="outline-container-org9492279" class="outline-3">
 <h3 id="org9492279"> <a href="#org9492279"> <span class="todo TODO">TODO</span> </a> <a href="https://www.lambdanote.com/collections/ir-system">『検索システム ― 実務者のための開発改善ガイドブック』 – 技術書出版と販売のラムダノート</a></h3>
 <div class="outline-text-3" id="text-org9492279">
 <p>
検索システムの本。
</p>
</div>
</div>
 <div id="outline-container-org213ac13" class="outline-3">
 <h3 id="org213ac13"> <a href="#org213ac13"> <span class="todo TODO">TODO</span> </a> <a href="https://web.mit.edu/~yandros/doc/craft-text-editing/">The Craft of Text Editing by Craig A. Finseth</a></h3>
 <div class="outline-text-3" id="text-org213ac13">
 <p>
テキストエディタを作る。
</p>
</div>
</div>
 <div id="outline-container-orgcc70553" class="outline-3">
 <h3 id="orgcc70553"> <a href="#orgcc70553"> <span class="todo TODO">TODO</span> </a> <a href="https://www.cs.cmu.edu/~rdriley/487/papers/Thompson_1984_ReflectionsonTrustingTrust.pdf">Reflections on Trusting Trust</a></h3>
 <div class="outline-text-3" id="text-orgcc70553">
 <p>
信頼への反省。ケン・トンプソンの論文。
</p>
</div>
</div>
 <div id="outline-container-org468d4e5" class="outline-3">
 <h3 id="org468d4e5"> <a href="#org468d4e5"> <span class="todo TODO">TODO</span> </a> <a href="https://www.oreilly.co.jp/books/9784873114712/">O’Reilly Japan - 言語設計者たちが考えること</a></h3>
 <div class="outline-text-3" id="text-org468d4e5">
 <p>
言語設計者へのインタビュー集。
</p>
</div>
</div>
 <div id="outline-container-orgca67744" class="outline-3">
 <h3 id="orgca67744"> <a href="#orgca67744"> <span class="todo TODO">TODO</span> </a> <a href="https://qiita.com/suin/items/52cf80021361168f6b0e">TypeScript: 異なる2つの型システム「公称型」と「構造的部分型」 - Qiita</a></h3>
 <div class="outline-text-3" id="text-orgca67744">
 <p>
2つの型の違いは何か。
</p>
</div>
</div>
 <div id="outline-container-orgec55f4f" class="outline-3">
 <h3 id="orgec55f4f"> <a href="#orgec55f4f"> <span class="todo TODO">TODO</span> </a> <a href="https://tatsu-zine.com/books/types-and-programming-languages-ja">型システム入門 プログラミング言語と型の理論 - 達人出版会</a></h3>
 <div class="outline-text-3" id="text-orgec55f4f">
</div>
</div>
 <div id="outline-container-orgad38d6e" class="outline-3">
 <h3 id="orgad38d6e"> <a href="#orgad38d6e"> <span class="todo TODO">TODO</span> </a> <a href="http://craftinginterpreters.com/">Crafting Interpreters</a></h3>
 <div class="outline-text-3" id="text-orgad38d6e">
 <p>
インタプリタを実装する。
</p>
</div>
</div>
 <div id="outline-container-orgfe09c11" class="outline-3">
 <h3 id="orgfe09c11"> <a href="#orgfe09c11"> <span class="todo TODO">TODO</span> </a> <a href="https://www.amazon.co.jp/-/en/Steve-McConnell-ebook/dp/B01E5DYK1C/ref=sr_1_1?keywords=code+complete&qid=1650678654&sprefix=%2Caps%2C158&sr=8-1">Code Complete 第2版 完全なプログラミングを目指して</a>    <span class="tag"> <span class="Read">Read</span></span></h3>
 <div class="outline-text-3" id="text-orgfe09c11">
 <p>
設計。
コードが書けるレベルに具体化するまで行う。
設計をレビューしてくれる人がいない場合は一週間放置して見返してみる。
自分の設計を理解するのが難しく感じたのなら、自分以外の人が理解するのはもっと難しい。
トップダウン、ボトムアップを併用する。
トップダウンは最初簡単だが、あとの複雑さに気づかないことがある。
ボトムアップは最初難しいが、複雑さを早い段階で明らかにできる可能性がある。
最初に思いついた設計は間違っている。
</p>

 <p>
クラス。
クラスがどのような抽象化を実装しているのか理解する。
できるだけ実装を隠し単純化する。
</p>
</div>
</div>
 <div id="outline-container-org1cf01fd" class="outline-3">
 <h3 id="org1cf01fd"> <a href="#org1cf01fd"> <span class="todo TODO">TODO</span> </a> <a href="https://www.oreilly.co.jp/books/9784873115320/">O’Reilly Japan - 言語実装パターン</a></h3>
 <div class="outline-text-3" id="text-org1cf01fd">
 <p>
実装パターンの解説書。
</p>
</div>
</div>
</div>
 <div id="outline-container-org3847fbc" class="outline-2">
 <h2 id="org3847fbc"> <a href="#org3847fbc">References</a></h2>
 <div class="outline-text-2" id="text-org3847fbc">
</div>
 <div id="outline-container-org3794249" class="outline-3">
 <h3 id="org3794249"> <a href="#org3794249"></a> <a href="https://future-architect.github.io/articles/20240307a/">Goリリースノートから技術ブログを書く流れ基礎 | フューチャー技術ブログ</a></h3>
 <div class="outline-text-3" id="text-org3794249">
 <p>
読み方、書き方。
</p>
</div>
</div>
 <div id="outline-container-orgea26501" class="outline-3">
 <h3 id="orgea26501"> <a href="#orgea26501"></a> <a href="https://azu.github.io/slide/jser200/javascript-2014.html">世界のJavaScriptを読もう @ 2014</a></h3>
 <div class="outline-text-3" id="text-orgea26501">
 <p>
キャッチアップする意義や方法。
</p>
</div>
</div>
 <div id="outline-container-orgcfbcbfc" class="outline-3">
 <h3 id="orgcfbcbfc"> <a href="#orgcfbcbfc"></a> <a href="http://www.kab-studio.biz/Programing/JavaA2Z/Word/00000315.html">セマンティクスとは : JavaA2Z</a></h3>
 <div class="outline-text-3" id="text-orgcfbcbfc">
 <p>
セマンティクスとシンタックスの違いの説明。
</p>
</div>
</div>
 <div id="outline-container-org7617a42" class="outline-3">
 <h3 id="org7617a42"> <a href="#org7617a42"></a> <a href="https://ja.wikipedia.org/wiki/%E3%82%BB%E3%83%AB%E3%83%95%E3%83%9B%E3%82%B9%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0">セルフホスティング - Wikipedia</a></h3>
 <div class="outline-text-3" id="text-org7617a42">
 <p>
同じプログラムの新しいバージョンを作ること。
</p>
</div>
</div>
 <div id="outline-container-org223f4e4" class="outline-3">
 <h3 id="org223f4e4"> <a href="#org223f4e4"></a> <a href="https://github.com/charlax/professional-programming">charlax/professional-programming: A collection of learning resources for curious software engineers</a></h3>
 <div class="outline-text-3" id="text-org223f4e4">
 <p>
おすすめのリンク集。
</p>
</div>
</div>
 <div id="outline-container-orgb136f43" class="outline-3">
 <h3 id="orgb136f43"> <a href="#orgb136f43"></a> <a href="https://qiita.com/e99h2121/items/fb8f04637cc420c7e1f6">エンジニアは数学をどこまで勉強すればよいのか - 「プログラマの数学」を薦めたい - Qiita</a></h3>
 <div class="outline-text-3" id="text-orgb136f43">
 <p>
役に立つ記事リスト。
</p>
</div>
</div>
 <div id="outline-container-orgdd67093" class="outline-3">
 <h3 id="orgdd67093"> <a href="#orgdd67093"></a> <a href="https://engineer-lab.findy-code.io/rust-contributor">Rustに貢献してみませんか？コントリビューターたちが語る開発の裏側とOSS活動の魅力 - Findy Engineer Lab - ファインディエンジニアラボ</a></h3>
 <div class="outline-text-3" id="text-orgdd67093">
 <p>
謎に包まれたコントリビュートのプロセスの、ヒント。
</p>

 <blockquote>
 <p>
それに、過去には「Rust Compiler Ambitions for 2022」というブログ記事の「What do I do if I’m interested in compiler development but have no experience in compilers?」という項目の中で「コンパイラ開発の経験がなくても気にしなくていい」「今コントリビューションしているメンバーも、Rustの開発をしながら徐々にコンパイラの知識を身につけたんだ」という旨のことが書かれています。
</p>

 <p>
自分のスキルの高低は気にせず、できることから手をつけたらいいと思います。コミッターたちに質問できる場も用意されているので、困ったことがあれば誰かしら助けてくれるはずです。
</p>
</blockquote>

 <p>
小さいことから始める。
</p>
</div>
</div>
 <div id="outline-container-org4e246d0" class="outline-3">
 <h3 id="org4e246d0"> <a href="#org4e246d0"></a> <a href="https://www.amazon.com/Art-Metaobject-Protocol-Gregor-Kiczales/dp/0262610744">The Art of the Metaobject Protocol: Gregor Kiczales, Jim des Rivieres, Daniel G. Bobrow: 9780262610742: Amazon.com: Books</a></h3>
 <div class="outline-text-3" id="text-org4e246d0">
 <p>
メタオブジェクトプロトコルのバイブル。
</p>
</div>
</div>
 <div id="outline-container-orgf41d3b8" class="outline-3">
 <h3 id="orgf41d3b8"> <a href="#orgf41d3b8"></a> <a href="https://www.oreilly.com/library/view/domain-specific-languages/9780132107549/">Domain Specific Languages Book</a></h3>
 <div class="outline-text-3" id="text-orgf41d3b8">
 <p>
DSLの本。
よくあるテクニックがどういう仕組みで動いているか解説。
</p>
</div>
</div>
 <div id="outline-container-org3cbfe97" class="outline-3">
 <h3 id="org3cbfe97"> <a href="#org3cbfe97"></a> <a href="https://web.archive.org/web/20140416021831/http:/lists.canonical.org/pipermail/kragen-tol/2011-August/000937.html">Goodbye, shitty Car extends Vehicle object-orientation tutorial</a></h3>
 <div class="outline-text-3" id="text-org3cbfe97">
 <p>
オブジェクト指向に対する、理解しやすいが間違った説明の議論。
</p>
</div>
</div>
 <div id="outline-container-org7a49993" class="outline-3">
 <h3 id="org7a49993"> <a href="#org7a49993"></a> <a href="https://github.com/sdmg15/Best-websites-a-programmer-should-visit">sdmg15/Best-websites-a-programmer-should-visit: Some useful websites for programmers.</a></h3>
 <div class="outline-text-3" id="text-org7a49993">
 <p>
役立つリンク集。
</p>
</div>
</div>
 <div id="outline-container-orgeadaf1e" class="outline-3">
 <h3 id="orgeadaf1e"> <a href="#orgeadaf1e"> <span class="todo TODO">TODO</span> </a> <a href="https://github.com/donnemartin/system-design-primer">donnemartin/system-design-primer: Learn how to design large-scale systems. Prep for the system design interview. Includes Anki flashcards.</a></h3>
 <div class="outline-text-3" id="text-orgeadaf1e">
 <p>
大きなシステムの設計方法を学ぶ方法。
</p>
</div>
</div>
 <div id="outline-container-org3d43273" class="outline-3">
 <h3 id="org3d43273"> <a href="#org3d43273"> <span class="todo TODO">TODO</span> </a> <a href="https://github.com/kamranahmedse/design-patterns-for-humans">kamranahmedse/design-patterns-for-humans: An ultra-simplified explanation to design patterns</a></h3>
 <div class="outline-text-3" id="text-org3d43273">
 <p>
シンプルなデザインパターンの解説。
</p>
</div>
</div>
 <div id="outline-container-org5882177" class="outline-3">
 <h3 id="org5882177"> <a href="#org5882177"> <span class="todo TODO">TODO</span> </a> <a href="https://github.com/mtdvio/every-programmer-should-know">mtdvio/every-programmer-should-know: A collection of (mostly) technical things every software developer should know about</a></h3>
 <div class="outline-text-3" id="text-org5882177">
 <p>
プログラマーが知るべきこと。
</p>
</div>
</div>
 <div id="outline-container-org1795a85" class="outline-3">
 <h3 id="org1795a85"> <a href="#org1795a85"> <span class="todo TODO">TODO</span> </a> <a href="https://web.archive.org/web/20120530181801/http:/local.joelonsoftware.com:80/wiki/Japanese">Japanese - The Joel on Software Translation Project</a></h3>
 <div class="outline-text-3" id="text-org1795a85">
 <p>
エッセイの日本語訳。
</p>
</div>
</div>
 <div id="outline-container-orgef17c01" class="outline-3">
 <h3 id="orgef17c01"> <a href="#orgef17c01"> <span class="todo TODO">TODO</span> </a> <a href="https://www.infoq.com/jp/articles/Understanding-Monads-guide-for-perplexed/">モナドを理解する - 迷える者への手引き</a></h3>
 <div class="outline-text-3" id="text-orgef17c01">
 <p>
モナドの解説。
</p>
</div>
</div>
 <div id="outline-container-orgbd7ae44" class="outline-3">
 <h3 id="orgbd7ae44"> <a href="#orgbd7ae44"></a> <a href="https://qiita.com/hirokidaichi/items/27c757d92b6915e8ecf7">ペアプログラミングして気がついた新人プログラマの成長を阻害する悪習 - Qiita</a></h3>
</div>
 <div id="outline-container-orga8d71ab" class="outline-3">
 <h3 id="orga8d71ab"> <a href="#orga8d71ab"></a> <a href="https://diveintocode.jp/blogs/Technology/PryDebug">DIVE INTO CODE | エラーの原因を突き止めるためにデバッグをする</a></h3>
 <div class="outline-text-3" id="text-orga8d71ab">
 <p>
pryデバッグの方法。
</p>
</div>
</div>
 <div id="outline-container-orgb106369" class="outline-3">
 <h3 id="orgb106369"> <a href="#orgb106369"></a> <a href="http://helloworldcollection.de/">The Hello World Collection</a></h3>
 <div class="outline-text-3" id="text-orgb106369">
 <p>
あらゆるプログラミング言語のhello world集。
</p>
</div>
</div>
 <div id="outline-container-org899a0bd" class="outline-3">
 <h3 id="org899a0bd"> <a href="#org899a0bd"></a> <a href="https://gamesfromwithin.com/data-oriented-design">Data-Oriented Design (Or Why You Might Be Shooting Yourself in The Foot With OOP) – Games from Within</a></h3>
 <div class="outline-text-3" id="text-org899a0bd">
 <p>
データ指向のデザイン。
</p>
</div>
</div>
 <div id="outline-container-org4d01199" class="outline-3">
 <h3 id="org4d01199"> <a href="#org4d01199"> <span class="todo TODO">TODO</span> </a> <a href="https://practical.engineering/">Practical Engineering</a></h3>
 <div class="outline-text-3" id="text-org4d01199">
 <p>
エンジニアリングに関する面白い記事がある。
</p>
</div>
</div>
 <div id="outline-container-org6192af9" class="outline-3">
 <h3 id="org6192af9"> <a href="#org6192af9"></a> <a href="https://www.digitalocean.com/community/conceptual_articles/s-o-l-i-d-the-first-five-principles-of-object-oriented-design">SOLID: The First 5 Principles of Object Oriented Design | DigitalOcean</a></h3>
 <div class="outline-text-3" id="text-org6192af9">
 <p>
オブジェクト指向の原則。
</p>
</div>
</div>
 <div id="outline-container-org3acc65f" class="outline-3">
 <h3 id="org3acc65f"> <a href="#org3acc65f"></a> <a href="https://xn--97-273ae6a4irb6e2hsoiozc2g4b8082p.com/">プログラマが知るべき97のこと</a></h3>
</div>
 <div id="outline-container-org8571d44" class="outline-3">
 <h3 id="org8571d44"> <a href="#org8571d44"></a> <a href="https://xn--97-273ae6a4irb6e2hxjpb5etb3nqtgfpmg22065a.com/">ゲームクリエイターが知るべき97のこと</a></h3>
</div>
 <div id="outline-container-orge2b11c6" class="outline-3">
 <h3 id="orge2b11c6"> <a href="#orge2b11c6"></a> <a href="https://www.pygame.org/tags/all">Pygameリンク集</a></h3>
</div>
 <div id="outline-container-orgfc954a3" class="outline-3">
 <h3 id="orgfc954a3"> <a href="#orgfc954a3"></a> <a href="https://gameprogrammingpatterns.com/contents.html">Table of Contents · Game Programming Patterns</a></h3>
 <div class="outline-text-3" id="text-orgfc954a3">
 <p>
ゲームプログラミングでよく使われるデザインパターン。
</p>
</div>
</div>
</div>
 <div id="outline-container-orge288c89" class="outline-2">
 <h2 id="orge288c89"> <a href="#orge288c89">Archives</a></h2>
 <div class="outline-text-2" id="text-orge288c89">
</div>
 <div id="outline-container-orgba5bb8f" class="outline-3">
 <h3 id="orgba5bb8f"> <a href="#orgba5bb8f"> <span class="done DONE">DONE</span> </a> <a href="https://www.amazon.co.jp/%E3%83%99%E3%82%BF%E3%83%BC%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E-%E2%80%95%E5%84%AA%E3%82%8C%E3%81%9F%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%AB%E3%81%AA%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AE38%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9%E3%81%A8%E3%83%86%E3%82%AF%E3%83%8B%E3%83%83%E3%82%AF-Pete-Goodliffe/dp/4873118204">ベタープログラマ ―優れたプログラマになるための38の考え方とテクニック | Pete Goodliffe, 柴田 芳樹 |本 | 通販 | Amazon</a></h3>
 <div class="outline-text-3" id="text-orgba5bb8f">
 <p>
優れたプログラマになるためのヒント。
</p>

 <blockquote>
 <p>
コードを読むことは、読むことに過ぎません。取り組んでみて、乗ろうとしてみて、間違いを犯し、そして転ぶことによってのみコードベースを学ぶことができます。コードに取り組むことを阻害する知的な壁を建てないでください。自分の理解に対する自信のなさから最初は無力であった多くの優秀なプログラマを、私は見てきました。
</p>

 <p>
やってみて、飛び込んで、勇敢に、コードを修正してください。
</p>

 <p>
コードを学ぶ最善の方法は、そのコードを修正することです。そして、自分の間違いから学んでください。
</p>

 <p>
では、あなたは何を修正すべきでしょうか。
</p>

 <p>
コードを学ぶ際には、すぐに恩恵を得られて、何かを壊す(あるいは恥ずかしいコードを書く)可能性が少ない箇所を探してください。
</p>

 <p>
システムを理解するのに役立つようなコードを探してください。
</p>
</blockquote>

 <blockquote>
 <p>
きちんと整理する機会を楽しんでください。がらくたに対して構造と健全さをもたらすことは価値があります。うんざりする練習だと思うのではなく、高い品質をもたらす機会だと見なしてください。それを教訓だと見なして、そこから学んでください。同じコーディングの誤りを繰り返さないためにはどうしますか。
</p>
</blockquote>

 <blockquote>
 <p>
基本的な学習の技法は、行って学ぶことです。書籍や記事を読んだり、オンラインのチュートリアルを見たり、プログラミングのカンファレンスへ参加したりすることは、すべてよいことです。しかし、あなたがその技術を使ってみるまでは、頭の中に概念が抽象的な集まりとして存在するにすぎません。
</p>

 <p>
抽象的なことを具体化してください。つまり、飛び込んで、試してください。
</p>

 <p>
理想的には、学習している最中に具体化してください。テストプロジェクトを初めて、知識を蓄積しながらその知識を使ってください。新たな言語を学ぶときは、すぐにその言語でコードを書き始めてください。読んだコード例を試してください。そのコードで色々と行ってください。間違いをして、何がうまくいって何がうまくいかないかを知ってください。
</p>
</blockquote>

 <blockquote>
 <p>
私は、自分が使っている言語との真の関係に熱心に取り組んでいます。それは、結婚に似ています。見返りが得られる関係ですが、努力を必要とします。
</p>
</blockquote>
</div>
</div>
 <div id="outline-container-org80e82a6" class="outline-3">
 <h3 id="org80e82a6"> <a href="#org80e82a6"> <span class="done DONE">DONE</span> </a> <a href="https://gihyo.jp/dp/ebook/2014/978-4-7741-7029-9">コーディングを支える技術――成り立ちから学ぶプログラミング作法 | Gihyo Digital Publishing … 技術評論社の電子書籍</a></h3>
 <div class="outline-text-3" id="text-org80e82a6">
 <p>
プログラミング言語の各概念がなぜ存在するかを解説する本。
</p>

 <ul class="org-ul"> <li>特定の言語やツールなどの知識は、変化が早くすぐに陳腐化する。意識して「変化しにくい知識」を学ばなければ、学んだことが価値を失う</li>
 <li>学び方の3つの柱
 <ul class="org-ul"> <li>比較から学ぶ</li>
 <li>歴史から学ぶ</li>
 <li>作ることで学ぶ</li>
</ul></li>
 <li>失敗を伝える方法は大きく分けて2通りある
 <ul class="org-ul"> <li>返り値で伝える</li>
 <li>失敗したらジャンプする
 <ul class="org-ul"> <li>例外処理</li>
</ul></li>
</ul></li>
</ul> <blockquote>
 <p>
たとえば作者本人が書いたドキュメントやソースが一番詳しいでしょう。しかし「難しい」「量が多い」「英語なので読めない」と口実を付けて、誰かの書いたやさしい解説を探したりしてしまいがちです。それは「オリジナルの肉は大きく
て硬いから」といって、安全なのか傷んでいるのかもわからない、誰かの作ったひき肉を食べるのと同じです。気持ちはわかります。筆者も膨大な情報を前にして心が折れそうになることはあります。そんなときに使える戦略が3つあります。それは「必要なところからかじる」「おおまかにつかんで徐々に詳細化する」「端から順番に写経する」の3つです。
</p>
</blockquote>

 <ul class="org-ul"> <li>C言語の文字列は「文字列が始まるメモリ上の位置」だけを持っている。長さの情報を持っていないので、そこからどこまでが文字列かわからない</li>
 <li>文字列の終わりを、NUL文字を使って表現する。C言語のコード中では\0と表現する</li>
</ul> <blockquote>
 <p>
クラスなんて「そう書けたほうが楽だから」という理由で作られた約束事にすぎないのです。物理法則や宇宙の真理ではなく、人間が決めた約束事なのです。ならば、どうしてそういう約束を決めたか言語設計者の意図を考えるのが理解の近道なのではないでしょうか？
</p>
</blockquote>

 <ul class="org-ul"> <li>クロージャという特殊な構文があるわけではない。関数を関数の中で定義でき、ネストできる静的スコープがあり、関数を戻り値で返したり変数に代入できる言語では、単に関数をネストするだけで状態を持った関数を作れる</li>
 <li>クラスには、2つの相反する役割がある
 <ul class="org-ul"> <li>インスタンスを作るためのもの – このためには、完結した、必要なものを全部持った、大きなクラスである必要がある</li>
 <li>再利用の単位 – 機能ごとの、余計なものを持っていない、小さなクラスである必要がある</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org157f733" class="outline-3">
 <h3 id="org157f733"> <a href="#org157f733"> <span class="done DONE">DONE</span> </a> <a href="https://m-takagi.github.io/aosa-ja/aosa.pdf">The Architecture of Open Source Applicationsの日本語訳</a></h3>
 <div class="outline-text-3" id="text-org157f733">
 <p>
タイポ。
</p>

 <blockquote>
 <ul class="org-ul"> <li>これが画面の難行かを占めることがある</li>
 <li>レプリケーション日ステム</li>
 <li>のユーザーの中にはは自分の</li>
</ul></blockquote>

 <p>
メモ。
</p>

 <ul class="org-ul"> <li>自分が実装しているソフトウェアの標準化作業に関わることも重要だ</li>
 <li>よくわからない部分がほとんどだった…。専門性が必要な分野のソフトウェアが多い</li>
</ul></div>
</div>
</div>
 <div id="outline-container-org8b8753e" class="outline-2">
 <h2 id="org8b8753e"> <a href="#org8b8753e">Backlinks</a></h2>
 <div class="outline-text-2" id="text-org8b8753e">
 <ul class="org-ul"> <li> <a href="./20210509095513-ruby.html">Ruby</a></li>
 <li> <a href="./20210509100112-javascript.html">JavaScript</a></li>
 <li> <a href="./20210509122633-emacs_lisp.html">Emacs Lisp</a></li>
 <li> <a href="./20210606192338-shell.html">Shell</a></li>
 <li> <a href="./20210725134208-python.html">Python</a></li>
 <li> <a href="./20210831232330-typescript.html">TypeScript</a></li>
 <li> <a href="./20210901100517-zig.html">Zig</a></li>
 <li> <a href="./20210901101339-rust.html">Rust</a></li>
 <li> <a href="./20210907223510-haskell.html">Haskell</a></li>
 <li> <a href="./20210910102223-smalltalk.html">Smalltalk</a></li>
 <li> <a href="./20210911104632-c_language.html">C言語</a></li>
 <li> <a href="./20210911113057-go.html">Go</a></li>
 <li> <a href="./20210911153752-erlang.html">Erlang</a></li>
 <li> <a href="./20210911183844-lisp.html">LISP</a></li>
 <li> <a href="./20210923124913-html.html">HTML</a></li>
 <li> <a href="./20210926143813-clojure.html">Clojure</a></li>
 <li> <a href="./20210926144137-career.html">career</a></li>
 <li> <a href="./20210926144913-scheme.html">Scheme</a></li>
 <li> <a href="./20210926152425-common_lisp.html">Common Lisp</a></li>
 <li> <a href="./20211007104541-java.html">Java</a></li>
 <li> <a href="./20211120015229-racket.html">Racket</a></li>
 <li> <a href="./20220108003324-scala.html">Scala</a></li>
 <li> <a href="./20220108103722-elixir.html">Elixir</a></li>
 <li> <a href="./20220117001718-elm.html">Elm</a></li>
 <li> <a href="./20220305121848-lsp.html">LSP</a></li>
 <li> <a href="./20220321174717-simula.html">Simula</a></li>
 <li> <a href="./20220328224652-lua.html">Lua</a></li>
 <li> <a href="./20220418004136-dart.html">Dart</a></li>
 <li> <a href="./20220804235316-webassembly.html">WebAssembly</a></li>
 <li> <a href="./20221211233726-php.html">PHP</a></li>
 <li> <a href="./20230429185524-ml.html">ML</a></li>
 <li> <a href="./20230930142832-cpp.html">C++</a></li>
 <li> <a href="./20240213004323-c.html">C#</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20210509101246-programming_language.html"/>
  <id>https://kijimad.github.io/roam/20210509101246-programming_language.html</id>
  <updated>2025-06-14T00:00:00+09:00</updated>
</entry>
<entry>
  <title>Emacs Lisp</title>
  <author><name>root</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org242ae19" class="outline-2">
 <h2 id="org242ae19"> <a href="#org242ae19">概要</a></h2>
 <div class="outline-text-2" id="text-org242ae19">
 <p>
 <a href="20210508234743-emacs.html#ID-1ad8c3d5-97ba-4905-be11-e6f2626127ad">Emacs</a>で使われている <a href="20210509101246-programming_language.html#ID-868ac56a-2d42-48d7-ab7f-7047c85a8f39">Programming Language</a>、Lispの方言。
Emacs自体のコードの多くがEmacs Lispで構成されているほか、拡張するために用いる。
</p>
</div>
</div>
 <div id="outline-container-org584d46f" class="outline-2">
 <h2 id="org584d46f"> <a href="#org584d46f">Memo</a></h2>
 <div class="outline-text-2" id="text-org584d46f">
</div>
 <div id="outline-container-orgb4c5ed1" class="outline-3">
 <h3 id="orgb4c5ed1"> <a href="#orgb4c5ed1">M-xで引数を割り当てる</a></h3>
 <div class="outline-text-3" id="text-orgb4c5ed1">
 <p>
M-x  <code>ert-run-tests-interactively</code> は実行できるが、  <code>(ert-run-tests-interactively)</code> は引数足りないエラーで実行できない。
</p>

 <p>
interactive special formが関係している。interactiveの引数はarg-descriptor。arg-descriptorは、そのコマンドがインタラクティブに呼び出されたとき引数を計算する方法を宣言する。
</p>

 <ul class="org-ul"> <li> <a href="https://ayatakesi.github.io/emacs/24.5/elisp_html/Using-Interactive.html">Using Interactive (GNU Emacs Lisp Reference Manual)</a></li>
</ul> <div class="org-src-container">
 <pre class="src src-git-permalink">https://github.com/kd-collective/emacs/blob/30cf1f34c583d6ed16bdc5b9578370f30c95fe1b/src/callint.c#L37
</pre>
</div>

 <div class="results" id="orgcffa412">
 <p>
DEFUN (“interactive”, Finteractive, Sinteractive, 0, UNEVALLED, 0,
</p>

</div>

 <ul class="org-ul"> <li> <a href="https://flex.phys.tohoku.ac.jp/texi/eljman/eljman_135.html">GNU Emacs Lisp Reference Manual - Completion</a></li>
</ul> <p>
interactiveに渡したリストが、関数定義の引数に割り当てられる。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 1: </span>M-xで実行できる</label> <pre class="src src-emacs-lisp">( <span class="org-keyword">defun</span>  <span class="org-function-name">interactive-test</span> (select)
  ( <span class="org-keyword">interactive</span> '( <span class="org-string">"test"</span>))
  (insert select))
</pre>
</div>

 <div class="results" id="org28b8d96">
 <p>
interactive-test
</p>

</div>
</div>
</div>
 <div id="outline-container-org37e05de" class="outline-3">
 <h3 id="org37e05de"> <a href="#org37e05de">defunを読む    <span class="tag"> <span class="DontKnow">DontKnow</span></span></a></h3>
 <div class="outline-text-3" id="text-org37e05de">
 <p>
defunは関数定義でよく使うマクロ。どのような仕組みになっているのだろうか。
</p>
</div>
</div>
 <div id="outline-container-org7256514" class="outline-3">
 <h3 id="org7256514"> <a href="#org7256514">プロパティはなにか</a></h3>
 <div class="outline-text-3" id="text-org7256514">
 <p>
任意のオブジェクトに情報を付加し、後で取り出せる仕組み。
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(define-symbol-prop 'test-symbol 'test-group '(1 2 3))

(get 'test-symbol 'test-group)
</pre>
</div>

 <div class="results" id="org58540f9">
 <p>
(1 2 3)
</p>

</div>
</div>
</div>
 <div id="outline-container-orgcdd8bb0" class="outline-3">
 <h3 id="orgcdd8bb0"> <a href="#orgcdd8bb0">関数とはlambdaで始まるリスト</a></h3>
 <div class="outline-text-3" id="text-orgcdd8bb0">
 <ul class="org-ul"> <li> <a href="http://quruli.ivory.ne.jp/document/elisp_20.3/elisp_12.html">http://quruli.ivory.ne.jp/document/elisp_20.3/elisp_12.html</a></li>
</ul> <blockquote>
 <p>
Lispでは, 関数とは, lambdaで始まるリスト, そのようなリストをコンパイルしたバイトコード関数, あるいは, 基本関数のsubrオブジェクトです
</p>
</blockquote>

 <p>
関数はよくdefunで定義するが、これは単に便利関数というだけで、本質的にlambdaをつけているにすぎない。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 2: </span>defunの定義。(cons ’lambda … に注目</label> <pre class="src src-git-permalink">https://github.com/kd-collective/emacs/blob/30cf1f34c583d6ed16bdc5b9578370f30c95fe1b/lisp/emacs-lisp/byte-run.el#L401-L442
</pre>
</div>

 <div class="results" id="org7f947f2">
 <p>
(defmacro defun (name arglist &rest body)
  "Define NAME as a function.
The definition is (lambda ARGLIST [DOCSTRING] [INTERACTIVE] BODY…).
DECL is a declaration, optional, of the form (declare DECLS…) where
DECLS is a list of elements of the form (PROP . VALUES).  These are
interpreted according to `defun-declarations-alist’.
INTERACTIVE is an optional `interactive’ specification.
The return value is undefined.
</p>

 <p>
\(fn NAME ARGLIST [DOCSTRING] [DECL] [INTERACTIVE] BODY…)“
  (declare (doc-string 3) (indent 2))
  (or name (error ”Cannot define ’%s’ as a function“ name))
  (if (null
       (and (listp arglist)
            (null (delq t (mapcar #’symbolp arglist)))))
      (error ”Malformed arglist: %s" arglist))
  (let* ((parse (byte-run–parse-body body t))
         (docstring (nth 0 parse))
         (declare-form (nth 1 parse))
         (interactive-form (nth 2 parse))
         (body (nth 3 parse))
         (warnings (nth 4 parse))
         (declarations
          (and declare-form (byte-run–parse-declarations
                             name arglist (cdr declare-form) ’defun
                             defun-declarations-alist))))
    (setq body (nconc warnings body))
    (setq body (nconc (cdr declarations) body))
    (if interactive-form
        (setq body (cons interactive-form body)))
    (if docstring
        (setq body (cons docstring body)))
    (if (null body)
        (setq body ’(nil)))
    (let ((def (list ’defalias
                     (list ’quote name)
                     (list ’function
                           (cons ’lambda
                                 (cons arglist body))))))
      (if declarations
          (cons ’prog1 (cons def (car declarations)))
        def))))
</p>

</div>
</div>
</div>
 <div id="outline-container-orge25f63e" class="outline-3">
 <h3 id="orge25f63e"> <a href="#orge25f63e">interactiveモードか判定する変数</a></h3>
 <div class="outline-text-3" id="text-orge25f63e">
 <ul class="org-ul"> <li>noninteractive 変数
 <ul class="org-ul"> <li>Non-nil means Emacs is running without interactive terminal.</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-orgc67195c" class="outline-3">
 <h3 id="orgc67195c"> <a href="#orgc67195c">defmacroの短い例</a></h3>
 <div class="outline-text-3" id="text-orgc67195c">
 <p>
macroを理解するには、それが必要な状況をイメージできるとわかりやすい。bodyを未評価の状態で渡すのが必要なので、defmacroを使う。
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">defmacro</span>  <span class="org-function-name">cask--shut-up-unless-debug</span> ( <span class="org-type">&rest</span> body)
   <span class="org-doc">"The shut-up module is singularly designed to defeat *every*</span>
 <span class="org-doc"> attempt at making your elisp package tractable."</span>
  ( <span class="org-keyword">declare</span> (indent defun))
  `( <span class="org-keyword">if</span> debug-on-error
       ( <span class="org-keyword">cl-flet</span> ((shut-up-current-output () (ignore)))
         ,@body)
     (shut-up ,@body)))
</pre>
</div>
</div>
</div>
 <div id="outline-container-org7e87c54" class="outline-3">
 <h3 id="org7e87c54"> <a href="#org7e87c54">letfを関数モックとして使う</a></h3>
 <div class="outline-text-3" id="text-org7e87c54">
 <p>
モックとして使える。princをinsertに置き換えて、テスト可能にする例。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 3: </span>princをinsertに置き換えて、テスト可能にする例</label> <pre class="src src-git-permalink">https://github.com/cask/cask/blob/bc168a11d7881a62657cdf19bab2e7966033ec2c/test/cask-cli-test.el#L48-L58
</pre>
</div>

 <div class="results" id="org9f11fb6">
 <p>
(ert-deftest cask-cli-test/print-table-with-links ()
  (cask-test/with-bundle
      ’((source localhost)
        (depends-on “package-c” “0.0.1”)
        (depends-on “package-d” “0.0.1”))
    (let ((package-c-path (cask-test/link bundle ’package-c “package-c-0.0.1”))
          (package-d-path (cask-test/link bundle ’package-d “package-d-0.0.1”)))
      (cl-letf (((symbol-function ’princ) #’insert))
        (with-temp-buffer
          (cask-cli–print-table (cask-links bundle))
          (should-not (zerop (length (buffer-string)))))))))
</p>

</div>
</div>
</div>
 <div id="outline-container-org6b27f54" class="outline-3">
 <h3 id="org6b27f54"> <a href="#org6b27f54">インデントマクロ</a></h3>
 <div class="outline-text-3" id="text-org6b27f54">
 <p>
マクロ呼び出しをTABがどのようにインデントするべきか定義するために、declareフォームを使うことができる。
</p>

 <ul class="org-ul"> <li> <a href="https://ayatakesi.github.io/emacs/24.5/elisp_html/Indenting-Macros.html#Indenting-Macros">Indenting Macros (GNU Emacs Lisp Reference Manual)</a></li>
</ul></div>
</div>
 <div id="outline-container-org41818e4" class="outline-3">
 <h3 id="org41818e4"> <a href="#org41818e4">バッファの開き方を分岐させるときの書き方</a></h3>
 <div class="outline-text-3" id="text-org41818e4">
 <p>
動作の異なる関数を分岐で代入して、funcallで評価する。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 4: </span>display-buffer-fnには、動作の異なるバッファを切り替える関数が代入されている</label> <pre class="src src-git-permalink">https://github.com/kd-collective/org-roam/blob/abe63b436035049923ae96639b9b856697047779/org-roam-node.el#L454-L458
</pre>
</div>

 <div class="results" id="org1fef38d">
 <p>
    (display-buffer-fn (if other-window
			   #'switch-to-buffer-other-window
			 #'pop-to-buffer-same-window)))
(funcall display-buffer-fn buf)
(when (org-invisible-p) (org-show-context))
</p>

</div>
</div>
</div>
 <div id="outline-container-org01c880d" class="outline-3">
 <h3 id="org01c880d"> <a href="#org01c880d">modus-themeを切り替える</a></h3>
 <div class="outline-text-3" id="text-org01c880d">
 <p>
modus-themes-toggleでダークテーマ、ライトテーマを切り替えられる。便利。
</p>
</div>
</div>
 <div id="outline-container-orgf0c330e" class="outline-3">
 <h3 id="orgf0c330e"> <a href="#orgf0c330e">現在のメジャーモードの調べ方</a></h3>
 <div class="outline-text-3" id="text-orgf0c330e">
 <p>
判定や使いかたを調べるのに使える。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby">major-mode
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-nil">-> "org-mode"
</pre>
</div>
</div>
</div>
 <div id="outline-container-org8078ea8" class="outline-3">
 <h3 id="org8078ea8"> <a href="#org8078ea8"> <code>format-spec</code> で設定の幅を広げる</a></h3>
 <div class="outline-text-3" id="text-org8078ea8">
 <p>
 <code>(format-spec)</code> で文字と関数をマッピングして、ユーザが設定しやすくできる。
</p>

 <ul class="org-ul"> <li> <a href="https://github.com/magit/magit/blob/f805f6a7720aeb894e9a58f0b36769ebdb53dd7c/lisp/magit-mode.el#L921">https://github.com/magit/magit/blob/f805f6a7720aeb894e9a58f0b36769ebdb53dd7c/lisp/magit-mode.el#L921</a></li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">(format-spec
     magit-buffer-name-format  <span class="org-comment-delimiter">;; </span> <span class="org-comment">"%x%M%v: %t%x"</span>
     `((?m . ,m)
       (?M . ,( <span class="org-keyword">if</span> (eq mode 'magit-status-mode)  <span class="org-string">"magit"</span> m))
       (?v . ,( <span class="org-keyword">or</span> v  <span class="org-string">""</span>))
       (?V . ,( <span class="org-keyword">if</span> v (concat  <span class="org-string">" "</span> v)  <span class="org-string">""</span>))
       (?t . ,n)
       (?x . ,( <span class="org-keyword">if</span> magit-uniquify-buffer-names  <span class="org-string">""</span>  <span class="org-string">"*"</span>))
       (?T . ,( <span class="org-keyword">if</span> magit-uniquify-buffer-names n (concat n  <span class="org-string">"*"</span>)))))
</pre>
</div>
</div>
</div>
 <div id="outline-container-org91e5401" class="outline-3">
 <h3 id="org91e5401"> <a href="#org91e5401">必須ではない依存パッケージの書き方</a></h3>
 <div class="outline-text-3" id="text-org91e5401">
 <p>
変数なら
(defvar w3m-current-url)
</p>

 <p>
関数なら
(declare-function w3m-current-title “ext:w3m-util”)
</p>

 <p>
と書くことで、読み込み先を指定されてることになるのでbyte-compileのエラーにならなくなる。
</p>
</div>
</div>
 <div id="outline-container-orgdc49f19" class="outline-3">
 <h3 id="orgdc49f19"> <a href="#orgdc49f19">依存インストール</a></h3>
 <div class="outline-text-3" id="text-orgdc49f19">
 <p>
requireかと思いがちだが、一番上の  <code>;; Package-Requires: ((emacs "25.1"))</code> で依存インストールに利用されてる。requireはあくまでパッケージを読み込むだけ。
</p>
</div>
</div>
 <div id="outline-container-orgf144ba4" class="outline-3">
 <h3 id="orgf144ba4"> <a href="#orgf144ba4">アクションと検索をわける</a></h3>
 <div class="outline-text-3" id="text-orgf144ba4">
 <p>
ace-link.elを見ていて、アクションとリンク検索を分けていた。リンク検索する → 決定を押したときのアクションを、それぞれのメジャーモードで判断するというわけだ。
単純で強力。
あとから追加するときも、その例にならえばいくらでもメジャーモードごとの追加ができるというわけだ。
ここから学べることは多いように思える。
</p>

 <ul class="org-ul"> <li>(ace-link-info) - エントリーポイント</li>
 <li>(ace-link-info-action) - アクション</li>
 <li>(ace-link–info-current) - collectで使われるユーティリティ</li>
 <li>(ace-link–info-collect) - リンクに番号をふる</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">defun</span>  <span class="org-function-name">ace-link-info</span> ()
   <span class="org-doc">"Open a visible link in an `</span> <span class="org-doc"> <span class="org-constant">Info-mode</span></span> <span class="org-doc">' buffer."</span>
  ( <span class="org-keyword">interactive</span>)
  ( <span class="org-keyword">let</span> ((pt (avy-with ace-link-info
              (avy-process
               (mapcar #'cdr
                       (ace-link--info-collect))
               (avy--style-fn avy-style)))))
    (ace-link--info-action pt)))

( <span class="org-keyword">defun</span>  <span class="org-function-name">ace-link--info-action</span> (pt)
  ( <span class="org-keyword">when</span> (numberp pt)
    (push-mark)
    (goto-char pt)
    ( <span class="org-keyword">let</span> ((we (window-end)))
      ( <span class="org-keyword">while</span> (not ( <span class="org-keyword">ignore-errors</span>
                    (Info-follow-nearest-node)))
        (forward-char 1)
        ( <span class="org-keyword">when</span> (> (point) we)
          ( <span class="org-warning">error</span>  <span class="org-string">"Could not follow link"</span>))))))

( <span class="org-keyword">declare-function</span> Info-follow-nearest-node  <span class="org-string">"info"</span>)
( <span class="org-keyword">declare-function</span> Info-next-reference  <span class="org-string">"info"</span>)
( <span class="org-keyword">declare-function</span> Info-try-follow-nearest-node  <span class="org-string">"info"</span>)
( <span class="org-keyword">declare-function</span> Info-goto-node  <span class="org-string">"info"</span>)

( <span class="org-keyword">defun</span>  <span class="org-function-name">ace-link--info-current</span> ()
   <span class="org-doc">"Return the node at point."</span>
  (cons ( <span class="org-keyword">cl-letf</span> (((symbol-function #'Info-goto-node)
                   ( <span class="org-keyword">lambda</span> (node _) node))
                  (browse-url-browser-function
                   ( <span class="org-keyword">lambda</span> (url  <span class="org-type">&rest</span> _) url)))
          (Info-try-follow-nearest-node))
        (point)))

( <span class="org-keyword">defun</span>  <span class="org-function-name">ace-link--info-collect</span> ()
   <span class="org-doc">"Collect the positions of visible links in the current `</span> <span class="org-doc"> <span class="org-constant">Info-mode</span></span> <span class="org-doc">' buffer."</span>
  ( <span class="org-keyword">let</span> ((end (window-end))
        points)
    ( <span class="org-keyword">save-excursion</span>
      (goto-char (window-start))
      ( <span class="org-keyword">when</span> ( <span class="org-keyword">ignore-errors</span> (Info-next-reference) t)
        ( <span class="org-keyword">push</span> (ace-link--info-current) points)
        (Info-next-reference)
        ( <span class="org-keyword">while</span> ( <span class="org-keyword">and</span> (< (point) end)
                    (> (point) (cdar points)))
          ( <span class="org-keyword">push</span> (ace-link--info-current) points)
          (Info-next-reference))
        (nreverse points)))))
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgcc03a3b" class="outline-3">
 <h3 id="orgcc03a3b"> <a href="#orgcc03a3b">マッピング</a></h3>
 <div class="outline-text-3" id="text-orgcc03a3b">
 <p>
(ace-link-setup-default)でマッピングしているところを見つけた。参考になる。
</p>
</div>
</div>
 <div id="outline-container-orgb373f20" class="outline-3">
 <h3 id="orgb373f20"> <a href="#orgb373f20">ディレクトリ探索</a></h3>
 <div class="outline-text-3" id="text-orgb373f20">
 <p>
(add-node-modules-path)はディレクトリ探索の参考になる。1つづつ上がって、node_modules/binを探索する。
コードが短いのも良い。
</p>
</div>
</div>
 <div id="outline-container-org91d46a9" class="outline-3">
 <h3 id="org91d46a9"> <a href="#org91d46a9">名前変換</a></h3>
 <div class="outline-text-3" id="text-org91d46a9">
 <p>
引数の、関数のsymbolを取得する関数。いいな。
</p>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">defun</span>  <span class="org-function-name">all-the-icons--data-name</span> (name)
   <span class="org-doc">"Get the symbol for an icon family function for icon set NAME."</span>
  (intern (concat  <span class="org-string">"all-the-icons-"</span> (downcase (symbol-name name))  <span class="org-string">"-data"</span>)))
</pre>
</div>

 <p>
↓みたいに使える。
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(funcall (all-the-icons--data-name family))
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgc5dd613" class="outline-3">
 <h3 id="orgc5dd613"> <a href="#orgc5dd613">mapcar</a></h3>
 <div class="outline-text-3" id="text-orgc5dd613">
 <p>
関数引数の関数はミソ。
</p>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">Function: mapcar function sequence

この関数は、sequence の各要素に function を適用(訳注：apply)し、その結果のリストを返します。sequence が nil で終るリストでない場合、エラーになります。
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(mapcar ( <span class="org-keyword">function</span> car) '((a b) (c d) (e f)))
=> (a c e)
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgc647dcb" class="outline-3">
 <h3 id="orgc647dcb"> <a href="#orgc647dcb">debugger を起動しないようにする</a></h3>
 <div class="outline-text-3" id="text-orgc647dcb">
 <p>
何かの拍子に、debugger実行されるようになり、普通に実行できなくなった。
(debugger-list-functions)
で関数を確認。adviceされてるとわかった。
(advice-remove ’登録関数 ’debug–implement-debug-on-entry) を削除して戻った。
</p>
</div>
</div>
 <div id="outline-container-org05195c7" class="outline-3">
 <h3 id="org05195c7"> <a href="#org05195c7">すべてdebug対象に</a></h3>
 <div class="outline-text-3" id="text-org05195c7">
 <p>
(edebug-all-defs)
でevalしただけで対象にするように設定する。→ 結局 C-uつけないとできない気が。
regionを選択して、 C-u M-x eval-region
すると範囲内すべてが対象に。
</p>

 <p>
オフにするときは(edebug-all-defs)をトグルしてオフにしてから、region指定して  <code>M-x eval-region</code>
</p>
</div>
</div>
 <div id="outline-container-org519351d" class="outline-3">
 <h3 id="org519351d"> <a href="#org519351d">外部コマンド系パッケージ</a></h3>
 <div class="outline-text-3" id="text-org519351d">
 <ol class="org-ol"> <li>ユーザ入力やフラグを通してひたすら引数を収集して、compilation に渡す。</li>
 <li>コマンドを実行する。</li>
 <li>バッファを作成して外部コマンドの結果をいい感じに出力する。</li>
</ol></div>
</div>
 <div id="outline-container-org4830502" class="outline-3">
 <h3 id="org4830502"> <a href="#org4830502">avyの流れ</a></h3>
 <div class="outline-text-3" id="text-org4830502">
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">let</span> ((pt (avy-with ace-link-custom
            (avy-process
             (ace-link--custom-collect)  <span class="org-comment-delimiter">; </span> <span class="org-comment">元バッファからリンクを収集して((名前1 . 位置1) (名前2 . 位置2)...)リストにする</span>
             (avy--style-fn avy-style)))))  <span class="org-comment-delimiter">; </span> <span class="org-comment">リンク文字を表示して操作を待つ。</span>
  (ace-link--custom-action pt))  <span class="org-comment-delimiter">; </span> <span class="org-comment">アクション</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgc00ed73" class="outline-3">
 <h3 id="orgc00ed73"> <a href="#orgc00ed73">リストのcustomの例</a></h3>
 <div class="outline-text-3" id="text-orgc00ed73">
 <p>
あとから追加、削除、編集が自由にできる。
</p>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">defcustom</span>  <span class="org-variable-name">devdocs-alist</span>
  '((c-mode           .  <span class="org-string">"c"</span>)
    (c++-mode         .  <span class="org-string">"c++"</span>)
    (clojure-mode     .  <span class="org-string">"clojure"</span>)
    (coffee-mode      .  <span class="org-string">"CoffeeScript"</span>)
    (common-lisp-mode .  <span class="org-string">"lisp"</span>)
    (cperl-mode       .  <span class="org-string">"perl"</span>)
    (css-mode         .  <span class="org-string">"css"</span>)
    (elixir-mode      .  <span class="org-string">"elixir"</span>)
    (enh-ruby-mode    .  <span class="org-string">"ruby"</span>)
    (erlang-mode      .  <span class="org-string">"erlang"</span>)
    (gfm-mode         .  <span class="org-string">"markdown"</span>)
    (go-mode          .  <span class="org-string">"go"</span>)
    (groovy-mode      .  <span class="org-string">"groovy"</span>)
    (haskell-mode     .  <span class="org-string">"haskell"</span>)
    (html-mode        .  <span class="org-string">"html"</span>)
    (java-mode        .  <span class="org-string">"java"</span>)
    (js2-mode         .  <span class="org-string">"javascript"</span>)
    (js3-mode         .  <span class="org-string">"javascript"</span>)
    (less-css-mode    .  <span class="org-string">"less"</span>)
    (lua-mode         .  <span class="org-string">"lua"</span>)
    (markdown-mode    .  <span class="org-string">"markdown"</span>)
    (perl-mode        .  <span class="org-string">"perl"</span>)
    (php-mode         .  <span class="org-string">"php"</span>)
    (processing-mode  .  <span class="org-string">"processing"</span>)
    (puppet-mode      .  <span class="org-string">"puppet"</span>)
    (python-mode      .  <span class="org-string">"python"</span>)
    (ruby-mode        .  <span class="org-string">"ruby"</span>)
    (sass-mode        .  <span class="org-string">"sass"</span>)
    (scala-mode       .  <span class="org-string">"scala"</span>)
    (tcl-mode         .  <span class="org-string">"tcl"</span>))
   <span class="org-doc">"Alist which maps major modes to names of DevDocs documentations."</span>
   <span class="org-builtin">:type</span> '(repeat (cons (symbol  <span class="org-builtin">:tag</span>  <span class="org-string">"Major mode"</span>)
                       (string  <span class="org-builtin">:tag</span>  <span class="org-string">"DevDocs documentation"</span>)))
   <span class="org-builtin">:group</span> 'devdocs)
</pre>
</div>

 <p>
使う関数すらcustomにできる。
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">defcustom</span>  <span class="org-variable-name">devdocs-build-search-pattern-function</span>
  'devdocs-build-search-pattern-function
   <span class="org-doc">"A function to be called by `</span> <span class="org-doc"> <span class="org-constant">devdocs-search</span></span> <span class="org-doc">'.</span>
 <span class="org-doc">It builds search pattern base on some context."</span>
   <span class="org-builtin">:type</span> 'function
   <span class="org-builtin">:group</span> 'devdocs)
</pre>
</div>
</div>
</div>
 <div id="outline-container-org919c1ca" class="outline-3">
 <h3 id="org919c1ca"> <a href="#org919c1ca">Gitリポジトリを調べる</a></h3>
 <div class="outline-text-3" id="text-org919c1ca">
 <p>
(locate-dominating-file directory file)
</p>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">cl-defun</span>  <span class="org-function-name">eshell-git-prompt--git-root-dir</span>
    ( <span class="org-type">&optional</span> (directory default-directory))
   <span class="org-doc">"Return Git root directory name if exist, otherwise, return nil."</span>
  ( <span class="org-keyword">let</span> ((root (locate-dominating-file directory  <span class="org-string">".git"</span>)))
    ( <span class="org-keyword">and</span> root (file-name-as-directory root))))
</pre>
</div>
</div>
</div>
 <div id="outline-container-org8964818" class="outline-3">
 <h3 id="org8964818"> <a href="#org8964818">変数が束縛されていれば、という表現</a></h3>
 <div class="outline-text-3" id="text-org8964818">
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">defun</span>  <span class="org-function-name">eshell-git-prompt-last-command-status</span> ()
   <span class="org-doc">"Return Eshell last command execution status.</span>
 <span class="org-doc">When Eshell just launches, `</span> <span class="org-doc"> <span class="org-constant">eshell-last-command-status</span></span> <span class="org-doc">' is not defined yet,</span>
 <span class="org-doc">return 0 (i.e., success)."</span>
  ( <span class="org-keyword">if</span> (not (boundp 'eshell-last-command-status))
      0
    eshell-last-command-status))
</pre>
</div>
</div>
</div>
</div>
 <div id="outline-container-orged5ecbc" class="outline-2">
 <h2 id="orged5ecbc"> <a href="#orged5ecbc">arielコードメモ</a></h2>
 <div class="outline-text-2" id="text-orged5ecbc">
 <p>
 <a href="http://dev.ariel-networks.com/articles/workshop/emacs-lisp-basic/">http://dev.ariel-networks.com/articles/workshop/emacs-lisp-basic/</a>
の元の内容に、たまにコメントをつけて読んだ。
</p>
 <ul class="org-ul"> <li>実装を見ている</li>
 <li>わかりやすい例</li>
</ul></div>
 <div id="outline-container-org08f66fd" class="outline-3">
 <h3 id="org08f66fd"> <a href="#org08f66fd">ring</a></h3>
 <div class="outline-text-3" id="text-org08f66fd">
 <p>
データ型定義のやり方。型述語の実装。
</p>
 <div class="org-src-container">
 <pre class="src src-git-permalink">https://github.com/kijimaD/emacs/blob/master/lisp/emacs-lisp/ring.el#L48-L52
</pre>
</div>

 <div class="results" id="orgf479ba4">
 <p>
(defun ring-p (x)
  “Return t if X is a ring; nil otherwise.”
  (and (consp x) (integerp (car x))
       (consp (cdr x)) (integerp (cadr x))
       (vectorp (cddr x))))
</p>

</div>
</div>
</div>
 <div id="outline-container-org360e795" class="outline-3">
 <h3 id="org360e795"> <a href="#org360e795">eww</a></h3>
 <div class="outline-text-3" id="text-org360e795">
 <p>
 <a href="https://github.com/kijimaD/emacs/blob/master/lisp/net/eww.el#L1">https://github.com/kijimaD/emacs/blob/master/lisp/net/eww.el#L1</a>
</p>
</div>
</div>
 <div id="outline-container-org81b4681" class="outline-3">
 <h3 id="org81b4681"> <a href="#org81b4681">lisp.h</a></h3>
 <div class="outline-text-3" id="text-org81b4681">
 <p>
lispシンボルの実装。
 <a href="https://github.com/kijimaD/emacs/blob/master/src/lisp.h#L798">https://github.com/kijimaD/emacs/blob/master/src/lisp.h#L798</a>
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(type-of 42)
=>integer
(type-of 3.14)
=> float
(type-of  <span class="org-string">"foo"</span>)
=> string
(type-of '(1 2))
=> cons
(type-of '[1 2])
=> vector
(type-of 'foo)
=> symbol
(type-of ?a)   <span class="org-comment-delimiter">; </span> <span class="org-comment">Cの'</span> <span class="org-comment"> <span class="org-constant">a</span></span> <span class="org-comment">'相当。内部的には数値</span>
=> integer
</pre>
</div>
</div>
</div>
 <div id="outline-container-org0f641fc" class="outline-3">
 <h3 id="org0f641fc"> <a href="#org0f641fc">中で起こってること</a></h3>
 <div class="outline-text-3" id="text-org0f641fc">
 <p>
 <code>(setq foo "FOO")</code> したとき、symbolオブジェクトは以下のようにセットされます。
</p>
 <div class="org-src-container">
 <pre class="src src-c"> <span class="org-comment-delimiter">// </span> <span class="org-comment">lisp.h</span>
 <span class="org-keyword">struct</span>  <span class="org-type">Lisp_Symbol</span>
{
   <span class="org-keyword">struct</span>  <span class="org-type">Lisp_String</span> * <span class="org-variable-name">name</span>;  =>  <span class="org-string">"foo"</span>
    Lisp_Object value;  =>  <span class="org-string">"FOO"</span>の値を持つ文字列オブジェクトを指す
    Lisp_Object function;  => 空
    略
    };
</pre>
</div>

 <p>
↑のように作られているオブジェクトを関数で調べてみます。
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(symbolp 'foo)     <span class="org-comment-delimiter">; </span> <span class="org-comment">シンボルか否かの判定。tが真。nilが偽。(後述)</span>
=> t
(symbol-name 'foo)
=>  <span class="org-string">"foo"</span>
(symbol-value 'foo)
=>  <span class="org-string">"FOO"</span>
(boundp 'foo)    <span class="org-comment-delimiter">; </span> <span class="org-comment">値セルに値があればt、なければnil</span>
=> t
(fboundp 'foo)   <span class="org-comment-delimiter">; </span> <span class="org-comment">関数セルに関数があればt、なければnil</span>
=> nil
(symbol-function 'foo)
                                         <span class="org-comment-delimiter">; </span> <span class="org-comment">まだ設定していないので、今はエラー</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-org815210e" class="outline-3">
 <h3 id="org815210e"> <a href="#org815210e">クォートの意味</a></h3>
 <div class="outline-text-3" id="text-org815210e">
 <blockquote>
 <p>
クォートは「評価しない」ことを指示します。クォートしないと、基本的に評価されてしまいます。
</p>
</blockquote>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(type-of 'foo)
=> symbol
(type-of foo)
=> string    <span class="org-comment-delimiter">; </span> <span class="org-comment">評価後、つまり値セルの指すオブジェクトの型が出力されます</span>
</pre>
</div>

 <p>
 <code>'</code> は  <code>quote</code> 関数の略記です。
</p>
</div>
</div>
 <div id="outline-container-org3da1c22" class="outline-3">
 <h3 id="org3da1c22"> <a href="#org3da1c22">シンボルのまとめ</a></h3>
 <div class="outline-text-3" id="text-org3da1c22">
 <blockquote>
 <p>
ここまでで分かったこと
</p>

 <p>
シンボルは名前を持つ (symbol-name関数で確認可能)
シンボルの値セルは任意のオブジェクトを指す (symbol-value関数で確認可能)
シンボルの指すオブジェクトの型はtype-ofで確認可能
</p>
</blockquote>
</div>
</div>
 <div id="outline-container-orgcfcf823" class="outline-3">
 <h3 id="orgcfcf823"> <a href="#orgcfcf823">コンスセルの表記</a></h3>
 <div class="outline-text-3" id="text-orgcfcf823">
 <blockquote>
 <p>
コンスセルとはふたつのポインタ(*)を持ったオブジェクトです。
</p>
</blockquote>
 <p>
実装
 <a href="https://github.com/kijimaD/emacs/blob/master/src/lisp.h#L1350">https://github.com/kijimaD/emacs/blob/master/src/lisp.h#L1350</a>
</p>

 <div class="org-src-container">
 <pre class="src src-c"> <span class="org-keyword">struct</span>  <span class="org-type">Lisp_Cons</span>
{
   <span class="org-keyword">union</span>
  {
     <span class="org-keyword">struct</span>
    {
       <span class="org-comment-delimiter">/* </span> <span class="org-comment">Car of this cons cell.</span> <span class="org-comment-delimiter">  */</span>
       <span class="org-type">Lisp_Object</span>  <span class="org-variable-name">car</span>;

       <span class="org-keyword">union</span>
      {
         <span class="org-comment-delimiter">/* </span> <span class="org-comment">Cdr of this cons cell.</span> <span class="org-comment-delimiter">  */</span>
         <span class="org-type">Lisp_Object</span>  <span class="org-variable-name">cdr</span>;

         <span class="org-comment-delimiter">/* </span> <span class="org-comment">Used to chain conses on a free list.</span> <span class="org-comment-delimiter">  */</span>
         <span class="org-keyword">struct</span>  <span class="org-type">Lisp_Cons</span> * <span class="org-variable-name">chain</span>;
      }  <span class="org-variable-name">u</span>;
    }  <span class="org-variable-name">s</span>;
    GCALIGNED_UNION_MEMBER
  }  <span class="org-variable-name">u</span>;
};
</pre>
</div>
 <p>
最新のコードは若干変わっている。
</p>
 <ul class="org-ul"> <li> <code>union</code> って何だろう。</li>
 <li>2つのポインタ…elispではcarとcdr</li>
</ul> <blockquote>
 <p>
後述するように、コンスセルのcdrが別のコンスセルを指すことで、リスト構造を作ります。コンスセルで作るリスト処理こそがLisp(LISt Processing)の名前の由来でもあります。
</p>
</blockquote>
</div>
</div>
 <div id="outline-container-orgbacad61" class="outline-3">
 <h3 id="orgbacad61"> <a href="#orgbacad61">コンスセルの表記</a></h3>
 <div class="outline-text-3" id="text-orgbacad61">
 <p>
 <code>("foo" . "bar")</code>
これは内部的に。
</p>
 <div class="org-src-container">
 <pre class="src src-c"> <span class="org-keyword">struct</span>  <span class="org-type">Lisp_Cons</span>
{
   <span class="org-type">Lisp_Object</span>  <span class="org-variable-name">car</span>;  =>  <span class="org-string">"foo"</span>文字列オブジェクトを指す
    Lisp_Object cdr;  =>  <span class="org-string">"bar"</span>文字列オブジェクトを指す
    };
</pre>
</div>

 <p>
オブジェクトが2つ組み合わされたもの。
</p>
</div>
</div>
 <div id="outline-container-org7d7b62d" class="outline-3">
 <h3 id="org7d7b62d"> <a href="#org7d7b62d">コンスセルの生成</a></h3>
 <div class="outline-text-3" id="text-org7d7b62d">
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(cons  <span class="org-string">"foo"</span>  <span class="org-string">"bar"</span>)
=> ( <span class="org-string">"foo"</span> .  <span class="org-string">"bar"</span>)
</pre>
</div>

 <ul class="org-ul"> <li>consはconstructの略。</li>
</ul></div>
</div>
 <div id="outline-container-orgff63aea" class="outline-3">
 <h3 id="orgff63aea"> <a href="#orgff63aea">コンスセルの値</a></h3>
 <div class="outline-text-3" id="text-orgff63aea">
 <p>
コンスセルの値にアクセスするには  <code>car</code> と  <code>cdr</code> だけ使える。getterメソッドみたいなもの。
</p>

 <blockquote>
 <p>
car、cdr以外にコンスセルの中を参照する手段はありません。
</p>
</blockquote>

 <p>
なるほど。
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(car '( <span class="org-string">"foo"</span> .  <span class="org-string">"bar"</span>))
=>  <span class="org-string">"foo"</span>
(cdr '( <span class="org-string">"foo"</span> .  <span class="org-string">"bar"</span>))
=>  <span class="org-string">"bar"</span>
</pre>
</div>

 <blockquote>
 <p>
Java風に言えば、コンスセルはふたつのprivateフィールドとふたつのアクセサを持つだけの軽いオブジェクトです。
</p>
</blockquote>
</div>
</div>
 <div id="outline-container-org88bafec" class="outline-3">
 <h3 id="org88bafec"> <a href="#org88bafec">プログラム自体がオブジェクト</a></h3>
 <div class="outline-text-3" id="text-org88bafec">
 <blockquote>
 <p>
厳密に言えば、(“foo” . “bar”) という文字列は、コンスセルの(Java風に言えば)シリアライズ化した表現です。
後述するように、elispのプログラム自体はリスト表現で書きます。
これの意味することは、プログラム自体がオブジェクトであり、ソースコードはオブジェクトをシリアライズ化しただけの文字列と言えます。
</p>
</blockquote>

 <ul class="org-ul"> <li>シリアライズ化。</li>
 <li>データとプログラムの区別がない…真髄的なところだということはわかる。</li>
</ul></div>
</div>
 <div id="outline-container-orgfb44079" class="outline-3">
 <h3 id="orgfb44079"> <a href="#orgfb44079">なんでもオブジェクト</a></h3>
 <div class="outline-text-3" id="text-orgfb44079">
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">setq</span> foo '( <span class="org-string">"foo"</span> . 42))   <span class="org-comment-delimiter">; </span> <span class="org-comment">carに文字列、cdrに数値のコンスセルを指すシンボルfoo</span>
=> ( <span class="org-string">"foo"</span> . 42)
( <span class="org-keyword">setq</span> bar '(foo . foo))    <span class="org-comment-delimiter">; </span> <span class="org-comment">quoteは全体に効いているので、carとcdrの両方がシンボルfoo</span>
=> (foo . foo)
(symbol-value (car bar))
=> ( <span class="org-string">"foo"</span> . 42)
(symbol-value (cdr bar))
=> ( <span class="org-string">"foo"</span> . 42)
( <span class="org-keyword">setq</span> bar `(,foo . foo))   <span class="org-comment-delimiter">; </span> <span class="org-comment">backquoteの例</span>
=> (( <span class="org-string">"foo"</span> . 42) . foo)    <span class="org-comment-delimiter">; </span> <span class="org-comment">,のついたオブジェクトは評価。そうでないオブジェクトは未評価</span>
</pre>
</div>

 <p>
bar -> foo -> “foo” -> 42
</p>

 <p>
シンボルを評価すると、値セルを返します。
</p>
</div>
</div>
 <div id="outline-container-org8dab634" class="outline-3">
 <h3 id="org8dab634"> <a href="#org8dab634">cdrが別のコンスセル</a></h3>
 <div class="outline-text-3" id="text-org8dab634">
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(cons  <span class="org-string">"foo"</span> '( <span class="org-string">"bar"</span> .  <span class="org-string">"baz"</span>))
=> ( <span class="org-string">"foo"</span>  <span class="org-string">"bar"</span> .  <span class="org-string">"baz"</span>)
</pre>
</div>

 <p>
 <code>("foo" . "bar" "baz")</code> とはならない。
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">'( <span class="org-string">"foo"</span> . ( <span class="org-string">"bar"</span> .  <span class="org-string">"baz"</span>))
 <span class="org-comment-delimiter">;; </span> <span class="org-comment">=> ("foo" "bar" . "baz")</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-org2c54c4e" class="outline-3">
 <h3 id="org2c54c4e"> <a href="#org2c54c4e">リスト化</a></h3>
 <div class="outline-text-3" id="text-org2c54c4e">
 <p>
最期のcdrをnilにするとリストに。
</p>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(cons  <span class="org-string">"foo"</span> '( <span class="org-string">"bar"</span> . nil))
 <span class="org-comment-delimiter">;; </span> <span class="org-comment">=> ("foo" "bar")</span>
</pre>
</div>

 <p>
nilじゃないとコンスセルになる(前の節の通り)。
</p>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(cons  <span class="org-string">"foo"</span> '( <span class="org-string">"bar"</span> .  <span class="org-string">"aaa"</span>))
( <span class="org-string">"foo"</span>  <span class="org-string">"bar"</span> .  <span class="org-string">"aaa"</span>)
</pre>
</div>
</div>
</div>
 <div id="outline-container-org54cafcc" class="outline-3">
 <h3 id="org54cafcc"> <a href="#org54cafcc">リスト操作</a></h3>
 <div class="outline-text-3" id="text-org54cafcc">
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(car '( <span class="org-string">"foo"</span>  <span class="org-string">"bar"</span>  <span class="org-string">"baz"</span>))
=>  <span class="org-string">"foo"</span>
(cdr '( <span class="org-string">"foo"</span>  <span class="org-string">"bar"</span>  <span class="org-string">"baz"</span>))
=> ( <span class="org-string">"bar"</span>  <span class="org-string">"baz"</span>)
(cdr (cdr '( <span class="org-string">"foo"</span>  <span class="org-string">"bar"</span>  <span class="org-string">"baz"</span>)))
=> ( <span class="org-string">"baz"</span>)     <span class="org-comment-delimiter">; </span> <span class="org-comment">dotted pair notationで書けば ("baz" . nil)</span>
(cdr (cdr (cdr '( <span class="org-string">"foo"</span>  <span class="org-string">"bar"</span>  <span class="org-string">"baz"</span>))))
=> nil
</pre>
</div>

 <p>
面倒だけど、リストの操作が行えます。
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">setq</span> foo  <span class="org-string">"a"</span>)
( <span class="org-keyword">setq</span> foo (cons  <span class="org-string">"value"</span> foo))    <span class="org-comment-delimiter">; </span> <span class="org-comment">リストfooに要素をprepend</span>
 <span class="org-comment-delimiter">;; </span> <span class="org-comment">=> ("value" . "a")</span>
( <span class="org-keyword">setq</span> foo (cons  <span class="org-string">"value"</span> foo))    <span class="org-comment-delimiter">; </span> <span class="org-comment">さらにprepend</span>
 <span class="org-comment-delimiter">;; </span> <span class="org-comment">=> ("value" "value" . "a")</span>
( <span class="org-keyword">setq</span> load-path (cons (expand-file-name  <span class="org-string">"~/elisp"</span>) load-path))

(list  <span class="org-string">"foo"</span>  <span class="org-string">"bar"</span>  <span class="org-string">"baz"</span>)   <span class="org-comment-delimiter">; </span> <span class="org-comment">引数を要素に持つリストを生成</span>
=> ( <span class="org-string">"foo"</span>  <span class="org-string">"bar"</span>  <span class="org-string">"baz"</span>)

(append '( <span class="org-string">"foo"</span>  <span class="org-string">"bar"</span>) '( <span class="org-string">"baz"</span>))   <span class="org-comment-delimiter">; </span> <span class="org-comment">連接したリストを生成</span>
=> ( <span class="org-string">"foo"</span>  <span class="org-string">"bar"</span>  <span class="org-string">"baz"</span>)
( <span class="org-keyword">setq</span> load-path (append load-path (list (expand-file-name  <span class="org-string">"~/elisp"</span>))))

(car (nthcdr 1 '( <span class="org-string">"foo"</span>  <span class="org-string">"bar"</span>  <span class="org-string">"baz"</span>)))    <span class="org-comment-delimiter">; </span> <span class="org-comment">N番目の要素の取得</span>
=>  <span class="org-string">"bar"</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-orged1fc7a" class="outline-3">
 <h3 id="orged1fc7a"> <a href="#orged1fc7a">評価</a></h3>
 <div class="outline-text-3" id="text-orged1fc7a">
 <blockquote>
 <p>
コンスセルの評価は次のように行います。
</p>

 <p>
リストの先頭要素(先頭のコンスセルのcar)のシンボルの関数セルの指す関数呼び出し
リストの後続要素(先頭以外のコンスセルのcar)を関数の引数として渡す。引数はquoteがなければ、評価してから引数に渡ります
リストの後続要素は、リストであるかもしれません。この場合、内側のリストを評価、つまり関数呼び出しをしてから、外側のリストの関数呼び出しをします(前ページですでにやっていますが)。
</p>
</blockquote>

 <ul class="org-ul"> <li>コンスセルとリストの違い。コンスセルは  <code>( . )</code> で、最後のcdrがnilでないもの。</li>
 <li>リストは最後のcdrがnilのもの。</li>
 <li> <code>(append '("foo" "bar") '("baz"))</code> の例.
 <ol class="org-ol"> <li>リストの先頭要素  <code>append</code> の関数セルの指す関数を呼び出す。</li>
 <li>リストの後続要素  <code>'("foo" "bar") '("baz")</code> が引数として呼び出される。quoteがあるので評価されない。リストのときは評価=関数呼び出しを1.と同様に内側→外側の順に行う。</li>
</ol></li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">defun</span>  <span class="org-function-name">plus1</span> (n)
  (+ n 1))
=> plus1
(plus1 10)
=> 11
( <span class="org-keyword">defun</span>  <span class="org-function-name">my-plus</span> (m n)
  (+ m n))
=> my-plus
(my-plus 2 5)
=> 7
</pre>
</div>

 <blockquote>
 <p>
関数の戻り値(=関数の評価結果)は、関数本体の最後の評価結果です
</p>
</blockquote>

 <p>
なるほど。
</p>
</div>
</div>
 <div id="outline-container-orgdec1ae6" class="outline-3">
 <h3 id="orgdec1ae6"> <a href="#orgdec1ae6">関数に名前はない</a></h3>
 <div class="outline-text-3" id="text-orgdec1ae6">
 <blockquote>
 <p>
defunを見て、関数に名前があると思うのは間違いです。
</p>

 <p>
defunは、シンボルを作って、その関数セルが関数定義を指すようにしています。
</p>
</blockquote>

 <p>
シンボルの定義を思い返してみます。
</p>

 <div class="org-src-container">
 <pre class="src src-c"> <span class="org-comment-delimiter">// </span> <span class="org-comment">lisp.h</span>
 <span class="org-keyword">struct</span>  <span class="org-type">Lisp_Symbol</span>
{
   <span class="org-keyword">struct</span>  <span class="org-type">Lisp_String</span> * <span class="org-variable-name">name</span>;  =>  <span class="org-string">"foo"</span>
    Lisp_Object value;  =>  <span class="org-string">"FOO"</span>の値を持つ文字列オブジェクトを指す
    Lisp_Object function;  => 空
    略
    };
</pre>
</div>

 <p>
確かに関数定義を指しています。
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">defun</span>  <span class="org-function-name">foo</span> () (message  <span class="org-string">"a"</span>))
(symbolp 'foo)
=> t
(symbol-name 'foo)
=>  <span class="org-string">"foo"</span>
(symbol-value 'foo)
=> error: (void-variable foo)
(symbol-function 'foo)
=> ( <span class="org-keyword">lambda</span> nil (message  <span class="org-string">"a"</span>))
(boundp 'foo)
=> nil
(fboundp 'foo)  <span class="org-comment-delimiter">; </span> <span class="org-comment">関数定義</span>
=> t
</pre>
</div>
</div>
</div>
 <div id="outline-container-org909a9b5" class="outline-3">
 <h3 id="org909a9b5"> <a href="#org909a9b5">既存関数も同じ</a></h3>
 <div class="outline-text-3" id="text-org909a9b5">
 <p>
どれもシンボルで、関数定義を指しています。
</p>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(symbol-function 'car)
=> #<subr car>
(symbol-function 'defun)
=> #<subr defun>
(symbol-function '+)
=> #<subr +>
</pre>
</div>

 <blockquote>
 <p>
subr(subroutineの略)は、Cで書かれた関数を意味しています。
</p>

 <p>
構造(シンボルcarやシンボルdefunがあり、それらの関数セルが関数定義を指す)は同じです。
</p>
</blockquote>

 <p>
subrそうだったのか。  <code>#<></code> はどういう意味なのだろう。
</p>
</div>
</div>
 <div id="outline-container-org81114ef" class="outline-3">
 <h3 id="org81114ef"> <a href="#org81114ef">fset</a></h3>
 <div class="outline-text-3" id="text-org81114ef">
 <blockquote>
 <p>
値セルにsetqやsetがあったように、関数セルにはfsetがあります(fsetqはありません)。
</p>
</blockquote>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(fset 'my-plus2
      '(lambda (n) (+ n 2)))    <span class="org-comment-delimiter">; </span> <span class="org-comment">defunと同じ</span>
=> ( <span class="org-keyword">lambda</span> (n) (+ n 2))
(my-plus2 10)
=> 12
</pre>
</div>

 <p>
関数セルと値セルを確認します。
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">setq</span> foo  <span class="org-string">"foo"</span>)
=>  <span class="org-string">"foo"</span>
(fset 'foo '(lambda (s) (concat s  <span class="org-string">"bar"</span>)))  <span class="org-comment-delimiter">; </span> <span class="org-comment">名前とリストの組み合わせ。どちらも未評価で渡す。</span>
=> ( <span class="org-keyword">lambda</span> (s) (concat s  <span class="org-string">"bar"</span>))
(foo foo)
=>  <span class="org-string">"foobar"</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgff52a8e" class="outline-3">
 <h3 id="orgff52a8e"> <a href="#orgff52a8e">lambda</a></h3>
 <div class="outline-text-3" id="text-orgff52a8e">
 <p>
 <a href="https://github.com/kijimaD/emacs/blob/master/lisp/subr.el#L106">https://github.com/kijimaD/emacs/blob/master/lisp/subr.el#L106</a>
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">lambda</span> (引数 ...) (関数本体))
</pre>
</div>

 <p>
処理の中身。名前と組み合わせると関数になります。
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(( <span class="org-keyword">lambda</span> (m n) (+ m n)) 2 5)
=> 7
</pre>
</div>

 <p>
関数定義。declare(…関数やマクロに関する情報、infoで出てくる文章)の箇所を除くとこれだけです。
引数cdr(処理したい内容)でコンスセルを作って、関数セルと組み合わせてリストを作ります。なので名前はありません。
</p>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">defmacro</span>  <span class="org-function-name">lambda</span> ( <span class="org-type">&rest</span> cdr)
  (list 'function (cons 'lambda cdr)))
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgd3733b3" class="outline-3">
 <h3 id="orgd3733b3"> <a href="#orgd3733b3">関数とは何か</a></h3>
 <div class="outline-text-3" id="text-orgd3733b3">
 <p>
述語関数から見てます。この方法いいですね。
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">                                         <span class="org-comment-delimiter">; </span> <span class="org-comment">subr.el</span>
( <span class="org-keyword">defun</span>  <span class="org-function-name">functionp</span> (object)
   <span class="org-doc">"Non-nil if OBJECT is a type of object that can be called as a function."</span>
  ( <span class="org-keyword">or</span> (subrp object) (byte-code-function-p object)
      (eq (car-safe object) 'lambda)
      ( <span class="org-keyword">and</span> (symbolp object) (fboundp object))))
</pre>
</div>

 <blockquote>
 <p>
elispにとって、「関数」とは次の4つのいずれかであることが分かります。
</p>

 <ul class="org-ul"> <li>subroutine (Cで書かれた関数)</li>
 <li>バイトコンパイルされた関数 (今はあまり気にしないように)</li>
 <li>シンボルlambdaで始まるリスト</li>
 <li>関数セルが空ではないシンボル</li>
</ul></blockquote>
</div>
</div>
 <div id="outline-container-org73a347d" class="outline-3">
 <h3 id="org73a347d"> <a href="#org73a347d">関数呼び出し</a></h3>
 <div class="outline-text-3" id="text-org73a347d">
 <blockquote>
 <p>
リストの先頭要素に「関数」があれば、関数呼び出しになります。
</p>
</blockquote>

 <p>
リストがすべてに優先して存在します。
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(my-plus 1 3)    <span class="org-comment-delimiter">; </span> <span class="org-comment">シンボルであれば関数セルの指す関数を呼び出す</span>
=> 4
(( <span class="org-keyword">lambda</span> (m n) (+ m n)) 1 3)    <span class="org-comment-delimiter">; </span> <span class="org-comment">シンボルlambdaで始まるリストも「関数」</span>
=> 4
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgdaa04a3" class="outline-3">
 <h3 id="orgdaa04a3"> <a href="#orgdaa04a3">funcall</a></h3>
 <div class="outline-text-3" id="text-orgdaa04a3">
 <blockquote>
 <p>
funcall関数は引数の1番目を関数として呼びます。
</p>
</blockquote>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(funcall 'my-plus 1 3)
=> 4
(funcall '(lambda (m n) (+ m n)) 1 3)
=> 4
</pre>
</div>

 <ul class="org-ul"> <li> <code>'(lambda (m n) (+ m n))</code> は関数として呼ばれる。</li>
</ul> <p>
 <code>- (lambda (m n) (+ m n))</code> でもいいみたい。
</p>

 <p>
違いは何だっけ。… 評価して渡されるか。この場合は関数なので、評価されるのがいつでも結果は変わらない。
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(funcall '(lambda () (+ 1 2)))
( <span class="org-keyword">if</span> (eq 1 (+ 1)) 1)  <span class="org-comment-delimiter">; </span> <span class="org-comment">1</span>
( <span class="org-keyword">if</span> (eq 1 '(+ 1)) 1)  <span class="org-comment-delimiter">; </span> <span class="org-comment">nil</span>

(+ (+ 1) 1)  <span class="org-comment-delimiter">; </span> <span class="org-comment">2</span>
(+ '(+ 1) 1)  <span class="org-comment-delimiter">; </span> <span class="org-comment">(wrong-type-argument number-or-marker-p (+ 1))</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-org514fb14" class="outline-3">
 <h3 id="org514fb14"> <a href="#org514fb14">値セルにlambda</a></h3>
 <div class="outline-text-3" id="text-org514fb14">
 <p>
つまり、値を関数でも呼び出せます。
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">setq</span> foo '(lambda (m n) (+ m n)))
=> ( <span class="org-keyword">lambda</span> (m n) (+ m n))
(funcall foo 2 5)
=> 7
</pre>
</div>

 <p>
なるほど…。
</p>
</div>
</div>
 <div id="outline-container-org1539b70" class="outline-3">
 <h3 id="org1539b70"> <a href="#org1539b70">明示的に空にする</a></h3>
 <div class="outline-text-3" id="text-org1539b70">
 <blockquote>
 <p>
(makunbound ’foo)   ;値セルを空にする
=> foo
(fmakunbound ’foo)  ;関数セルを空にする
=> foo
</p>
</blockquote>
</div>
</div>
 <div id="outline-container-org502b610" class="outline-3">
 <h3 id="org502b610"> <a href="#org502b610">連想リスト(association list)</a></h3>
 <div class="outline-text-3" id="text-org502b610">
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">'(( <span class="org-string">"foo"</span> .  <span class="org-string">"FOO"</span>) ( <span class="org-string">"bar"</span> .  <span class="org-string">"BAR"</span>) ( <span class="org-string">"baz"</span> .  <span class="org-string">"BAZ"</span>))
</pre>
</div>

 <p>
リストの要素がコンスセル。
</p>
</div>
</div>
 <div id="outline-container-org76d8191" class="outline-3">
 <h3 id="org76d8191"> <a href="#org76d8191">配列</a></h3>
 <div class="outline-text-3" id="text-org76d8191">
 <blockquote>
 <p>
配列は次の4つに分類できます。
</p>

 <ul class="org-ul"> <li>ベクタ</li>
 <li>文字列</li>
 <li>文字テーブル</li>
 <li>ブールベクタ</li>
</ul></blockquote>

 <blockquote>
 <p>
言語仕様として「配列」があると言うより、次のarrayp述語で「配列」型(基本型では無い)が定義されているようなものです。
</p>
</blockquote>

 <div class="org-src-container">
 <pre class="src src-c"> <span class="org-comment-delimiter">// </span> <span class="org-comment">data.c</span>
DEFUN ( <span class="org-string">"arrayp"</span>, Farrayp, Sarrayp, 1, 1, 0,  <span class="org-string">"Return t if OBJECT is an array (string or vector)."</span>)
  (object)
   <span class="org-type">Lisp_Object</span>  <span class="org-variable-name">object</span>;
{
   <span class="org-keyword">if</span> (VECTORP (object) || STRINGP (object)
      || CHAR_TABLE_P (object) || BOOL_VECTOR_P (object))
     <span class="org-keyword">return</span> Qt;
   <span class="org-keyword">return</span> Qnil;
}
</pre>
</div>

 <p>
ベクタ/文字/文字テーブル/ブールベクタであればarray。なんだそりゃ。
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(arrayp '(1 2))  <span class="org-comment-delimiter">; </span> <span class="org-comment">nil</span>
(arrayp  <span class="org-string">"aaa"</span>)   <span class="org-comment-delimiter">; </span> <span class="org-comment">t</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-org8f76739" class="outline-3">
 <h3 id="org8f76739"> <a href="#org8f76739">ベクタ</a></h3>
 <div class="outline-text-3" id="text-org8f76739">
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">[1 3 5]
=> [1 3 5]
(vectorp [1 3 5])
=> t
( <span class="org-keyword">setq</span> foo [1 3 5])     <span class="org-comment-delimiter">; </span> <span class="org-comment">quoteしてもしなくても同じ</span>
=> [1 3 5]
(vectorp foo)
=> t
</pre>
</div>
</div>
</div>
 <div id="outline-container-org603355b" class="outline-3">
 <h3 id="org603355b"> <a href="#org603355b">ベクタの操作</a></h3>
 <div class="outline-text-3" id="text-org603355b">
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">
</pre>
</div>
</div>
</div>
 <div id="outline-container-org46f8d15" class="outline-3">
 <h3 id="org46f8d15"> <a href="#org46f8d15">元ページ再掲</a></h3>
 <div class="outline-text-3" id="text-org46f8d15">
 <p>
 <a href="http://dev.ariel-networks.com/articles/workshop/emacs-lisp-basic/">http://dev.ariel-networks.com/articles/workshop/emacs-lisp-basic/</a>
</p>
</div>
</div>
</div>
 <div id="outline-container-orgae3f14e" class="outline-2">
 <h2 id="orgae3f14e"> <a href="#orgae3f14e">リスト遊び</a></h2>
 <div class="outline-text-2" id="text-orgae3f14e">
</div>
 <div id="outline-container-orgee2e9a9" class="outline-3">
 <h3 id="orgee2e9a9"> <a href="#orgee2e9a9">リスト</a></h3>
 <div class="outline-text-3" id="text-orgee2e9a9">
 <ul class="org-ul"> <li>リストを構成するセルのCDRは  <code>m</code> ，セルかnilを指している。</li>
</ul> <p>
しかしポイントはなんでも指せるので、CDRはアトム(整数とか)も参照できる。
CARが1。CDRが2のセルは、表記方法では表現できない。
これを表現するために、ドット対表記が用意されている。
</p>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(cons 1 (cons 2 nil))
=> (1 2)

(cons 1 2)
=> (1 . 2)
</pre>
</div>

 <p>
nilで終端しないセルはドット対で表記する。
この方法で表現すると、
(1) => (1. nil)
(1 2 3) => (1 . (2 . (3. nil)))
みたいになる。ドット対は連想リストで用いられる。
</p>
</div>
</div>
 <div id="outline-container-orgeed6b25" class="outline-3">
 <h3 id="orgeed6b25"> <a href="#orgeed6b25">Lispのデータ</a></h3>
 <div class="outline-text-3" id="text-orgeed6b25">
 <ul class="org-ul"> <li>セル(1対のポインタ。consで作られる。CARとCDRが指しているポインタが指すデータを見るには、carとcdrを用いる)</li>
 <li>アトム(セル以外。整数とか)</li>
</ul></div>
</div>
 <div id="outline-container-orgff145ea" class="outline-3">
 <h3 id="orgff145ea"> <a href="#orgff145ea">Lispの評価</a></h3>
 <div class="outline-text-3" id="text-orgff145ea">
 <ul class="org-ul"> <li>式がセルなら関数を呼び出す。第1要素のシンボルの指す関数を実行する。引数は評価する。</li>
 <li>式がアトムならその値を返す。</li>
</ul></div>
</div>
 <div id="outline-container-org436c52b" class="outline-3">
 <h3 id="org436c52b"> <a href="#org436c52b">quote</a></h3>
 <div class="outline-text-3" id="text-org436c52b">
 <p>
クオートをつけると評価せずそのまま返す。
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">quote</span> (1 2))
=> (1 2)

同じ意味:
'(1 2)

( <span class="org-keyword">setq</span> dog 5)
dog
=> 5    <span class="org-comment-delimiter">; </span> <span class="org-comment">評価結果</span>
'dog
=> dog  <span class="org-comment-delimiter">; </span> <span class="org-comment">シンボル自身を表現する</span>
</pre>
</div>

 <p>
(setq dog “dog”)
はシンボルdog(評価しない)に、“dog”を入れるということ。
</p>
</div>
</div>
 <div id="outline-container-org44e417d" class="outline-3">
 <h3 id="org44e417d"> <a href="#org44e417d">ポインタ</a></h3>
 <div class="outline-text-3" id="text-org44e417d">
 <p>
変数から変数への代入は、ポインタを複製するということ。
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">setq</span> x 'dog)
( <span class="org-keyword">setq</span> y 'dog)
(eq x y)
=> t
( <span class="org-keyword">setq</span> z y)
(eq y z)
=> t
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">setq</span> x  <span class="org-string">"dog"</span>)
( <span class="org-keyword">setq</span> y  <span class="org-string">"dog"</span>)
(eq x y)
=> nil  <span class="org-comment-delimiter">; </span> <span class="org-comment">同じ中身の文字列だが、指しているポインタが異なるため。</span>
( <span class="org-keyword">setq</span> z y)
(eq y z)
=> t    <span class="org-comment-delimiter">; </span> <span class="org-comment">指しているポインタが同じため</span>
</pre>
</div>

 <p>
変数はポインタを格納する箱。
</p>
</div>
</div>
</div>
 <div id="outline-container-org4dff693" class="outline-2">
 <h2 id="org4dff693"> <a href="#org4dff693">On Lisp</a></h2>
 <div class="outline-text-2" id="text-org4dff693">
 <p>
 <a href="http://www.asahi-net.or.jp/~kc7k-nd/onlispjhtml/preface.html">On Lisp — 前書き</a>
</p>
</div>
 <div id="outline-container-org686821d" class="outline-3">
 <h3 id="org686821d"> <a href="#org686821d">もう1つの関数定義</a></h3>
 <div class="outline-text-3" id="text-org686821d">
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">defun</span>  <span class="org-function-name">double</span> (x) (* x 2))
#'double  <span class="org-comment-delimiter">; </span> <span class="org-comment">関数オブジェクトを得る</span>

#'( <span class="org-keyword">lambda</span> (x) (* x 2))
</pre>
</div>

 <blockquote>
 <p>
名前が関数呼び出しの先頭かシャープクォートの次に来ると関数への参照と見
なされ， それ以外では変数名と見なされる．
</p>
</blockquote>
 <p>
なので(double double)とかも可能。変数と関数の名前空間が異なっている。
</p>

 <ul class="org-ul"> <li>関数は普通のデータオブジェクト。なので変数が値として関数を持てる。</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">setq</span> x #'append)
</pre>
</div>

 <p>
2つの式は大体同じことをしている。
</p>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">defun</span>  <span class="org-function-name">double</span> (x) (* x 2))

( <span class="org-keyword">setf</span> (symbol-function 'double)
      #'( <span class="org-keyword">lambda</span> (x) (* x 2)))
</pre>
</div>

 <p>
手続き定義…名前をコードと関連付ける。
</p>

 <blockquote>
 <p>
関数を作るのにdefunは必要ではなく， 関数は何かのシンボルの値と
して保存されなくてもいい．
defunの背後には， もっと一般的な仕組みが隠れている： 関数を作ることと，
それをある名前に関連づけることは別々の働きだ． Lispの関数の概念の一般性
全体までは必要ないとき， defunはもっと制限の強いプログラミング言語と同
じ位単純に関数定義を行う．
</p>
</blockquote>

 <p>
applyは、オブジェクトを関数として実行する。
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(+ 1 2)
(apply #'+ '(1 2))
(apply (symbol-function '+) '(1 2))
(apply #'( <span class="org-keyword">lambda</span> (x y) (+ x y)) '(1 2))
</pre>
</div>
</div>
</div>
 <div id="outline-container-org30dfa01" class="outline-3">
 <h3 id="org30dfa01"> <a href="#org30dfa01">クロージャ</a></h3>
 <div class="outline-text-3" id="text-org30dfa01">
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">defun</span>  <span class="org-function-name">make-adder</span> (n)
  #'( <span class="org-keyword">lambda</span> (x) (+ x n)))
</pre>
</div>

 <p>
は数を取り，「呼ばれると引数にその数を加えるクロージャ」を返す． その足
し算関数のインスタンスは幾らでも作ることができる。
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">> ( <span class="org-keyword">setq</span> add2 (make-adder 2)
        add10 (make-adder 10))
#<Interpreted-Function BF162E>
> (funcall add2 5)
7
> (funcall add10 3)
13
</pre>
</div>

 <p>
変数に引数をとった関数を入れる。すごいな。
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">defun</span>  <span class="org-function-name">make-dbms</span> (db)
  (list
   #'( <span class="org-keyword">lambda</span> (key)
       (cdr (assoc key db)))
   #'( <span class="org-keyword">lambda</span> (key val)
       ( <span class="org-keyword">push</span> (cons key val) db)
       key)
   #'( <span class="org-keyword">lambda</span> (key)
       ( <span class="org-keyword">setf</span> db (delete key db  <span class="org-builtin">:key</span> #'car))
       key)))
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgfd8d4c4" class="outline-3">
 <h3 id="orgfd8d4c4"> <a href="#orgfd8d4c4">末尾再帰</a></h3>
 <div class="outline-text-3" id="text-orgfd8d4c4">
 <p>
再帰関数とは自分自身を呼び出す関数だ． そして関数呼び出しの後に行うべき
作業が残っていなければ， その呼び出しは\emph{末尾再帰}だ． 次の関数は末
尾再帰でない。
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">defun</span>  <span class="org-function-name">our-length</span> (lst)
  ( <span class="org-keyword">if</span> (null lst)
      0
    (1+ (our-length (cdr lst)))))

</pre>
</div>

 <p>
再帰呼び出しから戻った後，結果を1+ に渡さなければいけないからだ． しか
し次の関数は末尾再帰だ。
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">defun</span>  <span class="org-function-name">our-find-if</span> (fn lst)
  ( <span class="org-keyword">if</span> (funcall fn (car lst))
      (car lst)
    (our-find-if fn (cdr lst))))
</pre>
</div>
</div>
</div>
 <div id="outline-container-org48657cf" class="outline-3">
 <h3 id="org48657cf"> <a href="#org48657cf">抽象化</a></h3>
 <div class="outline-text-3" id="text-org48657cf">
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">defun</span>  <span class="org-function-name">1st</span> (exp) (car exp))
( <span class="org-keyword">defun</span>  <span class="org-function-name">2nd</span> (exp) (car (cdr exp)))
( <span class="org-keyword">defun</span>  <span class="org-function-name">3rd</span> (exp) (car (cdr (cdr exp))))

( <span class="org-keyword">setq</span> order-func1 '((OP . 2nd) (ARG1 . 1st) (ARG2 . 3rd)))
( <span class="org-keyword">setq</span> order-func2 '((OP . 1st) (ARG1 . 2nd) (ARG2 . 3rd)))

( <span class="org-keyword">defun</span>  <span class="org-function-name">order-func</span> (sym odr-db)
  (cdr (assq sym odr-db)))

( <span class="org-keyword">defun</span>  <span class="org-function-name">op</span> (exp order-db)
  (funcall (order-func 'OP order-db) exp))
( <span class="org-keyword">defun</span>  <span class="org-function-name">arg1</span> (exp order-db)
  (funcall (order-func 'ARG1 order-db) exp))
( <span class="org-keyword">defun</span>  <span class="org-function-name">arg2</span> (exp order-db)
  (funcall (order-func 'ARG2 order-db) exp))

( <span class="org-keyword">setq</span> op-func1 '((+ . +) (- . -) (* . *)))
( <span class="org-keyword">setq</span> op-func2 '((add . +) (sub . -) (mul . *)))

( <span class="org-keyword">defun</span>  <span class="org-function-name">op-func</span> (sym op-db)
  (cdr (assq sym op-db)))

( <span class="org-keyword">defun</span>  <span class="org-function-name">calc</span> (exp op-db odr-db)
  ( <span class="org-keyword">cond</span>
   ((atom exp) exp)
   (t (funcall
       (op-func (op exp odr-db) op-db)
       (calc (arg1 exp odr-db) op-db odr-db)
       (calc (arg2 exp odr-db) op-db odr-db)))))

(calc '(1 + (2 * 3)) op-func1 order-func1)
(calc '(add 1 (mul 2 3)) op-func2 order-func2)
</pre>
</div>
</div>
</div>
 <div id="outline-container-org41076f8" class="outline-3">
 <h3 id="org41076f8"> <a href="#org41076f8">関数</a></h3>
 <div class="outline-text-3" id="text-org41076f8">
 <p>
 <a href="http://www.asahi-net.or.jp/~kc7k-nd/onlispjhtml/functions.html">On Lisp — 関数</a>
</p>

 <blockquote>
 <p>
関数的プログラミングとは，副作用ではなく， 値を返すことで動作するプログ
ラムを書くことだ．
</p>

 <p>
副作用とはオブジェクトの破壊的な変更（rplacaの使用等）
や変数への代入（setqの使用等）を含む．
</p>

 <p>
reverse等のオペレータは，副作用でなく返
り値のために呼ばれるよう意図されている
</p>
</blockquote>

 <p>
setqを使うときはたいてい副作用だ。
lispのほとんどの関数は副作用のために呼ばれることを意図されていない。
だから副作用がほしいときはsetqを使う。
</p>

 <blockquote>
 <p>
この習慣を育てるには時間がかかるかもしれない． 一つの方法は，以下のオペ
レータは税金がかかっているつもりで扱うことだ：
</p>

 <p>
set setq setf psetf psetq incf decf push pop pushnew
rplaca rplacd rotatef shiftf remf remprop remhash
</p>

 <p>
あとlet*もそうだ． この中に命令的プログラムが潜んでいることがしばしばあ
る． これらのオペレータに税金がかかっているつもりになるのは， よいLisp
のプログラミング・スタイルへ向かう手助けとして勧めただけで， それがよい
スタイルの基準なのではない． しかし，それだけでもずいぶん進歩できるだろ
う．
</p>
</blockquote>

 <p>
上は危険。
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">> (multiple-value-bind (int frac) (truncate 26.21875)
    (list int frac))
(26 0.21875)
</pre>
</div>

 <p>
多値。
</p>

 <p>
関数的プログラムは，それが欲しがるものを求める。
命令的プログラムは，何をすべきかの指示を求める。
</p>

 <p>
関数的プログラムの 「aと，  <code>x</code> の第1要素の2乗から成るリスト
を返せ．」
</p>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">defun</span>  <span class="org-function-name">fun</span> (x)
  (list 'a (expt (car x) 2)))
</pre>
</div>

 <p>
命令的プログラミングではこうだ． 「xの第1要素を求め，それを2乗せよ． そ
してaと，先程2乗した値から成るリストを返せ．」
</p>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">defun</span>  <span class="org-function-name">imp</span> (x)
  ( <span class="org-keyword">let</span> (y sqr)
    ( <span class="org-keyword">setq</span> y (car x))
    ( <span class="org-keyword">setq</span> sqr (expt y 2))
    (list 'a sqr)))
</pre>
</div>

 <blockquote>
 <p>
その方法は，命令的プログラムは関数的プログラムを裏返しにしたものと思う
ことだ． 関数的プログラムが命令的プログラムの中に隠れているのを見つける
には， ただ裏返しにすればいい． この方法をimpで試してみよう．
</p>

 <p>
だからルールはこうあるべきだ： 任意の関数呼び出しが， 自分だけが支配す
るオブジェクトを安全に書き換えられるようにする．
</p>

 <p>
何が引数と返り値を支配するのだろう？関数呼び出しは返り値として受け取る
オブジェクトを支配するが， 引数として渡されるオブジェクトは支配しない，
というのがLispの慣習のようだ． 引数に変更を加える関数は「破壊的」との呼
び名で区別されるが， 返ってくるオブジェクトに変更を加える関数には特に呼
び名がない．
</p>
</blockquote>
</div>
</div>
 <div id="outline-container-orgc0eb73a" class="outline-3">
 <h3 id="orgc0eb73a"> <a href="#orgc0eb73a">ユーティリティ関数</a></h3>
 <div class="outline-text-3" id="text-orgc0eb73a">
 <p>
 <a href="http://www.asahi-net.or.jp/~kc7k-nd/onlispjhtml/utilityFunctions.html">On Lisp — ユーティリティ関数</a>
</p>

 <blockquote>
 <p>
Common Lispのオペレータは3種類に分かれる： 関数にマクロ（ユーザが作れる
もの）と，特殊オペレータ（ユーザには作れない）だ． この章では，Lispを新
しい関数で拡張するテクニックを説明する． しかしここで言う「テクニック」
は普通の意味のものではない． そういった関数について知るべき重要な点は，
それらをどうやって書くかということではなく，それらがどこから来たのかと
いうことだ． Lispの拡張には，他の関数を書くときと大体同じテクニックが使
われることになる． そういった拡張を書くとき難しいのは， どうやって書く
かを決めることではなく，何を書くかを決めることだ．
</p>
</blockquote>

 <p>
ユーティリティ関数について。
最初は本屋を検索する関数をこう書いた。
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">defun</span>  <span class="org-function-name">find-books</span> (towns)
  ( <span class="org-keyword">if</span> (null towns)
      nil
    ( <span class="org-keyword">let</span> ((shops (bookshops (car towns))))
      ( <span class="org-keyword">if</span> shops
          (values (car towns) shops)
        (find-books (cdr towns))))))
</pre>
</div>

 <p>
本当に欲しいのは(val ues (car towns) shops)だ。
これは一般化できる。
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">defun</span>  <span class="org-function-name">find2</span> (fn lst)
  ( <span class="org-keyword">if</span> (null lst)
      nil
    ( <span class="org-keyword">let</span> ((val (funcall fn (car lst))))
      ( <span class="org-keyword">if</span> val
          (values (car lst) val)
        (find2 fn (cdr lst))))))
</pre>
</div>

 <p>
(find2 #’bookshops towns)
だけで達成できるようになった。引数で関数を渡すようになった。
</p>

 <blockquote>
 <p>
Lispプログラミング独特の特徴の一つは，引数としての関数の重要性だ． これ
はLispがボトムアップ・プログラミングに適している理由の一部だ． 関数の骨
格を抽象化するのは，引数に関数を使うことで肉付けができるときには比較的
簡単だ．
</p>
</blockquote>

 <p>
なるほど。
</p>

 <blockquote>
 <p>
Lispでは関数全体を引数として渡せるので，この考えをさらに深めることがで
きる． 前述の例の両方で，特定の関数から始めて，関数を引数に取る一般的な
関数に進んだ． 1番目の例ではすでに定義されていたmapcanを使い， 2番目の例
では新しいユーティリティfind2を書いたが， 全体的な原則は同じだ： 一般部
分と個別部分を混ぜ合わせるのでなく， 一般部分を定義して個別部分を引数と
して渡すこと．
</p>
</blockquote>

 <p>
filterは関数と1個のリストを取り， その関数がリスト適用されたときに非
nil値が返されるような要素全てをリストにして返す。
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">> (filter #'( <span class="org-keyword">lambda</span> (x) ( <span class="org-keyword">if</span> (numberp x) (1+ x)))
          '(a 1 2 b 3 c d 4))
(2 3 4 5)
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">defun</span>  <span class="org-function-name">longer</span> (x y)
  (labels ((compare (x y)
                    ( <span class="org-keyword">and</span> (consp x)
                         ( <span class="org-keyword">or</span> (null y)
                             (compare (cdr x) (cdr y))))))
    ( <span class="org-keyword">if</span> ( <span class="org-keyword">and</span> (listp x) (listp y))
        (compare x y)
      (> (length x) (length y)))))

( <span class="org-keyword">defun</span>  <span class="org-function-name">filter</span> (fn lst)
  ( <span class="org-keyword">let</span> ((acc nil))
    ( <span class="org-keyword">dolist</span> (x lst)
      ( <span class="org-keyword">let</span> ((val (funcall fn x)))
        ( <span class="org-keyword">if</span> val ( <span class="org-keyword">push</span> val acc))))
    (nreverse acc)))

( <span class="org-keyword">defun</span>  <span class="org-function-name">group</span> (source n)
  ( <span class="org-keyword">if</span> (zerop n) ( <span class="org-warning">error</span>  <span class="org-string">"zero length"</span>))
  (labels ((rec (source acc)
                ( <span class="org-keyword">let</span> ((rest (nthcdr n source)))
                  ( <span class="org-keyword">if</span> (consp rest)
                      (rec rest (cons (subseq source 0 n) acc))
                    (nreverse (cons source acc))))))
    ( <span class="org-keyword">if</span> source (rec source nil) nil)))
</pre>
</div>

 <p>
さまざまな検索ユーティリティ。
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">> (split-if #'( <span class="org-keyword">lambda</span> (x) (> x 4))
            '(1 2 3 4 5 6 7 8 9 10))
(1 2 3 4)
(5 6 7 8 9 10)
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">defun</span>  <span class="org-function-name">mapa-b</span> (fn a b  <span class="org-type">&optional</span> (step 1)
                  (map-> fn
                         a
                         #'( <span class="org-keyword">lambda</span> (x) (> x b))
                         #'( <span class="org-keyword">lambda</span> (x) (+ x step)))
</pre>
</div>

 <p>
うーむ。急にむずかしくなってよくわからないぞ。
対応付け関数というのは役立ちそうだが。
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">defun</span>  <span class="org-function-name">map-></span> (fn start test-fn succ-fn)
  (do ((i start (funcall succ-fn i))
       (result nil))
      ((funcall test-fn i) (nreverse result))
    ( <span class="org-keyword">push</span> (funcall fn i) result)))
</pre>
</div>
</div>
</div>
 <div id="outline-container-org69ba379" class="outline-3">
 <h3 id="org69ba379"> <a href="#org69ba379">シンボルとストリング</a></h3>
 <div class="outline-text-3" id="text-org69ba379">
 <p>
新しく作るユーティリティについて。
</p>
 <blockquote>
 <p>
それらの新オペレータは，どれも（議論の余地はあるが）プログラムを読み辛
くしてしまう． プログラムを読み取れるようになる前に，それらのユーティリ
ティを全て理解しなければいけない． こういった言明がなぜ誤解されるのかに
ついては， popページで説明した例（一番近い書店を探した例）のことを考え
てみて欲しい． そのプログラムをfind2を使って書けば， 「プログラムを読み
取れるようになる前に， この新ユーティリティの定義を理解しなければいけな
いじゃないか．」 と不満を言う人が出てくる． それでは，find2を使わなかっ
たとしてみよう． するとfind2の定義は理解しなくてもいいが， find-booksの
定義を理解しなければいけない． その中ではfind2の仕事が「書店を見つける」
という個別の課題と混ざっている． find2を理解するのはせいぜいfind-books
と同じくらい難しいだけだ． また，ここでは新ユーティリティは1回しか使っ
ていない． ユーティリティは繰り返し使うよう意図されたものだ． 実際のプ
ログラムでは，find2を理解しなければいけないか， または3, 4個の特定目的
の検索ルーチンを理解しなければいけないかの，どちらかの選択だろう． 前者
の方が確実に簡単だ．
</p>
</blockquote>

 <p>
なるほど。十分に抽象的であればほかでも使えるし、理解として蓄積してほかのプログラムを読み書きするときに利用できる。
</p>
</div>
</div>
 <div id="outline-container-orgbf64f88" class="outline-3">
 <h3 id="orgbf64f88"> <a href="#orgbf64f88">返り値としての関数</a></h3>
 <div class="outline-text-3" id="text-orgbf64f88">
 <p>
 <a href="http://www.asahi-net.or.jp/~kc7k-nd/onlispjhtml/returningFunctions.html">On Lisp — 返り値としての関数</a>
</p>

 <blockquote>
 <p>
前章では，関数を引数として渡せることが抽象化への可能性をどれ程大きくす
るかを見た． 関数に対して行える操作が豊かな程，その可能性を深く利用でき
る． 新しい関数を生成して返す関数を定義することで， 関数を引数に取るユー
ティリティの効果を増幅できる．
</p>
</blockquote>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">defun</span>  <span class="org-function-name">joiner</span> (obj)
  (typecase obj
    (cons #'append)
    (number #'+)))
</pre>
</div>

 <blockquote>
 <p>
これはオブジェクトを引数に取り， その型に応じてそれらのオブジェクトを加
え合わせる関数を返す． これは数やリストに対して働く多態的な
(polymorphic)連結関数の定義に使える：
</p>
</blockquote>
 <p>
なるほど。
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">defun</span>  <span class="org-function-name">complement</span> (fn)
  #'( <span class="org-keyword">lambda</span> ( <span class="org-type">&rest</span> args) (not (apply fn args))))
> (remove-if (complement #'oddp) '(1 2 3 4 5 6))
(1 3 5)
</pre>
</div>

 <blockquote>
 <p>
関数を引数として渡せることは抽象化のための強力な道具だ． 関数を返す関数
が書けることで，それを最大限に利用できるようになる． 残りの節では関数を
返すユーティリティの例を幾つか挙げる．
</p>
</blockquote>

 <p>
文言のところどころを読んだ覚えがあるのだが、コードは全然覚えてない…。
</p>
</div>
</div>
</div>
 <div id="outline-container-orge4cf3a1" class="outline-2">
 <h2 id="orge4cf3a1"> <a href="#orge4cf3a1">関数メモ</a></h2>
 <div class="outline-text-2" id="text-orge4cf3a1">
</div>
 <div id="outline-container-orgb7c7792" class="outline-3">
 <h3 id="orgb7c7792"> <a href="#orgb7c7792">–map</a></h3>
 <div class="outline-text-3" id="text-orgb7c7792">
 <p>
 <code>map(FORM LIST)</code> はフォームとリストを引数にとり、リストにフォームを適用していく関数。
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">--map</span> (* 10 it) '(1 2 3 4 5))
</pre>
</div>

 <div class="results" id="org2a1ed95">
 <p>
(10 20 30 40 50)
</p>

</div>
</div>
</div>
 <div id="outline-container-orge37511b" class="outline-3">
 <h3 id="orge37511b"> <a href="#orge37511b">seq-some</a></h3>
 <div class="outline-text-3" id="text-orge37511b">
 <p>
 <code>seq-some (pred sequence)</code> は述語関数とリストを引数にとり、述語をリストに適用して1つでも条件を満たせば  <code>t</code> を返す関数。
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(seq-some 'oddp '(1 2 3 4))
</pre>
</div>

 <div class="results" id="orge54c6bd">
 <p>
t
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(seq-some 'oddp '(2 4))
</pre>
</div>

 <div class="results" id="orgaceb667">
 <p>
nil
</p>

</div>
</div>
</div>
 <div id="outline-container-org9d45fb6" class="outline-3">
 <h3 id="org9d45fb6"> <a href="#org9d45fb6">macroexp-progn</a></h3>
 <div class="outline-text-3" id="text-org9d45fb6">
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(macroexp-progn '(1
                  2
                  3
                  (* 2 2)))
</pre>
</div>

 <div class="results" id="org9972446">
 <p>
(progn 1 2 3 (* 2 2))
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(eval (macroexp-progn '(1
                        2
                        3
                        (* 2 2))))
</pre>
</div>

 <div class="results" id="org5867361">
 <p>
4
</p>

</div>
</div>
</div>
 <div id="outline-container-org08a58c3" class="outline-3">
 <h3 id="org08a58c3"> <a href="#org08a58c3">–some(form list)</a></h3>
 <div class="outline-text-3" id="text-org08a58c3">
 <p>
dashライブラリに含まれる関数。
</p>

 <p>
LIST内に条件を1つでも満たすものがあればFORMを返す。
LIST要素はitにバインドされる。マクロすごいな。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 8: </span>リスト1つ1つがitにバインドされる</label> <pre class="src src-emacs-lisp">( <span class="org-keyword">--some</span> (evenp it) '(2 4))   <span class="org-comment-delimiter">;; </span> <span class="org-comment">=> t</span>
( <span class="org-keyword">--some</span> (evenp it) '(1 3))  <span class="org-comment-delimiter">;; </span> <span class="org-comment">=> nil</span>
( <span class="org-keyword">--some</span> (evenp it) '(1 3 2))  <span class="org-comment-delimiter">;; </span> <span class="org-comment">=> t</span>
</pre>
</div>

 <div class="results" id="orgd023900">
 <p>
t
</p>

</div>

 <p>
定義を見ても、どうやってitにバインドしてるのかわからない。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 9: </span>itは出てない</label> <pre class="src src-emacs-lisp">( <span class="org-keyword">defmacro</span>  <span class="org-function-name">--some</span> (form list)
   <span class="org-doc">"Return non-nil if FORM evals to non-nil for at least one item in LIST.</span>
 <span class="org-doc">If so, return the first such result of FORM.</span>
 <span class="org-doc">Each element of LIST in turn is bound to `</span> <span class="org-doc"> <span class="org-constant">it</span></span> <span class="org-doc">' and its index</span>
 <span class="org-doc">within LIST to `</span> <span class="org-doc"> <span class="org-constant">it-index</span></span> <span class="org-doc">' before evaluating FORM.</span>
 <span class="org-doc">This is the anaphoric counterpart to `</span> <span class="org-doc"> <span class="org-constant">-some</span></span> <span class="org-doc">'."</span>
  ( <span class="org-keyword">declare</span> (debug (form form)))
  ( <span class="org-keyword">let</span> ((n (make-symbol  <span class="org-string">"needle"</span>)))
    `( <span class="org-keyword">let</span> (,n)
       ( <span class="org-keyword">--each-while</span> ,list (not ( <span class="org-keyword">setq</span> ,n ,form)))
       ,n)))
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgb0379a2" class="outline-3">
 <h3 id="orgb0379a2"> <a href="#orgb0379a2">apply-partially</a></h3>
 <div class="outline-text-3" id="text-orgb0379a2">
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(apropos  <span class="org-string">"apply-partially"</span>)
</pre>
</div>

 <p>
どうやって使うのかわからない。
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">defun</span>  <span class="org-function-name">my-apply-partially</span> (fun  <span class="org-type">&rest</span> args)
  ( <span class="org-keyword">lambda</span> ( <span class="org-type">&rest</span> args2)
    (apply fun (append args args2))))
</pre>
</div>

 <div class="results" id="org9d66179">
 <p>
my-apply-partially
</p>

</div>

 <p>
/lisp/subr.el にはいろいろ見慣れた関数があるな。
</p>
</div>
</div>
 <div id="outline-container-orgc97fdac" class="outline-3">
 <h3 id="orgc97fdac"> <a href="#orgc97fdac">buffer-read-only</a></h3>
 <div class="outline-text-3" id="text-orgc97fdac">
 <p>
バッファが読み込み専用なら  <code>t</code> を返す。
</p>
</div>
</div>
 <div id="outline-container-org0b7e11a" class="outline-3">
 <h3 id="org0b7e11a"> <a href="#org0b7e11a">called-interactively-p</a></h3>
 <div class="outline-text-3" id="text-org0b7e11a">
 <p>
直に実行してほしくないことがある。privateメソッドのように。
 <a href="20210922005248-magit.html#ID-5ba43a42-93cb-48fa-8578-0558c757493f">magit</a>のコードから取ってきた。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 10: </span>called-interactively-pを使う</label> <pre class="src src-emacs-lisp">(magit-blame-mode
 ( <span class="org-keyword">when</span> (called-interactively-p 'any)
   ( <span class="org-keyword">setq</span> magit-blame-mode nil)
   ( <span class="org-warning">user-error</span>
    (concat  <span class="org-string">"Don't call `</span> <span class="org-string"> <span class="org-constant">magit-blame-mode</span></span> <span class="org-string">' directly; "</span>
             <span class="org-string">"instead use `</span> <span class="org-string"> <span class="org-constant">magit-blame</span></span> <span class="org-string">'"</span>))))
</pre>
</div>
</div>
</div>
 <div id="outline-container-org5cd6730" class="outline-3">
 <h3 id="org5cd6730"> <a href="#org5cd6730">cl-block</a></h3>
</div>
 <div id="outline-container-orgff13c7b" class="outline-3">
 <h3 id="orgff13c7b"> <a href="#orgff13c7b">declare</a></h3>
 <div class="outline-text-3" id="text-orgff13c7b">
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(apropos  <span class="org-string">"declare"</span>)
</pre>
</div>

 <p>
謎。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 11: </span>よく見かける書き方</label> <pre class="src src-emacs-lisp">( <span class="org-keyword">declare</span> (indent 2))
</pre>
</div>

 <div class="results" id="org276848a">
 <p>
nil
</p>

</div>
</div>
</div>
 <div id="outline-container-orgac847fe" class="outline-3">
 <h3 id="orgac847fe"> <a href="#orgac847fe">dolist</a></h3>
 <div class="outline-text-3" id="text-orgac847fe">
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 12: </span>numはリストを構成する要素の名前。(dolist (var list) body)</label> <pre class="src src-emacs-lisp">( <span class="org-keyword">let</span> ((nums '(1 2 3 4 5))
      (sum 0))
      ( <span class="org-keyword">dolist</span> (num nums)
            ( <span class="org-keyword">setq</span> sum (+ sum num)))
      sum)
</pre>
</div>

 <div class="results" id="org04df40d">
 <p>
15
</p>

</div>
</div>
</div>
 <div id="outline-container-org45427b3" class="outline-3">
 <h3 id="org45427b3"> <a href="#org45427b3">format-spec</a></h3>
 <div class="outline-text-3" id="text-org45427b3">
 <p>
フォーマット文字列を入れ込みたいときに使う。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 13: </span>定数としてフォーマット文字列を決めておいて、あとから埋め込む</label> <pre class="src src-emacs-lisp">( <span class="org-keyword">setq</span> my-format  <span class="org-string">"%h:%m"</span>)
( <span class="org-keyword">defun</span>  <span class="org-function-name">my-format-time</span> (hour minute)
  (format-spec my-format
               `((?h . ,hour)
                 (?m . ,minute))))

(my-format-time 12 59)
</pre>
</div>

 <div class="results" id="org6073032">
 <p>
12:59
</p>

</div>
</div>
</div>
 <div id="outline-container-org408827b" class="outline-3">
 <h3 id="org408827b"> <a href="#org408827b">line-number-at-pos</a></h3>
 <div class="outline-text-3" id="text-org408827b">
 <p>
行数を求める関数。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 14: </span>何も引数を渡さないと現在のカーソル位置の行数</label> <pre class="src src-emacs-lisp">(line-number-at-pos)
</pre>
</div>

 <div class="results" id="org8334dbb">
 <p>
1204
</p>

</div>
</div>
</div>
 <div id="outline-container-orgcfc2c1f" class="outline-3">
 <h3 id="orgcfc2c1f"> <a href="#orgcfc2c1f">looking-at</a></h3>
 <div class="outline-text-3" id="text-orgcfc2c1f">
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 15: </span>現在のカーソル位置からあとにマッチするものがあればt</label> <pre class="src src-emacs-lisp">(looking-at  <span class="org-string">"."</span>)
</pre>
</div>

 <div class="results" id="org467b134">
 <p>
t
</p>

</div>
</div>
</div>
 <div id="outline-container-orgf25fe2c" class="outline-3">
 <h3 id="orgf25fe2c"> <a href="#orgf25fe2c">open-line</a></h3>
 <div class="outline-text-3" id="text-orgf25fe2c">
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(apropos  <span class="org-string">"open-line"</span>)
</pre>
</div>

 <p>
open-lineは改行するコマンド。カーソルは移動しない。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 16: </span>一行改行する</label> <pre class="src src-emacs-lisp">(open-line 1)
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgc1ff43f" class="outline-3">
 <h3 id="orgc1ff43f"> <a href="#orgc1ff43f">push</a></h3>
 <div class="outline-text-3" id="text-orgc1ff43f">
 <p>
(push NEWELT PLACE)
リストを先頭にくっつける関数。
だが、PLACEはsymbolである必要がある。直にリストを入れることはできない。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 17: </span>リストを作成する</label> <pre class="src src-emacs-lisp">( <span class="org-keyword">let</span> ((l '(a b c)))
  ( <span class="org-keyword">push</span> 'new l))
</pre>
</div>

 <div class="results" id="org065f3eb">
 <p>
(new a b c)
</p>

</div>
</div>
</div>
 <div id="outline-container-org0b5ee6d" class="outline-3">
 <h3 id="org0b5ee6d"> <a href="#org0b5ee6d">repeat</a></h3>
 <div class="outline-text-3" id="text-org0b5ee6d">
 <p>
最後に実行したコマンドを繰り返す。
</p>
</div>
</div>
 <div id="outline-container-orgba5cad3" class="outline-3">
 <h3 id="orgba5cad3"> <a href="#orgba5cad3">user-error</a></h3>
 <div class="outline-text-3" id="text-orgba5cad3">
 <p>
エラーを出力する。
</p>
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 18: </span>処理を止め、メッセージを出す</label> <pre class="src src-emacs-lisp">( <span class="org-warning">user-error</span>  <span class="org-string">"this is error!"</span>)
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgf099aca" class="outline-3">
 <h3 id="orgf099aca"> <a href="#orgf099aca">with-demoted-errors</a></h3>
 <div class="outline-text-3" id="text-orgf099aca">
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(apropos  <span class="org-string">"with-demoted-errors"</span>)
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">with-demoted-errors</span>  <span class="org-string">"これはエラー %S"</span> (/ 1 0))
</pre>
</div>
 <div class="results" id="orgdc5619a">
 <p>
nil
</p>

</div>
</div>
</div>
</div>
 <div id="outline-container-org19fc974" class="outline-2">
 <h2 id="org19fc974"> <a href="#org19fc974">Tasks</a></h2>
 <div class="outline-text-2" id="text-org19fc974">
</div>
 <div id="outline-container-org4965361" class="outline-3">
 <h3 id="org4965361"> <a href="#org4965361"> <span class="todo TODO">TODO</span> </a> <a href="https://qiita.com/kawabata@github/items/9a1a1e211c57a56578d8">Emacs Lispの汎変数 - Qiita</a></h3>
 <div class="outline-text-3" id="text-org4965361">
 <p>
汎変数の解説。
</p>
</div>
</div>
 <div id="outline-container-orgc4eaf25" class="outline-3">
 <h3 id="orgc4eaf25"> <a href="#orgc4eaf25"> <span class="todo TODO">TODO</span> 末尾再帰を調べる</a></h3>
 <div class="outline-text-3" id="text-orgc4eaf25">
 <p>
Schemeでは実装仕様で末尾再帰を要求してくるとのこと。
</p>
 <ul class="org-ul"> <li> <a href="http://emacs.rubikitch.com/tco/">tco.el : 【関数型歓喜】えっ、Emacs Lispで末尾再帰の最適化ができる…だと!？</a></li>
</ul></div>
</div>
</div>
 <div id="outline-container-org82fa45d" class="outline-2">
 <h2 id="org82fa45d"> <a href="#org82fa45d">Backlinks</a></h2>
 <div class="outline-text-2" id="text-org82fa45d">
 <ul class="org-ul"> <li> <a href="./20210508234743-emacs.html">Emacs</a></li>
 <li> <a href="./20210512001700-create_link.html">create-link</a></li>
 <li> <a href="./20210615222732-project.html">project</a></li>
 <li> <a href="./20210911183844-lisp.html">LISP</a></li>
 <li> <a href="./20240301T205049--kdoc-115-負の値が関わる剰余挙動の違い__wiki.html">KDOC 115: 負の値が関わる剰余挙動の違い</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20210509122633-emacs_lisp.html"/>
  <id>https://kijimad.github.io/roam/20210509122633-emacs_lisp.html</id>
  <updated>2025-06-14T00:00:00+09:00</updated>
</entry>
<entry>
  <title>TextLint</title>
  <author><name>root</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org41df6f7" class="outline-2">
 <h2 id="org41df6f7"> <a href="#org41df6f7">概要</a></h2>
 <div class="outline-text-2" id="text-org41df6f7">
 <p>
textlintは自然言語用の <a href="20211107104950-linter.html#ID-e5663529-8095-4fc8-8fb5-500dd4471a73">lint</a>の1つ。 <a href="20210509100112-javascript.html#ID-a6980e15-ecee-466e-9ea7-2c0210243c0d">JavaScript</a>で書かれている。
 <a href="https://github.com/textlint/textlint">https://github.com/textlint/textlint</a>
</p>

 <p>
文章を読みやすくするためのルールが充実している。たとえば一文が〜文字以上だとエラーが出るとか、主語の「が」が連続してはいけないとか、「、」はいくつまでにしないといけないとか。表記ゆれ検知の設定もできる。プロジェクトでドキュメントの質を保たせることはもちろん、個人の文章の練習にも使える。プログラミング言語でそうなっていくように、見やすい文章がエラーなしで書けるようになってくる。最初はイライラさせられるが。
</p>
</div>
</div>
 <div id="outline-container-org1c44870" class="outline-2">
 <h2 id="org1c44870"> <a href="#org1c44870">Memo</a></h2>
 <div class="outline-text-2" id="text-org1c44870">
</div>
 <div id="outline-container-orgd008945" class="outline-3">
 <h3 id="orgd008945"> <a href="#orgd008945">しくみ: AST変換</a></h3>
 <div class="outline-text-3" id="text-orgd008945">
 <p>
 <a href="https://azu.github.io/JavaScript-Plugin-Architecture/JavaScript-Plugin-Architecture.pdf">https://azu.github.io/JavaScript-Plugin-Architecture/JavaScript-Plugin-Architecture.pdf</a>
</p>
 <ul class="org-ul"> <li>lintは直に文字列を比較しているわけではない。ASTを比較してる。確かに文字列比較している箇所はなかった。</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">const ast = parse(code) <span class="org-comment-delimiter">;</span>
</pre>
</div>
 <p>
の部分だ。ルールではなく、ASTのparseをorgに対応させる。それくらいすでにありそうだけどな。
</p>

 <blockquote>
 <p>
ルールの実装の方を見てみると、直接オブジェクトをexportしないで、
contextとしてRuleContextのインスタンスを受け取っていることが分かると思
います。
</p>
</blockquote>

 <div class="org-src-container">
 <pre class="src src-js">module.exports = {
    meta: {  <span class="org-comment-delimiter">/* </span> <span class="org-comment">ルールのメタ情報</span> <span class="org-comment-delimiter"> */</span> },
     <span class="org-function-name">create</span>:  <span class="org-keyword">function</span> ( <span class="org-variable-name">context</span>) {
         <span class="org-keyword">return</span> {
             <span class="org-string">"MemberExpression"</span>:  <span class="org-keyword">function</span> ( <span class="org-variable-name">node</span>) {
                 <span class="org-keyword">if</span> (node.object.name ===  <span class="org-string">"console"</span>) {
                    context.report({
                        node,
                        message:  <span class="org-string">"Unexpected console statement."</span>
                    });
                }
            }
        };
    }
};
</pre>
</div>

 <blockquote>
 <p>
このようにして、ルールは context という与えられたものだけを使うので、ルー
ルがMyLinter本体の実装の詳細を知らなくても良くなります。
</p>
</blockquote>

 <blockquote>
 <p>
このプラグインアーキテクチャはPub/Subパターンを上手く使い、 ESLintのよ
うに与えられたコードを読み取ってチェックするような使い方に向いています。
</p>
</blockquote>

 <ul class="org-ul"> <li>read向け。writeは競合変更などに対応しにくい。</li>
 <li>走査が1回なので性能がよい</li>
</ul></div>
</div>
 <div id="outline-container-org0e47370" class="outline-3">
 <h3 id="org0e47370"> <a href="#org0e47370">plugin-org</a></h3>
 <div class="outline-text-3" id="text-org0e47370">
 <p>
作成した。
単にテキストからのAST変換…構文解析してオブジェクトに変換する…の部分ができればすべてうまくいくはずだ。
</p>

 <p>
ああ、すでにある、思ってcloneして動かしてみる…動かない…4年前のWIPだった。
1コミットだけのをフォークしてしまった。
実行・テスト何もできない状態。importすらできず、地獄。
それでも1からやるよりはマシだった可能性はある…ほぼサンプルのコピペはされてたので。
</p>

 <p>
type: “module”にすればよいとの意見多数だったが、依存パッケージが壊れるのでできなかった。
コンパイルすることに。babel。バージョンの違いで苦しみ、なんとかすべて最新の状態に(自分のグローバルインストールのnodeなんかも超古かった)。
</p>

 <p>
そして…とりあえず単体で動くように。本体のtext-lintの中では動かないが、とりあえずプラグイン認識はしてくれてる。
どこが悪いのか判別つかないのでとりあえず単体テストをやる。
テストもめちゃくちゃで、とりあえず全部消してコンパイル設定とかやって一応動きはするように。
</p>

 <p>
無テストでCIだけ立ち上げる。今までの困難とは裏腹に成功。
パッケージ管理メンドいけど、こういうところがメリットだとわかる。
</p>
</div>
</div>
 <div id="outline-container-orgd55becb" class="outline-3">
 <h3 id="orgd55becb"> <a href="#orgd55becb">htmlのASTとの比較</a></h3>
 <div class="outline-text-3" id="text-orgd55becb">
 <p>
html-to-astとorgaの出力の比較。
けっこう違うな。
</p>

 <div class="org-src-container">
 <pre class="src src-json">{
    type: 'Document',
    children: [
        {
            type: 'Html',
            tagName: 'h2',
            properties: {},
            children: [Array],
            loc: [Object],
            range: [Array],
            raw: '<h2>hello</h2>'
        },
        type: 'UNKNOWN'
    ],
    loc: { start: { line: 1, column: 0 }, end: { line: 1, column: 14 } },
    range: [ 0, 14 ],
    raw: '<h2>hello</h2>'
}
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-json">s<ref *1> {
  type: 'document',
  properties: {},
  children: [
    {
      type: 'paragraph',
      children: [Array],
      attributes: {},
      position: [Object],
      parent: [Circular *1]
    }
  ],
  position: { start: { line: 1, column: 1 }, end: { line: 1, column: 13 } }
}
</pre>
</div>
</div>
</div>
 <div id="outline-container-org9911d79" class="outline-3">
 <h3 id="org9911d79"> <a href="#org9911d79">Converting circular structure to JSON</a></h3>
 <div class="outline-text-3" id="text-org9911d79">
 <p>
循環参照が含まれているのがだめらしい。
↑でいうとparent: [Circular *1]のところか。
</p>

 <p>
Note how [Circular ~] shows the path to the referenced object.
なるほど。
</p>
</div>
</div>
 <div id="outline-container-orgcfe2b44" class="outline-3">
 <h3 id="orgcfe2b44"> <a href="#orgcfe2b44">power-assertの出力がかっこいい</a></h3>
 <div class="outline-text-3" id="text-orgcfe2b44">
 <p>
テストの出力がかっこいい。わかりやすいし。
power-assert
 <a href="https://github.com/power-assert-js/power-assert">https://github.com/power-assert-js/power-assert</a>
</p>

 <div class="org-src-container">
 <pre class="src src-nil">1) Array #indexOf() should return index when the value is present:
   AssertionError: # path/to/test/mocha_node.js:10

assert(ary.indexOf(zero) === two)
       |   |       |     |   |
       |   |       |     |   2
       |   -1      0     false
       [1,2,3]

[number] two
=> 2
[number] ary.indexOf(zero)
=> -1
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-nil">OrgProcessor-test
  #parse
    ✓ should return AST
    ✓ begin_src should CodeBlock
    ✓ text should Paragraph
    ✓ begin_comment should block
    ✓ ~~ should text.code
  OrgPlugin
    when target file is a Org
      ✓ should report lint error
      ✓ should not comma check inside the code block.
</pre>
</div>
</div>
</div>
 <div id="outline-container-org62fdaaa" class="outline-3">
 <h3 id="org62fdaaa"> <a href="#org62fdaaa">マッピング</a></h3>
 <div class="outline-text-3" id="text-org62fdaaa">
 <p>
 <code>* header</code>
はorgaだと(section) => (star) + (headline) みたいになる。
だから1階層下ってheadlineにマッピングしてやる必要がある。
</p>
</div>
</div>
</div>
 <div id="outline-container-org1c528d8" class="outline-2">
 <h2 id="org1c528d8"> <a href="#org1c528d8">textlint-plugin-org</a></h2>
 <div class="outline-text-2" id="text-org1c528d8">
 <p>
 <a href="20210508234743-emacs.html#ID-1ad8c3d5-97ba-4905-be11-e6f2626127ad">Emacs </a>org-modeに対応してなかったので対応させた。
 <a href="https://github.com/kijimaD/textlint-plugin-org">https://github.com/kijimaD/textlint-plugin-org</a>
</p>
</div>
 <div id="outline-container-org4ed1afe" class="outline-3">
 <h3 id="org4ed1afe"> <a href="#org4ed1afe"> <span class="todo TODO">TODO</span>  <code>?</code> を誤検出してしまう問題</a></h3>
 <div class="outline-text-3" id="text-org4ed1afe">
 <p>
リンクの  <code>?</code> にtextlintが反応してしまう。
mdでは反応しないのでtext-lint-orgに原因がある。
orgaが対応してない模様。コードに生URLのテストはなかった。そもそもorg的にはそういう文法の可能性。
だるいのでルールをオフにするか、PR送るかだな。
</p>
</div>
</div>
 <div id="outline-container-orgb29bc62" class="outline-3">
 <h3 id="orgb29bc62"> <a href="#orgb29bc62"> <span class="todo TODO">TODO</span> 返り値の型をつけていない</a></h3>
 <div class="outline-text-3" id="text-orgb29bc62">
 <p>
Typescriptなのにanyのままにしている。
あきらかにTxtNodeなので↓指定するのだが、エラー。
</p>
 <div class="org-src-container">
 <pre class="src src-typescript">export function parse(org: string): TxtNode {
</pre>
</div>

 <blockquote>
 <p>
src/org-to-ast.ts:52:5 - error TS2739: Type ’Document’ is missing the following properties from type ’TxtNode’: raw, range, loc
</p>
</blockquote>

 <p>
astオブジェクト。
</p>

 <div class="org-src-container">
 <pre class="src src-json">{
  type: 'Document',
  properties: {},
  children: [
    {
      type: 'UNKNOWN',
      level: 1,
      properties: {},
      children: [Array],
      loc: [Object],
      range: [Array],
      raw: '* Max comma check\n' +
        '#+begin_src\n' +
        'aaaaa,aaaaa,aaaaa,aaaaa,aaaaa,aaaaa\n' +
        '#+end_src\n'
    },
    type: 'UNKNOWN'
  ],
  loc: { start: { line: 1, column: 0 }, end: { line: 4, column: 10 } },
  range: [ 0, 76 ],
  raw: '* Max comma check\n' +
    '#+begin_src\n' +
    'aaaaa,aaaaa,aaaaa,aaaaa,aaaaa,aaaaa\n' +
    '#+end_src\n'
}
</pre>
</div>

 <p>
うむむ。
Type ’Document’がプロパティを持ってないとのことだが、必要な値を持っているように見える。
ast-testでもパスするし、何よりプラグインとしてうまく動いてるのだが。
</p>
</div>
</div>
 <div id="outline-container-org69a326b" class="outline-3">
 <h3 id="org69a326b"> <a href="#org69a326b"> <span class="todo TODO">TODO</span> ファイルが空のときエラー</a></h3>
 <div class="outline-text-3" id="text-org69a326b">
 <p>
ファイルが空のとき、エラーになるような。positionがないエラー。
</p>
</div>
</div>
 <div id="outline-container-org7fee002" class="outline-3">
 <h3 id="org7fee002"> <a href="#org7fee002"> <span class="todo TODO">TODO</span> 日付指定が含まれているとエラー</a></h3>
 <div class="outline-text-3" id="text-org7fee002">
 <p>
日本語で挿入されたときにだめなようだ。
アップデート前はできてたが対応しなくなったと。
</p>
 <blockquote>
 <p>
Cannot destructure property ’value’ of ’eat(…)’ as it is undefined.
</p>
</blockquote>

 <p>
これはorgファイルの側を英語にして解決させた。
</p>

 <p>
新たなエラーが出現。todoアイテムが見出しの直後にあると発生する。
</p>
 <blockquote>
 <p>
TypeError: Cannot redefine property: parent
at /home/kijima/Project/textlint-plugin-org/test/fixtures/lint-error.org
    at Function.defineProperty (<anonymous>)
    at Controller.enter (/home/kijima/Project/textlint-plugin-org/node_modules/@textlint/kernel/lib/src/task/textlint-core-task.js:125:24)
    at Controller.__execute (/home/kijima/Project/textlint-plugin-org/node_modules/@textlint/ast-traverse/lib/src/index.js:43:31)
    at Controller.traverse (/home/kijima/Project/textlint-plugin-org/node_modules/@textlint/ast-traverse/lib/src/index.js:114:28)
    at TextLintCoreTask.startTraverser (/home/kijima/Project/textlint-plugin-org/node_modules/@textlint/kernel/lib/src/task/textlint-core-task.js:122:28)
    at TextLintCoreTask.start (/home/kijima/Project/textlint-plugin-org/node_modules/@textlint/kernel/lib/src/task/linter-task.js:22:14)
    at /home/kijima/Project/textlint-plugin-org/node_modules/@textlint/kernel/lib/src/task/task-runner.js:27:18
</p>
</blockquote>

 <p>
ASTからtimestampを消すとテスト用のtextlint-kernelではエラーが出なくなった。
前後で比較したから間違いない。
が、本番のtextlintでは以前として出たままで、解決できない。のですべてrevertした。
</p>
</div>
</div>
</div>
 <div id="outline-container-org9181c25" class="outline-2">
 <h2 id="org9181c25"> <a href="#org9181c25">Reference</a></h2>
 <div class="outline-text-2" id="text-org9181c25">
</div>
 <div id="outline-container-orgce3fa47" class="outline-3">
 <h3 id="orgce3fa47"> <a href="#orgce3fa47"></a> <a href="https://efcl.info/">Web Scratch</a></h3>
 <div class="outline-text-3" id="text-orgce3fa47">
 <p>
 <a href="20210511013549-textlint.html#ID-d3394774-aba5-4167-bd18-f194eb2bd9ed">TextLint</a>の作者の人のブログ。
</p>
</div>
</div>
</div>
 <div id="outline-container-orgfcd7388" class="outline-2">
 <h2 id="orgfcd7388"> <a href="#orgfcd7388">Archives</a></h2>
 <div class="outline-text-2" id="text-orgfcd7388">
</div>
 <div id="outline-container-orgac29ba1" class="outline-3">
 <h3 id="orgac29ba1"> <a href="#orgac29ba1"> <span class="done DONE">DONE</span> アップデートしたら動かなくなった</a></h3>
 <div class="outline-text-3" id="text-orgac29ba1">
 <p>
いつのまにかbuildしても、jsが出力されない状態になっていた。コンパイラの設定ファイルの、出力先ディレクトリの指定方法が変わったぽい。それで空のままnpm publishして、textlintがライブラリ読み込めない状態になっていた。
</p>
</div>
</div>
 <div id="outline-container-org15e33d8" class="outline-3">
 <h3 id="org15e33d8"> <a href="#org15e33d8"> <span class="done DONE">DONE</span> バージョンアップ</a></h3>
 <div class="outline-text-3" id="text-org15e33d8">
 <p>
テストでエラーが出てるのを直す。
</p>

 <p>
ちょっとエラーをググったら治った。インポート関連と、依存パッケージが増えたことによるものだった。
</p>
</div>
</div>
 <div id="outline-container-orga997572" class="outline-3">
 <h3 id="orga997572"> <a href="#orga997572"> <span class="done DONE">DONE</span> Dockerイメージ</a></h3>
 <div class="outline-text-3" id="text-orga997572">
 <p>
試しやすいように、依存のないDockerイメージで実行できるようにする。
</p>
</div>
</div>
</div>
 <div id="outline-container-orgfcf7078" class="outline-2">
 <h2 id="orgfcf7078"> <a href="#orgfcf7078">Backlinks</a></h2>
 <div class="outline-text-2" id="text-orgfcf7078">
 <ul class="org-ul"> <li> <a href="./20210511013549-textlint.html">TextLint</a></li>
 <li> <a href="./20210703105033-archive.html">Archive</a></li>
 <li> <a href="./20210817003906-history.html">History</a></li>
 <li> <a href="./20211107104950-linter.html">Linter</a></li>
 <li> <a href="./20240204T105547--kdoc-71-kdocエントリの書き方__essay.html">KDOC 71: KDOCエントリの書き方</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20210511013549-textlint.html"/>
  <id>https://kijimad.github.io/roam/20210511013549-textlint.html</id>
  <updated>2025-06-14T00:00:00+09:00</updated>
</entry>
<entry>
  <title>create-link</title>
  <author><name>root</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org88e86c8" class="outline-2">
 <h2 id="org88e86c8"> <a href="#org88e86c8">概要</a></h2>
 <div class="outline-text-2" id="text-org88e86c8">
 <p>
create-linkは簡単にリンクを各形式に変換する、自作 <a href="20210508234743-emacs.html#ID-1ad8c3d5-97ba-4905-be11-e6f2626127ad">Emacs</a> package。 <a href="20210509122633-emacs_lisp.html#ID-c7e81fac-9f8b-4538-9851-21d4ff3c2b08">Emacs Lisp</a>で書かれている。元ネタはChromeアドオンの <a href="https://chrome.google.com/webstore/detail/create-link/gcmghdmnkfdbncmnmlkkglmnnhagajbm?hl=ja">Create Link</a>。
</p>
</div>
</div>
 <div id="outline-container-org569d52a" class="outline-2">
 <h2 id="org569d52a"> <a href="#org569d52a">Memo</a></h2>
 <div class="outline-text-2" id="text-org569d52a">
</div>
 <div id="outline-container-org15c178c" class="outline-3">
 <h3 id="org15c178c"> <a href="#org15c178c">アクセスを待つ必要がある</a></h3>
 <div class="outline-text-3" id="text-org15c178c">
 <p>
ブラウザでのテストは、(sit-for) で待つ必要がある。
ewwでは待たなくてもOK、w3mでは待つ必要がある、というのは同期、非同期が違うからか。
</p>
</div>
</div>
 <div id="outline-container-orgc89e0a3" class="outline-3">
 <h3 id="orgc89e0a3"> <a href="#orgc89e0a3">letで抜けられない</a></h3>
 <div class="outline-text-3" id="text-orgc89e0a3">
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">let</span> (result)
  (request
     <span class="org-builtin">:success</span> (function*
      ( <span class="org-keyword">progn</span>
        ( <span class="org-keyword">setq</span> result  <span class="org-string">"aaaa"</span>))))
result)  <span class="org-comment-delimiter">; </span> <span class="org-comment">nil</span>
</pre>
</div>
 <p>
みたいなとき、返り値resultがnilになる。
ほかの普通の関数だとOKだが、requestの特殊な形で、ちょっと違う。
</p>
</div>
</div>
 <div id="outline-container-org7cb95e6" class="outline-3">
 <h3 id="org7cb95e6"> <a href="#org7cb95e6">CI</a></h3>
 <div class="outline-text-3" id="text-org7cb95e6">
 <p>
依存パッケージを読みこむ必要がある。
Emacs package以外にも、たとえばw3mは外部プログラムが必要なのでapt-getするなど。
</p>
</div>
</div>
 <div id="outline-container-orgc74f578" class="outline-3">
 <h3 id="orgc74f578"> <a href="#orgc74f578">CIやバッチテストでcl-libが読み込まれない</a></h3>
 <div class="outline-text-3" id="text-orgc74f578">
 <p>
caskに書いてもインストールされない。
最初から入っているようだ。ただし、(require ’cl-lib)しないといけない。
また、function* はcl-functionのaliasだと書かれているが、CIやEmacsバッチモードだと認識しなかった。何か別のパッケージな可能性。
</p>
</div>
</div>
 <div id="outline-container-orgac5a515" class="outline-3">
 <h3 id="orgac5a515"> <a href="#orgac5a515">依存パッケージ</a></h3>
 <div class="outline-text-3" id="text-orgac5a515">
 <p>
elisp-checkでの依存パッケージの読み込み方がわからない。
テストだけはcaskで別にやっている。
</p>
</div>
</div>
 <div id="outline-container-orga83fc1b" class="outline-3">
 <h3 id="orga83fc1b"> <a href="#orga83fc1b">冗長なcustom</a></h3>
 <div class="outline-text-3" id="text-orga83fc1b">
 <p>
冗長なcustomをうまく指定するように。
customを設定するときにbm.elが参考になった。
</p>
</div>
</div>
 <div id="outline-container-orgf71b2ef" class="outline-3">
 <h3 id="orgf71b2ef"> <a href="#orgf71b2ef">helmソースの定義</a></h3>
 <div class="outline-text-3" id="text-orgf71b2ef">
 <p>
最小構成ぽいhelm-miscが参考になった。
</p>
</div>
</div>
 <div id="outline-container-org6bc98d3" class="outline-3">
 <h3 id="org6bc98d3"> <a href="#org6bc98d3">completion</a></h3>
 <div class="outline-text-3" id="text-org6bc98d3">
 <p>
デフォルトのcompletionもすぐできた。
要するにリストを渡せば選択肢になる。で、出てきた値は文字列なのでinternすれば良い。
</p>
</div>
</div>
 <div id="outline-container-org3804768" class="outline-3">
 <h3 id="org3804768"> <a href="#org3804768">ヘルパー作らないとやばい</a></h3>
</div>
 <div id="outline-container-org9d5683f" class="outline-3">
 <h3 id="org9d5683f"> <a href="#org9d5683f">mapcarを使って書き直せないか</a></h3>
 <div class="outline-text-3" id="text-org9d5683f">
 <p>
あとクロージャとかも。
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">defun</span>  <span class="org-function-name">test1</span> (default)
  `( <span class="org-keyword">lambda</span> (optional) ( <span class="org-keyword">if</span> optional optional ,default)))

(funcall (test1 create-link-default-format)  <span class="org-string">"aaa"</span>)
( <span class="org-keyword">setq</span> test2 (test1  <span class="org-string">"aaa"</span>))
test2
(funcall test2 create-link-default-format)

( <span class="org-keyword">defun</span>  <span class="org-function-name">make-adder</span> (n)
  `( <span class="org-keyword">lambda</span> (x) (+ x ,n)))
( <span class="org-keyword">setq</span> add2 (make-adder 2))
(funcall add2 5)

(funcall ( <span class="org-keyword">lambda</span> (a b c) (+ a b c))
         1 2 3)

(funcall ( <span class="org-keyword">lambda</span> (n) (1+ n))         <span class="org-comment-delimiter">; </span> <span class="org-comment">One required:</span>
         1)
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgdfa1673" class="outline-3">
 <h3 id="orgdfa1673"> <a href="#orgdfa1673">モード別に分岐する関数の参考になる</a></h3>
 <div class="outline-text-3" id="text-orgdfa1673">
 <p>
ace-link.el は参考になるな。
buffer-nameで判別してたが、modeのほうがよさそう。
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">cond</span> ((eq major-mode 'Info-mode)
       (ace-link-info))
      ((member major-mode '(help-mode
                            package-menu-mode geiser-doc-mode elbank-report-mode
                            elbank-overview-mode slime-trace-dialog-mode helpful-mode))
       (ace-link-help))
      ((eq major-mode 'Man-mode)
       (ace-link-man))
      ((eq major-mode 'woman-mode)
       (ace-link-woman))
</pre>
</div>
</div>
</div>
 <div id="outline-container-org16b71d7" class="outline-3">
 <h3 id="org16b71d7"> <a href="#org16b71d7">ace-linkを参考に</a></h3>
 <div class="outline-text-3" id="text-org16b71d7">
 <p>
info用とか、custom用のリンク抽出も考えられる。
ファイルでなくて、関数の集合体を生成できないか。
</p>

 <p>
たとえばinfoの特定のページを開くのを実行するリストを生成する。
(info “ivy”)する。みたいな。
ファイルだと依存するからな。Emacsで実行するのが前提のを生成するというわけだ。
</p>

 <div class="org-src-container">
 <pre class="src src-shell">npm install date-fns @types/date-fns
</pre>
</div>
</div>
</div>
</div>
 <div id="outline-container-orgd0ef8a8" class="outline-2">
 <h2 id="orgd0ef8a8"> <a href="#orgd0ef8a8">Tasks</a></h2>
 <div class="outline-text-2" id="text-orgd0ef8a8">
</div>
 <div id="outline-container-orga60833e" class="outline-3">
 <h3 id="orga60833e"> <a href="#orga60833e"> <span class="todo TODO">TODO</span> シェルだったらカレントディレクトリを取る</a></h3>
 <div class="outline-text-3" id="text-orga60833e">
 <p>
ブラウザみたく、変数が用意されてはない模様。まあこれについてはあまりいらないか。
パスを取得したいときはあるけど、それをhtmlリンクにしたいってあまりないしな。
</p>

 <p>
パスはdefault-directoryで取れる。
</p>
</div>
</div>
 <div id="outline-container-orgb3f974f" class="outline-3">
 <h3 id="orgb3f974f"> <a href="#orgb3f974f"> <span class="todo TODO">TODO</span> タイトルはないときバージョンを作るか</a></h3>
 <div class="outline-text-3" id="text-orgb3f974f">
 <p>
つまりパスだけ。
主題とはずれる気がする。シェルとかだとタイトルの取りようがないのでこれを追加するのが必要。
</p>
</div>
</div>
 <div id="outline-container-org823b4e5" class="outline-3">
 <h3 id="org823b4e5"> <a href="#org823b4e5"> <span class="todo TODO">TODO</span> Gitリポジトリのときは、相対ディレクトリを取得するオプション</a></h3>
 <div class="outline-text-3" id="text-org823b4e5">
 <p>
リポジトリからリンクを辿れるようになる。でも <a href="20210508234743-emacs.html#ID-1ad8c3d5-97ba-4905-be11-e6f2626127ad">Emacs</a>上でどうなんだろう。
辿れないけど、人にディレクトリを示すときには使える。今は絶対パスで取って前のを削除している。めんど
い。
うむむ。リモートリポジトリのURLがわかるなら意味はありそう。git-linkとあまり変わらないけどな。
git-linkのコードを見てるけど、まだあまりよくわからない。
</p>
</div>
</div>
 <div id="outline-container-orgb0c2c7b" class="outline-3">
 <h3 id="orgb0c2c7b"> <a href="#orgb0c2c7b"> <span class="todo TODO">TODO</span> ホームディレクトリを~で出すようにする</a></h3>
 <div class="outline-text-3" id="text-orgb0c2c7b">
 <p>
今は  <code>/home/kijima...</code> で出てるからな。汎用性があまりよくない。あとで絶対変わるし、ほかで使えない。
</p>
</div>
</div>
 <div id="outline-container-orgd233df3" class="outline-3">
 <h3 id="orgd233df3"> <a href="#orgd233df3"> <span class="todo TODO">TODO</span> 実行関数を出力</a></h3>
 <div class="outline-text-3" id="text-orgd233df3">
 <p>
たとえばivyのinfoページにいたとする。(info “ivy”) を出力する。
これを実行するとivyに飛べるので、リンクといえそう。環境も関係ない。
</p>

 <p>
infoバッファからの検索キーワードの割り出し方…
実行ディレクトリをdefault-directoryか何かで取る。(.*).infoというファイルがあるはずなのでそのファイル名をinfoの引数に渡す。
</p>
</div>
</div>
</div>
 <div id="outline-container-org2fb5868" class="outline-2">
 <h2 id="org2fb5868"> <a href="#org2fb5868">Archives</a></h2>
 <div class="outline-text-2" id="text-org2fb5868">
</div>
 <div id="outline-container-orgc303ba0" class="outline-3">
 <h3 id="orgc303ba0"> <a href="#orgc303ba0"> <span class="done DONE">DONE</span> フックを追加…たとえばリンク生成 → {フック} → コピー前としておく。</a></h3>
 <div class="outline-text-3" id="text-orgc303ba0">
 <p>
フックでは式が使えるのでなんでもできる。動的にタイムスタンプを加えたり、連番を振ったりとか。単なる文字列フィルターよりはるかに強力。誰かがもっと便利な使い方を編み出してくれる。
</p>

 <p>
make-formatと、message+killの前にフックを差し込むか。
でも、文字列を受け取れないからあまり意味ない気がしてきた。
フックはその処理に追加するというより、別の処理を差し込むためのものだ(ある関数を実行すると、別の全く関係ない)モードをオンにするとか。その意味でいうと、フックする処理はまったく思いつかない。
</p>
</div>
</div>
 <div id="outline-container-orgb9c8096" class="outline-3">
 <h3 id="orgb9c8096"> <a href="#orgb9c8096"> <span class="done DONE">DONE</span> リンク変換</a></h3>
 <div class="outline-text-3" id="text-orgb9c8096">
 <p>
別のフォーマットに変換するのもあっていいな。
すでに書式があるから、そこからURL, Titleを取り出せればいい。
</p>
 <ul class="org-ul"> <li>判定関数</li>
</ul> <p>
thing-at-pointの拡張だな。フォーマットリンク上にカーソルがある場合、タイトルとURLを取得して変換…。
どのフォーマットか判定できれば、タイトルとURLを取れる。
markdown-mode.elの(markdown-kill-thing-at-point)が参考になりそう。
</p>

 <p>
別に独自実装しなくても、各modeのregexpを使えばいいかな。いや、フル装備でめちゃくちゃ複雑だし、いろんな依存(5つも増えるのはさすがに…)があるので独自でやろう。
 <a href="https://ayatakesi.github.io/emacs/25.1/Regexps.html">https://ayatakesi.github.io/emacs/25.1/Regexps.html</a>
</p>
</div>
</div>
 <div id="outline-container-org6c6a98a" class="outline-3">
 <h3 id="org6c6a98a"> <a href="#org6c6a98a"> <span class="done DONE">DONE</span> フォーマットごとの特殊ルールを追加する</a></h3>
 <div class="outline-text-3" id="text-org6c6a98a">
 <p>
たとえばlatexの場合、ファイルリンクにはプレフィクスrun:がつくらしい。
今のコードだとファイルリンクだという検知はget-informationでしかできないのでそこに書くしかない。
一般的関数に特定のファイルフォーマットの処理が挟まれると非常に醜い。
なので、最終的な個別変換を分離する。そうするとhtmlがついてないときはrunをつけるとか、好きに追加できるだろう。
</p>
</div>
</div>
 <div id="outline-container-orga0a24c4" class="outline-3">
 <h3 id="orga0a24c4"> <a href="#orga0a24c4"> <span class="done DONE">DONE</span> テキスト選択中だと、タイトルに選択したところを入れる</a></h3>
 <div class="outline-text-3" id="text-orga0a24c4">
</div>
</div>
 <div id="outline-container-org2effdb9" class="outline-3">
 <h3 id="org2effdb9"> <a href="#org2effdb9"> <span class="done DONE">DONE</span> 選択URLにアクセスして、Titleをスクレイピング。リンクを完成させる</a></h3>
 <div class="outline-text-3" id="text-org2effdb9">
</div>
</div>
 <div id="outline-container-org1728014" class="outline-3">
 <h3 id="org1728014"> <a href="#org1728014"> <span class="done DONE">DONE</span> 手動で形式選択できるように</a></h3>
 <div class="outline-text-3" id="text-org1728014">
 <p>
helmから選べたらベスト。選択をどうやってやればいいのかよくわからない
org-roamのファイル選択で出てくるhelmなど参考になりそう。
</p>
</div>
</div>
 <div id="outline-container-orgd4fdee1" class="outline-3">
 <h3 id="orgd4fdee1"> <a href="#orgd4fdee1"> <span class="done DONE">DONE</span> とりあえず標準のcompletionだけ追加</a></h3>
 <div class="outline-text-3" id="text-orgd4fdee1">
</div>
</div>
 <div id="outline-container-org551dc43" class="outline-3">
 <h3 id="org551dc43"> <a href="#org551dc43"> <span class="done DONE">DONE</span> checkdocをCIで走らせるようにする</a></h3>
 <div class="outline-text-3" id="text-org551dc43">
 <p>
elisp-checkはcask環境のためうまくできない。
なので、elisp-check.elを直に読み込んで実行するようにすればよさそう。
</p>

 <p>
elisp-lintというパッケージに同梱されてたのでそれで一気にできるようになった。
</p>
</div>
</div>
 <div id="outline-container-orgc90e150" class="outline-3">
 <h3 id="orgc90e150"> <a href="#orgc90e150"> <span class="done DONE">DONE</span> テスト追加 + CI</a></h3>
 <div class="outline-text-3" id="text-orgc90e150">
</div>
</div>
 <div id="outline-container-org8808d27" class="outline-3">
 <h3 id="org8808d27"> <a href="#org8808d27"> <span class="done DONE">DONE</span> エクスポート形式増加 HTML,LaTeX,Markdown,MediaWiki,Org-mode</a></h3>
 <div class="outline-text-3" id="text-org8808d27">
</div>
</div>
 <div id="outline-container-org82277da" class="outline-3">
 <h3 id="org82277da"> <a href="#org82277da"> <span class="done DONE">DONE</span> ユーザ定義のフィルター … chromeの拡張の方にはある</a></h3>
 <div class="outline-text-3" id="text-org82277da">
</div>
</div>
 <div id="outline-container-org486b2ab" class="outline-3">
 <h3 id="org486b2ab"> <a href="#org486b2ab"> <span class="done DONE">DONE</span> PDF(ページを取ることはできそう。リンクでページ番号を表現できるか)</a></h3>
 <div class="outline-text-3" id="text-org486b2ab">
 <p>
やらない。
</p>
</div>
</div>
 <div id="outline-container-org4e444bb" class="outline-3">
 <h3 id="org4e444bb"> <a href="#org4e444bb"> <span class="done DONE">DONE</span> magit-status-modeのPR/Issueへのリンクを取得</a></h3>
 <div class="outline-text-3" id="text-org4e444bb">
</div>
</div>
 <div id="outline-container-org2fee58d" class="outline-3">
 <h3 id="org2fee58d"> <a href="#org2fee58d"> <span class="done DONE">DONE</span> Magit(Gitクライアント)の場合。</a></h3>
 <div class="outline-text-3" id="text-org2fee58d">
 <p>
 <code>git-link</code> の整形バージョン。
そこまではちょっとやりすぎ感。依存が増えすぎるのも微妙な感じか。でも欲しいよな…。
各PRまではいいけど、少なくともリポジトリのホームページくらいならいいかな。
</p>

 <p>
これができるとメモるとき便利なんだよな。
</p>
</div>
</div>
</div>
 <div id="outline-container-org405991e" class="outline-2">
 <h2 id="org405991e"> <a href="#org405991e">Backlinks</a></h2>
 <div class="outline-text-2" id="text-org405991e">
 <ul class="org-ul"> <li> <a href="./20210817003906-history.html">History</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20210512001700-create_link.html"/>
  <id>https://kijimad.github.io/roam/20210512001700-create_link.html</id>
  <updated>2025-06-14T00:00:00+09:00</updated>
</entry>
<entry>
  <title>GNU Guix</title>
  <author><name>root</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orgcd41db1" class="outline-2">
 <h2 id="orgcd41db1"> <a href="#orgcd41db1">概要</a></h2>
 <div class="outline-text-2" id="text-orgcd41db1">
 <p>
Gnu GuixはOSおよびパッケージ管理システム。
</p>

 <ul class="org-ul"> <li>システム設定をリポジトリで管理できる</li>
 <li>ロールバックできる</li>
 <li>マシンによって設定を変えることも可能</li>
 <li>依存性に対する完全なコントロール。完全に再現できる</li>
</ul> <p>
などの先進的な機能がある。 <a href="20210926144913-scheme.html#ID-53a7a781-8398-4069-8735-6ac5b8c3bc05">Scheme</a>で設定ファイルを書ける。
</p>
</div>
</div>
 <div id="outline-container-orgf0ab545" class="outline-2">
 <h2 id="orgf0ab545"> <a href="#orgf0ab545">memo</a></h2>
 <div class="outline-text-2" id="text-orgf0ab545">
</div>
 <div id="outline-container-org7fad498" class="outline-3">
 <h3 id="org7fad498"> <a href="#org7fad498">guix package</a></h3>
 <div class="outline-text-3" id="text-org7fad498">
 <p>
guix buildしたあとにguix packageで追加する。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 1: </span>packgeの操作を戻す</label> <pre class="src src-shell">guix package --roll-back
</pre>
</div>
</div>
</div>
 <div id="outline-container-org8bfd94c" class="outline-3">
 <h3 id="org8bfd94c"> <a href="#org8bfd94c">guix build</a></h3>
 <div class="outline-text-3" id="text-org8bfd94c">
 <p>
guix buildでビルドしたパッケージはGuixのソフトウェアストアに追加され、他のプログラムから利用できるようになる。システム全体から利用できる。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 2: </span>guix buildの例。バージョン指定できる</label> <pre class="src src-shell">guix build emacs@29.1
guix package -i emacs@29.1
</pre>
</div>

 <p>
バージョンを探すにはguix searchを使う。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 3: </span>guix searchでバージョンを探す</label> <pre class="src src-shell">guix search emacs
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 4: </span>スペックファイルを指定する</label> <pre class="src src-shell">guix build -f emacs.scm
</pre>
</div>

 <p>
スペックファイルはEmacsのソースコードのURL、チェックサム、ビルド手順などを含むSchemeスクリプトである。
</p>
</div>
</div>
 <div id="outline-container-orgf6b544d" class="outline-3">
 <h3 id="orgf6b544d"> <a href="#orgf6b544d">guix home とsystem</a></h3>
 <div class="outline-text-3" id="text-orgf6b544d">
 <p>
homeコマンドではユーザ個別の設定ができる。
インストールするソフトウェア、環境変数、起動サービスなど。
 <a href="https://guix.gnu.org/manual/devel/en/html_node/Home-Configuration.html">Home Configuration (GNU Guix Reference Manual)</a>
</p>

 <p>
いっぽうでsystemの方では、ユーザ作成やパーティション、キーボードレイアウトなどシステム全体にかかることを設定できる。
</p>
</div>
</div>
 <div id="outline-container-org62caf4a" class="outline-3">
 <h3 id="org62caf4a"> <a href="#org62caf4a">BIOSに出ないとき</a></h3>
 <div class="outline-text-3" id="text-org62caf4a">
 <p>
Guixに限ったことではないが、Linuxをインストールしたドライブを認識しないときは、BIOSモードを確認する。
UEFIモードだとLinuxを認識してくれない。
レガシーモードにすると認識してくれ、起動もできる。
</p>
</div>
</div>
 <div id="outline-container-org197b3be" class="outline-3">
 <h3 id="org197b3be"> <a href="#org197b3be">基本のコマンド</a></h3>
 <div class="outline-text-3" id="text-org197b3be">
 <div class="org-src-container">
 <pre class="src src-shell">guix pull --news
guix install {package}
guix remove {package}
guix package --list-generations
guix package --list-installed
guix package --switch-generation=42
guix package --roll-back

guix package --export-manifest
guix refresh  <span class="org-comment-delimiter"># </span> <span class="org-comment">更新</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgbc5fda1" class="outline-3">
 <h3 id="orgbc5fda1"> <a href="#orgbc5fda1">独立環境</a></h3>
 <div class="outline-text-3" id="text-orgbc5fda1">
 <div class="org-src-container">
 <pre class="src src-shell">guix environment
</pre>
</div>
 <p>
を使う。
 <a href="https://guix.gnu.org/manual/en/html_node/Invoking-guix-environment.html">https://guix.gnu.org/manual/en/html_node/Invoking-guix-environment.html</a>
</p>
</div>
</div>
 <div id="outline-container-orgca83bd7" class="outline-3">
 <h3 id="orgca83bd7"> <a href="#orgca83bd7">詳しい解説</a></h3>
 <div class="outline-text-3" id="text-orgca83bd7">
 <p>
usbメモリーからインストールする方法をわかりやすく解説。
</p>

 <blockquote>
 <p>
 <a href="https://github.com/daviwil/dotfiles/blob/master/Systems.org">https://github.com/daviwil/dotfiles/blob/master/Systems.org</a> (動画)
 <a href="https://www.youtube.com/watch?v=oSy-TmoxG_Y">https://www.youtube.com/watch?v=oSy-TmoxG_Y</a>
 <a href="https://systemcrafters.cc/craft-your-system-with-guix/full-system-install/">https://systemcrafters.cc/craft-your-system-with-guix/full-system-install/</a> (↑メモ)
</p>
</blockquote>

 <ul class="org-ul"> <li>ブートusb用意</li>
 <li>インストール(TTY作業)</li>
 <li>ログイン(以後、GUI)</li>
 <li>パスワード設定</li>
 <li>guix設定ファイル準備(etcから移す)</li>
</ul> <div class="org-src-container">
 <pre class="src src-shell">mkdir -p ~/.config/guix
 <span class="org-builtin">cd</span> ~/.config/guix
cp /etc/channels.scm .
cp /etc/config.scm ./system.scm
chmod +w channels.scm
</pre>
</div>

 <ul class="org-ul"> <li>commit削除</li>
 <li>アップデート</li>
</ul> <div class="org-src-container">
 <pre class="src src-shell">guix pull
sudo -E guix system reconfigure ~/.config/guix/system.scm
</pre>
</div>

 <ul class="org-ul"> <li>インストールパッケージをすべてアップデート</li>
</ul> <div class="org-src-container">
 <pre class="src src-shell">guix package -u
</pre>
</div>
</div>
</div>
 <div id="outline-container-org3a4796e" class="outline-3">
 <h3 id="org3a4796e"> <a href="#org3a4796e">日本語入力</a></h3>
 <div class="outline-text-3" id="text-org3a4796e">
 <blockquote>
 <p>
 <a href="https://debbugs.gnu.org/cgi/bugreport.cgi?bug=35610#38">https://debbugs.gnu.org/cgi/bugreport.cgi?bug=35610#38</a>
</p>
</blockquote>

 <p>
言語設定を日本語にしただけでは入力や表示ができない。手動で設定する必要がある。
</p>
 <div class="org-src-container">
 <pre class="src src-shell">guix package -i ibus ibus-anthy font-adobe-source-han-sans
</pre>
</div>

 <p>
 <code>.bash_profile</code> などに追加。
</p>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">export GUIX_GTK2_IM_MODULE_FILE= <span class="org-string">"$HOME/.guix-profile/lib/gtk-2.0/2.10.0/immodules-gtk2.cache"</span>
export GUIX_GTK3_IM_MODULE_FILE= <span class="org-string">"$HOME/.guix-profile/lib/gtk-3.0/3.0.0/immodules-gtk3.cache"</span>
</pre>
</div>

 <p>
ibusのキャッシュを削除する(重要)。
</p>
 <div class="org-src-container">
 <pre class="src src-shell">rm -rf ~/.cache/ibus
</pre>
</div>

 <p>
再起動する。
</p>
 <div class="org-src-container">
 <pre class="src src-shell">ibus-setup
</pre>
</div>
 <p>
一覧にJapanese(Anthy)が追加されているので、選択する。
</p>

 <ul class="org-ul"> <li>インプットメソッド切り替えはKeyboard Shortcutからできる。</li>
 <li>ibus設定画面はGNOME検索には出てこない。言語選択のJapanese(Anthy)歯車から設定できる。</li>
</ul></div>
</div>
 <div id="outline-container-org6a86ace" class="outline-3">
 <h3 id="org6a86ace"> <a href="#org6a86ace">vterm</a></h3>
 <div class="outline-text-3" id="text-org6a86ace">
 <p>
vtermのコンパイルにCmakeが必要。
</p>
 <div class="org-src-container">
 <pre class="src src-shell">guix install cmake
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-sh">guix install nss-certs
 <span class="org-builtin">export</span>  <span class="org-variable-name">SSL_CERT_DIR</span>= <span class="org-string">"$HOME/.guix-profile/etc/ssl/certs"</span>
 <span class="org-builtin">export</span>  <span class="org-variable-name">SSL_CERT_FILE</span>= <span class="org-string">"$HOME/.guix-profile/etc/ssl/certs/ca-certificates.crt"</span>
 <span class="org-builtin">export</span>  <span class="org-variable-name">GIT_SSL_CAINFO</span>= <span class="org-string">"$SSL_CERT_FILE"</span>
 <span class="org-builtin">export</span>  <span class="org-variable-name">CURL_CA_BUNDLE</span>= <span class="org-string">"$HOME/.guix-profile/etc/ssl/certs/ca-certificates.crt"</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgbc799d5" class="outline-3">
 <h3 id="orgbc799d5"> <a href="#orgbc799d5">caps入れ替え</a></h3>
 <div class="outline-text-3" id="text-orgbc799d5">
 <p>
system.scm書き換えでできるはずだが、反映させる方法がわからない。
gnomeのコマンドを1回打って代用する。
</p>
 <div class="org-src-container">
 <pre class="src src-shell">gsettings set org.gnome.desktop.input-sources xkb-options  <span class="org-string">"['ctrl:swapcaps']"</span>
</pre>
</div>

 <p>
デスクトップ環境関係なくできる↓。
</p>
 <div class="org-src-container">
 <pre class="src src-shell">/usr/bin/setxkbmap -option  <span class="org-string">"ctrl:nocaps"</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-org9e6d509" class="outline-3">
 <h3 id="org9e6d509"> <a href="#org9e6d509">パッケージを一括インストール</a></h3>
 <div class="outline-text-3" id="text-org9e6d509">
 <div class="org-src-container">
 <pre class="src src-shell">guix package -m ~/dotfiles/.config/guix/manifests/desktop.scm
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgb7fd913" class="outline-3">
 <h3 id="orgb7fd913"> <a href="#orgb7fd913">フローメモ</a></h3>
 <div class="outline-text-3" id="text-orgb7fd913">
 <p>
ctrl入れ替え → syncthingインストールと設定 → ssh鍵 → sshインストール。
gitインストール → dotfilesをclone。
</p>
</div>
</div>
 <div id="outline-container-org43d68ad" class="outline-3">
 <h3 id="org43d68ad"> <a href="#org43d68ad">自動起動</a></h3>
 <div class="outline-text-3" id="text-org43d68ad">
 <p>
ファイルを配置して自動実行されるようにする。
</p>

 <p>
サービス系の自動起動はguixが利用しているサービスマネージャ <a href="https://www.gnu.org/software/shepherd/">GNU Shepherd</a>で行う。
 <a href="https://github.com/kijimaD/dotfiles/blob/develop/.config/shepherd/init.scm">https://github.com/kijimaD/dotfiles/blob/develop/.config/shepherd/init.scm</a>
このように追加しておくと自動で実行する。
ただし、shepherd自体が自動で起動しないよう。デスクトップ環境に合わせて、自動実行させるようにする。
 <a href="https://github.com/kijimaD/dotfiles/blob/develop/.config/autostart/gnome.desktop">https://github.com/kijimaD/dotfiles/blob/develop/.config/autostart/gnome.desktop</a>
実行権限をつけること。
</p>
</div>
</div>
 <div id="outline-container-orge05690c" class="outline-3">
 <h3 id="orge05690c"> <a href="#orge05690c">Gnomeで Alt + Shiftが設定されてしまう問題</a></h3>
 <div class="outline-text-3" id="text-orge05690c">
 <p>
いつの間にか、Alt+Shiftでinput method切り替えになっていて不便なことになっていた。
いつからかは不明。dotfilesの影響か、そうでないかもよくわからない。
gnome-tweaksをインストールしてAdditional OptionsにAlt+Shiftオプションがあるのでオフにした。(Emacs inputの設定項目があったので選択しておいた。)
</p>

 <p>
 <a href="https://askubuntu.com/questions/967364/ubuntu-17-10-and-later-cant-change-the-input-switching-shortcut-to-altshift">https://askubuntu.com/questions/967364/ubuntu-17-10-and-later-cant-change-the-input-switching-shortcut-to-altshift</a>
</p>

 <p>
この辺configにまとめられないのか。
gnome使いたくないな。
</p>

 <p>
ibus-anthyのショートカット一覧。
 <a href="https://wiki.ubuntulinux.jp/UbuntuTips/JapaneseEnvironment/IbusAnthy#Setting">https://wiki.ubuntulinux.jp/UbuntuTips/JapaneseEnvironment/IbusAnthy#Setting</a>
</p>
</div>
</div>
 <div id="outline-container-orgdc6055d" class="outline-3">
 <h3 id="orgdc6055d"> <a href="#orgdc6055d">AnthyにC-c C-j を奪われる問題</a></h3>
 <div class="outline-text-3" id="text-orgdc6055d">
 <p>
anthyにC-c C-jが奪われるようになった。設定で変えても変更が反映されない。
まあ、英語に切り替えてからやればいいか。
クリーンインストールすると解決する問題か。
</p>

 <p>
C-c C-jを押すと無変換モードになるので、変換されないときは再度C-c C-jを押す必要がある。
</p>
</div>
</div>
 <div id="outline-container-orgabb73e4" class="outline-3">
 <h3 id="orgabb73e4"> <a href="#orgabb73e4">Anthyの入力モード切り替え</a></h3>
 <div class="outline-text-3" id="text-orgabb73e4">
 <p>
たまにカタカナ入力なって困る。
 <code>ctrl+.</code> で入力モードを順番に切り替える。
</p>
</div>
</div>
 <div id="outline-container-org84e56b6" class="outline-3">
 <h3 id="org84e56b6"> <a href="#org84e56b6">Ruby環境</a></h3>
 <div class="outline-text-3" id="text-org84e56b6">
 <p>
Guixがgemをサポートしているので、RVM, rbenv, bundlerは必要ないよう。
 <a href="https://git.genenetwork.org/pjotrp/guix-notes/src/branch/master/RUBYGEMS-Nokogiri.org#headline-33">https://git.genenetwork.org/pjotrp/guix-notes/src/branch/master/RUBYGEMS-Nokogiri.org#headline-33</a>
</p>

 <p>
だがよくわからない。ひどく面倒そうな環境変数を追加しているのを見て、これは間違ったアプローチだと思った。
npmでlintは普通にできたので、同じようにできると思ったのだが。
</p>
</div>
</div>
 <div id="outline-container-org5796394" class="outline-3">
 <h3 id="org5796394"> <a href="#org5796394">wifi</a></h3>
 <div class="outline-text-3" id="text-org5796394">
 <div class="org-src-container">
 <pre class="src src-shell">nm-connection-editor
</pre>
</div>
</div>
</div>
</div>
 <div id="outline-container-orge2dce0a" class="outline-2">
 <h2 id="orge2dce0a"> <a href="#orge2dce0a">参考リンク</a></h2>
 <div class="outline-text-2" id="text-orge2dce0a">
 <p>
概念がわかりやすいPDF。
 <a href="https://archive.fosdem.org/2016/schedule/event/deployments_with_gnu_guix/attachments/slides/1086/export/events/attachments/deployments_with_gnu_guix/slides/1086/reproducible_deployments_gnu_guix.pdf">https://archive.fosdem.org/2016/schedule/event/deployments_with_gnu_guix/attachments/slides/1086/export/events/attachments/deployments_with_gnu_guix/slides/1086/reproducible_deployments_gnu_guix.pdf</a>
</p>

 <p>
よくわからないので実際の例を見てみる。
</p>

 <p>
ビルドしてる。
 <a href="https://notabug.org/mthl/cuirass">https://notabug.org/mthl/cuirass</a>
</p>

 <p>
ノート。
 <a href="https://github.com/pjotrp/guix-notes/blob/master/RUBY.org">https://github.com/pjotrp/guix-notes/blob/master/RUBY.org</a>
</p>

 <p>
System Crafters.
 <a href="https://www.youtube.com/channel/UCAiiOTio8Yu69c3XnR7nQBQ">https://www.youtube.com/channel/UCAiiOTio8Yu69c3XnR7nQBQ</a>
 <a href="https://github.com/daviwil/dotfiles">https://github.com/daviwil/dotfiles</a>
</p>

 <p>
guix-works。開発環境として使うための情報が豊富。
 <a href="https://www.draketo.de/software/guix-work.html">https://www.draketo.de/software/guix-work.html</a>
</p>
</div>
</div>
 <div id="outline-container-orgc0b8a0e" class="outline-2">
 <h2 id="orgc0b8a0e"> <a href="#orgc0b8a0e">Task</a></h2>
 <div class="outline-text-2" id="text-orgc0b8a0e">
</div>
 <div id="outline-container-orgf791669" class="outline-3">
 <h3 id="orgf791669"> <a href="#orgf791669"> <span class="todo TODO">TODO</span> </a> <a href="20210805005543-docker.html#ID-1658782a-d331-464b-9fd7-1f8233b8b7f8">Docker</a>を起動できるようにする</h3>
</div>
 <div id="outline-container-org3a54211" class="outline-3">
 <h3 id="org3a54211"> <a href="#org3a54211"> <span class="todo TODO">TODO</span> i3のmod keyを変更する</a></h3>
 <div class="outline-text-3" id="text-org3a54211">
 <p>
AltとSuperの位置が近すぎて、workspaceを打ち間違う。
</p>
</div>
</div>
 <div id="outline-container-orgf2ea7b7" class="outline-3">
 <h3 id="orgf2ea7b7"> <a href="#orgf2ea7b7"> <span class="todo TODO">TODO</span> ibus設定をconfigで</a></h3>
 <div class="outline-text-3" id="text-orgf2ea7b7">
 <p>
日本語入力のときのスペースが全角になってうざい。
configで挙動を変更できないのか。
</p>
</div>
</div>
 <div id="outline-container-org904b1a4" class="outline-3">
 <h3 id="org904b1a4"> <a href="#org904b1a4"> <span class="todo TODO">TODO</span> emacs-exwmで日本語入力できるようにする</a></h3>
 <div class="outline-text-3" id="text-org904b1a4">
 <p>
例によって日本語入力ができない。
Emacs以外ではできてるので、やはりi3と同じ。
最初に起動するEmacsで環境変数を指定できれば解決なのだが。
インストールした最初からできたので、どこで制御してるのかわからない。
</p>

 <p>
i3ではconfigに環境変数入力 && emacs を直書きすることができる。emacs-exwmでは最初に起動するEmacsを記述してる箇所はどこにあるんだろう。
</p>
</div>
</div>
 <div id="outline-container-org63dc0f6" class="outline-3">
 <h3 id="org63dc0f6"> <a href="#org63dc0f6"> <span class="todo TODO">TODO</span> メインPCのGuix完全移行</a></h3>
 <div class="outline-text-3" id="text-org63dc0f6">
 <p>
guixを使うようにする。
</p>

 <ul class="org-ul"> <li>日本語入力</li>
 <li>Bluetooth</li>
 <li>Chrome</li>
 <li>Zoom</li>
</ul> <p>
あたりをどうするのかが気になる。
</p>
</div>
</div>
</div>
 <div id="outline-container-orgbb5bcf7" class="outline-2">
 <h2 id="orgbb5bcf7"> <a href="#orgbb5bcf7">Archives</a></h2>
 <div class="outline-text-2" id="text-orgbb5bcf7">
</div>
 <div id="outline-container-org7a6dbe9" class="outline-3">
 <h3 id="org7a6dbe9"> <a href="#org7a6dbe9"> <span class="done DONE">DONE</span> npmパッケージ</a></h3>
 <div class="outline-text-3" id="text-org7a6dbe9">
 <div class="org-src-container">
 <pre class="src src-shell">guix install node
npm install npm
npm install
npx textlint .*org
</pre>
</div>
</div>
</div>
 <div id="outline-container-org1290bf1" class="outline-3">
 <h3 id="org1290bf1"> <a href="#org1290bf1"> <span class="done DONE">DONE</span> キー設定(caps入れ替え)</a></h3>
 <div class="outline-text-3" id="text-org1290bf1">
 <p>
一度Gnomeコマンドを打つ必要がある。
システムレベルで入れ替えたいができてない。
</p>
</div>
</div>
 <div id="outline-container-org67e9802" class="outline-3">
 <h3 id="org67e9802"> <a href="#org67e9802"> <span class="done DONE">DONE</span> フォントインストール</a></h3>
 <div class="outline-text-3" id="text-org67e9802">
 <p>
dotfilesと統合して簡単に。
</p>
</div>
</div>
 <div id="outline-container-orgfdb9348" class="outline-3">
 <h3 id="orgfdb9348"> <a href="#orgfdb9348"> <span class="done DONE">DONE</span> git</a></h3>
 <div class="outline-text-3" id="text-orgfdb9348">
 <p>
gitをインストール。
</p>
</div>
</div>
 <div id="outline-container-org6da0517" class="outline-3">
 <h3 id="org6da0517"> <a href="#org6da0517"> <span class="done DONE">DONE</span> ssh</a></h3>
 <div class="outline-text-3" id="text-org6da0517">
 <p>
open-sshをインストール。
</p>
</div>
</div>
 <div id="outline-container-org646ab27" class="outline-3">
 <h3 id="org646ab27"> <a href="#org646ab27"> <span class="done DONE">DONE</span> .emacs.d</a></h3>
 <div class="outline-text-3" id="text-org646ab27">
 <p>
セットアップ完了。
</p>
</div>
</div>
 <div id="outline-container-orgbbf5eb1" class="outline-3">
 <h3 id="orgbbf5eb1"> <a href="#orgbbf5eb1"> <span class="done DONE">DONE</span> dotfiles</a></h3>
 <div class="outline-text-3" id="text-orgbbf5eb1">
 <p>
stowインストール、セットアップ完了。
</p>
</div>
</div>
 <div id="outline-container-orgce48ac5" class="outline-3">
 <h3 id="orgce48ac5"> <a href="#orgce48ac5"> <span class="done DONE">DONE</span> syncthing</a></h3>
 <div class="outline-text-3" id="text-orgce48ac5">
 <p>
単にインストールするだけ、コード。
</p>
</div>
</div>
 <div id="outline-container-orgbdaa29c" class="outline-3">
 <h3 id="orgbdaa29c"> <a href="#orgbdaa29c"> <span class="done DONE">DONE</span> 日本語入力</a></h3>
 <div class="outline-text-3" id="text-orgbdaa29c">
 <p>
anthyをインストール、コード化。
</p>
</div>
</div>
 <div id="outline-container-org3a656e9" class="outline-3">
 <h3 id="org3a656e9"> <a href="#org3a656e9"> <span class="done DONE">DONE</span> syncthingなどの自動起動</a></h3>
 <div class="outline-text-3" id="text-org3a656e9">
 <p>
shepherdでやるように。コード化。
</p>
</div>
</div>
 <div id="outline-container-orgea431c0" class="outline-3">
 <h3 id="orgea431c0"> <a href="#orgea431c0"> <span class="done DONE">DONE</span> vtermのコンパイルができない</a></h3>
 <div class="outline-text-3" id="text-orgea431c0">
 <p>
guixインストールした。
</p>
</div>
</div>
 <div id="outline-container-org7408868" class="outline-3">
 <h3 id="org7408868"> <a href="#org7408868"> <span class="done DONE">DONE</span> emacsqlが利用できない</a></h3>
 <div class="outline-text-3" id="text-org7408868">
 <p>
guixインストールするように。
</p>
</div>
</div>
 <div id="outline-container-org9a6d8a0" class="outline-3">
 <h3 id="org9a6d8a0"> <a href="#org9a6d8a0"> <span class="done DONE">DONE</span> migemoが使えない</a></h3>
 <div class="outline-text-3" id="text-org9a6d8a0">
 <p>
インストールされてない環境では読み込まない、などの対応が必要。
コピペしたぽいコードはちゃんと対応されてたが、対応コードの外側でrequireしたためどの環境でも読み込むようになっていた。修正した。
</p>
</div>
</div>
 <div id="outline-container-org6811e08" class="outline-3">
 <h3 id="org6811e08"> <a href="#org6811e08"> <span class="done DONE">DONE</span> パッケージリストから一気にインストールできるようにする。</a></h3>
 <div class="outline-text-3" id="text-org6811e08">
 <p>
desktop.scmを作成した。これで必要なパッケージを一気に導入できる。
</p>
</div>
</div>
 <div id="outline-container-org1596de6" class="outline-3">
 <h3 id="org1596de6"> <a href="#org1596de6"> <span class="done DONE">DONE</span> システムビルド時にインストールさせたい</a></h3>
 <div class="outline-text-3" id="text-org1596de6">
 <p>
パッケージ群をまとめてインストールするにはdotfileをcloneして実行すればいい。が、それをするためにsyncthingやgitをインストールする必要がある。
ビルド時にインストールさせたい。
よくわからんのでmakefileを作成した。
</p>
</div>
</div>
 <div id="outline-container-orgbc567cc" class="outline-3">
 <h3 id="orgbc567cc"> <a href="#orgbc567cc"> <span class="done DONE">DONE</span> org-roamが使えない</a></h3>
 <div class="outline-text-3" id="text-orgbc567cc">
 <p>
org-roamのバージョンが上がったためだった。コマンドが変わっていた。
逆にMintの方が古いままになっているので、そっちを直す必要がある。
もう大体同じことができるので乗り換えてもいい。
</p>
</div>
</div>
 <div id="outline-container-org392524e" class="outline-3">
 <h3 id="org392524e"> <a href="#org392524e"> <span class="done DONE">DONE</span> サービスが起動しないことがある</a></h3>
 <div class="outline-text-3" id="text-org392524e">
 <p>
ibus、syncthingが起動直後は動いているのにいつのまにか止まっている。
</p>

 <ol class="org-ol"> <li>i3ではshepherdを実行してなかった。</li>
</ol> <p>
2.ログをとってみてみると、  <code>ibus-daemon -d</code> はダメで、  <code>ibus-daemon</code> とする必要がある。つまりふつうに実行してそこでコンソールが止まる形式で実行する必要がある。
</p>
</div>
</div>
 <div id="outline-container-orgd70fb23" class="outline-3">
 <h3 id="orgd70fb23"> <a href="#orgd70fb23"> <span class="done DONE">DONE</span> 画面ロック</a></h3>
 <div class="outline-text-3" id="text-orgd70fb23">
 <p>
時間経過で自動画面ロックしてくれないことに気づいた。
xautolockを入れることで解決した。
</p>
</div>
</div>
 <div id="outline-container-org349cde5" class="outline-3">
 <h3 id="org349cde5"> <a href="#org349cde5"> <span class="done DONE">DONE</span> Emacsで日本語入力</a></h3>
 <div class="outline-text-3" id="text-org349cde5">
 <p>
i3-wm + ibus-anthy + Emacsで日本語入力ができない問題。
この組み合わせでだけ起きる。
</p>

 <p>
Emacsだけならともかく、ほかのブラウザなどの操作と一貫性がなくなるのを避けたい。
ほかにも発生する人がいた。だいたい同じ環境変数の定義を示していて、いくつか試すなかでなんとかうまくいった。
</p>

 <p>
 <a href="https://raawaa.github.io/2016/05/05/input-with-ibus-on-emacs/">https://raawaa.github.io/2016/05/05/input-with-ibus-on-emacs/</a>
</p>

 <div class="org-src-container">
 <pre class="src src-shell"> <span class="org-builtin">export</span>  <span class="org-variable-name">LC_CTYPE</span>=ja_JP.UTF-8
 <span class="org-builtin">export</span>  <span class="org-variable-name">GTK_IM_MODULE</span>=ibus
 <span class="org-builtin">export</span>  <span class="org-variable-name">QT_IM_MODULE</span>=ibus
 <span class="org-builtin">export</span>  <span class="org-variable-name">XMODIFIERS</span>=@ <span class="org-variable-name">im</span>=ibus
</pre>
</div>

 <p>
重要なのは、この環境変数が評価されているセッションでEmacsを実行すること。
ibus側の設定ではなく、Emacs側にinput methodを教えてあげる環境変数、ということだ。
上をターミナルで実行してそのままemacsを実行すると、たぶんうまくいく。
</p>

 <p>
それを確かめてから、あとは  <code>.bashrc</code> に書き込む。ターミナルでemacsを起動すると日本語が打てる。
ランチャーから起動すると打てないので、ランチャー側を少しいじる必要がある。
</p>
</div>
</div>
 <div id="outline-container-org7394043" class="outline-3">
 <h3 id="org7394043"> <a href="#org7394043"> <span class="done DONE">DONE</span> ibusは透過させないようにする</a></h3>
 <div class="outline-text-3" id="text-org7394043">
 <p>
見えにくいので。
</p>
</div>
</div>
 <div id="outline-container-org9656c45" class="outline-3">
 <h3 id="org9656c45"> <a href="#org9656c45"> <span class="done DONE">DONE</span> suspendできるようにする</a></h3>
 <div class="outline-text-3" id="text-org9656c45">
 <p>
suspendボタンをpolybarに追加した。
</p>
</div>
</div>
 <div id="outline-container-orgd93cc27" class="outline-3">
 <h3 id="orgd93cc27"> <a href="#orgd93cc27"> <span class="done DONE">DONE</span> 仮想環境の使い方</a></h3>
 <div class="outline-text-3" id="text-orgd93cc27">
 <p>
gemとかnpmを使うときにどうしたらいいのか。
</p>
 <div class="org-src-container">
 <pre class="src src-shell">guix environment -C guix --network --ad-hoc ruby ruby-sinatra
</pre>
</div>
 <p>
みたく、仮想環境が作れるのだが、実際どう使えばいいのかわからない。
</p>

 <p>
当面はディレクトリにインストールしてそこで使うようにすればよい。
グローバルにインストールしなければ普通に使える。
</p>
</div>
</div>
 <div id="outline-container-org32d56ab" class="outline-3">
 <h3 id="org32d56ab"> <a href="#org32d56ab"> <span class="done DONE">DONE</span> 使えないキーがある</a></h3>
 <div class="outline-text-3" id="text-org32d56ab">
 <p>
たとえばM+<が使えない。単に  <code><</code> 入力と判定されてしまう。
alt+shiftが奪われてた問題と共通してるように見える。
</p>

 <p>
system.scmの “grp:alt_shift_toggle” を消してreconfigureしたら直った。
理解してない設定は危険だな。
</p>
</div>
</div>
 <div id="outline-container-org15bdc37" class="outline-3">
 <h3 id="org15bdc37"> <a href="#org15bdc37"> <span class="done DONE">DONE</span> 何かの拍子にカタカナ入力になってしまう</a></h3>
 <div class="outline-text-3" id="text-org15bdc37">
 <p>
ibusの何かショートカットを押している。
 <code>Ctrl+,</code> だった。
</p>
</div>
</div>
 <div id="outline-container-orgd36c2b5" class="outline-3">
 <h3 id="orgd36c2b5"> <a href="#orgd36c2b5"> <span class="done DONE">DONE</span> roamでセーブプロンプトが出る</a></h3>
 <div class="outline-text-3" id="text-orgd36c2b5">
 <p>
とてもうざい。
</p>

 <p>
時間経過で回復した。
</p>
</div>
</div>
 <div id="outline-container-org1e1f49e" class="outline-3">
 <h3 id="org1e1f49e"> <a href="#org1e1f49e"> <span class="done DONE">DONE</span> あるいはそれまでのつなぎで完全クローンを作成しておく</a></h3>
 <div class="outline-text-3" id="text-org1e1f49e">
 <p>
少なくとも今はうまく動いてるので。timeshift-gtkでできる。
</p>
</div>
</div>
</div>
 <div id="outline-container-org4afd62f" class="outline-2">
 <h2 id="org4afd62f"> <a href="#org4afd62f">References</a></h2>
 <div class="outline-text-2" id="text-org4afd62f">
</div>
 <div id="outline-container-org80ac261" class="outline-3">
 <h3 id="org80ac261"> <a href="#org80ac261"></a> <a href="https://savannah.gnu.org/maintenance/UsingGit/">UsingGit</a></h3>
 <div class="outline-text-3" id="text-org80ac261">
 <p>
guixのリポジトリ。
</p>
</div>
</div>
 <div id="outline-container-org3c7907e" class="outline-3">
 <h3 id="org3c7907e"> <a href="#org3c7907e"></a> <a href="https://guix.gnu.org/blog/2022/online-guix-days-2022-announcement-2/">Online Guix Day Conference: schedule released! — 2022 — Blog — GNU Guix</a></h3>
 <div class="outline-text-3" id="text-org3c7907e">
 <p>
カンファレンス2022。
</p>
</div>
</div>
 <div id="outline-container-orgdef9b7e" class="outline-3">
 <h3 id="orgdef9b7e"> <a href="#orgdef9b7e"></a> <a href="https://guix.gnu.org/blog/2022/online-guix-days-2022-announcement-1/">Announcing the second online Guix Days — 2022 — Blog — GNU Guix</a></h3>
</div>
 <div id="outline-container-org212a6e8" class="outline-3">
 <h3 id="org212a6e8"> <a href="#org212a6e8"></a> <a href="https://www.youtube.com/watch?v=7ZdMRLPZhFs">5 Reasons to Try Guix in 2022 - YouTube</a></h3>
 <div class="outline-text-3" id="text-org212a6e8">
 <p>
 <a href="20210915221421-systemcrafters.html#ID-fa497359-ae3f-494a-b24a-9822eefe67ad">System Crafters</a>の動画。
Guixを使うべき理由。仮想マシン上で実際に試す。
</p>
</div>
</div>
 <div id="outline-container-org15dc754" class="outline-3">
 <h3 id="org15dc754"> <a href="#org15dc754"></a> <a href="https://guix.gnu.org/manual/devel/en/html_node/Translating-Guix.html">Translating Guix (GNU Guix Reference Manual)</a></h3>
 <div class="outline-text-3" id="text-org15dc754">
 <p>
翻訳によるコミットのやり方。
</p>
</div>
</div>
 <div id="outline-container-org1801436" class="outline-3">
 <h3 id="org1801436"> <a href="#org1801436"></a> <a href="https://nonguix.org/">Cuirass</a></h3>
 <div class="outline-text-3" id="text-org1801436">
 <p>
guixのチャンネル。
</p>
</div>
</div>
 <div id="outline-container-org83ec3c1" class="outline-3">
 <h3 id="org83ec3c1"> <a href="#org83ec3c1"></a> <a href="https://wiki.ubuntulinux.jp/UbuntuTips/JapaneseEnvironment/IbusAnthy">UbuntuTips/JapaneseEnvironment/IbusAnthy - Ubuntu Japanese Wiki</a></h3>
 <div class="outline-text-3" id="text-org83ec3c1">
 <p>
IME Anthyのショートカット一覧。
</p>
</div>
</div>
 <div id="outline-container-org307cb06" class="outline-3">
 <h3 id="org307cb06"> <a href="#org307cb06"></a> <a href="https://www.draketo.de/software/guix-work.html">Using GNU Guix for software development</a></h3>
</div>
</div>
 <div id="outline-container-orgaa1d079" class="outline-2">
 <h2 id="orgaa1d079"> <a href="#orgaa1d079">Backlinks</a></h2>
 <div class="outline-text-2" id="text-orgaa1d079">
 <ul class="org-ul"> <li> <a href="./20210912124846-dotfiles.html">dotfiles</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20210525005710-gnu_guix.html"/>
  <id>https://kijimad.github.io/roam/20210525005710-gnu_guix.html</id>
  <updated>2025-06-14T00:00:00+09:00</updated>
</entry>
<entry>
  <title>Shell</title>
  <author><name>root</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orgc031238" class="outline-2">
 <h2 id="orgc031238"> <a href="#orgc031238">概要</a></h2>
 <div class="outline-text-2" id="text-orgc031238">
 <p>
シェルスクリプトはUnixシェルで使われる <a href="20210509101246-programming_language.html#ID-868ac56a-2d42-48d7-ab7f-7047c85a8f39">Programming Language</a>。
</p>
</div>
</div>
 <div id="outline-container-org16c70f7" class="outline-2">
 <h2 id="org16c70f7"> <a href="#org16c70f7">Memo</a></h2>
 <div class="outline-text-2" id="text-org16c70f7">
</div>
 <div id="outline-container-orgfd4f038" class="outline-3">
 <h3 id="orgfd4f038"> <a href="#orgfd4f038">bluetoothデバイス再起動</a></h3>
 <div class="outline-text-3" id="text-orgfd4f038">
 <p>
systemctlでbluetoothサービスを再起動しても、bluetoothアダプタを認識しなくなることがある。カーネルモジュールを再起動すると直る。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 1: </span>カーネルモジュールを再起動する</label> <pre class="src src-shell">sudo modprobe -r btusb
sudo modprobe btusb
</pre>
</div>
</div>
</div>
 <div id="outline-container-org4f88230" class="outline-3">
 <h3 id="org4f88230"> <a href="#org4f88230">ファイルが配置されているディレクトリをカレントディレクトリとする</a></h3>
 <div class="outline-text-3" id="text-org4f88230">
 <p>
ディレクトリが関係するシェルスクリプトの場合、実行場所によって結果が変わってしまうことがある。最初にファイルが配置されているディレクトリに移動すればどこでも実行できるようになる。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 2: </span>/tmp/test.sh にある場合、そこに移動する</label> <pre class="src src-shell"> <span class="org-builtin">cd</span>  <span class="org-sh-quoted-exec">`dirname $0`</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-org6a67074" class="outline-3">
 <h3 id="org6a67074"> <a href="#org6a67074">高速転送</a></h3>
 <div class="outline-text-3" id="text-org6a67074">
 <p>
 <a href="https://qiita.com/ueokande/items/99710724d26c810f7c32">SSH経由のディレクトリ転送を効率的に行う #Linux - Qiita</a>のメモ。
</p>

 <p>
SSHで大きなディレクトリを転送したいときが稀にある。普通に考えるとscp(と再帰オプション)で送るものだが、tar+sshで送ると圧倒的に早い。ファイル1つ1つ送るscpは時間がかかる。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 3: </span>早い</label> <pre class="src src-shell">tar cf - <ローカル> | ssh <ホスト>  <span class="org-string">'tar xf - -C <転送先>'</span>
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 4: </span>遅い</label> <pre class="src src-shell">scp -C -r data {HOST}:/dest
</pre>
</div>
</div>
</div>
 <div id="outline-container-org2e1733a" class="outline-3">
 <h3 id="org2e1733a"> <a href="#org2e1733a">xオプションでデバッグする</a></h3>
 <div class="outline-text-3" id="text-org2e1733a">
 <p>
xオプションを使うと、実行トレースを表示する。デバッグに使える。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 5: </span>xオプション</label> <pre class="src src-shell">bash -x example.sh
</pre>
</div>
</div>
</div>
 <div id="outline-container-org6e7d2da" class="outline-3">
 <h3 id="org6e7d2da"> <a href="#org6e7d2da">プログラムの実行状態を表示する</a></h3>
 <div class="outline-text-3" id="text-org6e7d2da">
 <p>
キャリッジリターンのよくある利用法の1つは、プログラムの実行状態を表示するために用いるというもの。毎回行頭に戻り、直前に表示した文字列を上書きしているので、パーセントだけが変わっているように見える。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 6: </span>実行状態を表示するのに用いる</label> <pre class="src src-shell"> <span class="org-comment-delimiter">#</span> <span class="org-comment">! /bin/</span> <span class="org-keyword">sh</span>
 <span class="org-keyword">for</span> i <span class="org-keyword"> in</span>  <span class="org-sh-quoted-exec">`seq 100`</span>
 <span class="org-keyword">do</span>
    printf  <span class="org-string">'Loading object files...%3d%%\r'</span> $ <span class="org-variable-name">i</span>
    sleep 0.05
 <span class="org-keyword">done</span>
 <span class="org-builtin">echo</span>  <span class="org-string">'Loading object files ... Done'</span>
</pre>
</div>

 <p>
 <a href="https://www.amazon.co.jp/%E7%8B%AC%E7%BF%92%E3%82%A2%E3%82%BB%E3%83%B3%E3%83%96%E3%83%A9-%E6%96%B0%E7%89%88-%E5%A4%A7%E5%B4%8E-%E5%8D%9A%E4%B9%8B/dp/4798170291">独習アセンブラ</a>に載っていた。
</p>
</div>
</div>
 <div id="outline-container-org90d9096" class="outline-3">
 <h3 id="org90d9096"> <a href="#org90d9096">水平タブは表を揃えるのに便利</a></h3>
 <div class="outline-text-3" id="text-org90d9096">
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 7: </span>文字の長さに幅があってやや表示が崩れているが、揃って見やすい</label> <pre class="src src-shell">ls -l . | awk  <span class="org-string">'{ printf "%s\t%s\t%s\n", $9,$5,$3 }'</span> | head
</pre>
</div>

 <div class="results" id="org1703968">
 <p>

</p>

 <p>
20210508233810-org_roam.org 15343	orange
20210508234743-emacs.org	63296	orange
20210509095513-ruby.org	59766	orange
20210509095946-rails.org	57004	orange
20210509100112-javascript.org	26017	orange
20210509101246-programming_language.org 29086	orange
20210509122633-emacs_lisp.org 55114	orange
20210511013549-textlint.org	11189	orange
20210512001700-create_link.org 9776	orange
</p>

</div>

 <p>
タブを使わないバージョン。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 8: </span>タブを使わない場合、ガタガタして見にくい</label> <pre class="src src-shell">ls -l . | awk  <span class="org-string">'{ printf "%s, %s, %s\n", $9,$5,$3 }'</span> | head
</pre>
</div>

 <div class="results" id="org7f59d12">
 <p>
, ,
20210508233810-org_roam.org, 15343, orange
20210508234743-emacs.org, 63296, orange
20210509095513-ruby.org, 59766, orange
20210509095946-rails.org, 57004, orange
20210509100112-javascript.org, 26017, orange
20210509101246-programming_language.org, 29086, orange
20210509122633-emacs_lisp.org, 55114, orange
20210511013549-textlint.org, 11189, orange
20210512001700-create_link.org, 9776, orange
</p>

</div>
</div>
</div>
 <div id="outline-container-orgceda280" class="outline-3">
 <h3 id="orgceda280"> <a href="#orgceda280">sudoでセットされる環境変数は異なる</a></h3>
 <div class="outline-text-3" id="text-orgceda280">
 <p>
普通の実行時とsudo時で、セットされている環境変数は異なる。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 9: </span>これらは異なる結果になる</label> <pre class="src src-shell"> <span class="org-builtin">export</span>  <span class="org-variable-name">TEST</span>=1
env  <span class="org-comment-delimiter"># </span> <span class="org-comment">これはTESTを含む</span>
sudo env  <span class="org-comment-delimiter"># </span> <span class="org-comment">TESTがない</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-org9fbf731" class="outline-3">
 <h3 id="org9fbf731"> <a href="#org9fbf731">シェルのバックグラウンド実行</a></h3>
 <div class="outline-text-3" id="text-org9fbf731">
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 10: </span>再帰で処理する</label> <pre class="src src-git-permalink">https://github.com/kd-collective/NetBSD/blob/89341ae2e1875e7f91cefa9b1dcc0e4549edcde0/bin/sh/jobs.c#L1716-L1865
</pre>
</div>

 <div class="results" id="orga29cd57">
 <p>
STATIC void
cmdtxt(union node *n)
{
	union node *np;
	struct nodelist *lp;
	const char *p;
	int i;
</p>

 <p>
	if (n  <code>= NULL || cmdnleft <</code> 0)
		return;
	switch (n->type) {
	case NSEMI:
		cmdtxt(n->nbinary.ch1);
		cmdputs(“; ”);
		cmdtxt(n->nbinary.ch2);
		break;
	case NAND:
		cmdtxt(n->nbinary.ch1);
		cmdputs(“ && ”);
		cmdtxt(n->nbinary.ch2);
		break;
	case NOR:
		cmdtxt(n->nbinary.ch1);
		cmdputs(“ || ”);
		cmdtxt(n->nbinary.ch2);
		break;
	case NDNOT:
		cmdputs(“! ”);
		 <i>* FALLTHROUGH *</i>
	case NNOT:
		cmdputs(“! ”);
		cmdtxt(n->nnot.com);
		break;
	case NPIPE:
		for (lp = n->npipe.cmdlist ; lp ; lp = lp->next) {
			cmdtxt(lp->n);
			if (lp->next)
				cmdputs(“ | ”);
		}
		if (n->npipe.backgnd)
			cmdputs(“ &”);
		break;
	case NSUBSHELL:
		cmdputs(“(”);
		cmdtxt(n->nredir.n);
		cmdputs(“)”);
		break;
	case NREDIR:
	case NBACKGND:
		cmdtxt(n->nredir.n);
		break;
	case NIF:
		cmdputs(“if ”);
		cmdtxt(n->nif.test);
		cmdputs(“; then ”);
		cmdtxt(n->nif.ifpart);
		if (n->nif.elsepart) {
			cmdputs(“; else ”);
			cmdtxt(n->nif.elsepart);
		}
		cmdputs(“; fi”);
		break;
	case NWHILE:
		cmdputs(“while ”);
		goto until;
	case NUNTIL:
		cmdputs(“until ”);
 until:
		cmdtxt(n->nbinary.ch1);
		cmdputs(“; do ”);
		cmdtxt(n->nbinary.ch2);
		cmdputs(“; done”);
		break;
	case NFOR:
		cmdputs(“for ”);
		cmdputs(n->nfor.var);
		cmdputs(“ in ”);
		cmdlist(n->nfor.args, 1);
		cmdputs(“; do ”);
		cmdtxt(n->nfor.body);
		cmdputs(“; done”);
		break;
	case NCASE:
		cmdputs(“case ”);
		cmdputs(n->ncase.expr->narg.text);
		cmdputs(“ in ”);
		for (np = n->ncase.cases; np; np = np->nclist.next) {
			cmdtxt(np->nclist.pattern);
			cmdputs(“) ”);
			cmdtxt(np->nclist.body);
			switch (n->type) {	 <i>* switch (not if) for later *</i>
			case NCLISTCONT:
				cmdputs(“;& ”);
				break;
			default:
				cmdputs(“;; ”);
				break;
			}
		}
		cmdputs(“esac”);
		break;
	case NDEFUN:
		cmdputs(n->narg.text);
		cmdputs(“() { … }”);
		break;
	case NCMD:
		cmdlist(n->ncmd.args, 1);
		cmdlist(n->ncmd.redirect, 0);
		if (n->ncmd.backgnd)
			cmdputs(“ &”);
		break;
	case NARG:
		cmdputs(n->narg.text);
		break;
	case NTO:
		p = “>”;  i = 1;  goto redir;
	case NCLOBBER:
		p = “>|”;  i = 1;  goto redir;
	case NAPPEND:
		p = “>>”;  i = 1;  goto redir;
	case NTOFD:
		p = “>&”;  i = 1;  goto redir;
	case NFROM:
		p = “<”;  i = 0;  goto redir;
	case NFROMFD:
		p = “<&”;  i = 0;  goto redir;
	case NFROMTO:
		p = “<>”;  i = 0;  goto redir;
 redir:
		if (n->nfile.fd != i)
			cmdputi(n->nfile.fd);
		cmdputs(p);
		if (n->type  <code>= NTOFD || n->type =</code> NFROMFD) {
			if (n->ndup.dupfd < 0)
				cmdputs(“-”);
			else
				cmdputi(n->ndup.dupfd);
		} else {
			cmdtxt(n->nfile.fname);
		}
		break;
	case NHERE:
	case NXHERE:
		cmdputs(“<<…”);
		break;
	default:
		cmdputs(“???”);
		break;
	}
}
</p>

</div>
</div>
</div>
 <div id="outline-container-org7ec301d" class="outline-3">
 <h3 id="org7ec301d"> <a href="#org7ec301d">カレントディレクトリのファイルサイズ</a></h3>
 <div class="outline-text-3" id="text-org7ec301d">
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 11: </span>-s: 総容量だけ、-h 適当なファイルサイズで表示</label> <pre class="src src-shell">du -sh .
</pre>
</div>

 <div class="results" id="org6510779">
 <p>
388M	.
</p>

</div>
</div>
</div>
 <div id="outline-container-org0e5eaff" class="outline-3">
 <h3 id="org0e5eaff"> <a href="#org0e5eaff">ファイルサイズのランキング</a></h3>
 <div class="outline-text-3" id="text-org0e5eaff">
 <p>
サイズ順に、もっとも大きい10ディレクトリを表示する。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 12: </span>-s: 総容量だけ、 -k キロバイト</label> <pre class="src src-shell">du -sk * | sort -rn | head -10
</pre>
</div>

 <div class="results" id="org1e4dfcd">
 <p>
360676	node_modules
3696	public
196	package-lock.json
124	20210624232811-digger.org
100	20210910122240-bookmarks.org
72	20210926143813-clojure.org
68	20210907223510-haskell.org
64	20210508234743-emacs.org
56	20210911113057-go.org
56	20210901101339-rust.org
</p>

</div>

 <p>
比較するディレクトリサイズによって単位オプションをKBやMBにする。ソートが機能しなくなるので-hオプションは使用しない。
</p>
</div>
</div>
 <div id="outline-container-org1a050e2" class="outline-3">
 <h3 id="org1a050e2"> <a href="#org1a050e2">エラー: 公開鍵を利用できないため、以下の署名は検証できませんでした を解決する</a></h3>
 <div class="outline-text-3" id="text-org1a050e2">
 <p>
sudo apt-get updateしたとき、GPGエラーが出る解決法。
</p>

 <blockquote>
 <p>
GPG エラー:  <a href="https://">https://</a>…. focal InRelease: 公開鍵を利用できないため、以下の署名は検証できませんでした: NO_PUBKEY …
</p>
</blockquote>

 <p>
表示されているpubkeyをコピペして、追加する。
</p>

 <div class="org-src-container">
 <pre class="src src-shell">sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys aaaaaa...  <span class="org-comment-delimiter"># </span> <span class="org-comment">aaaaaa...に、公開鍵を利用できないため、以下の署名は検証できませんでした: NO_PUBKEY ...← を入れる</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-org9b7987c" class="outline-3">
 <h3 id="org9b7987c"> <a href="#org9b7987c">cinnamonを再起動する</a></h3>
 <div class="outline-text-3" id="text-org9b7987c">
 <p>
ウィンドウマネージャを再起動したいときがある。
</p>
 <div class="org-src-container">
 <pre class="src src-shell">cinnamon --replace
</pre>
</div>
</div>
</div>
 <div id="outline-container-org63dd70a" class="outline-3">
 <h3 id="org63dd70a"> <a href="#org63dd70a">sourceコマンド</a></h3>
 <div class="outline-text-3" id="text-org63dd70a">
 <p>
sourceは環境変数関係を再読み込みするのによく使う。
 <code>source ~~/.bashrc</code> みたいに。
</p>

 <p>
bashでは、  <code>.</code> でもできる。
つまり、  <code>. ~~/.bashrc</code> と書いても同じ意味になる。
</p>
</div>
</div>
 <div id="outline-container-org991676c" class="outline-3">
 <h3 id="org991676c"> <a href="#org991676c">sshが切れたときに処理が止まらないようにする</a></h3>
 <div class="outline-text-3" id="text-org991676c">
 <p>
nohupをつけて実行すると、SSHが切れても実行され続ける。
</p>
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 13: </span>ssh先のターミナルにて</label> <pre class="src src-shell">nohup make long_job &
</pre>
</div>

 <p>
 <a href="https://qiita.com/f0o0o/items/7f9dfaf3f7392c0ce52f">sshが切れた時に処理が止まらないようにする - Qiita</a>
</p>
</div>
</div>
 <div id="outline-container-org30329dd" class="outline-3">
 <h3 id="org30329dd"> <a href="#org30329dd">コマンドの実行と出力結果を記録する</a></h3>
 <div class="outline-text-3" id="text-org30329dd">
 <p>
 <code>script</code> コマンドが便利。
実行してオンになると、  <code>exit</code> するまでの履歴をファイルに保存できる。
</p>

 <p>
 <a href="https://staffblog.amelieff.jp/entry/2020/04/20/130000">簡単にコマンドの実行ログをファイルに記録する方法 - アメリエフの技術ブログ</a>
</p>
</div>
</div>
 <div id="outline-container-org0ce375c" class="outline-3">
 <h3 id="org0ce375c"> <a href="#org0ce375c">踏み台を経由したssh</a></h3>
 <div class="outline-text-3" id="text-org0ce375c">
 <p>
普通にやると、2回sshコマンドを実行するので面倒。
configに記入しておいて、一度に実行する。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 14: </span>.ssh/config</label> <pre class="src src-nil">Host <alias_name>
  HostName <target_server>
  User <target_user>
  IdentityFile <target_id_rsa>
  ProxyCommand ssh -W %h:%p -i <bastion_id_rsa> -p <bastion_port> <bastion_user>@<bastion_server>
</pre>
</div>

 <p>
 <a href="https://qiita.com/hkak03key/items/3b0c4752bfbcc52e676d">踏み台サーバを飛び越えて一発で目的のサーバへsshする方法 - Qiita</a>
</p>
</div>
</div>
 <div id="outline-container-org3f69f65" class="outline-3">
 <h3 id="org3f69f65"> <a href="#org3f69f65">input関係の設定を.bash_profile等でしてはいけない理由</a></h3>
 <div class="outline-text-3" id="text-org3f69f65">
 <p>
 <a href="https://wiki.archlinux.jp/index.php/Fcitx#.E6.97.A5.E6.9C.AC.E8.AA.9E">Fcitx - ArchWiki</a>
</p>

 <blockquote>
 <p>
上記の設定を .bashrc でしないでください。.bashrc はインタラクティブな bash セッションを初期化するときに使われます。インタラクティブでないセッションや X セッションの初期化では用いられません。さらに、.bashrc で環境変数を設定すると、コマンドラインから実行した診断ツールに誤解を与えて、X セッションでは環境変数が使われていないのに正しく設定されているかのように表示されることがあります。
</p>
</blockquote>
</div>
</div>
 <div id="outline-container-org01037c9" class="outline-3">
 <h3 id="org01037c9"> <a href="#org01037c9">cronで通知する</a></h3>
 <div class="outline-text-3" id="text-org01037c9">
 <p>
cronで時報を通知したいけど、表示されないことがある。これはcronがCLI向けのコマンドであって、画面出力があることを想定してないから。
</p>

 <p>
指定する。普通はこれでOK。
</p>
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 15: </span>GUIが関係するコマンドを実行するときはDISPLAY=:0をつける</label> <pre class="src src-shell"> <span class="org-builtin">export</span>  <span class="org-variable-name">DISPLAY</span>=:0 && notify-send  <span class="org-string">"時報"</span>  <span class="org-string">"$(date +\%H):00!"</span>
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 16: </span>実行ログを見る</label> <pre class="src src-shell">cat /var/log/syslog
</pre>
</div>

 <p>
 <a href="20210905140122-exwm.html#ID-eb196529-bdbd-48c5-9d5b-a156fe5c2f41">EXWM</a> + dunstの環境でうまくいかなかった。
DBUS_SESSION_BUS_ADDRESSの設定が必要なよう。参考サイトをコピペすると通知できるようになった。
</p>
 <div class="org-src-container">
 <pre class="src src-shell">00 * * * *  <span class="org-variable-name">DISPLAY</span>=:0  <span class="org-variable-name">DBUS_SESSION_BUS_ADDRESS</span>=unix: <span class="org-variable-name">path</span>=/run/user/1000/bus setpriv --euid=1000 notify-send  <span class="org-string">"Timebot"</span>  <span class="org-string">"$(date +\%H):00!"</span>
</pre>
</div>
 <p>
 <a href="https://bbs.archlinux.org/viewtopic.php?id=223050">Cannot run notify-send from cron job / Newbie Corner / Arch Linux Forums</a>
</p>
</div>
</div>
 <div id="outline-container-org35d6843" class="outline-3">
 <h3 id="org35d6843"> <a href="#org35d6843">xargsで一括削除</a></h3>
 <div class="outline-text-3" id="text-org35d6843">
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 17: </span>.logファイルを一括削除する</label> <pre class="src src-shell">find . -name  <span class="org-string">"*.log"</span> | xargs rm -fv
</pre>
</div>

 <p>
findでファイルのリストを作成して、xargsに渡す。
xargsはファイルを1つずつrmに渡す。
</p>

 <p>
xargsにはdry-runモードがある。
</p>
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 18: </span>pオプションがついてると生成コマンドを確認するだけで実行しない</label> <pre class="src src-shell">find . -name  <span class="org-string">"*.log"</span> | xargs -p rm -fv
</pre>
</div>

 <p>
 <a href="https://techblog.kyamanak.com/entry/2018/02/12/202256">【Linux】xargs コマンドの使い方がよく分からない - きゃまなかのブログ</a>
</p>
</div>
</div>
 <div id="outline-container-orga7b6c4f" class="outline-3">
 <h3 id="orga7b6c4f"> <a href="#orga7b6c4f">xargsでリポジトリ内一括置換</a></h3>
 <div class="outline-text-3" id="text-orga7b6c4f">
 <p>
git grep、xargs、sedを組み合わせる。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 19: </span>リポジトリの2.6.5という文字列を2.7.1に置換する例</label> <pre class="src src-shell">git grep -l  <span class="org-string">'2\.6\.5'</span> | xargs sed -i  <span class="org-string">'s/2\.6\.5/2.7.1/g'</span>
</pre>
</div>

 <ul class="org-ul"> <li>git grepの  <code>l</code> オプションはヒットしたファイル名を出力する。</li>
 <li>xargsは標準出力からリストを読み込み、出力を次のコマンドの引数に渡すコマンド。</li>
 <li>sedは置換。  <code>i</code> オプションは結果を画面出力しないオプション。 本来は  <code>sed -i "s/aaa/bbb/s" Gemfile</code> みたいな順だが、xargsで自動で渡されている。</li>
</ul></div>
</div>
 <div id="outline-container-orgf5b7c02" class="outline-3">
 <h3 id="orgf5b7c02"> <a href="#orgf5b7c02">一括git clone</a></h3>
 <div class="outline-text-3" id="text-orgf5b7c02">
 <p>
 <a href="20210926103926-github.html#ID-6b889822-21f1-4a3e-9755-e3ca52fa0bc4">GitHub</a>から、
個人 or 組織のリポジトリをすべてダウンロードする方法。
</p>
 <div class="org-src-container">
 <pre class="src src-shell">curl https://api.github.com/users/{USER}/repos? <span class="org-variable-name">per_page</span>=100 | jq .[].ssh_url | xargs -n 1 git clone
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-shell">curl https://api.github.com/orgs/{ORG}/repos? <span class="org-variable-name">per_page</span>=100  | jq .[].ssh_url | xargs -n 1 git clone
</pre>
</div>

 <p>
 <code>?per_page=100</code> をつけないとデフォルトの30件しか取ってこないので注意。
100を超えるとページを指定する必要がある。
</p>

 <ul class="org-ul"> <li> <a href="https://tic40.hatenablog.com/entry/2018/03/26/073000">https://tic40.hatenablog.com/entry/2018/03/26/073000</a></li>
</ul> <p>
参考に読む用リポジトリは、organizationにまとめておく。
ローカルですぐ閲覧できて便利。
</p>
</div>
</div>
 <div id="outline-container-org32ae257" class="outline-3">
 <h3 id="org32ae257"> <a href="#org32ae257">Cinnamonのコントロールパネルを出す</a></h3>
 <div class="outline-text-3" id="text-org32ae257">
 <p>
これが起動できればサウンドやディスプレイ設定もできる。
</p>
 <div class="org-src-container">
 <pre class="src src-shell">cinnamon-settings
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgd2aa4a1" class="outline-3">
 <h3 id="orgd2aa4a1"> <a href="#orgd2aa4a1">失敗時例外を出す</a></h3>
 <div class="outline-text-3" id="text-orgd2aa4a1">
 <div class="org-src-container">
 <pre class="src src-shell"> <span class="org-comment-delimiter">#</span> <span class="org-comment">!/bin/</span> <span class="org-keyword">bash</span>

 <span class="org-builtin">set</span> -e

 <span class="org-comment-delimiter"># </span> <span class="org-comment">...</span>
</pre>
</div>
 <p>
というように、しておくと、実行時できなかったときにエラーメッセージを出す。
何も指定しないと、どこで失敗したのか把握するのが困難。
ローカル環境だといいのだが、CIだと確認コストがかかるので必ず指定しておくとよい。
</p>
</div>
</div>
 <div id="outline-container-org89314a3" class="outline-3">
 <h3 id="org89314a3"> <a href="#org89314a3">デバッグメッセージ出力</a></h3>
 <div class="outline-text-3" id="text-org89314a3">
 <div class="org-src-container">
 <pre class="src src-shell"> <span class="org-comment-delimiter">#</span> <span class="org-comment">!/bin/</span> <span class="org-keyword">bash</span> <span class="org-comment"> -x</span>

 <span class="org-comment-delimiter"># </span> <span class="org-comment">...</span>
</pre>
</div>
 <p>
-xをつけると評価結果を逐一出力する。
</p>
</div>
</div>
 <div id="outline-container-org3bc1749" class="outline-3">
 <h3 id="org3bc1749"> <a href="#org3bc1749">GNOMEの音量調整</a></h3>
 <div class="outline-text-3" id="text-org3bc1749">
 <div class="org-src-container">
 <pre class="src src-shell">pactl set-sink-volume @DEFAULT_SINK@ +5%
pactl set-sink-volume @DEFAULT_SINK@ -5%
</pre>
</div>
</div>
</div>
 <div id="outline-container-org88e140e" class="outline-3">
 <h3 id="org88e140e"> <a href="#org88e140e">カレントディレクトリ行数カウント</a></h3>
 <div class="outline-text-3" id="text-org88e140e">
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 20: </span>行数カウント</label> <pre class="src src-shell">wc -l  <span class="org-sh-quoted-exec">`find ./ -name '*.el'`</span>
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 21: </span>文字数カウント</label> <pre class="src src-shell">git ls-files *.org | xargs wc -c | sort -n
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgdca60fe" class="outline-3">
 <h3 id="orgdca60fe"> <a href="#orgdca60fe">ディレクトリの全ファイルで実行する</a></h3>
 <div class="outline-text-3" id="text-orgdca60fe">
 <div class="org-src-container">
 <pre class="src src-shell"> <span class="org-keyword">for</span> file <span class="org-keyword"> in</span>  <span class="org-sh-quoted-exec">`\find ./src -name '*.py'`</span>;
 <span class="org-keyword">do</span>
 <span class="org-builtin">echo</span> $ <span class="org-variable-name">file</span>
python $ <span class="org-variable-name">file</span> | sed -e s/.*[0-9]m// >> ./docs/query.org
 <span class="org-keyword">done</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgfa90f1e" class="outline-3">
 <h3 id="orgfa90f1e"> <a href="#orgfa90f1e">port検索する</a></h3>
 <div class="outline-text-3" id="text-orgfa90f1e">
 <p>
port already in used. が出たとき。
</p>

 <p>
プロセスを探す。
</p>
 <div class="org-src-container">
 <pre class="src src-shell">sudo lsof -i:5432
</pre>
</div>

 <p>
ポートを使ってるプロセスを削除する。
</p>
 <div class="org-src-container">
 <pre class="src src-shell">sudo lsof -t -i tcp:5432 | sudo xargs kill -9
</pre>
</div>
</div>
</div>
 <div id="outline-container-org8530c45" class="outline-3">
 <h3 id="org8530c45"> <a href="#org8530c45">LinuxでWindowsのブートメディアを作成する</a></h3>
 <div class="outline-text-3" id="text-org8530c45">
 <p>
woeusbというパッケージをインストールして行う。
</p>
 <div class="org-src-container">
 <pre class="src src-shell">sudo add-apt-repository ppa:tomtomtom/woeusb
sudo apt update && sudo apt install woeusb-frontend-wxgtk
</pre>
</div>
 <p>
 <a href="https://www.omgubuntu.co.uk/2017/06/create-bootable-windows-10-usb-ubuntu">https://www.omgubuntu.co.uk/2017/06/create-bootable-windows-10-usb-ubuntu</a>
</p>
</div>
</div>
 <div id="outline-container-org5a698c9" class="outline-3">
 <h3 id="org5a698c9"> <a href="#org5a698c9">aptコマンド</a></h3>
 <div class="outline-text-3" id="text-org5a698c9">
 <p>
aptはdebian系ディストリビューションで用いられるパッケージマネージャ。
</p>
 <ul class="org-ul"> <li>パッケージ検索</li>
</ul> <div class="org-src-container">
 <pre class="src src-shell">apt search libffi
</pre>
</div>
</div>
</div>
 <div id="outline-container-org0d97ca3" class="outline-3">
 <h3 id="org0d97ca3"> <a href="#org0d97ca3">suspendする</a></h3>
 <div class="outline-text-3" id="text-org0d97ca3">
 <p>
コマンドでサスペンドする方法。
</p>

 <p>
Ubuntuのとき。
</p>
 <div class="org-src-container">
 <pre class="src src-shell">systemctl suspend -i
</pre>
</div>

 <p>
GNU Guixのとき。
</p>
 <div class="org-src-container">
 <pre class="src src-shell">loginctl suspend
</pre>
</div>
</div>
</div>
 <div id="outline-container-org7bf0121" class="outline-3">
 <h3 id="org7bf0121"> <a href="#org7bf0121">プロセスを止める</a></h3>
 <div class="outline-text-3" id="text-org7bf0121">
 <p>
簡単に検索、killできる。
</p>
 <div class="org-src-container">
 <pre class="src src-shell">pgrep firefox
pkill firefox
</pre>
</div>
</div>
</div>
</div>
 <div id="outline-container-orgf59aa30" class="outline-2">
 <h2 id="orgf59aa30"> <a href="#orgf59aa30">Tasks</a></h2>
 <div class="outline-text-2" id="text-orgf59aa30">
</div>
 <div id="outline-container-org08025d8" class="outline-3">
 <h3 id="org08025d8"> <a href="#org08025d8"></a> <a href="https://hackmd.io/@jyami/HJzohRn2D">シェルってなに？コマンドラインインタプリタってなに？ - シェルもどきをgoで自作する#1 - HackMD</a></h3>
 <div class="outline-text-3" id="text-org08025d8">
 <p>
シェルを自作する。
</p>
</div>
</div>
 <div id="outline-container-org730b16e" class="outline-3">
 <h3 id="org730b16e"> <a href="#org730b16e"> <span class="todo TODO">TODO</span> </a> <a href="https://qiita.com/ko1nksm/items/9650ed1fc21d668f2732">シェルスクリプトは変数代入で = の前後にスペースを置けない！･･･の本当の理由を知ると優れた文法が見えてくる - Qiita</a></h3>
 <div class="outline-text-3" id="text-org730b16e">
 <p>
詳しい解説。
</p>
</div>
</div>
 <div id="outline-container-org58974d2" class="outline-3">
 <h3 id="org58974d2"> <a href="#org58974d2"> <span class="todo TODO">TODO</span> </a> <a href="https://www.itmedia.co.jp/enterprise/articles/0811/20/news019.html">インストール済みUbuntuのクローンを新しいハードディスクに作成する：Linux Hacks（1/2 ページ） - ITmedia エンタープライズ</a></h3>
 <div class="outline-text-3" id="text-org58974d2">
 <p>
まとめておく。
</p>
</div>
</div>
</div>
 <div id="outline-container-org593482a" class="outline-2">
 <h2 id="org593482a"> <a href="#org593482a">References</a></h2>
 <div class="outline-text-2" id="text-org593482a">
</div>
 <div id="outline-container-org95e456c" class="outline-3">
 <h3 id="org95e456c"> <a href="#org95e456c"></a> <a href="https://github.com/stedolan/jq">stedolan/jq: Command-line JSON processor</a></h3>
 <div class="outline-text-3" id="text-org95e456c">
 <p>
jsonを扱う便利コマンド。
</p>
</div>
</div>
</div>
 <div id="outline-container-org02a708c" class="outline-2">
 <h2 id="org02a708c"> <a href="#org02a708c">Backlinks</a></h2>
 <div class="outline-text-2" id="text-org02a708c">
 <ul class="org-ul"> <li> <a href="./20210508234743-emacs.html">Emacs</a></li>
 <li> <a href="./20210831231046-fish.html">fish</a></li>
 <li> <a href="./20210901101339-rust.html">Rust</a></li>
 <li> <a href="./20210922010155-nushell.html">nushell</a></li>
 <li> <a href="./20240213T235930--kdoc-94-2>1の意味__wiki.html">KDOC 94: 2>&1の意味</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20210606192338-shell.html"/>
  <id>https://kijimad.github.io/roam/20210606192338-shell.html</id>
  <updated>2025-06-14T00:00:00+09:00</updated>
</entry>
<entry>
  <title>Learning</title>
  <author><name>root</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org7baf099" class="outline-2">
 <h2 id="org7baf099"> <a href="#org7baf099">概要</a></h2>
 <div class="outline-text-2" id="text-org7baf099">
 <p>
プログラムの学び方についてまとめる。
</p>

 <p>
ほかのページに比べて主観的なポエムが多くを占める。
プログラムの学び方についてよく考えるのは、すごくできる人と平均的にできる差が非常に大きいためだ。すごくできるプログラマは平均的なプログラマ100人分の仕事をする、なんてざらにある。ほかの職業でここまで明確に差が出ることは少ない。
</p>

 <p>
 <a href="20210926150327-oss.html#ID-bb71747d-8599-4aee-b747-13cb44c05773">OSS</a>の99％は、1% ~ 0.1%のプログラマが支えているように見える。そのプロジェクトの作者でもあったのか、ということはよくある。偉大な人はさらに何かを生み出し続け、人類を辞めていくようだ。
</p>

 <p>
この大きな違いをもたらしているのは、まず1つは頭の作りが違うとかそういうことだ。しかしこれは先天的なものが大きいのと、脳の動きを再現できないのでなんとも言えない。
違いをもたらすように見える2つ目は、学ぶ方法だ。これは再現可能だし、希望的・建設的なのでよく観察する価値がある。
</p>
</div>
</div>
 <div id="outline-container-orgd3a5570" class="outline-2">
 <h2 id="orgd3a5570"> <a href="#orgd3a5570">Memo</a></h2>
 <div class="outline-text-2" id="text-orgd3a5570">
</div>
 <div id="outline-container-org8d382fb" class="outline-3">
 <h3 id="org8d382fb"> <a href="#org8d382fb">正しい訓練をやる</a></h3>
 <div class="outline-text-3" id="text-org8d382fb">
 <p>
 <code>『超一流になるのは才能か努力か?』</code> から。
</p>

 <ol class="org-ol"> <li>現状よりも高い具体的な目標のある練習を</li>
 <li>集中して</li>
 <li>フィードバックを受けながら</li>
 <li>居心地の悪い状態で</li>
 <li>継続する</li>
</ol> <p>
メモ。
</p>

 <ul class="org-ul"> <li>「楽しいことだから、いつまでも没頭して練習を続けられる」というのは誤り</li>
 <li>どんなトップパフォーマンスを弾き出す人でも、限界的練習は苦しい</li>
 <li>「努力しつづけなさい、そうすれば目標を達成できる」は間違っている。正しい訓練を、十分な期間にわたって継続することが向上につながる</li>
</ul></div>
</div>
</div>
 <div id="outline-container-org0f25090" class="outline-2">
 <h2 id="org0f25090"> <a href="#org0f25090">Tasks</a></h2>
</div>
 <div id="outline-container-orga02595d" class="outline-2">
 <h2 id="orga02595d"> <a href="#orga02595d">References</a></h2>
</div>
 <div id="outline-container-orgd5d2eaa" class="outline-2">
 <h2 id="orgd5d2eaa"> <a href="#orgd5d2eaa">Archives</a></h2>
 <div class="outline-text-2" id="text-orgd5d2eaa">
</div>
 <div id="outline-container-org77bfe49" class="outline-3">
 <h3 id="org77bfe49"> <a href="#org77bfe49"> <span class="done DONE">DONE</span> changelogを読みやすく</a></h3>
 <div class="outline-text-3" id="text-org77bfe49">
 <p>
elfeedを設定した。
</p>
</div>
</div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20210615101425-learning.html"/>
  <id>https://kijimad.github.io/roam/20210615101425-learning.html</id>
  <updated>2025-06-14T00:00:00+09:00</updated>
</entry>
<entry>
  <title>project</title>
  <author><name>root</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org31c1f4f" class="outline-2">
 <h2 id="org31c1f4f"> <a href="#org31c1f4f">Project</a></h2>
 <div class="outline-text-2" id="text-org31c1f4f">
 <p>
よいプロジェクトの条件として思い浮かぶこと。
</p>

 <ul class="org-ul"> <li>ワクワクすること</li>
 <li>1ヶ月以内で終わること</li>
 <li>何か形として残ること</li>
 <li>テストしやすいこと</li>
 <li>新しく学ぶことが絞られていること</li>
 <li>成功か失敗かわかりやすいこと</li>
 <li>他人からのフィードバックが得られること</li>
 <li>難しいと思えること</li>
</ul> <p>
 <a href="http://blog.livedoor.jp/lionfan/archives/52909819.html">らいおんの隠れ家 : ポール・グレアム「良い後回し、悪い後回し」</a>の、解くべき問題に取り組んでいるかのチェックリスト。
</p>

 <blockquote>
 <ol class="org-ol"> <li>あなたの分野でいちばん重要な難問は何ですか。</li>
 <li>それに取り組んでいますか。</li>
 <li>なぜ取り組んでいないのですか。</li>
</ol></blockquote>

 <p>
 <a href="http://www-comm.cs.shinshu-u.ac.jp/david/papers/stories/japanese/hamming.pdf">あなたとあなたの研究</a>の、自分に才能をもちながら成功しない大勢の人の特徴。
</p>

 <ul class="org-ul"> <li>重要な問題に取り組まないこと</li>
 <li>問題に熱中しないこと</li>
 <li>難しい問題を状況を変え、簡単にできるがまだ重要な問題に代えないこと</li>
 <li>なぜしないか言い訳を捜し続けること</li>
</ul></div>
</div>
 <div id="outline-container-orgbc07683" class="outline-2">
 <h2 id="orgbc07683"> <a href="#orgbc07683">Memo</a></h2>
 <div class="outline-text-2" id="text-orgbc07683">
</div>
 <div id="outline-container-org722136a" class="outline-3">
 <h3 id="org722136a"> <a href="#org722136a">道具を作る表現力</a></h3>
 <div class="outline-text-3" id="text-org722136a">
 <p>
Well-grounded rubyistで、 最期の章はテストの原形をつくった。すごい。メタなものが扱えることは、作れるものの幅を大きく広げる。多くの人に、いろんな目的で利用される道具は抽象的だ。そういうものが作れるようになったら楽しいだろうな。
</p>
</div>
</div>
 <div id="outline-container-orgcc5be04" class="outline-3">
 <h3 id="orgcc5be04"> <a href="#orgcc5be04">ゲーム作りの問題点</a></h3>
 <div class="outline-text-3" id="text-orgcc5be04">
 <p>
ゲームの問題点。遊ぶ人が自分だけであること。ゼロからやるのは楽しいが、自分の望むものが大きすぎて途中で飽きる。小さいツール類だと完全に自分用でも達成できる。どこかに提出する前提でやるのがいいか。最初にそういう会を見つけておいて、そのレギュレーションに合う形でやると。
</p>
</div>
</div>
</div>
 <div id="outline-container-org6c7469c" class="outline-2">
 <h2 id="org6c7469c"> <a href="#org6c7469c">Tasks</a></h2>
 <div class="outline-text-2" id="text-org6c7469c">
</div>
 <div id="outline-container-orgcd2c204" class="outline-3">
 <h3 id="orgcd2c204"> <a href="#orgcd2c204">IPアドレスの地図化</a></h3>
 <div class="outline-text-3" id="text-orgcd2c204">
 <p>
応答したアドレスを図にする。そういうソフトがあるのだろう。
</p>

 <ul class="org-ul"> <li> <a href="https://www.youtube.com/watch?v=JcJSW7Rprio&ab_channel=suckerpinch">Harder Drive: Hard drives we didn’t want or need - YouTube</a></li>
</ul> <p>
探す。
</p>
</div>
</div>
 <div id="outline-container-org6e75099" class="outline-3">
 <h3 id="org6e75099"> <a href="#org6e75099"> <span class="todo TODO">TODO</span> バイナリの可視化ツール</a></h3>
 <div class="outline-text-3" id="text-org6e75099">
 <p>
バイナリかるたでやっているように、出現頻度で画像化したい。
</p>

 <ul class="org-ul"> <li>文字表示については、別でツールでやるのでいらない</li>
 <li>全部やると遅そう。オフセットとサイズを指定して一部だけ可視化できればよい</li>
 <li>仕様の参考にする。 <a href="https://digitaltravesia.jp/usamimihurricane/webhelp/_RESOURCE/MenuItem/another/anotherAoZoraSiroNeko.html">汎用ファイルアナライザ「青い空を見上げればいつもそこに白い猫」</a></li>
 <li>理想的なのがすでにある。 <a href="https://binvis.io/#/">binvis.io</a></li>
</ul></div>
</div>
 <div id="outline-container-org0df01f9" class="outline-3">
 <h3 id="org0df01f9"> <a href="#org0df01f9">録画ツール作成</a></h3>
 <div class="outline-text-3" id="text-org0df01f9">
 <p>
静止画で定期的に録画してみるツール。
</p>

 <p>
一覧しやすいようにしたいよな。そうしないと意味がないから。1日ごとに記録するのもいいが、テーマを決めて録画して終わったら止めて、がよさそうに見える。放置してる画面を保存しても明らかに意味がないので止めたり開始する。また、公開できるものがあれば公開してよい。あまりなさそうだが。
</p>

 <ul class="org-ul"> <li>録画が終わったら静止画を変換する
 <ul class="org-ul"> <li>そういう非同期サーバにする。– 大掛かりなのでやらない</li>
</ul></li>
 <li>ビューワ整備
 <ul class="org-ul"> <li>保存した以上、利用したい。利用するには簡単に見られないといけない</li>
 <li>静的ページに上げておくのが簡単ではある</li>
 <li>選んだものだけ上げる</li>
</ul></li>
 <li>ファイルローテーション
 <ul class="org-ul"> <li>1ヶ月経過した元ファイルは消す</li>
 <li>webpは1年くらいにしておいて、気の向いたときにAmazon Prime Photosに上げておく</li>
</ul></li>
 <li>5秒ごと撮影で本当にいいか。むしろ流れを知るものなので、タイムラプス的視点からはこれくらいでよい説もある
 <ul class="org-ul"> <li>動画側でどちらバージョンも生成、でもいい</li>
</ul></li>
 <li>元画像はまだ小さくできるのではないか
 <ul class="org-ul"> <li>どうせすぐ消すのでいらない</li>
</ul></li>
 <li>個別に切らずに常時録画があってもいい
 <ul class="org-ul"> <li>そちらは撮影間隔長めにしておく</li>
 <li>題材にフォーカスしたものは撮影間隔を短くする</li>
 <li>面倒だな。そこまでやるほどじゃない</li>
 <li>そもそも詳細に撮影したいなら、普通にOBSで撮るべき</li>
</ul></li>
 <li>レート
 <ul class="org-ul"> <li>47MB(1000k)</li>
 <li>26MB(500k)</li>
 <li>14MB(300k + レート20)</li>
</ul></li>
 <li>30分で7MB</li>
 <li>動画の終了時間か実経過時間も表示したいな
 <ul class="org-ul"> <li>4時間とか</li>
 <li>動画の長さから計算できるはず</li>
 <li>42秒の場合</li>
 <li>23:31 – 00-59</li>
 <li>88分</li>
 <li>(* 88 60) 5280秒</li>
 <li>(/ (* 42 60 2) 60) -> 84分。雑だがいいだろう</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org7c3f494" class="outline-3">
 <h3 id="org7c3f494"> <a href="#org7c3f494">要件を満たしているかのチェッカーを作る</a></h3>
 <div class="outline-text-3" id="text-org7c3f494">
 <p>
実行とファイル存在がある。
</p>

 <ul class="org-ul"> <li>Emacs, Docker, Go…とか必要なソフトウェアが実行できるか</li>
 <li>リポジトリとかフォントとか秘密鍵が配置されているか</li>
 <li>日本語入力ができるか(mozcとfcitxが入っているか)</li>
</ul></div>
</div>
 <div id="outline-container-orga188c70" class="outline-3">
 <h3 id="orga188c70"> <a href="#orga188c70">go buildしたときにテストライブラリは含まれるのか</a></h3>
 <div class="outline-text-3" id="text-orga188c70">
 <p>
testfyなどはテスト時にしか使われないが、それは依存ライブラリとしてバイナリに含まれることはないのか。それとも、go.modに書かれていれば含まれるのか。
</p>
</div>
</div>
 <div id="outline-container-org794df05" class="outline-3">
 <h3 id="org794df05"> <a href="#org794df05"> <span class="done DONE">DONE</span> goimportsを読む</a></h3>
 <div class="outline-text-3" id="text-org794df05">
 <p>
 <a href="https://github.com/kd-collective/tools/blob/1261a24ceb1867ea7439eda244e53e7ace4ad777/internal/imports/fix.go">tools/internal/imports/fix.go</a>あたりを読む。
</p>


 <div class="org-src-container">
 <pre class="src src-shell">go-callvis -nostd -group pkg,type -focus golang.org/x/tools/internal/imports ./cmd/goimports
</pre>
</div>
</div>
 <div id="outline-container-org03ed928" class="outline-4">
 <h4 id="org03ed928"> <a href="#org03ed928">デバッグ手順</a></h4>
 <div class="outline-text-4" id="text-org03ed928">
 <div class="org-src-container">
 <pre class="src src-shell"> <span class="org-comment-delimiter"># </span> <span class="org-comment">go/tools/cmd/goimports にて--</span>
 <span class="org-comment-delimiter"># </span> <span class="org-comment">goimportsにはファイルの指定が必要である</span>
 <span class="org-comment-delimiter"># </span> <span class="org-comment">dlv debug -- /home/orange/ProjectOrg/go/tools/internal/imports</span>
 <span class="org-comment-delimiter"># </span> <span class="org-comment">dlv debug -- /home/orange/Project/test</span>

 <span class="org-comment-delimiter"># </span> <span class="org-comment">visitFileにブレークポイントをかける。ディレクトリ・ファイルごとに実行されるので、ディレクトリが来たらスキップする</span>
(dlv)  <span class="org-keyword">break</span> goimports.go:186
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 1: </span>breakpoints</label> <pre class="src src-nil">- break /home/orange/ProjectOrg/go/tools/internal/imports/fix.go:579
- break /home/orange/ProjectOrg/go/tools/internal/imports/fix.go:1701
- break /home/orange/ProjectOrg/go/tools/internal/imports/fix.go:1021
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 2: </span>依存関係可視化。あまりよくわからない</label> <pre class="src src-shell">go-callvis -nostd -group type -focus golang.org/x/tools/internal/imports ./cmd/goimports
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgda0c980" class="outline-4">
 <h4 id="orgda0c980"> <a href="#orgda0c980">流れ</a></h4>
 <div class="outline-text-4" id="text-orgda0c980">
 <div class="org-src-container">
 <pre class="src src-shell"> <span class="org-comment-delimiter"># </span> <span class="org-comment">各ファイルに適用</span>
- gofmtMain
  - walkDir(path)
    - visitFile -- 各ファイルごとに実行する処理。関数を渡す
      - processFile -- 処理本体。ソースコードのファイルを開く
        - Process -- parserModeで挙動を変えつつ、parse, fixImports, formatFileを実行する

 <span class="org-comment-delimiter"># </span> <span class="org-comment">本処理</span>
- Process
  - parse
    - parser.ParseFile -- ast.Fileを生成する。構文情報を得られる
      - readSource -- 引数のsrcが非nilの場合は単に[]byteに変換をするだけ
      - (parser) init -- レシーバーのparserを初期化する
      - (parser) parseFile
    - fset.File().SetLinesForContent
  - fixImports(=fixImportsDefault())
    - getFixes -- 環境変数を取得など
      - NewProcessEnvSource (引数のProcessEnvをラップする)
      - getFixesWithSource -- 長くて重要そう。pass{}を初期化し、この時点で判明しているものだけ入れる
        - (p *pass) load(ctx context.Context) ([]*ImportFix, bool) -- passの中身を返す。missingReferenceがあれば異常として終了
          - collectReferences(f *ast.File) References -- ソースコードから依存を探索する(importを使わずに)
            -   ast.Walk(v Visitor, node Node) -- Visitorは関数。関数渡して探索するこのパターン
          - collectImports(f *ast.File) []*ImportInfo -- import文から取ってくる
          - (p *pass) importIdentifier
            - ImportPathToAssumedName -- pkg/v2などの場合に適切にパッケージ名を得る
          - (p *pass) fix -- p.candidatesを使ってmissing importsを補完する。よくわからないな
        - (全部解決できてたら終了)
        - parseOtherFiles -- パッケージディレクトリを探索
        - (p *pass) load -- 2回目
        - (p *pass) assumeSiblingImportsValid() -- 別ファイルのインポートを調べる(後で使う)
        - addStdlibCandidates -- 標準ライブラリを候補に追加する。stdlib.PackageSymbolsは別ファイルで変数になっている。パスの末尾をチェックして、一致していれば候補に追加する
          - symbolNameSet -- 標準パッケージのシンボルを識別子だけにする
          - addCandidate -- (imp *ImportInfo, pkg *PackageInfo) imp: ソースコードから探した一覧, pkg: 標準ライブラリの識別子一覧。refsにある && 標準ライブラリにあるものをcandidatesに追加する
        - (p *pass) fix
          - (p *pass) findMissingImport
        - addExternalCandidates -- $ <span class="org-variable-name">GOPATH</span> から候補を探す
    - apply
</pre>
</div>
</div>
</div>
 <div id="outline-container-org57cb615" class="outline-4">
 <h4 id="org57cb615"> <a href="#org57cb615">概念</a></h4>
 <div class="outline-text-4" id="text-org57cb615">
 <p>
FileSet。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 3: </span>FileSet定義</label> <pre class="src src-git-permalink">https://github.com/kd-collective/go/blob/19e923182e590ae6568c2c714f20f32512aeb3e3/src/go/token/position.go#L426-L431
</pre>
</div>

 <div class="results" id="orgba344a4">
 <p>
type FileSet struct {
	mutex sync.RWMutex          <i>/ protects the file set
	base  int                  /</i> base offset for the next file
	files []*File               <i>/ list of files in the order added to the set
	last  atomic.Pointer[File] /</i> cache of last file looked up
}
</p>

</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 4: </span>使われ方。なぜファイル名などと一緒にFileSetが必要なのだろうか</label> <pre class="src src-git-permalink">https://github.com/kd-collective/tools/blob/1261a24ceb1867ea7439eda244e53e7ace4ad777/internal/imports/imports.go#L182
</pre>
</div>

 <div class="results" id="org3f1616e">
 <p>
file, err := parser.ParseFile(fset, filename, src, parserMode)
</p>

</div>
</div>
</div>
 <div id="outline-container-orga83d88f" class="outline-4">
 <h4 id="orga83d88f"> <a href="#orga83d88f">メモ</a></h4>
 <div class="outline-text-4" id="text-orga83d88f">
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 5: </span>main関数を含むか判定する</label> <pre class="src src-git-permalink">https://github.com/kd-collective/tools/blob/1261a24ceb1867ea7439eda244e53e7ace4ad777/internal/imports/imports.go#L254
</pre>
</div>

 <div class="results" id="org5e0e9f1">
 <p>
func containsMainFunc(file *ast.File) bool {
</p>

</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 6: </span>引数がないと標準入力から受け取る。なのでデバッグ時にファイル(ディレクトリ)を指定する</label> <pre class="src src-git-permalink">https://github.com/kd-collective/tools/blob/1261a24ceb1867ea7439eda244e53e7ace4ad777/cmd/goimports/goimports.go#L271-L276
</pre>
</div>

 <div class="results" id="orgf46b203">
 <p>
if len(paths)  <code>= 0 {
		if err :</code> processFile(“<standard input>”, os.Stdin, os.Stdout, fromStdin); err != nil {
		report(err)
	}
	return
}
</p>

</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 7: </span>parseにブレークする用</label> <pre class="src src-git-permalink">https://github.com/kd-collective/tools/blob/1261a24ceb1867ea7439eda244e53e7ace4ad777/internal/imports/imports.go#L176
</pre>
</div>

 <div class="results" id="org1cfd4cf">
 <p>
func parse(fset *token.FileSet, filename string, src []byte, parserMode parser.Mode, fragment bool) (*ast.File, func(orig, src []byte) []byte, error) {
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-git-permalink">https://github.com/kd-collective/tools/blob/1261a24ceb1867ea7439eda244e53e7ace4ad777/internal/imports/fix.go#L152-L186
</pre>
</div>

 <div class="results" id="org220a569">
 <p>
func collectReferences(f *ast.File) References {
	refs := References{}
</p>

 <p>
	var visitor visitFn
	visitor = func(node ast.Node) ast.Visitor {
		if node  <code>= nil {
			return visitor
		}
		switch v :</code> node.(type) {
		case *ast.SelectorExpr:
			xident, ok := v.X.(*ast.Ident)
			if !ok {
				break
			}
			if xident.Obj != nil {
				 <i>/ If the parser can resolve it, it’s not a package ref.
				break
			}
			if !ast.IsExported(v.Sel.Name) {
				/</i> Whatever this is, it’s not exported from a package.
				break
			}
			pkgName := xident.Name
			r := refs[pkgName]
			if r == nil {
				r = make(map[string]bool)
				refs[pkgName] = r
			}
			r[v.Sel.Name] = true
		}
		return visitor
	}
	ast.Walk(visitor, f)
	return refs
}
</p>

</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 8: </span>標準ライブラリのシグネチャ一覧</label> <pre class="src src-git-permalink">https://github.com/kd-collective/tools/blob/1261a24ceb1867ea7439eda244e53e7ace4ad777/internal/stdlib/manifest.go#L9
</pre>
</div>

 <div class="results" id="org973067b">
 <p>
var PackageSymbols = map[string][]Symbol{
</p>

</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 9: </span>リゾルバを選択する(ifに入らなければModuleResolver)</label> <pre class="src src-git-permalink">https://github.com/kd-collective/tools/blob/1261a24ceb1867ea7439eda244e53e7ace4ad777/internal/imports/fix.go#L1026-L1043
</pre>
</div>

 <p>
種類。
</p>

 <ul class="org-ul"> <li>標準ライブラリ</li>
 <li>同じmodule内で別package呼び出し</li>
 <li>外部module(go.modに記載されている)
 <ul class="org-ul"> <li> <a href="https://github.com/kd-collective/tools/blob/1261a24ceb1867ea7439eda244e53e7ace4ad777/internal/imports/fix.go#L1621">https://github.com/kd-collective/tools/blob/1261a24ceb1867ea7439eda244e53e7ace4ad777/internal/imports/fix.go#L1621</a></li>
</ul></li>
 <li>Source interfaceの実装は2つある。Sourceインターフェースはリゾルバをメソッドに持ち、それぞれのロジックでインポートパスとパッケージ名を解決する

 <ul class="org-ul"> <li>envSource – 環境変数から</li>
 <li>IndexSource – go.modから</li>
</ul></li>
 <li>resolverの実装は2つある。これによって、依存関係をどこから持ってくるかを決める。通常Modulesなので、go.modを外部ライブラリの依存関係解決に利用する
 <ul class="org-ul"> <li>GOPATHの場合 – 古い</li>
 <li>Modulesの場合 – 現</li>
</ul></li>
 <li>候補の一覧を出してから、消していく</li>
 <li> <a href="https://github.com/kd-collective/tools/blob/1261a24ceb1867ea7439eda244e53e7ace4ad777/internal/imports/fix.go#L1522">https://github.com/kd-collective/tools/blob/1261a24ceb1867ea7439eda244e53e7ace4ad777/internal/imports/fix.go#L1522</a> パッケージの全シンボルを取り出す。定数・型・変数・関数</li>
</ul></div>
</div>
 <div id="outline-container-org2487414" class="outline-4">
 <h4 id="org2487414"> <a href="#org2487414">おもしろポイント</a></h4>
 <div class="outline-text-4" id="text-org2487414">
 <ul class="org-ul"> <li>標準ライブラリの全シグネチャを出すスクリプトがある</li>
 <li>インポートパスの末尾がパッケージ名である</li>
 <li>go.modから使っているパスを取得する</li>
 <li>universeで全シグネチャを取得できる。go.modの情報と合わせて外部ライブラリがどのパッケージに属するかを推定する</li>
</ul></div>
</div>
</div>
 <div id="outline-container-org989622b" class="outline-3">
 <h3 id="org989622b"> <a href="#org989622b">gormを読む</a></h3>
 <div class="outline-text-3" id="text-org989622b">
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 10: </span>現在</label> <pre class="src src-nil">2a20e55 Possible to specify table name
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 11: </span>複数形、こんなもので大丈夫なのか</label> <pre class="src src-git-permalink">https://github.com/kd-collective/gorm/blob/f4aa43544632181c095eb31bdae29ab0dd65339c/model.go#L126-L132
</pre>
</div>

 <div class="results" id="orgf1123ec">
 <p>
pluralMap := map[string]string{“ch”: “ches”, “ss”: “sses”, “sh”: “shes”, “day”: “days”, “y”: “ies”, “x”: “xes”, “s?”: “s”}
for key, value := range pluralMap {
	reg := regexp.MustCompile(key + “$”)
	if reg.MatchString(str) {
		return reg.ReplaceAllString(str, value), err
	}
}
</p>

</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 12: </span>フィールド名をスネークケースにしてカラム名にしている</label> <pre class="src src-git-permalink">https://github.com/kd-collective/gorm/blob/2a20e551ed0df2956ca6328cd928039c7942d350/do.go#L230-L233
</pre>
</div>

 <div class="results" id="orged9db71">
 <p>
field := dest.FieldByName(snakeToUpperCamel(value))
if field.IsValid() {
	values = append(values, dest.FieldByName(snakeToUpperCamel(value)).Addr().Interface())
}
</p>

</div>
</div>
 <div id="outline-container-org799fdb2" class="outline-4">
 <h4 id="org799fdb2"> <a href="#org799fdb2">教訓</a></h4>
 <div class="outline-text-4" id="text-org799fdb2">
 <ul class="org-ul"> <li>まずAPIを考えて空の関数として列挙する</li>
 <li>最初は雑でいい</li>
 <li>こまめにコミットする</li>
 <li>エラーハンドリングはあとでいい</li>
 <li>privateにするのはあとでいい</li>
</ul></div>
</div>
</div>
 <div id="outline-container-orge36f518" class="outline-3">
 <h3 id="orge36f518"> <a href="#orge36f518">オリジナルのカルタ遊び</a></h3>
 <div class="outline-text-3" id="text-orge36f518">
 <p>
クラウド上でオリジナルのカルタを作って遊ぶ。
</p>

 <ul class="org-ul"> <li>Gitサブコマンドカルタ</li>
 <li>AWSサービスカルタ</li>
</ul></div>
</div>
 <div id="outline-container-org98ea8a9" class="outline-3">
 <h3 id="org98ea8a9"> <a href="#org98ea8a9">org idリンクの修正ツール</a></h3>
 <div class="outline-text-3" id="text-org98ea8a9">
 <p>
タイトルをリネームしたときに、ドキュメント全体のリンクもなおしてほしい。idがあるのだから、検索でわかるはずだ。
</p>
</div>
</div>
 <div id="outline-container-orgda9487e" class="outline-3">
 <h3 id="orgda9487e"> <a href="#orgda9487e">ブラウザでシェルの実行結果を見る</a></h3>
 <div class="outline-text-3" id="text-orgda9487e">
 <ul class="org-ul"> <li>GitHub Actionsの実行結果のイメージ</li>
 <li>できればリアルタイムで</li>
</ul></div>
</div>
 <div id="outline-container-org42d2449" class="outline-3">
 <h3 id="org42d2449"> <a href="#org42d2449"></a> <a href="20210725134208-python.html#ID-a6c9c9ad-d9b1-4e13-8992-75d8590e464c">Python</a>の雛形リポジトリを作る</h3>
 <div class="outline-text-3" id="text-org42d2449">
 <p>
 <a href="20211107104950-linter.html#ID-e5663529-8095-4fc8-8fb5-500dd4471a73">Linter</a>設定とかしておく。
</p>
</div>
</div>
 <div id="outline-container-orgdef3653" class="outline-3">
 <h3 id="orgdef3653"> <a href="#orgdef3653">GitHubリポジトリを自動設定するプログラム</a></h3>
 <div class="outline-text-3" id="text-orgdef3653">
 <p>
CLIでURLを打つと、自動でその設定にしてくれるプログラム。というか、リポジトリの作成からやってくれる。リポジトリ設定のファイル化。すでにありそう。
</p>

 <ul class="org-ul"> <li>デフォルトトークンの権限を読み書き可能にする</li>
 <li>ブランチを自動削除する</li>
</ul></div>
</div>
 <div id="outline-container-orgccf28ba" class="outline-3">
 <h3 id="orgccf28ba"> <a href="#orgccf28ba">関連するWikipediaの項目を出すプログラム</a></h3>
 <div class="outline-text-3" id="text-orgccf28ba">
 <p>
たとえばCPUと打ったら、CPUに関連する記事を列挙するような。
</p>

 <p>
勉強するときに、ドバっとまとめて関連する分野の単語をおさえるのに使う。
</p>
</div>
</div>
 <div id="outline-container-orgdcd4d68" class="outline-3">
 <h3 id="orgdcd4d68"> <a href="#orgdcd4d68">Google ChromeのPDFでスクロールしたときにページ数を更新する</a></h3>
 <div class="outline-text-3" id="text-orgdcd4d68">
 <p>
ページを自動更新してほしい。いや、ブックマークレットとかできそうな感じもする。
</p>
</div>
</div>
 <div id="outline-container-orgb13c1f1" class="outline-3">
 <h3 id="orgb13c1f1"> <a href="#orgb13c1f1">Google Meetのコメントを流して表示する</a></h3>
 <div class="outline-text-3" id="text-orgb13c1f1">
 <p>
画面共有中に、ほかのタブでコメントを見られるようにしたい。流れるようにできればベスト。Chrome拡張でできそうなのがあったが、動かなかった。
</p>

 <ul class="org-ul"> <li>X Window でやればできるだろう。コメントを取れるかはわからないが</li>
</ul></div>
</div>
 <div id="outline-container-orge73f63e" class="outline-3">
 <h3 id="orge73f63e"> <a href="#orge73f63e">create-link修正</a></h3>
 <div class="outline-text-3" id="text-orge73f63e">
 <p>
org-make-link-stringを使ってリンクを組み立てるようにする。
</p>
</div>
</div>
 <div id="outline-container-org533eb72" class="outline-3">
 <h3 id="org533eb72"> <a href="#org533eb72"> <span class="todo TODO">TODO</span> vtermが、負の前置引数を尊重してないように見える</a></h3>
 <div class="outline-text-3" id="text-org533eb72">
 <p>
vtermだけ実行できないのを調べる。eshellではできた。
</p>
</div>
</div>
 <div id="outline-container-orgb8956fa" class="outline-3">
 <h3 id="orgb8956fa"> <a href="#orgb8956fa"> <span class="todo TODO">TODO</span> 郷土本</a></h3>
 <div class="outline-text-3" id="text-orgb8956fa">
 <p>
作る。
</p>
</div>
</div>
 <div id="outline-container-orgf83632b" class="outline-3">
 <h3 id="orgf83632b"> <a href="#orgf83632b"> <span class="todo TODO">TODO</span> denote renameをディレクトリ内の全ファイルに対して適用する</a></h3>
 <div class="outline-text-3" id="text-orgf83632b">
 <p>
 <code>denote-rename-file-using-front-matter</code> を全ファイルに対して実行したい。
</p>
</div>
</div>
 <div id="outline-container-org5679370" class="outline-3">
 <h3 id="org5679370"> <a href="#org5679370"> <span class="todo TODO">TODO</span> アセンブラの実行結果を可視化するツール</a></h3>
 <div class="outline-text-3" id="text-org5679370">
 <p>
パラパラ漫画にすれば一瞬で理解できるように見える。
</p>

 <p>
いい感じのものが見つからない。デバッガとは違うんだよな。
</p>
</div>
</div>
 <div id="outline-container-org0c47daf" class="outline-3">
 <h3 id="org0c47daf"> <a href="#org0c47daf"> <span class="todo TODO">TODO</span> 簡易メモ帳</a></h3>
 <div class="outline-text-3" id="text-org0c47daf">
 <p>
Emacsからpecoみたいな感じで、あまり覚えてないテキストをインクリメンタル検索しながら呼び出せるようにする。
</p>
</div>
</div>
 <div id="outline-container-org715000d" class="outline-3">
 <h3 id="org715000d"> <a href="#org715000d">リンクのかぶりチェックツール</a></h3>
 <div class="outline-text-3" id="text-org715000d">
 <p>
同じものを追加していることがよくあるので、検知できるようにする。
</p>
</div>
</div>
 <div id="outline-container-org4c91cc1" class="outline-3">
 <h3 id="org4c91cc1"> <a href="#org4c91cc1">エレベーター実装</a></h3>
 <div class="outline-text-3" id="text-org4c91cc1">
 <p>
アルゴリズムを実装してみる。
</p>
</div>
</div>
 <div id="outline-container-org77ca7bf" class="outline-3">
 <h3 id="org77ca7bf"> <a href="#org77ca7bf">コードドキュメント生成ツール</a></h3>
 <div class="outline-text-3" id="text-org77ca7bf">
 <p>
コメントとソースコードでいい感じのWebページに変換する。
</p>
</div>
</div>
 <div id="outline-container-org8292d99" class="outline-3">
 <h3 id="org8292d99"> <a href="#org8292d99"> <span class="todo TODO">TODO</span> RFCページのように各段落にアンカーを設定できるツールを作成する</a></h3>
 <div class="outline-text-3" id="text-org8292d99">
 <p>
RFCのサイトでは各段落ごとでアンカーを設定できる。示しやすい。
</p>

 <ul class="org-ul"> <li>PLATEAUのHTMLドキュメントでやろうとしたが、タグ構造が複雑で難しい。段落という概念がとれない</li>
 <li>PDFをHTML化するとタグ構造はめちゃくちゃになっているため難しい</li>
</ul></div>
</div>
 <div id="outline-container-org8757a5a" class="outline-3">
 <h3 id="org8757a5a"> <a href="#org8757a5a">Chrome拡張のorg-captureを右クリックに対応させる</a></h3>
 <div class="outline-text-3" id="text-org8757a5a">
 <p>
ボタンかショートカットキーからしかできないが、右クリックからできたら便利だろうな。
</p>
</div>
</div>
 <div id="outline-container-org706cf54" class="outline-3">
 <h3 id="org706cf54"> <a href="#org706cf54">org-agendaのブラウザ表示</a></h3>
 <div class="outline-text-3" id="text-org706cf54">
 <p>
ブラウザでの表示をモダンにできるようにする。orgパーサーが必要か。
</p>
</div>
</div>
 <div id="outline-container-orgf108cfd" class="outline-3">
 <h3 id="orgf108cfd"> <a href="#orgf108cfd"> <span class="todo TODO">TODO</span> コンテナダッシュボード</a></h3>
 <div class="outline-text-3" id="text-orgf108cfd">
 <p>
docker-composeで立てたコンテナを手軽に一覧できるようにする。
</p>

 <ul class="org-ul"> <li>envconfig
 <ul class="org-ul"> <li>環境変数の読み込み、ないときはデフォルト値を設定する</li>
</ul></li>
 <li>signal.NotifyContext
 <ul class="org-ul"> <li>シグナルをキャッチしてコンテキストをcancelさせる処理を楽に書ける</li>
</ul></li>
 <li>sync.RWMutex</li>
 <li>webサーバ - クライアントはWebソケット。webサーバはdockerからのイベントを受け付け、それをクライアントに通知する</li>
 <li>websocketConnectionとclientConnectionの違いはなんだ
 <ul class="org-ul"> <li>WebSocketは、HTTPとは異なるプロトコルである</li>
 <li>HTTPで接続を確立してから、UpgradeしてWebSocketで通信する</li>
 <li>つまり両方は別のconnectionで、WebSocketで通信するには両方必要</li>
</ul></li>
 <li>ClientConnectionsは購読リスト。websocket接続を確立したクライアントごとにある
 <ul class="org-ul"> <li>たとえばブラウザとcurlでリクエストを飛ばしたとしたら、ClientConnectionsの長さは2になる。</li>
</ul></li>
 <li>LogStoreやDocker構造体はどのリクエストでも共通</li>
</ul></div>
 <div id="outline-container-orgbcda1ac" class="outline-4">
 <h4 id="orgbcda1ac"> <a href="#orgbcda1ac"> <span class="todo TODO">TODO</span> バックエンドのコードを把握する</a></h4>
 <div class="outline-text-4" id="text-orgbcda1ac">
 <p>
けっこう複雑で絡み合っていて、よくわかっていない。
</p>

 <p>
読むというよりは、実際機能追加したみたほうがいいんだろうな。
</p>
</div>
</div>
 <div id="outline-container-orgff726a4" class="outline-4">
 <h4 id="orgff726a4"> <a href="#orgff726a4"> <span class="todo TODO">TODO</span> フロント側のコードを把握する</a></h4>
 <div class="outline-text-4" id="text-orgff726a4">
 <p>
おそろくフロントのちゃんとした書き方なので参考になる感じがする。
</p>
</div>
</div>
 <div id="outline-container-orgfaab094" class="outline-4">
 <h4 id="orgfaab094"> <a href="#orgfaab094"> <span class="todo TODO">TODO</span> 検証しやすいようにする</a></h4>
 <div class="outline-text-4" id="text-orgfaab094">
 <p>
ウェブソケットの確かめ方がよくわからない。どうやってデバッグすればいいのだろう。
</p>
</div>
</div>
</div>
 <div id="outline-container-orgf1aebeb" class="outline-3">
 <h3 id="orgf1aebeb"> <a href="#orgf1aebeb">各node数をカウントするコマンド</a></h3>
 <div class="outline-text-3" id="text-orgf1aebeb">
 <p>
ASTテストが網羅しているか調べるツール。プロジェクト全体で見るのもおもしろそう。
</p>
</div>
</div>
 <div id="outline-container-org8733f4e" class="outline-3">
 <h3 id="org8733f4e"> <a href="#org8733f4e">gorunをコンテナ実行する</a></h3>
 <div class="outline-text-3" id="text-org8733f4e">
 <p>
より <a href="20220427215330-github_actions.html#ID-2d35ac9e-554a-4142-bba7-3c614cbfe4c4">GitHub Actions</a>に近づける。
</p>
</div>
</div>
 <div id="outline-container-orgd449e4e" class="outline-3">
 <h3 id="orgd449e4e"> <a href="#orgd449e4e">golangci-lintを調べる</a></h3>
 <div class="outline-text-3" id="text-orgd449e4e">
 <ul class="org-ul"> <li>エラーが出るが、矢印が正しくないときがあるのを調べる</li>
 <li>オフラインのとき解決に失敗するのを調べる</li>
 <li>タグの形式をチェック。チェックできなさそうな気もする</li>
</ul></div>
</div>
 <div id="outline-container-org719bd2f" class="outline-3">
 <h3 id="org719bd2f"> <a href="#org719bd2f">シェルを実装する</a></h3>
 <div class="outline-text-3" id="text-org719bd2f">
 <p>
理解したいなら実装してみればよい。なので、UNIXプログラミングが理解したければ、シェルを実装すればよい。
</p>

 <p>
参考。
</p>

 <ul class="org-ul"> <li> <a href="https://jun-networks.hatenablog.com/entry/2021/07/02/034002">シェル実装の課題を完走した - JUNのブログ</a></li>
</ul></div>
</div>
 <div id="outline-container-org447a866" class="outline-3">
 <h3 id="org447a866"> <a href="#org447a866">静的サイトジェネレータ</a></h3>
 <div class="outline-text-3" id="text-org447a866">
 <p>
 <a href="20220427215330-github_actions.html#ID-2d35ac9e-554a-4142-bba7-3c614cbfe4c4">GitHub Actions</a>でリポジトリの一覧をHTMLできれいに表示できるようにする。
</p>
</div>
</div>
 <div id="outline-container-org9840604" class="outline-3">
 <h3 id="org9840604"> <a href="#org9840604">関数一覧からテストを自動生成する</a></h3>
 <div class="outline-text-3" id="text-org9840604">
 <p>
テンプレートを生成する。あるいは、一覧から選択して作成してくれると良い。
</p>
</div>
</div>
 <div id="outline-container-org108a75d" class="outline-3">
 <h3 id="org108a75d"> <a href="#org108a75d">テストをドキュメントに変換する</a></h3>
 <div class="outline-text-3" id="text-org108a75d">
 <p>
 <a href="20210509122633-emacs_lisp.html#ID-c7e81fac-9f8b-4538-9851-21d4ff3c2b08">Emacs Lisp</a>のテストを書いている。HTMLに変換して、デプロイしてブラウザで見られるようにしたい。
</p>
</div>
</div>
 <div id="outline-container-orgdd13733" class="outline-3">
 <h3 id="orgdd13733"> <a href="#orgdd13733">org projectを1つのPDFにビルドする</a></h3>
 <div class="outline-text-3" id="text-orgdd13733">
 <p>
メモ・日記が多すぎなので、1つのPDFで閲覧できるようにする。
</p>
</div>
</div>
 <div id="outline-container-org999e821" class="outline-3">
 <h3 id="org999e821"> <a href="#org999e821">探検記</a></h3>
 <div class="outline-text-3" id="text-org999e821">
 <p>
いくつかネタがあるので探検記を書く。画像を大量に使う予定だが、いい感じに表示するためにはどうしたらよいだろうか。
</p>
</div>
</div>
 <div id="outline-container-org5392f61" class="outline-3">
 <h3 id="org5392f61"> <a href="#org5392f61">テスト駆動のEmacs Lispチュートリアル</a></h3>
 <div class="outline-text-3" id="text-org5392f61">
 <p>
Goのテスト駆動のやつは非常によかった。Emacs Lisp版もあるとよさそう。自分の勉強がてら。
</p>
</div>
</div>
 <div id="outline-container-org85264bc" class="outline-3">
 <h3 id="org85264bc"> <a href="#org85264bc">楽しい経路探索</a></h3>
 <div class="outline-text-3" id="text-org85264bc">
 <p>
どこかで言われていたこと。地図検索で最短距離でなく、楽しさや静かさを考慮した経路探索する。それらのスコア付けは、ユーザによる2つの画像の比較によって行われる。
</p>
</div>
</div>
 <div id="outline-container-org497439d" class="outline-3">
 <h3 id="org497439d"> <a href="#org497439d">org-modeのパーサ</a></h3>
 <div class="outline-text-3" id="text-org497439d">
 <p>
解析してほかの用途へ使えるようにする。すでにありそうだけど練習に。
</p>
</div>
</div>
 <div id="outline-container-org6bad983" class="outline-3">
 <h3 id="org6bad983"> <a href="#org6bad983">意味のない中間変数検知ツール</a></h3>
 <div class="outline-text-3" id="text-org6bad983">
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 13: </span>例</label> <pre class="src src-go">a := "aaa"
return a
</pre>
</div>

 <p>
のような明らかに意味のない中間変数をコード中から探すツール。変数名を扱うから構文解析が必要か。
</p>
</div>
</div>
 <div id="outline-container-org9583054" class="outline-3">
 <h3 id="org9583054"> <a href="#org9583054">いい感じの規模感のリポジトリを探すツール</a></h3>
 <div class="outline-text-3" id="text-org9583054">
 <p>
言語ごとに行数、スター数から調べる。
</p>

 <p>
行数が少ないものは読みやすい。
</p>

 <p>
サーバレスか <a href="20220427215330-github_actions.html#ID-2d35ac9e-554a-4142-bba7-3c614cbfe4c4">GitHub Actions</a>で定期実行して、加工して公開する。
</p>
</div>
</div>
 <div id="outline-container-org410c435" class="outline-3">
 <h3 id="org410c435"> <a href="#org410c435">PRの統計</a></h3>
 <div class="outline-text-3" id="text-org410c435">
 <p>
 <a href="20210926103926-github.html#ID-6b889822-21f1-4a3e-9755-e3ca52fa0bc4">GitHub</a>から生産性について取れる情報はたくさんある。
</p>

 <p>
有益な指標のリスト。 <a href="https://cloud.google.com/blog/ja/products/gcp/using-the-four-keys-to-measure-your-devops-performance">エリート DevOps チームであることを Four Keys プロジェクトで確認する | Google Cloud Blog</a>
</p>

 <ul class="org-ul"> <li>デプロイの頻度 - 組織による正常な本番環境へのリリースの頻度</li>
 <li>変更のリードタイム - commit から本番環境稼働までの所要時間</li>
 <li>変更障害率 - デプロイが原因で本番環境で障害が発生する割合（%）</li>
 <li>サービス復元時間 - 組織が本番環境での障害から回復するのにかかる時間</li>
</ul></div>
</div>
 <div id="outline-container-org7c8643b" class="outline-3">
 <h3 id="org7c8643b"> <a href="#org7c8643b"></a> <a href="20210805005543-docker.html#ID-1658782a-d331-464b-9fd7-1f8233b8b7f8">Docker</a>の時間統計</h3>
 <div class="outline-text-3" id="text-org7c8643b">
 <p>
ビルド時間のステージごとの統計が取れたら便利だろうな。あるいはイメージ。
</p>

 <ul class="org-ul"> <li>統計情報の記録/取得</li>
 <li>保存</li>
 <li>表示</li>
</ul> <p>
の2つになりそう。保存に関しては、GitHub Actionsが使えないだろうか。
</p>
</div>
</div>
 <div id="outline-container-orgf59acfd" class="outline-3">
 <h3 id="orgf59acfd"> <a href="#orgf59acfd">yml-sorterのWEB版</a></h3>
 <div class="outline-text-3" id="text-orgf59acfd">
 <p>
docker-compose.ymlを並び替えたいが、ちょっと見たらweb版がない。需要ありそうだけどな。でも、docker-composeは単にソートすればいいってわけでもない。たとえばversionは一番上に書くのが普通だが、これは別にソートではない。キーワードごとで例外というか、優先度をつけなければいけなそう。
</p>

 <p>
フォーマッタがありそうな。
</p>
</div>
</div>
 <div id="outline-container-org47de05b" class="outline-3">
 <h3 id="org47de05b"> <a href="#org47de05b">simple covの結果を元に、PR毎にコメントを表示する</a></h3>
 <div class="outline-text-3" id="text-org47de05b">
 <p>
一般化できる方法で解きたい。
</p>
</div>
</div>
 <div id="outline-container-org2a05f42" class="outline-3">
 <h3 id="org2a05f42"> <a href="#org2a05f42">床屋シミュレータ</a></h3>
 <div class="outline-text-3" id="text-org2a05f42">
 <p>
Programming  <a href="20220108003324-scala.html#ID-b2f63c13-4b30-481c-9c95-8abe388254fd">Scala</a>の218ページ付近で紹介されている床屋シミュレータ。
グラフィカルにして動くのを眺めたい。
</p>
</div>
</div>
 <div id="outline-container-orgf3f100e" class="outline-3">
 <h3 id="orgf3f100e"> <a href="#orgf3f100e">orgの文書lint</a></h3>
 <div class="outline-text-3" id="text-orgf3f100e">
 <p>
よい文書のための、特定の形式を満たしていることをチェックするlint。
</p>

 <p>
たとえば。
</p>
 <ul class="org-ul"> <li>コードブロックにはキャプションがついている</li>
 <li>見出しがネストしすぎてない</li>
 <li>タイトルタグがついている</li>
 <li>見出しだけ(本文がなく)の項目がない</li>
 <li>特定の見出しが存在すること</li>
</ul></div>
</div>
 <div id="outline-container-orgeae0ec0" class="outline-3">
 <h3 id="orgeae0ec0"> <a href="#orgeae0ec0">simplecovのエディタ表示</a></h3>
 <div class="outline-text-3" id="text-orgeae0ec0">
 <p>
すでにいくつかのエディタでは存在する。
</p>
</div>
</div>
 <div id="outline-container-orgd303995" class="outline-3">
 <h3 id="orgd303995"> <a href="#orgd303995">読書ページ記録</a></h3>
 <div class="outline-text-3" id="text-orgd303995">
 <p>
pdf.jsでページ送りするたびに、その時刻が記録されるのはどうだろう。
ちょっと楽しい感じがする。前の時間との差分も計算する。
</p>
 <ul class="org-ul"> <li>1: 2021-11-13T20:21:20+09:00</li>
 <li>2: 2021-11-13T20:21:34+09:00 (14)</li>
</ul></div>
</div>
 <div id="outline-container-org0fce0dd" class="outline-3">
 <h3 id="org0fce0dd"> <a href="#org0fce0dd">言語記述型のシミュレーション</a></h3>
 <div class="outline-text-3" id="text-org0fce0dd">
 <p>
 <a href="20211107110444-simutrans.html#ID-7c01d791-1479-4727-b076-280034ab6a40">Simutrans</a>を、言語記述でできないだろうか。
</p>

 <p>
たとえば2つに画面がわかれていて、左側はエディタ、右側は画面が表示されている。左側でA = station(1, 2)とすると右の画面に駅が作られる。train(A, B)とするとA, Bを往復する列車が表示される。
</p>
</div>
</div>
 <div id="outline-container-org70a99c2" class="outline-3">
 <h3 id="org70a99c2"> <a href="#org70a99c2">method quiz</a></h3>
 <div class="outline-text-3" id="text-org70a99c2">
 <p>
たとえばRubyのメソッド一覧から任意のものを取って表示する。
知ってるか、知らないかだけ。
ドキュメント、ソースへのリンクを飛ばす。
</p>

 <p>
クラスも指定できるといいな。メソッドの開拓に使える。
</p>

 <p>
ジャンルの指定とかもしてな。  <code>!</code> がついてるやつとか述語メソッドとか。
</p>
</div>
</div>
 <div id="outline-container-org6adf8c2" class="outline-3">
 <h3 id="org6adf8c2"> <a href="#org6adf8c2">各言語でのxmpfilter</a></h3>
 <div class="outline-text-3" id="text-org6adf8c2">
 <p>
xmpfilterはrubyのrcodetools gemsに付属しているコード。
実行結果アノテーションをつけて、行ごとの評価結果をファイルに出力してくれるので学習に便利。
</p>
</div>
</div>
 <div id="outline-container-org9318ae0" class="outline-3">
 <h3 id="org9318ae0"> <a href="#org9318ae0">DBゲーム</a></h3>
 <div class="outline-text-3" id="text-org9318ae0">
 <p>
話がデカすぎてやる気が持続するとは思わないが。
</p>

 <p>
自動生成操作をするプログラムをユーザに見立てて、dbアプリを作成する。出来ていくデータを眺める。とにかく重要なのは、生身のユーザを必要としないことだ。
基本的に眺める楽しさ。
</p>

 <p>
viewは一切開発せず、直にパブリックメソッドを実行するbotを仮想ユーザとして考える。何かイベントを与えると必要なことを行おうとする。経営のダッシュボードだけ可視化できるようにして、あとはルールとして実装する。あとで変更しやすいように、テキストで全管理できるDBにしたいな。
</p>
 <ul class="org-ul"> <li>株</li>
 <li>病院</li>
 <li>レンタルビデオ</li>
 <li>人間関係ネットワーク。お互いに影響を与え合う様子。</li>
</ul> <p>
パワポケのペナントモードという考え方もできる。チームという入力を入れると、試合データが出てくる。試合やチームによって、所属する選手は変化していく。それってシミュレーションゲーム。値を自由に入れることができないシミュレーション。
うむむ、DBを使う必要はあるんだろうか。
</p>
</div>
</div>
 <div id="outline-container-orgc16075a" class="outline-3">
 <h3 id="orgc16075a"> <a href="#orgc16075a">プログラムゲーム</a></h3>
 <div class="outline-text-3" id="text-orgc16075a">
 <p>
最低限の世界のルールを定めておいて、それをプログラムで解決するゲーム。
</p>

 <p>
世界のルール: 物体は質量を持つ、移動には費用がかかる、その枠の中で自由にプログラムできる、というもの。本質的には、ルールセットを記述して戦うロボット的なゲームに似ている。でもそうやって具体的なひとつのケースを見るのではなくて、全体を見るところが違う。
</p>
</div>
</div>
 <div id="outline-container-org97a1ca5" class="outline-3">
 <h3 id="org97a1ca5"> <a href="#org97a1ca5">サウンドノベル・web</a></h3>
 <div class="outline-text-3" id="text-org97a1ca5">
 <ul class="org-ul"> <li>markdownを拡張してサウンドノベル用の文法を作る。</li>
 <li>webでmdを読み込んで表示できるようにする。</li>
</ul></div>
</div>
 <div id="outline-container-org691b45b" class="outline-3">
 <h3 id="org691b45b"> <a href="#org691b45b">バッジ出力ツール</a></h3>
 <div class="outline-text-3" id="text-org691b45b">
 <p>
たとえばカバレッジ出力などは乱立している。
</p>
</div>
</div>
</div>
 <div id="outline-container-org3556471" class="outline-2">
 <h2 id="org3556471"> <a href="#org3556471">References</a></h2>
 <div class="outline-text-2" id="text-org3556471">
</div>
 <div id="outline-container-orge94b996" class="outline-3">
 <h3 id="orge94b996"> <a href="#orge94b996"></a> <a href="https://github.com/practical-tutorials/project-based-learning">practical-tutorials/project-based-learning: Curated list of project-based tutorials</a></h3>
 <div class="outline-text-3" id="text-orge94b996">
 <p>
プロジェクトベースのチュートリアル集。面白い。
</p>
</div>
</div>
</div>
 <div id="outline-container-orgb057d3b" class="outline-2">
 <h2 id="orgb057d3b"> <a href="#orgb057d3b">Archives</a></h2>
 <div class="outline-text-2" id="text-orgb057d3b">
</div>
 <div id="outline-container-org4cfbc9a" class="outline-3">
 <h3 id="org4cfbc9a"> <a href="#org4cfbc9a"> <span class="done CLOSE">CLOSE</span> Textlint Web</a></h3>
 <div class="outline-text-3" id="text-org4cfbc9a">
 <ul class="org-ul"> <li>もうすでにある。</li>
</ul></div>
</div>
 <div id="outline-container-orge3aeeac" class="outline-3">
 <h3 id="orge3aeeac"> <a href="#orge3aeeac"> <span class="done CLOSE">CLOSE</span> テキストベースのゲーム</a></h3>
 <div class="outline-text-3" id="text-orge3aeeac">
 <p>
 <a href="20210624232811-digger.html#ID-70f249a8-f8c8-4a7e-978c-8ff04ffd09c0">digger</a>で、 <a href="20210509095513-ruby.html#ID-cfd092c4-1bb2-43d3-88b1-9f647809e546">Ruby</a>を使ってやった。
</p>

 <ul class="org-ul"> <li>テストしやすいためテキスト主体。</li>
 <li>ローグライク</li>
 <li>アドベンチャーゲーム</li>
</ul></div>
</div>
 <div id="outline-container-org723fdc4" class="outline-3">
 <h3 id="org723fdc4"> <a href="#org723fdc4"> <span class="done CLOSE">CLOSE</span> melpaクローン</a></h3>
 <div class="outline-text-3" id="text-org723fdc4">
 <p>
ruby gemsのクローンのmelpa版。すでにあった。
</p>
</div>
</div>
 <div id="outline-container-org4c5c321" class="outline-3">
 <h3 id="org4c5c321"> <a href="#org4c5c321"> <span class="done DONE">DONE</span> gemfile exporter</a></h3>
 <div class="outline-text-3" id="text-org4c5c321">
 <p>
絶対もうあるが、便利コマンドの練習になる。
</p>
</div>
</div>
 <div id="outline-container-orgf981d0b" class="outline-3">
 <h3 id="orgf981d0b"> <a href="#orgf981d0b"> <span class="done DONE">DONE</span> stale-files-action</a></h3>
 <div class="outline-text-3" id="text-orgf981d0b">
 <p>
更新のないファイルを検知して、issueを作成し、一覧コメントをつけるアクション。
</p>

 <ul class="org-ul"> <li>更新のないファイル検知</li>
 <li>issue作成</li>
 <li>データを受け取って整形、コメント送信</li>
</ul> <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 14: </span>こんな感じのコメント</label> <pre class="src src-nil">- [ ] ./docs/ruby.org 2021-03-04 40days
- [ ] ./docs/python.org 2021-03-04 44days
</pre>
</div>
</div>
 <div id="outline-container-org58f17ee" class="outline-4">
 <h4 id="org58f17ee"> <a href="#org58f17ee">変数情報</a></h4>
 <div class="outline-text-4" id="text-org58f17ee">
 <p>
コメントの最後で、実行した条件を表示する。
</p>
</div>
</div>
 <div id="outline-container-org18a7ea4" class="outline-4">
 <h4 id="org18a7ea4"> <a href="#org18a7ea4">カウント</a></h4>
 <div class="outline-text-4" id="text-org18a7ea4">
 <p>
stale総数 / 検索対象数、 パーセント。
</p>
</div>
</div>
 <div id="outline-container-org8397524" class="outline-4">
 <h4 id="org8397524"> <a href="#org8397524">ファイル名をリンク化</a></h4>
</div>
</div>
 <div id="outline-container-orgdaf3de8" class="outline-3">
 <h3 id="orgdaf3de8"> <a href="#orgdaf3de8"> <span class="done DONE">DONE</span> git-linkを展開する拡張</a></h3>
 <div class="outline-text-3" id="text-orgdaf3de8">
 <p>
GitHub上でパーマリンクのコードが展開されるみたいに、リンクを評価するとコードを展開できるようにしたい。org-modeで使えれば便利だろう。
</p>
</div>
 <div id="outline-container-orga014919" class="outline-4">
 <h4 id="orga014919"> <a href="#orga014919">構想</a></h4>
 <div class="outline-text-4" id="text-orga014919">
 <div class="org-src-container">
 <pre class="src src-shell"> <span class="org-builtin">echo</span>  <span class="org-string">"a"</span>
</pre>
</div>

 <div class="results" id="org182dbb5">
 <p>
a
</p>

</div>

 <p>
と同様に、パーマリンクを書いて、評価する。元リンクもついているので、あとで元を辿ることもできる。ただこの場合の問題点は、シンタックスハイライトを効かせるのが難しいことか。いや、resultsにも効くな。とはいえ再評価すると消えてしまうのでビミョーではある。拡張子をそのまま結果に使えばよさそうだな。
</p>

 <div class="org-src-container">
 <pre class="src src-gh-permalink">https://github.com/kijimaD/roam/blob/5519ac4f79470b6c33d77401bf5202c61951f8bb/20210615222732-project.org#L52
</pre>
</div>

 <div class="results" id="org03b46b6">
 <p>
echo “aaaa”
</p>

</div>

 <p>
普通の関数としても使えるが、org-babelのひとつとして使うのがしっくりくるな。解決したい課題: コードを貼り付けたいけど、元の場所も示しておきたいとき。あとから参照できなくなるのもあるし、引用的にも元リンクはほしい。
</p>

 <ul class="org-ul"> <li>リンク</li>
 <li>コード</li>
</ul> <p>
問題は、org-babelを使うのが正しい方法なのか、ということだ。
</p>

 <ul class="org-ul"> <li>リンクと展開を別にできる</li>
 <li>再評価可能</li>
</ul></div>
</div>
 <div id="outline-container-org0dd490a" class="outline-4">
 <h4 id="org0dd490a"> <a href="#org0dd490a">実装</a></h4>
 <div class="outline-text-4" id="text-org0dd490a">
 <ul class="org-ul"> <li>リンクをパースする部分
 <ul class="org-ul"> <li>サイトを入れ替えられるようにする</li>
</ul></li>
 <li>取得する部分
 <ul class="org-ul"> <li>サイトを入れ替えられるようにする</li>
</ul></li>
 <li>描画する部分
 <ul class="org-ul"> <li>すべてのサイトで共通</li>
</ul></li>
</ul></div>
</div>
</div>
 <div id="outline-container-org9ba4936" class="outline-3">
 <h3 id="org9ba4936"> <a href="#org9ba4936"> <span class="done DONE">DONE</span> やったことの3D/VR表示(MVP)</a></h3>
 <div class="outline-text-3" id="text-org9ba4936">
 <p>
何かやったことを3D表示したい。 <a href="20210901104129-git.html#ID-90c6b715-9324-46ce-a354-63d09403b066">Git</a>とか組み合わせられないか。何かものの収集は、形があるのでたくさんやるほど結果が目に見えやすい。般若心経、ゴミヘビ。どこか行く系は距離で苦労が理解しやすい。
</p>

 <p>
収集やかけた労力によってもっと好きになっていく循環ってある。みうらじゅんはそんな感じのことをよく言っている。
</p>

 <ul class="org-ul"> <li>データ構造
 <ul class="org-ul"> <li>種別
 <ul class="org-ul"> <li>リポジトリ</li>
 <li>Web
 <ul class="org-ul"> <li>本</li>
 <li>Web</li>
</ul></li>
</ul></li>
 <li>URL</li>
 <li>識別名</li>
</ul></li>
</ul> <p>
とりあえず文字表示は抜きにして、立方体と色で表示する。タスク数は、roamにhttpリクエストしてgrepする…。org側でjson出力とかできたらそれを取得するようにしたい。なかなか役立つ感じがするな。
</p>

 <p>
途中まで完了。タスク表示はできてない。
</p>
</div>
 <div id="outline-container-org2a22c4f" class="outline-4">
 <h4 id="org2a22c4f"> <a href="#org2a22c4f">org-roamのjson出力</a></h4>
 <div class="outline-text-4" id="text-org2a22c4f">
 <p>
タスクの情報を加工しやすくする。roam以外にも対応させたいが、メインは自分使用なので管理が2重になるのは避けたい。
</p>
</div>
</div>
 <div id="outline-container-orgc7fe213" class="outline-4">
 <h4 id="orgc7fe213"> <a href="#orgc7fe213">roamの各ページで表示する</a></h4>
 <div class="outline-text-4" id="text-orgc7fe213">
 <p>
各ページでjson表示できるなら、roamの各ページで、タスクモデルを表示できそう。
</p>
</div>
</div>
 <div id="outline-container-org10fcb24" class="outline-4">
 <h4 id="org10fcb24"> <a href="#org10fcb24">マウスオーバーで情報表示</a></h4>
 <div class="outline-text-4" id="text-org10fcb24">
 <p>
立方体のマウスオーバーでそのタスク名とリンクを出してくれたら最高。難しそうだが、価値はある。
</p>
</div>
</div>
 <div id="outline-container-orgeb4c4d0" class="outline-4">
 <h4 id="orgeb4c4d0"> <a href="#orgeb4c4d0">入力方法の一般化</a></h4>
 <div class="outline-text-4" id="text-orgeb4c4d0">
 <p>
入力方式の規定、ブラウザでタスクの入力をできるようにすれば、ほかの人も利用できる。
</p>
</div>
</div>
 <div id="outline-container-orga1a36b4" class="outline-4">
 <h4 id="orga1a36b4"> <a href="#orga1a36b4"></a> <a href="20210831232330-typescript.html#ID-ad1527ee-63b3-4a9b-a553-10899f57c234">TypeScript</a>化</h4>
 <div class="outline-text-4" id="text-orga1a36b4">
 <p>
整備しやすいようにする。また入門するか。
</p>
</div>
</div>
 <div id="outline-container-org95abdaa" class="outline-4">
 <h4 id="org95abdaa"> <a href="#org95abdaa">表示方法をわかりやすくする</a></h4>
 <div class="outline-text-4" id="text-org95abdaa">
 <p>
今の積み重なっていく方式はベストでないように見える。ビジュアル的にもビミョーなので改善する。展示会でズラーっと並べられたゴムヘビのように、見て沸き立つものにしたい。
</p>

 <p>
ベストなのはすべてのオブジェクトに画像と文字をつけることで、やったことがすべて違う形、見え方を持たせることだ。そういうのが100、200並んだのは遠くから見ても壮観だし、近くからじっくり見ることもできる。円周上に並べるのが良いのかな。
</p>
</div>
</div>
</div>
 <div id="outline-container-orgf69c1e0" class="outline-3">
 <h3 id="orgf69c1e0"> <a href="#orgf69c1e0"> <span class="done DONE">DONE</span> github actionsライクなランナー  <code>[15/15]</code></a></h3>
 <div class="outline-text-3" id="text-orgf69c1e0">
 <p>
必要なツールがインストールされてるか、宣言的に書いて診断するツール。なかったら実行できそうな場合は自動実行させる。
</p>

 <p>
yamlで書き、ローカルで実行する。別にymlでなくてよくない、という感じはする。うむむ、目的がよくわからなくなってきた。 <a href="20220427215330-github_actions.html#ID-2d35ac9e-554a-4142-bba7-3c614cbfe4c4">GitHub Actions</a>のクローンを作ってみるでよくないか。面白そうだし、要件はこの上なく明確だ。
</p>

 <div class="org-src-container">
 <pre class="src src-yaml">jobs:
  job_a:
    description: test
    steps:
      - name: a
        run: echo hello
</pre>
</div>

 <p>
実行結果が確認できる。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 15: </span>実行結果を標準出力で確認する</label> <pre class="src src-nil">- job_a ✓
  - a ✓
    ログ...
  - b ✓
    ログ...
- job_b ✓
  - c skip
    ログ...
  - d ✓
    ログ...
</pre>
</div>

 <p>
目標としては、 <a href="20220427215330-github_actions.html#ID-2d35ac9e-554a-4142-bba7-3c614cbfe4c4">GitHub Actions</a>用のymlをそのまま実行できること。
</p>
</div>
 <div id="outline-container-orgc301995" class="outline-4">
 <h4 id="orgc301995"> <a href="#orgc301995"> <span class="done DONE">DONE</span> データ構造を定義する</a></h4>
 <div class="outline-text-4" id="text-orgc301995">
 <ul class="org-ul"> <li>jobs(workflow)
 <ul class="org-ul"> <li>job
 <ul class="org-ul"> <li>step
 <ul class="org-ul"> <li>task</li>
 <li>task</li>
</ul></li>
</ul></li>
 <li>job
 <ul class="org-ul"> <li>step
 <ul class="org-ul"> <li>task</li>
</ul></li>
</ul></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org5750f72" class="outline-4">
 <h4 id="org5750f72"> <a href="#org5750f72"> <span class="done DONE">DONE</span> yamlをパースする</a></h4>
 <div class="outline-text-4" id="text-org5750f72">
 <p>
設定ファイルをパースする。
</p>
</div>
</div>
 <div id="outline-container-org6830430" class="outline-4">
 <h4 id="org6830430"> <a href="#org6830430"> <span class="done DONE">DONE</span> 複数steps実行</a></h4>
 <div class="outline-text-4" id="text-org6830430">
 <p>
stepsは順次実行。
</p>
</div>
</div>
 <div id="outline-container-orgd6ff44f" class="outline-4">
 <h4 id="orgd6ff44f"> <a href="#orgd6ff44f"> <span class="done CLOSE">CLOSE</span> jobの並列処理</a></h4>
 <div class="outline-text-4" id="text-orgd6ff44f">
 <p>
jobは並列実行。
</p>

 <ul class="org-ul"> <li>どうしよう。ranを参考にしようにも、よくわからない
 <ul class="org-ul"> <li>何かのプログラミングパターンなんだ</li>
</ul></li>
 <li>単にゴルーチンにすればいいような。とりあえずそれでやってみる</li>
</ul></div>
</div>
 <div id="outline-container-org4465d82" class="outline-4">
 <h4 id="org4465d82"> <a href="#org4465d82"> <span class="done DONE">DONE</span> ログを別フィールドにする</a></h4>
 <div class="outline-text-4" id="text-org4465d82">
 <p>
結果画面でjob, stepごとに一気に表示する。
</p>
</div>
</div>
 <div id="outline-container-org9170340" class="outline-4">
 <h4 id="org9170340"> <a href="#org9170340"> <span class="done DONE">DONE</span> 実行結果にインデントをつける</a></h4>
 <div class="outline-text-4" id="text-org9170340">
 <p>
cmd.Start()したときに自動で入ってしまうが、これにインデントをつけるにはどうしたらよいのだろう。
</p>

 <p>
実行時は別のstdoutではない別のwriterに入れておいて、実行したあとにインデントをつけてstdoutに送信する。
</p>
</div>
</div>
 <div id="outline-container-org3aa666d" class="outline-4">
 <h4 id="org3aa666d"> <a href="#org3aa666d"> <span class="done DONE">DONE</span> envキーワード追加</a></h4>
 <div class="outline-text-4" id="text-org3aa666d">
 <p>
環境変数追加。
</p>

 <p>
 <a href="20220427215330-github_actions.html#ID-2d35ac9e-554a-4142-bba7-3c614cbfe4c4">GitHub Actions</a>にはworkflow, job, stepであるみたいだが、とりあえずstepだけを実装する。
</p>
</div>
</div>
 <div id="outline-container-org990eee3" class="outline-4">
 <h4 id="org990eee3"> <a href="#org990eee3"> <span class="done DONE">DONE</span> ifキーワード追加</a></h4>
 <div class="outline-text-4" id="text-org990eee3">
 <p>
if条件式追加。
</p>
</div>
</div>
 <div id="outline-container-orgc3b2ada" class="outline-4">
 <h4 id="orgc3b2ada"> <a href="#orgc3b2ada"> <span class="done DONE">DONE</span> logを楽に保存できるようにする</a></h4>
 <div class="outline-text-4" id="text-orgc3b2ada">
 <p>
dockerの実装を参考にする。
</p>

 <p>
が途中経過。
</p>
</div>
</div>
 <div id="outline-container-orged382ad" class="outline-4">
 <h4 id="orged382ad"> <a href="#orged382ad"> <span class="done DONE">DONE</span> steps数表示</a></h4>
 <div class="outline-text-4" id="text-orged382ad">
 <p>
steps数を表示してないので追加する。
</p>
</div>
</div>
 <div id="outline-container-orgd955623" class="outline-4">
 <h4 id="orgd955623"> <a href="#orgd955623"> <span class="done DONE">DONE</span> working_directory追加</a></h4>
 <div class="outline-text-4" id="text-orgd955623">
 <p>
cmdは独立してるので、単にフィールドに代入するだけでできた。
</p>

 <p>
working_directory追加。
</p>

 <ul class="org-ul"> <li>definition追加</li>
 <li>最初のディレクトリを記録</li>
 <li>実行前に指定ディレクトリに移動</li>
 <li>実行後に戻る</li>
</ul></div>
</div>
 <div id="outline-container-org059e475" class="outline-4">
 <h4 id="org059e475"> <a href="#org059e475"> <span class="done DONE">DONE</span> 実行結果を表示する</a></h4>
 <div class="outline-text-4" id="text-org059e475">
 <p>
並列処理するとめちゃくちゃになるので結果表示があると良い。成功、失敗、スキップあたりがあるとよさそう。
</p>
</div>
</div>
 <div id="outline-container-orgd1c72a7" class="outline-4">
 <h4 id="orgd1c72a7"> <a href="#orgd1c72a7"> <span class="done DONE">DONE</span> 設定ファイル指定オプション</a></h4>
 <div class="outline-text-4" id="text-orgd1c72a7">
 <p>
設定ファイルをコマンドラインオプションで指定できるようにする。また、デフォルトファイルを設定する。
</p>
</div>
</div>
 <div id="outline-container-orge25ffe3" class="outline-4">
 <h4 id="orge25ffe3"> <a href="#orge25ffe3"> <span class="done CLOSE">CLOSE</span> 使い方のサンプルを作る</a></h4>
 <div class="outline-text-4" id="text-orge25ffe3">
 <p>
自分で使うサンプルを示す。
</p>
</div>
</div>
 <div id="outline-container-org333ec93" class="outline-4">
 <h4 id="org333ec93"> <a href="#org333ec93"> <span class="done DONE">DONE</span> table driven test にする</a></h4>
 <div class="outline-text-4" id="text-org333ec93">
 <p>
テストの重複が多いので書き換える。
</p>
</div>
</div>
</div>
 <div id="outline-container-orgd5a7cd2" class="outline-3">
 <h3 id="orgd5a7cd2"> <a href="#orgd5a7cd2"> <span class="done DONE">DONE</span> 簡単なlintを作る</a></h3>
 <div class="outline-text-3" id="text-orgd5a7cd2">
 <p>
とりあえず識別子を判定するlint、テストをほぼコピペだけど作成した。
</p>
</div>
</div>
 <div id="outline-container-org54295cb" class="outline-3">
 <h3 id="org54295cb"> <a href="#org54295cb"> <span class="done DONE">DONE</span> Golangの全カバレッジ率を表示したHTML</a></h3>
 <div class="outline-text-3" id="text-org54295cb">
 <p>
すぐできた。
</p>

 <p>
あると便利そう。すでにある可能性はある。
</p>
</div>
</div>
 <div id="outline-container-org1970ec9" class="outline-3">
 <h3 id="org1970ec9"> <a href="#org1970ec9"> <span class="done DONE">DONE</span> oav機能追加</a></h3>
 <div class="outline-text-3" id="text-org1970ec9">
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 連続でテストを実行できるようにする
 <ul class="org-ul"> <li>テストで再現させる</li>
 <li>load doc: error converting YAML to JSON: EOF</li>
 <li>一度読み込んだあとはこれが出るから、引数の値が変わっているように見える。ポインタではないけど</li>
 <li>一度走らせたあと、schemafileの入るbyteが空になるのを確認</li>
 <li>Readerは、一度読み込みが終わると次読み込むときは中身が空になる。状態を保持している</li>
 <li>bytes.Bufferを使うようにする</li>
</ul></li>
 <li class="on"> <input type="checkbox" checked="checked"></input> コマンドとして、パスをダンプできるようにする</li>
 <li class="on"> <input type="checkbox" checked="checked"></input> GET以外に対応する</li>
 <li class="on"> <input type="checkbox" checked="checked"></input> パラメータ追加に対応する</li>
 <li class="on"> <input type="checkbox" checked="checked"></input> 出る画面をわかりやすくする</li>
</ul></div>
</div>
 <div id="outline-container-org06411c4" class="outline-3">
 <h3 id="org06411c4"> <a href="#org06411c4"> <span class="done DONE">DONE</span> プロジェクトで使う静的解析ツールを作る</a></h3>
 <div class="outline-text-3" id="text-org06411c4">
 <p>
 <a href="20210911113057-go.html#ID-7cacbaa3-3995-41cf-8b72-58d6e07468b1">Go</a>では簡単にlinterが作れるようだ。
</p>

 <ul class="org-ul"> <li>モックを使ったとき、明示的にtimesを呼び出していることを確かめる</li>
 <li>無意味な関数コメントを検知</li>
</ul></div>
</div>
 <div id="outline-container-orgbde50b5" class="outline-3">
 <h3 id="orgbde50b5"> <a href="#orgbde50b5"> <span class="done CLOSE">CLOSE</span> Slackで倉庫番</a></h3>
 <div class="outline-text-3" id="text-orgbde50b5">
 <ul class="org-ul"> <li> <a href="https://kouki.hatenadiary.com/entry/2016/07/19/005006">Slackで将棋を動かしてみる - Lento con forza</a></li>
</ul> <p>
のように、SlackをゲームのUIとして用いることができる。
</p>
</div>
 <div id="outline-container-orgf739f88" class="outline-4">
 <h4 id="orgf739f88"> <a href="#orgf739f88"> <span class="done DONE">DONE</span> プレイヤーが移動できるようにする</a></h4>
 <div class="outline-text-4" id="text-orgf739f88">
 <p>
コマンドラインで移動できるようにする。壁やマップ外には移動できない。
</p>
</div>
</div>
 <div id="outline-container-org7e097c8" class="outline-4">
 <h4 id="org7e097c8"> <a href="#org7e097c8"> <span class="done DONE">DONE</span> 荷物を追加する</a></h4>
 <div class="outline-text-4" id="text-org7e097c8">
 <p>
配置できるようにする。
</p>
</div>
</div>
 <div id="outline-container-orge1091ea" class="outline-4">
 <h4 id="orge1091ea"> <a href="#orge1091ea"> <span class="done DONE">DONE</span> 荷物を押せるようにする</a></h4>
 <div class="outline-text-4" id="text-orge1091ea">
 <p>
プレイヤーが移動する方向に荷物があって、空きスペースがあるなら移動できる。
</p>

 <ul class="org-ul"> <li>プレイヤーと荷物の衝突判定。</li>
 <li>荷物と衝突した場合は、荷物で再度移動を試す。その方向に動けるなら、荷物とプレイヤーを動かす。荷物を動かせない場合は何もしない</li>
 <li>いつのまにかプレイヤーが分身していた
 <ul class="org-ul"> <li>移動後に消えてない。コピーが作られているようだ</li>
</ul></li>
 <li>ポインタにしたらなぜか荷物entityがゴールentityになる</li>
 <li>keyの座標と、entityの持ってる座標が一致してない</li>
</ul></div>
</div>
 <div id="outline-container-org1cd19b2" class="outline-4">
 <h4 id="org1cd19b2"> <a href="#org1cd19b2"> <span class="done DONE">DONE</span> クリア条件を追加する</a></h4>
 <div class="outline-text-4" id="text-org1cd19b2">
 <p>
すべて適当な位置に置くとクリア。
</p>
</div>
</div>
 <div id="outline-container-org5e3724d" class="outline-4">
 <h4 id="org5e3724d"> <a href="#org5e3724d"> <span class="done DONE">DONE</span> 地図をテキストから読み込む</a></h4>
 <div class="outline-text-4" id="text-org5e3724d">
 <p>
手作りで作って、ファイル化して複数読み込めるようにする。
</p>
</div>
</div>
 <div id="outline-container-org648a5bb" class="outline-4">
 <h4 id="org648a5bb"> <a href="#org648a5bb"> <span class="done DONE">DONE</span> goalをtileに移動</a></h4>
 <div class="outline-text-4" id="text-org648a5bb">
 <p>
動く可能性がないので。
</p>
</div>
</div>
 <div id="outline-container-orgb2a5f49" class="outline-4">
 <h4 id="orgb2a5f49"> <a href="#orgb2a5f49"> <span class="done DONE">DONE</span> 地図生成時のバリデーション</a></h4>
 <div class="outline-text-4" id="text-orgb2a5f49">
 <p>
縦横が同じサイズでないとエラーを吐くようにする。
</p>
</div>
</div>
 <div id="outline-container-org4a5e654" class="outline-4">
 <h4 id="org4a5e654"> <a href="#org4a5e654"> <span class="done DONE">DONE</span> ファイル・ディレクトリの整理</a></h4>
 <div class="outline-text-4" id="text-org4a5e654">
 <p>
どこにあるかわからなくなってきた。
</p>
</div>
</div>
 <div id="outline-container-orgd46c989" class="outline-4">
 <h4 id="orgd46c989"> <a href="#orgd46c989"> <span class="done DONE">DONE</span> 地図を自動生成できるようにする <code>[100%]</code></a></h4>
 <div class="outline-text-4" id="text-orgd46c989">
 <p>
レベルを指定して生成してくれるようにする。生成ロジックを入れ替えられるように設計する。
</p>

 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> プレーンなマップ生成</li>
 <li class="on"> <input type="checkbox" checked="checked"></input> ランダムにゴールと荷物配置</li>
 <li class="on"> <input type="checkbox" checked="checked"></input> ✓を定数にする</li>
 <li class="on"> <input type="checkbox" checked="checked"></input> 壁をランダムに生成する</li>
 <li class="on"> <input type="checkbox" checked="checked"></input> 逆に動かす関数作成</li>
 <li class="on"> <input type="checkbox" checked="checked"></input> ランダムに動かす</li>
</ul></div>
</div>
 <div id="outline-container-org42bb72c" class="outline-4">
 <h4 id="org42bb72c"> <a href="#org42bb72c"> <span class="done DONE">DONE</span> CUIモードに組み込む</a></h4>
 <div class="outline-text-4" id="text-org42bb72c">
 <p>
ステージ生成を適用させる。
</p>
</div>
</div>
 <div id="outline-container-org6c7cc78" class="outline-4">
 <h4 id="org6c7cc78"> <a href="#org6c7cc78"> <span class="done DONE">DONE</span> 最初からリセット機能</a></h4>
 <div class="outline-text-4" id="text-org6c7cc78">
 <ul class="org-ul"> <li>動けなくなったら最初の位置へリセットできるようにする
 <ul class="org-ul"> <li>変わらないな</li>
 <li>スライスのメモリアドレスは違う</li>
 <li>が、変更内容を明らかに共有しているように見える、ポインタが同じなのだろう</li>
 <li>スライスEntitiesの中身はEntity構造体。構造体の中には、ポインタのフィールドもある。たとえばPosはポインタでないと移動を反映できないのでポインタにしている</li>
 <li>ポインタをコピーしても、値は戻らない。向いてる先は同じ値なので</li>
 <li>イテレートして手動でコピーするしかないのか</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-orgab90a23" class="outline-4">
 <h4 id="orgab90a23"> <a href="#orgab90a23"> <span class="done CLOSE">CLOSE</span> サーバモード</a></h4>
 <div class="outline-text-4" id="text-orgab90a23">
 <p>
echoで処理できるようにする。現在の地図と、移動方向を送信すると移動結果を返す。
</p>
</div>
</div>
 <div id="outline-container-org1011197" class="outline-4">
 <h4 id="org1011197"> <a href="#org1011197"> <span class="done CLOSE">CLOSE</span> 統計保存</a></h4>
 <div class="outline-text-4" id="text-org1011197">
 <p>
何かしらデータベースの機能を使う。
</p>
</div>
</div>
 <div id="outline-container-org5cde68c" class="outline-4">
 <h4 id="org5cde68c"> <a href="#org5cde68c"> <span class="done CLOSE">CLOSE</span> デプロイ</a></h4>
 <div class="outline-text-4" id="text-org5cde68c">
 <p>
サーバレスでどこかに上げる。
</p>
</div>
</div>
</div>
 <div id="outline-container-org584e0ce" class="outline-3">
 <h3 id="org584e0ce"> <a href="#org584e0ce"> <span class="done DONE">DONE</span> webサーバをスクラッチ実装する</a></h3>
 <div class="outline-text-3" id="text-org584e0ce">
 <p>
システムコールを使ってやる。
</p>

 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 標準入出力</li>
 <li class="on"> <input type="checkbox" checked="checked"></input> ソケットを使う</li>
</ul></div>
</div>
 <div id="outline-container-org7090c87" class="outline-3">
 <h3 id="org7090c87"> <a href="#org7090c87"> <span class="done DONE">DONE</span> 倉庫番</a></h3>
 <div class="outline-text-3" id="text-org7090c87">
 <p>
でかいのに取り組むより、これくらいがよい。
</p>
 <ul class="org-ul"> <li>空間の実装方法が理解できる。</li>
</ul></div>
</div>
 <div id="outline-container-org22a5b2d" class="outline-3">
 <h3 id="org22a5b2d"> <a href="#org22a5b2d"> <span class="done CLOSE">CLOSE</span> 経済ゲーム</a></h3>
 <div class="outline-text-3" id="text-org22a5b2d">
 <p>
Practical Ruby Projectsに書いてあったやつ。経済シミュレーター。 <a href="20210811223913-money.html#ID-b4f27aef-22ec-45c0-be50-810f3a0cf9bc">Money</a>の知識と絡められないか。
</p>
</div>
</div>
 <div id="outline-container-org181a65a" class="outline-3">
 <h3 id="org181a65a"> <a href="#org181a65a"> <span class="done DONE">DONE</span> 環境構築ツール</a></h3>
 <div class="outline-text-3" id="text-org181a65a">
 <p>
assertとインストールコマンドをセットで書いてインストールするツール。
</p>

 <div class="org-src-container">
 <pre class="src src-yml">- cond: "cd ~/aaa"
  run: git clone aaa.git
</pre>
</div>

 <ul class="org-ul"> <li>とりあえず今のdotfileの内容をかきあげて、どんな感じにしたら便利かを探る。</li>
 <li>バイナリにすれば、何もインストールされてないまっさらな状態から実行しやすい
 <ul class="org-ul"> <li>もとのスクリプトはシェルだから、別にどこでも実行できるのは変わらないか</li>
</ul></li>
 <li>dotfilesを埋め込めないか</li>
</ul></div>
</div>
 <div id="outline-container-org1fa712b" class="outline-3">
 <h3 id="org1fa712b"> <a href="#org1fa712b"> <span class="done DONE">DONE</span> gitのタグ番号をもとにファイルを書き換えるツール</a></h3>
 <div class="outline-text-3" id="text-org1fa712b">
 <ul class="org-ul"> <li>対象ファイルを指定できるようにする</li>
 <li>.versionファイルを作成すればいいのでは、と考えた。古いバージョンはそれで特定すればよさそう</li>
</ul></div>
</div>
 <div id="outline-container-org0de77c0" class="outline-3">
 <h3 id="org0de77c0"> <a href="#org0de77c0"> <span class="done DONE">DONE</span> Goアセンブラを出力するorg-babel</a></h3>
 <div class="outline-text-3" id="text-org0de77c0">
 <p>
出力アセンブラを試すのが面倒なので簡単なのを作る。一般性はないのでMELPAには送れない。
</p>

 <div class="org-src-container">
 <pre class="src src-go-asm">package main
func main() {
	for i := 1; i <= 10; i++ {
		print(i)
	}
}
</pre>
</div>

 <div class="results" id="orge32003d">
 <p>
main.main STEXT size=87 args=0x0 locals=0x18 funcid=0x0 align=0x0
	0x0000 00000 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:2)	TEXT	main.main(SB), ABIInternal, $24-0
	0x0000 00000 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:2)	CMPQ	SP, 16(R14)
	0x0004 00004 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:2)	PCDATA	$0, $-2
	0x0004 00004 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:2)	JLS	80
	0x0006 00006 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:2)	PCDATA	$0, $-1
	0x0006 00006 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:2)	SUBQ	$24, SP
	0x000a 00010 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:2)	MOVQ	BP, 16(SP)
	0x000f 00015 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:2)	LEAQ	16(SP), BP
	0x0014 00020 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:2)	FUNCDATA	$0, gclocals·g2BeySu+wFnoycgXfElmcg==(SB)
	0x0014 00020 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:2)	FUNCDATA	$1, gclocals·g2BeySu+wFnoycgXfElmcg==(SB)
	0x0014 00020 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:3)	MOVQ	$1, main.i+8(SP)
	0x001d 00029 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:3)	JMP	31
	0x001f 00031 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:3)	CMPQ	main.i+8(SP), $10
	0x0025 00037 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:3)	JLE	41
	0x0027 00039 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:3)	JMP	70
	0x0029 00041 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:4)	PCDATA	$1, $0
	0x0029 00041 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:4)	CALL	runtime.printlock(SB)
	0x002e 00046 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:4)	MOVQ	main.i+8(SP), AX
	0x0033 00051 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:4)	CALL	runtime.printint(SB)
	0x0038 00056 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:4)	CALL	runtime.printunlock(SB)
	0x003d 00061 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:4)	JMP	63
	0x003f 00063 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:3)	INCQ	main.i+8(SP)
	0x0044 00068 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:3)	JMP	31
	0x0046 00070 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:6)	PCDATA	$1, $-1
	0x0046 00070 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:6)	MOVQ	16(SP), BP
	0x004b 00075 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:6)	ADDQ	$24, SP
	0x004f 00079 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:6)	RET
	0x0050 00080 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:6)	NOP
	0x0050 00080 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:2)	PCDATA	$1, $-1
	0x0050 00080 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:2)	PCDATA	$0, $-2
	0x0050 00080 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:2)	CALL	runtime.morestack_noctxt(SB)
	0x0055 00085 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:2)	PCDATA	$0, \(-1
	0x0055 00085 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:2)	JMP	0
	0x0000 49 3b 66 10 76 4a 48 83 ec 18 48 89 6c 24 10 48  I;f.vJH...H.l\).H
	0x0010 8d 6c 24 10 48 c7 44 24 08 01 00 00 00 eb 00 48  .l$.H.D$…….H
	0x0020 83 7c 24 08 0a 7e 02 eb 1d e8 00 00 00 00 48 8b  .|$..~……..H.
	0x0030 44 24 08 e8 00 00 00 00 e8 00 00 00 00 eb 00 48  D$………….H
	0x0040 ff 44 24 08 eb d9 48 8b 6c 24 10 48 83 c4 18 c3  .D$…H.l$.H….
	0x0050 e8 00 00 00 00 eb a9                             …….
	rel 42+4 t=7 runtime.printlock+0
	rel 52+4 t=7 runtime.printint+0
	rel 57+4 t=7 runtime.printunlock+0
	rel 81+4 t=7 runtime.morestack_noctxt+0
go:cuinfo.producer.main SDWARFCUINFO dupok size=0
	0x0000 2d 4e 20 2d 6c 20 72 65 67 61 62 69              -N -l regabi
go:cuinfo.packagename.main SDWARFCUINFO dupok size=0
	0x0000 6d 61 69 6e                                      main
main..inittask SNOPTRDATA size=24
	0x0000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  …………….
	0x0010 00 00 00 00 00 00 00 00                          ……..
gclocals·g2BeySu+wFnoycgXfElmcg== SRODATA dupok size=8
	0x0000 01 00 00 00 00 00 00 00                          ……..
</p>

</div>
</div>
</div>
 <div id="outline-container-org385b6b3" class="outline-3">
 <h3 id="org385b6b3"> <a href="#org385b6b3"> <span class="done DONE">DONE</span> carve で取るタグが時系列順になっていない</a></h3>
 <div class="outline-text-3" id="text-org385b6b3">
 <p>
古いタグが、最新になってしまっている。直す。
</p>

 <p>
軽量タグを取れてなかったためだった。
</p>
</div>
</div>
 <div id="outline-container-orgb16a553" class="outline-3">
 <h3 id="orgb16a553"> <a href="#orgb16a553"> <span class="done DONE">DONE</span> tiny file managerのアップロードスクリプトを作成する</a></h3>
 <div class="outline-text-3" id="text-orgb16a553">
 <p>
特殊な状況用に作る。
</p>

 <ul class="org-ul"> <li>ファイル指定できるようにする
 <ul class="org-ul"> <li>不要とする</li>
</ul></li>
 <li class="on"> <input type="checkbox" checked="checked"></input> ツールのヘルプ文を作る</li>
 <li class="on"> <input type="checkbox" checked="checked"></input> goreleaserを設定する</li>
 <li>転送成功メッセージと転送先パス
 <ul class="org-ul"> <li>アップロードしたあとどこに配置されるかはファイルマネージャの設定によるのでスキップ</li>
</ul></li>
 <li class="on"> <input type="checkbox" checked="checked"></input> curlのプログレスバーをリアルタイム表示する</li>
 <li class="on"> <input type="checkbox" checked="checked"></input> サイズがでかくても成功するかを確認する</li>
 <li class="off"> <input type="checkbox"></input> ユーザ・パスを指定できるようにする
 <ul class="org-ul"> <li>まだいらない</li>
</ul></li>
 <li class="on"> <input type="checkbox" checked="checked"></input> クロスプラットフォームにする
 <ul class="org-ul"> <li>シェルまわりがかなり違う</li>
 <li>シェルを使わない形式に書き直した</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org706bbb0" class="outline-3">
 <h3 id="org706bbb0"> <a href="#org706bbb0"> <span class="done DONE">DONE</span> グラフ生成</a></h3>
 <div class="outline-text-3" id="text-org706bbb0">
 <p>
さくっとグラフを作る。
</p>
</div>
</div>
 <div id="outline-container-orgf264778" class="outline-3">
 <h3 id="orgf264778"> <a href="#orgf264778"> <span class="done DONE">DONE</span> Goで何かしらWebサーバを作る</a></h3>
 <div class="outline-text-3" id="text-orgf264778">
 <p>
練習。
</p>
</div>
</div>
 <div id="outline-container-org57c9ced" class="outline-3">
 <h3 id="org57c9ced"> <a href="#org57c9ced"> <span class="done DONE">DONE</span> openapi3filterのミドルウェアの使い方を調べる</a></h3>
 <div class="outline-text-3" id="text-org57c9ced">
 <p>
openapi3filterは、Go言語のAPIサーバと <a href="20230119001157-openapi.html#ID-a833c386-3cca-49eb-969a-5af58991250d">OpenAPI</a>を連携させるライブラリ。
</p>

 <ul class="org-ul"> <li> <a href="https://pkg.go.dev/github.com/getkin/kin-openapi@v0.97.0/openapi3filter#example-Validator">httptest.NewServer</a></li>
</ul> <p>
に例が書いてあるが、なぜこれで動くのかがわからない。
</p>

 <ul class="org-ul"> <li>squareHanderとパスの紐付けはどこでやっている
 <ul class="org-ul"> <li>紐付けはしてなかった。パスによってハンドラが分岐してなかった</li>
 <li>1つのハンドラだけ</li>
</ul></li>
 <li>実行テストはできたが、これをどうやってミドルウェアに組み込むか。テストするか</li>
 <li>少し不器用だが、Ginに組み込めた</li>
</ul></div>
</div>
 <div id="outline-container-org605a35c" class="outline-3">
 <h3 id="org605a35c"> <a href="#org605a35c"> <span class="done DONE">DONE</span> 通知ビューワを作る2</a></h3>
 <div class="outline-text-3" id="text-org605a35c">
 <p>
electronで作る。
</p>

 <p>
前回の問題点は何か。
</p>

 <ul class="org-ul"> <li>iframeの制約で遷移できなかった</li>
 <li>よくわからないエラーで落ちる</li>
</ul> <p>
メモ。
</p>
 <ul class="org-ul"> <li>タブを切り替えたい
 <ul class="org-ul"> <li>うまくいかない</li>
 <li>できた。preload.jsを読み込んでないだけだった</li>
</ul></li>
</ul> <p>
設計。
</p>
 <ul class="org-ul"> <li>フロントではタブの状態管理をする
 <ul class="org-ul"> <li>UIとしては切り替えられればよい</li>
</ul></li>
 <li>バックエンド
 <ul class="org-ul"> <li>ソースURL(feed URLとか)をもとに、エントリURL+タイトルの取得ジョブ実行</li>
 <li>サーバ</li>
 <li>SQLiteとのやりとり</li>
 <li>エントリテーブルを作って、そこで管理する。既読がついてないものを返す</li>
 <li>エンドポイント
 <ul class="org-ul"> <li>設定一覧</li>
</ul></li>
</ul></li>
</ul> <p>
エントリのステート。
</p>
 <ul class="org-ul"> <li>未取得</li>
 <li>エントリ取得</li>
 <li>同期ずみ
 <ul class="org-ul"> <li>クライアントを起動しなおすと再度受信する</li>
 <li>クライアントが取得時に排除するしかないのかな</li>
 <li>クライアントが現在あるものをパラメータで送信するようにして、バックエンドはそれを含むと返さない、でよさそうか。やってることは同じだが、バックエンドから来る値をそのまま使えるほうが直感的だ</li>
</ul></li>
 <li>既読</li>
 <li>全体の状態管理が必要。タブボタンとウィンドウは一致しなければならない
 <ul class="org-ul"> <li>react側で状態管理する</li>
 <li>状態管理に対してメソッドを定義して、同時にIPC通信を実行させればよさそう</li>
</ul></li>
 <li>タブボタンを削除すると対応するウィンドウが削除される</li>
 <li>今はウィンドウのURLで判断して切り替えてるけど、複数ある場合はどうなるか</li>
 <li>ウィンドウを開いたときに、IDを保存させる。IDを元にタイトルやURLだのにアクセスさせる
 <ul class="org-ul"> <li>タイトルはタブが持ってるのでDBにはいらない可能性がある</li>
</ul></li>
 <li>ステートのデータ構造はどうするか
 <ul class="org-ul"> <li>ViewのID
 <ul class="org-ul"> <li>URL</li>
 <li>タイトル</li>
 <li>は、viewから取得できるのでいらない</li>
</ul></li>
</ul></li>
 <li>ipcRendererの使い方がわからない
 <ul class="org-ul"> <li>preload.tsで登録して使う</li>
 <li>コピペしたコードにonはすでに登録してあった</li>
</ul></li>
 <li>main側のdom-readyは実行できてる
 <ul class="org-ul"> <li>なのでsendはできてるように見える</li>
 <li>受信が原因か、送信が原因かわからない</li>
 <li>送信してるwindowを指定できてなかった。UIがあるwindowに送る必要がある</li>
</ul></li>
 <li>タブを消したあとに、新しいタブを開こうとするとエラーになる。前のタブにフォーカスしようとするからか</li>
 <li>取得の手順
 <ul class="org-ul"> <li>「10件取得」ボタンをつくり、それを押すと最大10個のリンクを取得してくる</li>
 <li>入力: 件数とすでにあるリンク一覧</li>
 <li>出力: 指定件数で、すでにあるリンクを排除したリンクを返す</li>
</ul></li>
 <li>フィードを書くところをファイルにするかデータベースにするか
 <ul class="org-ul"> <li>ファイルだとGit管理できる。準備や説明が面倒。実装は楽</li>
 <li>データベースだとブラウザでそのまま設定しやすい。UIの準備はやや面倒</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org1f53d82" class="outline-3">
 <h3 id="org1f53d82"> <a href="#org1f53d82"> <span class="done DONE">DONE</span> APIサーバ開発</a></h3>
 <div class="outline-text-3" id="text-org1f53d82">
 <p>
作る。
</p>
</div>
</div>
 <div id="outline-container-org0d3a5f8" class="outline-3">
 <h3 id="org0d3a5f8"> <a href="#org0d3a5f8"> <span class="done DONE">DONE</span> 監視ツールを試す</a></h3>
 <div class="outline-text-3" id="text-org0d3a5f8">
 <p>
コンテナログを見やすくする。
</p>

 <ul class="org-ul"> <li>Management -> Kibana -> DataViewでデータを追加。fluentdからうまく送信されていれば、indexの候補が表示される</li>
 <li>Management -> Data -> Index Lifecycle Policies で削除設定を追加する。肥大化するので</li>
 <li>kibanaは通知が有料だったので、途中でやめた。監視しても通知できなきゃ意味がない</li>
 <li>代わりにprometheusを使うことにした</li>
</ul></div>
</div>
 <div id="outline-container-orgc789007" class="outline-3">
 <h3 id="orgc789007"> <a href="#orgc789007"> <span class="done CLOSE">CLOSE</span> go playgroundからとってくるorg-babel</a></h3>
 <div class="outline-text-3" id="text-orgc789007">
 <p>
org-babelのGoは制約が大きいので。いっそplaygroundから取ってきたほうが便利そう。
</p>

 <p>
すでにそういうパッケージがあったのでそれを使う。テストが実行できないな。
</p>
</div>
</div>
 <div id="outline-container-org1c943eb" class="outline-3">
 <h3 id="org1c943eb"> <a href="#org1c943eb"> <span class="done DONE">DONE</span> 遮断プロキシを設定する</a></h3>
 <div class="outline-text-3" id="text-org1c943eb">
 <p>
集中したいとき遮断できるようにする。
</p>

 <ul class="org-ul"> <li>今のプロキシのモード設定(priv, work, disable)
 <ul class="org-ul"> <li>あまり起動設定変更しないし、いいか</li>
</ul></li>
 <li class="on"> <input type="checkbox" checked="checked"></input> システムのプロキシ選択状況表示(オフ、オン)</li>
 <li class="on"> <input type="checkbox" checked="checked"></input> CLIでのプロキシモード切り替え</li>
</ul></div>
</div>
 <div id="outline-container-orga6da289" class="outline-3">
 <h3 id="orga6da289"> <a href="#orga6da289"> <span class="done DONE">DONE</span> PDF管理</a></h3>
 <div class="outline-text-3" id="text-orga6da289">
 <p>
本はPDFで買うことが多い。ストレージに置いているがわけわからない。2個買ってたりする。既存ツールでいいのがないか調べる。ファイル構造じゃなくて、タグで管理したい。バージョン管理したい。
</p>

 <p>
ファイルとメタデータを紐付けられればよい。
</p>

 <p>
ファイル。
</p>
 <div class="org-src-container">
 <pre class="src src-nil">{ID}_{タイトル}.pdf
{ID}.toml

- 20240303T201703_ふつうのLinuxプログラミング.pdf
- 20240303T201703.toml
- 20250101T191703_コーディングを支える技術.pdf
- 20250101T191703.toml
</pre>
</div>

 <ul class="org-ul"> <li>タイトルはPDF情報から取ってこれるので、コマンドでファイル名は自動生成する。IDがあるのでタイトルはかぶってもよい
 <ul class="org-ul"> <li>PDFじゃないこともあるのでこれはまあいいか</li>
 <li>ID以降はどうでもいい</li>
</ul></li>
 <li>tomlも同時に自動生成する。タイトルなどがある</li>
</ul> <p>
TOMlファイル。
</p>
 <div class="org-src-container">
 <pre class="src src-toml">[ <span class="org-type">book</span>]
[ <span class="org-type">book.basic</span>]
 <span class="org-variable-name">title</span> =  <span class="org-string">"ふつうのLinuxプログラミング"</span>
[ <span class="org-type">book.todo</span>]
 <span class="org-variable-name">name</span> =  <span class="org-string">"TODO"</span>       <span class="org-comment-delimiter"># </span> <span class="org-comment">TODO || WIP || DONE</span>
[[ <span class="org-type">book.tag</span>]]
 <span class="org-variable-name">name</span> =  <span class="org-string">"linux"</span>      <span class="org-comment-delimiter"># </span> <span class="org-comment">特定のタグしか許容しない</span>
[[ <span class="org-type">book.tag</span>]]
 <span class="org-variable-name">name</span> =  <span class="org-string">"container"</span>  <span class="org-comment-delimiter"># </span> <span class="org-comment">特定のタグしか許容しない</span>
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-nil">[タグ選択]

本一覧 # クリックするとpdf.jsで開く
--------
- ふつうのLinuxプログラミング [Linux]
- Docker book [Linux, Container]
</pre>
</div>

 <ul class="org-ul"> <li>idの変換ロジックは文字列でよいけど、ディレクトリとか絡んでくるとそれ用の型を使ったほうがいい</li>
</ul></div>
</div>
 <div id="outline-container-org2ee1deb" class="outline-3">
 <h3 id="org2ee1deb"> <a href="#org2ee1deb"> <span class="done DONE">DONE</span> ドラフトを解除するスクリプト</a></h3>
 <div class="outline-text-3" id="text-org2ee1deb">
 <p>
エントリのドラフト状態を解除するのが面倒なのでたまりがち。
</p>

 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> コメントをすべて削除する</li>
 <li class="on"> <input type="checkbox" checked="checked"></input> タグのdraftを消す</li>
 <li class="on"> <input type="checkbox" checked="checked"></input> リネームを実行する</li>
</ul></div>
</div>
 <div id="outline-container-orgbe124d3" class="outline-3">
 <h3 id="orgbe124d3"> <a href="#orgbe124d3"> <span class="done DONE">DONE</span> 本棚のタグを直す</a></h3>
 <div class="outline-text-3" id="text-orgbe124d3">
 <p>
現在のページ分しかタグが出ないのを直す。
</p>
</div>
</div>
 <div id="outline-container-org958cd18" class="outline-3">
 <h3 id="org958cd18"> <a href="#org958cd18"> <span class="done DONE">DONE</span> PDFスライドを表示できるようにする</a></h3>
 <div class="outline-text-3" id="text-org958cd18">
 <p>
 <a href="https://keens.github.io/blog/2022/09/21/burogunipdfsuraidowotsuikashitahanashi/">ブログにPDFスライドを追加した話 | κeenのHappy Hacκing Blog</a>が面白そうだった。参考にして作成してみる。
</p>

 <ul class="org-ul"> <li>準備はPDFへのリンクを配置しておくだけ</li>
 <li>サーバを起動させる必要はなく、配置するだけでクライアント上で動作する
 <ul class="org-ul"> <li>リンクリストを読み取り、HTMLを生成できればいい</li>
 <li>iframeリスト</li>
</ul></li>
 <li>リンク一覧ではサムネを表示する</li>
 <li>スライド用PDFビューと、フルPDFビューへのボタンがある</li>
 <li>スライド作成にいい感じのツールがない
 <ul class="org-ul"> <li>drawio.svgのように閲覧と編集が同じファイルでできるのがベスト</li>
 <li>図がメイン</li>
 <li>markdownでは表現できない</li>
</ul></li>
 <li>pdf.jsがぼやける。参考元と同じ設定なのに
 <ul class="org-ul"> <li>ズーム率が高い設定になってただけだった…</li>
</ul></li>
 <li>CIで文字化けする
 <ul class="org-ul"> <li>手元で再現できた</li>
 <li>ローカルで作ったPDFを見ると、全部TakaoPGothicになっている。何を選択しても全部。</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org61c70ec" class="outline-3">
 <h3 id="org61c70ec"> <a href="#org61c70ec"> <span class="done CLOSE">CLOSE</span> go packageをPlantUMLで出力する</a></h3>
 <div class="outline-text-3" id="text-org61c70ec">
 <p>
理解しやすくする。
</p>

 <p>
PlantUMLでエラーになる。よくわからない。 <a href="https://www.dumels.com/">Dumels</a>ではなぜかできる。まあ見やすいし、サイトで確認するでいいか、ってなった。
</p>
</div>
</div>
 <div id="outline-container-orgf03b4ee" class="outline-3">
 <h3 id="orgf03b4ee"> <a href="#orgf03b4ee"> <span class="done DONE">DONE</span> トレーディングカードジェネレータ</a></h3>
 <div class="outline-text-3" id="text-orgf03b4ee">
 <p>
概念をトレーディングカード化したら面白いのではないか。
</p>

 <p>
 <a href="https://www.readwritethink.org/classroom-resources/student-interactives/trading-card-creator">Trading Card Creator | Read Write Think</a>的なもの。ユーザが自分で作れたら最高だが、なかなかむずそうなのでとりあえず自分が使う用のものを作る。
</p>
</div>
</div>
 <div id="outline-container-org78eb2ef" class="outline-3">
 <h3 id="org78eb2ef"> <a href="#org78eb2ef"> <span class="done DONE">DONE</span> タグを自動追加するツール</a></h3>
 <div class="outline-text-3" id="text-org78eb2ef">
 <p>
青空文庫にノベルエンジン用のタグを追加するのが大変なので、切るツールを書く。
</p>

 <ul class="org-ul"> <li>30文字以上、句点もしくは改行がなければ改ページタグを入れる</li>
 <li>どうやってタグを入れるか。その場で入れるとズレてしまってややこしい
 <ul class="org-ul"> <li>再構成して新しく書き込み、が綺麗だが、小説なので正規化されてない情報もありそうに見える。それらが消えてしまわないか</li>
</ul></li>
 <li>チャプター以外は、すべて区別ない</li>
 <li>原文に改行がある場合はタグを入れる</li>
 <li>チャプターの形式はバラバラなので、人間がつけなければいけない</li>
 <li>文の途中で改ページタグを入れてはならない。必ず句点の後で入れなければならない</li>
 <li>字下げの後は必ず改ページタグを入れる</li>
 <li>流れ
 <ul class="org-ul"> <li>一度、入力をありのままトークンに変換する</li>
 <li>ルールに応じてトークンを変換する</li>
</ul></li>
</ul> <p>
カギカッコの扱い。
</p>

 <ul class="org-ul"> <li>カッコはなるべく1まとめにしたい。途中で句点があっても無視したい</li>
</ul></div>
</div>
 <div id="outline-container-orgc1acf12" class="outline-3">
 <h3 id="orgc1acf12"> <a href="#orgc1acf12"> <span class="done DONE">DONE</span> 表示を強化する</a></h3>
 <div class="outline-text-3" id="text-orgc1acf12">
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 章のどれくらいの位置にいるのか知りたい</li>
 <li class="on"> <input type="checkbox" checked="checked"></input> 現在章を表示したい</li>
</ul></div>
</div>
 <div id="outline-container-org78bc77a" class="outline-3">
 <h3 id="org78bc77a"> <a href="#org78bc77a"> <span class="done DONE">DONE</span> ノベルゲームタグ付けで手動修正する箇所を警告するツール</a></h3>
 <div class="outline-text-3" id="text-org78bc77a">
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 丸括弧のなかの「」は句点付けを無視したい</li>
 <li class="on"> <input type="checkbox" checked="checked"></input> 長過ぎる行を警告する</li>
 <li class="on"> <input type="checkbox" checked="checked"></input> 章らしい箇所を見つけてつける
 <ul class="org-ul"> <li>改行、漢数字だけ、改行とあったら章とみなしてよいだろう</li>
 <li>本によって異なるので、とりあえず手動で</li>
</ul></li>
 <li class="on"> <input type="checkbox" checked="checked"></input> ナンバーサイン、米印がつくところを表示する。人が見て調整する</li>
</ul> <div class="org-src-container">
 <pre class="src src-nil">＃「なります」」は底本では「なります。」
</pre>
</div>
</div>
</div>
 <div id="outline-container-org98b81e7" class="outline-3">
 <h3 id="org98b81e7"> <a href="#org98b81e7"> <span class="done DONE">DONE</span> 改行が保持されない</a></h3>
 <div class="outline-text-3" id="text-org98b81e7">
 <p>
意図的に改行していても、そのままそこから開始されてしまう。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 16: </span>原文</label> <pre class="src src-nil">底本：「人間失格」新潮文庫、新潮社
　　　1952（昭和27）年10月30日発行
　　　1985（昭和60）年１月30日100刷改版
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 17: </span>表示</label> <pre class="src src-nil">底本：「人間失格」新潮文庫、新潮社　　　1952（昭和27）年10月30日発行　　　1985（昭和60）年１月30日100刷改版
</pre>
</div>

 <ul class="org-ul"> <li>周囲にタグのない改行は無視しない、とすればよいか</li>
 <li>現在、lexerに改行はあるが、それをパーサーが無視している</li>
</ul> <div class="org-src-container">
 <pre class="src src-nil">あああ
[p]
いいい
ううう
*head
かかか
</pre>
</div>

 <ul class="org-ul"> <li>複数MsgEmitは1つずつしか実行できない</li>
 <li>[r]の場合は次に進みたい</li>
 <li>クリック待ち以外はイベントを消費していいわけである</li>
 <li>ぐちゃぐちゃで、直しにくい</li>
 <li>今は、テキストがブロックしている。意図的にページ待ちがないとブロックしないようにする
 <ul class="org-ul"> <li>今はクリックしないと次に進まない</li>
 <li>どこでブロックしているか</li>
</ul></li>
 <li>途中で止まってしまう
 <ul class="org-ul"> <li>ワーカーで止めると、Popしてチャンネルに追加したも処理されなくなるので</li>
 <li>でも、Popで切るよな</li>
</ul></li>
 <li>テストでWaitを呼び出すと WaitGroup is reused になる
 <ul class="org-ul"> <li>sleepだと問題ない。実際に起動してみて、時間経過の動作に問題はない</li>
 <li>これができないと、テストで非常に不便である。既存のテストを壊す</li>
</ul></li>
</ul></div>
</div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20210615222732-project.html"/>
  <id>https://kijimad.github.io/roam/20210615222732-project.html</id>
  <updated>2025-06-14T00:00:00+09:00</updated>
</entry>
<entry>
  <title>ローグライク作り</title>
  <author><name>root</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org9248a95" class="outline-2">
 <h2 id="org9248a95"> <a href="#org9248a95">概要</a></h2>
 <div class="outline-text-2" id="text-org9248a95">
 <p>
 <a href="https://github.com/kijimaD/digger">https://github.com/kijimaD/digger</a>
 <a href="https://github.com/kijimaD/digger_rs">https://github.com/kijimaD/digger_rs</a>
diggerはシンボルエンカウント/ローグライクな要素を持った <a href="20210926145504-game.html#ID-8b79aef9-1073-4788-9e81-68cc63e4f997">game</a>である。 <a href="20210509095513-ruby.html#ID-cfd092c4-1bb2-43d3-88b1-9f647809e546">Ruby</a>バージョンは開発途中でやめた。 <a href="20210901101339-rust.html#ID-ddc21510-6693-4c1e-9070-db0dd2a8160b">Rust</a>で別のコードをベースに再開した。ゲーム開発は静的型付けでないと厳しそう。
</p>

 <ul class="org-ul"> <li>反省
 <ul class="org-ul"> <li>機能追加が大変で挫折した</li>
 <li>データがオブジェクトの入った配列で管理が大変だった。バケツリレーが発生</li>
 <li>UIと機能が一体化</li>
 <li>参考になるコードがなかった</li>
 <li>自動テストで検知できない</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org9f46f29" class="outline-2">
 <h2 id="org9f46f29"> <a href="#org9f46f29">Goal</a></h2>
 <div class="outline-text-2" id="text-org9f46f29">
 <ul class="org-ul"> <li>ゲーム投稿サイト or Steamでリリースすること。</li>
</ul></div>
</div>
 <div id="outline-container-org1a146e2" class="outline-2">
 <h2 id="org1a146e2"> <a href="#org1a146e2">Design Doc</a></h2>
 <div class="outline-text-2" id="text-org1a146e2">
</div>
 <div id="outline-container-org3e69e40" class="outline-3">
 <h3 id="org3e69e40"> <a href="#org3e69e40">Characters</a></h3>
 <div class="outline-text-3" id="text-org3e69e40">
 <ul class="org-ul"> <li>主人公</li>
 <li>パーティメンバー</li>
 <li>モンスター
 <ul class="org-ul"> <li>シンボルが種族を示す。ロボット、戦車、珠、ドラゴン、ライム</li>
 <li>種族・レベルごとの敵</li>
 <li>ダンジョンのボス</li>
</ul></li>
 <li>NPC
 <ul class="org-ul"> <li>アイテム屋、装備屋、市民、合成屋</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-orge99a978" class="outline-3">
 <h3 id="orge99a978"> <a href="#orge99a978">Story</a></h3>
 <div class="outline-text-3" id="text-orge99a978">
 <ul class="org-ul"> <li>街を拠点に、遺跡の3つの珠を手に入れる</li>
</ul></div>
</div>
 <div id="outline-container-org860e3fc" class="outline-3">
 <h3 id="org860e3fc"> <a href="#org860e3fc">Story progression</a></h3>
 <div class="outline-text-3" id="text-org860e3fc">
 <ul class="org-ul"> <li>ゲームは街からスタートする。街では売買でき、会話からヒントを得られる</li>
 <li>遺跡のボスを倒すと珠を手に入れ、次の遺跡が選択できるようになる
 <ul class="org-ul"> <li>ゾンビも考えたが、目標が生き残ることなので、方向付けの手間が増えそう。遺跡はわかりやすい</li>
</ul></li>
 <li>3つ手に入れるとラスボスと戦いゲームクリア</li>
 <li>クリア後は100階ダンジョン</li>
</ul></div>
</div>
 <div id="outline-container-org2897ec0" class="outline-3">
 <h3 id="org2897ec0"> <a href="#org2897ec0">Gameplay</a></h3>
 <div class="outline-text-3" id="text-org2897ec0">
 <ul class="org-ul"> <li>ローグライク</li>
 <li>シンボルエンカウント</li>
 <li>RPG的戦闘</li>
 <li>合成</li>
</ul></div>
</div>
 <div id="outline-container-org39b7515" class="outline-3">
 <h3 id="org39b7515"> <a href="#org39b7515">Goals</a></h3>
 <div class="outline-text-3" id="text-org39b7515">
 <ul class="org-ul"> <li>全体: 3つの珠を集める</li>
 <li>短期: 敵を倒して先に進む、出口を探す</li>
 <li>落ちているアイテムを拾ったり合成することでより強くする</li>
 <li>キャラを成長させる</li>
</ul></div>
</div>
 <div id="outline-container-org8e8bcf7" class="outline-3">
 <h3 id="org8e8bcf7"> <a href="#org8e8bcf7">User Skills</a></h3>
 <div class="outline-text-3" id="text-org8e8bcf7">
 <ul class="org-ul"> <li>種類の異なるダンジョンを進む</li>
 <li>戦略的な動き。AIの挙動や地形を理解して、生存可能性を高める</li>
 <li>数値を管理する。装備品や行動のボーナスをうまく使って生存可能性を高める</li>
 <li>資源を管理する。重さ、装備品の制約があるなかで、生存可能性を高める</li>
</ul></div>
</div>
 <div id="outline-container-org3f31f5c" class="outline-3">
 <h3 id="org3f31f5c"> <a href="#org3f31f5c">Items and Power-Ups</a></h3>
 <div class="outline-text-3" id="text-org3f31f5c">
 <p>
ゲームは様々なアイテムを含む。
</p>

 <ul class="org-ul"> <li>防具。アーマー、服、帽子、靴</li>
 <li>装飾品。指輪、お守り</li>
 <li>盾</li>
 <li>近接武器</li>
 <li>銃器</li>
 <li>消耗品。回復薬、栄養剤、ロケット弾</li>
 <li>素材、売却物</li>
 <li>食料</li>
 <li>キーアイテム。珠、鍵</li>
</ul> <p>
アイテムには重さがある。
アイテムはテーブルにより決定する。
</p>
</div>
</div>
 <div id="outline-container-orgfb5c766" class="outline-3">
 <h3 id="orgfb5c766"> <a href="#orgfb5c766">Progression and challenge</a></h3>
 <div class="outline-text-3" id="text-orgfb5c766">
 <ul class="org-ul"> <li>敵を倒すと経験値を得てレベルアップする</li>
 <li>レベルアップして能力が上がったり、生存に役立つより強力な方法を使えるようになる</li>
 <li>階を降りるごとにレベルと難易度が上がる。たまにレベルより強い敵に出会うことがある</li>
 <li>理不尽な偶然でプレイヤーを殺さない</li>
</ul></div>
</div>
 <div id="outline-container-org698a8e6" class="outline-3">
 <h3 id="org698a8e6"> <a href="#org698a8e6">Losing</a></h3>
 <div class="outline-text-3" id="text-org698a8e6">
 <ul class="org-ul"> <li>ゲームオーバーになった場合、得たアイテムやキャラクターを失う</li>
</ul></div>
</div>
 <div id="outline-container-org65bab1d" class="outline-3">
 <h3 id="org65bab1d"> <a href="#org65bab1d">Art Style</a></h3>
 <div class="outline-text-3" id="text-org65bab1d">
 <ul class="org-ul"> <li>ASCII</li>
</ul></div>
</div>
 <div id="outline-container-org5f60955" class="outline-3">
 <h3 id="org5f60955"> <a href="#org5f60955">Music and Sound</a></h3>
 <div class="outline-text-3" id="text-org5f60955">
 <ul class="org-ul"> <li>一切ない</li>
</ul></div>
</div>
 <div id="outline-container-orgc69bb7c" class="outline-3">
 <h3 id="orgc69bb7c"> <a href="#orgc69bb7c">Technical Description</a></h3>
 <div class="outline-text-3" id="text-orgc69bb7c">
 <ul class="org-ul"> <li> <a href="20210901101339-rust.html#ID-ddc21510-6693-4c1e-9070-db0dd2a8160b">Rust</a>, rltk</li>
 <li>OpenGL, Web Assemblyに変換しブラウザでプレイできる</li>
 <li>ローカルでの実行形式もサポートする</li>
</ul></div>
</div>
 <div id="outline-container-org0d025cc" class="outline-3">
 <h3 id="org0d025cc"> <a href="#org0d025cc">Marketing and Funding</a></h3>
 <div class="outline-text-3" id="text-org0d025cc">
 <ul class="org-ul"> <li>無料で公開する</li>
</ul></div>
</div>
 <div id="outline-container-org3fab926" class="outline-3">
 <h3 id="org3fab926"> <a href="#org3fab926">Localization</a></h3>
 <div class="outline-text-3" id="text-org3fab926">
 <ul class="org-ul"> <li>プレイは英語</li>
 <li>ソースコードや開発用ドキュメントに日本語を含む</li>
</ul></div>
</div>
</div>
 <div id="outline-container-orgfd61916" class="outline-2">
 <h2 id="orgfd61916"> <a href="#orgfd61916">仕様</a></h2>
 <div class="outline-text-2" id="text-orgfd61916">
 <ul class="org-ul"> <li>プレイヤーの目的: 3つのダンジョンをクリアすること。</li>
 <li>メッセージシーン、フィールド、戦闘で構成
 <ul class="org-ul"> <li>フィールド上はローグライク</li>
</ul></li>
 <li>空腹度が存在し、ゼロになるとダメージを受ける</li>
 <li>4人パーティ構成
 <ul class="org-ul"> <li>4つのスロットで武器・防具を選択できる</li>
 <li>キャラはスキル、レベルを持つ</li>
</ul></li>
 <li>3つのダンジョン
 <ul class="org-ul"> <li>5階ごとの脱出機能を使う・遺跡のボスを倒すと帰れ、アイテムを持ち帰れる</li>
 <li>ダンジョンによって敵・アイテム・マップのセットが変わる</li>
 <li>後半のダンジョンは敵が強くなる</li>
</ul></li>
 <li>ダンジョンは20階で構成される。最下層にはボスがいて、倒すとクリア</li>
 <li>アイテム
 <ul class="org-ul"> <li>通貨によってアイテムを購入できる</li>
 <li>素材によってアイテムを作成できる</li>
 <li>アイテムを入手できるタイミング: マップで拾う、購入、戦闘に勝利</li>
</ul></li>
 <li>シンボルエンカウントの戦闘</li>
</ul></div>
</div>
 <div id="outline-container-orgdb5a64e" class="outline-2">
 <h2 id="orgdb5a64e"> <a href="#orgdb5a64e">Story</a></h2>
 <div class="outline-text-2" id="text-orgdb5a64e">
 <ul class="org-ul"> <li>時代設定
 <ul class="org-ul"> <li>世紀末</li>
 <li>エネルギー単位マナ</li>
 <li>マナを利用する古代技術と、現実的な科学技術</li>
 <li>滅亡後に生き残った人類は、廃墟を捨て、「遺跡」に寄り集まって暮らしはじめた。遺跡周辺のオーパーツ、エネルギーをあてにして、探索者産業が生まれ、発展した</li>
 <li>3つの遺跡が集中するSasuboの街</li>
 <li>3つの珠を集めたあとどうするか問題。イベント面倒そうなんだよな。</li>
</ul></li>
 <li>人物
 <ul class="org-ul"> <li>主人公
 <ul class="org-ul"> <li>どうして遺跡に来ることになったのか</li>
</ul></li>
</ul></li>
</ul></div>
 <div id="outline-container-org7abcc6b" class="outline-3">
 <h3 id="org7abcc6b"> <a href="#org7abcc6b">章</a></h3>
 <div class="outline-text-3" id="text-org7abcc6b">
 <p>
1章と2章に分ける。
</p>

 <ul class="org-ul"> <li>1章: ストーリー性のある、低層の複数のダンジョン
 <ul class="org-ul"> <li>ストーリー重視</li>
 <li>時間制限がある
 <ul class="org-ul"> <li>条件を満たしていないとゲームオーバー</li>
 <li>条件を満たしているとボス戦、勝利すると2章に突入</li>
</ul></li>
 <li>仲間を増やせる</li>
 <li>仲間キャラクターに対する掘り下げ</li>
 <li>各ダンジョンではイベントによって進行する</li>
</ul></li>
 <li>2章: ストーリー性のない、1つの100階ダンジョン
 <ul class="org-ul"> <li>やりこみ要素</li>
 <li>より多様なアイテム、モンスター</li>
 <li>ボス・イベントは存在しない</li>
</ul></li>
</ul></div>
</div>
</div>
 <div id="outline-container-org56c6aa4" class="outline-2">
 <h2 id="org56c6aa4"> <a href="#org56c6aa4">ロードマップ</a></h2>
 <div class="outline-text-2" id="text-org56c6aa4">
</div>
 <div id="outline-container-orgcb893ec" class="outline-3">
 <h3 id="orgcb893ec"> <a href="#orgcb893ec">2022</a></h3>
 <div class="outline-text-3" id="text-orgcb893ec">
</div>
 <div id="outline-container-org2697f9b" class="outline-4">
 <h4 id="org2697f9b"> <a href="#org2697f9b">7月</a></h4>
 <div class="outline-text-4" id="text-org2697f9b">
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> すべてのチュートリアルを終了</li>
 <li>hands-on Rustから持ってくる → 延期</li>
</ul></div>
</div>
 <div id="outline-container-orga9f0da0" class="outline-4">
 <h4 id="orga9f0da0"> <a href="#orga9f0da0">8月</a></h4>
 <div class="outline-text-4" id="text-orga9f0da0">
 <ul class="org-ul"> <li>クリアまでいけるようにする</li>
 <li>hands-on rustから持ってくる</li>
 <li>タイル画像の変更</li>
 <li>日本語表示
 <ul class="org-ul"> <li>むりそう</li>
</ul></li>
 <li>スキルシステム、パーティシステム
 <ul class="org-ul"> <li>オリジナル部分</li>
</ul></li>
 <li>ストーリー実装</li>
</ul></div>
</div>
 <div id="outline-container-orga95102c" class="outline-4">
 <h4 id="orga95102c"> <a href="#orga95102c">9月</a></h4>
</div>
 <div id="outline-container-org51b91fb" class="outline-4">
 <h4 id="org51b91fb"> <a href="#org51b91fb">10月</a></h4>
</div>
 <div id="outline-container-orgbbe8d45" class="outline-4">
 <h4 id="orgbbe8d45"> <a href="#orgbbe8d45">11月</a></h4>
 <div class="outline-text-4" id="text-orgbbe8d45">
 <ul class="org-ul"> <li>仮完成。一通りプレイしてもらえるようにする</li>
 <li>プレイしてもらって、フィードバックをもらう</li>
</ul></div>
</div>
 <div id="outline-container-orgcce13fc" class="outline-4">
 <h4 id="orgcce13fc"> <a href="#orgcce13fc">12月</a></h4>
</div>
</div>
 <div id="outline-container-orged99bcf" class="outline-3">
 <h3 id="orged99bcf"> <a href="#orged99bcf">2023</a></h3>
 <div class="outline-text-3" id="text-orged99bcf">
</div>
 <div id="outline-container-org124d442" class="outline-4">
 <h4 id="org124d442"> <a href="#org124d442">1月</a></h4>
 <div class="outline-text-4" id="text-org124d442">
 <ul class="org-ul"> <li>リリース</li>
 <li>プレスリリースを送る</li>
 <li>ローグライクのユーザグループに投稿する</li>
 <li>ついでに何か選考に送ってみる</li>
 <li>人に紹介する</li>
</ul></div>
</div>
</div>
</div>
 <div id="outline-container-org89ab603" class="outline-2">
 <h2 id="org89ab603"> <a href="#org89ab603">開発記録</a></h2>
 <div class="outline-text-2" id="text-org89ab603">
 <ul class="org-ul"> <li>難しいものと構えすぎてる気はする。よく見ていけばすべて単純で、それくらいは理解できるコードだ</li>
 <li>実績システム、effectシステムすごい。汎用性高く、コードが整理される</li>
 <li>毎回書いてるが、何も見ずに開発できてるわけじゃないことに危機感を感じている。また、今までと同じようにサンプルが出られずにやめてしまうのでは、何も残らないのではないか、と</li>
 <li>重要なのはステップを踏むことだ。いきなり書けるようにはならないので、読む段階があるのは正しい。それから書く、修正しようとする流れをはさんで、身についてから書けるようになる</li>
 <li>やっと理解できるようになってきた。しかし読むだけで、書けと言われれば出てこないし、スクラッチで書くのは全然わからない。まっさらな状態で考えてみると、どれだけ身になっているか試せる。今は全然ダメだが、段階的にすすめていけば問題ない。ただ、自覚することだ</li>
 <li>チュートリアルから持ってきてる時間が長すぎて辛いな。自作パートに入らないと理解できてる感じがしないし、実際できてない</li>
 <li>自分で修正できるようになるのか、使いこなせるようになるのか、という不安。実際ほとんどの場合は、見るだけでは理解できてない。何も見ずに考える状況にしないと、身につかないことが多かった</li>
 <li>コーディングで役立つ重要な概念
 <ul class="org-ul"> <li>モジュールを組み合わせてオブジェクトの性質を決める方法</li>
 <li>継承を一切使わず、独立性高くゲームを組み立てていく方法</li>
 <li>with関数で組み合わせて、一気にbuildする方法。とくにマップエンジン</li>
 <li>フィルター。フィルターで複数のビルダーを組み合わせることができる</li>
 <li>enumによる安全な分岐</li>
 <li>jsonでデータを定義してビルドする方法</li>
</ul></li>
 <li>読むときに明確にこれを理解する、と決めて読むとよさそうだ。これで洞窟を生成できる、これでもっとも大きい建物を求めることができる、とか</li>
 <li>理解できることが増えたが、何も見ずに新しい機能追加できるとは到底言えない。どこか似たような箇所を探しながら、書いていくことしかできない</li>
</ul></div>
</div>
 <div id="outline-container-orgd44a2b9" class="outline-2">
 <h2 id="orgd44a2b9"> <a href="#orgd44a2b9">memo</a></h2>
 <div class="outline-text-2" id="text-orgd44a2b9">
</div>
 <div id="outline-container-org35759a3" class="outline-3">
 <h3 id="org35759a3"> <a href="#org35759a3">コンポーネントを持っているか判定をスマートに書く</a></h3>
 <div class="outline-text-3" id="text-org35759a3">
 <p>
is_some() が便利。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 1: </span>sourceがPlayer Componentを持っているときだけ実行する</label> <pre class="src src-rust">if ecs.read_storage::<Player>().get(source).is_some() {
  ...
}
</pre>
</div>
</div>
</div>
 <div id="outline-container-org08d7699" class="outline-3">
 <h3 id="org08d7699"> <a href="#org08d7699">RLTKの並列実行</a></h3>
 <div class="outline-text-3" id="text-org08d7699">
 <p>
RLTKは同時に同じリソースを読み書きすることがないので、競合を心配する必要がない。read, writeが分かれているので、readだけだと並列実行して高速化したりもする。
</p>
</div>
</div>
 <div id="outline-container-org83ea41d" class="outline-3">
 <h3 id="org83ea41d"> <a href="#org83ea41d">シグナルに徹する</a></h3>
 <div class="outline-text-3" id="text-org83ea41d">
 <p>
ステータスを返し、単にシグナルに徹する関数がある。本処理はシグナルを元に別でやる、というような分け方。そうすることで責務の分離ができ、かつシグナル側で共通化しやすい。本処理は全く別だが、シグナル自体は共通のことは多い。たとえば、使う、捨てるなどのアイテム画面。各種アイテム画面で表示する中身は異なるが、返したい内容は選択アイテムで同じ。キーボードハンドルも共通。違いはアクションだけ。
</p>
</div>
</div>
 <div id="outline-container-orga71405f" class="outline-3">
 <h3 id="orga71405f"> <a href="#orga71405f">誤字</a></h3>
 <div class="outline-text-3" id="text-orga71405f">
 <ul class="org-ul"> <li>gui/cheat_menur.rs file is an easy refactor:</li>
</ul></div>
</div>
 <div id="outline-container-orged0b23a" class="outline-3">
 <h3 id="orged0b23a"> <a href="#orged0b23a">systemからstateを変更する</a></h3>
 <div class="outline-text-3" id="text-orged0b23a">
 <div class="org-src-container">
 <pre class="src src-git-permalink">https://github.com/amethyst/rustrogueliketutorial/blob/33872fe582f226178436847e1f74eafcbf9c0d1a/chapter-61-townportal/src/movement_system.rs#L32
</pre>
</div>

 <div class="results" id="org65e8640">
 <p>
*runstate = RunState::TeleportingToOtherLevel{ x: teleport.dest_x, y: teleport.dest_y, depth: teleport.dest_depth };
</p>

</div>
</div>
</div>
 <div id="outline-container-org93ff40d" class="outline-3">
 <h3 id="org93ff40d"> <a href="#org93ff40d">なぜfetchでplayer_entityが取れるのか</a></h3>
 <div class="outline-text-3" id="text-org93ff40d">
 <p>
なぜできるかわからない。特定できないように見える。
</p>

 <div class="org-src-container">
 <pre class="src src-rust">let player_entity = ecs.fetch::<Entity>();
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgfaf3ead" class="outline-3">
 <h3 id="orgfaf3ead"> <a href="#orgfaf3ead">component取得</a></h3>
 <div class="outline-text-3" id="text-orgfaf3ead">
 <p>
getで特定のpoolを取得できる。
</p>

 <div class="org-src-container">
 <pre class="src src-rust">let target_pools = pools.get(wants_melee.target).unwrap(); # targetにはEntityが入ってる
</pre>
</div>
</div>
</div>
 <div id="outline-container-org85ae376" class="outline-3">
 <h3 id="org85ae376"> <a href="#org85ae376">entity削除の方法</a></h3>
 <div class="outline-text-3" id="text-org85ae376">
 <p>
entityを削除する。
</p>

 <div class="org-src-container">
 <pre class="src src-rust">ecs.delete_entity(entity).expect("Unable to delete");;
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-rust">entities.delete(entity).expect("Delete failed")
</pre>
</div>
</div>
</div>
 <div id="outline-container-orge4d9742" class="outline-3">
 <h3 id="orge4d9742"> <a href="#orge4d9742">component削除の方法</a></h3>
 <div class="outline-text-3" id="text-orge4d9742">
 <p>
entityに付属したcomponentを削除する。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 2: </span>component削除</label> <pre class="src src-rust">let entity = ecs.fetch::<Entity>();
combatants.remove(*entity);
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 3: </span>component削除</label> <pre class="src src-rust">let mut battle = ecs.write_storage::<Battle>();
battle.clear();
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgfa1e283" class="outline-3">
 <h3 id="orgfa1e283"> <a href="#orgfa1e283">entityを取得する2つの方法</a></h3>
 <div class="outline-text-3" id="text-orgfa1e283">
 <p>
fetchを使って取得すると、個別に取るのでイテレーションできない。entitiesだとイテレーションできる。
</p>
 <div class="org-src-container">
 <pre class="src src-rust">let entity = ecs.fetch::<Entity>();

let entities = ecs.entities();
</pre>
</div>
</div>
</div>
 <div id="outline-container-org1a01fea" class="outline-3">
 <h3 id="org1a01fea"> <a href="#org1a01fea">entityをアイテム化</a></h3>
 <div class="outline-text-3" id="text-org1a01fea">
 <p>
position componentをremove + InBackPackをinsertで、落ちているアイテムをインベントリへ入れた扱いにする。自由にcomponentを付け外せる。
</p>

 <div class="org-src-container">
 <pre class="src src-rust">for pickup in wants_pickup.join() {
    positions.remove(pickup.item);
    backpack
        .insert(pickup.item, InBackpack { owner: pickup.collected_by })
        .expect("Unable to insert backpack entry");

    if pickup.collected_by == *player_entity {
        gamelog
            .entries
            .push(format!("You pick up the {}.", names.get(pickup.item).unwrap().name));
    }
}
</pre>
</div>
</div>
</div>
 <div id="outline-container-org41e94db" class="outline-3">
 <h3 id="org41e94db"> <a href="#org41e94db">モジュールを組み合わせる</a></h3>
 <div class="outline-text-3" id="text-org41e94db">
 <p>
モジュールを組み合わせる方式でプログラムを設計する。
</p>

 <p>
例えば、あまりよくないのは、敵という属性があってエンカウント可能にしたり、移動方法を決めることだ。それを、敵という属性、エンカウント可能という属性、移動方法の属性を作り、組み合わせて生成できるようにする。各機構は独立していて、変更しやすい。さらに、組み合わせることで新しい動きができる。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 4: </span>プレイヤーをスポーンするときの例 rust roguelike tutorialから</label> <pre class="src src-rust">let player = ecs
    .create_entity()
    .with(Position { x: player_x, y: player_y })
    .with(Renderable {
        glyph: rltk::to_cp437('@'),
        fg: RGB::named(rltk::YELLOW),
        bg: RGB::named(rltk::BLACK),
        render_order: 0
    })
    .with(Player{})
    .with(Viewshed{ visible_tiles : Vec::new(), range: 8, dirty: true })
    .with(Name{name: "Player".to_string() })
    .build();
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 5: </span>モンスターをスポーンするときの例。コンポーネントを組み合わせて、生成する</label> <pre class="src src-rust">let monster = ecs
    .create_entity()
    .with(Position { x: x, y: y })
    .with(Renderable {
        glyph: rltk::to_cp437('g'),
        fg: RGB::named(rltk::YELLOW),
        bg: RGB::named(rltk::BLACK),
        render_order: 0
    })
    .with(Monster {})
    .with(Name{name: "Goblin".to_string() })
    .with(AiMove{})
    .build();
</pre>
</div>
</div>
</div>
 <div id="outline-container-orge7282d0" class="outline-3">
 <h3 id="orge7282d0"> <a href="#orge7282d0">jsonファイルからエンティティを生成する</a></h3>
 <div class="outline-text-3" id="text-orge7282d0">
 <p>
ファイルから読み取った値を元に生成できると、データとロジックを分割できる。
</p>
</div>
</div>
 <div id="outline-container-org6272e1c" class="outline-3">
 <h3 id="org6272e1c"> <a href="#org6272e1c">dispatcher model, message-passing system</a></h3>
 <div class="outline-text-3" id="text-org6272e1c">
 <p>
キューイング、リクエストと実装の分離。ダメージ発生、アニメーション発生、アイテム使用、をイベントとして同じように扱う。トリガー、対象、効果の組み合わせることで再利用性しやすくなる。リクエスト側は詳細を知ることなく扱えるため、コードが読みやすくなる。
</p>

 <p>
なんらかのパラメータ変更を即座、何ターンかに渡ってもたらすものはeffect。永続的な属性、容れものを表すものはcomponent。がよさそう。
</p>
</div>
</div>
</div>
 <div id="outline-container-org6eba967" class="outline-2">
 <h2 id="org6eba967"> <a href="#org6eba967">todo</a></h2>
 <div class="outline-text-2" id="text-org6eba967">
</div>
 <div id="outline-container-orgfa5ca21" class="outline-3">
 <h3 id="orgfa5ca21"> <a href="#orgfa5ca21"> <span class="todo TODO">TODO</span> 戦闘システム  <code>[18/25]</code></a></h3>
 <div class="outline-text-3" id="text-orgfa5ca21">
</div>
 <div id="outline-container-orgae59d96" class="outline-4">
 <h4 id="orgae59d96"> <a href="#orgae59d96"> <span class="done DONE">DONE</span> 設計</a></h4>
 <div class="outline-text-4" id="text-orgae59d96">
 <p>
戦闘の実装を曖昧にしか考えてないので、図にまとめて実装できる状態にする。戦闘関連のリファクタの後に実装する。攻撃の属性。
</p>

 <ul class="org-ul"> <li>攻撃方法選択メニュー</li>
 <li>(↑によって)攻撃対象選択メニュー</li>
</ul> <p>
戦闘用エンティティと分けたほうがいいのだろうか。
</p>

 <p>
UIモックから考えてみよう。
</p>
</div>
</div>
 <div id="outline-container-org8ee88d8" class="outline-4">
 <h4 id="org8ee88d8"> <a href="#org8ee88d8"> <span class="done DONE">DONE</span> 攻撃方法選択UI作成</a></h4>
 <div class="outline-text-4" id="text-org8ee88d8">
 <p>
外側から作ってみる。ダミーで攻撃方法を選択できるようにした。
</p>
</div>
</div>
 <div id="outline-container-orgb5e16f8" class="outline-4">
 <h4 id="orgb5e16f8"> <a href="#orgb5e16f8"> <span class="done DONE">DONE</span> プレイヤーの攻撃方法の反映(かぎづめ、剣、パンチ)</a></h4>
 <div class="outline-text-4" id="text-orgb5e16f8">
 <p>
今はプレイヤーがダミーで選べるだけ。ダメージへの反映とログへ出せるようにする。
</p>

 <p>
wants_to_meleeに攻撃方法の情報を追加するか。従来の方式は装備している武器をダメージの計算に使っている。これは望む挙動ではない。装備しているかではなく、コマンドで選択した攻撃方法を計算に使いたいし、ログに出したい。
</p>

 <p>
攻撃方法はだいたい武器だが、モンスターは固有の「かぎづめ」とか使うので武器という名前にはしない。攻撃方法。weaponを指定しない場合はnatural attackで上書きすればよいか。
</p>

 <p>
今の問題点。
</p>
 <ul class="org-ul"> <li>敵が攻撃方法を選択できない</li>
 <li>naturalやskillをエンティティに記載できない。シンボルと戦闘用が分離してないので</li>
</ul></div>
</div>
 <div id="outline-container-orgd2c8168" class="outline-4">
 <h4 id="orgd2c8168"> <a href="#orgd2c8168"> <span class="done DONE">DONE</span> シンボルエンティティと戦闘エンティティの分離(敵エンティティ)</a></h4>
 <div class="outline-text-4" id="text-orgd2c8168">
 <p>
シンボルエンティティと戦闘エンティティは1対多なので、戦闘関係をシンボルに書くことはできない。これが分離できれば、エンカウント時にランダム選択してモンスターを出せる。また、戦闘関係の記載ができるので、natural attack, skillを記載してデフォルトの攻撃手段を実装できる。
</p>

 <p>
rawを別にすればいいのかな。新しい戦闘用entityの項目を作って、名前でspawnできるようにする。
</p>

 <ul class="org-ul"> <li>味方キャラはcombatantを付け替えて戦闘対応している。同様に付け替えで主人公以外はrenderしない、positionを持たない、でいけそう
 <ul class="org-ul"> <li>ややこしいから分けたい</li>
</ul></li>
 <li>敵キャラは戦闘時にcombatant付きentityを生成して戦闘にしている</li>
 <li>できれば敵味方で同じ生成にしたいのだが、ライフサイクルが異なる。敵は戦闘のたびに死に体力その他を保持する必要はないが、味方は保持している。いや、いけそうか。単にrawに味方フラグを追加すれば良いのでは</li>
</ul></div>
</div>
 <div id="outline-container-orge61c787" class="outline-4">
 <h4 id="orge61c787"> <a href="#orge61c787"> <span class="done DONE">DONE</span> god modeを移動</a></h4>
 <div class="outline-text-4" id="text-orge61c787">
 <p>
現在はpoolsのフィールドとして存在する。戦闘用なので、シンボルエンティティからpoolsは抜くので、別の場所に移動する
。
</p>
 <ul class="org-ul"> <li>gold, initiative, weightも位置がおかしくなるな。だるい</li>
 <li>戦闘以外のシンボルエンティティにつくフィールドを入れる構造体</li>
</ul></div>
</div>
 <div id="outline-container-orga7c00b8" class="outline-4">
 <h4 id="orga7c00b8"> <a href="#orga7c00b8"> <span class="done DONE">DONE</span> goldを移動</a></h4>
 <div class="outline-text-4" id="text-orga7c00b8">
 <p>
goldもpoolsが持ってる。
</p>

 <p>
パーティの所持金(party.gold)と、モンスターそれぞれが持つ金(ドロップする金、pools.gold)を別にする。
</p>

 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> HUD</li>
 <li class="on"> <input type="checkbox" checked="checked"></input> 売買</li>
 <li class="on"> <input type="checkbox" checked="checked"></input> ドロップ</li>
</ul></div>
</div>
 <div id="outline-container-org60957bb" class="outline-4">
 <h4 id="org60957bb"> <a href="#org60957bb"> <span class="done DONE">DONE</span> initiative systemをpartyに移行</a></h4>
 <div class="outline-text-4" id="text-org60957bb">
 <p>
poolsの中にinitiative用のフィールドがあって邪魔。
</p>

 <p>
これは戦闘用エンティティにつくのか、移動エンティティにつくのか。インベントリはpartyだが、装備は各戦闘entityだ。重さ制限はインベントリ限定にするしかなさそう。装備品の重さペナルティは各戦闘エンティティのステータスに反映することで完結でき、initiative systemは関係ない。
</p>

 <p>
インベントリ+装備品の重さ制限の機構はよくできていて惜しいけどなあ。
</p>

 <ul class="org-ul"> <li>戦闘用の装備品の重量/ペナルティは削除しよう</li>
 <li>移動用の所持品の重量/ペナルティは保持</li>
</ul></div>
</div>
 <div id="outline-container-orgde45da7" class="outline-4">
 <h4 id="orgde45da7"> <a href="#orgde45da7"> <span class="done DONE">DONE</span> シンボルエンティティと戦闘エンティティの分離(味方エンティティ)</a></h4>
 <div class="outline-text-4" id="text-orgde45da7">
 <p>
計画。
</p>

 <ul class="org-ul"> <li>@から戦闘関連を抜く。装備品関連も。装備品など、個人にかかるものはすべて戦闘用エンティティ対応になるのが大変そう</li>
 <li>エンカウント時の戦闘処理を修正する。combatantの付け替えをやめる</li>
 <li>ゲーム開始時に、味方の戦闘用エンティティを生成して、それを戦闘に使う。体力などは戦闘用エンティティが持つ</li>
</ul> <p>
メモ。
</p>

 <ul class="org-ul"> <li>戦闘関連を抜いてみたらhudでエラー。体力関連だろう</li>
 <li>戦闘エンティティから対応するシンボルエンティティを引くのをどうするか。Partyに入れてもよさそう。うん、基本戦闘エンティティを直に持ってくるのでなく、シンボルエンティティのParty経由のほうがアクセスもしやすそう</li>
 <li>味方以外はエンカウント時に逐次生成なので、考えなくてよい</li>
 <li>componentでベクタを定義すると、saveloadマクロでダメといわれる。なので保持させられない</li>
 <li>battle -> field と field -> battleを両方辿れるようにしたいが</li>
</ul></div>
</div>
 <div id="outline-container-org85db099" class="outline-4">
 <h4 id="org85db099"> <a href="#org85db099"> <span class="done DONE">DONE</span> アイテム使用が効かなくなっている</a></h4>
 <div class="outline-text-4" id="text-org85db099">
 <p>
選択した戦闘エンティティに適用する。
</p>

 <ul class="org-ul"> <li>itemにtarget typeを持たせて、戦闘用、シンボルエンティティ用、と分けるようにする</li>
 <li>targetはアイテムというよりはeffectに従属してるな</li>
 <li>consumableに入れたら、武器とかがおかしくなるな。装備品は常に戦闘用targetを取る。いや、むしろconsumableがターゲット違う可能性があって特殊なので良さそうな気もする</li>
 <li>アイテム個別に付与するというよりカテゴリに対して分岐させたい。が、コンポーネント形式なのでカテゴリに相当するものはない。組み合わせの自由から得られるメリットの負の側面</li>
 <li>Target componentを作ったほうがいいのかな。中身にenumを入れて</li>
 <li>せめて状態にenumを使うべきだな</li>
</ul></div>
</div>
 <div id="outline-container-org6400028" class="outline-4">
 <h4 id="org6400028"> <a href="#org6400028"> <span class="done DONE">DONE</span> Attributesをbattle entityに移行</a></h4>
 <div class="outline-text-4" id="text-org6400028">
</div>
</div>
 <div id="outline-container-org27fc83e" class="outline-4">
 <h4 id="org27fc83e"> <a href="#org27fc83e"> <span class="done DONE">DONE</span> 装備品をbattle entityに移行</a></h4>
 <div class="outline-text-4" id="text-org27fc83e">
</div>
</div>
 <div id="outline-container-org00aabf4" class="outline-4">
 <h4 id="org00aabf4"> <a href="#org00aabf4"> <span class="done DONE">DONE</span> naturalをbattle entityに移行</a></h4>
 <div class="outline-text-4" id="text-org00aabf4">
</div>
</div>
 <div id="outline-container-org748e6a6" class="outline-4">
 <h4 id="org748e6a6"> <a href="#org748e6a6"> <span class="done DONE">DONE</span> loot tableをどうするか</a></h4>
 <div class="outline-text-4" id="text-org748e6a6">
 <p>
戦闘エンティティのlootと、フィールドエンティティのloot両方にする。
</p>

 <ul class="org-ul"> <li>戦闘では素材を落とし、自動格納される</li>
 <li>フィールドでは確率で使用アイテムをマップに落とす(すでに実装ずみのをそのまま使う)</li>
</ul></div>
</div>
 <div id="outline-container-orgf308bc4" class="outline-4">
 <h4 id="orgf308bc4"> <a href="#orgf308bc4"> <span class="done DONE">DONE</span> 敵を倒した後に情報を見られるようにする</a></h4>
 <div class="outline-text-4" id="text-orgf308bc4">
 <p>
現在はHPが0になった瞬間、経験値追加してる。レベルアップがわからないし、戦闘の勝利に対して経験値を発行するようにしたい。battle自体に取得予定の経験値を保存して、戦闘が終了したときに確定すればよさそうか。また、戦闘勝利以外でレベルア
ップすることはないので、そのへんの表示も変更する。
</p>
</div>
</div>
 <div id="outline-container-org47f1256" class="outline-4">
 <h4 id="org47f1256"> <a href="#org47f1256"> <span class="done DONE">DONE</span> 仲間GUIを作る</a></h4>
 <div class="outline-text-4" id="text-org47f1256">
 <p>
装備品とか、ステータスは各キャラごとなので、見られるように画面を追加する。装備品、ステータスウィンドウは共通にする。マウスオーバーは汎用性が高そうだが、カーソル位置と対応させるのが難しい。できた。
</p>
</div>
</div>
 <div id="outline-container-org050033e" class="outline-4">
 <h4 id="org050033e"> <a href="#org050033e"> <span class="todo TODO">TODO</span> エンカウント時のモンスター決定</a></h4>
 <div class="outline-text-4" id="text-org050033e">
 <p>
現在は固定している。
</p>

 <ul class="org-ul"> <li>戦闘の難易度を決める要素
 <ul class="org-ul"> <li>レベル
 <ul class="org-ul"> <li>敵のレベルが上がると攻撃、防御に補正がかかり倒しにくくなる。基本ステータスは変わらない</li>
</ul></li>
 <li>敵の種類
 <ul class="org-ul"> <li>浅い階層では軽戦車だが、深い階層では重戦車といった具合</li>
 <li>基本ステータスが高くなる</li>
 <li>行動パターンが変わり、より強力な技を使うようになる。技にはダメージのほかに属性、状態異常付きがある</li>
</ul></li>
</ul></li>

 <li>階層
 <ul class="org-ul"> <li>深くなるほど強くなる</li>
 <li>シンボルの割合が変わる。ドラゴンのシンボルは後半にしか出ない</li>
</ul></li>
 <li>接触したmapエンティティ
 <ul class="org-ul"> <li>シンボルによってテーブルが変わる</li>
</ul></li>
 <li>ダンジョン種別
 <ul class="org-ul"> <li>後半のダンジョンになるほど、難易度が高くなる</li>
 <li>シンボルの割合が変わる</li>
 <li>森の遺跡</li>
 <li>塔の遺跡</li>
 <li>山の遺跡</li>
 <li>地下基地
 <ul class="org-ul"> <li>100階ダンジョン</li>
</ul></li>
</ul></li>
</ul> <p>
から、エンカウントモンスターを決定する。2体出るときもある。map生成時のエンティティ配置と似たような感じでいけそうか。
</p>

 <p>
何によって難易度が高くなるかということで、重要な箇所の気がするな。とりあえずはシンボルに基づいて戦闘モンスターを決定できるようにする。フロア関係なく。
</p>

 <ul class="org-ul"> <li>戦闘エンティティのrawにカテゴリを追加する</li>
 <li>戦闘エンティティをカテゴリ内からランダムに選べるようにする</li>
</ul></div>
</div>
 <div id="outline-container-orge4fa7c6" class="outline-4">
 <h4 id="orge4fa7c6"> <a href="#orge4fa7c6"> <span class="done DONE">DONE</span> 人数分のコマンド選択</a></h4>
 <div class="outline-text-4" id="text-orge4fa7c6">
 <p>
それぞれのキャラクターでコマンドを選択できるようにする。
</p>
</div>
</div>
 <div id="outline-container-org920f5c6" class="outline-4">
 <h4 id="org920f5c6"> <a href="#org920f5c6"> <span class="done DONE">DONE</span> 味方戦闘エンティティをrawから生成</a></h4>
 <div class="outline-text-4" id="text-org920f5c6">
 <p>
すべて同じステータスだと切り替わっているかわかりづらい。
</p>
</div>
</div>
 <div id="outline-container-orgaec3396" class="outline-4">
 <h4 id="orgaec3396"> <a href="#orgaec3396"> <span class="todo TODO">TODO</span> 装備のスロット制限追加</a></h4>
 <div class="outline-text-4" id="text-orgaec3396">
 <ul class="org-ul"> <li>部位ごとに1つ装備できる</li>
 <li>装飾品、武器は部位制限がない</li>
 <li>スロットは全部で4つ</li>
 <li>装備してないときは空きスロットとして表示する</li>
</ul></div>
</div>
 <div id="outline-container-orgf92cd97" class="outline-4">
 <h4 id="orgf92cd97"> <a href="#orgf92cd97"> <span class="todo TODO">TODO</span> 戦闘loot処理追加</a></h4>
 <div class="outline-text-4" id="text-orgf92cd97">
 <ul class="org-ul"> <li>戦闘後素材アイテム獲得処理を追加する
 <ul class="org-ul"> <li>とりあえず消費アイテムをインベントリに入れる</li>
</ul></li>
 <li>戦闘のリザルト画面で処理と表示を追加する
 <ul class="org-ul"> <li>獲得素材一覧</li>
 <li>各仲間の経験値</li>
 <li>獲得gold</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org6493ffd" class="outline-4">
 <h4 id="org6493ffd"> <a href="#org6493ffd"> <span class="todo TODO">TODO</span> SP…武器やスキルの使用にはスタミナが必要</a></h4>
 <div class="outline-text-4" id="text-org6493ffd">
 <ul class="org-ul"> <li>アイテムに消費SPフィールドを追加する</li>
 <li>攻撃時に消費する処理を追加する</li>
</ul></div>
</div>
 <div id="outline-container-orgd882ee7" class="outline-4">
 <h4 id="orgd882ee7"> <a href="#orgd882ee7"> <span class="done DONE">DONE</span> 戦闘終了時にgold, xpを確定する</a></h4>
 <div class="outline-text-4" id="text-orgd882ee7">
 <p>
現在、複数の敵がいた場合、倒した瞬間にgold, xpを入手している状態。戦闘勝利時に確定してリザルト画面に表示したい。
</p>
</div>
</div>
 <div id="outline-container-org0bf78b2" class="outline-4">
 <h4 id="org0bf78b2"> <a href="#org0bf78b2"> <span class="todo TODO">TODO</span> 防御力のcomponent化</a></h4>
 <div class="outline-text-4" id="text-org0bf78b2">
 <p>
防御力の値をステータス画面で表示できるようにしたい。
</p>
</div>
</div>
 <div id="outline-container-org23712e0" class="outline-4">
 <h4 id="org23712e0"> <a href="#org23712e0"> <span class="todo TODO">TODO</span> 装備外しできるようにする</a></h4>
 <div class="outline-text-4" id="text-org23712e0">
 <p>
装備外しができない状態。キー操作以外の表示は装備画面と同じで、外す画面を作成する。
</p>
</div>
</div>
 <div id="outline-container-org43b58e8" class="outline-4">
 <h4 id="org43b58e8"> <a href="#org43b58e8"> <span class="todo TODO">TODO</span> 1人死ぬだけでゲームオーバーになる</a></h4>
 <div class="outline-text-4" id="text-org43b58e8">
 <p>
全滅したらゲームオーバーにしたい。
</p>
</div>
</div>
</div>
 <div id="outline-container-org651061a" class="outline-3">
 <h3 id="org651061a"> <a href="#org651061a"> <span class="todo TODO">TODO</span> 複数のダンジョンに対応する</a></h3>
 <div class="outline-text-3" id="text-org651061a">
 <p>
今はすべて1つのダンジョンになっていて、B2は森、B3は洞窟、というように固定されている。ダンジョンを選択して入るタイプとは合わないので、対応させる。
</p>

 <ul class="org-ul"> <li>街</li>
 <li>ダンジョンA(B20)</li>
 <li>ダンジョンB(B10)</li>
 <li>ダンジョンC(B100)</li>
</ul> <p>
というように最大階層も変えたい。街の出口で選択できるようにすれば良いか。クリアするごとに選択肢が増える。今のマップ関係の実装がよくわかってないんだよな。depthはあるものの、内部的なものっぽい。
</p>
</div>
</div>
 <div id="outline-container-org45ddf95" class="outline-3">
 <h3 id="org45ddf95"> <a href="#org45ddf95"> <span class="todo TODO">TODO</span> パーティシステム</a></h3>
 <div class="outline-text-3" id="text-org45ddf95">
 <p>
現在のコマンドのstate遷移は複数の味方キャラに対応してない。
</p>
</div>
</div>
 <div id="outline-container-orgd384193" class="outline-3">
 <h3 id="orgd384193"> <a href="#orgd384193"> <span class="todo TODO">TODO</span> アイテム合成</a></h3>
 <div class="outline-text-3" id="text-orgd384193">
</div>
 <div id="outline-container-orgee89fb8" class="outline-4">
 <h4 id="orgee89fb8"> <a href="#orgee89fb8"> <span class="todo TODO">TODO</span> 素材アイテムを追加</a></h4>
</div>
 <div id="outline-container-orgee767e6" class="outline-4">
 <h4 id="orgee767e6"> <a href="#orgee767e6"> <span class="todo TODO">TODO</span> UI作成</a></h4>
</div>
</div>
 <div id="outline-container-org0db5aff" class="outline-3">
 <h3 id="org0db5aff"> <a href="#org0db5aff"> <span class="todo TODO">TODO</span> スキル設計</a></h3>
 <div class="outline-text-3" id="text-org0db5aff">
 <p>
戦闘や行動によってスキルが上がり、生存に有利な補正がかかる。
</p>
</div>
</div>
 <div id="outline-container-orge9929b7" class="outline-3">
 <h3 id="orge9929b7"> <a href="#orge9929b7"> <span class="todo TODO">TODO</span> スロット・部位ごとの装備</a></h3>
 <div class="outline-text-3" id="text-orge9929b7">
 <p>
4つのスロットがあり自由に装備できる。同じ部位の装備はできない。
</p>
</div>
</div>
 <div id="outline-container-orgbb5f14e" class="outline-3">
 <h3 id="orgbb5f14e"> <a href="#orgbb5f14e"> <span class="todo TODO">TODO</span> アイテム欄のペジネーション</a></h3>
 <div class="outline-text-3" id="text-orgbb5f14e">
 <p>
たくさん拾ったときに表示があふれるので。複数あるアイテム系で共通の処理・表示・操作にしたい。
</p>
</div>
</div>
 <div id="outline-container-org399ef35" class="outline-3">
 <h3 id="org399ef35"> <a href="#org399ef35"> <span class="todo TODO">TODO</span> マップのシード値を取れるようにする</a></h3>
 <div class="outline-text-3" id="text-org399ef35">
 <p>
シードを指定すると同じマップを生成できる。デバッグで便利。
</p>
</div>
</div>
 <div id="outline-container-org817c908" class="outline-3">
 <h3 id="org817c908"> <a href="#org817c908"> <span class="todo TODO">TODO</span> エンカウント時のアニメーション</a></h3>
 <div class="outline-text-3" id="text-org817c908">
 <p>
アニメーションを入れる。とくに戦闘に背景画像を設定してから、急に明度が変わるので目にも悪い。
</p>
</div>
</div>
 <div id="outline-container-orgc6c199b" class="outline-3">
 <h3 id="orgc6c199b"> <a href="#orgc6c199b"> <span class="todo TODO">TODO</span> 最低限のテストを作成、CI実行する</a></h3>
 <div class="outline-text-3" id="text-orgc6c199b">
 <p>
自動テストをやりたいが、どうやったらいいのかわからない。ログをテキストファイルに書き出すようにすれば、チェックできるのでは。結局正しく挙動しているかはわからないが、実行時エラーにならないのはわかる。
</p>
</div>
</div>
 <div id="outline-container-orgd6e27e3" class="outline-3">
 <h3 id="orgd6e27e3"> <a href="#orgd6e27e3"> <span class="todo TODO">TODO</span> cargoに登録する</a></h3>
 <div class="outline-text-3" id="text-orgd6e27e3">
 <p>
cargo installでもすぐ実行できるようにする。
</p>
</div>
</div>
 <div id="outline-container-orgc6e68b7" class="outline-3">
 <h3 id="orgc6e68b7"> <a href="#orgc6e68b7"> <span class="todo TODO">TODO</span> 画面エフェクト追加</a></h3>
 <div class="outline-text-3" id="text-orgc6e68b7">
 <p>
追加はchapter63が参考になりそう。
</p>

 <p>
 <a href="https://bfnightly.bracketproductions.com/chapter_63.html">https://bfnightly.bracketproductions.com/chapter_63.html</a>
</p>
</div>
</div>
 <div id="outline-container-org56d5805" class="outline-3">
 <h3 id="org56d5805"> <a href="#org56d5805"> <span class="todo TODO">TODO</span> ミニマップ表示</a></h3>
 <div class="outline-text-3" id="text-org56d5805">
 <p>
周囲の概略を表示する。アイテム、敵、階段だけを視界内に限定すれば。
</p>

 <p>
視野限定をやめれば、実装しなくてよさそう。
</p>
</div>
</div>
 <div id="outline-container-org50dc4db" class="outline-3">
 <h3 id="org50dc4db"> <a href="#org50dc4db"> <span class="todo TODO">TODO</span> カメラをどう実装しているか</a></h3>
 <div class="outline-text-3" id="text-org50dc4db">
 <p>
いまいち理解してないままだ。
</p>
</div>
</div>
 <div id="outline-container-orge15101b" class="outline-3">
 <h3 id="orge15101b"> <a href="#orge15101b"> <span class="todo TODO">TODO</span> ランダムテーブルの重み付けの方法</a></h3>
 <div class="outline-text-3" id="text-orge15101b">
 <p>
ピンと来てない。
</p>
</div>
</div>
 <div id="outline-container-org61bd52e" class="outline-3">
 <h3 id="org61bd52e"> <a href="#org61bd52e"> <span class="todo TODO">TODO</span> アイテムのレア度で色を変える</a></h3>
 <div class="outline-text-3" id="text-org61bd52e">
 <ul class="org-ul"> <li>レア度の実装</li>
 <li>色を変える</li>
</ul></div>
</div>
 <div id="outline-container-org5b3eec6" class="outline-3">
 <h3 id="org5b3eec6"> <a href="#org5b3eec6"> <span class="todo TODO">TODO</span> 最初から視界オープン状態にする</a></h3>
 <div class="outline-text-3" id="text-org5b3eec6">
 <p>
探索がだるいので、可視状態にする。アイテムや敵は視界内でないと見えない。
</p>
</div>
</div>
 <div id="outline-container-orgb57cfa8" class="outline-3">
 <h3 id="orgb57cfa8"> <a href="#orgb57cfa8"> <span class="todo TODO">TODO</span> アイテムと階段が重なって見えなくなるときがある</a></h3>
 <div class="outline-text-3" id="text-orgb57cfa8">
 <p>
アイテムを拾えない+階段が発見できなくなるので、階段上に生成しなくするか、常に階段を上に表示する。
</p>
</div>
</div>
 <div id="outline-container-org37456f8" class="outline-3">
 <h3 id="org37456f8"> <a href="#org37456f8"> <span class="todo TODO">TODO</span> Partyに楽にアクセスするAPIがほしい</a></h3>
 <div class="outline-text-3" id="text-org37456f8">
 <p>
いちいちentitiesから取り出すのが面倒。だいたいの場合戦闘用エンティティも絡むのでコードが複雑化する。簡単にアクセスできるようにしたい。
</p>
</div>
</div>
 <div id="outline-container-org84b1a9b" class="outline-3">
 <h3 id="org84b1a9b"> <a href="#org84b1a9b"> <span class="todo TODO">TODO</span> オープニング画面</a></h3>
 <div class="outline-text-3" id="text-org84b1a9b">
 <p>
ロゴ表示とかするとそれっぽい。
</p>
</div>
</div>
 <div id="outline-container-orgf067c45" class="outline-3">
 <h3 id="orgf067c45"> <a href="#orgf067c45"> <span class="todo TODO">TODO</span> 逃げた回数の実績カウンタ追加</a></h3>
 <div class="outline-text-3" id="text-orgf067c45">
 <p>
ドラクエ8にあったような感じで。
</p>
</div>
</div>
 <div id="outline-container-orgb6216d8" class="outline-3">
 <h3 id="orgb6216d8"> <a href="#orgb6216d8"> <span class="todo TODO">TODO</span> バッジ型実績追加</a></h3>
 <div class="outline-text-3" id="text-orgb6216d8">
 <p>
カウンタに追加して、何かを達成した or 達成してない のバッジ型の実績を実装する。
</p>
</div>
</div>
 <div id="outline-container-orgaa2c605" class="outline-3">
 <h3 id="orgaa2c605"> <a href="#orgaa2c605"> <span class="todo TODO">TODO</span> ゲームオーバーになったあと再開すると味方battle entityがない状態でスタートする</a></h3>
 <div class="outline-text-3" id="text-orgaa2c605">
 <p>
死ぬと味方でもbattle entityが消えてしまうので、再生成しないといけない。味方は消さないようにしたいが。
</p>
</div>
</div>
 <div id="outline-container-org74942ef" class="outline-3">
 <h3 id="org74942ef"> <a href="#org74942ef"> <span class="todo TODO">TODO</span> gitバージョンごとにビルドしてデプロイして、バージョン間の動作確認をしやすくする</a></h3>
 <div class="outline-text-3" id="text-org74942ef">
 <p>
動作確認用。いくつか前に戻って確認したいことが割とある。WASMを同じページに展開すればよさそう。
</p>
</div>
</div>
 <div id="outline-container-orga1e3639" class="outline-3">
 <h3 id="orga1e3639"> <a href="#orga1e3639"> <span class="todo TODO">TODO</span> 武器のカテゴリを追加</a></h3>
 <div class="outline-text-3" id="text-orga1e3639">
 <p>
刀とかライフルとか。
</p>
</div>
</div>
 <div id="outline-container-org754fadc" class="outline-3">
 <h3 id="org754fadc"> <a href="#org754fadc"> <span class="todo TODO">TODO</span> デバッグ用の体力全回復が壊れている</a></h3>
 <div class="outline-text-3" id="text-org754fadc">
 <p>
実行すると強制終了する。
</p>
</div>
</div>
</div>
 <div id="outline-container-org673a9b7" class="outline-2">
 <h2 id="org673a9b7"> <a href="#org673a9b7">References</a></h2>
 <div class="outline-text-2" id="text-org673a9b7">
 <blockquote>
 <dl class="org-dl"> <dt> <a href="http://www.roguebasin.com/index.php/Articles">http://www.roguebasin.com/index.php/Articles</a></dt> <dd>ローグライクに関する情報が集約されている。</dd>
 <dt> <a href="http://www.roguebasin.com/index.php?title=How_to_Write_a_Roguelike_in_15_Steps">http://www.roguebasin.com/index.php?title=How_to_Write_a_Roguelike_in_15_Steps</a></dt> <dd>ローグライクの作り方のヒント。</dd>
 <dt> <a href="https://countable.hatenablog.com/entry/20120717/1342505647">https://countable.hatenablog.com/entry/20120717/1342505647</a></dt> <dd>↑ページの和訳</dd>
 <dt> <a href="https://techblog.sega.jp/entry/2018/08/27/100000">https://techblog.sega.jp/entry/2018/08/27/100000</a></dt> <dd>ゲームのテスト</dd>
 <dt> <a href="https://www.amazon.co.jp/Programming-Patterns-%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA%E3%81%AE%E5%95%8F%E9%A1%8C%E8%A7%A3%E6%B1%BA%E3%83%A1%E3%83%8B%E3%83%A5%E3%83%BC-impress-gear%E3%82%B7%E3%83%AA%E3%83%BC%E3%82%BA-ebook/dp/B015R0M8W0/ref=sr_1_1?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&dchild=1&keywords=%E3%82%B2%E3%83%BC%E3%83%A0+%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3&qid=1627347211&sr=8-1">https://www.amazon.co.jp/Programming-Patterns-%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA%E3%81%AE%E5%95%8F%E9%A1%8C%E8%A7%A3%E6%B1%BA%E3%83%A1%E3%83%8B%E3%83%A5%E3%83%BC-impress-gear%E3%82%B7%E3%83%AA%E3%83%BC%E3%82%BA-ebook/dp/B015R0M8W0/ref=sr_1_1?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&dchild=1&keywords=%E3%82%B2%E3%83%BC%E3%83%A0+%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3&qid=1627347211&sr=8-1</a></dt> <dd>ゲームデザインパターン</dd>
 <dt> <a href="https://www.amazon.co.jp/Hands-Rust-English-Herbert-Wolverson-ebook/dp/B09BK8Q6GY/ref=sr_1_1?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&crid=26DQRMWP5RQIE&keywords=hands-on+rust&qid=1651655347&sprefix=hands-on+ru%2Caps%2C196&sr=8-1">https://www.amazon.co.jp/Hands-Rust-English-Herbert-Wolverson-ebook/dp/B09BK8Q6GY/ref=sr_1_1?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&crid=26DQRMWP5RQIE&keywords=hands-on+rust&qid=1651655347&sprefix=hands-on+ru%2Caps%2C196&sr=8-1</a></dt> <dd>2Dゲームのハンズオン</dd>
</dl></blockquote>
</div>
</div>
 <div id="outline-container-orgc705fac" class="outline-2">
 <h2 id="orgc705fac"> <a href="#orgc705fac">Archives</a></h2>
 <div class="outline-text-2" id="text-orgc705fac">
</div>
 <div id="outline-container-orgaf3765d" class="outline-3">
 <h3 id="orgaf3765d"> <a href="#orgaf3765d"> <span class="done DONE">DONE</span> 移動システム</a></h3>
 <div class="outline-text-3" id="text-orgaf3765d">
 <ul class="org-ul"> <li>地形判定</li>
</ul></div>
</div>
 <div id="outline-container-org432b118" class="outline-3">
 <h3 id="org432b118"> <a href="#org432b118"> <span class="done DONE">DONE</span> マップをtxtファイルから読み込む</a></h3>
 <div class="outline-text-3" id="text-org432b118">
</div>
</div>
 <div id="outline-container-org7b97349" class="outline-3">
 <h3 id="org7b97349"> <a href="#org7b97349"> <span class="done DONE">DONE</span> mainファイル分割</a></h3>
 <div class="outline-text-3" id="text-org7b97349">
 <p>
同じ形にした。
</p>
</div>
</div>
 <div id="outline-container-org3685dfb" class="outline-3">
 <h3 id="org3685dfb"> <a href="#org3685dfb"> <span class="done DONE">DONE</span> テスト追加</a></h3>
 <div class="outline-text-3" id="text-org3685dfb">
</div>
</div>
 <div id="outline-container-orge7e45b4" class="outline-3">
 <h3 id="orge7e45b4"> <a href="#orge7e45b4"> <span class="done DONE">DONE</span> テスト環境構築</a></h3>
 <div class="outline-text-3" id="text-orge7e45b4">
 <ul class="org-ul"> <li>単独RSpec</li>
 <li>カバレッジ</li>
</ul></div>
</div>
 <div id="outline-container-orga85e9fb" class="outline-3">
 <h3 id="orga85e9fb"> <a href="#orga85e9fb"> <span class="done DONE">DONE</span> 複数ウィンドウエリア</a></h3>
 <div class="outline-text-3" id="text-orga85e9fb">
 <p>
メッセージエリア、ステータスエリアなどウィンドウにエリアを追加する。
</p>
</div>
</div>
 <div id="outline-container-org7ce0358" class="outline-3">
 <h3 id="org7ce0358"> <a href="#org7ce0358"> <span class="done DONE">DONE</span> component追加</a></h3>
 <div class="outline-text-3" id="text-org7ce0358">
 <p>
game_objectを構成するもの。直に起動されることはなく、object_poolにもaddされない。
</p>
</div>
</div>
 <div id="outline-container-org1311085" class="outline-3">
 <h3 id="org1311085"> <a href="#org1311085"> <span class="done DONE">DONE</span> inputに分割</a></h3>
 <div class="outline-text-3" id="text-org1311085">
 <p>
今はすべてfield_stateでやっているが、characterのcomponentでやるようにする。
</p>
</div>
</div>
 <div id="outline-container-org0a246f0" class="outline-3">
 <h3 id="org0a246f0"> <a href="#org0a246f0"> <span class="done DONE">DONE</span> 別入力</a></h3>
 <div class="outline-text-3" id="text-org0a246f0">
 <p>
とりあえず敵をランダム移動できるようにする。
</p>
</div>
</div>
 <div id="outline-container-org0a766b5" class="outline-3">
 <h3 id="org0a766b5"> <a href="#org0a766b5"> <span class="done DONE">DONE</span> message_displayとmessageの分割</a></h3>
 <div class="outline-text-3" id="text-org0a766b5">
 <p>
statsを作ってそこにmessageを入れることで対応した。
</p>
</div>
</div>
 <div id="outline-container-org3ac88ea" class="outline-3">
 <h3 id="org3ac88ea"> <a href="#org3ac88ea"> <span class="done DONE">DONE</span> テストrequireを自動化する</a></h3>
 <div class="outline-text-3" id="text-org3ac88ea">
 <p>
めんどいので。
</p>
</div>
</div>
 <div id="outline-container-orgd2e1dfe" class="outline-3">
 <h3 id="orgd2e1dfe"> <a href="#orgd2e1dfe"> <span class="done DONE">DONE</span> RSpec lintを追加した</a></h3>
 <div class="outline-text-3" id="text-orgd2e1dfe">
 <p>
その日の気分で書きがちなところに基準ができた。必須だな。
</p>
</div>
</div>
 <div id="outline-container-org6542d73" class="outline-3">
 <h3 id="org6542d73"> <a href="#org6542d73"> <span class="done DONE">DONE</span> object_poolオブジェクト間の接触判定</a></h3>
 <div class="outline-text-3" id="text-org6542d73">
 <p>
地形判定とは異なる。オブジェクト層で起こる反応。
game_objectとmapではやり方が異なる。
</p>
</div>
</div>
 <div id="outline-container-org87ec269" class="outline-3">
 <h3 id="org87ec269"> <a href="#org87ec269"> <span class="done DONE">DONE</span> boxつけるとずれる問題</a></h3>
 <div class="outline-text-3" id="text-org87ec269">
 <p>
範囲がわかりづらいのでつけたいが、横方向がずれてる。
最初の一行だけ正しくて、改行以降はインデントがセットされてない、みたいな状況か。
</p>
 <div class="org-src-container">
 <pre class="src src-nil"> aaa
aaa
aaa
</pre>
</div>
 <p>
かな。
</p>

 <p>
一行ずつ出力することで解決した。
</p>
</div>
</div>
 <div id="outline-container-orga953ef9" class="outline-3">
 <h3 id="orga953ef9"> <a href="#orga953ef9"> <span class="done DONE">DONE</span> 基地メニュー</a></h3>
 <div class="outline-text-3" id="text-orga953ef9">
 <p>
2つ目state。
まだ内容はない。
</p>
</div>
</div>
 <div id="outline-container-orgfb04289" class="outline-3">
 <h3 id="orgfb04289"> <a href="#orgfb04289"> <span class="done DONE">DONE</span> ウィンドウ分割</a></h3>
 <div class="outline-text-3" id="text-orgfb04289">
 <p>
対応の必要なし。
</p>

 <p>
メインウィンドウにすべて表示してたが、分割したほうがやりやすそうなので分割する。
マップウィンドウ、メッセージウィンドウとか。
</p>

 <p>
その場合、ウィンドウ構成がモードによって変わる。どうやって表現すればよいだろう。
うーん、やっぱり面倒なのでメインウィンドウに座標挿入でよさそう。
</p>

 <p>
stateによって使い回せるしな。
</p>
</div>
</div>
 <div id="outline-container-org9b65099" class="outline-3">
 <h3 id="org9b65099"> <a href="#org9b65099"> <span class="done DONE">DONE</span> ゲームのおおまかな計画をやる</a></h3>
 <div class="outline-text-3" id="text-org9b65099">
 <p>
バトルディッガーにしようとうっすら考えてたが、さすがに丸パクはできないので、混ぜよう。
そろそろどういう仕様にするか決めないといけない段階。
</p>

 <p>
合成システムはカンタンに実装できて奥深そうなんだよな。
なのでシステム的にはディッガーよりハタ人間。
</p>

 <ul class="org-ul"> <li>アイテム合成</li>
</ul></div>
</div>
 <div id="outline-container-orgfc16999" class="outline-3">
 <h3 id="orgfc16999"> <a href="#orgfc16999"> <span class="done DONE">DONE</span> フォント</a></h3>
 <div class="outline-text-3" id="text-orgfc16999">
 <dl class="org-dl"> <dt>Press Start 2p</dt> <dd>横幅的には一番</dd>
 <dt>misaki font</dt> <dd>日本語対応</dd>
</dl></div>
</div>
 <div id="outline-container-orgc662fe6" class="outline-3">
 <h3 id="orgc662fe6"> <a href="#orgc662fe6"> <span class="done DONE">DONE</span> AIキャラが消える問題</a></h3>
 <div class="outline-text-3" id="text-orgc662fe6">
 <p>
updateはAIキャラが動かない。
drawは全員消える。
</p>

 <p>
game_objectにupdate, drawメソッドがあると、componentのdraw, updateが上書きされるため起こる。
ai_inputはcomponentでupdateを使って入力を生成してるが、player_inputはbutton_downのため、問題が起きたり起きなかったりする。
</p>

 <p>
drawでは機能しないのはなぜだ。処理の順番か。field_stateの処理の順番を並べ替えるとできた。
object_pool.draw
map.draw
の順番にしないといけない。
</p>
</div>
</div>
 <div id="outline-container-orgb76d542" class="outline-3">
 <h3 id="orgb76d542"> <a href="#orgb76d542"> <span class="done DONE">DONE</span> カメラ追加</a></h3>
 <div class="outline-text-3" id="text-orgb76d542">
</div>
</div>
 <div id="outline-container-org564a1f7" class="outline-3">
 <h3 id="org564a1f7"> <a href="#org564a1f7"> <span class="done DONE">DONE</span> アイテム追加する</a></h3>
 <div class="outline-text-3" id="text-org564a1f7">
 <p>
game_objectのアイテムと、所持品としてのアイテムをどう分ければよいだろう。
少なくとも単語を分けることが必要そう。
</p>

 <p>
pickupはいいセンいってるが、動作っぽい。
まあいいか。後からどうするか明確になってからで。
</p>
</div>
</div>
 <div id="outline-container-org9ebe352" class="outline-3">
 <h3 id="org9ebe352"> <a href="#org9ebe352"> <span class="done DONE">DONE</span> プレイヤーキャラ以外を追加する</a></h3>
 <div class="outline-text-3" id="text-org9ebe352">
 <p>
表示文字をキャラによって変える必要がある。
inputによって分岐するようにした。
</p>
</div>
</div>
 <div id="outline-container-orge362b9e" class="outline-3">
 <h3 id="orge362b9e"> <a href="#orge362b9e"> <span class="done DONE">DONE</span> メニュー追加する</a></h3>
 <div class="outline-text-3" id="text-orge362b9e">
 <p>
画面追加だけできした。あとはカーソル移動とかか。
</p>
</div>
</div>
 <div id="outline-container-orga5ede6f" class="outline-3">
 <h3 id="orga5ede6f"> <a href="#orga5ede6f"> <span class="done DONE">DONE</span> 設定のファイル化</a></h3>
 <div class="outline-text-3" id="text-orga5ede6f">
 <p>
CDDAみたいに、設定類はすべてjsonかymlにする。
キャラクターは完了。とはいえシルエットだけなのでそんなにパラメータはない。
一応はできたが、これがtype objectと自信がもてない。characterはマップのシルエットとして使うくらいだからあまり必要性ないんだよな。
</p>
</div>
</div>
 <div id="outline-container-org3fa9485" class="outline-3">
 <h3 id="org3fa9485"> <a href="#org3fa9485"> <span class="done DONE">DONE</span> ターン実装</a></h3>
 <div class="outline-text-3" id="text-org3fa9485">
 <p>
getchでなんとなくターンぽくなっているが、移動以外でもターンが進んでしまう。
ターンが進むのは移動だけでよさそう。ローグライクだったら攻撃でも進むが、このゲームにはない。
</p>

 <p>
player_inputかつ、移動ができたときだけexecuteフラグをオンにする。
</p>
</div>
</div>
 <div id="outline-container-orgd1db02c" class="outline-3">
 <h3 id="orgd1db02c"> <a href="#orgd1db02c"> <span class="done DONE">DONE</span> characterをphysicsに分割する</a></h3>
 <div class="outline-text-3" id="text-orgd1db02c">
</div>
</div>
 <div id="outline-container-orgb7c45eb" class="outline-3">
 <h3 id="orgb7c45eb"> <a href="#orgb7c45eb"> <span class="done DONE">DONE</span> メニュー画面でカーソル移動できるようにする</a></h3>
 <div class="outline-text-3" id="text-orgb7c45eb">
 <p>
カーソル移動はメンドイのでしない。
</p>
</div>
</div>
 <div id="outline-container-orgfe4b9f5" class="outline-3">
 <h3 id="orgfe4b9f5"> <a href="#orgfe4b9f5"> <span class="done DONE">DONE</span> Terrainクラスを作る(flyweightパターン)</a></h3>
 <div class="outline-text-3" id="text-orgfe4b9f5">
 <p>
コードで直に地形判定をしているため。
地形用のクラスに切り分ける。
Terrainオブジェクトは状況非依存。つまり草地タイルはすべて同一。
なので、Terrainオブジェクトの格子にするのではなく、Terrainオブジェクトへのポインタにする。
</p>

 <ul class="org-ul"> <li>地形情報にアクセスするために、worldから取る必要がなくなる。</li>
 <li>タイルから直にアクセスできるように。</li>
</ul> <p>
まず文字列のマップをオブジェクトのマップにする。
どうやってやればいいんだ。
</p>
</div>
</div>
 <div id="outline-container-orge15710e" class="outline-3">
 <h3 id="orge15710e"> <a href="#orge15710e"> <span class="done DONE">DONE</span> item_type</a></h3>
 <div class="outline-text-3" id="text-orge15710e">
 <p>
作ろうと思ったがどうしよう。どういったプロパティを持つか。
</p>
 <ul class="org-ul"> <li>アイテムの中身</li>
</ul> <p>
とりあえずイメージしやすいように名前を取り出せるようにする。
フィールドオブジェクトしては名前くらいしか必要でない。
</p>
</div>
</div>
 <div id="outline-container-orgd0ce7a3" class="outline-3">
 <h3 id="orgd0ce7a3"> <a href="#orgd0ce7a3"> <span class="done DONE">DONE</span> インベントリ</a></h3>
 <div class="outline-text-3" id="text-orgd0ce7a3">
 <p>
アイテムを拾ったとき、インベントリに追加する。
フィールドのはアイテムだが、それから別のオブジェクトにするか。
</p>

 <p>
消費物、素材は単なる数値だが、装備はさまざまなパラメータを持った別オブジェクトだ。
</p>

 <p>
単にオブジェクトを配列に追加するだけだが、仮で完了。
</p>
</div>
</div>
 <div id="outline-container-org5776b51" class="outline-3">
 <h3 id="org5776b51"> <a href="#org5776b51"> <span class="done DONE">DONE</span> 衝突テスト</a></h3>
 <div class="outline-text-3" id="text-org5776b51">
 <p>
衝突関係がややこしくなってきたのでテストで確かめることにする。
アイテム、キャラクタ(Ai, Player)
</p>
</div>
</div>
 <div id="outline-container-orgea07c91" class="outline-3">
 <h3 id="orgea07c91"> <a href="#orgea07c91"> <span class="done DONE">DONE</span> 自動操作テスト</a></h3>
 <div class="outline-text-3" id="text-orgea07c91">
 <p>
オートプレイさせたい。
system spec的な。
実際のキーボード入力をシミュレートする。
</p>

 <p>
今はgetchで止まるのでできない。直にbutton_downを受け付けるようにするとかできないか。
そもそもgetchがよくない説もある。アニメーションは一切できないからな。
入力は任意でよくしたい。入力しなくてもゲームループは進む。
ターンベースだろうと、ゲームループは回すほうが表現豊か。
</p>

 <p>
テストのときはゲームループを手動で進めればよいのでは。
キーボード入力はできないが、直に入力すればいい。一応できた。
</p>
</div>
</div>
 <div id="outline-container-orge2b4d9d" class="outline-3">
 <h3 id="orge2b4d9d"> <a href="#orge2b4d9d"> <span class="done DONE">DONE</span> utilsのload_jsonをデフォルト拡張子jsonにする</a></h3>
 <div class="outline-text-3" id="text-orge2b4d9d">
</div>
</div>
 <div id="outline-container-orgd8a7d9a" class="outline-3">
 <h3 id="orgd8a7d9a"> <a href="#orgd8a7d9a"> <span class="done DONE">DONE</span> コンパイル(断念)</a></h3>
 <div class="outline-text-3" id="text-orgd8a7d9a">
 <p>
プレイヤーがいちいちbundle installとかしなくていいようにexeとか実行形式にしたいが、どうすればいいんだろう。
ruby-packerというのがあるらしい。
これで各環境用にコンパイルするようにすればいい。
</p>

 <p>
大変そうなので断念。
</p>
</div>
</div>
 <div id="outline-container-org03acd9b" class="outline-3">
 <h3 id="org03acd9b"> <a href="#org03acd9b"> <span class="done DONE">DONE</span> インベントリに入れたときの挙動を変える</a></h3>
 <div class="outline-text-3" id="text-org03acd9b">
 <p>
素材系のときは、オブジェクトは保持せず単にカウントアップするだけにする。
武器とか消費アイテムはオブジェクトとして保持する。
</p>

 <p>
item_typeにcountを保持することにした。やや不自然だが、itemから直に数を増やす操作ができたり、問い合わせがカンタンだ。いちいち初期化しておく必要もない。
</p>
</div>
</div>
 <div id="outline-container-org0b0a085" class="outline-3">
 <h3 id="org0b0a085"> <a href="#org0b0a085"> <span class="done DONE">DONE</span> アイテムをflyweightにする → item_typeを共通にする</a></h3>
 <div class="outline-text-3" id="text-org0b0a085">
 <p>
今はそれぞれ別のオブジェクトになっているので、共通オブジェクトにする。
jsonで読んでそれを各自インスタンス変数に入れるみたいなことってできるのかな。一気に全インスタンスを配列に入れ、配列をインスタンス変数にするとできる。
</p>

 <p>
正確にいうと、item_typeが共通である。itemオブジェクト自体はユニークである。取得して消えたり座標を持ってるから。
</p>
</div>
</div>
 <div id="outline-container-org5ffba9e" class="outline-3">
 <h3 id="org5ffba9e"> <a href="#org5ffba9e"> <span class="done DONE">DONE</span> 各state共通のinputを継承元に書く</a></h3>
 <div class="outline-text-3" id="text-org5ffba9e">
 <p>
たとえば’c’はどのstateでも終了にしたい。
</p>

 <p>
抽象クラスに移動した。
</p>
</div>
</div>
 <div id="outline-container-org99b0c6c" class="outline-3">
 <h3 id="org99b0c6c"> <a href="#org99b0c6c"> <span class="done DONE">DONE</span> 移動AI</a></h3>
 <div class="outline-text-3" id="text-org99b0c6c">
 <p>
経路選択をどうすればよいのだろう。斜めにターゲットがあるときどうやってジグザグを判定するか。
</p>
</div>
</div>
 <div id="outline-container-org394f565" class="outline-3">
 <h3 id="org394f565"> <a href="#org394f565"> <span class="done DONE">DONE</span> エンカウント追加</a></h3>
 <div class="outline-text-3" id="text-org394f565">
 <p>
戦闘モードへ遷移する。
</p>
</div>
</div>
 <div id="outline-container-orgac16446" class="outline-3">
 <h3 id="orgac16446"> <a href="#orgac16446"> <span class="done DONE">DONE</span> パーティ状況を表示する</a></h3>
 <div class="outline-text-3" id="text-orgac16446">
 <p>
まず戦闘のまえにこっちからやろう。
連れてる仲間、HP,SPを表示する。
</p>
</div>
</div>
 <div id="outline-container-org4a123b3" class="outline-3">
 <h3 id="org4a123b3"> <a href="#org4a123b3"> <span class="done CLOSE">CLOSE</span> Todo</a></h3>
 <div class="outline-text-3" id="text-org4a123b3">
</div>
 <div id="outline-container-orge0c1485" class="outline-4">
 <h4 id="orge0c1485"> <a href="#orge0c1485">戦闘後の移動</a></h4>
 <div class="outline-text-4" id="text-orge0c1485">
 <p>
AIとは移動が競合するので、移動前のものになっている。
戦闘になった瞬間ゲームオブジェクトを消すので、移動できてもよさそう。あーでもそうすると逃げることができないのか。逃げたときは前の位置に移動したいところ。
勝利: 自分が動こうとしていた場所へ移動する。
逃走: 自分が動く前の場所へ移動する。
</p>
</div>
</div>
 <div id="outline-container-org9d478c5" class="outline-4">
 <h4 id="org9d478c5"> <a href="#org9d478c5">非同期キーボードイベント</a></h4>
 <div class="outline-text-4" id="text-org9d478c5">
 <p>
Gosuのキーボードだけ拝借できるかなと思ったが、Gosuのウィンドウにフォーカスが当たらないと検知できない。そりゃそうか。なのでncurses部分を書き換える必要がある。
</p>

 <p>
現状ncurseの問題点。
</p>
 <ul class="org-ul"> <li>アニメーションが一切できない。</li>
 <li>フォントが変えられない。</li>
 <li>描画単位が1マス。</li>
</ul> <p>
CLIでも表現力が上がる。
</p>

 <p>
テスト関係を変えないといけなそう。CIでgosu実行するとどうなるんだろう。
単体テストはOKそうだが、結合はどうなるんだろう。ゲームループ内で操作できるのか。
魅力的だが、別にあとでもよさそう。
</p>
</div>
</div>
 <div id="outline-container-orgbcd4016" class="outline-4">
 <h4 id="orgbcd4016"> <a href="#orgbcd4016">地図ファイルから敵やアイテム生成する</a></h4>
 <div class="outline-text-4" id="text-orgbcd4016">
 <p>
ランダムに加えて固定でも配置できるようにする。
地図と思ったが、移動パターンとか指定したいので結局テキストでやらないといけないか。
</p>
</div>
</div>
 <div id="outline-container-org128a004" class="outline-4">
 <h4 id="org128a004"> <a href="#org128a004">mapとcameraを分離</a></h4>
 <div class="outline-text-4" id="text-org128a004">
 <p>
すべてのベースはmapの配列。
</p>
 <ul class="org-ul"> <li>character,itemを埋め込む。</li>
 <li>cameraのメソッドで配列を切り取って、描画している。</li>
 <li>毎ターンリセット</li>
</ul> <p>
よくないのは、すべてmapの配列操作で密結合していることだ。
</p>

 <p>
書き換えるので、キャラがいると地形データが取れなくなる。別レイヤで処理したい。
banbandonではどうしてるのだろう。カメラとマップは分離しているように見える。
</p>

 <p>
bbdではマップ上に描画しているのに対して、diggerでは画面のピクセルを指定して描画しないといけない違い。
</p>

 <p>
結局地形判定はflyweightのworld配列でやってるので、関係なくなった。描画だけに使われる文字列配列。
</p>
</div>
</div>
 <div id="outline-container-org5c047e0" class="outline-4">
 <h4 id="org5c047e0"> <a href="#org5c047e0">戦闘モード追加する</a></h4>
 <div class="outline-text-4" id="text-org5c047e0">
 <p>
とりあえずstate切り替えだけ追加した。
戦闘のためにはいくつかのクラス、パラメータを用意してやる必要がある。
</p>

 <ul class="org-ul"> <li>party</li>
 <li>member</li>
 <li>enemy</li>
</ul> <blockquote>
 <p>
 <a href="http://www.lancarse.co.jp/blog/?p=194">http://www.lancarse.co.jp/blog/?p=194</a>
</p>
</blockquote>
 <p>
actorからパラメータをコピーして、1ターン分の結果を先に計算。
して、演出用メッセージを生成する。
コードの見通しがよくなる。
</p>
</div>
</div>
 <div id="outline-container-org9ccc4b8" class="outline-4">
 <h4 id="org9ccc4b8"> <a href="#org9ccc4b8">singletonを減らす</a></h4>
 <div class="outline-text-4" id="text-org9ccc4b8">
 <p>
inventoryとかは似たような状況で、singletonになっている。
乱立するのが嫌なので1つのsingletonに、inventoryとかpartyとかを含むようにしたいな。
メッセージなどもそっちに保持させる。characterごとでなく。
</p>
</div>
</div>
 <div id="outline-container-org3202659" class="outline-4">
 <h4 id="org3202659"> <a href="#org3202659">永続値をどこで持つか</a></h4>
 <div class="outline-text-4" id="text-org3202659">
 <p>
ステートを切り替えても持ってないといけないものがある。
仲間のHPとか装備とか。そういうのをどこで保持すればいいんだろう。
</p>

 <p>
とりあえずsignletonにしておけば良いかな。
</p>
</div>
</div>
 <div id="outline-container-org8c7defa" class="outline-4">
 <h4 id="org8c7defa"> <a href="#org8c7defa">戦闘の方はmemberにする</a></h4>
 <div class="outline-text-4" id="text-org8c7defa">
 <p>
エンカウント型にすると、map上のシンボルが複数のキャラクターを持つことがありうる。
現状のCharacterと合わなくなるような気がする。
map上とbattle上のcharacterは別物だ。
</p>

 <p>
=>マップの方はpartyにする。
戦闘の方をcharacterに。
あまり直感的ではないな。
</p>

 <p>
戦闘の方はmemberにするとか。属してるニュアンスは出る。
</p>

 <p>
いろいろ違うので敵と仲間は別にしよう。かなり共通しているところもあるので組み合わせながら。
</p>
</div>
</div>
 <div id="outline-container-org9e0cbf0" class="outline-4">
 <h4 id="org9e0cbf0"> <a href="#org9e0cbf0">スキルはmemberで共通</a></h4>
 <div class="outline-text-4" id="text-org9e0cbf0">
 <p>
敵もスキルを持ってる。
</p>
</div>
</div>
 <div id="outline-container-org501c99e" class="outline-4">
 <h4 id="org501c99e"> <a href="#org501c99e">コマンドパターンについて考える</a></h4>
 <div class="outline-text-4" id="text-org501c99e">
 <p>
今の状況は、キーボードイべントとメソッドが直に結びついてる。
</p>
</div>
</div>
 <div id="outline-container-orgdd13b42" class="outline-4">
 <h4 id="orgdd13b42"> <a href="#orgdd13b42">達成バッジ</a></h4>
 <div class="outline-text-4" id="text-orgdd13b42">
 <p>
オブザーバパターン。
統計情報…移動した回数、経過ターン、倒した敵の数。
動機づけになる。
</p>
</div>
</div>
 <div id="outline-container-org069af99" class="outline-4">
 <h4 id="org069af99"> <a href="#org069af99">不可視にする</a></h4>
 <div class="outline-text-4" id="text-org069af99">
 <p>
視界が難しそう。AIにできるならプレイヤーにも追加すると面白そう。cataclysmみたいに、壁の向こう側は不可視にする。
</p>

 <p>
気づくまでは、固定の動きをする。T字で左折する法則。
</p>
</div>
</div>
</div>
 <div id="outline-container-org5dec4f9" class="outline-3">
 <h3 id="org5dec4f9"> <a href="#org5dec4f9"> <span class="done CLOSE">CLOSE</span> Todo(リファクタ)</a></h3>
 <div class="outline-text-3" id="text-org5dec4f9">
</div>
 <div id="outline-container-orgd424c00" class="outline-4">
 <h4 id="orgd424c00"> <a href="#orgd424c00">カーソル系画面表示をリファクタリングする</a></h4>
 <div class="outline-text-4" id="text-orgd424c00">
 <p>
カーソル、タブがだるい。
何かユーティリティを作ってもいい。
</p>
</div>
</div>
 <div id="outline-container-orgffcf929" class="outline-4">
 <h4 id="orgffcf929"> <a href="#orgffcf929">Inventoryシングルトンをやめる</a></h4>
 <div class="outline-text-4" id="text-orgffcf929">
 <p>
inventoryをシングルトンにするのはやめよう。テストがだるい。
とはいえ、stateを限定しないデータなので、それなりの理由はある。
</p>
</div>
</div>
 <div id="outline-container-orgcbb4855" class="outline-4">
 <h4 id="orgcbb4855"> <a href="#orgcbb4855">メッセージシステム</a></h4>
 <div class="outline-text-4" id="text-orgcbb4855">
 <p>
statsが持ってるのはおかしい気がする。
プレイヤーだけが知っていればいいことなので。
いちいちcharacterから辿るのはメンドイし、直感的でない。
</p>
</div>
</div>
</div>
 <div id="outline-container-org108992c" class="outline-3">
 <h3 id="org108992c"> <a href="#org108992c"> <span class="done CLOSE">CLOSE</span> 設計</a></h3>
 <div class="outline-text-3" id="text-org108992c">
</div>
 <div id="outline-container-orgcbefb9f" class="outline-4">
 <h4 id="orgcbefb9f"> <a href="#orgcbefb9f">戦闘モード</a></h4>
 <div class="outline-text-4" id="text-orgcbefb9f">
 <div class="org-src-container">
 <pre class="src src-nil">
  oo`'._..---.___..-   oo`'._..---.___..-
 (_,-.        ,..'`  (_,-.        ,..'`
      `'.    ;            `'.    ;
         : :`                : :`
        _;_;                _;_;
ティラノ              ティラノ

ティラノ> 体当たりした
白瀬> 10のダメージを受けた
椿> 対物ライフル → ティラノに30のダメージ
石原> 木刀 → ティラノに5のダメージ

--------------------------------
→戦う　　|白瀬 HP: 55/20 SP: 40/30 **--- ****-
 逃げる　|椿　 HP: 90/84 SP: 50/20 ****- ***--
 アイテム|石原 HP: 80/80 SP: 50/24 ***** **---
 　　　　|
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgf4698a6" class="outline-4">
 <h4 id="orgf4698a6"> <a href="#orgf4698a6">拠点メニューモード</a></h4>
 <div class="outline-text-4" id="text-orgf4698a6">
 <p>
拠点。
</p>
 <div class="org-src-container">
 <pre class="src src-nil">→休憩
 合成
 アイテム
 仲間
 装備
 セーブ
 ロード
</pre>
</div>

 <p>
フィールドではメニューにはアクセスしない。
ステータスやアイテムへのショートカットキーを用意する。
</p>
</div>
</div>
 <div id="outline-container-org5de6a59" class="outline-4">
 <h4 id="org5de6a59"> <a href="#org5de6a59">フィールドモード</a></h4>
 <div class="outline-text-4" id="text-org5de6a59">
 <ul class="org-ul"> <li>ターンベース</li>
 <li>イベントオブジェクトに接触して、別モードに遷移する</li>
</ul> <p>
ステータス、アイテム、装備へのショートカットキーを用意する。
</p>
</div>
</div>
</div>
 <div id="outline-container-org262f3cc" class="outline-3">
 <h3 id="org262f3cc"> <a href="#org262f3cc"> <span class="done DONE">DONE</span> 戦闘モード追加</a></h3>
 <div class="outline-text-3" id="text-org262f3cc">
 <p>
接触したときにフラグを立てて、stateに入る。
wants_to_{}系か。
直にstateを変更するというより、フラグを使ってstateを間接的に移動する。
wants_to_meleeの個別要素にアクセスできない。
</p>

 <p>
wants_to_attackを入れておいて、systemを一度回せばいいかな。
一度実行するたびにメッセージを表示して、enterの入力待ちにする。
</p>
</div>
</div>
 <div id="outline-container-org0aba53e" class="outline-3">
 <h3 id="org0aba53e"> <a href="#org0aba53e"> <span class="done DONE">DONE</span> GitHub Pagesにデプロイ</a></h3>
 <div class="outline-text-3" id="text-org0aba53e">
</div>
</div>
 <div id="outline-container-orgdc95b07" class="outline-3">
 <h3 id="orgdc95b07"> <a href="#orgdc95b07"> <span class="done DONE">DONE</span> 遭遇中の敵の情報を出す</a></h3>
 <div class="outline-text-3" id="text-orgdc95b07">
</div>
</div>
 <div id="outline-container-orgcedeae5" class="outline-3">
 <h3 id="orgcedeae5"> <a href="#orgcedeae5"> <span class="done DONE">DONE</span> 1エンカウント対複数の敵に対応する</a></h3>
 <div class="outline-text-3" id="text-orgcedeae5">
 <p>
今はエンカウントシンボルと敵が1対1なので、自由度が低い。
battle_entityを作って戦闘は完全にそっちに移す。
</p>
</div>
</div>
 <div id="outline-container-org0684ce4" class="outline-3">
 <h3 id="org0684ce4"> <a href="#org0684ce4"> <span class="done DONE">DONE</span> 戦闘終了後にマップentityを削除する</a></h3>
 <div class="outline-text-3" id="text-org0684ce4">
 <p>
wants_to_encounterで元entityを保持してるので、そこから削除できないか。
</p>
</div>
</div>
 <div id="outline-container-org41fe7ee" class="outline-3">
 <h3 id="org41fe7ee"> <a href="#org41fe7ee"> <span class="done DONE">DONE</span> 使わない部分を消す</a></h3>
 <div class="outline-text-3" id="text-org41fe7ee">
 <ul class="org-ul"> <li>既存の戦闘部分は使わないので消す</li>
 <li>遠距離アイテムは消す</li>
</ul></div>
</div>
 <div id="outline-container-org8e62542" class="outline-3">
 <h3 id="org8e62542"> <a href="#org8e62542"> <span class="done DONE">DONE</span> 勝利したときに戦闘結果を表示する</a></h3>
 <div class="outline-text-3" id="text-org8e62542">
</div>
</div>
 <div id="outline-container-org000b6fc" class="outline-3">
 <h3 id="org000b6fc"> <a href="#org000b6fc"> <span class="done DONE">DONE</span> 逃げるときの確率分岐</a></h3>
 <div class="outline-text-3" id="text-org000b6fc">
 <p>
今は100％なので、確率で失敗してターンを進行させる。
</p>
</div>
</div>
 <div id="outline-container-orgd5f9b18" class="outline-3">
 <h3 id="orgd5f9b18"> <a href="#orgd5f9b18"> <span class="done DONE">DONE</span> 敵一覧を真ん中寄せにする</a></h3>
 <div class="outline-text-3" id="text-orgd5f9b18">
 <p>
2体いるときは2体で真ん中に、倒して1体になったら1体で真ん中寄せにする。
</p>
</div>
</div>
 <div id="outline-container-org8afa100" class="outline-3">
 <h3 id="org8afa100"> <a href="#org8afa100"> <span class="done DONE">DONE</span> 1体倒してから逃げるとエラー</a></h3>
 <div class="outline-text-3" id="text-org8afa100">
 <p>
wants_to_meleeが残っていて、おかしくなっていたよう。
ターンごとに、リセットするようにした。
確実に前の状態を残さないようにするとバグになりにくそう。
</p>
</div>
</div>
 <div id="outline-container-orgb5b4f1a" class="outline-3">
 <h3 id="orgb5b4f1a"> <a href="#orgb5b4f1a"> <span class="done DONE">DONE</span> 戦闘用エンティティであることを明示する</a></h3>
 <div class="outline-text-3" id="text-orgb5b4f1a">
 <p>
現在は、combat_stats, monsterコンポーネントを持つものを敵の戦闘エンティティとしている…みたいな感じ。
わかりにくいので直したい。
</p>

 <p>
combat_stats を持つ=戦闘エンティティで問題ない。monster, playerがあるのは区別が必要なので仕方ない。
なのでOK。
</p>
</div>
</div>
 <div id="outline-container-orge265100" class="outline-3">
 <h3 id="orge265100"> <a href="#orge265100"> <span class="done DONE">DONE</span> パーティクル追加</a></h3>
 <div class="outline-text-3" id="text-orge265100">
 <p>
チュートリアルのパーティクルはマップ用。
positionにライフタイムのあるentityを配置して、擬似的にアニメーションにしている。
entityにすることで、map描画システムを使い、map上を上書きする形で表示できる。
戦闘ではprintしてるので、そのまま使うことはできない。printごとに座標計算して指定してるので、重ねるためにはロジックをコピペしないといけない。
</p>

 <p>
builderの実装方法は参考になりそうなので、とりあえずコピペ追加。
</p>
</div>
</div>
 <div id="outline-container-org6d8f18c" class="outline-3">
 <h3 id="org6d8f18c"> <a href="#org6d8f18c"> <span class="done DONE">DONE</span> フィールドでHPがリアルタイムに反映されてない</a></h3>
 <div class="outline-text-3" id="text-org6d8f18c">
 <p>
戦闘に入るとダメージが反映される。
field_stateでdamage_systemが動いてないためだった。
</p>
</div>
</div>
 <div id="outline-container-orgdecdc73" class="outline-3">
 <h3 id="orgdecdc73"> <a href="#orgdecdc73"> <span class="done DONE">DONE</span> 食料追加</a></h3>
 <div class="outline-text-3" id="text-orgdecdc73">
</div>
</div>
 <div id="outline-container-orgb9ce657" class="outline-3">
 <h3 id="orgb9ce657"> <a href="#orgb9ce657"> <span class="done CLOSE">CLOSE</span> 画像背景</a></h3>
 <div class="outline-text-3" id="text-orgb9ce657">
 <p>
チュートリアルの内容。
LEX paintがWINEでうまく実行できない。
変換ツールもうまく機能してないので、いったんチュートリアルのを流用して後回しか。システムだけ入れてコメントアウト。
</p>
</div>
</div>
 <div id="outline-container-orgeef817f" class="outline-3">
 <h3 id="orgeef817f"> <a href="#orgeef817f"> <span class="done DONE">DONE</span> プレイヤーと戦闘エンティティを分離する</a></h3>
 <div class="outline-text-3" id="text-orgeef817f">
 <p>
分離した。影響範囲が広い。
</p>
</div>
</div>
 <div id="outline-container-orgb312215" class="outline-3">
 <h3 id="orgb312215"> <a href="#orgb312215"> <span class="done DONE">DONE</span> 再装備するとアイテムが消える</a></h3>
 <div class="outline-text-3" id="text-orgb312215">
 <p>
装備品のownerがキャラになっていたため、インベントリに表示されてないというものだった。
装備中のものはownerが各戦闘用entityになり、装備してないとownerはplayer_entityになる。
party_entityとかにしたほうがいいかもな。
ややこしい。
</p>
</div>
</div>
 <div id="outline-container-org52727f0" class="outline-3">
 <h3 id="org52727f0"> <a href="#org52727f0"> <span class="done DONE">DONE</span> Design Doc</a></h3>
 <div class="outline-text-3" id="text-org52727f0">
</div>
</div>
 <div id="outline-container-orgd5f9807" class="outline-3">
 <h3 id="orgd5f9807"> <a href="#orgd5f9807"> <span class="done DONE">DONE</span> mapをリファクタ(チュートリアル)</a></h3>
 <div class="outline-text-3" id="text-orgd5f9807">
</div>
</div>
 <div id="outline-container-orgd052eaa" class="outline-3">
 <h3 id="orgd052eaa"> <a href="#orgd052eaa"> <span class="done DONE">DONE</span> mapフィルタ</a></h3>
 <div class="outline-text-3" id="text-orgd052eaa">
</div>
</div>
 <div id="outline-container-org39d1778" class="outline-3">
 <h3 id="org39d1778"> <a href="#org39d1778"> <span class="done DONE">DONE</span> ドア追加(チュートリアル)</a></h3>
 <div class="outline-text-3" id="text-org39d1778">
</div>
</div>
 <div id="outline-container-org135c917" class="outline-3">
 <h3 id="org135c917"> <a href="#org135c917"> <span class="done DONE">DONE</span> Warningつぶし</a></h3>
 <div class="outline-text-3" id="text-org135c917">
</div>
</div>
 <div id="outline-container-org52fccd9" class="outline-3">
 <h3 id="org52fccd9"> <a href="#org52fccd9"> <span class="done DONE">DONE</span> builder理解</a></h3>
 <div class="outline-text-3" id="text-org52fccd9">
</div>
</div>
 <div id="outline-container-orgea5e1fd" class="outline-3">
 <h3 id="orgea5e1fd"> <a href="#orgea5e1fd"> <span class="done DONE">DONE</span> カメラ導入(チュートリアル)</a></h3>
 <div class="outline-text-3" id="text-orgea5e1fd">
</div>
</div>
 <div id="outline-container-org94b5d95" class="outline-3">
 <h3 id="org94b5d95"> <a href="#org94b5d95"> <span class="done DONE">DONE</span> getで取れるところのリファクタ</a></h3>
 <div class="outline-text-3" id="text-org94b5d95">
 <div class="org-src-container">
 <pre class="src src-rust">hc = hunger_clock.get(entity);
</pre>
</div>
 <p>
のように、entityさえわかっていればgetで属性をコンポーネントを取得できる。いちいちforに長く書く必要がない。
</p>
</div>
</div>
 <div id="outline-container-org0b552d8" class="outline-3">
 <h3 id="org0b552d8"> <a href="#org0b552d8"> <span class="done DONE">DONE</span> データのjsonファイル化(チュートリアル)</a></h3>
 <div class="outline-text-3" id="text-org0b552d8">
</div>
</div>
 <div id="outline-container-org5c7a5ac" class="outline-3">
 <h3 id="org5c7a5ac"> <a href="#org5c7a5ac"> <span class="done DONE">DONE</span> 街追加(チュートリアル)</a></h3>
 <div class="outline-text-3" id="text-org5c7a5ac">
</div>
</div>
 <div id="outline-container-org2034314" class="outline-3">
 <h3 id="org2034314"> <a href="#org2034314"> <span class="done DONE">DONE</span> 戦闘が終了しないバグ</a></h3>
 <div class="outline-text-3" id="text-org2034314">
 <p>
戦闘関連のリファクタをした。あまりよくないな…。
</p>
</div>
</div>
 <div id="outline-container-org272093c" class="outline-3">
 <h3 id="org272093c"> <a href="#org272093c"> <span class="done DONE">DONE</span> 複数の能力(チュートリアル)</a></h3>
 <div class="outline-text-3" id="text-org272093c">
</div>
</div>
 <div id="outline-container-orgc4a66bb" class="outline-3">
 <h3 id="orgc4a66bb"> <a href="#orgc4a66bb"> <span class="done DONE">DONE</span> 画面サイズを大きくする</a></h3>
 <div class="outline-text-3" id="text-orgc4a66bb">
 <p>
コンパイル後のブラウザ表示。何回か試したが、うまくいってない。
</p>
</div>
</div>
 <div id="outline-container-orgd7e16fb" class="outline-3">
 <h3 id="orgd7e16fb"> <a href="#orgd7e16fb"> <span class="done DONE">DONE</span> Battleリファクタ</a></h3>
 <div class="outline-text-3" id="text-orgd7e16fb">
</div>
</div>
 <div id="outline-container-org8dbbc7d" class="outline-3">
 <h3 id="org8dbbc7d"> <a href="#org8dbbc7d"> <span class="done DONE">DONE</span> 装備品追加(チュートリアル)</a></h3>
 <div class="outline-text-3" id="text-org8dbbc7d">
</div>
</div>
 <div id="outline-container-orga2a0b64" class="outline-3">
 <h3 id="orga2a0b64"> <a href="#orga2a0b64"> <span class="done DONE">DONE</span> UI(チュートリアル)</a></h3>
 <div class="outline-text-3" id="text-orga2a0b64">
</div>
</div>
 <div id="outline-container-org74b3966" class="outline-3">
 <h3 id="org74b3966"> <a href="#org74b3966"> <span class="done DONE">DONE</span> ゲームオーバーになったあと再開するとHP表示がUIから消える</a></h3>
 <div class="outline-text-3" id="text-org74b3966">
</div>
</div>
 <div id="outline-container-orge44137f" class="outline-3">
 <h3 id="orge44137f"> <a href="#orge44137f"> <span class="done DONE">DONE</span> 森をつくる(チュートリアル)</a></h3>
</div>
 <div id="outline-container-org0298b7a" class="outline-3">
 <h3 id="org0298b7a"> <a href="#org0298b7a"> <span class="done DONE">DONE</span> 経験値とレベル(チュートリアル)</a></h3>
</div>
 <div id="outline-container-org3c8aed8" class="outline-3">
 <h3 id="org3c8aed8"> <a href="#org3c8aed8"> <span class="done DONE">DONE</span> 家に戻る(チュートリアル)</a></h3>
 <div class="outline-text-3" id="text-org3c8aed8">
</div>
</div>
 <div id="outline-container-orgb347648" class="outline-3">
 <h3 id="orgb347648"> <a href="#orgb347648"> <span class="done DONE">DONE</span> 石灰岩の洞窟(チュートリアル)</a></h3>
 <div class="outline-text-3" id="text-orgb347648">
</div>
</div>
 <div id="outline-container-org290a355" class="outline-3">
 <h3 id="org290a355"> <a href="#org290a355"> <span class="done DONE">DONE</span> AIモジュール化(チュートリアル)</a></h3>
 <div class="outline-text-3" id="text-org290a355">
</div>
</div>
 <div id="outline-container-orgbc6efa5" class="outline-3">
 <h3 id="orgbc6efa5"> <a href="#orgbc6efa5"> <span class="done DONE">DONE</span> spatial mapping(チュートリアル)</a></h3>
 <div class="outline-text-3" id="text-orgbc6efa5">
</div>
</div>
 <div id="outline-container-orgdcf5551" class="outline-3">
 <h3 id="orgdcf5551"> <a href="#orgdcf5551"> <span class="done DONE">DONE</span> アイテム追加(チュートリアル)</a></h3>
 <div class="outline-text-3" id="text-orgdcf5551">
</div>
</div>
 <div id="outline-container-orgb5e96db" class="outline-3">
 <h3 id="orgb5e96db"> <a href="#orgb5e96db"> <span class="done DONE">DONE</span> 深い洞窟(チュートリアル)</a></h3>
 <div class="outline-text-3" id="text-orgb5e96db">
</div>
</div>
 <div id="outline-container-org343f274" class="outline-3">
 <h3 id="org343f274"> <a href="#org343f274"> <span class="done DONE">DONE</span> 洞窟からDwarf Fortress(チュートリアル)</a></h3>
 <div class="outline-text-3" id="text-org343f274">
</div>
</div>
 <div id="outline-container-org5662b17" class="outline-3">
 <h3 id="org5662b17"> <a href="#org5662b17"> <span class="done DONE">DONE</span> タウンポータル(チュートリアル)</a></h3>
 <div class="outline-text-3" id="text-org5662b17">
</div>
</div>
 <div id="outline-container-org007ad66" class="outline-3">
 <h3 id="org007ad66"> <a href="#org007ad66"> <span class="done DONE">DONE</span> WASMビルドが失敗する</a></h3>
 <div class="outline-text-3" id="text-org007ad66">
</div>
</div>
 <div id="outline-container-org76186b5" class="outline-3">
 <h3 id="org76186b5"> <a href="#org76186b5"> <span class="done DONE">DONE</span> 魔法のアイテムと鑑定(チュートリアル)</a></h3>
 <div class="outline-text-3" id="text-org76186b5">
 <p>
ゲーム内容と関係しないので、追加しない。
</p>

 <ul class="org-ul"> <li>アイテムの色</li>
</ul></div>
</div>
 <div id="outline-container-org2fd736d" class="outline-3">
 <h3 id="org2fd736d"> <a href="#org2fd736d"> <span class="done DONE">DONE</span> 効果(チュートリアル)</a></h3>
 <div class="outline-text-3" id="text-org2fd736d">
 <p>
dispatcher modelの導入。長い章。
</p>
</div>
</div>
 <div id="outline-container-org7a9f905" class="outline-3">
 <h3 id="org7a9f905"> <a href="#org7a9f905"> <span class="done DONE">DONE</span> 呪われたアイテムと解呪(チュートリアル)</a></h3>
 <div class="outline-text-3" id="text-org7a9f905">
 <p>
呪い装備機能は追加しないので、ざっと見るだけ。
</p>
</div>
</div>
 <div id="outline-container-org09e8c4c" class="outline-3">
 <h3 id="org09e8c4c"> <a href="#org09e8c4c"> <span class="done DONE">DONE</span> ステータスに効果を与えるアイテム(チュートリアル)</a></h3>
 <div class="outline-text-3" id="text-org09e8c4c">
 <p>
chapter65。回数や効果ターンは実装しない。効果のターン数は、後の戦闘でいりそう。フィールド画面ではいらないので、スルー。
</p>
</div>
</div>
 <div id="outline-container-org5f5bb79" class="outline-3">
 <h3 id="org5f5bb79"> <a href="#org5f5bb79"> <span class="done DONE">DONE</span> ゲームオーバーになったときにエラーになる</a></h3>
 <div class="outline-text-3" id="text-org5f5bb79">
 <p>
原因不明。
</p>
 <div class="org-src-container">
 <pre class="src src-nil">thread 'main' panicked at 'Tried to fetch data of type "alloc::boxed::Box<dyn shred::world::Resource>", but it was already borrowed mutably.', /home/green/.cargo/registry/src/github.com-1ecc6299db9ec823/shred-0.10.2/src/cell.rs:268:33
</pre>
</div>

 <p>
スタックトレースを出して、怪しいところをスコープに入れると解決した。なぜコンパイラで検知できないのかはよくわからない。
</p>
</div>
</div>
 <div id="outline-container-orgb6f4066" class="outline-3">
 <h3 id="orgb6f4066"> <a href="#orgb6f4066"> <span class="done DONE">DONE</span> 魔法追加(チュートリアル)</a></h3>
 <div class="outline-text-3" id="text-orgb6f4066">
 <p>
Chapter66。アイテムなしで使用できる魔法を追加する章。覚えるアイテムを使うと、魔法が使えるようになるタイプ。これも後回しになりそう。今のところフィールドで何か使えるようにする予定はないが、戦闘で似たようなことをやるはず。
</p>

 <p>
武器による状態異常なども実装している。
</p>
</div>
</div>
 <div id="outline-container-orgc717b23" class="outline-3">
 <h3 id="orgc717b23"> <a href="#orgc717b23"> <span class="done DONE">DONE</span> ドラゴンに入る(チュートリアル)</a></h3>
 <div class="outline-text-3" id="text-orgc717b23">
 <ul class="org-ul"> <li>マップを作成</li>
 <li>スポーンを改良(MasterTable)</li>
 <li>複数タイルを専有するボス。当たり判定やAI調整</li>
 <li>レベルアップ時のステータス調整</li>
</ul> <p>
該当しなさそうなので、ほぼ実装なし。
</p>
</div>
</div>
 <div id="outline-container-org49b9b4b" class="outline-3">
 <h3 id="org49b9b4b"> <a href="#org49b9b4b"> <span class="done DONE">DONE</span> マッシュルームの森(チュートリアル)</a></h3>
 <div class="outline-text-3" id="text-org49b9b4b">
 <ul class="org-ul"> <li>近寄ったときの自爆攻撃</li>
 <li>アイテム追加</li>
</ul></div>
</div>
 <div id="outline-container-org8ade870" class="outline-3">
 <h3 id="org8ade870"> <a href="#org8ade870"> <span class="done DONE">DONE</span> 深いマッシュルームの森(チュートリアル)</a></h3>
 <div class="outline-text-3" id="text-org8ade870">
 <ul class="org-ul"> <li>Chapter69</li>
 <li>武器の拡張が参考になる</li>
 <li>アイテムのテンプレート。+1とか+2を別アイテムとしていちいち追加しなくていいようにする</li>
 <li>武器のeffectを別にしてトレイトとしてまとめる。たとえばname: venomous, effect: [damage_over_time: 2"]と定義しておく</li>
 <li>トレイトとテンプレートを組み合わせて、多くのバリエーションを生み出す</li>
</ul></div>
</div>
 <div id="outline-container-org18a8a2c" class="outline-3">
 <h3 id="org18a8a2c"> <a href="#org18a8a2c"> <span class="done DONE">DONE</span> ミサイルと範囲攻撃(チュートリアル)</a></h3>
 <div class="outline-text-3" id="text-org18a8a2c">
 <ul class="org-ul"> <li>Chapter70</li>
 <li>飛び道具</li>
</ul> <p>
ターゲット周りがあまりよくわからない。あまり利用できそうなところはなかった。
</p>
</div>
</div>
 <div id="outline-container-org6f76bb4" class="outline-3">
 <h3 id="org6f76bb4"> <a href="#org6f76bb4"> <span class="done DONE">DONE</span> ゲームログと実績カウント(チュートリアル)</a></h3>
 <div class="outline-text-3" id="text-org6f76bb4">
 <p>
ここでいうログは実績のやつ。セーブにも保存されるようにする。シンプルで参考になる。
</p>
</div>
</div>
 <div id="outline-container-orgee6ae92" class="outline-3">
 <h3 id="orgee6ae92"> <a href="#orgee6ae92"> <span class="done DONE">DONE</span> テキストレイヤー(チュートリアル)</a></h3>
 <div class="outline-text-3" id="text-orgee6ae92">
 <ul class="org-ul"> <li>現在のフォントでは長い文章を読みづらいので、ログだけ別のフォントにする</li>
 <li>まずrltkの全機能を知らないと、よりよい機能を選択できなそう</li>
 <li>フォント変えるとだいぶ印象が変わった。工夫のしがいがあるところに気づかないので、既存のものをプレイしてみる必要がありそう</li>
 <li>巨大なguiファイルをモジュール分割</li>
</ul></div>
</div>
 <div id="outline-container-orgbde8322" class="outline-3">
 <h3 id="orgbde8322"> <a href="#orgbde8322"> <span class="done DONE">DONE</span> マルチスレッドによる高速化(チュートリアル)</a></h3>
 <div class="outline-text-3" id="text-orgbde8322">
 <p>
73章。systemをマルチスレッド対応にして高速化する。あとでやる。
</p>
</div>
</div>
 <div id="outline-container-org2f680a2" class="outline-3">
 <h3 id="org2f680a2"> <a href="#org2f680a2"> <span class="done DONE">DONE</span> 夜の街(チュートリアル)</a></h3>
 <div class="outline-text-3" id="text-org2f680a2">
 <p>
マップ追加だけ。とくに見るところはないのでスキップ。
</p>
</div>
</div>
 <div id="outline-container-orga5e0a36" class="outline-3">
 <h3 id="orga5e0a36"> <a href="#orga5e0a36"> <span class="done DONE">DONE</span> 戦闘終了後1ターン経過しないと敵シンボルが消えないバグ</a></h3>
 <div class="outline-text-3" id="text-orga5e0a36">
 <p>
1ターン離れないと、敵が消えない。もう一度エンカウントすることはないので、何かしら違うのだが。
</p>

 <ul class="org-ul"> <li>run_systemを一度実行すると敵シンボルは消えドロップアイテムが見えるのだが、その座標に1ターン経過しないと移動できない状態になる</li>
 <li>run_systemsを2度実行すると自然な状態になる。よくわからない</li>
 <li>delete_the_deadがターンの関係で敵が消えてないのでは</li>
</ul></div>
</div>
 <div id="outline-container-org2dd3abb" class="outline-3">
 <h3 id="org2dd3abb"> <a href="#org2dd3abb"> <span class="done DONE">DONE</span> 戦闘系コード整理</a></h3>
 <div class="outline-text-3" id="text-org2dd3abb">
 <p>
生死判定、勝利判定でごちゃついていて、どこにあるかわからない。かつ、フィールドでのそれらと混ざっていて危険。
</p>

 <p>
それぞれsystemに分割したが、うまく動かない。1ターン進めないと、死体が消えない、戦闘勝利判定が入らない。困った。ステートも切り替わらないな。ほかのシステムとの連動が、イメージと異なるようだ。
</p>

 <ul class="org-ul"> <li>逃げるのは機構が別なのでできる。mainファイルから正しくstateが切り替わっている</li>
 <li>プレイヤーの体力判定も動いてない</li>
 <li>サンプルのdelete_the_deadもsystemになっていないことはヒントか。run_systemで実行せず、state共通で毎ループ実行するようになっている</li>
 <li>とはいえあとちょっとでできそうなんだよな。問題は死体が消えず体力が1ターンマイナスになることだけだ。ecs.maintain()をすると削除できるようになった。system内でのentity削除は、ecs.maintain()を実行しないと削除されないようだ</li>
 <li>とはいえ、アイテムドロップにecsが必要でsystemでどういう対応すれば良いかわからず</li>
</ul> <blockquote>
 <p>
use super::{
    gamelog::BattleLog, Attributes, Combatant, Equipped, InBackpack, LootTable, Map, Monster, Name,
    OnBattle, Player, Pools, Position, RunState,
};
use specs::prelude::*;
</p>

 <p>
pub struct DamageSystem {}
</p>

 <p>
impl<’a> System<’a> for DamageSystem {
    type SystemData = (
        ReadStorage<’a, Pools>,
        ReadStorage<’a, Player>,
        ReadStorage<’a, Name>,
        ReadStorage<’a, Combatant>,
        Entities<’a>,
        WriteExpect<’a, BattleLog>,
        WriteExpect<’a, RunState>,
    );
</p>

 <p>
fn run(&mut self, data: Self::SystemData) {
    let (
	pools,
	players,
	names,
	combatant,
	entities,
	mut log,
	mut runstate,
    ) = data;
</p>

 <p>
let mut dead: Vec<Entity> = Vec::new();
// Using a scope to make the borrow checker happy
</p>

 <p>
for (entity, pools,  <span class="underline">combatant) in (&entities, &pools, &combatant).join() {
    if pools.hit_points.current < 1 {
	let player = players.get(entity);
	match player {
	    None => {
		let victim_name = names.get(entity);
		if let Some(victim_name) = victim_name {
		    log.entries.push(format!(“{} is dead”, &victim_name.name));
		}
		dead.push(entity);
	    }
	    Some(</span>) => {
		*runstate = RunState::GameOver;
	    }
	}
    }
}
</p>

 <p>
 <i>/ HPが0になったentityの削除
/</i> entity削除をしても存在し続けているように見える
for victim in dead {
    entities.delete(victim).expect(“Delete failed”);
}
</p>

 <p>
         <i>/ 勝利判定
        /</i> if maybe_win {
         <i>/     check_battle_win(ecs);
        /</i> }
    }
}
</p>

 <p>
pub struct WinSystem {}
</p>

 <p>
impl<’a> System<’a> for WinSystem {
    type SystemData = (
        Entities<’a>,
        ReadStorage<’a, Pools>,
        ReadStorage<’a, Monster>,
        ReadStorage<’a, Combatant>,
        WriteStorage<’a, OnBattle>,
        WriteStorage<’a, Equipped>,
        WriteStorage<’a, InBackpack>,
        WriteStorage<’a, Position>,
        ReadStorage<’a, LootTable>,
        WriteExpect<’a, rltk::RandomNumberGenerator>,
        WriteExpect<’a, BattleLog>,
        WriteExpect<’a, RunState>,
    );
</p>

 <p>
fn run(&mut self, data: Self::SystemData) {
    let (
	entities,
	pools,
	monster,
	combatant,
	mut on_battle,
	mut equipped,
	mut carried,
	mut positions,
	loot_tables,
	rng,
	mut log,
	mut runstate
    ) = data;
</p>

 <p>
let mut dead: Vec<Entity> = Vec::new();
</p>

 <p>
if (&entities, &pools, &monster, &combatant).join().count() == 0 {
    for (_entity, on_battle) in (&entities, &on_battle).join() {
	dead.push(on_battle.monster);
    }
}
</p>

 <p>
        for victim in dead {
            log.entries.push(format!(“You win!”));
            entities.delete(victim).expect(“Delete failed”);
            *runstate = RunState::BattleResult;
            on_battle.clear();
        }
    }
}
</p>
</blockquote>
</div>
</div>
 <div id="outline-container-orgf7bcd22" class="outline-3">
 <h3 id="orgf7bcd22"> <a href="#orgf7bcd22"> <span class="done DONE">DONE</span> battle用を分ける</a></h3>
 <div class="outline-text-3" id="text-orgf7bcd22">
 <p>
stateがごっちゃになっているので別にする。systemは別でやる。
</p>

 <ul class="org-ul"> <li>複数の型をとりうるとき、orってどうするんだ。enumで。</li>
 <li>stateのenumをネストしたenumにすればよいのでは、と考えたがうまくいかず</li>
</ul></div>
</div>
 <div id="outline-container-orgbf6b121" class="outline-3">
 <h3 id="orgbf6b121"> <a href="#orgbf6b121"> <span class="done DONE">DONE</span> 逃走コード分離</a></h3>
 <div class="outline-text-3" id="text-orgbf6b121">
 <p>
GUI部分に書いている。全体的に分離されてないので、分離。
</p>

 <ul class="org-ul"> <li>systemにしたところ、また逃走成功時のエンティティ削除がうまくいかない</li>
 <li>エンティティ削除部分が実行されてないようで、逃走成功メッセージが出ない + 次の戦闘時に2体表示される</li>
 <li>逃走では即stateが切り替わるようになってるから、そのへんな気もする。systemを使う場合だと、wants_run_away生成→ターン処理→逃走となり実行タイミングがよくわからないことになる。delete_the_deadと同じように、ターン処理を待たずに即実行したい感じなのでsystemにしない</li>
</ul></div>
</div>
 <div id="outline-container-org80ea19c" class="outline-3">
 <h3 id="org80ea19c"> <a href="#org80ea19c"> <span class="done DONE">DONE</span> 腹減りでHPが減らないのを修正する</a></h3>
 <div class="outline-text-3" id="text-org80ea19c">
 <p>
なぜかダメージが通らなくなっている。
</p>

 <p>
攻撃主と対象が同じのため、ダメージが通らなくなっていた。腹減り時のeffectの攻撃主をNoneに設定して完了。
</p>
</div>
</div>
 <div id="outline-container-org76301c4" class="outline-3">
 <h3 id="org76301c4"> <a href="#org76301c4"> <span class="done DONE">DONE</span> systemをmoduleにする</a></h3>
 <div class="outline-text-3" id="text-org76301c4">
 <p>
多くてディレクトリがわかりづらくなっている。チュートリアルの最終盤にあったがまだやってない。
</p>
</div>
</div>
 <div id="outline-container-orge82b8ef" class="outline-3">
 <h3 id="orge82b8ef"> <a href="#orge82b8ef"> <span class="done DONE">DONE</span> 戦闘ログとフィールドログを共通の仕組みにする</a></h3>
 <div class="outline-text-3" id="text-orge82b8ef">
 <p>
表示データが異なるだけで、操作は同じなので。引数でデータを選択できるようにした。
</p>
</div>
</div>
 <div id="outline-container-orge8f881a" class="outline-3">
 <h3 id="orge8f881a"> <a href="#orge8f881a"> <span class="done DONE">DONE</span> 戦闘メッセージボックスをバッチ化</a></h3>
 <div class="outline-text-3" id="text-orge8f881a">
 <p>
フィールドUIと同じ形式で文字を表示する。フィールドUIはチュートリアルのリファクタで共通化されている。はずなのだが、旧の部分が残っている気がする。
</p>

 <p>
ターゲット選択部分は同じ関数なのに、フィールドと戦闘で結果に差が出る。戦闘の選択肢がBから表示され、若干表示が乱れている。対象をプレイヤーに限定したらおかしくなくなった。どうせ今は味方にしか意味のあるアイテムだけなので良い。
</p>

 <p>
将来的にはアイテムに対象を味方単体、敵単体、味方全体、敵全体という風にもたせて、アイテムごとでそれらのターゲット選択画面を出す出さないを決めたい。
</p>
</div>
</div>
 <div id="outline-container-org2747a39" class="outline-3">
 <h3 id="org2747a39"> <a href="#org2747a39"> <span class="done DONE">DONE</span> 戦闘用GUIを分割する</a></h3>
 <div class="outline-text-3" id="text-org2747a39">
 <p>
一緒くたにbattle.rsへ入っていてわかりづらいので、フィールドと同様に分割する。とりあえずフィールドとの共通化は考えないが、すでにアイテム使用は同じ関数になっている。
</p>

 <p>
guiディレクトリをbattle用、フィールド用でさらに分けてもいいのだが、そんなに意味なさそうな感じもする。battleはそんなに多くないからな。
</p>
</div>
</div>
 <div id="outline-container-org110c7b6" class="outline-3">
 <h3 id="org110c7b6"> <a href="#org110c7b6"> <span class="done DONE">DONE</span> デバッグ用の敵召喚</a></h3>
 <div class="outline-text-3" id="text-org110c7b6">
 <p>
いちいち敵を探すのがだるいので目の前へ召喚できるようにする。
</p>
</div>
</div>
 <div id="outline-container-orga0377a3" class="outline-3">
 <h3 id="orga0377a3"> <a href="#orga0377a3"> <span class="done DONE">DONE</span> MP → SPに変更</a></h3>
 <div class="outline-text-3" id="text-orga0377a3">
 <p>
単に名前を変えるだけ。魔法は出てこない。
</p>
</div>
</div>
 <div id="outline-container-orgf531a64" class="outline-3">
 <h3 id="orgf531a64"> <a href="#orgf531a64"> <span class="done DONE">DONE</span> スクショ更新</a></h3>
 <div class="outline-text-3" id="text-orgf531a64">
</div>
</div>
 <div id="outline-container-org6e99def" class="outline-3">
 <h3 id="org6e99def"> <a href="#org6e99def"> <span class="done DONE">DONE</span> ゲーム画面を画像に埋め込む</a></h3>
 <div class="outline-text-3" id="text-org6e99def">
 <p>
ブラウザ版。ブラウン管の背景画像を設定し、透過させたらすごくそれっぽくなった。
</p>
</div>
</div>
 <div id="outline-container-orgb3336ce" class="outline-3">
 <h3 id="orgb3336ce"> <a href="#orgb3336ce"> <span class="done DONE">DONE</span> 画像設定</a></h3>
 <div class="outline-text-3" id="text-orgb3336ce">
 <p>
メインメニューと戦闘の画面を設定する。戦闘の背景はステージによって変化させたい。
</p>
</div>
</div>
 <div id="outline-container-orgdfdbaff" class="outline-3">
 <h3 id="orgdfdbaff"> <a href="#orgdfdbaff"> <span class="done DONE">DONE</span> バイナリビルド</a></h3>
 <div class="outline-text-3" id="text-orgdfdbaff">
 <p>
主要OSでビルドしてリリースに添付する。
</p>

 <ul class="org-ul"> <li>Linuxではwayland関係で実行エラーになる。Windows(wine)はうまくいった。クロスビルド用のライブラリを使えばよいらしい</li>
 <li>Macではうまくいかなかったので無視。crossのビルド対象になかった</li>
</ul></div>
</div>
 <div id="outline-container-orgb0e68a4" class="outline-3">
 <h3 id="orgb0e68a4"> <a href="#orgb0e68a4"> <span class="done DONE">DONE</span> 画像フォントを設定する</a></h3>
 <div class="outline-text-3" id="text-orgb0e68a4">
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 6: </span>画像フォントを設定する。重ね合わせて表示するものは上側がno_bgでないといけない</label> <pre class="src src-rust">use rltk::BTermBuilder;

const SCREEN_WIDTH: i32 = 80;
const SCREEN_HEIGHT: i32 = 60;
const DISPLAY_WIDTH: i32 = SCREEN_WIDTH / 2;
const DISPLAY_HEIGHT: i32 = SCREEN_HEIGHT / 2;

let context = BTermBuilder::new()
    .with_title("Dungeon Crawler")
    .with_fps_cap(30.0)
    .with_dimensions(DISPLAY_WIDTH, DISPLAY_HEIGHT)
    .with_tile_dimensions(8, 8)
    .with_resource_path("resources/")
    .with_font("dungeonfont.png", 32, 32)
    .with_simple_console(DISPLAY_WIDTH, DISPLAY_HEIGHT, "dungeonfont.png")
    .with_simple_console_no_bg(DISPLAY_WIDTH, DISPLAY_HEIGHT, "dungeonfont.png")
    .build()?;
</pre>
</div>
 <ul class="org-ul"> <li>複数のフォントを設定することで、敵をアイコンにしつつ、UIのアルファベットはそのままにできるようだがわからない</li>
 <li>日本語表示は数が多すぎるため厳しいよう。フォントと画像をマッピングしている仕組みはどうなっているのだろう。ひらがなカタカナでも難しいように見える</li>
 <li>開始ディレクトリが変わるためか、ビルドがエディタからできなくなる。シェルからやらないと、ファイルが見つからないエラーになる</li>
 <li>ハンズオンを見る限り、フォントは単一のサイズというわけではない。アイコンフォントはでかくして、普通の文字フォントは小さくすることができる</li>
 <li>consoleごとにfontを設定し、入力対象のconsoleを切り替えることで複数のfontを両立できる。重なり順がある</li>
 <li>エディタビルドはcompile時にプロジェクトトップに移動することでできる。cdしないとresourceを見つけられずビルドエラーになる</li>
 <li>wasmをreleaseビルドして、ブラウザで確認すると空白になっている。ビルドは成功する</li>
 <li>jsのエラーを見ると、やはりfont関係のよう</li>
 <li>解決できそうにない+レイヤーの複雑化を避けるために画像はあきらめる。もともとマストでやりたいことは戦闘時の敵キャラの表示だったが、これはデフォルトで入ってるフォントを小さくしたうえでxpファイルを表示することで達成できる
 <ul class="org-ul"> <li>とはいえこうすると、透過ができない。背景はぴったり表示するので問題ないが、敵画像でこれやるとかなりださい</li>
</ul></li>
 <li>あるいは、バイナリ実行のほうがうまくいくのであれば一時的にwasmは放棄するのもありか。先にバイナリビルドを実行できる体制を整えたい</li>
 <li>with_sprite_sheet が使えそうな予感</li>
 <li>exampleを参考にして、ディレクトリ指定を調整すると解決した</li>
 <li>WASMビルド以外で横線が入るのが気になる。EXWMでだけ発生するようだ。cinnamon環境のwineとバイナリ起動だと、横線は入らない</li>
</ul></div>
</div>
 <div id="outline-container-org95697a9" class="outline-3">
 <h3 id="org95697a9"> <a href="#org95697a9"> <span class="done DONE">DONE</span> want_to_meleeに攻撃方法を渡す</a></h3>
 <div class="outline-text-3" id="text-org95697a9">
 <p>
味方のコマンド選択結果、敵の自動選択の攻撃方法の2つの可能性がある。計算に使いつつ、ログに表示する。
</p>
</div>
</div>
 <div id="outline-container-org09e31b3" class="outline-3">
 <h3 id="org09e31b3"> <a href="#org09e31b3"> <span class="done DONE">DONE</span> パーティのHP表示対応</a></h3>
 <div class="outline-text-3" id="text-org09e31b3">
 <p>
最初の一人分しか表示されなくて、何人いるのかわかりにくいので。
</p>
</div>
</div>
 <div id="outline-container-org9751a30" class="outline-3">
 <h3 id="org9751a30"> <a href="#org9751a30"> <span class="done DONE">DONE</span> アイテムの説明を見られるようにする</a></h3>
 <div class="outline-text-3" id="text-org9751a30">
 <p>
キーボードで選択できるのは素晴らしいが、アイテムの説明を見られないのに気づいた。カーソル移動を実装しないといけなそう。アイテムの効果に加えて、フレーバーテキストも入れたい。
</p>
</div>
</div>
 <div id="outline-container-orgdfcac39" class="outline-3">
 <h3 id="orgdfcac39"> <a href="#orgdfcac39"> <span class="done DONE">DONE</span> アイテム詳細ツールチップ</a></h3>
 <div class="outline-text-3" id="text-orgdfcac39">
 <p>
アイテム詳細の共通ツールチップを追加する。
</p>

 <ul class="org-ul"> <li>x, y, entityをmenusで入れる。guiで表示処理する。menuでitemsを使って使用したx, yが重要になる。</li>
 <li>マップのtooltipの場合は、直に渡さなくてもpositionで後から求めることができる。tooltipを常に表示する部分と、tooltipを追加する部分の2つがある</li>
 <li>メニューアイテムのtooltipの場合は、x, yは後からわからない。表示しているのと同じ箇所で、tooltipを有効にする必要がある</li>
</ul></div>
</div>
 <div id="outline-container-orgd4c951d" class="outline-3">
 <h3 id="orgd4c951d"> <a href="#orgd4c951d"> <span class="done DONE">DONE</span> バイナリを配布する</a></h3>
 <div class="outline-text-3" id="text-orgd4c951d">
 <p>
それぞれのOSですぐ実行できるようにする。
</p>
</div>
</div>
 <div id="outline-container-orga711460" class="outline-3">
 <h3 id="orga711460"> <a href="#orga711460"> <span class="done DONE">DONE</span> アイテムの説明文追加</a></h3>
 <div class="outline-text-3" id="text-orga711460">
 <p>
アイテムの説明文。フレーバーテキストというよりは、ちゃんとした説明。
</p>
</div>
</div>
 <div id="outline-container-orge85dc09" class="outline-3">
 <h3 id="orge85dc09"> <a href="#orge85dc09"> <span class="done DONE">DONE</span> 店で売買したとき重量の再計算が行われない</a></h3>
 <div class="outline-text-3" id="text-orge85dc09">
 <p>
アイテムを拾ったり使うと重量が反映される。が、店で売買したときは変わらない。
</p>

 <p>
売買時にdirtyを追加するようにした。が、一歩歩かないと再計算されない。とりあえずこれで良い。
</p>
</div>
</div>
</div>
 <div id="outline-container-org890d789" class="outline-2">
 <h2 id="org890d789"> <a href="#org890d789">Backlinks</a></h2>
 <div class="outline-text-2" id="text-org890d789">
 <ul class="org-ul"> <li> <a href="./20210615222732-project.html">project</a></li>
 <li> <a href="./20210703105033-archive.html">Archive</a></li>
 <li> <a href="./20210817003906-history.html">History</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20210624232811-digger.html"/>
  <id>https://kijimad.github.io/roam/20210624232811-digger.html</id>
  <updated>2025-06-14T00:00:00+09:00</updated>
</entry>
<entry>
  <title>Archive</title>
  <author><name>root</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orgd4c38ea" class="outline-2">
 <h2 id="orgd4c38ea"> <a href="#orgd4c38ea">概要</a></h2>
 <div class="outline-text-2" id="text-orgd4c38ea">
 <p>
単発の発表用原稿などを置く。
</p>

 <p>
発表用フォントサイズセット。
</p>
</div>
</div>
 <div id="outline-container-orgd64662a" class="outline-2">
 <h2 id="orgd64662a"> <a href="#orgd64662a">Memo</a></h2>
 <div class="outline-text-2" id="text-orgd64662a">
</div>
 <div id="outline-container-org74df8e7" class="outline-3">
 <h3 id="org74df8e7"> <a href="#org74df8e7">Tech Nightスライド  <span class="timestamp-wrapper"> <span class="timestamp"><2021-10-08 金></span></span></a></h3>
 <div class="outline-text-3" id="text-org74df8e7">
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(org-timer-set-timer 5)
</pre>
</div>

 <p>
発表用フォントサイズ。
</p>
</div>
 <div id="outline-container-org026b4d3" class="outline-4">
 <h4 id="org026b4d3"> <a href="#org026b4d3">★伝えたいこと★</a></h4>
 <div class="outline-text-4" id="text-org026b4d3">
 <p>
コードのメモをするとき、  <b>コメント/コード/実行結果を1つにまとめる</b> とわかりやすい。
</p>

 <p>
→ うまくやるための道具があります。
</p>
</div>
</div>
 <div id="outline-container-org4ac44df" class="outline-4">
 <h4 id="org4ac44df"> <a href="#org4ac44df">自己紹介</a></h4>
 <div class="outline-text-4" id="text-org4ac44df">
 <blockquote>
 <p>
貴島 大悟
資格スクエア プログラマー
</p>
</blockquote>

 <p>
外観は  <code>もう中学生</code> (吉本興業のお笑い芸人)に似ているようです。
</p>
</div>
</div>
 <div id="outline-container-org6a833c8" class="outline-4">
 <h4 id="org6a833c8"> <a href="#org6a833c8">2つの方法</a></h4>
 <div class="outline-text-4" id="text-org6a833c8">
 <p>
2つの方法があります。
</p>

 <ul class="org-ul"> <li>gem(ライブラリ)</li>
 <li>外部ツール</li>
</ul></div>
</div>
 <div id="outline-container-org456d93f" class="outline-4">
 <h4 id="org456d93f"> <a href="#org456d93f">gem編  <code>xmpfilter</code> で実行結果を出力する方法</a></h4>
 <div class="outline-text-4" id="text-org456d93f">
 <ul class="org-ul"> <li> <a href="20210509095513-ruby.html#ID-cfd092c4-1bb2-43d3-88b1-9f647809e546">Ruby</a>には実行結果をコードに出力するgemがある</li>
 <li>Ruby gem  <a href="https://github.com/rcodetools/rcodetools">rcodetools/rcodetools</a>に同梱されている</li>
</ul> <div class="org-src-container">
 <pre class="src src-ruby">names =  <span class="org-string">%w[aaa bbb]</span>              <span class="org-comment-delimiter"># </span> <span class="org-comment">=> ["aaa", "bbb"]</span>
e = names.to_enum                <span class="org-comment-delimiter"># </span> <span class="org-comment">=> #<Enumerator: ["aaa", "bbb"]:each></span>
e.class                          <span class="org-comment-delimiter"># </span> <span class="org-comment">=> Enumerator</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-org2faca34" class="outline-4">
 <h4 id="org2faca34"> <a href="#org2faca34">外部ツール編</a></h4>
 <div class="outline-text-4" id="text-org2faca34">
 <p>
(Markdownに読み替えても同じことができるはずです)
</p>

 <ul class="org-ul"> <li>クラスが定義するインスタンスメソッドを調べる方法</li>
</ul> <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-builtin">p</span>  <span class="org-type">Enumerable</span>.instance_methods.sort
</pre>
</div>

 <div class="results" id="org8efe9df">
 <p>
[:all?, :any?, :chain, :chunk, :chunk_while, :collect, :collect_concat, :count, :cycle, :detect, :drop, :drop_while, :each_cons, :each_entry, :each_slice, :each_with_index, :each_with_object, :entries, :filter, :filter_map, :find, :find_all, :find_index, :first, :flat_map, :grep, :grep_v, :group_by, :include?, :inject, :lazy, :map, :max, :max_by, :member?, :min, :min_by, :minmax, :minmax_by, :none?, :one?, :partition, :reduce, :reject, :reverse_each, :select, :slice_after, :slice_before, :slice_when, :sort, :sort_by, :sum, :take, :take_while, :tally, :to_a, :to_h, :uniq, :zip]
</p>

</div>
</div>
</div>
 <div id="outline-container-orgb982e5a" class="outline-4">
 <h4 id="orgb982e5a"> <a href="#orgb982e5a">SQLもわかりやすくなる</a></h4>
 <div class="outline-text-4" id="text-orgb982e5a">
 <ul class="org-ul"> <li>(とくにSQLは実行結果が出ないとコードを把握しにくい感じがします)</li>

 <li> <code>TO_CHAR</code> を使って日付→文字列へ変換する</li>
</ul> <div class="org-src-container">
 <pre class="src src-sql"> <span class="org-keyword">SELECT</span> customer_name, customer_id, TO_CHAR(birth_day,  <span class="org-string">'YYYY年MM月DD日'</span>)
 <span class="org-keyword">FROM</span> customer
 <span class="org-keyword">LIMIT</span> 10
</pre>
</div>

 <div class="results" id="org131de8d">
 <table> <colgroup> <col class="org-left"></col> <col class="org-left"></col> <col class="org-left"></col></colgroup> <thead> <tr> <th scope="col" class="org-left">customer_name</th>
 <th scope="col" class="org-left">customer_id</th>
 <th scope="col" class="org-left">to_char</th>
</tr></thead> <tbody> <tr> <td class="org-left">大野 あや子</td>
 <td class="org-left">CS021313000114</td>
 <td class="org-left">1981年04月29日</td>
</tr> <tr> <td class="org-left">六角 雅彦</td>
 <td class="org-left">CS037613000071</td>
 <td class="org-left">1952年04月01日</td>
</tr> <tr> <td class="org-left">宇多田 貴美子</td>
 <td class="org-left">CS031415000172</td>
 <td class="org-left">1976年10月04日</td>
</tr> <tr> <td class="org-left">堀井 かおり</td>
 <td class="org-left">CS028811000001</td>
 <td class="org-left">1933年03月27日</td>
</tr> <tr> <td class="org-left">田崎 美紀</td>
 <td class="org-left">CS001215000145</td>
 <td class="org-left">1995年03月29日</td>
</tr> <tr> <td class="org-left">宮下 達士</td>
 <td class="org-left">CS020401000016</td>
 <td class="org-left">1974年09月15日</td>
</tr> <tr> <td class="org-left">奥野 陽子</td>
 <td class="org-left">CS015414000103</td>
 <td class="org-left">1977年08月09日</td>
</tr> <tr> <td class="org-left">釈 人志</td>
 <td class="org-left">CS029403000008</td>
 <td class="org-left">1973年08月17日</td>
</tr> <tr> <td class="org-left">松谷 米蔵</td>
 <td class="org-left">CS015804000004</td>
 <td class="org-left">1931年05月02日</td>
</tr> <tr> <td class="org-left">安斎 遥</td>
 <td class="org-left">CS033513000180</td>
 <td class="org-left">1962年07月11日</td>
</tr></tbody></table></div>
</div>
</div>
 <div id="outline-container-org1b17652" class="outline-4">
 <h4 id="org1b17652"> <a href="#org1b17652">まとめ</a></h4>
 <div class="outline-text-4" id="text-org1b17652">
 <ul class="org-ul"> <li>コードのメモは文脈がなく、後から見て意味不明、ということがよくある</li>
 <li> <code>メモ</code> 、  <code>実行コード</code> 、  <code>実行結果</code> を同じ場所に書くとわかりやすい</li>
 <li>だが普通にやるとめんどくさい</li>
 <li>ツールでかんたんにできる</li>
</ul></div>
</div>
 <div id="outline-container-org71ad94f" class="outline-4">
 <h4 id="org71ad94f"> <a href="#org71ad94f">࿐おわり࿐</a></h4>
 <div class="outline-text-4" id="text-org71ad94f">
 <p>
ご清聴ありがとうございました。
</p>
</div>
</div>
</div>
 <div id="outline-container-org927cc54" class="outline-3">
 <h3 id="org927cc54"> <a href="#org927cc54">textlint-plugin-orgプラグイン発表用スライド  <span class="timestamp-wrapper"> <span class="timestamp"><2021-07-02 金></span></span></a></h3>
 <div class="outline-text-3" id="text-org927cc54">
 <p>
 <a href="20210511013549-textlint.html#ID-d3394774-aba5-4167-bd18-f194eb2bd9ed">TextLint</a>
 <a href="https://github.com/kijimaD/textlint-plugin-org">GitHub - kijimaD/textlint-plugin-org</a>
 <a href="https://github.com/textlint/textlint#supported-file-formats">GitHub - textlint/textlint</a>
</p>

 <p>
textlintのプラグインを作成しました。
npmに登録＋公式のREADMEにリンクしました。
 <code>npm install textlint-plugin-org</code>
</p>

 <p>
orgファイル(Emacs独自のアウトライン形式)で使えるようにしました。
(orgデモ)
</p>
</div>
 <div id="outline-container-orgfed32d8" class="outline-4">
 <h4 id="orgfed32d8"> <a href="#orgfed32d8">TextLintの説明</a></h4>
 <div class="outline-text-4" id="text-orgfed32d8">
 <p>
TextLintはその名の通り自然言語用のLintです。
単純な間違いや、わかりづらい言い回し、語数制限などを検知してくれます。たくさんルールがあって面白いです。
</p>

 <p>
Markdownは標準、ほかにもHTMLなどは対応してます。
</p>

 <p>
対応してないフォーマットの場合、たとえば見出しで  <code>。</code> がないとか、コードブロックに対して検知をしてまともに使用できません。
</p>

 <p>
 <b>どうしても</b> orgで使いたかったので作成することにしました。
</p>
</div>
</div>
 <div id="outline-container-org587f9f7" class="outline-4">
 <h4 id="org587f9f7"> <a href="#org587f9f7">Lintについて学ぶ</a></h4>
 <div class="outline-text-4" id="text-org587f9f7">
 <p>
 <a href="https://azu.github.io/JavaScript-Plugin-Architecture/">https://azu.github.io/JavaScript-Plugin-Architecture/</a>
</p>

 <p>
中段の動作イメージがとてもわかりやすい。
</p>

 <p>
AST変換というのが重要だということがわかります。
</p>

 <blockquote>
 <p>
ESLintはコードをパースしてASTにして、そのASTをJavaScriptで書いたルールを使いチェックするという大まかな仕組みは分かりました。
</p>
</blockquote>

 <p>
textlint-plugin-org/test/OrgProcessor-test.ts
テストから実際にASTオブジェクトの中身を見てみます。
</p>
 <div class="org-src-container">
 <pre class="src src-javascript">    it( <span class="org-string">'heading should Header'</span>, () => {
       <span class="org-keyword">const</span>  <span class="org-variable-name">result</span> = parse( <span class="org-string">`</span>
 <span class="org-string">** Heading</span>
 <span class="org-string">      `</span>);
       <span class="org-keyword">const</span>  <span class="org-variable-name">section</span> = result.children[0];
       <span class="org-keyword">const</span>  <span class="org-variable-name">header</span> = section.children[0];
      assert.equal(header.type, Syntax.headline);
    });
</pre>
</div>

 <p>
 <code>console.log(section)</code> ↓
</p>
 <div class="org-src-container">
 <pre class="src src-javascript">{
    type:  <span class="org-string">'UNKNOWN'</span>,
    level: 2,
    properties: {},
    children: [
        {
            type:  <span class="org-string">'Header'</span>,
            actionable:  <span class="org-constant">false</span>,
            content:  <span class="org-string">'Heading'</span>,
            children: [Array],
            level: 2,
            loc: [Object],
            range: [Array],
            raw:  <span class="org-string">'** Heading\n'</span>
        },
        type:  <span class="org-string">'UNKNOWN'</span>
    ],
    loc: { start: { line: 2, column: 0 }, end: { line: 3, column: 0 } },
    range: [ 1, 12 ],
    raw:  <span class="org-string">'** Heading\n'</span>
}
</pre>
</div>

 <p>
 <code>console.log(header)</code> ↓
</p>
 <div class="org-src-container">
 <pre class="src src-javascript">{
    type:  <span class="org-string">'Header'</span>,
    actionable:  <span class="org-constant">false</span>,
    content:  <span class="org-string">'Heading'</span>,
    children: [
        {
            type:  <span class="org-string">'UNKNOWN'</span>,
            level: 2,
            loc: [Object],
            range: [Array],
            raw:  <span class="org-string">'**'</span>
        },
        {
            type:  <span class="org-string">'Str'</span>,
            value:  <span class="org-string">'Heading'</span>,
            loc: [Object],
            range: [Array],
            raw:  <span class="org-string">'Heading'</span>
        },
        { type:  <span class="org-string">'UNKNOWN'</span>, loc: [Object], range: [Array], raw:  <span class="org-string">'\n'</span> },
        type:  <span class="org-string">'UNKNOWN'</span>
    ],
    level: 2,
    loc: { start: { line: 2, column: 0 }, end: { line: 3, column: 0 } },
    range: [ 1, 12 ],
    raw:  <span class="org-string">'** Heading\n'</span>
}
</pre>
</div>

 <p>
Lintは、このASTオブジェクトのTypeに基づいてそれぞれのルールを適用してます。
なので見出しの星は対象外にできます。
</p>
</div>
</div>
 <div id="outline-container-org17486f8" class="outline-4">
 <h4 id="org17486f8"> <a href="#org17486f8">AST変換器を調べる</a></h4>
 <div class="outline-text-4" id="text-org17486f8">
 <ul class="org-ul"> <li>ファイル形式の文字列 → (ここが必要) → AST → Lint</li>
</ul> <p>
やる必要があるのは、オブジェクトの形式を揃えることです。
typeの名前がtextlintに対応したシンボルへマッピングします。
</p>

 <p>
変換器はすでにあります。
</p>
 <dl class="org-dl"> <dt>orgajs</dt> <dd> <a href="https://github.com/orgapp/orgajs">https://github.com/orgapp/orgajs</a></dd>
</dl> <p>
なので、本質的に必要なことはこのマッピングです(ほかにも位置や範囲を付加する必要がありますが、HTMLとかとほぼ同じ)。
</p>
 <div class="org-src-container">
 <pre class="src src-javascript"> <span class="org-keyword">export</span>  <span class="org-keyword">const</span>  <span class="org-variable-name">nodeTypes</span> = {
  document: ASTNodeTypes.Document,
  paragraph: ASTNodeTypes.Paragraph,
  list: ASTNodeTypes.List,
   <span class="org-string">'list.item'</span>: ASTNodeTypes.ListItem,
  headline: ASTNodeTypes.Header,
  block: ASTNodeTypes.CodeBlock,
  hr: ASTNodeTypes.HorizontalRule,
   <span class="org-comment-delimiter">// </span> <span class="org-comment">inline block</span>
   <span class="org-string">'text.plain'</span>: ASTNodeTypes.Str,
   <span class="org-string">'text.code'</span>: ASTNodeTypes.Code,
   <span class="org-string">'text.bold'</span>: ASTNodeTypes.Emphasis,
  link: ASTNodeTypes.Link,
  footnote:  <span class="org-string">'FootnoteReference'</span>,
};
</pre>
</div>
</div>
</div>
 <div id="outline-container-org3a7b02d" class="outline-4">
 <h4 id="org3a7b02d"> <a href="#org3a7b02d">テストを書く</a></h4>
 <div class="outline-text-4" id="text-org3a7b02d">
 <p>
orgajsがどんな名前で出力するかは実行しないとわからなかったので、ちゃんとすべてテストを書いて調べました。上流の不慮の変更も検知できます。
</p>

 <p>
ということで使えるようになりました🎉。
</p>

 <p>
便利です。
</p>
</div>
</div>
 <div id="outline-container-orgbac4ecf" class="outline-4">
 <h4 id="orgbac4ecf"> <a href="#orgbac4ecf">まとめ</a></h4>
 <div class="outline-text-4" id="text-orgbac4ecf">
 <p>
Emacsエコシステムを少し広げることができました。
</p>
</div>
</div>
</div>
 <div id="outline-container-org15922b0" class="outline-3">
 <h3 id="org15922b0"> <a href="#org15922b0">digger発表用スライド  <span class="timestamp-wrapper"> <span class="timestamp"><2021-07-02 金></span></span></a></h3>
 <div class="outline-text-3" id="text-org15922b0">
 <p>
 <a href="20210624232811-digger.html#ID-70f249a8-f8c8-4a7e-978c-8ff04ffd09c0">digger</a>
</p>
</div>
 <div id="outline-container-org1fd80ab" class="outline-4">
 <h4 id="org1fd80ab"> <a href="#org1fd80ab">やっていること(途中)</a></h4>
 <div class="outline-text-4" id="text-org1fd80ab">
 <p>
 <a href="https://github.com/kijimaD/digger">GitHub - kijimaD/digger</a>
CLIのゲームを作っています(WIP)。
</p>

 <p>
(デモ)
</p>

 <p>
まだ移動しかできない。
</p>
</div>
</div>
 <div id="outline-container-orgb35d4ad" class="outline-4">
 <h4 id="orgb35d4ad"> <a href="#orgb35d4ad">前回の反省を踏まえた要件</a></h4>
 <div class="outline-text-4" id="text-orgb35d4ad">
 <ul class="org-ul"> <li> <b>画像表示はあきらめる or 見下ろし</b></li>
 <li>ターン制にする。リアルタイムではなく。</li>
 <li>テストを書く( <b>テストが書ける構造にする</b>)</li>
</ul></div>
</div>
 <div id="outline-container-org57eb850" class="outline-4">
 <h4 id="org57eb850"> <a href="#org57eb850">利点</a></h4>
 <div class="outline-text-4" id="text-org57eb850">
 <p>
時代に逆行した開発ですが、よいところもあります。
</p>

 <ul class="org-ul"> <li>真のRubyだけに集中できる(ライブラリすら必要ではない。CLI用のCursesくらい)</li>
 <li>オブジェクト指向をやらなければならない状況。ゲームそのものがゲームオブジェクトの相互作用なので、オブジェクト指向でないと条件ありすぎて死ぬ。フツーに命令的に書けるプログラムが二者間だとしたら、ゲームは三者間。</li>

 <li id="例">壁に当たるのは自キャラだけでない。敵キャラや銃弾も当たる。各オブジェクトに判断してもらわないといけない。</li>
 <li id="例">弾がヒットしたら、誰のスコアになるのか => その銃弾オブジェクトを生成したキャラクターオブジェクト。みたいな。</li>
 <li id="例">毎ターンフィールドにあるすべてのオブジェクトを更新＋新描画したい => すべて入れ物オブジェクトに入れておいて、mapですべてを一括処理しよう、とか。</li>
</ul></div>
</div>
 <div id="outline-container-orga5e2cbf" class="outline-4">
 <h4 id="orga5e2cbf"> <a href="#orga5e2cbf">まとめ</a></h4>
 <div class="outline-text-4" id="text-orga5e2cbf">
 <p>
1ヶ月くらい頑張ってみます(宣言)。
</p>
</div>
</div>
 <div id="outline-container-orga80a8fb" class="outline-4">
 <h4 id="orga80a8fb"> <a href="#orga80a8fb">ボツ</a></h4>
 <div class="outline-text-4" id="text-orga80a8fb">
 <p>
ローグライクになる予定です。↓みたいなゲーム。超好きなジャンルです。
</p>

 <dl class="org-dl"> <dt> <a href="https://github.com/CleverRaven/Cataclysm-DDA">Cataclysm-DDA</a></dt> <dd>ゾンビサバイバル
 <a href="https://www.google.com/search?q=cataclysm+dark+days+ahead+&tbm=isch&ved=2ahUKEwir1caPhcLxAhVBxosBHUPJCfwQ2-cCegQIABAA&oq=cataclysm+dark+days+ahead+&gs_lcp=CgNpbWcQAzICCAAyAggAMgIIADICCAAyAggAMgIIADICCAAyAggAMgIIADICCAA6BAgAEBhQtsMFWPDFBWCxxwVoAHAAeACAAbUBiAHHApIBAzIuMZgBAKABAaoBC2d3cy13aXotaW1nwAEB&sclient=img&ei=eMvdYKu5B8GMr7wPw5Kn4A8&bih=733&biw=1451#imgrc=NRZZLClw8123FM">参考</a></dd>

 <dt> <a href="http://www.bay12games.com/dwarves/">Dwarf Fortress</a></dt> <dd>サバイバル/シミュレーション
 <a href="https://www.google.com/search?q=dwarf+fortress+gif&tbm=isch&ved=2ahUKEwi3lIiphMLxAhVvzYsBHQ5zAiUQ2-cCegQIABAA&oq=dwarf+fortress+gif&gs_lcp=CgNpbWcQAzICCAA6BAgAEEM6BAgAEBhQ_ZkDWLqcA2CgngNoAHAAeACAAXeIAY4DkgEDMi4ymAEAoAEBqgELZ3dzLXdpei1pbWfAAQE&sclient=img&ei=ocrdYPe_C--ar7wPjuaJqAI&bih=733&biw=1451#imgrc=pWyEfsGw-tobeM&imgdii=LjqvyOp9B09twM">参考</a></dd>

 <dt>Elona</dt> <dd>RPG風
 <a href="https://www.google.com/search?q=elona&tbm=isch&ved=2ahUKEwjR1oDUhcLxAhXNDN4KHVI7CTEQ2-cCegQIABAA&oq=elona&gs_lcp=CgNpbWcQAzICCAAyBAgAEEMyBAgAEEMyAggAMgIIADIECAAQQzICCAAyAggAMgQIABBDMgIIAFCP9gFYk_0BYJH-AWgAcAB4AIABXogB1gKSAQE0mAEAoAEBqgELZ3dzLXdpei1pbWfAAQE&sclient=img&ei=B8zdYJG3Kc2Z-AbS9qSIAw&bih=733&biw=1451#imgrc=pLVXzgxlaxCVDM">参考</a></dd>
</dl> <p>
これらは商業的な作品ではなく、貧弱なグラフィックですが、超濃密なゲーム世界を作り上げています。
個人がめざす(めざせる)のはこういう方向性だと考えてます。
</p>
</div>
</div>
 <div id="outline-container-org618133a" class="outline-4">
 <h4 id="org618133a"> <a href="#org618133a">前回の反省</a></h4>
 <div class="outline-text-4" id="text-org618133a">
 <p>
仕事につく前、何度か作りはじめては挫折してきました。
</p>

 <p>
直近だと去年開発してましたが、開発が進まなくなってやめました↓。
</p>
 <dl class="org-dl"> <dt> <a href="https://github.com/kijimaD/ban-ban-don">GitHub - kijimaD/ban-ban-don</a></dt> <dd>rubyのゲームライブラリGosuを使った、シューティングゲーム。
 <ul class="org-ul"> <li>(本に載ってたコードをベースに開発しました。根本部分のコード構造はほとんどオリジナル性ないです)</li>
</ul></dd>
</dl> <p>
これの問題点、挫折した理由…。
</p>

 <ul class="org-ul"> <li>要件を高望みしすぎた。
 <ul class="org-ul"> <li>疑似3Dにした。座標に、ひし形の画像を敷き詰めると疑似3Dができます…画面確認が大変だった。特に重なりとか、接触判定が…。</li>
 <li>アニメーションする画像の用意が大変すぎた。方向分の画像を作る必要がある。</li>
 <li>リアルタイムなので再現しにくい。</li>
 <li>パフォーマンスを考えないとまともに動かなくなる。黒魔術がある(四分木とか)。</li>
</ul></li>

 <li>つらい目視確認開発。
 <ul class="org-ul"> <li>新機能を作るときも、いちいち起動して該当箇所までいって開発していた。</li>
 <li>テストがない、lintがない(まだ知らなかった)</li>
 <li>いつのまにかどこかが壊れて動かなくなること多数</li>
</ul></li>
</ul> <p>
=> ムリ  <code>＼(^o^)／</code>
</p>
</div>
</div>
</div>
 <div id="outline-container-org9a8ebf0" class="outline-3">
 <h3 id="org9a8ebf0"> <a href="#org9a8ebf0">create-link 発表用スライド</a></h3>
 <div class="outline-text-3" id="text-org9a8ebf0">
</div>
 <div id="outline-container-org08e8395" class="outline-4">
 <h4 id="org08e8395"> <a href="#org08e8395"></a> <a href="20210508234743-emacs.html#ID-1ad8c3d5-97ba-4905-be11-e6f2626127ad">Emacs</a>パッケージ(#2)を作りました。</h4>
 <div class="outline-text-4" id="text-org08e8395">
 <p>
 <a href="https://github.com/kijimaD/create-link">https://github.com/kijimaD/create-link</a>
</p>
</div>
</div>
 <div id="outline-container-org9fd29cf" class="outline-4">
 <h4 id="org9fd29cf"> <a href="#org9fd29cf">作ったもの</a></h4>
 <div class="outline-text-4" id="text-org9fd29cf">
</div>
 <ul class="org-ul"> <li> <a id="org0b89aec"></a> <a href="#org0b89aec">Chrome拡張CreateLinkをEmacsに移植した</a> <br></br> <div class="outline-text-5" id="text-org0b89aec">
 <p>
 <code>CreateLink</code> というChrome拡張があります。
</p>

 <p>
それのEmacs版を作成しました。
公式パッケージ集での審査中(まだ返信来ない)。
</p>
</div>
</li>
 <li> <a id="org464cd07"></a> <a href="#org464cd07">元になったCreateLinkの説明🔗</a> <br></br> <div class="outline-text-5" id="text-org464cd07">
 <p>
現在のページの名前のついたリンクを取得する拡張です。GitHubとかSlackに貼り付けるとき、便利なやつです。
</p>

 <ul class="org-ul"> <li>CreateLinkのリンク(Chromeウェブストア)</li>
</ul> <p>
 <code>https://chrome.google.com/webstore/detail/create-link/gcmghdmnkfdbncmnmlkkglmnnhagajbm?hl=ja</code>
</p>

 <ul class="org-ul"> <li>例: Markdownリンクだと、</li>
</ul> <p>
 <a href="https://www.google.com">https://www.google.com</a> ->[Google]( <a href="https://www.google.com/">https://www.google.com/</a>) みたいな。
</p>

 <p>
(ブラウザのデモ)
</p>
</div>
</li>
 <li> <a id="orgafc8f9f"></a> <a href="#orgafc8f9f">作成したcreate-linkの紹介</a> <br></br> <div class="outline-text-5" id="text-orgafc8f9f">
 <ul class="org-ul"> <li>Emacs上の各種ブラウザeww, w3m</li>
 <li>各種フォーマットHTML(default), LaTeX, Markdown, MediaWiki, Org-mode</li>
 <li>ブラウザ以外のときはローカルファイルのパスを取得する</li>
</ul> <p>
に対応してます。
</p>

 <p>
(実行・オプション操作のデモ)
</p>
</div>
</li>
</ul></div>
 <div id="outline-container-org8cc5b9b" class="outline-4">
 <h4 id="org8cc5b9b"> <a href="#org8cc5b9b">コード</a></h4>
 <div class="outline-text-4" id="text-org8cc5b9b">
 <p>
ライセンスの部分を除くと、90行くらいしかありません。
</p>

 <p>
半分くらいはユーザ設定のための決まりきった記述のため、実際は40行ほど。
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp"> <span class="org-comment-delimiter">;;; </span> <span class="org-comment">Code:</span>

( <span class="org-keyword">require</span> ' <span class="org-constant">eww</span>)
( <span class="org-keyword">require</span> ' <span class="org-constant">w3m</span>)

( <span class="org-keyword">defgroup</span>  <span class="org-type">create-link</span> nil
   <span class="org-doc">"Generate a formatted current page link."</span>
   <span class="org-builtin">:group</span> 'convenience
   <span class="org-builtin">:prefix</span>  <span class="org-string">"create-link-"</span>)

( <span class="org-keyword">defcustom</span>  <span class="org-variable-name">create-link-default-format</span> 'html
   <span class="org-doc">"Default link format."</span>
   <span class="org-builtin">:group</span> 'create-link
   <span class="org-builtin">:type</span> '(choice (const  <span class="org-builtin">:tag</span>  <span class="org-string">"html"</span> html)
                 (const  <span class="org-builtin">:tag</span>  <span class="org-string">"markdown"</span> markdown)
                 (other  <span class="org-builtin">:tag</span>  <span class="org-string">"org"</span> org)
                 (other  <span class="org-builtin">:tag</span>  <span class="org-string">"media-wiki"</span> media-wiki)
                 (other  <span class="org-builtin">:tag</span>  <span class="org-string">"latex"</span> latex)))

 <span class="org-comment-delimiter">;; </span> <span class="org-comment">🌟オプション設定</span>

 <span class="org-comment-delimiter">;; </span> <span class="org-comment">Format keywords:</span>
 <span class="org-comment-delimiter">;; </span> <span class="org-comment">%url% - http://www.google.com/</span>
 <span class="org-comment-delimiter">;; </span> <span class="org-comment">%title% - Google</span>
( <span class="org-keyword">defcustom</span>  <span class="org-variable-name">create-link-format-html</span>  <span class="org-string">"<a href='</span> <span class="org-string"> <span class="org-constant">%url%</span></span> <span class="org-string">'>%title%</a>"</span>
   <span class="org-doc">"HTML link format."</span>
   <span class="org-builtin">:group</span> 'create-link
   <span class="org-builtin">:type</span> 'string)

( <span class="org-keyword">defcustom</span>  <span class="org-variable-name">create-link-format-markdown</span>  <span class="org-string">"[%title%](%url%)"</span>
   <span class="org-doc">"Markdown link format."</span>
   <span class="org-builtin">:group</span> 'create-link
   <span class="org-builtin">:type</span> 'string)

( <span class="org-keyword">defcustom</span>  <span class="org-variable-name">create-link-format-org</span>  <span class="org-string">"[[%url%][%title%]]"</span>
   <span class="org-doc">"Org-mode link format."</span>
   <span class="org-builtin">:group</span> 'create-link
   <span class="org-builtin">:type</span> 'string)

( <span class="org-keyword">defcustom</span>  <span class="org-variable-name">create-link-format-media-wiki</span>  <span class="org-string">"[%url% %title%]"</span>
   <span class="org-doc">"Media Wiki link format."</span>
   <span class="org-builtin">:group</span> 'create-link
   <span class="org-builtin">:type</span> 'string)

( <span class="org-keyword">defcustom</span>  <span class="org-variable-name">create-link-format-latex</span>  <span class="org-string">"\\href{%url%}{%title%}"</span>
   <span class="org-doc">"Latex link format."</span>
   <span class="org-builtin">:group</span> 'create-link
   <span class="org-builtin">:type</span> 'string)

( <span class="org-keyword">defun</span>  <span class="org-function-name">create-link-raw-format</span> ()
   <span class="org-doc">"Choose a format type by the custom variable."</span>
  ( <span class="org-keyword">pcase</span> create-link-default-format
    (`html
     create-link-format-html)
    (`markdown
     create-link-format-markdown)
    (`org
     create-link-format-org)
    (`media-wiki
     create-link-format-media-wiki)
    (`latex
     create-link-format-latex)))

( <span class="org-keyword">defun</span>  <span class="org-function-name">create-link-replace-dictionary</span> ()
   <span class="org-doc">"Convert format keyword to corresponding one."</span>
  `(( <span class="org-string">"%url%"</span> . ,(cdr (assoc 'url (create-link-get-information))))
    ( <span class="org-string">"%title%"</span> . ,(cdr (assoc 'title (create-link-get-information))))))

( <span class="org-keyword">defun</span>  <span class="org-function-name">create-link-make-format</span> ()
   <span class="org-doc">"Fill format keywords."</span>
  (seq-reduce
   ( <span class="org-keyword">lambda</span> (string regexp-replacement-pair)
     (replace-regexp-in-string
      (car regexp-replacement-pair)
      (cdr regexp-replacement-pair)
      string))
   (create-link-replace-dictionary)
   (create-link-raw-format)))  <span class="org-comment-delimiter">;; </span> <span class="org-comment"><a href='</span> <span class="org-comment"> <span class="org-constant">%url%</span></span> <span class="org-comment">'>%title%</a> とか。ループのinitial value。</span>

 <span class="org-comment-delimiter">;; </span> <span class="org-comment"><a href='</span> <span class="org-comment"> <span class="org-constant">%url%</span></span> <span class="org-comment">'>%title%</a></span>
 <span class="org-comment-delimiter">;; </span> <span class="org-comment"><a href='</span> <span class="org-comment"> <span class="org-constant">https://...</span></span> <span class="org-comment">'>%title%</a> 前の値を保持</span>
 <span class="org-comment-delimiter">;; </span> <span class="org-comment"><a href='</span> <span class="org-comment"> <span class="org-constant">https://...</span></span> <span class="org-comment">'>Google</a> さらに置換</span>

#+begin_comment
 <span class="org-comment-delimiter">;; </span> <span class="org-comment">ここを綺麗に書くのが一番むずかしかった。...複数の文字列置換</span>
 <span class="org-comment-delimiter">;; </span> <span class="org-comment">一つの置換(replace-regexp-in-string)は関数があるが、複数指定はできない。</span>

 <span class="org-comment-delimiter">;; </span> <span class="org-comment">(seq-reduce)の第一引数はコードブロックに相当するところ。ループ一回で何をするか。</span>
 <span class="org-comment-delimiter">;; </span> <span class="org-comment">stringはraw-format(<a href='</span> <span class="org-comment"> <span class="org-constant">%url%</span></span> <span class="org-comment">'>%title%</a>など)を受け取る。</span>
 <span class="org-comment-delimiter">;; </span> <span class="org-comment">regexp-replacement-pairはreplace-dictionaryのイテレーション分が入る。ブロック引数。</span>
#+end_comment

 <span class="org-comment-delimiter">;; </span> <span class="org-comment">🌟ブラウザやその他をラップしてtitle, urlを返す！</span>
( <span class="org-keyword">defun</span>  <span class="org-function-name">create-link-get-information</span> ()
   <span class="org-doc">"Get keyword information on your browser."</span>
  ( <span class="org-keyword">cond</span> ((string-match-p  <span class="org-string">"eww"</span> (buffer-name))
         `((title . ,(plist-get eww-data  <span class="org-builtin">:title</span>))
           (url . ,(plist-get eww-data  <span class="org-builtin">:url</span>))))
        ((string-match-p  <span class="org-string">"w3m"</span> (buffer-name))
         `((title . ,w3m-current-title)
           (url . ,w3m-current-url)))
         <span class="org-comment-delimiter">;; </span> <span class="org-comment">otherwise, create-link to the file-buffer</span>
        (t
         `((title . ,(buffer-name))
           (url . ,(buffer-file-name))))))

 <span class="org-comment-delimiter">;; </span> <span class="org-comment">🌟エントリーポイント</span>
 <span class="org-comment-delimiter">;;;</span> <span class="org-comment">###</span> <span class="org-comment"> <span class="org-warning">autoload</span></span>
( <span class="org-keyword">defun</span>  <span class="org-function-name">create-link</span> ()
   <span class="org-doc">"Create formatted link."</span>
  ( <span class="org-keyword">interactive</span>)
  (message  <span class="org-string">"Copied! %s"</span> (create-link-make-format))
  (kill-new (create-link-make-format)))

( <span class="org-keyword">provide</span> ' <span class="org-constant">create-link</span>)

 <span class="org-comment-delimiter">;;; </span> <span class="org-comment">create-link.el ends here</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-org70de52c" class="outline-4">
 <h4 id="org70de52c"> <a href="#org70de52c">知見</a></h4>
 <div class="outline-text-4" id="text-org70de52c">
</div>
 <ul class="org-ul"> <li> <a id="org3460a4f"></a> <a href="#org3460a4f">短くても問題なし</a> <br></br> <div class="outline-text-5" id="text-org3460a4f">
 <p>
大きなパッケージに比べてこれはゴミみたいなもんだな、と思ってました。
</p>

 <p>
でもコードやアイデアの参考にするため使っているパッケージのコードを眺めていて、こういう短いものでも自分が日々使ってたり、多くの人に使われているパッケージはけっこうあることに気づきました。
</p>

 <p>
たとえば。
</p>

 <p>
add-node-modules-path.el
</p>
 <ul class="org-ul"> <li>node環境の読み込み 86行</li>
</ul> <p>
 <a href="file:///home/kijima/.emacs.d/.cask/27.1/elpa/org-bullets-20200317.1740/org-bullets.el">org-bullets.el</a>
</p>
 <ul class="org-ul"> <li>リストをいい感じに表示する 109行</li>
</ul> <p>
 <a href="file:///home/kijima/.emacs.d/.cask/27.1/elpa/define-word-20210103.1812/define-word.el">define-word.el</a>
</p>
 <ul class="org-ul"> <li>オンライン辞書 132行</li>
</ul> <p>
 <a href="file:///home/kijima/.emacs.d/.cask/27.1/elpa/rubocop-20210309.1241/rubocop.el">rubocop.el</a>
</p>
 <ul class="org-ul"> <li>rubocopをいい感じに 267行</li>

 <li>重要なのは1つのことをうまくやること。</li>
</ul></div>
</li>
 <li> <a id="org8f4b5ca"></a> <a href="#org8f4b5ca">他の人に使ってもらえるとうれしい</a> <br></br> <div class="outline-text-5" id="text-org8f4b5ca">
 <p>
使ってくれた＋PRが来ました。
褒めてくれてテンション上がる。
 <a href="https://github.com/kijimaD/create-link/pull/7">https://github.com/kijimaD/create-link/pull/7</a>
</p>

 <blockquote>
 <p>
I like this package, is simple and useful.
</p>
</blockquote>

 <p>
審査にむけてやったこと。
</p>

 <ul class="org-ul"> <li>わかりやすいコンセプト。</li>
 <li>空気を読んだ動作をする、限られたインタフェース(create-link)という関数1つで、複数フォーマット・ブラウザに対応できる。</li>
 <li>ちゃんとドキュメントを用意した <a href="https://github.com/kijimaD/create-link">kijimaD/create-link</a></li>
 <li>オプションを用意した。フォーマットの種類やブラウザを増やすのは、とても簡単です。</li>
</ul></div>
</li>
</ul></div>
 <div id="outline-container-orge39825a" class="outline-4">
 <h4 id="orge39825a"> <a href="#orge39825a">ロードマップ</a></h4>
 <div class="outline-text-4" id="text-orge39825a">
 <p>
フォーマットリンクを取得するだけのシンプルなコードではありますが、拡張はいろいろ考えられます。
</p>
</div>
 <ul class="org-ul"> <li> <a id="org8947bcb"></a> <a href="#org8947bcb">入出力のバリエーションを増やす</a> <br></br> <ul class="org-ul"> <li> <a id="org4964dc2"></a> <a href="#org4964dc2"> <span class="done DONE">DONE</span> エクスポート形式増加 HTML,LaTeX,Markdown,MediaWiki,Org-mode</a> <br></br> <div class="outline-text-6" id="text-org4964dc2">
</div>
</li>
 <li> <a id="orgbd22dd6"></a> <a href="#orgbd22dd6"> <span class="done DONE">DONE</span> ユーザ定義のフィルター … chromeの拡張の方にはある</a> <br></br> <div class="outline-text-6" id="text-orgbd22dd6">
</div>
</li>
 <li> <a id="org8082c91"></a> <a href="#org8082c91"> <span class="done DONE">DONE</span> PDF(ページを取ることはできそう。リンクでページ番号を表現できるか)</a> <br></br> <div class="outline-text-6" id="text-org8082c91">
 <p>
やらない。
</p>
</div>
</li>
</ul></li>
 <li> <a id="org311e4ea"></a> <a href="#org311e4ea">コンテクストによる動作のバリエーションを増やす</a> <br></br> <ul class="org-ul"> <li> <a id="org2fe51b7"></a> <a href="#org2fe51b7"> <span class="done DONE">DONE</span> テキスト選択中だと、タイトルに選択したところを入れる</a> <br></br> <div class="outline-text-6" id="text-org2fe51b7">
</div>
</li>
 <li> <a id="org9f5726a"></a> <a href="#org9f5726a"> <span class="done DONE">DONE</span> 選択URLにアクセスして、Titleをスクレイピング。リンクを完成させる</a> <br></br> <div class="outline-text-6" id="text-org9f5726a">
</div>
</li>
 <li> <a id="orgb6fa2ea"></a> <a href="#orgb6fa2ea"> <span class="done DONE">DONE</span> 手動で形式選択できるように</a> <br></br> <div class="outline-text-6" id="text-orgb6fa2ea">
 <p>
helmから選べたらベスト。選択をどうやってやればいいのかよくわからない
org-roamのファイル選択で出てくるhelmなど参考になりそう。
</p>
</div>
</li>
 <li> <a id="org1f0f5c6"></a> <a href="#org1f0f5c6"> <span class="done DONE">DONE</span> とりあえず標準のcompletionだけ追加</a> <br></br> <div class="outline-text-6" id="text-org1f0f5c6">
</div>
</li>
 <li> <a id="org8f252ce"></a> <a href="#org8f252ce"> <span class="done DONE">DONE</span> checkdocをCIで走らせるようにする</a> <br></br> <div class="outline-text-6" id="text-org8f252ce">
 <p>
elisp-checkはcask環境のためうまくできない。
なので、elisp-check.elを直に読み込んで実行するようにすればよさそう。
</p>

 <p>
elisp-lintというパッケージに同梱されてたのでそれで一気にできるようになった。
</p>
</div>
</li>
 <li> <a id="org551a45f"></a> <a href="#org551a45f"> <span class="done DONE">DONE</span> テスト追加 + CI</a> <br></br> <div class="outline-text-6" id="text-org551a45f">
</div>
</li>
</ul></li>
 <li> <a id="org4a77e5d"></a> <a href="#org4a77e5d">ユーザの拡張性を増やす</a> <br></br> <ul class="org-ul"> <li> <a id="orgf6af5a0"></a> <a href="#orgf6af5a0"> <span class="done DONE">DONE</span> フックを追加…たとえばリンク生成 → {フック} → コピー前としておく。</a> <br></br> <div class="outline-text-6" id="text-orgf6af5a0">
 <p>
フックでは式が使えるのでなんでもできる。動的にタイムスタンプを加えたり、連番を振ったりとか。単なる文字列フィルターよりはるかに強力。誰かがもっと便利な使い方を編み出してくれる。
</p>

 <p>
make-formatと、message+killの前にフックを差し込むか。
でも、文字列を受け取れないからあまり意味ない気がしてきた。
フックはその処理に追加するというより、別の処理を差し込むためのものだ(ある関数を実行すると、別の全く関係ない)モードをオンにするとか。その意味でいうと、フックする処理はまったく思いつかない。
</p>
</div>
</li>
 <li> <a id="org356add4"></a> <a href="#org356add4"> <span class="done DONE">DONE</span> リンク変換</a> <br></br> <div class="outline-text-6" id="text-org356add4">
 <p>
別のフォーマットに変換するのもあっていいな。
すでに書式があるから、そこからURL, Titleを取り出せればいい。
</p>
 <ul class="org-ul"> <li>判定関数</li>
</ul> <p>
thing-at-pointの拡張だな。フォーマットリンク上にカーソルがある場合、タイトルとURLを取得して変換…。
どのフォーマットか判定できれば、タイトルとURLを取れる。
markdown-mode.elの(markdown-kill-thing-at-point)が参考になりそう。
</p>

 <p>
別に独自実装しなくても、各modeのregexpを使えばいいかな。いや、フル装備でめちゃくちゃ複雑だし、いろんな依存(5つも増えるのはさすがに…)があるので独自でやろう。
 <a href="https://ayatakesi.github.io/emacs/25.1/Regexps.html">https://ayatakesi.github.io/emacs/25.1/Regexps.html</a>
</p>
</div>
</li>
 <li> <a id="orge441e65"></a> <a href="#orge441e65"> <span class="done DONE">DONE</span> フォーマットごとの特殊ルールを追加する</a> <br></br> <div class="outline-text-6" id="text-orge441e65">
 <p>
たとえばlatexの場合、ファイルリンクにはプレフィクスrun:がつくらしい。
今のコードだとファイルリンクだという検知はget-informationでしかできないのでそこに書くしかない。
一般的関数に特定のファイルフォーマットの処理が挟まれると非常に醜い。
なので、最終的な個別変換を分離する。そうするとhtmlがついてないときはrunをつけるとか、好きに追加できるだろう。
</p>
</div>
</li>
 <li> <a id="org779f5db"></a> <a href="#org779f5db">Magit(Gitクライアント)の場合。(すでにGitHubリンクの生成はある)</a> <br></br> <div class="outline-text-6" id="text-org779f5db">
 <p>
 <code>git-link</code> の整形バージョン。
そこまではちょっとやりすぎ感。依存が増えすぎるのも微妙な感じか。でも欲しいよな…。
各PRまではいいけど、少なくともリポジトリのホームページくらいならいいかな。
</p>
</div>
</li>
 <li> <a id="org6fe9019"></a> <a href="#org6fe9019">シェルだったらカレントディレクトリを取る</a> <br></br> <div class="outline-text-6" id="text-org6fe9019">
 <p>
ブラウザみたく、変数が用意されてはない模様。まあこれについてはあまりいらないか。
パスを取得したいときはあるけど、それをhtmlリンクにしたいってあまりないしな。
</p>

 <p>
パスはdefault-directoryで取れる。
</p>
</div>
</li>
 <li> <a id="org5079ee8"></a> <a href="#org5079ee8">タイトルはないときバージョンを作るか</a> <br></br> <div class="outline-text-6" id="text-org5079ee8">
 <p>
つまりパスだけ。
主題とはずれる気がする。シェルとかだとタイトルの取りようがないのでこれを追加するのが必要。
</p>
</div>
</li>
 <li> <a id="org6ce08de"></a> <a href="#org6ce08de">Gitリポジトリのときは、相対ディレクトリを取得するオプション</a> <br></br> <div class="outline-text-6" id="text-org6ce08de">
 <p>
リポジトリからリンクを辿れるようになる。でもEmacs上でどうなんだろう。
辿れないけど、人にディレクトリを示すときには使える。今は絶対パスで取って前のを削除している。めんど
い。
うむむ。リモートリポジトリのURLがわかるなら意味はありそう。git-linkとあまり変わらないけどな。
git-linkのコードを見てるけど、まだあまりよくわからない。
</p>
</div>
</li>
 <li> <a id="orga760275"></a> <a href="#orga760275">ホームディレクトリを~で出すようにする</a> <br></br> <div class="outline-text-6" id="text-orga760275">
 <p>
今は  <code>/home/kijima...</code> で出てるからな。汎用性があまりよくない。あとで絶対変わるし、ほかで使えない。
</p>
</div>
</li>
 <li> <a id="orgd1ac422"></a> <a href="#orgd1ac422">実行関数を出力</a> <br></br> <div class="outline-text-6" id="text-orgd1ac422">
 <p>
たとえばivyのinfoページにいたとする。(info “ivy”) を出力する。
これを実行するとivyに飛べるので、リンクといえそう。環境も関係ない。
</p>

 <p>
infoバッファからの検索キーワードの割り出し方…
実行ディレクトリをdefault-directoryか何かで取る。(.*).infoというファイルがあるはずなのでそのファイル名をinfoの引数に渡す。
</p>
</div>
</li>
</ul></li>
 <li> <a id="orgf4a0dcc"></a> <a href="#orgf4a0dcc">まとめ</a> <br></br> <div class="outline-text-5" id="text-orgf4a0dcc">
 <ol class="org-ol"> <li>移植技を覚えました。要件が明確＋元ソースを読むことができると楽。プログラムに集中できて美味しい。</li>
 <li>ちょっとした不便さは少ないコードで解決できる。</li>
 <li>ごく単純なコンセプトでも、拡張の方向性は意外と多いです。</li>
</ol> <p>
おわり。
</p>
</div>
</li>
</ul></div>
</div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20210703105033-archive.html"/>
  <id>https://kijimad.github.io/roam/20210703105033-archive.html</id>
  <updated>2025-06-14T00:00:00+09:00</updated>
</entry>
<entry>
  <title>SQL</title>
  <author><name>root</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orgbac214a" class="outline-2">
 <h2 id="orgbac214a"> <a href="#orgbac214a">概要</a></h2>
 <div class="outline-text-2" id="text-orgbac214a">
 <p>
SQLは、データベースを操作するための言語。RDMS( <a href="20210829232020-mysql.html#ID-7dab097c-60ba-43b9-949f-c58bf3151aa8">MySQL</a>,  <a href="20210905195215-postgresql.html#ID-752d725e-b834-4784-8110-c58f89bd4fa2">PostgreSQL</a>)の種類によって実装・挙動が微妙に異なる。
</p>

 <ul class="org-ul"> <li>Wikipedia:  <a href="https://ja.wikipedia.org/wiki/SQL">https://ja.wikipedia.org/wiki/SQL</a></li>
</ul></div>
</div>
 <div id="outline-container-org046c7bd" class="outline-2">
 <h2 id="org046c7bd"> <a href="#org046c7bd">Tasks</a></h2>
 <div class="outline-text-2" id="text-org046c7bd">
</div>
 <div id="outline-container-orgf2b13d6" class="outline-3">
 <h3 id="orgf2b13d6"> <a href="#orgf2b13d6"> <span class="todo TODO">TODO</span> </a> <a href="https://www.oreilly.co.jp/books/9784873115894/">O’Reilly Japan - SQLアンチパターン</a></h3>
 <div class="outline-text-3" id="text-orgf2b13d6">
 <p>
データベース開発におけるアンチパターンを紹介している。
</p>
</div>
</div>
 <div id="outline-container-orge76f633" class="outline-3">
 <h3 id="orge76f633"> <a href="#orge76f633"> <span class="todo TODO">TODO</span> 達人に学ぶSQL 徹底指南書</a></h3>
 <div class="outline-text-3" id="text-orge76f633">
 <ul class="org-ul"> <li> <a href="https://www.amazon.co.jp/s?k=sql&__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&ref=nb_sb_noss">Amazon.co.jp : sql</a></li>
</ul></div>
</div>
 <div id="outline-container-orgb0a57d1" class="outline-3">
 <h3 id="orgb0a57d1"> <a href="#orgb0a57d1"> <span class="todo TODO">TODO</span> </a> <a href="https://www.amazon.co.jp/%E5%A4%B1%E6%95%97%E3%81%8B%E3%82%89%E5%AD%A6%E3%81%B6RDB%E3%81%AE%E6%AD%A3%E3%81%97%E3%81%84%E6%AD%A9%E3%81%8D%E6%96%B9-Software-Design-plus-%E6%9B%BD%E6%A0%B9/dp/4297104083">失敗から学ぶRDBの正しい歩き方 (Software Design plus) | 曽根 壮大 |本 | 通販 | Amazon</a></h3>
 <div class="outline-text-3" id="text-orgb0a57d1">
 <p>
アンチパターンを知っておくとよい。
</p>
</div>
</div>
</div>
 <div id="outline-container-org47cd67d" class="outline-2">
 <h2 id="org47cd67d"> <a href="#org47cd67d">Memo</a></h2>
 <div class="outline-text-2" id="text-org47cd67d">
</div>
 <div id="outline-container-org379aa93" class="outline-3">
 <h3 id="org379aa93"> <a href="#org379aa93">プロセス一覧を見る</a></h3>
 <div class="outline-text-3" id="text-org379aa93">
 <p>
SQLで、DB関連の情報を得ることができる。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 1: </span>プロセスの一覧を取得する</label> <pre class="src src-sql">show processlist;
</pre>
</div>
</div>
</div>
 <div id="outline-container-org3ee3903" class="outline-3">
 <h3 id="org3ee3903"> <a href="#org3ee3903">LinuxでのDB閲覧/操作ツール</a></h3>
 <div class="outline-text-3" id="text-org3ee3903">
 <p>
Macでは、Sequel Pro が多いはず。
Linuxでは、DBeaver が有力のよう。
</p>

 <p>
インストールページ。
 <a href="https://dbeaver.io/download/">Download | DBeaver Community</a>
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 2: </span>snapでダウンロード</label> <pre class="src src-shell">sudo snap install dbeaver-ce
</pre>
</div>

 <p>
↑snapだとバージョンが古く、エラーが出た。最初のローディング画面は出るが、それ以降が何も表示されない。
</p>
 <blockquote>
 <p>
org.eclipse.swt.SWTException: Graphic is disposed
</p>
</blockquote>

 <p>
↓このissueと同じ状況に見える。
 <a href="https://github.com/dbeaver/dbeaver/issues/8319">https://github.com/dbeaver/dbeaver/issues/8319</a>
</p>

 <p>
公式サイトからdebファイルをダウンロードして入れると、無事起動した。
 <a href="https://dbeaver.io/download/">Download | DBeaver Community</a>
</p>

 <ul class="org-ul"> <li>レコード編集機能がある
 <ul class="org-ul"> <li>表示レコードをそのままいじれる機能。</li>
 <li>DBeaverのほかにsqlelectronもいい感じだったのだが、カラムから編集できる機能がないのは致命的で使うのを見送った。</li>
</ul></li>
 <li>ER図を自動生成してくれる
 <ul class="org-ul"> <li>関連できたりできなかったりだが、最初から入ってるのはありがたい。</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org0232492" class="outline-3">
 <h3 id="org0232492"> <a href="#org0232492">正規表現</a></h3>
 <div class="outline-text-3" id="text-org0232492">
 <p>
 <code>~</code> で正規表現が使える。
</p>
 <div class="org-src-container">
 <pre class="src src-sql"> <span class="org-keyword">select</span> *
 <span class="org-keyword">from</span> customer
 <span class="org-keyword">where</span> status_cd ~  <span class="org-string">'^[A-F]'</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-org8d02d4f" class="outline-3">
 <h3 id="org8d02d4f"> <a href="#org8d02d4f">カラムにない項目で集計する</a></h3>
 <div class="outline-text-3" id="text-org8d02d4f">
 <p>
重複してださい方法。
</p>
 <div class="org-src-container">
 <pre class="src src-sql"> <span class="org-comment-delimiter">-- </span> <span class="org-comment">人口階級ごとに地方名に再分類する</span>
 <span class="org-keyword">SELECT</span>  <span class="org-keyword">CASE</span>  <span class="org-keyword">WHEN</span> population < 100  <span class="org-keyword">THEN</span>  <span class="org-string">'01'</span>
        <span class="org-keyword">WHEN</span> population >= 100  <span class="org-keyword">AND</span> population < 200  <span class="org-keyword">THEN</span>  <span class="org-string">'02'</span>
        <span class="org-keyword">WHEN</span> population >= 200  <span class="org-keyword">AND</span> population < 300  <span class="org-keyword">THEN</span>  <span class="org-string">'03'</span>
        <span class="org-keyword">WHEN</span> population >= 300  <span class="org-keyword">THEN</span>  <span class="org-string">'04'</span>
        <span class="org-keyword">ELSE</span>  <span class="org-keyword">NULL</span>  <span class="org-keyword">END</span>  <span class="org-keyword">AS</span> pop_class,
        <span class="org-builtin">COUNT</span>(*)  <span class="org-keyword">AS</span> cnt
   <span class="org-keyword">FROM</span> PopTbl
  <span class="org-keyword">GROUP</span>  <span class="org-keyword">BY</span>  <span class="org-keyword">CASE</span>  <span class="org-keyword">WHEN</span> population < 100  <span class="org-keyword">THEN</span>  <span class="org-string">'01'</span>
           <span class="org-keyword">WHEN</span> population >= 100  <span class="org-keyword">AND</span> population < 200  <span class="org-keyword">THEN</span>  <span class="org-string">'02'</span>
           <span class="org-keyword">WHEN</span> population >= 200  <span class="org-keyword">AND</span> population < 300  <span class="org-keyword">THEN</span>  <span class="org-string">'03'</span>
           <span class="org-keyword">WHEN</span> population >= 300  <span class="org-keyword">THEN</span>  <span class="org-string">'04'</span>
           <span class="org-keyword">ELSE</span>  <span class="org-keyword">NULL</span>  <span class="org-keyword">END</span>;
</pre>
</div>

 <p>
DBによっては名前をつけて参照できる。
</p>
 <div class="org-src-container">
 <pre class="src src-sql"> <span class="org-comment-delimiter">-- </span> <span class="org-comment">県名を地方名に分類する</span>
 <span class="org-keyword">SELECT</span>  <span class="org-keyword">CASE</span> pref_name
        <span class="org-keyword">WHEN</span>  <span class="org-string">'徳島'</span>  <span class="org-keyword">THEN</span>  <span class="org-string">'四国'</span>
        <span class="org-keyword">WHEN</span>  <span class="org-string">'香川'</span>  <span class="org-keyword">THEN</span>  <span class="org-string">'四国'</span>
        <span class="org-keyword">WHEN</span>  <span class="org-string">'愛媛'</span>  <span class="org-keyword">THEN</span>  <span class="org-string">'四国'</span>
        <span class="org-keyword">WHEN</span>  <span class="org-string">'高知'</span>  <span class="org-keyword">THEN</span>  <span class="org-string">'四国'</span>
        <span class="org-keyword">WHEN</span>  <span class="org-string">'福岡'</span>  <span class="org-keyword">THEN</span>  <span class="org-string">'九州'</span>
        <span class="org-keyword">WHEN</span>  <span class="org-string">'佐賀'</span>  <span class="org-keyword">THEN</span>  <span class="org-string">'九州'</span>
        <span class="org-keyword">WHEN</span>  <span class="org-string">'長崎'</span>  <span class="org-keyword">THEN</span>  <span class="org-string">'九州'</span>
        <span class="org-keyword">ELSE</span>  <span class="org-string">'その他'</span>  <span class="org-keyword">END</span>  <span class="org-keyword">AS</span> district,
        <span class="org-builtin">SUM</span>(population)
   <span class="org-keyword">FROM</span> PopTbl
  <span class="org-keyword">GROUP</span>  <span class="org-keyword">BY</span> district;
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgd2d5260" class="outline-3">
 <h3 id="orgd2d5260"> <a href="#orgd2d5260">条件を指定して集計する</a></h3>
 <div class="outline-text-3" id="text-orgd2d5260">
 <p>
where句で異なる条件を記述して2回SQLを発行するような場面。
</p>
 <div class="org-src-container">
 <pre class="src src-sql">   <span class="org-comment-delimiter">-- </span> <span class="org-comment">男性の人口</span>
 <span class="org-keyword">SELECT</span> pref_name,
       population
   <span class="org-keyword">FROM</span> PopTbl2
  <span class="org-keyword">WHERE</span> sex =  <span class="org-string">'1'</span>;

 <span class="org-comment-delimiter">-- </span> <span class="org-comment">女性の人口</span>
 <span class="org-keyword">SELECT</span> pref_name,
       population
   <span class="org-keyword">FROM</span> PopTbl2
  <span class="org-keyword">WHERE</span> sex =  <span class="org-string">'2'</span>;

</pre>
</div>

 <p>
case句で便利に書くとこう。
</p>
 <div class="org-src-container">
 <pre class="src src-sql"> <span class="org-keyword">SELECT</span> pref_name,
   <span class="org-comment-delimiter">-- </span> <span class="org-comment">男性の人口</span>
        <span class="org-builtin">SUM</span>( <span class="org-keyword">CASE</span>  <span class="org-keyword">WHEN</span> sex =  <span class="org-string">'1'</span>  <span class="org-keyword">THEN</span> population  <span class="org-keyword">ELSE</span> 0  <span class="org-keyword">END</span>)  <span class="org-keyword">AS</span> cnt_m,
   <span class="org-comment-delimiter">-- </span> <span class="org-comment">女性の人口</span>
        <span class="org-builtin">SUM</span>( <span class="org-keyword">CASE</span>  <span class="org-keyword">WHEN</span> sex =  <span class="org-string">'2'</span>  <span class="org-keyword">THEN</span> population  <span class="org-keyword">ELSE</span> 0  <span class="org-keyword">END</span>)  <span class="org-keyword">AS</span> cnt_f
   <span class="org-keyword">FROM</span> PopTbl2
  <span class="org-keyword">GROUP</span>  <span class="org-keyword">BY</span> pref_name;
</pre>
</div>
 <p>
SUM関数を必要性をチェックしてみる。
</p>
</div>
</div>
 <div id="outline-container-orge6c8f9f" class="outline-3">
 <h3 id="orge6c8f9f"> <a href="#orge6c8f9f">複数の列の条件関係を定義する</a></h3>
 <div class="outline-text-3" id="text-orge6c8f9f">
 <p>
CHECK制約。
</p>

 <p>
↓条件法。
</p>
 <div class="org-src-container">
 <pre class="src src-sql"> <span class="org-keyword">CONSTRAINT</span> check_salary  <span class="org-keyword">CHECK</span>
  ( <span class="org-keyword">CASE</span>  <span class="org-keyword">WHEN</span> sex =  <span class="org-string">'2'</span>
     <span class="org-keyword">THEN</span>  <span class="org-keyword">CASE</span>  <span class="org-keyword">WHEN</span> salary <= 200000
       <span class="org-keyword">THEN</span> 1  <span class="org-keyword">ELSE</span> 0  <span class="org-keyword">END</span>
   <span class="org-keyword">ELSE</span> 1  <span class="org-keyword">END</span> = 1)
</pre>
</div>

 <p>
↓論理積。
</p>
 <div class="org-src-container">
 <pre class="src src-sql"> <span class="org-keyword">CONSTRAINT</span> CHECK_salary  <span class="org-keyword">CHECK</span>
  (sex =  <span class="org-string">'2'</span>  <span class="org-keyword">AND</span> salary <= 200000)
</pre>
</div>

 <p>
条件法はゆるい。
</p>
</div>
</div>
 <div id="outline-container-org7be4656" class="outline-3">
 <h3 id="org7be4656"> <a href="#org7be4656">UPDATEの順番で結果が変わるとき</a></h3>
 <div class="outline-text-3" id="text-org7be4656">
 <p>
1回目のupdateをした結果、2回目の条件に入ってしまうような場合。
caseをつかって1度に処理しないといけない。
</p>
 <div class="org-src-container">
 <pre class="src src-sql"> <span class="org-keyword">UPDATE</span> Personnel
    <span class="org-keyword">SET</span> salary =  <span class="org-keyword">CASE</span>  <span class="org-keyword">WHEN</span> salary >= 300000
        <span class="org-keyword">THEN</span> salary * 0.9
        <span class="org-keyword">WHEN</span> salary >= 250000  <span class="org-keyword">AND</span> salary < 280000
        <span class="org-keyword">THEN</span> salary * 1.2
        <span class="org-keyword">ELSE</span> salary  <span class="org-keyword">END</span>;
</pre>
</div>

 <p>
主キーを入れ替えることもできる。普通にUPDATE3回だと退避させる必要があるが、whenだと一気にできる。
</p>
 <div class="org-src-container">
 <pre class="src src-sql"> <span class="org-comment-delimiter">-- </span> <span class="org-comment">CASE式で主キーを入れ替える</span>
 <span class="org-keyword">UPDATE</span> SomeTable
    <span class="org-keyword">SET</span> p_key =  <span class="org-keyword">CASE</span>  <span class="org-keyword">WHEN</span> p_key =  <span class="org-string">'a'</span>
        <span class="org-keyword">THEN</span>  <span class="org-string">'b'</span>
        <span class="org-keyword">WHEN</span> p_key =  <span class="org-string">'b'</span>
        <span class="org-keyword">THEN</span>  <span class="org-string">'a'</span>
        <span class="org-keyword">ELSE</span> p_key  <span class="org-keyword">END</span>
        <span class="org-keyword">WHERE</span> p_key  <span class="org-keyword">IN</span> ( <span class="org-string">'a'</span>,  <span class="org-string">'b'</span>);
</pre>
</div>
</div>
</div>
</div>
 <div id="outline-container-org7b53bcf" class="outline-2">
 <h2 id="org7b53bcf"> <a href="#org7b53bcf">Refences</a></h2>
 <div class="outline-text-2" id="text-org7b53bcf">
</div>
 <div id="outline-container-org4a4404c" class="outline-3">
 <h3 id="org4a4404c"> <a href="#org4a4404c"></a> <a href="https://use-the-index-luke.com/">SQL Indexing and Tuning e-Book for developers: Use The Index, Luke covers Oracle, MySQL, PostgreSQL, SQL Server, …</a></h3>
 <div class="outline-text-3" id="text-org4a4404c">
 <p>
データベースのパフォーマンスの説明。
</p>
</div>
</div>
 <div id="outline-container-orgbdb4811" class="outline-3">
 <h3 id="orgbdb4811"> <a href="#orgbdb4811"></a> <a href="https://sqlzoo.net/wiki/SQL_Tutorial">SQLZOO</a></h3>
 <div class="outline-text-3" id="text-orgbdb4811">
 <p>
SQLの練習ができるサイト。
</p>
</div>
</div>
 <div id="outline-container-orgd01b981" class="outline-3">
 <h3 id="orgd01b981"> <a href="#orgd01b981"></a> <a href="https://data.world/">data.world | The Cloud-Native Data Catalog</a></h3>
 <div class="outline-text-3" id="text-orgd01b981">
 <p>
サンプルのデータを使って、SQLの練習ができる。
</p>
</div>
</div>
</div>
 <div id="outline-container-org111e13f" class="outline-2">
 <h2 id="org111e13f"> <a href="#org111e13f">Backlinks</a></h2>
 <div class="outline-text-2" id="text-org111e13f">
 <ul class="org-ul"> <li> <a href="./20210508234743-emacs.html">Emacs</a></li>
 <li> <a href="./20210509095946-rails.html">Rails</a></li>
 <li> <a href="./20210829232020-mysql.html">MySQL</a></li>
 <li> <a href="./20211002090535-100knocks.html">100knocks</a></li>
 <li> <a href="./20211030122204-graphql.html">GraphQL</a></li>
 <li> <a href="./20220806135724-rdbms.html">RDBMS</a></li>
 <li> <a href="./20250501T192423--kdoc-355-プログラミングを仕事の梃子として使うとよい__essay.html">KDOC 355: プログラミングを仕事の梃子として使うとよい</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20210725100835-sql.html"/>
  <id>https://kijimad.github.io/roam/20210725100835-sql.html</id>
  <updated>2025-06-14T00:00:00+09:00</updated>
</entry>
<entry>
  <title>Python</title>
  <author><name>root</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orgae27052" class="outline-2">
 <h2 id="orgae27052"> <a href="#orgae27052">概要</a></h2>
 <div class="outline-text-2" id="text-orgae27052">
 <p>
Pythonは科学方面に強みを持った <a href="20210509101246-programming_language.html#ID-868ac56a-2d42-48d7-ab7f-7047c85a8f39">Programming Language</a>。
機械学習、グラフ描画、に大きなエコシステムを持っている。
</p>
</div>
</div>
 <div id="outline-container-orgd0642d7" class="outline-2">
 <h2 id="orgd0642d7"> <a href="#orgd0642d7">Memo</a></h2>
 <div class="outline-text-2" id="text-orgd0642d7">
</div>
 <div id="outline-container-org48a5e8b" class="outline-3">
 <h3 id="org48a5e8b"> <a href="#org48a5e8b">tkinterがインストールできないとき</a></h3>
 <div class="outline-text-3" id="text-org48a5e8b">
 <p>
tkinterはGUIアプリケーションを開発するためのライブラリ。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 1: </span>インストールしようとする</label> <pre class="src src-shell">pip3 install tkinter
</pre>
</div>

 <p>
すると、よくわからないエラー。
</p>

 <blockquote>
 <p>
ERROR: Could not find a version that satisfies the requirement tkinter (from versions: none)
ERROR: No matching distribution found for tkinter
</p>
</blockquote>

 <ul class="org-ul"> <li> <a href="https://stackoverflow.com/questions/39928710/why-is-there-no-tkinter-distribution-found">https://stackoverflow.com/questions/39928710/why-is-there-no-tkinter-distribution-found</a></li>
</ul> <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 2: </span>aptでインストールする</label> <pre class="src src-shell">apt-get install python3-tk
</pre>
</div>
</div>
</div>
 <div id="outline-container-org3433ca5" class="outline-3">
 <h3 id="org3433ca5"> <a href="#org3433ca5">AttributeError: ’module’ object has no attribute ’randint’ の解決法</a></h3>
 <div class="outline-text-3" id="text-org3433ca5">
 <p>
random.pyという名前のファイルで、randomをインポートすると発生する。ファイル名と同じパッケージをインポートはできない。どちらかの名前を変える。
</p>
</div>
</div>
 <div id="outline-container-orgb39ce69" class="outline-3">
 <h3 id="orgb39ce69"> <a href="#orgb39ce69">requirements.txt とは</a></h3>
 <div class="outline-text-3" id="text-orgb39ce69">
 <p>
requirements.txtはライブラリ管理のために書くファイル。
書いたものがインストールされる。バージョン指定も可能。このように書いておくことで、簡単にライブラリ状況を再現できる。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 3: </span>requirements.txt</label> <pre class="src src-nil">scipy
networkx
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 4: </span>書いたものをインストール</label> <pre class="src src-python">pip3 install  <span class="org-operator">-</span>r requirements.txt
</pre>
</div>
</div>
</div>
 <div id="outline-container-org9eed662" class="outline-3">
 <h3 id="org9eed662"> <a href="#org9eed662">pipをインストールする</a></h3>
 <div class="outline-text-3" id="text-org9eed662">
 <div class="org-src-container">
 <pre class="src src-python">pyenv install  <span class="org-operator">--</span> <span class="org-builtin">list</span>
pyenv install 3.5.4
pyenv  <span class="org-keyword">global</span> 3.5.4

pip install pandas sqlalchemy psycopg2
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgfd54174" class="outline-3">
 <h3 id="orgfd54174"> <a href="#orgfd54174">開発用webサーバを起動する</a></h3>
 <div class="outline-text-3" id="text-orgfd54174">
 <p>
webサーバ立ち上げ。デフォルトで入っている＋コマンドが短いので試すのに便利。
</p>
 <div class="org-src-container">
 <pre class="src src-python">python  <span class="org-operator">-</span>m http.server 8000
</pre>
</div>
</div>
</div>
</div>
 <div id="outline-container-org38b75e6" class="outline-2">
 <h2 id="org38b75e6"> <a href="#org38b75e6">Tasks</a></h2>
 <div class="outline-text-2" id="text-org38b75e6">
</div>
 <div id="outline-container-orgba45578" class="outline-3">
 <h3 id="orgba45578"> <a href="#orgba45578"> <span class="done DONE">DONE</span> </a> <a href="https://kaityo256.github.io/python_zero/howtowork/index.html">Pythonが動く仕組み</a></h3>
 <div class="outline-text-3" id="text-orgba45578">
 <p>
仕組み。
</p>

 <ul class="org-ul"> <li>機械語は、現実に存在する機械で動作するが、バイトコードは仮想的な機械向けの機械語である
 <ul class="org-ul"> <li>どちらも雑に同じものと認識していたがややこしいので区別する</li>
</ul></li>
 <li>スタックマシンは命令セットが単純になるというメリットがある</li>
</ul></div>
</div>
 <div id="outline-container-orgd07e359" class="outline-3">
 <h3 id="orgd07e359"> <a href="#orgd07e359"> <span class="todo TODO">TODO</span> </a> <a href="https://rogueliketutorials.com/">Welcome to the Roguelike Tutorial Revised | Roguelike Tutorials</a></h3>
 <div class="outline-text-3" id="text-orgd07e359">
 <p>
Pythonによるroguelikeチュートリアル。
</p>
</div>
</div>
</div>
 <div id="outline-container-org2b0a911" class="outline-2">
 <h2 id="org2b0a911"> <a href="#org2b0a911">References</a></h2>
</div>
 <div id="outline-container-orge15b7d4" class="outline-2">
 <h2 id="orge15b7d4"> <a href="#orge15b7d4">Archives</a></h2>
 <div class="outline-text-2" id="text-orge15b7d4">
</div>
 <div id="outline-container-org7970c75" class="outline-3">
 <h3 id="org7970c75"> <a href="#org7970c75"> <span class="done DONE">DONE</span> </a> <a href="https://www.amazon.co.jp/Python%E3%81%A7%E3%81%A4%E3%81%8F%E3%82%8B-%E3%82%B2%E3%83%BC%E3%83%A0%E9%96%8B%E7%99%BA-%E5%85%A5%E9%96%80%E8%AC%9B%E5%BA%A7-%E5%BB%A3%E7%80%AC-%E8%B1%AA-ebook/dp/B07VD7BTRN/ref=tmm_kin_swatch_0?_encoding=UTF8&qid=&sr=">Amazon.co.jp: Pythonでつくる ゲーム開発 入門講座 eBook : 廣瀬 豪: 本</a></h3>
 <div class="outline-text-3" id="text-org7970c75">
 <p>
pythonによるやさしいゲーム開発入門。
</p>
</div>
</div>
</div>
 <div id="outline-container-org58af97a" class="outline-2">
 <h2 id="org58af97a"> <a href="#org58af97a">Backlinks</a></h2>
 <div class="outline-text-2" id="text-org58af97a">
 <ul class="org-ul"> <li> <a href="./20210509095513-ruby.html">Ruby</a></li>
 <li> <a href="./20210615222732-project.html">project</a></li>
 <li> <a href="./20210817003906-history.html">History</a></li>
 <li> <a href="./20210911104632-c_language.html">C言語</a></li>
 <li> <a href="./20210922013555-qutebrowser.html">qutebrowser</a></li>
 <li> <a href="./20210926150327-oss.html">OSS</a></li>
 <li> <a href="./20211002090535-100knocks.html">100knocks</a></li>
 <li> <a href="./20240531T103824--kdoc-180-『最短コースでわかる-pytorch-＆深層学習プログラミング』__book.html">KDOC 180: 『最短コースでわかる PyTorch ＆深層学習プログラミング』</a></li>
 <li> <a href="./index.html">Insomnia</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20210725134208-python.html"/>
  <id>https://kijimad.github.io/roam/20210725134208-python.html</id>
  <updated>2025-06-14T00:00:00+09:00</updated>
</entry>
<entry>
  <title>Docker</title>
  <author><name>root</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org45df729" class="outline-2">
 <h2 id="org45df729"> <a href="#org45df729">概要</a></h2>
 <div class="outline-text-2" id="text-org45df729">
 <p>
Dockerはパフォーマンスに優れた仮想環境を作るプログラム。
得られる可搬性によって、作成したイメージを開発における各ステージ(テスト、ビルド、リリース…)で適用できるようになる。
その意味で <a href="20220212141124-ci.html#ID-eaf6ed04-7927-4a16-ba94-fbb9f6e76166">CI</a>,  <a href="20220212141243-cd.html#ID-2c4cb3a7-7a8a-4a3b-88c2-2c5e69515764">CD</a>の基礎的な技術となっている。
</p>
</div>
</div>
 <div id="outline-container-org4e5f158" class="outline-2">
 <h2 id="org4e5f158"> <a href="#org4e5f158">Memo</a></h2>
 <div class="outline-text-2" id="text-org4e5f158">
</div>
 <div id="outline-container-org1428fee" class="outline-3">
 <h3 id="org1428fee"> <a href="#org1428fee">バインドマウント先を削除した場合の挙動</a></h3>
 <div class="outline-text-3" id="text-org1428fee">
 <p>
バインドマウントしているディレクトリをまるごと削除すると、後からそこにディレクトリをおいても中身がバインドされないことに気づいた。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 1: </span>ファイル構成。lsするとaaaとbbbだけが見える状態</label> <pre class="src src-nil">- ワーキングディレクトリ
  - aaa(ディレクトリ)
    - test1(ファイル)
    - test2(ファイル)
  - bbb(ディレクトリ)
    - test1(ファイル)
    - test2(ファイル)
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 2: </span>検証用のコンテナを起動する</label> <pre class="src src-shell">docker run -d -it --name devtest --mount  <span class="org-variable-name">type</span>=bind, <span class="org-variable-name">source</span>= <span class="org-string">"$(pwd)"</span>/aaa, <span class="org-variable-name">target</span>=/aaa nginx:latest
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 3: </span>検証方法</label> <pre class="src src-shell">docker inspect devtest
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 4: </span>コンテナに入って見えることを確認する</label> <pre class="src src-shell">  $ docker exec -it devtest /bin/sh

  > cd /app
  > ls
test1 test2
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 5: </span>バインドマウントしているディレクトリをホストマシンから削除する</label> <pre class="src src-shell">$ rm -rf /tmp/aaa
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 6: </span>ホストマシンから消したので、コンテナからも見えない</label> <pre class="src src-shell">  $ docker exec -it devtest /bin/sh

  > cd /app
  > ls
(何も出ない)
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 7: </span>削除したディレクトリと中身を復活させる</label> <pre class="src src-shell">$ cp -r /tmp/bbb /tmp/aaa
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 8: </span>ホストマシンには復活しているが、コンテナ内には戻らない</label> <pre class="src src-shell">  $ docker exec -it devtest /bin/sh

  > cd /ap
  > ls
(何も出ない)
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 9: </span>inspect結果は削除前と変わらない</label> <pre class="src src-shell">docker inspect devtest
</pre>
</div>

 <p>
- <a href="https://github.com/moby/moby/issues/15793#issuecomment-135411504"> File mount does not update with changes from host · Issue #15793 · moby/moby</a>
</p>

 <p>
バインドマウントはinodeで一致しているかで同期を管理しているという。新しく作る場合はinodeが変わるので同期されなくなる。
</p>

 <ul class="org-ul"> <li>mvだとinodeが変わらない。のでバインドマウントをし続けられる。そのシェルセッションで何もしていなくても、別で名前を変えても追従し、ワーキングディレクトリは変わることがある</li>
 <li>cpだとinodeが変わる。のでバインドマウントの同期が切れ、同じ名前のディレクトリを配置しても同期はされない</li>
</ul> <p>
 <code>docker-compose restart</code> するとまたバインドマウントされるようになった。
</p>
</div>
</div>
 <div id="outline-container-orgdcfdd2a" class="outline-3">
 <h3 id="orgdcfdd2a"> <a href="#orgdcfdd2a">サービス名をつけると管理が便利</a></h3>
 <div class="outline-text-3" id="text-orgdcfdd2a">
 <p>
サービス名をつけて起動すると、名前を指定して止めることもできるようになる。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 10: </span>サービスに名前をつけて起動する</label> <pre class="src src-shell">docker run -d -p 80:80 --name webserver nginx
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 11: </span>名前を指定して止める</label> <pre class="src src-shell">docker stop webserver
</pre>
</div>
</div>
</div>
 <div id="outline-container-orge7825eb" class="outline-3">
 <h3 id="orge7825eb"> <a href="#orge7825eb">Docker本体のビルド方法</a></h3>
 <div class="outline-text-3" id="text-orge7825eb">
 <ul class="org-ul"> <li> <a href="https://github.com/moby/moby">moby/moby: Moby Project</a></li>
 <li>手元にcloneしている前提</li>
</ul> <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 12: </span>生成</label> <pre class="src src-shell">sudo make build  <span class="org-comment-delimiter"># </span> <span class="org-comment">environment</span>
sudo make binary  <span class="org-comment-delimiter"># </span> <span class="org-comment">binary</span>
sudo chown -R $ <span class="org-variable-name">USER</span>:$ <span class="org-variable-name">USER</span> .  <span class="org-comment-delimiter"># </span> <span class="org-comment">なくてもいい</span>
</pre>
</div>

 <p>
すると、bundles化に実行ファイルが生成される。あとはビルドしたものでデーモンを起動する。
</p>

 <div class="org-src-container">
 <pre class="src src-shell">sudo service docker stop  <span class="org-comment-delimiter"># </span> <span class="org-comment">現状デーモン停止</span>
sudo ./bundles/binary-daemon/dockerd
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgfc3841a" class="outline-3">
 <h3 id="orgfc3841a"> <a href="#orgfc3841a">docker buildのデバッグ</a></h3>
 <div class="outline-text-3" id="text-orgfc3841a">
 <p>
buildでどこまで成功しているかを確かめるために、コマンドを仕込みたいことがある。デフォルトでは出力されないので、オプションが必要。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 13: </span>–progress plainを使う。キャッシュがあると実行されない</label> <pre class="src src-shell">docker build . --progress plain --no-cache -t test
</pre>
</div>
</div>
</div>
 <div id="outline-container-org95c4e39" class="outline-3">
 <h3 id="org95c4e39"> <a href="#org95c4e39">ログを追従させる</a></h3>
 <div class="outline-text-3" id="text-org95c4e39">
 <div class="org-src-container">
 <pre class="src src-shell">docker-compose logs -f
</pre>
</div>

 <p>
-dオプションはログが出ないので使ってこなかった。これによって卒業できる。
</p>
</div>
</div>
 <div id="outline-container-orgc8bf195" class="outline-3">
 <h3 id="orgc8bf195"> <a href="#orgc8bf195">ボリュームとマウントの違い</a></h3>
 <div class="outline-text-3" id="text-orgc8bf195">
 <dl class="org-dl"> <dt>ボリューム</dt> <dd>データを永続化できる場所のこと</dd>
 <dt>マウント</dt> <dd>コンテナにホストのディレクトリをマウントすること</dd>
</dl> <p>
ボリュームはマウントしないと、使えるようにはならない。docker-composeのvolumesではボリュームといいつつ書き方によってマウントしてくれる。
</p>

 <ul class="org-ul"> <li> <a href="https://qiita.com/gounx2/items/23b0dc8b8b95cc629f32">Docker、ボリューム(Volume)について真面目に調べた - Qiita</a></li>
</ul></div>
</div>
 <div id="outline-container-orgfe1a4bd" class="outline-3">
 <h3 id="orgfe1a4bd"> <a href="#orgfe1a4bd">コンテナからホストのポートにアクセスできるようにする</a></h3>
 <div class="outline-text-3" id="text-orgfe1a4bd">
 <p>
docker-composeでコンテナ側からホストのポートへアクセスできるようにする方法。
</p>

 <div class="org-src-container">
 <pre class="src src-yaml">container:
  extra_hosts:
    - "host.docker.internal:host-gateway"
</pre>
</div>

 <p>
あとはコンテナ内のコード側で、  <code>host.docker.internal:{ホストのポート番号}</code> とすることでホストのポートへアクセスできるようになる。
</p>
</div>
</div>
 <div id="outline-container-org3efd40b" class="outline-3">
 <h3 id="org3efd40b"> <a href="#org3efd40b">dockerネットワークの仕組み    <span class="tag"> <span class="DontKnow">DontKnow</span></span></a></h3>
 <div class="outline-text-3" id="text-org3efd40b">
 <ul class="org-ul"> <li> <a href="https://www.youtube.com/watch?v=bKFMS5C4CG0">Docker networking is CRAZY!! (you NEED to learn it) - YouTube</a></li>
</ul></div>
</div>
 <div id="outline-container-orgcd951c2" class="outline-3">
 <h3 id="orgcd951c2"> <a href="#orgcd951c2">Got permission deniedエラー</a></h3>
 <div class="outline-text-3" id="text-orgcd951c2">
 <p>
dockerがsudo権限以外で実行できなくなるときがある。
</p>

 <blockquote>
 <p>
$ docker ps
Got permission denied while trying to connect to the Docker daemon socket
</p>
</blockquote>

 <p>
これはログイン中のユーザがdocker権限を持っていないから。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 14: </span>ログイン中のユーザにdocker権限をセットする</label> <pre class="src src-shell">sudo gpasswd -a $(whoami) docker
id $(whoami)  <span class="org-comment-delimiter"># </span> <span class="org-comment">dockerが追加されたのを確認する</span>
</pre>
</div>

 <p>
コマンドを実行したあと、ログアウトする。sudoなしでdockerコマンドを打てるようになっている。
</p>

 <ul class="org-ul"> <li> <a href="https://tech.librastudio.co.jp/entry/index.php/2018/07/14/post-1924/">dockerコマンド実行時の「Got permission denied while trying to connect to the Docker daemon socket」 - Libra Studio Log</a></li>
</ul></div>
</div>
 <div id="outline-container-org363539a" class="outline-3">
 <h3 id="org363539a"> <a href="#org363539a"></a> <a href="20220427215330-github_actions.html#ID-2d35ac9e-554a-4142-bba7-3c614cbfe4c4">GitHub Actions</a>でビルドする</h3>
 <div class="outline-text-3" id="text-org363539a">
 <p>
 <a href="20220212141124-ci.html#ID-eaf6ed04-7927-4a16-ba94-fbb9f6e76166">CI</a>によるコンテナビルドには、–cache-from を使って、レジストリに送信したイメージから各ステージのキャッシュを取得していく方法と、CIのキャッシュ機能を使う方法の2つがある。
</p>

 <p>
レジストリからキャッシュを取る方法には弱点がある。
</p>

 <ul class="org-ul"> <li>キャッシュが登録イメージの1つしかない。たとえば異なるブランチでキャッシュが更新されると、キャッシュが失われる</li>
 <li>–mount=type=…のcacheが、pushイメージには含まれない</li>
 <li>ステージごとにキャッシュ通信(取得+送信)をするが、オーバーヘッドが大きい</li>
 <li>イメージに含めることができるキャッシュ(inline cache)には、minモードしか適用できない。つまりキャッシュに制限がある <a href="https://github.com/moby/buildkit#--export-cache-options">moby/buildkit: concurrent, cache-efficient, and Dockerfile-agnostic builder toolkit</a></li>
</ul> <p>
のため、CIのキャッシュ機能を使うのが現実的か。複数のキャッシュ…ブランチごと、Gemfileのハッシュ値ごとでハッシュを保持できるためキャッシュがヒットしやすい。キャッシュはひとまとめで保存され、レジストリへの送信イメージは利用イメージだけになる。
</p>
</div>
</div>
 <div id="outline-container-org8b0b702" class="outline-3">
 <h3 id="org8b0b702"> <a href="#org8b0b702">RUN –mount=type=…オプション</a></h3>
 <div class="outline-text-3" id="text-org8b0b702">
 <p>
ビルド時にだけアクセスできる、cacheマウントを利用できる。マウントと言うが、ホストマシンとは関係ない。マウントディレクトリはビルド後削除されるため、イメージサイズにも優しい。
 <a href="https://github.com/moby/buildkit/blob/master/frontend/dockerfile/docs/syntax.md">https://github.com/moby/buildkit/blob/master/frontend/dockerfile/docs/syntax.md</a>
</p>

 <div class="org-src-container">
 <pre class="src src-nil">RUN --mount=type=cache,target=/root/.cache/go-build go build
</pre>
</div>

 <p>
たとえばpackage.jsonに変更があったときも途中から再開できる。ビルドキャッシュがヒットする/しないのゼロイチでなくなる。
</p>
</div>
</div>
 <div id="outline-container-orgaac9fd3" class="outline-3">
 <h3 id="orgaac9fd3"> <a href="#orgaac9fd3">rake assets:precompile高速化</a></h3>
 <div class="outline-text-3" id="text-orgaac9fd3">
 <ul class="org-ul"> <li>public/assets</li>
 <li>tmp/cache/assets</li>
</ul> <p>
をキャッシュしておくことで高速化できる。
</p>
</div>
</div>
 <div id="outline-container-org456fe30" class="outline-3">
 <h3 id="org456fe30"> <a href="#org456fe30">ビルドキャッシュをレジストリに保存し、CI環境でキャッシュを使ってビルドする</a></h3>
 <div class="outline-text-3" id="text-org456fe30">
 <p>
レジストリのキャッシュを利用してビルドできる。これによって、キャッシュがローカル環境に保持されない <a href="20220212141124-ci.html#ID-eaf6ed04-7927-4a16-ba94-fbb9f6e76166">CI</a>環境などでもキャッシュを利用して高速にビルドできる。
</p>

 <p>
ポイントは–build-argと–cache-from。
–build-argでメタ情報を含めてビルドする。このイメージをpushしておくことで、次回からキャッシュを利用できる。
–cache-fromによってレジストリにある指定イメージからキャッシュを取得してビルドする。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 15: </span>–cache-from と –build-arg BUILDKIT_INLINE_CACHE=1</label> <pre class="src src-shell">docker build --target build -t ghcr.io/kijimad/roam-build:master --cache-from ghcr.io/kijimad/roam-build:master --build-arg  <span class="org-variable-name">BUILDKIT_INLINE_CACHE</span>=1 .
docker push ghcr.io/kijimad/roam-build:master
</pre>
</div>
</div>
</div>
 <div id="outline-container-org63fb0fa" class="outline-3">
 <h3 id="org63fb0fa"> <a href="#org63fb0fa">本番用yarn buildの例</a></h3>
 <div class="outline-text-3" id="text-org63fb0fa">
 <p>
本番用にコンパクトにビルドする場合の例。
node_modulesはいらなくて、ビルド成果物だけあればよい。
ステージを分けることで、意味が明確になり、サイズも小さくできる(高速化)。
</p>

 <div class="org-src-container">
 <pre class="src src-dockerfile">COPY package.json $HOME/
COPY front/ $HOME/front/ # front にはビルド対象のjs, tsファイルが配置されている想定。サブモジュールを導入している場合、package.jsonは階層上に複数あるため、COPYしておく必要がある

RUN npm install

COPY babel.config.js $HOME/
COPY tsconfig.json $HOME/
COPY webpack.config.js $HOME/

RUN yarn run build
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 16: </span>ビルド成果物だけを配置</label> <pre class="src src-dockerfile">COPY --from=rails-yarn-build $HOME/public/webpack/ $HOME/public/webpack/
</pre>
</div>
</div>
</div>
 <div id="outline-container-orge3d501b" class="outline-3">
 <h3 id="orge3d501b"> <a href="#orge3d501b">Rails開発のMy docker-compose</a></h3>
 <div class="outline-text-3" id="text-orge3d501b">
 <p>
 <a href="20210509095946-rails.html#ID-e04aa1a3-509c-45b2-ac64-53d69c961214">Rails</a>開発をすべてdockerでやる想定。
一発ですべてが準備され、クリーンな環境を構築する。bundle install やyarn install など、立ち上げ続ける前提でないコマンドも含まれる。そのコマンドだけ再度実行したいときは  <code>docker-compose restart bundle</code> などとする。
</p>

 <p>
元ネタ: foremのdocker-compose.yml。
</p>
 <ul class="org-ul"> <li> <a href="https://github.com/forem/forem">https://github.com/forem/forem</a></li>
</ul> <p>
↓あとはdockerizeを設定すれば完璧か。
</p>
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 17: </span>docker-compose.yml</label> <pre class="src src-yaml"># 共通のimage名: app
# imageのワーキングディレクトリ: /app
version: '3.7'

services:
  mysql:
    image: mysql:latest
    ports:
      - '${MYSQL_PORT:-3306}:3306'
    environment:
      # DBクライアントでの接続時に必要なので明示する
      MYSQL_DATABASE: develop
      MYSQL_ROOT_PASSWORD: root
      MYSQL_USER: user
      MYSQL_PASSWORD: password
      MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'
    volumes:
      - 'mysql-data:/var/lib/mysql'

  redis:
    image: redis:latest
    ports:
      - '${REDIS_PORT:-6379}:6379'

  memcached:
    image: memcached:latest
    ports:
      - '${MEMCACHED_PORT:-11212}:11211'

  rails:
    image: app
    environment:
      RAILS_ENV: development
      REDIS_URL: 'redis://redis:6379'
      MEMCACHED: 'memcached:11211'
      DATABASE_URL: 'mysql2://root@mysql:3306'
    depends_on:
      - mysql
      - redis
      - memcached
      - bundle
      - yarn
      - seed
    command: bash -c 'bundle exec rails s -b 0.0.0.0'
    volumes:
      - .:/app:delegated # delegatedで高速化
      - gem_data:/usr/local/bundle:delegated # package系は永続化して最初からinstallにならないようにする
      - node_modules:/app/node_modules:delegated
    ports:
      - '3000:3000'

  webpack:
    image: app
    environment:
      NODE_ENV: development
      WEBPACKER_DEV_SERVER_HOST: 0.0.0.0
    command: bash -c 'yarn watch'
    volumes:
      - .:/app:delegated
      - node_modules:/app/node_modules:delegated
    ports:
      - 8080:8080

  sidekiq:
    image: app
    command: bash -c 'bundle exec sidekiq -C config/sidekiq.yml'
    environment:
      REDIS_URL: 'redis://redis:6379'
      DATABASE_URL: 'mysql2://root@mysql:3306'
    volumes:
      - .:/app:delegated
      - gem_data:/usr/local/bundle:delegated
    links:
      - mysql
      - redis

  bundle:
    image: app
    environment:
      RAILS_ENV: development
    volumes:
      - .:/app:delegated
      - gem_data:/usr/local/bundle:delegated
    command: bash -c "bundle install --jobs 8" # マシンがいくつ並列処理できるかは`$ getconf _NPROCESSORS_ONLN` で調べられる

  yarn:
    image: app
    environment:
      NODE_ENV: development
    volumes:
      - .:/app:delegated
      - node_modules:/app/node_modules:delegated
    command: bash -c "yarn install"

  seed:
    image: app
    environment:
      DATABASE_URL: 'mysql2://root@mysql:3306'
    volumes:
      - .:/app:delegated
      - gem_data:/usr/local/bundle:delegated
    command: bash -c "rake db:seed_fu"

volumes:
  gem_data:
  node_modules:
  mysql_data:
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 18: </span>entrypoint.sh</label> <pre class="src src-shell"> <span class="org-comment-delimiter">#</span> <span class="org-comment">! /bin/</span> <span class="org-keyword">bash</span>

 <span class="org-builtin">set</span> -e

 <span class="org-keyword">if</span> [ -f tmp/pids/server.pid ];  <span class="org-keyword">then</span>
  rm -f tmp/pids/server.pid
 <span class="org-keyword">fi</span>

cat << EOF

 <span class="org-sh-heredoc">  ░░▄████████████▄▐█▄▄▄▄█▌░</span>
 <span class="org-sh-heredoc">  ░░████████████████▌▀▀██▀▀░░</span>
 <span class="org-sh-heredoc">  ░░████▄████████████▄▄█▌░░░░</span>
 <span class="org-sh-heredoc">  ░░▄▄▄▄▄██████████████▀ ░░░░</span>

 <span class="org-sh-heredoc">EOF</span>

 <span class="org-keyword">exec</span>  <span class="org-string">"$@"</span>

</pre>
</div>
</div>
</div>
 <div id="outline-container-org2a39bd8" class="outline-3">
 <h3 id="org2a39bd8"> <a href="#org2a39bd8">docker service再起動</a></h3>
 <div class="outline-text-3" id="text-org2a39bd8">
 <p>
おかしくなったときの再起動。
</p>
 <div class="org-src-container">
 <pre class="src src-shell">sudo service docker restart
</pre>
</div>
</div>
</div>
 <div id="outline-container-org021673d" class="outline-3">
 <h3 id="org021673d"> <a href="#org021673d">コンテナ掃除関係</a></h3>
 <div class="outline-text-3" id="text-org021673d">
 <p>
 <a href="https://qiita.com/shisama/items/48e2eaf1dc356568b0d7">コマンドでDockerコンテナを停止・削除、イメージの削除をする - Qiita</a>
</p>

 <div class="org-src-container">
 <pre class="src src-shell">docker stop $(docker ps -q)  <span class="org-comment-delimiter"># </span> <span class="org-comment">全コンテナ停止</span>
docker rm $(docker ps -q -a)  <span class="org-comment-delimiter"># </span> <span class="org-comment">全コンテナ削除</span>
docker rmi $(docker images -q)  <span class="org-comment-delimiter"># </span> <span class="org-comment">全イメージ削除:</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-org75effd3" class="outline-3">
 <h3 id="org75effd3"> <a href="#org75effd3">ディスク使用率がとんでもないことになっていたとき</a></h3>
 <div class="outline-text-3" id="text-org75effd3">
 <p>
ディスク使用率がほぼ100％になっていた。占めているほとんどはDocker関係のようだった。
イメージは削除するようにしてたが、ほかにも色々あるよう。
</p>

 <p>
専用のページがある。
 <a href="https://docs.docker.com/config/pruning/">https://docs.docker.com/config/pruning/</a>
</p>

 <p>
非常に多くのゴミがありそうだったので、多少再pullに時間がかかることを許容してすべて削除することにした。
</p>
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 19: </span>手っ取り早くすべて消す。警告が出る</label> <pre class="src src-shell">docker system prune
</pre>
</div>

 <p>
ゴリゴリbuildして試しているときは、気をつけたほうがよさそう。
</p>

 <p>
キャッシュ削除だけ行う。この場合が多そう。
</p>
 <div class="org-src-container">
 <pre class="src src-shell">docker builder prune
</pre>
</div>
</div>
</div>
 <div id="outline-container-org2063e88" class="outline-3">
 <h3 id="org2063e88"> <a href="#org2063e88">entrypoint.sh</a></h3>
 <div class="outline-text-3" id="text-org2063e88">
 <p>
公式Docker Imageでよく用いられる、コンテナ起動時に実行するスクリプト。
公式のイメージのままで、初回起動時に実行したいフックとして記述できる。
</p>

 <p>
例(Dockerfile):  <a href="https://github.com/tzumby/rails-on-kubernetes/blob/master/Dockerfile">rails-on-kubernetes/Dockerfile at master · tzumby/rails-on-kubernetes</a>
</p>
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 20: </span>Dockerfileの末尾で取り込む</label> <pre class="src src-shell">ADD . /myapp

COPY docker-entrypoint.sh /usr/local/bin

ENTRYPOINT [ <span class="org-string">"docker-entrypoint.sh"</span>]
</pre>
</div>

 <p>
例(entrypoint.sh):  <a href="https://github.com/tzumby/rails-on-kubernetes/blob/master/docker-entrypoint.sh">rails-on-kubernetes/docker-entrypoint.sh at master · tzumby/rails-on-kubernetes</a>
</p>
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 21: </span>entrypoint.sh $@は引数</label> <pre class="src src-shell"> <span class="org-comment-delimiter">#</span> <span class="org-comment">!/bin/</span> <span class="org-keyword">sh</span>

 <span class="org-builtin">set</span> -e

 <span class="org-keyword">if</span> [ -f tmp/pids/server.pid ];  <span class="org-keyword">then</span>
  rm tmp/pids/server.pid
 <span class="org-keyword">fi</span>

 <span class="org-builtin">echo</span>  <span class="org-string">"Waiting for Postgres to start..."</span>
 <span class="org-keyword">while</span>  <span class="org-negation-char">!</span> nc -z postgres 5432;  <span class="org-keyword">do</span> sleep 0.1;  <span class="org-keyword">done</span>
 <span class="org-builtin">echo</span>  <span class="org-string">"Postgres is up"</span>

 <span class="org-builtin">echo</span>  <span class="org-string">"Waiting for Redis to start..."</span>
 <span class="org-keyword">while</span>  <span class="org-negation-char">!</span> nc -z redis 6379;  <span class="org-keyword">do</span> sleep 0.1;  <span class="org-keyword">done</span>
 <span class="org-builtin">echo</span>  <span class="org-string">"Redis is up - execuring command"</span>

 <span class="org-keyword">exec</span> bundle exec  <span class="org-string">"$@"</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgee00e68" class="outline-3">
 <h3 id="orgee00e68"> <a href="#orgee00e68">docker-composeとdocker</a></h3>
 <div class="outline-text-3" id="text-orgee00e68">
 <p>
docker-composeは自動でタグ名をつけてくれたり、マウントしてくれたり、dockerコマンドよりややこしくなりにくい。
単に開発環境として使っているだけでは、ほとんどdocker-composeで事足りる。
が、docker-composeへ依存しているということで、docker-compose関係ない別の文脈で使おうとすると途端に動かなくなる。本質的にdocker-composeはコンテナ間の関係性を記述しているだけで、コンテナ自体を表現しているわけではない。
</p>

 <p>
本当にdockerコンテナとしての正しい使い方をしているかテストするには、コンテナを複数のデプロイやCIで利用してみるのがよい。同じ流れで簡単にできたのなら正しい。簡単にできないなら何かが間違っている。
</p>
</div>
</div>
 <div id="outline-container-org136880c" class="outline-3">
 <h3 id="org136880c"> <a href="#org136880c">よく使うdockerオプション</a></h3>
 <div class="outline-text-3" id="text-org136880c">
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 22: </span>例</label> <pre class="src src-shell">docker run --rm -v  <span class="org-string">"$PWD/"</span>:/roam -w /roam ghcr.io/kijimad/roam:master sh deploy.sh
</pre>
</div>

 <p>
 <code>--rm</code> : コマンド実行後にコンテナを削除する
 <code>-v</code>: ホストマシンにマウントする。左がホストマシン、右がコンテナ内。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 23: </span>-itの意味: 対話モード</label> <pre class="src src-shell">docker run --rm -it ghcr.io/kijimad/roam:master
</pre>
</div>
 <p>
-it はttyオプション。インタラクティブなシェルを作成する。つけないと、一瞬で消える。
</p>
</div>
</div>
 <div id="outline-container-orgcd2e305" class="outline-3">
 <h3 id="orgcd2e305"> <a href="#orgcd2e305">buildkitをオンにする</a></h3>
 <div class="outline-text-3" id="text-orgcd2e305">
 <p>
環境変数をオンにすることで、新しい機能が使えるようになる。
</p>
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 24: </span>shell</label> <pre class="src src-shell"> <span class="org-builtin">export</span>  <span class="org-variable-name">COMPOSE_DOCKER_CLI_BUILD</span>=1
 <span class="org-builtin">export</span>  <span class="org-variable-name">DOCKER_BUILDKIT</span>=1
docker build .
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgd9eac5c" class="outline-3">
 <h3 id="orgd9eac5c"> <a href="#orgd9eac5c">docker-composeでマウントしたときにnode_modulesが消える問題</a></h3>
 <div class="outline-text-3" id="text-orgd9eac5c">
 <ol class="org-ol"> <li>npm install するコンテナを作成</li>
 <li>コンテナをマウント</li>
 <li>ホストマシンにないnode_modulesは消える</li>
 <li>エラー</li>
</ol> <p>
なので、node_modulesもマウントする。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 25: </span>dockerコマンドの場合。-v を2つで指定する</label> <pre class="src src-shell">docker run --rm -v  <span class="org-string">"$PWD"</span>:/roam -v /roam/node_modules ghcr.io/kijimad/roam_lint:master make textlint
</pre>
</div>

 <p>
 <a href="https://rara-world.com/dockerfile-node-modules/">https://rara-world.com/dockerfile-node-modules/</a> に書いてあった。
</p>
</div>
</div>
 <div id="outline-container-orgc5a08d2" class="outline-3">
 <h3 id="orgc5a08d2"> <a href="#orgc5a08d2">dockleでセキュリティチェック</a></h3>
 <div class="outline-text-3" id="text-orgc5a08d2">
 <p>
dockleというツールでイメージをチェックできる。
 <a href="https://github.com/goodwithtech/dockle">goodwithtech/dockle: Container Image Linter for Security, Helping build the Best-Practice Docker Image, Easy to start</a>
</p>

 <p>
自前のイメージにかけるとたくさん見つかった。
</p>
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 26: </span>実行してみた</label> <pre class="src src-shell">$ dockle ghcr.io/kijimad/roam:4f3296b
FATAL   - DKL-DI-0001: Avoid sudo command
        * Avoid sudo <span class="org-keyword"> in</span> container : /bin/sh -c yum -y update &&     yum -y install         yum-utils
      gcc         gcc-c++         make         openssl-devel         openssh-server         readline
nuplot
WARN    - CIS-DI-0001: Create a user for the container
        * Last user should not be root
INFO    - CIS-DI-0005: Enable Content trust for Docker
        * export  <span class="org-variable-name">DOCKER_CONTENT_TRUST</span>=1 before docker pull/build
INFO    - CIS-DI-0006: Add HEALTHCHECK instruction to the container image
        * not found HEALTHCHECK statement
INFO    - CIS-DI-0008: Confirm safety of setuid/setgid files
        * setgid file: g--x--x--x usr/libexec/openssh/ssh-keysign
        * setuid file: urwxr-xr-x usr/sbin/pam_timestamp_check
        * setuid file: urwxr-xr-x usr/bin/mount
        * setgid file: grwx--x--x usr/libexec/utempter/utempter
        * setuid file: urwxr-xr-x usr/bin/chage
        * setuid file: urwxr-xr-x usr/bin/su
        * setuid file: urwxr-x--- usr/libexec/dbus-1/dbus-daemon-launch-helper
        * setuid file: urwxr-xr-x usr/sbin/unix_chkpwd
        * setuid file: u--x--x--x usr/bin/sudo
        * setgid file: g--x--x--x usr/bin/ssh-agent
        * setuid file: urwxr-xr-x usr/bin/umount
        * setuid file: urwxr-xr-x usr/bin/gpasswd
        * setuid file: urwxr-xr-x usr/bin/newgrp
        * setgid file: grwxr-xr-x usr/bin/write
INFO    - DKL-LI-0003: Only put necessary files
        * Suspicious directory : roam/.git
        * Suspicious directory : usr/local/plugins/ruby-build/.git
        * Suspicious directory : usr/local/plugins/ruby-build/test/tmp
        * Suspicious directory : tmp
        * unnecessary file : roam/docker-compose.yml
        * unnecessary file : roam/Dockerfile
</pre>
</div>
</div>
</div>
 <div id="outline-container-orge08ad2e" class="outline-3">
 <h3 id="orge08ad2e"> <a href="#orge08ad2e">pushスクリプト</a></h3>
 <div class="outline-text-3" id="text-orge08ad2e">
 <p>
 <a href="https://www.amazon.co.jp/dp/B01N0SS6NF/ref=dp-kindle-redirect?_encoding=UTF8&btkr=1">Amazon.co.jp: Deploying Rails with Docker, Kubernetes and ECS (English Edition) eBook : Acuña, Pablo: Foreign Language Books</a>に載ってたスクリプト。書いてリポジトリに入れておくとスムーズにビルドやプッシュができる。
レジストリ・ユーザ名・リポジトリを適宜変える。
</p>
 <div class="org-src-container">
 <pre class="src src-shell"> <span class="org-comment-delimiter">#</span> <span class="org-comment">!/bin/</span> <span class="org-keyword">sh</span>

 <span class="org-variable-name">LC</span>=$(git rev-parse --short HEAD)
docker build -t ghcr.io/kijimad/webapp:${ <span class="org-variable-name">LC</span>} .
docker push ghcr.io/kijimad/webapp:${ <span class="org-variable-name">LC</span>}
</pre>
</div>
</div>
</div>
 <div id="outline-container-org9a58558" class="outline-3">
 <h3 id="org9a58558"> <a href="#org9a58558">実行後にコンテナ削除</a></h3>
 <div class="outline-text-3" id="text-org9a58558">
 <p>
docker run するとコンテナ内に入れるが、作ったコンテナはそのままになる。
実行後に削除して欲しい場合は、  <code>docker --rm webapp /bin/sh</code> などrmオプションを使う。
</p>
</div>
</div>
 <div id="outline-container-org0b3a0a6" class="outline-3">
 <h3 id="org0b3a0a6"> <a href="#org0b3a0a6">コンテナ間の接続はサービス名を用いる</a></h3>
 <div class="outline-text-3" id="text-org0b3a0a6">
 <p>
コンテナ間の接続をしようとして、このようなエラーが出た。
</p>
 <blockquote>
 <p>
Error connecting to Redis on 127.0.0.1:6379 (Errno::ECONNREFUSED)
</p>
</blockquote>

 <p>
127.0…とあることから、コンテナ内のアドレスを見に行ってる。
コンテナ間での通信には、サービス名のアドレスを追加する必要がある。
</p>
</div>
</div>
 <div id="outline-container-org4480a59" class="outline-3">
 <h3 id="org4480a59"> <a href="#org4480a59">rootユーザでファイル作成しないようにする</a></h3>
 <div class="outline-text-3" id="text-org4480a59">
 <p>
Dockerコンテナ内でファイルを作成すると、ownerがrootになり編集や削除ができず面倒。
Dockerの内部ではユーザid(uid)やグループid(gid)がホストと異なる。idがホストマシンと合わないためrootとして実行されたことになる、よう。
</p>

 <p>
安易な解決策としては、権限をホストユーザに変更すれば問題ない。
とはいえ、コンテナ内のサービスが新しくファイルを作るたび(たとえばマイグレーションファイル生成)に実行するのは面倒。
 <a href="https://docs.docker.com/samples/rails/">If you are running Docker on Linux, the files rails new created are owned by root.</a>
</p>
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 27: </span>権限変更</label> <pre class="src src-shell">sudo chown -R $ <span class="org-variable-name">USER</span>:$ <span class="org-variable-name">USER</span> .
</pre>
</div>

 <p>
解決策としてはいくつか種類があるようなのだが、とりあえずできた。
サービスのvolumesにユーザ情報をマウントする。:roは読み取り専用(read onlyか)。
これでidの照合元がホストと同じになる。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 28: </span>docker-compose.yml</label> <pre class="src src-yaml">volumes:
  - /etc/passwd:/etc/passwd:ro
  - /etc/group:/etc/group:ro
</pre>
</div>

 <p>
あとはidを環境変数経由で渡せば、コンテナ内でもホストのユーザが実行したことになる。
</p>
 <div class="org-src-container">
 <pre class="src src-shell">sudo docker run -u  <span class="org-string">"$(id -u $USER):$(id -g $USER)"</span> rails /bin/sh
sudo docker-compose run -u  <span class="org-string">"$(id -u $USER):$(id -g $USER)"</span> rails /bin/sh
</pre>
</div>

 <p>
overrideがある場合、このようになる(長すぎ)。
</p>
 <div class="org-src-container">
 <pre class="src src-shell">sudo docker-compose -f docker-compose.yml -f docker-compose-app.override.yml run -u  <span class="org-string">"$(id -u $USER):$(id -g $USER)"</span> rails /bin/sh
</pre>
</div>

 <p>
 <a href="https://blog.amedama.jp/entry/docker-container-host-same-user">Docker コンテナ内で Docker ホストと同じユーザを使う - CUBE SUGAR CONTAINER</a>
</p>
</div>
</div>
 <div id="outline-container-orgfb71b98" class="outline-3">
 <h3 id="orgfb71b98"> <a href="#orgfb71b98">Docker Hub</a></h3>
 <div class="outline-text-3" id="text-orgfb71b98">
 <p>
Dockerイメージをインターネット上にアップロードできるスペース。
個別にビルドしなくてよくなるためDocker関連の全工程が高速化する。テスト、ローカル、デプロイ…。
</p>
</div>
</div>
 <div id="outline-container-org9ac770d" class="outline-3">
 <h3 id="org9ac770d"> <a href="#org9ac770d">マルチステージビルドとは</a></h3>
 <div class="outline-text-3" id="text-org9ac770d">
 <p>
サイトをDockerデプロイにしたり、CIをDockerで行うとき。
複数の環境が関係する場合、マルチステージビルドを行うとキャッシュが効くため高速化できる。
</p>

 <ul class="org-ul"> <li>Linux関連のイメージ</li>
 <li> <a href="20210509095513-ruby.html#ID-cfd092c4-1bb2-43d3-88b1-9f647809e546">Ruby</a>関連のイメージ</li>
 <li>node関連のイメージ</li>
 <li> <a href="20210509095946-rails.html#ID-e04aa1a3-509c-45b2-ac64-53d69c961214">Rails</a>アプリのイメージ</li>
</ul> <p>
のように。
Linux →  <a href="20210509095513-ruby.html#ID-cfd092c4-1bb2-43d3-88b1-9f647809e546">Ruby</a> + node →  <a href="20210509095946-rails.html#ID-e04aa1a3-509c-45b2-ac64-53d69c961214">Rails</a>という依存関係になる。
</p>
</div>
</div>
 <div id="outline-container-orgb8cebee" class="outline-3">
 <h3 id="orgb8cebee"> <a href="#orgb8cebee">Dockerfileは何か</a></h3>
 <div class="outline-text-3" id="text-orgb8cebee">
 <p>
Dockrfileはイメージを作る。(image build)
docker-compose upは↑で作られたイメージを元にコンテナを作り起動までする。そのなかアプリケーションを走らせて開発する。
</p>

 <p>
image構築 → コンテナ構築 → コンテナ起動 という流れ。
</p>

 <p>
コンテナの作り方には2種類ある。
</p>
 <ul class="org-ul"> <li>自作する必要があるものは↑Dockerfileで作る</li>
 <li>既存コンテナ( <a href="20210829232020-mysql.html#ID-7dab097c-60ba-43b9-949f-c58bf3151aa8">MySQL</a>とか)はイメージをダウンロードする</li>
</ul></div>
</div>
 <div id="outline-container-org5238282" class="outline-3">
 <h3 id="org5238282"> <a href="#org5238282">コンテナ内でコマンド実行する</a></h3>
 <div class="outline-text-3" id="text-org5238282">
 <p>
コンテナ内部で実行したいコマンドがあるときにやりたいこと、たとえば <a href="20210509095946-rails.html#ID-e04aa1a3-509c-45b2-ac64-53d69c961214">Rails</a>だと、gemfileが新しくなったときにbundle installしたい。
</p>

 <p>
runは新しくコンテナを作成し、内部でコマンドを実行する。サービス名はdocker-compose.ymlから取っている。つまり立ち上がっているコンテナ名は関係ないのに注意。何も指定してない場合、docker-compose.ymlからサービス名を決定する。ほかのファイルの場合には-fオプションが必要。外部で永続化される…volumeが指定されてるような処理(bundle install)とか、データベース関係はいいのだが、その他は永続化されないので注意。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 29: </span>run</label> <pre class="src src-shell">docker-compose run {サービス名} {shellコマンド}
</pre>
</div>

 <p>
execはコンテナを再利用してコマンドを実行する。高速。
</p>
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 30: </span>exec</label> <pre class="src src-shell">docker-compose exec {サービス名} {shellコマンド}
</pre>
</div>
</div>
</div>
 <div id="outline-container-org7ab0fe1" class="outline-3">
 <h3 id="org7ab0fe1"> <a href="#org7ab0fe1">キャッシュを使わずにbuildする</a></h3>
 <div class="outline-text-3" id="text-org7ab0fe1">
 <div class="org-src-container">
 <pre class="src src-shell">docker-compose build --no-cache
</pre>
</div>
</div>
</div>
 <div id="outline-container-org9eacf77" class="outline-3">
 <h3 id="org9eacf77"> <a href="#org9eacf77">立ち上げと停止</a></h3>
 <div class="outline-text-3" id="text-org9eacf77">
 <div class="org-src-container">
 <pre class="src src-shell">docker-compose up --build -d  <span class="org-comment-delimiter"># </span> <span class="org-comment">コンテナ作成する</span>
docker-compose down
</pre>
</div>
</div>
</div>
 <div id="outline-container-orge0fc0a9" class="outline-3">
 <h3 id="orge0fc0a9"> <a href="#orge0fc0a9">docker外に公開する</a></h3>
 <div class="outline-text-3" id="text-orge0fc0a9">
 <p>
 <a href="20210509095946-rails.html#ID-e04aa1a3-509c-45b2-ac64-53d69c961214">Rails</a>
Dockerfileで。
</p>
 <div class="org-src-container">
 <pre class="src src-shell">CMD bundle exec rails server -b 0.0.0.0
</pre>
</div>

 <p>
などと書いておくと、外部(Docker外)からアクセスできるようになる。-b 0.0.0.0 がないと別のネットワークからアクセスが不可。コンテナを超えると別のネットワーク扱いになるのでこの記述が必要。
</p>
</div>
</div>
 <div id="outline-container-orged6508d" class="outline-3">
 <h3 id="orged6508d"> <a href="#orged6508d">ポート指定する</a></h3>
 <div class="outline-text-3" id="text-orged6508d">
 <p>
どっちだったか忘れる。
左が公開、右がコンテナ内。だからブラウザでポート8000アクセスできるようになる。
</p>
 <div class="org-src-container">
 <pre class="src src-shell">docker run -p 8000:3000 -it bdd92ace66ec
</pre>
</div>
</div>
</div>
 <div id="outline-container-org6087498" class="outline-3">
 <h3 id="org6087498"> <a href="#org6087498">ログを確認する</a></h3>
 <div class="outline-text-3" id="text-org6087498">
 <div class="org-src-container">
 <pre class="src src-shell">docker ps -a  <span class="org-comment-delimiter"># </span> <span class="org-comment">id確認</span>
docker logs 1111...  <span class="org-comment-delimiter"># </span> <span class="org-comment">idを入れる</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-org962693b" class="outline-3">
 <h3 id="org962693b"> <a href="#org962693b">イメージを削除する</a></h3>
 <div class="outline-text-3" id="text-org962693b">
 <p>
使ってないイメージを削除する。
</p>
 <div class="org-src-container">
 <pre class="src src-shell">docker images prone
</pre>
</div>

 <p>
一気に全部削除する。
</p>
 <div class="org-src-container">
 <pre class="src src-shell">docker stop $(docker ps -q)
docker rm $(docker ps -aq)
docker rmi $(docker images -q)
</pre>
</div>
</div>
</div>
 <div id="outline-container-org778b28f" class="outline-3">
 <h3 id="org778b28f"> <a href="#org778b28f">コンテナの大まかな仕組み</a></h3>
 <div class="outline-text-3" id="text-org778b28f">
 <p>
仮想化をどうやっているか、なぜ独立した環境にできるのか知らない。
</p>

 <p>
解説は↓にある。非常にわかりやすい。 <a href="20210911113057-go.html#ID-7cacbaa3-3995-41cf-8b72-58d6e07468b1">Go</a>のミニマル実装もある。
</p>
 <ul class="org-ul"> <li> <a href="https://kaminashi-developer.hatenablog.jp/entry/dive-into-swamp-container-scratch">【Go言語】自作コンテナ沼。スクラッチでミニDockerを作ろう - カミナシ エンジニアブログ</a></li>
</ul> <p>
dockerの構成。
</p>

 <ul class="org-ul"> <li>Docker Host
 <ul class="org-ul"> <li>Docker Daemon</li>
 <li>Container</li>
 <li>Images</li>
 <li>Network</li>
</ul></li>
 <li>Docker client
 <ul class="org-ul"> <li>build, pull, runとか</li>
</ul></li>
</ul> <p>
network, container, image, volumesはCli経由でDocker daemonの機能を呼び出す。
コンテナを一言で言うと「 システムから分離されたプロセス 」。Linux上でunshareコマンドを打つことにより、最速でコンテナを作成できる。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 31: </span>最低限のコンテナ。この立ち上がったプロセスがコンテナ</label> <pre class="src src-shell">$ sudo unshare -u /bin/bash
 <span class="org-comment-delimiter"># </span> <span class="org-comment">ユーザがrootになった</span>
$ hostname newhost && hostname
-> newhost
 <span class="org-comment-delimiter"># </span> <span class="org-comment">ホスト名を変更した</span>
$ which emacs
-> /usr/bin/emacs  <span class="org-comment-delimiter"># </span> <span class="org-comment">unshareしてない状態だとEmacsはguixディレクトリ化に入っているので、確かに環境が別になっている</span>
</pre>
</div>

 <p>
コンテナに必要な <a href="20220108110637-linux.html#ID-7a81eb7c-8e2b-400a-b01a-8fa597ea527a">Linux</a>の機能3つ。
</p>

 <ul class="org-ul"> <li>Namespace
 <ul class="org-ul"> <li>プロセスはそれぞれでNamespaceを持っている。unshareはプロセスを分離させNamespaceを作成した</li>
</ul></li>
 <li>Control Group
 <ul class="org-ul"> <li>アプリケーションを特定のリソースセットに制限する。メモリの最大利用数や、プロセス最大実行数を制限できる</li>
 <li> <code>cat /sys/fs/cgroup/cpuset/cpuset.cpus</code></li>
</ul></li>
 <li>File System
 <ul class="org-ul"> <li>親からマウントされたFile Systemに関するデータのコピーを取得し、親と同じデータ構造へのポインタを取得して変更できるようにする</li>
 <li>cat  <code>/proc/mounts</code></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org0f5fa8d" class="outline-3">
 <h3 id="org0f5fa8d"> <a href="#org0f5fa8d">コンテナからホストにコピーする</a></h3>
 <div class="outline-text-3" id="text-org0f5fa8d">
 <p>
docker-compose cp が使える。dockerコマンドと違って、コンテナIDを指定する必要がない。
</p>

 <p>
コンテナ → ホストでも、ホスト → コンテナでも、入れ替えて使える。当然、コンテナは前もって起動しておく必要がある。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 32: </span>docker compose cp [service]:[コピー元path] [コピー先path]</label> <pre class="src src-shell">docker compose cp doc:/usr/share/nginx/html ./
</pre>
</div>
</div>
</div>
</div>
 <div id="outline-container-orgc09783b" class="outline-2">
 <h2 id="orgc09783b"> <a href="#orgc09783b">Tasks</a></h2>
 <div class="outline-text-2" id="text-orgc09783b">
</div>
 <div id="outline-container-orga7fc1bf" class="outline-3">
 <h3 id="orga7fc1bf"> <a href="#orga7fc1bf"> <span class="todo TODO">TODO</span> </a> <a href="https://container-security.dev/">About · Container Security Book</a></h3>
 <div class="outline-text-3" id="text-orga7fc1bf">
 <p>
コンテナセキュリティの本。
</p>
</div>
</div>
 <div id="outline-container-org5232f7b" class="outline-3">
 <h3 id="org5232f7b"> <a href="#org5232f7b"> <span class="todo TODO">TODO</span> </a> <a href="https://www.youtube.com/watch?v=bKFMS5C4CG0">Docker networking is CRAZY!! (you NEED to learn it) - YouTube</a></h3>
 <div class="outline-text-3" id="text-org5232f7b">
 <p>
動かして学ぶ、Docker networkの解説動画。
</p>

 <div class="org-src-container">
 <pre class="src src-shell">docker network ls
</pre>
</div>

 <div class="results" id="org115f4b6">
 <p>
NETWORK ID     NAME           DRIVER    SCOPE
ce33ed323134   bridge         bridge    local
bf0cec25fb71   docs_default   bridge    local
13c040755115   host           host      local
5482a9ce687b   none           null      local
</p>

</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 33: </span>テストのコンテナを起動する</label> <pre class="src src-shell">docker run -itd --rm --name test1 busybox
docker run -itd --rm --name test2 busybox
</pre>
</div>

 <div class="results" id="orgfe1cf7e">
 <p>
c1df10ea18c045e19832b6e5016f7c0b1b08742f38a6af1ad3222cf255165332
89e1be2705a7e08e569cbd7a5fb9b51e2ffd9f26e3b3c4be3effbd09d39c7fc6
</p>

</div>

 <p>
↑コマンドではネットワークまわりの設定はないが、自動で追加されている。確認する。
</p>

 <p>
↓ホストマシンから確認する。  <code>veth*</code> が増えている。
</p>

 <div class="org-src-container">
 <pre class="src src-shell">ip address show
</pre>
</div>

 <div class="results" id="org8ce4880">
 <p>
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever
2: wlp0s20f3: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default qlen 1000
    link/ether a0:29:42:f6:35:97 brd ff:ff:ff:ff:ff:ff
    inet 192.168.0.135/24 brd 192.168.0.255 scope global dynamic noprefixroute wlp0s20f3
       valid_lft 3956sec preferred_lft 3956sec
    inet6 240b:10:91c1:d500:a535:6b03:37ab:c2a/64 scope global temporary dynamic
       valid_lft 597967sec preferred_lft 79426sec
    inet6 240b:10:91c1:d500:7c43:5116:5189:7920/64 scope global dynamic mngtmpaddr noprefixroute
       valid_lft 2591770sec preferred_lft 604570sec
    inet6 fe80::630:a649:296b:62a6/64 scope link noprefixroute
       valid_lft forever preferred_lft forever
3: docker0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default
    link/ether 02:42:92:8f:f5:2c brd ff:ff:ff:ff:ff:ff
    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0
       valid_lft forever preferred_lft forever
    inet6 fe80::42:92ff:fe8f:f52c/64 scope link
       valid_lft forever preferred_lft forever
4: br-bf0cec25fb71: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN group default
    link/ether 02:42:68:39:3c:cb brd ff:ff:ff:ff:ff:ff
    inet 172.19.0.1/16 brd 172.19.255.255 scope global br-bf0cec25fb71
       valid_lft forever preferred_lft forever
1164: vethbd4a2ba@if1163: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue master # 👈 docker0 state UP group default
    link/ether 3e:4a:f3:57:3c:f6 brd ff:ff:ff:ff:ff:ff link-netnsid 1
    inet6 fe80::3c4a:f3ff:fe57:3cf6/64 scope link
       valid_lft forever preferred_lft forever
1166: vethd4e3cec@if1165: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue master # 👈 docker0 state UP group default
    link/ether d2:1c:e5:39:4b:7a brd ff:ff:ff:ff:ff:ff link-netnsid 2
    inet6 fe80::d01c:e5ff:fe39:4b7a/64 scope link
       valid_lft forever preferred_lft forever
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-shell">bridge link
</pre>
</div>

 <div class="results" id="org6cebd67">
 <p>
1164: vethbd4a2ba@if1163: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 master docker0 state forwarding priority 32 cost 2 # 👈 docker0
1166: vethd4e3cec@if1165: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 master docker0 state forwarding priority 32 cost 2 # 👈 docker0
</p>

</div>

 <p>
ブリッジをさらに詳しく見る。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 34: </span>bridgeを見ると起動したものが追加されている</label> <pre class="src src-shell">docker inspect bridge
</pre>
</div>

 <div class="results" id="org3ca6770">
 <p>
[
    {
        “Name”: “bridge”,
        “Id”: “ce33ed32313474bcb0aa3f914152fd0c1df57c1e1fadc740a6fd16d6f91d4637”,
        “Created”: “2024-02-28T00:10:39.317309307+09:00”,
        “Scope”: “local”,
        “Driver”: “bridge”,
        “EnableIPv6”: false,
        “IPAM”: {
            “Driver”: “default”,
            “Options”: null,
            “Config”: [
                {
                    “Subnet”: “172.17.0.0/16”,
                    “Gateway”: “172.17.0.1”
                }
            ]
        },
        “Internal”: false,
        “Attachable”: false,
        “Ingress”: false,
        “ConfigFrom”: {
            “Network”: “”
        },
        “ConfigOnly”: false,
        “Containers”: {
            “89e1be2705a7e08e569cbd7a5fb9b51e2ffd9f26e3b3c4be3effbd09d39c7fc6”: {
                “Name”: “test2”,
                “EndpointID”: “7464bc9f1771de61da18e637390233e9146e2d8a0fdb7fd2822c4358534b8a96”,
                “MacAddress”: “02:42:ac:11:00:04”,
                “IPv4Address”: “172.17.0.4/16”, # 👈
                “IPv6Address”: “”
            },
            “c1df10ea18c045e19832b6e5016f7c0b1b08742f38a6af1ad3222cf255165332”: {
                “Name”: “test1”,
                “EndpointID”: “87edd7c730152b05cc16931305b5178a1a26d6649c462d405b700a4071afbe38”,
                “MacAddress”: “02:42:ac:11:00:03”,
                “IPv4Address”: “172.17.0.3/16”, # 👈
                “IPv6Address”: “”
            }
        },
        “Options”: {
            “com.docker.network.bridge.default_bridge”: “true”,
            “com.docker.network.bridge.enable_icc”: “true”,
            “com.docker.network.bridge.enable_ip_masquerade”: “true”,
            “com.docker.network.bridge.host_binding_ipv4”: “0.0.0.0”,
            “com.docker.network.bridge.name”: “docker0”,
            “com.docker.network.driver.mtu”: “1500”
        },
        “Labels”: {}
    }
]
</p>

</div>

 <p>
↑  <code>docker0</code> ネットワーク内に追加されている。
</p>

 <p>
ホストネットワークで起動する。
</p>

 <div class="org-src-container">
 <pre class="src src-shell">docker run -itd --rm --network host --name test3 nginx
</pre>
</div>

 <div class="results" id="org1d2f360">
 <p>
0574b61623240c3ce524c44bba37e85386a2052c64811a06bd96dd80ea9cc98a
</p>

</div>

 <p>
ポートを公開することなく、ホストマシンからアクセスできる。ネットワークは隔離されない。
</p>

 <div class="org-src-container">
 <pre class="src src-shell">curl -I http://localhost
curl -I http://172.17.0.1
</pre>
</div>

 <div class="results" id="org1573060">
 <p>
HTTP/1.1 200 OK
Server: nginx/1.25.4
Date: Sat, 02 Mar 2024 04:55:15 GMT
Content-Type: text/html
Content-Length: 615
Last-Modified: Wed, 14 Feb 2024 16:03:00 GMT
Connection: keep-alive
ETag: “65cce434-267”
Accept-Ranges: bytes
</p>

 <p>
HTTP/1.1 200 OK
Server: nginx/1.25.4
Date: Sat, 02 Mar 2024 04:55:15 GMT
Content-Type: text/html
Content-Length: 615
Last-Modified: Wed, 14 Feb 2024 16:03:00 GMT
Connection: keep-alive
ETag: “65cce434-267”
Accept-Ranges: bytes
</p>

</div>
</div>
</div>
 <div id="outline-container-orgd9d0060" class="outline-3">
 <h3 id="orgd9d0060"> <a href="#orgd9d0060">dockerドキュメントのタイポ修正</a></h3>
 <div class="outline-text-3" id="text-orgd9d0060">
 <ul class="org-ul"> <li> <a href="https://docs.docker.jp/index.html">Docker ドキュメント日本語化プロジェクト — Docker-docs-ja 24.0 ドキュメント</a></li>
 <li>特定のユーザに割り当てられたほ場的なグループと共に実行されます</li>
 <li>議事 tty（pseudo-tty）の割り当て</li>
</ul></div>
</div>
 <div id="outline-container-orgc5c8091" class="outline-3">
 <h3 id="orgc5c8091"> <a href="#orgc5c8091"> <span class="todo TODO">TODO</span> 誤字修正</a></h3>
 <div class="outline-text-3" id="text-orgc5c8091">
 <ul class="org-ul"> <li> <a href="https://github.com/zembutsu/docs.docker.jp/blob/main/compose/reference/restart.rst">https://github.com/zembutsu/docs.docker.jp/blob/main/compose/reference/restart.rst</a></li>
</ul></div>
</div>
 <div id="outline-container-org3c59013" class="outline-3">
 <h3 id="org3c59013"> <a href="#org3c59013"> <span class="todo TODO">TODO</span> </a> <a href="https://github.com/gitpod-io/workspace-images">gitpod-io/workspace-images: Ready to use docker images for Gitpod workspaces</a></h3>
 <div class="outline-text-3" id="text-org3c59013">
 <p>
コンテナまわりが参考になる。
</p>
</div>
</div>
 <div id="outline-container-org64a2ea2" class="outline-3">
 <h3 id="org64a2ea2"> <a href="#org64a2ea2"> <span class="todo TODO">TODO</span> </a> <a href="https://tatsu-zine.com/books/container-security">コンテナセキュリティ コンテナ化されたアプリケーションを保護する要素技術【委託】 - 達人出版会</a></h3>
 <div class="outline-text-3" id="text-org64a2ea2">
 <p>
コンテナの本。
</p>
</div>
</div>
 <div id="outline-container-org6c8f949" class="outline-3">
 <h3 id="org6c8f949"> <a href="#org6c8f949"> <span class="todo TODO">TODO</span> </a> <a href="https://github.com/compose-spec/compose-go/pull/416">introduce require to load sub-compose projects as dependencies by ndeloof · Pull Request #416 · compose-spec/compose-go</a></h3>
 <div class="outline-text-3" id="text-org6c8f949">
 <p>
気になる機能追加。-fオプションの上書きは、わかりづらい。
</p>
</div>
</div>
 <div id="outline-container-orgc260b9d" class="outline-3">
 <h3 id="orgc260b9d"> <a href="#orgc260b9d"> <span class="todo TODO">TODO</span> </a> <a href="https://knowledge.sakura.ad.jp/23899/">Docker Compose入門 (3) ～ネットワークの理解を深める～ | さくらのナレッジ</a></h3>
 <div class="outline-text-3" id="text-orgc260b9d">
 <p>
docker networkの解説。
</p>
</div>
</div>
 <div id="outline-container-org961ae3a" class="outline-3">
 <h3 id="org961ae3a"> <a href="#org961ae3a"> <span class="todo TODO">TODO</span> </a> <a href="https://qiita.com/Surgo/items/709a07d68c6eafbad267">Docker と LXC - Qiita</a></h3>
 <div class="outline-text-3" id="text-org961ae3a">
 <p>
コンテナのLXCとはなにかを解説。
</p>
</div>
</div>
 <div id="outline-container-orgf1f1b25" class="outline-3">
 <h3 id="orgf1f1b25"> <a href="#orgf1f1b25"> <span class="todo TODO">TODO</span> </a> <a href="https://kayanaka.hatenablog.com/entry/2019/10/31/233902">Dockerコンテナの/var/lib/docker/overlay配下の容量が大きくなって起動できない事象に遭遇したので周辺知識を調べた。 - 蚊帳の中の日記</a></h3>
 <div class="outline-text-3" id="text-orgf1f1b25">
 <p>
overlayのわかりやすい説明。事象を理解するためには、仕組みを理解していなければいけない。
</p>
</div>
</div>
 <div id="outline-container-org3bd233d" class="outline-3">
 <h3 id="org3bd233d"> <a href="#org3bd233d"> <span class="todo TODO">TODO</span> docker ignoreの仕組み    <span class="tag"> <span class="DontKnow">DontKnow</span></span></a></h3>
 <div class="outline-text-3" id="text-org3bd233d">
 <p>
どうやってignoreしているのだろうか。
</p>

 <div class="org-src-container">
 <pre class="src src-git-permalink">https://github.com/kd-collective/buildkit/blob/37d54ebc592a54db8764911eb320d02d2260c5e6/frontend/dockerfile/dockerignore/dockerignore.go#L13
</pre>
</div>

 <div class="results" id="orgd89a90d">
 <p>
// ReadAll reads a .dockerignore file and returns the list of file patterns
</p>

</div>

 <ul class="org-ul"> <li>ファイルを読み込み、パスのスライスを出しているだけ</li>
</ul></div>
</div>
 <div id="outline-container-org8aa405a" class="outline-3">
 <h3 id="org8aa405a"> <a href="#org8aa405a"> <span class="todo TODO">TODO</span> </a> <a href="https://www.youtube.com/watch?v=HPuvDm8IC-4">Golang UK Conf. 2016 - Liz Rice - What is a container, really? Let’s write one in Go from scratch - YouTube</a></h3>
 <div class="outline-text-3" id="text-org8aa405a">
 <p>
コンテナランタイムを使わずに <a href="20210911113057-go.html#ID-7cacbaa3-3995-41cf-8b72-58d6e07468b1">Go</a>でコンテナを作ることで、コンテナとは何かを学ぶ。
</p>
</div>
</div>
 <div id="outline-container-orgce0e364" class="outline-3">
 <h3 id="orgce0e364"> <a href="#orgce0e364"> <span class="todo TODO">TODO</span> </a> <a href="https://gihyo.jp/book/2020/978-4-297-11837-2">イラストでわかる DockerとKubernetes：書籍案内｜技術評論社</a></h3>
 <div class="outline-text-3" id="text-orgce0e364">
 <p>
仕組みの説明。
</p>
</div>
</div>
 <div id="outline-container-orge31c189" class="outline-3">
 <h3 id="orge31c189"> <a href="#orge31c189"> <span class="todo TODO">TODO</span> </a> <a href="https://dev.classmethod.jp/articles/container-journey/">「コンテナジャーニー」〜明日から速攻始めるAWSでのコンテナ導入運用〜 #cmdevio2018 | DevelopersIO</a></h3>
 <div class="outline-text-3" id="text-orge31c189">
 <p>
現実的な導入ステップ。
</p>
</div>
</div>
</div>
 <div id="outline-container-org5ad1587" class="outline-2">
 <h2 id="org5ad1587"> <a href="#org5ad1587">Archives</a></h2>
 <div class="outline-text-2" id="text-org5ad1587">
</div>
 <div id="outline-container-org596cb06" class="outline-3">
 <h3 id="org596cb06"> <a href="#org596cb06"> <span class="done DONE">DONE</span> </a> <a href="https://qiita.com/Brutus/items/b3dfe5957294caa82669">Docker Swarmで学ぶサービスメッシュ - Qiita</a></h3>
 <div class="outline-text-3" id="text-org596cb06">
 <p>
swarmを学ぶ。
</p>
</div>
</div>
 <div id="outline-container-org1b464eb" class="outline-3">
 <h3 id="org1b464eb"> <a href="#org1b464eb"> <span class="done DONE">DONE</span> タスクを簡単に実行する方法を調べる</a></h3>
 <div class="outline-text-3" id="text-org1b464eb">
 <p>
 <a href="20210508234743-emacs.html#ID-1ad8c3d5-97ba-4905-be11-e6f2626127ad">Emacs</a>拡張あるいは、Makefile的なのにまとめる。
</p>

 <p>
ありがちなbundle-installなどはdocker-composeにワンショットのコマンドを書くことで、定形コマンドを実行することが少なくなった。自動で動かしたいやつはこれでOK。コマンドはdockerだから特殊ということはなく、ローカルと同じようにやれば良い。
</p>
</div>
</div>
 <div id="outline-container-org10f1f18" class="outline-3">
 <h3 id="org10f1f18"> <a href="#org10f1f18"> <span class="done DONE">DONE</span> Dockerドキュメントのタイポ修正</a></h3>
 <div class="outline-text-3" id="text-org10f1f18">
 <ul class="org-ul"> <li> <a href="https://github.com/zembutsu/docs.docker.jp/pull/402">https://github.com/zembutsu/docs.docker.jp/pull/402</a></li>
</ul></div>
</div>
 <div id="outline-container-org4cd32c1" class="outline-3">
 <h3 id="org4cd32c1"> <a href="#org4cd32c1"> <span class="done DONE">DONE</span> 誤字を修正する</a></h3>
 <div class="outline-text-3" id="text-org4cd32c1">
 <p>
 <a href="https://docs.docker.jp/glossary.html">用語集 — Docker-docs-ja 20.10 ドキュメント</a> PRを送る。
</p>

 <ul class="org-ul"> <li>なお、オリジナルのドキュメントは群は</li>
 <li>ビルド（build）とは、 を使って Docker イメージを構築する工程です。</li>
 <li>イメージ構築に必要なディレクトリに置いてあるファイル群です</li>
 <li>ために、 コピーオンライト 技術と を使います</li>
 <li>ベストな解決作です。</li>
 <li>ENTRYPOINT` に /bin/sh ま</li>
 <li>ユニオン・ファイル・システムで結語するために 技術を使い</li>
</ul></div>
</div>
 <div id="outline-container-orgb0f136f" class="outline-3">
 <h3 id="orgb0f136f"> <a href="#orgb0f136f"> <span class="done DONE">DONE</span> ゴミファイルができないようにする</a></h3>
 <div class="outline-text-3" id="text-orgb0f136f">
 <p>
とりあえず、👇でよい。
</p>

 <div class="org-src-container">
 <pre class="src src-shell">sudo chown -R $ <span class="org-variable-name">USER</span>:$ <span class="org-variable-name">USER</span> .
</pre>
</div>

 <p>
キャッシュや履歴関係がroot権限でできるので、削除が面倒＋コンテナを作るのが邪魔される。
</p>

 <ul class="org-ul"> <li>できないようにする</li>
 <li>自動削除するようにする</li>
</ul></div>
</div>
 <div id="outline-container-orgf84159d" class="outline-3">
 <h3 id="orgf84159d"> <a href="#orgf84159d"> <span class="done DONE">DONE</span> Rails開発 Docker環境化 <code>[9/9]</code></a></h3>
 <div class="outline-text-3" id="text-orgf84159d">
 <p>
仕事をLinuxで行えるようにする。基本的なところはカバーしたが、一部できないものがある状態。
</p>
</div>
 <div id="outline-container-org8ee9ae4" class="outline-4">
 <h4 id="org8ee9ae4"> <a href="#org8ee9ae4"> <span class="done CLOSE">CLOSE</span> rails c内で日本語が含まれると失敗する</a></h4>
 <div class="outline-text-4" id="text-org8ee9ae4">
 <p>
何かおかしくなる。
</p>
</div>
</div>
 <div id="outline-container-orgb9e3c6a" class="outline-4">
 <h4 id="orgb9e3c6a"> <a href="#orgb9e3c6a"> <span class="done CLOSE">CLOSE</span> CapybaraでJavascriptをオンにしたときsystem specが失敗する</a></h4>
 <div class="outline-text-4" id="text-orgb9e3c6a">
 <p>
js: trueのときだけ。
</p>
</div>
</div>
 <div id="outline-container-org8ca8226" class="outline-4">
 <h4 id="org8ca8226"> <a href="#org8ca8226"> <span class="done DONE">DONE</span> migration時にschemaに変な差分が出る</a></h4>
 <div class="outline-text-4" id="text-org8ca8226">
 <p>
DB設定がおかしいようだ。
</p>
</div>
</div>
 <div id="outline-container-orge66113f" class="outline-4">
 <h4 id="orge66113f"> <a href="#orge66113f"> <span class="done DONE">DONE</span> 非同期処理の動作確認</a></h4>
 <div class="outline-text-4" id="text-orge66113f">
 <p>
redis, sidekiqが本当に動いてるかわからない。
letter openerを見る限り、できてない。
</p>

 <p>
追加した。
</p>
</div>
</div>
 <div id="outline-container-org927fc50" class="outline-4">
 <h4 id="org927fc50"> <a href="#org927fc50"> <span class="done DONE">DONE</span> dockerがrootユーザでファイルを生成する問題</a></h4>
 <div class="outline-text-4" id="text-org927fc50">
 <p>
生成したファイルがroot権限になってしまう。
だからbundle installを実行すると、その後は通常ユーザでは編集できなくなる。
面倒だし、migrationとか明らかにダメな気がする。
</p>

 <p>
簡単な解決策と環境変数によって解決する方法を調べた。
</p>
</div>
</div>
 <div id="outline-container-org51fad69" class="outline-4">
 <h4 id="org51fad69"> <a href="#org51fad69"> <span class="done DONE">DONE</span> 基本コマンド</a></h4>
 <div class="outline-text-4" id="text-org51fad69">
 <p>
 <a href="20210509095946-rails.html#ID-e04aa1a3-509c-45b2-ac64-53d69c961214">Rails</a>部分をDocker化する。表示はまったく問題なさそう。
リロードするとちゃんとローカルの変更が反映される。
</p>

 <p>
最初にルートファイルのdockerfileでベースイメージをビルドして、名前を付ける。
</p>
 <div class="org-src-container">
 <pre class="src src-shell">docker build . -t app
</pre>
</div>

 <p>
各コンテナでは↑で作成したベースイメージappを用いる。
イメージを使う代わりに  <code>build .</code> でも可能だが、各コンテナがイメージをビルドする(中身は同じ)ので遅くごちゃつく。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 35: </span>docker-compose.yml</label> <pre class="src src-yaml">rails:
  image: app
  environment:
    RAILS_ENV: development
    REDIS_URL: redis://redis:6379
    MEMCACHED_URL: memcached://memcached:11211
    SKIP_RECAPTCHA: "true"
    MEMCACHED_HOST: memcached
    MEMCACHED: memcached:11211
    WEBPACKER_DEV_SERVER_HOST: webpack
    CHROME_HOST_NAME: http://selenium_chrome:4444/wd/hub
  ports:
    - 3000:3000
  stdin_open: true
  tty: true
  command: bash -c "rm -f tmp/pids/server.pid && bundle exec rails s -b '0.0.0.0'"
  volumes:
    - .:/rails
    - /etc/passwd:/etc/passwd:ro # Linux用
    - /etc/group:/etc/group:ro # Linux用
  depends_on:
    - mysql

sidekiq:
  image: app
  command: bundle exec sidekiq
  links:
    - mysql
    - redis

webpack:
  image: app
  environment:
    NODE_ENV: development
    RAILS_ENV: development
    WEBPACKER_DEV_SERVER_HOST: 0.0.0.0
  command: yarn watch
  volumes:
    - .:/rails
    - /etc/passwd:/etc/passwd:ro # Linux用
    - /etc/group:/etc/group:ro # Linux用
  ports:
    - 8080:8080
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 36: </span>コンテナ作成 + 立ち上げ</label> <pre class="src src-shell">sudo docker-compose up --build
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 37: </span>再起動</label> <pre class="src src-shell">docker-compose {service} restart
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 38: </span>railsはサービス名。以下を好きなコマンドに変える</label> <pre class="src src-shell">docker-compose run rails bundle exec rails c
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 39: </span>bundle install</label> <pre class="src src-shell">docker-compose run rails bundle install
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 40: </span>テストを実行する</label> <pre class="src src-shell">docker-compose run rails bundle exec bin/rspec spec/requests/top/top_spec.rb
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 41: </span>コンテナ内のshellに入ってみる</label> <pre class="src src-shell">docker-compose run rails /bin/bash
</pre>
</div>
</div>
</div>
 <div id="outline-container-orge5b3b30" class="outline-4">
 <h4 id="orge5b3b30"> <a href="#orge5b3b30"> <span class="done DONE">DONE</span> docker-compose.ymlのオーバーライド</a></h4>
 <div class="outline-text-4" id="text-orge5b3b30">
 <p>
個人で微妙に設定が異なることもある。
Dockerでやるのはミドルウェアだけとか、 <a href="20210509095946-rails.html#ID-e04aa1a3-509c-45b2-ac64-53d69c961214">Rails</a>もすべてやる、といったような。
そのときはgitignoreを指定したymlを指定して起動する。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 42: </span>後から読み込まれた設定ファイルで上書きされる</label> <pre class="src src-shell">docker-compose -f docker-compose.yml -f docker-compose-app.override.yml up
</pre>
</div>

 <p>
もちろん一般性があるならgit管理にするのがベストだが、人によって構成が異なるので仕方ない。とくにMacだと速度に問題あるため、 <a href="20210509095946-rails.html#ID-e04aa1a3-509c-45b2-ac64-53d69c961214">Rails</a>は <a href="20210805005543-docker.html#ID-1658782a-d331-464b-9fd7-1f8233b8b7f8">Docker</a>で立ち上げないのが多数派。
</p>

 <p>
 <a href="20210509095946-rails.html#ID-e04aa1a3-509c-45b2-ac64-53d69c961214">Rails</a>サービスをoverride.ymlに、それ以外のミドルウェアサービスをdocker-compose.ymlに書いてる場合は、明示する必要がある。
</p>
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 43: </span>overrideしたときのbundle install。-f指定が必要。</label> <pre class="src src-shell">docker-compose -f docker-compose.yml -f docker-compose-app.override.yml run rails bundle install
</pre>
</div>

 <p>
docker-compose runする場合も-fオプションが必要。
runはコンテナを新しく作る…つまりymlを見てるので、指定が必要なのである。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 44: </span>model specを実行する</label> <pre class="src src-shell">docker-compose -f docker-compose.yml -f docker-compose-app.override.yml exec rails bundle exec rspec --options ./.rspec ./spec/models/user_spec.rb
</pre>
</div>

 <p>
↑いちいちクソ長いコマンドを打つのは苦痛なので、shellに入って作業すると楽。
</p>
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 45: </span>shellに入る</label> <pre class="src src-shell">sudo docker-compose -f docker-compose.yml -f docker-compose-app.override.yml run rails /bin/sh
</pre>
</div>
</div>
</div>
 <div id="outline-container-orga6de3ca" class="outline-4">
 <h4 id="orga6de3ca"> <a href="#orga6de3ca"> <span class="done DONE">DONE</span> DBのGUIツールとの接続</a></h4>
 <div class="outline-text-4" id="text-orga6de3ca">
 <p>
Linux用のsqlectronがよさそう。が、上手く <a href="20210829232020-mysql.html#ID-7dab097c-60ba-43b9-949f-c58bf3151aa8">MySQL</a>と接続できない
docker-compose.ymlで  <code>MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'</code> を追加すると入れるように。
パスワードを指定してるとログインできない。
</p>

 <p>
だがこのsqlectron、表示テーブルでの編集ができないので値を書き換えるのに非常に不便。
別のを使ったほうがいいだろう。
</p>
</div>
</div>
 <div id="outline-container-orgd3d2944" class="outline-4">
 <h4 id="orgd3d2944"> <a href="#orgd3d2944"> <span class="done DONE">DONE</span> yarnができてない</a></h4>
 <div class="outline-text-4" id="text-orgd3d2944">
 <ul class="org-ul"> <li>ポートを合わせる</li>
 <li>webpack.config.jsにhostを加える</li>
</ul> <p>
が必要。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 46: </span>docker-compose.yml</label> <pre class="src src-yaml">webpack:
  build: .
  environment:
    NODE_ENV: development
    RAILS_ENV: development
    WEBPACKER_DEV_SERVER_HOST: 0.0.0.0
  command: yarn watch
  volumes:
    - .:/rails
  ports:
    - 8080:8080
  depends_on:
    - rails
</pre>
</div>

 <p>
ホットリロードできるのを確認。
hostを加える必要があった。
</p>
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 47: </span>webpack.config.js</label> <pre class="src src-json">devServer: {
  contentBase: path.join(__dirname, 'app/assets/javascripts'),
  allowedHosts: ['.lvh.me'],
  host: '0.0.0.0',
},
</pre>
</div>
</div>
</div>
</div>
 <div id="outline-container-org88bf286" class="outline-3">
 <h3 id="org88bf286"> <a href="#org88bf286"> <span class="done DONE">DONE</span> </a> <a href="https://tatsu-zine.com/books/linux-container-book">Linux Container Book【委託】 - 達人出版会</a></h3>
 <div class="outline-text-3" id="text-org88bf286">
 <p>
コンテナの解説。後半は理解できてない。また必要なときに読む。
</p>

 <ul class="org-ul"> <li> <code>$ sudo mount --bind dir1 dir2</code> みたいに、バインドマウントするコマンドが存在する</li>
 <li>Namespace(名前空間)はプロセスをグループ化して、コンテナの隔離された空間を作り出す。独立させたいリソースによっていくつかの機能がある</li>
 <li>Dockerの初期はコンテナ内でコマンドを実行できなかった</li>
 <li>カーネルでsetnsがすべてのNamespaceに対して動作するようになってから、docker execコマンドが実行できるようになった</li>
 <li>Mount Namespaceは <a href="20220108110637-linux.html#ID-7a81eb7c-8e2b-400a-b01a-8fa597ea527a">Linux</a>カーネルに最初に実装されたNamespace(2002年)
 <ul class="org-ul"> <li>あるNamespaceごとに異なるマウントポイントの一覧を持てる</li>
 <li>コンテナ内でマウント操作を行った場合でも、そのマウントはホストOSや他のコンテナから見えないようにできる</li>
 <li> <code>$ cat /proc/self/mounts</code> でマウント状況を確認できる</li>
 <li>マウントプロパゲーション
 <ul class="org-ul"> <li>マウントがほかのディレクトリで反映されるか、反映されないか</li>
</ul></li>
</ul></li>
</ul></div>
</div>
</div>
 <div id="outline-container-orgb00fce4" class="outline-2">
 <h2 id="orgb00fce4"> <a href="#orgb00fce4">References</a></h2>
 <div class="outline-text-2" id="text-orgb00fce4">
</div>
 <div id="outline-container-org04a2410" class="outline-3">
 <h3 id="org04a2410"> <a href="#org04a2410"></a> <a href="https://zenn.dev/ttnt_1013/articles/f36e251a0cd24e">Docker一強の終焉にあたり、押さえるべきContainer事情</a></h3>
 <div class="outline-text-3" id="text-org04a2410">
 <p>
歴史が面白い。
</p>
</div>
</div>
 <div id="outline-container-org2611918" class="outline-3">
 <h3 id="org2611918"> <a href="#org2611918"></a> <a href="https://github.com/opencontainers/runtime-spec">opencontainers/runtime-spec: OCI Runtime Specification</a></h3>
 <div class="outline-text-3" id="text-org2611918">
 <p>
コンテナランタイムの標準仕様。
</p>
</div>
</div>
 <div id="outline-container-org8b85fdc" class="outline-3">
 <h3 id="org8b85fdc"> <a href="#org8b85fdc"></a> <a href="https://github.com/opencontainers/image-spec">opencontainers/image-spec: OCI Image Format</a></h3>
 <div class="outline-text-3" id="text-org8b85fdc">
 <p>
コンテナイメージの標準仕様。
</p>
</div>
</div>
 <div id="outline-container-orga13e183" class="outline-3">
 <h3 id="orga13e183"> <a href="#orga13e183"></a> <a href="https://www.youtube.com/watch?v=Gm5KYhMs20k">コンテナの仕組み（Linux学習） - YouTube</a></h3>
 <div class="outline-text-3" id="text-orga13e183">
 <p>
コンテナの解説。
</p>

 <p>
カーネルの変更がコンテナにどう影響しそうだな、という視点すごいな。
</p>
</div>
</div>
 <div id="outline-container-org6b755a2" class="outline-3">
 <h3 id="org6b755a2"> <a href="#org6b755a2"></a> <a href="https://tech.anti-pattern.co.jp/docker-compose/">複数のdocker-compose間で通信する</a></h3>
 <div class="outline-text-3" id="text-org6b755a2">
 <p>
docker networkを作り、コンテナを同じnetworkに所属させると、サービス名解決ができる。
</p>
</div>
</div>
 <div id="outline-container-orgc625b42" class="outline-3">
 <h3 id="orgc625b42"> <a href="#orgc625b42"></a> <a href="https://github.com/docker-library/buildpack-deps">docker-library/buildpack-deps</a></h3>
 <div class="outline-text-3" id="text-orgc625b42">
 <p>
Dockerの公式イメージ集。
</p>
</div>
</div>
 <div id="outline-container-org174db77" class="outline-3">
 <h3 id="org174db77"> <a href="#org174db77"></a> <a href="https://github.com/moby/moby/pull/40894">Add health start interval by cpuguy83 · Pull Request #40894 · moby/moby</a></h3>
 <div class="outline-text-3" id="text-org174db77">
 <p>
ヘルスチェックのスタートを指定するオプションを追加するプルリク。
</p>
</div>
</div>
 <div id="outline-container-org8d3f82a" class="outline-3">
 <h3 id="org8d3f82a"> <a href="#org8d3f82a"></a> <a href="https://github.com/moby/buildkit/issues/1472">Improved debugging support · Issue #1472 · moby/buildkit</a></h3>
 <div class="outline-text-3" id="text-org8d3f82a">
 <p>
デバッガーモードの提案。気になる。
</p>
</div>
</div>
 <div id="outline-container-orgbb0666f" class="outline-3">
 <h3 id="orgbb0666f"> <a href="#orgbb0666f"></a> <a href="https://github.com/docker/compose/issues/3729">allow removing something in docker-compose.override.yml · Issue #3729 · docker/compose</a></h3>
 <div class="outline-text-3" id="text-orgbb0666f">
 <p>
-fオプションで起動するとき、要素によっては上書きされない問題がある。例えばポートをoverride.ymlに書くと上書きはされず、2つともポート公開されてしまう。その仕様の変更が7年かかって仕様に組み込まれた。
</p>
</div>
</div>
 <div id="outline-container-org825025d" class="outline-3">
 <h3 id="org825025d"> <a href="#org825025d"></a> <a href="https://github.com/compose-spec/compose-spec/pull/364">introduce remove to configure runtime autoremove for service containers by ndeloof · Pull Request #364 · compose-spec/compose-spec</a></h3>
 <div class="outline-text-3" id="text-org825025d">
 <p>
removeキーワードの導入。
</p>
</div>
</div>
 <div id="outline-container-org8abb065" class="outline-3">
 <h3 id="org8abb065"> <a href="#org8abb065"></a> <a href="https://docs.docker.com/engine/api/v1.42/">Docker Engine API v1.42 Reference</a></h3>
 <div class="outline-text-3" id="text-org8abb065">
 <p>
Docker EngineのAPIリファレンス。
</p>
</div>
</div>
 <div id="outline-container-orgdde4a7d" class="outline-3">
 <h3 id="orgdde4a7d"> <a href="#orgdde4a7d"></a> <a href="https://qiita.com/hichika/items/9b96634d471246359e66">個人的docker composeおすすめtips6選 - Qiita</a></h3>
 <div class="outline-text-3" id="text-orgdde4a7d">
 <p>
tips。
</p>

 <ul class="org-ul"> <li>ヘルスチェック</li>
 <li>サービスをグループ化</li>
</ul></div>
</div>
 <div id="outline-container-orgc0c16a3" class="outline-3">
 <h3 id="orgc0c16a3"> <a href="#orgc0c16a3"></a> <a href="https://sunday-morning.app/posts/2020-05-06-extension-fields-docker-compose">Extension fieldsを使ってdocker-composeのコンテナ設定を共通化する</a></h3>
 <div class="outline-text-3" id="text-orgc0c16a3">
 <p>
共通化設定。
</p>

 <ul class="org-ul"> <li> <code>x-</code> をサービス名につけると無視される</li>
</ul></div>
</div>
 <div id="outline-container-orgf1fb3b9" class="outline-3">
 <h3 id="orgf1fb3b9"> <a href="#orgf1fb3b9"></a> <a href="https://techracho.bpsinc.jp/hachi8833/2020_02_07/87447">docker-compose.ymlの中で値を使い回す方法｜TechRacho by BPS株式会社</a></h3>
 <div class="outline-text-3" id="text-orgf1fb3b9">
 <p>
エイリアスの使い方。
</p>
</div>
</div>
 <div id="outline-container-org701946a" class="outline-3">
 <h3 id="org701946a"> <a href="#org701946a"></a> <a href="https://aton-kish.github.io/blog/post/2020/10/04/docker-compose-rm/">Docker Composeの一部のサービスだけUp/Downする | Nota</a></h3>
 <div class="outline-text-3" id="text-org701946a">
 <p>
方法。
</p>
</div>
</div>
 <div id="outline-container-org1a2fc17" class="outline-3">
 <h3 id="org1a2fc17"> <a href="#org1a2fc17"></a> <a href="https://github.com/Haxxnet/Compose-Examples">Haxxnet/Compose-Examples: Various Docker Compose examples of selfhosted FOSS and proprietary projects.</a></h3>
 <div class="outline-text-3" id="text-org1a2fc17">
 <p>
docker-compose集。
</p>
</div>
</div>
 <div id="outline-container-org791ba6b" class="outline-3">
 <h3 id="org791ba6b"> <a href="#org791ba6b"></a> <a href="https://qiita.com/okdyy75/items/a707989bd6bdd7bdb490">GitHub Actionを使って自前Docker内で自動テスト - Qiita</a></h3>
 <div class="outline-text-3" id="text-org791ba6b">
 <p>
github actionsでdocker-composeを使う例。
</p>
</div>
</div>
 <div id="outline-container-org5866f26" class="outline-3">
 <h3 id="org5866f26"> <a href="#org5866f26"></a> <a href="https://containers.gitbook.io/build-containers-the-hard-way/">Build Containers the Hard Way (WIP) - Build Containers the Hard Way</a></h3>
 <div class="outline-text-3" id="text-org5866f26">
 <p>
コンテナ技術の低レイヤーの仕組み。
</p>
</div>
</div>
 <div id="outline-container-org23610c0" class="outline-3">
 <h3 id="org23610c0"> <a href="#org23610c0"></a> <a href="https://github.com/docker-slim/docker-slim">docker-slim/docker-slim: DockerSlim (docker-slim): Don’t change anything in your Docker container image and minify it by up to 30x (and for compiled languages even more) making it secure too! (free and open source)</a></h3>
 <div class="outline-text-3" id="text-org23610c0">
 <p>
dockerイメージを分析してスリムにするツール。
</p>
</div>
</div>
 <div id="outline-container-orgc23ac9f" class="outline-3">
 <h3 id="orgc23ac9f"> <a href="#orgc23ac9f"></a> <a href="https://github.com/wagoodman/dive">wagoodman/dive: A tool for exploring each layer in a docker image</a></h3>
 <div class="outline-text-3" id="text-orgc23ac9f">
 <p>
dockerのレイヤーごとにイメージを調査できるツール。
</p>
</div>
</div>
 <div id="outline-container-orgf1e8f34" class="outline-3">
 <h3 id="orgf1e8f34"> <a href="#orgf1e8f34"></a> <a href="https://www.redhat.com/ja/topics/containers/what-is-docker">Docker とは - 解説、メリット、できること | Red Hat</a></h3>
 <div class="outline-text-3" id="text-orgf1e8f34">
 <p>
わかりやすい概要。
</p>
</div>
</div>
 <div id="outline-container-org08ba0cd" class="outline-3">
 <h3 id="org08ba0cd"> <a href="#org08ba0cd"></a> <a href="https://ja.wikipedia.org/wiki/Docker">Docker - Wikipedia</a></h3>
 <div class="outline-text-3" id="text-org08ba0cd">
 <p>
ソフトウェアのわかりやすい説明。
</p>
</div>
</div>
 <div id="outline-container-org6fce158" class="outline-3">
 <h3 id="org6fce158"> <a href="#org6fce158"></a> <a href="https://github.com/phusion/passenger-docker">phusion/passenger-docker: Docker base images for Ruby, Python, Node.js and Meteor web apps</a></h3>
 <div class="outline-text-3" id="text-org6fce158">
 <p>
Web開発用の扱いやすいDockerイメージ。
</p>
</div>
</div>
 <div id="outline-container-org403bada" class="outline-3">
 <h3 id="org403bada"> <a href="#org403bada"></a> <a href="https://12factor.net/">The Twelve-Factor App</a></h3>
 <div class="outline-text-3" id="text-org403bada">
 <p>
SaaS開発の方法論。
日本語訳もあった。 <a href="https://12factor.net/ja/">The Twelve-Factor App （日本語訳）</a>
</p>
</div>
</div>
 <div id="outline-container-org3eb5338" class="outline-3">
 <h3 id="org3eb5338"> <a href="#org3eb5338"></a> <a href="https://docs.docker.jp/pdf-download.html">Docker ドキュメント日本語版 PDF ダウンロード — Docker-docs-ja 19.03 ドキュメント</a></h3>
 <div class="outline-text-3" id="text-org3eb5338">
 <p>
Dockerのドキュメント。
</p>
</div>
</div>
 <div id="outline-container-orge30ac6f" class="outline-3">
 <h3 id="orge30ac6f"> <a href="#orge30ac6f"></a> <a href="https://kotaroooo0-dev.hatenablog.com/entry/2020/08/06/012316">キャッシュのためにDockerビルドで中間イメージをタグ付けしレジストリにPushする - 🤖</a></h3>
 <div class="outline-text-3" id="text-orge30ac6f">
 <p>
キャッシュの書き方。
</p>
</div>
</div>
 <div id="outline-container-orga83d1a5" class="outline-3">
 <h3 id="orga83d1a5"> <a href="#orga83d1a5"></a> <a href="https://www.forcia.com/blog/002273.html">社内pのDockerfileのベストプラクティスを公開します│FORCIA CUBE│フォルシア株式会社</a></h3>
 <div class="outline-text-3" id="text-orga83d1a5">
 <p>
非常に詳しい情報。
</p>
</div>
</div>
 <div id="outline-container-orge2a3177" class="outline-3">
 <h3 id="orge2a3177"> <a href="#orge2a3177"></a> <a href="https://qiita.com/tatsurou313/items/ad86da1bb9e8e570b6fa">BuildKitによりDockerとDocker Composeで外部キャッシュを使った効率的なビルドをする方法 - Qiita</a></h3>
 <div class="outline-text-3" id="text-orge2a3177">
 <p>
BuildKitの解説。
</p>
</div>
</div>
 <div id="outline-container-orga4f0ba5" class="outline-3">
 <h3 id="orga4f0ba5"> <a href="#orga4f0ba5"></a> <a href="https://www.slideshare.net/zembutsu/dockerfile-bestpractices-19-and-advice">Dockerfileを改善するためのBest Practice 2019年版</a></h3>
 <div class="outline-text-3" id="text-orga4f0ba5">
 <p>
ベストプラクティス。
</p>
</div>
</div>
</div>
 <div id="outline-container-orga66fb83" class="outline-2">
 <h2 id="orga66fb83"> <a href="#orga66fb83">Backlinks</a></h2>
 <div class="outline-text-2" id="text-orga66fb83">
 <ul class="org-ul"> <li> <a href="./20210508234743-emacs.html">Emacs</a></li>
 <li> <a href="./20210509095946-rails.html">Rails</a></li>
 <li> <a href="./20210525005710-gnu_guix.html">GNU Guix</a></li>
 <li> <a href="./20210615222732-project.html">project</a></li>
 <li> <a href="./20210805005543-docker.html">Docker</a></li>
 <li> <a href="./20210817003906-history.html">History</a></li>
 <li> <a href="./20210911113057-go.html">Go</a></li>
 <li> <a href="./20210912124846-dotfiles.html">dotfiles</a></li>
 <li> <a href="./20210922011437-kubernetes.html">Kubernetes</a></li>
 <li> <a href="./20210926103926-github.html">GitHub</a></li>
 <li> <a href="./20211002090535-100knocks.html">100knocks</a></li>
 <li> <a href="./20220126105030-deploy.html">deploy</a></li>
 <li> <a href="./20220521112115-ecs.html">ECS</a></li>
 <li> <a href="./20230101T175751--kdoc-16-2022年のまとめ__essay.html">KDOC 16: 2022年のまとめ</a></li>
 <li> <a href="./20230205172738-mermaid.html">Mermaid</a></li>
 <li> <a href="./20230527T000152--kdoc-25-docker-progress-を読む__project.html">KDOC 25: docker progress を読む</a></li>
 <li> <a href="./20240206T225919--kdoc-74-the-input-device-is-not-a-ttyを理解する__wiki.html">KDOC 74: The input device is not a TTYを理解する</a></li>
 <li> <a href="./20240207T014102--kdoc-76-コンテナでlocaleを設定する__wiki.html">KDOC 76: コンテナでLocaleを設定する</a></li>
 <li> <a href="./20240224T030106--kdoc-104-やりたいことが多すぎる__essay.html">KDOC 104: やりたいことが多すぎる</a></li>
 <li> <a href="./20240427T010358--kdoc-139-『googleのソフトウェアエンジニアリング』__book.html">KDOC 139: 『Googleのソフトウェアエンジニアリング』</a></li>
 <li> <a href="./20240501T165757--kdoc-152-dependabotが作ったprでワークフローが失敗する理由__wiki.html">KDOC 152: Dependabotが作ったPRでワークフローが失敗する理由</a></li>
 <li> <a href="./20240604T174816--kdoc-183-イメージビルド時にツール側のキャッシュを使う__wiki.html">KDOC 183: イメージビルド時にツール側のキャッシュを使う</a></li>
 <li> <a href="./index.html">Insomnia</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20210805005543-docker.html"/>
  <id>https://kijimad.github.io/roam/20210805005543-docker.html</id>
  <updated>2025-06-14T00:00:00+09:00</updated>
</entry>
<entry>
  <title>Money</title>
  <author><name>root</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org541fa80" class="outline-2">
 <h2 id="org541fa80"> <a href="#org541fa80">概要</a></h2>
 <div class="outline-text-2" id="text-org541fa80">
 <p>
カネのことを書く。
</p>

 <p>
経済的に豊かな人は、ついている職の時給が高いのではない。資産を持っているため、自分が労働する以外にも収入があるため豊かである。とはいえ、限られた人しか行わないのは、リスクがあるからだ。リスクを金に換えている、ともいえる。知識をもってリスクをうまくコントロールできれば、うまくいく可能性を上げられる。実行と結果がわかるまでに時間が必要なので、早めに経験を積んでおくことが重要。仕事と平行して取り組む。
</p>
</div>
</div>
 <div id="outline-container-org2af345d" class="outline-2">
 <h2 id="org2af345d"> <a href="#org2af345d">Memo</a></h2>
 <div class="outline-text-2" id="text-org2af345d">
</div>
 <div id="outline-container-org031aae0" class="outline-3">
 <h3 id="org031aae0"> <a href="#org031aae0"></a> <a href="https://www.amazon.co.jp/%EF%BC%BB%E6%9C%80%E6%96%B0%E7%89%88%EF%BC%BD%E3%81%BE%E3%81%9A%E3%81%AF%E3%82%A2%E3%83%91%E3%83%BC%E3%83%88%E4%B8%80%E6%A3%9F%E3%80%81%E8%B2%B7%E3%81%84%E3%81%AA%E3%81%95%E3%81%84%EF%BC%81-%E8%B3%87%E9%87%91300%E4%B8%87%E5%86%86%E3%81%8B%E3%82%89%E5%AE%B6%E8%B3%83%E5%B9%B4%E5%8F%8E1000%E4%B8%87%E5%86%86%E3%82%92%E7%94%9F%E3%81%BF%E5%87%BA%E3%81%99%E6%A5%B5%E6%84%8F-%E7%9F%B3%E5%8E%9F-%E5%8D%9A%E5%85%89-ebook/dp/B098B13K3X/ref=sr_1_7?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&crid=XLGA46ZUKF19&keywords=%E4%B8%8D%E5%8B%95%E7%94%A3%E6%8A%95%E8%B3%87&qid=1692802350&sprefix=%E4%B8%8D%E5%8B%95%E7%94%A3%E6%8A%95%E8%B3%87%2Caps%2C164&sr=8-7">まずはアパート一棟、買いなさい！資金300万円から家賃年収1000万円を生み出す極意</a></h3>
 <div class="outline-text-3" id="text-org031aae0">
 <p>
不動産投資の入門本。
</p>

 <ul class="org-ul"> <li>物件価格1500万円で表面利回り13%が目安。実質利回りは8パーセント程度になる</li>
 <li>木造建築はあとからどうとでも補強や修繕が可能</li>
 <li>鉄骨や鉄筋コンクリートの方が、ボロ物件の場合は怖い</li>
 <li>建物の傾きはどうしようもない。現地調査では水平器を持っていく</li>
 <li>湿気が多い場所は避ける</li>
 <li>物件に惚れてはいけない</li>
 <li>慣れてないと、ここまで手間暇かけたんだからと、事業とは関係ない感情で買ってしまいがち</li>
 <li>大がかりなリフォームでは賃料の15ヶ月分が上限、など基準を決めておく</li>
 <li>ダイノックフィルム</li>
 <li>リフォームは必ず相見積もりをとる</li>
 <li>もし可能であれば、1部屋のリフォームを自分で手がけてみること</li>
 <li>お願いしたい業者がいたら、相見積もりで出た1番安い値段を伝えてこの値段でできるか交渉してみる</li>
 <li>聞いてみる
 <ul class="org-ul"> <li>仕事の年数</li>
 <li>どんな案件が多いか</li>
 <li>築古のリノベーションの経験はあるか</li>
 <li>手掛けた現場や写真</li>
</ul></li>
 <li>差し入れしつつ現場を見に行く</li>
 <li>経費
 <ul class="org-ul"> <li>固定資産税・都市計画税・事業税</li>
 <li> <code>宅地建物取引業者</code> への仲介手数料や広告費</li>
 <li>原状回復を含めた修理費やリフォーム費</li>
 <li>大規模修繕費</li>
 <li>給排水、電気、ガス設備</li>
 <li>火災保険料、地震保険料</li>
 <li>定期清掃費</li>
 <li>消火用設備等の法定点検や報告、メンテナンス</li>
</ul></li>
 <li>資産性が高くても狙い通りに「現金化=売却」するのは難しい</li>
 <li>売買の仲介業者に聞くことリスト
 <ul class="org-ul"> <li>所有者の売却理由</li>
 <li>問い合わせがあったり、買いたい人は現れたりしているか</li>
 <li>買い手希望者の反響</li>
 <li>ライフラインについて(公営水道/井戸/本下水道/浄化槽/汲み取り式/プロパン/高架水槽/揚水ポンプ/加圧式)</li>
 <li>設備の詳細
 <ul class="org-ul"> <li>洋式トイレ</li>
 <li>洗濯機置場</li>
 <li>追い焚き</li>
</ul></li>
 <li>空室のリフォーム状況</li>
 <li>土地の実勢価格、路線価</li>
 <li>建ぺい率/容積率</li>
 <li>都市計画の区域区分と用途地域の種類</li>
 <li>法令上の制限(都市計画法、建築基準法、  <code>土地区画整理法</code> 、景観法など)</li>
 <li>重要事項の告知義務はあるか</li>
 <li> <code>大規模修繕履歴</code> (いつ外壁塗装や屋上防水をしたか)</li>
 <li>土地の地目(宅地、畑、田、山林)と過去の利用状況</li>
 <li>駐車場の数、近隣の月極駐車場の相場と空き状況、自転車置き場あるか。充足率</li>
 <li>バス停までの距離と便数</li>
 <li>建物はハウスメーカーの規格か、それとも在来工務店の建築か</li>
 <li>価格交渉の余地はあるか</li>
 <li> <code>固定資産税評価額</code> や固定資産税と都市計画税の税額について</li>
 <li>平坦地か傾斜地か、擁壁はあるか、崖地は迫ってないか、日照はどうか</li>
 <li>隣地とのもめごとの有無、境界は確認できる状況か</li>
 <li>ハザードマップのエリア内か。自然災害の履歴</li>
 <li>地中埋設物はあるか。可能性も含めて</li>
 <li>「周知の  <code>埋設文化財包蔵地</code> 」ではないか。区域外でも隣接していないか</li>
 <li>アスベストの使用状況</li>
 <li>建物の状態。外壁や基礎にクラックはあるか、雨漏りはあるか</li>
 <li>レントロール(契約期間や賃料、空室状況など)</li>
</ul></li>
 <li>さらに踏み込んで聞くことリスト
 <ul class="org-ul"> <li>売主の背景</li>
 <li> <code>建築確認通知書</code> 、検査済証はあるか</li>
 <li>建物が建築基準法などの法令を遵守しているか</li>
 <li>土壌汚染はないか</li>
 <li>手付金の額やローン条項(融資不可のときの契約解除)の受け入れなど</li>
 <li>配置図、建物図面、現況平面図、公図、地積測量図はあるか</li>
 <li>登記簿謄本( <code>全部事項証明書</code>)はあるか</li>
 <li>固定資産税や都市計画税の評価証明書、納税通知書の確認</li>
 <li>新築時のパンフレットや募集リーフレットはあるか</li>
 <li>建物竣工図はあるか。配管・配線の記録は改修に役立つ</li>
 <li>越境物の有無。隣地による敷地内埋設管の利用があるか</li>
 <li>電気の状況。キュービクル  <code>式高圧受電設備</code> があれば詳細も</li>
 <li>プロパンガスの場合、  <code>設備貸与証明書</code> (償却期間)など</li>
 <li>都市ガス調査回答書はあるか。埋設ガス管の把握に役立つ</li>
 <li>受水槽や浄化槽の点検や清掃履歴、費用</li>
 <li> <code>簡易専用水道検査結果書</code> はあるか。10㎡を超える受水槽/年1回</li>
 <li> <code>消防用設備等点検結果報告書</code> ・実施報告書・費用</li>
 <li>各世帯に  <code>住宅用火災警報器</code> は設置してあるか</li>
 <li>修繕記録はあるか。エアコンや給湯器の交換履歴など</li>
 <li>テレビ共聴方式(アンテナ・ケーブル)や維持費など</li>
 <li>インターネット回線は導入済みか</li>
 <li>屋根の修理は必要か。防水対策は緊急に必要か</li>
 <li>管理形態は何か。自主管理、管理委託、サブリース</li>
 <li>管理会社による定期清掃、点検報告書はあるか</li>
 <li>自治会費の制度があれば、詳細など</li>
 <li>過去の事故、事件、トラブル、クレームの履歴</li>
 <li>ペット可ならその規約</li>
 <li>店舗、事務所利用があれば規約と利用実態(火災保険料に影響)</li>
 <li>滞納者、不良入居者、反社会的勢力の有無</li>
 <li>家賃保証会社、  <code>家賃収納代行会社</code> の利用はしているか</li>
 <li>管理会社への委託内容(管理料など)、管理会社の変更に必要な手続きなど</li>
 <li>長期修繕計画はあるか</li>
 <li>各世帯の  <code>借家人賠償責任保険</code> の加入状況。更新はされているか</li>
 <li>物件のランニングコストについて</li>
 <li>敷金(保証金)の引き継ぎ方について</li>
</ul></li>
 <li>現地調査のチェックリスト
 <ul class="org-ul"> <li>駐車場は何台分か、タイヤ止めはあるか、表層の状態はどうか</li>
 <li>駐車場の台数は増やせるか。電柱、植栽、塀の移設や撤去を検討する</li>
 <li>基礎に大きなヒビはないか</li>
 <li>共用廊下の天井の状態。垂れ下がっていないかなど</li>
 <li>窓やひさしなどに痛みがないか</li>
 <li>手すりやバルコニーの状態</li>
 <li>階段は良好か。踏み板の強度、サビ、揺れ具合、劣化、破損</li>
 <li>屋根の種類。瓦、スレート、金属、コンクリート</li>
 <li>アンテナの位置と状態</li>
 <li>プロパンガス会社、ボンベ置き場</li>
 <li>面格子はあるか。防犯対策</li>
 <li>敷地の土の部分を確認。除草剤の散布範囲</li>
 <li>給湯器の製造元や年式</li>
 <li>浄化槽や汚水タンクの位置と状態</li>
 <li>共用灯の位置と数量</li>
 <li>外壁の状態。クラック、浮き、継ぎ目の劣化</li>
 <li>建物や敷地の苔/カビの有無。水はけや日当たりを確認する</li>
 <li>境界の確認。杭、標、金属鋲など</li>
 <li>バイク、自転車置き場の位置と状態</li>
 <li>エアコン室外機の位置と状態</li>
 <li>敷地内の放置物。放置車両、古タイヤ、粗大ゴミ</li>
 <li>高圧受電設備の位置と状態</li>
 <li>露出配管の位置、用途、状態</li>
 <li>井戸ポンプ、高架水槽、揚水ポンプ、加圧タンク、受水槽の位置と状態</li>
 <li>エレベーターの位置と状態</li>
 <li>郵便ポストのデザインや機能。宅配ボックスを検討する</li>
 <li>防犯カメラやオートロック機能の位置と状態</li>
 <li>門、塀、フェンスのコンディション</li>
 <li>全体の印象</li>
 <li>臭気の確認。カビ、畜産場の臭気</li>
 <li>バス停や駅までの実際の距離。時刻表</li>
 <li>生活利便施設や競合物件の確認。競合物件の数、入居状況など</li>
 <li>敷地内に電力柱や電信柱はあるか。番号を確認する</li>
 <li>ゴミステーションの位置と状態</li>
 <li>擁壁は役所で検査済証を確認</li>
 <li>近くに鉄塔、高架道路、高架線路、鉄道、幹線道路はあるか。日照/騒音/汚染/安全性など</li>
 <li>周辺の電柱、門扉、ブロック塀に傾きはあるか</li>
 <li>建具の開閉はスムーズか。戸車、敷居滑り、ヒンジの不具合や鴨居の下がりはないか</li>
 <li>床鳴りはしないか。元押入れだったクローゼットは床強度を確認</li>
 <li>掃き出し窓まわりの床の状態</li>
 <li>エアコン、キッチン、洗面台、便座、換気扇、照明器具の機能や状態</li>
 <li>浴室鏡の状態。ウロコ汚れや劣化など</li>
 <li>シャワーヘッド・ホース、蛇口、パッキン、コマ、選択水栓金具の状態</li>
 <li>洗濯機の排水トラップや防水パンの位置と状態</li>
 <li>ドアノブ、取っ手、タオルハンガー、カーテンレールの状態</li>
 <li>窓ガラスとゴム部分、窓の木枠、網戸と押さえゴム、襖、障子の状態</li>
 <li>鍵やクレセント錠の状態</li>
 <li>雨漏り跡はないか</li>
 <li>壁、天井、床面、畳の状態</li>
 <li>大幅な間取り変更や和室の洋室化をイメージ</li>
 <li>設備の状態と検討事項。Wi-Fi、モニターフォン、電子ロック</li>
 <li>契約アンペア数。低い・古いものは改善を検討する</li>
</ul></li>
 <li>現地の不動産業者に電話で聞くことリスト
 <ul class="org-ul"> <li>単身者とファミリー向けのどちらが人気か</li>
 <li>駐車場ニーズはあるか。月極の相場や空き情報について</li>
 <li>電車やバス停の利便性について</li>
 <li>人気のリフォームメニューと概算費用はあるか</li>
 <li>賃貸が見込める施設、大学、工場と状況はどうか</li>
 <li>土地柄や入居者ニーズ(満足度の高い条件や設備)はあるか</li>
 <li>各間取りの家賃相場はどうか</li>
 <li>敷金、礼金、フリーレント、広告費の相場はどうか</li>
 <li>ズバリ空き室を早く埋める方法はあるか</li>
 <li>災害ハザードエリアについて</li>
 <li>このエリアでの購入を勧めるか、勧めないか。アドバイスなど</li>
</ul></li>
 <li>管理会社に聞くことリスト
 <ul class="org-ul"> <li>インターネットでの募集方法について。サイト名など</li>
 <li>店頭ではどのような募集を行っているか</li>
 <li>現地で募集幕、看板、のぼり等は出しているか</li>
 <li>地域情報誌やフリーペーパーの募集(と反響)はあるか</li>
 <li>内見の案内やその結果の報告はあるか</li>
 <li>モデルルーム化など、空室を埋めるメニューはあるか</li>
 <li>家賃保証会社は利用しているか</li>
 <li> <code>連帯保証人制度</code> は採用しているか</li>
 <li>定期借家契約は導入しているか</li>
 <li> <code>借家人賠償責任保険</code> の内容と加入状況など</li>
 <li>賃料明細の発行や家賃振込のスケジュールはどうか</li>
 <li>滞納の督促マニュアルはあるか</li>
 <li>入居時の鍵交換は、入居者負担(特約付帯)か</li>
 <li>退去清掃費は、入居者負担(特約付帯)か</li>
 <li>原状回復のマニュアルはあるか</li>
 <li>定期巡回/報告はあるか。定期清掃の費用はどれくらいか</li>
 <li>契約外の駐車、駐輪、放置車両への対処法はあるか</li>
 <li>掲示板は管理するか。内容の確認や更新など</li>
 <li>浄化槽メンテナンスの頻度と料金はどうか</li>
 <li>受水槽、高架水槽の清掃頻度と料金はどうか</li>
 <li>地下水(井戸)の水質検査の料金(年1回)はどうか</li>
 <li>エレベータがあれば定期点検、消耗品交換の取次、料金はどうか</li>
 <li> <code>消防用設備等法定点検</code> (半年ごと)の料金はどうか</li>
 <li>営業時間外のクレーム対応方法はどうか</li>
 <li>管理対応の記録は社内で共有する仕組みか</li>
 <li>原状回復を含めたリフォームをオーナー側で手配できるか</li>
 <li>オーナー手配の工事の立ち会い、報告は可能か。立ち会い費用はどうか</li>
 <li>管理委託の契約期間は何年か</li>
 <li>借家人が契約内容に違反した場合、文書により催告をして何日以内に違反状況が回復、または回復のための行動を開始しない場合は無条件で契約解除となるか</li>
 <li>管理手数料はいくるか</li>
 <li>オーナーに事後報告とする金額の上限はどうか</li>
 <li>オーナーが入居者を連れてくることは可能か。手順やかかる費用はどうか</li>
 <li>業歴、管理棟数、戸数、社員数、管理物件の入居率について</li>
 <li>賃貸仲介、売買仲介、開発と分譲のうち、主な業務は何か</li>
 <li>管理物件の敷金、礼金、広告費、フリーレントの相場はどうか</li>
 <li>共用灯の交換費用はどうか。点灯管の交換や処分費を含む</li>
</ul></li>
</ul></div>
</div>
</div>
 <div id="outline-container-org606c619" class="outline-2">
 <h2 id="org606c619"> <a href="#org606c619">Tasks</a></h2>
</div>
 <div id="outline-container-org80b176a" class="outline-2">
 <h2 id="org80b176a"> <a href="#org80b176a">Reference</a></h2>
 <div class="outline-text-2" id="text-org80b176a">
</div>
 <div id="outline-container-org4b38cd4" class="outline-3">
 <h3 id="org4b38cd4"> <a href="#org4b38cd4"></a> <a href="https://curama.jp/">くらしのマーケット - くらべておトク、プロのお仕事。</a></h3>
 <div class="outline-text-3" id="text-org4b38cd4">
 <p>
リフォームで役に立つ。
</p>
</div>
</div>
</div>
 <div id="outline-container-org60b5c24" class="outline-2">
 <h2 id="org60b5c24"> <a href="#org60b5c24">Backlinks</a></h2>
 <div class="outline-text-2" id="text-org60b5c24">
 <ul class="org-ul"> <li> <a href="./20210615222732-project.html">project</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20210811223913-money.html"/>
  <id>https://kijimad.github.io/roam/20210811223913-money.html</id>
  <updated>2025-06-14T00:00:00+09:00</updated>
</entry>
<entry>
  <title>History</title>
  <author><name>root</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orgfbb0923" class="outline-2">
 <h2 id="orgfbb0923"> <a href="#orgfbb0923">概要</a></h2>
 <div class="outline-text-2" id="text-orgfbb0923">
 <p>
職業プログラマーとしての履歴や展望を記載する。 <img src="./images/20241128-kijima.png" alt="20241128-kijima.png"></img></p>

 <p>
基本的な情報。
</p>

 <table> <colgroup> <col class="org-left"></col> <col class="org-left"></col></colgroup> <thead> <tr> <th scope="col" class="org-left"> </th>
 <th scope="col" class="org-left"> </th>
</tr></thead> <tbody> <tr> <td class="org-left">氏名</td>
 <td class="org-left">貴島 大悟 Kijima Daigo</td>
</tr> <tr> <td class="org-left">生年月日</td>
 <td class="org-left">1998-03-28</td>
</tr> <tr> <td class="org-left">居住地</td>
 <td class="org-left">東京</td>
</tr> <tr> <td class="org-left">最終学歴</td>
 <td class="org-left">鹿児島大学 法文学部</td>
</tr> <tr> <td class="org-left">GitHub</td>
 <td class="org-left"> <a href="https://github.com/kijimaD">kijimaD</a></td>
</tr></tbody></table> <ul class="org-ul"> <li>GitHubの <a href="https://github.com/kijimaD/central">統計情報</a></li>
</ul></div>
</div>
 <div id="outline-container-org2ad52d2" class="outline-2">
 <h2 id="org2ad52d2"> <a href="#org2ad52d2">技術スタック</a></h2>
 <div class="outline-text-2" id="text-org2ad52d2">
 <p>
メインでバックエンドサーバ開発、サブでインフラ領域まで業務を行ってきた。今後もバックエンド領域に注力していこうと考えている。
</p>

 <ul class="org-ul"> <li> <a href="20210911113057-go.html#ID-7cacbaa3-3995-41cf-8b72-58d6e07468b1">Go</a></li>
 <li> <a href="20210901101339-rust.html#ID-ddc21510-6693-4c1e-9070-db0dd2a8160b">Rust</a></li>
 <li> <a href="20210805005543-docker.html#ID-1658782a-d331-464b-9fd7-1f8233b8b7f8">Docker</a></li>
 <li> <a href="20220427215330-github_actions.html#ID-2d35ac9e-554a-4142-bba7-3c614cbfe4c4">GitHub Actions</a></li>
 <li> <a href="20230119001157-openapi.html#ID-a833c386-3cca-49eb-969a-5af58991250d">OpenAPI</a></li>
 <li> <a href="20210922010846-terraform.html#ID-9f6b36fd-a680-42db-a6f4-0ea21b355bc2">Terraform</a></li>
 <li> <a href="20210831232330-typescript.html#ID-ad1527ee-63b3-4a9b-a553-10899f57c234">TypeScript</a></li>
 <li> <a href="20210509095513-ruby.html#ID-cfd092c4-1bb2-43d3-88b1-9f647809e546">Ruby</a></li>
 <li> <a href="20221211233726-php.html#ID-82360e75-76ce-4efa-aa24-f93adfce1f50">PHP</a></li>
</ul></div>
</div>
 <div id="outline-container-orgbd89acd" class="outline-2">
 <h2 id="orgbd89acd"> <a href="#orgbd89acd">OSS活動</a></h2>
 <div class="outline-text-2" id="text-orgbd89acd">
 <ul class="org-ul"> <li> <a href="https://melpa.org/#/?q=kijimad">MELPA</a>,  <a href="https://rubygems.org/profiles/kijimaD">Rubygems</a>,  <a href="https://www.npmjs.com/~kijimad">npm</a>,  <a href="https://pkg.go.dev/search?q=kijimaD">Go Packages</a>でのソフトウェア公開</li>
 <li>各種OSSへのコントリビュート</li>
</ul></div>
</div>
 <div id="outline-container-orgc1516ab" class="outline-2">
 <h2 id="orgc1516ab"> <a href="#orgc1516ab">職務経歴詳細</a></h2>
 <div class="outline-text-2" id="text-orgc1516ab">
 <p>
経歴の全体像を示す。
</p>


 <div id="orgb243efe" class="figure">
 <p> <img src="./images/20240430-history.drawio.svg" alt="20240430-history.drawio.svg" class="org-svg"></img></p>
 <p> <span class="figure-number">Figure 1: </span>経歴の全体像</p>
</div>

 <p>
会社ごとに、参加したプロジェクトを列挙する。
</p>
</div>
 <div id="outline-container-orgf997c82" class="outline-3">
 <h3 id="orgf997c82"> <a href="#orgf997c82">株式会社リアルグローブ(2022-11 ~ 現在)</a></h3>
 <div class="outline-text-3" id="text-orgf997c82">
 <table> <colgroup> <col class="org-left"></col> <col class="org-left"></col></colgroup> <thead> <tr> <th scope="col" class="org-left"> </th>
 <th scope="col" class="org-left"> </th>
</tr></thead> <tbody> <tr> <td class="org-left">概要</td>
 <td class="org-left">地図系SaaSの開発</td>
</tr> <tr> <td class="org-left">フェーズ</td>
 <td class="org-left">仕様変更および追加開発</td>
</tr> <tr> <td class="org-left">チーム規模</td>
 <td class="org-left">2人程度</td>
</tr> <tr> <td class="org-left">担当範囲(横)</td>
 <td class="org-left">主にバックエンド開発</td>
</tr> <tr> <td class="org-left">担当範囲(縦)</td>
 <td class="org-left">設計、コーディング、テスト、レビュー</td>
</tr> <tr> <td class="org-left">使用技術</td>
 <td class="org-left">Go, React, GitHub Actions, AWS(Lambda, CloudFront, Aurora…)</td>
</tr> <tr> <td class="org-left">期間</td>
 <td class="org-left">2024-09 ~ 現在</td>
</tr></tbody></table> <ul class="org-ul"> <li> <p>
アプリケーション概要
</p>

 <p>
巨大な階層型組織の権限構造に合わせた、複雑な権限管理が可能な地図アプリケーション。REST APIによるSPA。
</p></li>

 <li> <p>
担当詳細
</p>

 <p>
リリース後のフェーズで参加し、大規模な仕様変更…要件の変化による、権限構造の改修…を主に担当した。今後のビジネスや販売プランに合わせて変更の可能性が高い部分を見極め、今後の変更に対応できるように再設計した。
仕様変更前に、テスト全体の改修やテーブルを整理した。各ケース個別の変更が難しくなっていたテストを、各テストケースでレコードを用意するように変更し仕様変更に対応しやすくした。そのあと仕様/実装変更に着手し、バックエンド、フロントエンド、ドキュメントを修正した。
</p></li>

 <li> <p>
アピールポイント
</p>

 <p>
粒度の異なるテストで守りつつ、仕様変更にかかる破壊的変更がなるべく少なくなるよう設計/段階的に実装した。稼働中のシステムへの影響を最小限にしつつ安全に作業を進めた。実装は期限内に完了し、仕様内容にかかる不具合が発生しなかった。事前事後のリファクタリングも含めて全体で半年ほどの期間がかかったが粘り強くやり切ることができた。
</p>

 <p>
人為的ミスを防ぐための各種CIの修正や追加した。テスト追加忘れ、OpenAPIやDBスキーマドキュメントの生成忘れを検知できるようにした。
</p>

 <p>
こまめな設計の共有や相談、焦点の明確なPRの提出によって、作業の手戻りが発生しなかった。
</p></li>
</ul> <hr></hr> <hr></hr> <table> <colgroup> <col class="org-left"></col> <col class="org-left"></col></colgroup> <thead> <tr> <th scope="col" class="org-left"> </th>
 <th scope="col" class="org-left"> </th>
</tr></thead> <tbody> <tr> <td class="org-left">概要</td>
 <td class="org-left">3D GISの開発(3DのGoogleMap的なもの)</td>
</tr> <tr> <td class="org-left">背景</td>
 <td class="org-left">開発元企業に出向し、自治体などに納入する3D GISのデスクトップを開発した</td>
</tr> <tr> <td class="org-left">フェーズ</td>
 <td class="org-left">開発 → 自治体への納入 → 運用および追加開発</td>
</tr> <tr> <td class="org-left">チーム規模</td>
 <td class="org-left">バックエンド1人(自分)、フロントエンド開発者5~10人、PM1~2人</td>
</tr> <tr> <td class="org-left">制約</td>
 <td class="org-left">クラウドサービス使用不可(AWS, GCP, GitHub)、本番環境でのインターネット接続不可</td>
</tr> <tr> <td class="org-left">担当範囲(横)</td>
 <td class="org-left">バックエンドサーバ開発、ランチャー開発</td>
</tr> <tr> <td class="org-left">担当範囲(縦)</td>
 <td class="org-left">要件定義、設計、コーディング、テスト、レビュー</td>
</tr> <tr> <td class="org-left">使用技術</td>
 <td class="org-left">Go, Linux, Windows, PostgresQL, Apache, GitHub Actions</td>
</tr> <tr> <td class="org-left">期間</td>
 <td class="org-left">2022-12 ~ 2024-10</td>
</tr></tbody></table> <ul class="org-ul"> <li>開発元会社の既存製品の3D GISの仕様をもとに、新しくWebアプリケーションを開発する業務</li>
 <li>バックエンドサーバ(Go)まわりを単独でシステム設計、実装、運用</li>
 <li>例: 権限、認証、ブックマーク、住所絞り込み検索、エクスポート、静的ファイル配信…</li>
 <li>※3D GISに必要な地物ファイル読み込み、描画や計測などの機能はすべてフロントエンド(Unity)がもっており、バックエンドサーバは地物データの内容と関与しない構成となっている
 <ul class="org-ul"> <li>フロントエンドが生ファイルを取得し、描画する構成。バックエンドサーバはURLその他の管理データの保存を担当する</li>
</ul></li>
</ul> <p>
苦労したこと。
</p>

 <ul class="org-ul"> <li>自治体向け製品の制約(LGWAN)で、本番環境はインターネットを使用できず、マネージドサービスを利用できない点</li>
 <li>組織の制約で、インフラ部分は一切設定を変更できない</li>
</ul> <p>
アピールポイント。
</p>

 <ul class="org-ul"> <li>納品を遅延なく完了した</li>
 <li>高いテストカバー率で、導入後の不具合や障害が発生しなかった</li>
 <li>プロダクトの要件により、クロスプラットフォーム( <a href="20220108110637-linux.html#ID-7a81eb7c-8e2b-400a-b01a-8fa597ea527a">Linux</a>,  <a href="20230308002933-windows.html#ID-a15d346a-f82e-4796-a78b-85a8d227f0ef">Windows</a>)、マルチDB(SQLite,  <a href="20210905195215-postgresql.html#ID-752d725e-b834-4784-8110-c58f89bd4fa2">PostgreSQL</a>)対応。 <a href="20220212141124-ci.html#ID-eaf6ed04-7927-4a16-ba94-fbb9f6e76166">CI</a>によって、複数の組み合わせで検証した</li>
 <li>Web方面にもっともスキルがあるエンジニアとしてチームをリードした</li>
</ul></div>
</div>
 <div id="outline-container-orga836db6" class="outline-3">
 <h3 id="orga836db6"> <a href="#orga836db6">株式会社資格スクエア(2021-12 ~ 2022-08) ⚠ 会社分割による移籍で、業務内容は変わっていない</a></h3>
 <div class="outline-text-3" id="text-orga836db6">
 <table> <colgroup> <col class="org-left"></col> <col class="org-left"></col></colgroup> <thead> <tr> <th scope="col" class="org-left"> </th>
 <th scope="col" class="org-left"> </th>
</tr></thead> <tbody> <tr> <td class="org-left">概要</td>
 <td class="org-left">資格教育サービスの開発</td>
</tr> <tr> <td class="org-left">背景</td>
 <td class="org-left">難関資格取得を目指す顧客の勉強や添削をサポートするサービス</td>
</tr> <tr> <td class="org-left">フェーズ</td>
 <td class="org-left">保守、機能追加</td>
</tr> <tr> <td class="org-left">チーム規模</td>
 <td class="org-left">5人程度</td>
</tr> <tr> <td class="org-left">制約</td>
 <td class="org-left">会社分割/チーム縮退のため部分的に知見のある開発者がいない部分がある</td>
</tr> <tr> <td class="org-left">担当範囲(横)</td>
 <td class="org-left">バックエンド、インフラ</td>
</tr> <tr> <td class="org-left">担当範囲(縦)</td>
 <td class="org-left">設計、コーディング、テスト、レビュー</td>
</tr> <tr> <td class="org-left">使用技術</td>
 <td class="org-left">Ruby on Rails, ECS, EC2, GitHub Actions</td>
</tr> <tr> <td class="org-left">期間</td>
 <td class="org-left">2021-12 ~ 2022-08</td>
</tr></tbody></table> <p>
会社分割による、株式会社サイトビジットからの移籍。業務内容は変わらない。
</p>

 <ul class="org-ul"> <li>プロジェクト
 <ul class="org-ul"> <li>マイページをリプレイス(5人程度のチーム)
 <ul class="org-ul"> <li>リプレイスのベースとなる部分のAPI担当</li>
</ul></li>
 <li>本番サービスコンテナ移行(単独)
 <ul class="org-ul"> <li>稼働中の <a href="20210509095946-rails.html#ID-e04aa1a3-509c-45b2-ac64-53d69c961214">Rails</a>サービスをEC2 → ECSへ移行した</li>
 <li>数年間EC2インスタンスで稼働していたRailsサービス</li>
 <li>CI/CDも含めて切り替え</li>
 <li>ダウンタイム・障害なし</li>
</ul></li>
 <li>サービスのメイン機能リプレイス(5人程度のチーム)
 <ul class="org-ul"> <li>API担当</li>
</ul></li>
</ul></li>

 <li>特筆事項
 <ul class="org-ul"> <li>開発環境のdocker-composeの整備を行い、WEB開発をすべて <a href="20210805005543-docker.html#ID-1658782a-d331-464b-9fd7-1f8233b8b7f8">Docker</a>上で行えるようにした</li>
 <li>CIテストで本番環境に準拠する <a href="20210805005543-docker.html#ID-1658782a-d331-464b-9fd7-1f8233b8b7f8">Docker</a>イメージを作成し使うようにした。本番環境に近い形でテストを行えるようにした</li>
 <li>本番環境のアップグレード。 <a href="20210509095513-ruby.html#ID-cfd092c4-1bb2-43d3-88b1-9f647809e546">Ruby</a> 2.7.1 -> 2.7.4,  <a href="20210509095946-rails.html#ID-e04aa1a3-509c-45b2-ac64-53d69c961214">Rails</a> 6.0 -> 6.1。</li>
 <li>1月度のMVPを受賞した</li>
</ul></li>
</ul> <hr></hr></div>
</div>
 <div id="outline-container-org917fec5" class="outline-3">
 <h3 id="org917fec5"> <a href="#org917fec5">株式会社サイトビジット(2020-10 ~ 2021-12)</a></h3>
 <div class="outline-text-3" id="text-org917fec5">
 <table> <colgroup> <col class="org-left"></col> <col class="org-left"></col></colgroup> <thead> <tr> <th scope="col" class="org-left"> </th>
 <th scope="col" class="org-left"> </th>
</tr></thead> <tbody> <tr> <td class="org-left">概要</td>
 <td class="org-left">資格教育サービスの開発</td>
</tr> <tr> <td class="org-left">背景</td>
 <td class="org-left">難関資格取得を目指す顧客の勉強や添削をサポートするサービス</td>
</tr> <tr> <td class="org-left">フェーズ</td>
 <td class="org-left">保守、機能追加</td>
</tr> <tr> <td class="org-left">チーム規模</td>
 <td class="org-left">8人程度</td>
</tr> <tr> <td class="org-left">制約</td>
 <td class="org-left">サービス開始から数年経過し、部分的に負債が溜まっている部分がある</td>
</tr> <tr> <td class="org-left">担当範囲(横)</td>
 <td class="org-left">バックエンド、インフラ</td>
</tr> <tr> <td class="org-left">担当範囲(縦)</td>
 <td class="org-left">設計、コーディング、テスト、レビュー</td>
</tr> <tr> <td class="org-left">使用技術</td>
 <td class="org-left">Ruby on Rails, ECS, EC2, GitHub Actions</td>
</tr> <tr> <td class="org-left">期間</td>
 <td class="org-left">2020-10 ~ 2021-12</td>
</tr></tbody></table> <ul class="org-ul"> <li>特筆事項
 <ul class="org-ul"> <li>バックエンド、フロントエンド、テスト、インフラの業務を行った。既存の中規模リポジトリの保守運用</li>
 <li>テスト開発のリーダーとしてテストを書きまくり、 <a href="20210831223434-rspec.html#ID-afccf86d-70b8-44c0-86a8-cdac25f7dfd3">RSpec</a>カバレッジ率を向上(78% → 90%)させた。カバレッジ率を定期的にアナウンスすることで、チームに浸透させた。</li>
 <li>失敗率の高いテスト修正によるCI安定化</li>
 <li>YouTube Analyticsを独自に詳細分析するGASプログラムを作成</li>
 <li>古いバージョンのRedashのデータ移行を伴う <a href="20210805005543-docker.html#ID-1658782a-d331-464b-9fd7-1f8233b8b7f8">Docker</a>環境移行</li>
 <li>中規模のテーブル移行を伴う機能改修プロジェクト担当</li>
</ul></li>
</ul> <hr></hr></div>
</div>
 <div id="outline-container-orgb7833b1" class="outline-3">
 <h3 id="orgb7833b1"> <a href="#orgb7833b1">テンプレート</a></h3>
 <div class="outline-text-3" id="text-orgb7833b1">
 <table> <colgroup> <col class="org-left"></col> <col class="org-left"></col></colgroup> <thead> <tr> <th scope="col" class="org-left"> </th>
 <th scope="col" class="org-left"> </th>
</tr></thead> <tbody> <tr> <td class="org-left">概要</td>
 <td class="org-left"> </td>
</tr> <tr> <td class="org-left">背景</td>
 <td class="org-left"> </td>
</tr> <tr> <td class="org-left">フェーズ</td>
 <td class="org-left"> </td>
</tr> <tr> <td class="org-left">チーム規模</td>
 <td class="org-left"> </td>
</tr> <tr> <td class="org-left">制約</td>
 <td class="org-left"> </td>
</tr> <tr> <td class="org-left">担当範囲(横)</td>
 <td class="org-left"> </td>
</tr> <tr> <td class="org-left">担当範囲(縦)</td>
 <td class="org-left"> </td>
</tr> <tr> <td class="org-left">使用技術</td>
 <td class="org-left"> </td>
</tr> <tr> <td class="org-left">期間</td>
 <td class="org-left"> </td>
</tr></tbody></table> <p>
業務の詳細。
</p>

 <p>
苦労したこと。
</p>

 <p>
アピールポイント。
</p>

 <hr></hr></div>
</div>
</div>
 <div id="outline-container-org9849090" class="outline-2">
 <h2 id="org9849090"> <a href="#org9849090">RAQ</a></h2>
 <div class="outline-text-2" id="text-org9849090">
</div>
 <div id="outline-container-orga806e74" class="outline-3">
 <h3 id="orga806e74"> <a href="#orga806e74">キャリアをどう考えているか</a></h3>
 <div class="outline-text-3" id="text-orga806e74">
 <p>
どういったキャリアを考えているかを示す。
</p>

 <ul class="org-ul"> <li> <code>MUST</code> プログラマー(専門職)
 <ul class="org-ul"> <li>コードを書いたり設計するのが好きだから</li>
 <li>プライベートでの趣味と仕事を相互に活かせるから。何かを作るのが好きである</li>
</ul></li>
 <li> <code>SHOULD</code> バックエンドプログラマー
 <ul class="org-ul"> <li>だけ、というわけではないがメインにしたい。必要に応じてフロントエンドでもインフラでもやる</li>
 <li>バックエンドはシステムに必須だから(究極的にはフロントエンドは必要ないと考えている…)</li>
 <li>数年間実際に手を動かして開発してきて、楽しさ、やりがいを感じているから</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org3acd7eb" class="outline-3">
 <h3 id="org3acd7eb"> <a href="#org3acd7eb">会社選びの軸は何か</a></h3>
 <div class="outline-text-3" id="text-org3acd7eb">
 <p>
業界から候補にするケースと、ポストから候補にするケースがある。
</p>

 <ul class="org-ul"> <li> <code>MUST</code>: 必須</li>
 <li> <code>SHOULD</code>: あればいいくらい</li>
</ul> <hr></hr> <p>
業界。
</p>

 <p>
よいアプリケーションを作るには、そのアプリケーションが置かれた文脈、ビジネスサイド知識が必要である。が、業務時間だけで業界の背景から学ぶのは難しいことが多いので、プライベートの時間を使わなければならない。そのとき、興味あるいは個人として役立たなければ取り組むのは難しく感じる。
</p>

 <ul class="org-ul"> <li> <code>SHOULD</code> 知的好奇心が持てる
 <ul class="org-ul"> <li>実際に何冊か本を読むなど取り組んでみて、より深く知りたいと思える</li>
</ul></li>
 <li> <code>SHOULD</code> 個人として役立つ
 <ul class="org-ul"> <li>普遍的な領域は確実に役立つのでモチベーションになる。たとえば法律、会計、語学など</li>
</ul></li>
</ul> <p>
具体的な業界候補。
</p>

 <ul class="org-ul"> <li> <code>SHOULD</code> 不動産
 <ul class="org-ul"> <li>不動産事業を行う予定があるため。利益関係者の多い業界で一部でも不動産業界に詳しくなっておくことは意味があることに見える</li>
 <li>大きな額が動く割に(パイが大きい割に)、まだITが食い込める余地があるように見える</li>
</ul></li>
 <li> <code>SHOULD</code> 金融
 <ul class="org-ul"> <li>シビアな要件においてどのように設計するか、実装するかは学びになるだろうと考えている。また、個人の生活やビジネスにおいても強みになるように見える</li>
 <li>世の中を理解する視点として役立ちそうに見える</li>
</ul></li>
</ul> <hr></hr> <p>
会社。
</p>

 <ul class="org-ul"> <li> <code>MUST</code> 開発経験を活かせる
 <ul class="org-ul"> <li>経験のある技術スタックを活かせること。成果を安定して出せる可能性が高いため</li>
 <li>活かしつつ、少しづつより難しい/面白そうな分野に挑戦できるのがベスト</li>
</ul></li>
 <li> <code>MUST</code> 会社として優れた技術力がある
 <ul class="org-ul"> <li>熱意や優秀さは集団の中で伝播していくと考えている。経験的に、身近な優秀な人に刺激を受けることが多い</li>
 <li>ナレッジを共有する文化や体制があると、自分が新しいことを得たり、他者を助けることができる</li>
</ul></li>
</ul> <hr></hr> <p>
ポスト。
</p>

 <ul class="org-ul"> <li> <code>SHOULD</code> 専門性の高いエンジニアリング分野であること
 <ul class="org-ul"> <li>配信基盤、認証基盤、超高トラフィックサーバといった技術クリティカルな分野。個人的な興味と合った高度な分野に取り組めるのはよさそうに見える。数が少なく競争率が高いので、あまり重視していない</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org834d46a" class="outline-3">
 <h3 id="org834d46a"> <a href="#org834d46a">プライベートの興味・関心</a></h3>
 <div class="outline-text-3" id="text-org834d46a">
 <p>
プライベートの、興味の方向性を示す。現実でやっている仕事と100%一致しているわけではない。
</p>

 <ul class="org-ul"> <li> <p>
低レイヤの知識が必要な領域
</p>

 <p>
コンピュータに関する疑問を出発点としていくつか学んでおり、おもしろさを感じている。これを仕事に活かしたいと考えている。コンピュータに関する知識は、根本のアイデアはとてもシンプルなことが多く見える。理解できたときに嬉しさと美しさを感じる。また、知的好奇心を満たしてくれるのとともに、アプリケーションレベルの問題解決に役立てることができる。直感的でない挙動を理解したり、あるいは応用可能な強力な基礎となって設計や実装に役立てることができる。あくまでアプリケーションを作るうえでの武器にしたい、そういう知識が必要になるアプリケーションを作りたいということで、低レイヤそのものを仕事にしたいのとは微妙に異なる(能力も足りていない)。
</p></li>

 <li> <p>
自分で使うツールを作る
</p>

 <p>
プログラマーが使うツールやライブラリの開発に興味を持ち、知識を深めている。たとえば、Linter/プログラミング言語/ <a href="20220212141124-ci.html#ID-eaf6ed04-7927-4a16-ba94-fbb9f6e76166">CI</a>/ <a href="20210508234743-emacs.html#ID-1ad8c3d5-97ba-4905-be11-e6f2626127ad">Emacs</a>プラグイン…などがある。余暇にいくつかのツールを開発しているが、ほとんどのケースは自分が必要にかられたことをモチベーションとして開発した。Web開発者としても、プログラマーがターゲットになっている、ドッグフーディングできるようなサービスに参画できるのがベストだろうと考えている。
</p></li>
</ul> <script defer="defer" src="https://cdnjs.cloudflare.com/ajax/libs/d3/7.2.1/d3.min.js" integrity="sha512-wkduu4oQG74ySorPiSRStC0Zl8rQfjr/Ty6dMvYTmjZw6RS5bferdx8TR7ynxeh79ySEp/benIFFisKofMjPbg==" crossorigin="anonymous" referrerpolicy="no-referrer"></script> <script defer="defer" src="js/graph.js"></script> <div id="main-graph">
   <svg> <defs> <filter x="0" y="0" width="1" height="1" id="solid"> <feflood flood-color="#f7f7f7" flood-opacity="0.9"></feflood> <fecomposite in="SourceGraphic" operator="xor"></fecomposite></filter></defs> <rect width="100%" height="100%" fill-opacity="0"></rect></svg></div>
</div>
</div>
 <div id="outline-container-orgfccee93" class="outline-3">
 <h3 id="orgfccee93"> <a href="#orgfccee93">やりたいプロジェクトの方向性</a></h3>
 <div class="outline-text-3" id="text-orgfccee93">
 <p>
やりたいと考える傾向があるプロジェクトを示し、価値観や方向性を表現する。細かく言い出すと無限にあるので、もっとも重視する3つを挙げる。あくまで「やりたい」であって、条件ではない。
</p>

 <ol class="org-ol"> <li> <code>SHOULD</code> 製品を自分で使えるプロジェクト
 <ul class="org-ul"> <li>余暇で作ってきたものはほとんど自分が使うもので、モチベーションを高く保ち続けてきた</li>
 <li>自分で使うことによって、使うプロダクトやユーザを理解できる。そして作り直しながら使うことで、モチベーションを高められる</li>
</ul></li>
 <li> <code>SHOULD</code> 自分の意見を出す余地がある、出しやすい雰囲気のあるプロジェクト
 <ul class="org-ul"> <li>製品の文脈や背景を理解し、自分やチームが納得、合意したうえで開発を進めていきたい。視点の数と多様性によってよい製品になると考えていて、自分もその視点の1つとして責任を果たせると思っている</li>
</ul></li>
 <li> <code>SHOULD</code> コンピューティング自体が本質的価値であるプロジェクト
 <ul class="org-ul"> <li>例. IaaS, CI, CD, Monitoring, Logging, ミドルウェア開発…</li>
 <li>コンピュータに興味が強い(製品の本質的価値と興味の適合)</li>
 <li>開発に比較的低レイヤーの知識を必要とする傾向があるとよい(必要となる技術領域と興味の適合)</li>
</ul></li>
</ol></div>
</div>
 <div id="outline-container-orga1ee934" class="outline-3">
 <h3 id="orga1ee934"> <a href="#orga1ee934">勤務規則に必要なこと</a></h3>
 <div class="outline-text-3" id="text-orga1ee934">
 <ul class="org-ul"> <li> <code>MUST</code> ホストマシンにLinuxがインストールされたPCで仕事ができること。ウィンドウマネージャが自分の使い慣れた環境(EXWM)でないと、キーバインドがすべて違うので作業が難しい</li>
 <li> <code>MUST</code> 週1~2回程度の出社頻度であること。移動に時間を取られたくないのと、静かな環境でないと集中できないので。また、会う頻度が少なすぎても関係を広げたり、会社やチームとしての一体感を感じるのが難しいと感じるため</li>
</ul></div>
</div>
</div>
 <div id="outline-container-orgc2fdaf7" class="outline-2">
 <h2 id="orgc2fdaf7"> <a href="#orgc2fdaf7">プライベート年表</a></h2>
 <div class="outline-text-2" id="text-orgc2fdaf7">
</div>
 <div id="outline-container-org963a76b" class="outline-3">
 <h3 id="org963a76b"> <a href="#org963a76b">2025年</a></h3>
 <div class="outline-text-3" id="text-org963a76b">
 <ul class="org-ul"> <li>自作RPG  <a href="https://github.com/kijimaD/ruins">ruins</a>の機能追加した
 <ul class="org-ul"> <li>戦闘システムを追加した</li>
</ul></li>
 <li>トレーディングカード風画像ジェネレーター <a href="https://github.com/kijimaD/tcg">tcg</a>を作成した</li>
 <li> <a href="https://github.com/kijimaD/na2me">na2me</a>を拡張した
 <ul class="org-ul"> <li>タグを機械的に追加する機能を追加した</li>
 <li>画像を共通のサイズへ切り出し・フィルタ処理をかけられるようにした。背景画像の準備を楽にした</li>
 <li>夏目漱石以外のほかの本も追加した</li>
 <li>しおり機能を追加した。ファイル/ローカルストレージによって永続化する</li>
</ul></li>
 <li>長期休暇を取り1ヶ月アメリカを旅した
 <ul class="org-ul"> <li>ロサンゼルス → ラスベガス → サンフランシスコ → シカゴ → ナイアガラ(アメリカ) → ナイアガラ(カナダ) → ニューヨーク</li>
</ul></li>
 <li>ブラウザで動くバイナリビューワ <a href="https://github.com/kijimaD/bview">bview</a>を作成した</li>
</ul></div>
</div>
 <div id="outline-container-orga2a974a" class="outline-3">
 <h3 id="orga2a974a"> <a href="#orga2a974a">2024年</a></h3>
 <div class="outline-text-3" id="text-orga2a974a">
 <ul class="org-ul"> <li>Electronと <a href="20210911113057-go.html#ID-7cacbaa3-3995-41cf-8b72-58d6e07468b1">Go</a>でRSSフィードビューワ <a href="https://github.com/kijimaD/squall">squall</a>を作成した</li>
 <li>ローカル用のPDFビューワ <a href="https://github.com/kijimaD/shelf">shelf</a>を作成した</li>
 <li> <a href="https://github.com/kijimaD/ruins">自作ローグライクRPG</a>の機能追加した
 <ul class="org-ul"> <li> <a href="https://krkrz.github.io/">吉里吉里Z</a>ライクなシンタックスで記述できるメッセージシステムを追加した</li>
 <li>インベントリシステム(使用、装備、取得、廃棄)を追加した</li>
 <li>フィールド上を移動できるようにした</li>
</ul></li>
 <li> <a href="20240721122010-x_window_system.html#ID-1319483b-3976-4a2c-b5b9-08f79fcc32be">X Window System</a>用のスクリーンルーラー <a href="https://github.com/kijimaD/xruler">xruler</a>を作った</li>
 <li>ノベルゲームエンジン <a href="https://github.com/kijimaD/nova">nova</a>を作成した</li>
 <li>自作ノベルゲームエンジンで夏目漱石の作品を記述した <a href="https://github.com/kijimaD/na2me">na2me</a>を作った
 <ul class="org-ul"> <li>プレイ:  <a href="https://kijimad.github.io/na2me/">kijimad.github.io/na2me/</a></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org90ef94d" class="outline-3">
 <h3 id="org90ef94d"> <a href="#org90ef94d">2023年</a></h3>
 <div class="outline-text-3" id="text-org90ef94d">
 <ul class="org-ul"> <li> <a href="20220427215330-github_actions.html#ID-2d35ac9e-554a-4142-bba7-3c614cbfe4c4">GitHub Actions</a>ライクなシンタックスで書けるタスクランナー <a href="https://github.com/kijimaD/gorun">gorun</a>を作成した</li>
 <li>CLIでパズルゲームの倉庫番を楽しめる <a href="https://github.com/kijimaD/sokoban">sokoban</a>をスクラッチで作成した</li>
 <li> <a href="20230119001157-openapi.html#ID-a833c386-3cca-49eb-969a-5af58991250d">OpenAPI</a>バリデーションツール <a href="https://github.com/kijimaD/oav">oav</a>を作成した</li>
 <li>ミニマルなCPUエミュレータ <a href="https://github.com/kijimaD/minicpu">minicpu</a>を作成した。本を参考に、 <a href="20210911113057-go.html#ID-7cacbaa3-3995-41cf-8b72-58d6e07468b1">Go</a>で書き直した</li>
 <li>nand2tetrisの <a href="https://github.com/kijimaD/n2t/tree/main/asm">アセンブラ</a>をGoで書いた</li>
 <li>高速な通知ビューワ <a href="https://github.com/kijimaD/garbanzo">garbanzo</a>を作成した</li>
 <li>手作りのWebサーバ <a href="https://github.com/kijimaD/gsrv">gsrv</a>を作成した</li>
 <li>環境構築スクリプトをGoで書き直して、共通部分をライブラリ化した( <a href="https://github.com/kijimaD/silver">silver</a>)</li>
 <li>Gitタグを元にファイルに記載されたバージョンを書き換えるコマンドラインツール <a href="https://github.com/kijimaD/carve">carve</a>を作成した</li>
 <li> <a href="20210911113057-go.html#ID-7cacbaa3-3995-41cf-8b72-58d6e07468b1">Go</a>のアセンブリコードを出力するorg-babel拡張 <a href="https://github.com/kijimaD/ob-go-asm">ob-go-asm</a>を作成した</li>
 <li> <a href="https://github.com/prasathmani/tinyfilemanager">tinyfilemanager</a>にファイルアップロードするコマンドラインツール <a href="https://github.com/kijimaD/upl">upl</a>を作成した
 <ul class="org-ul"> <li>ブラウザでのアップロードが制限されている特殊環境で、Tiny File ManagerがAPIリクエスト非対応だったため作成した…</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org8955106" class="outline-3">
 <h3 id="org8955106"> <a href="#org8955106">2022年</a></h3>
 <div class="outline-text-3" id="text-org8955106">
 <ul class="org-ul"> <li>このサイトの開発環境・自動テスト・デプロイを <a href="20210805005543-docker.html#ID-1658782a-d331-464b-9fd7-1f8233b8b7f8">Docker</a>コンテナで行うようにした(ビルドが <a href="20210508234743-emacs.html#ID-1ad8c3d5-97ba-4905-be11-e6f2626127ad">Emacs</a>,  <a href="20210509095513-ruby.html#ID-cfd092c4-1bb2-43d3-88b1-9f647809e546">Ruby</a>,  <a href="20210725134208-python.html#ID-a6c9c9ad-d9b1-4e13-8992-75d8590e464c">Python</a>, sqliteに依存する)。本番環境の <a href="20210926103926-github.html#ID-6b889822-21f1-4a3e-9755-e3ca52fa0bc4">GitHub</a> Pagesへの展開と、ステージング用の <a href="20220207002732-heroku.html#ID-b1541b6a-f4aa-4751-b270-7ced303f8985">Heroku</a>へのコンテナデプロイ</li>
 <li>リポジトリの更新されていないファイルをコメントする <a href="20220427215330-github_actions.html#ID-2d35ac9e-554a-4142-bba7-3c614cbfe4c4">GitHub Actions</a>、  <a href="https://github.com/kijimaD/StaleFile">StaleFile</a>を作成した。 <a href="https://github.com/marketplace/actions/stalefile">GitHub Marketplace</a>で公開した</li>
 <li>パーマリンクからコードを展開する <a href="20210508234743-emacs.html#ID-1ad8c3d5-97ba-4905-be11-e6f2626127ad">Emacs</a>拡張 <a href="https://github.com/kijimaD/ob-git-permalink">ob-git-permalink</a>を作成してMelpaに投稿し、マージされた。</li>
 <li>ローグライクdigger_rsの作成(WIP)</li>
 <li>自分用にカスタマイズしたUbuntuのisoイメージを作成した。USBに焼いて、すぐ自分用のクリーンな環境のマシンを作れるようになった</li>
 <li>設定ファイルからgit管理してgit cloneを行える <a href="https://github.com/kijimaD/gclone">gclone</a>を作成した</li>
 <li>GitHubの活動統計をとる <a href="https://github.com/kijimaD/act">act</a>を作成した</li>
 <li>actを使ってリポジトリに情報を蓄積する <a href="https://github.com/kijimaD/central">central</a>を作成した</li>
 <li>GitHubの言語の色に基づいたSVGバッジを生成する <a href="https://github.com/kijimaD/maru">maru</a>を作成した</li>
 <li>ライフゲームwebアプリ <a href="https://github.com/kijimaD/golife">golife</a>を作成した</li>
 <li> <a href="20210926103926-github.html#ID-6b889822-21f1-4a3e-9755-e3ca52fa0bc4">GitHub</a>のコードレビュー返信ツール <a href="https://github.com/kijimaD/gar">gar</a>を作成した</li>
 <li>Emacsの設定ファイルを文書化した
 <ul class="org-ul"> <li> <a href="https://kijimad.github.io/.emacs.d/">Kijimad Emacs Config</a></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org2c49818" class="outline-3">
 <h3 id="org2c49818"> <a href="#org2c49818">2021年</a></h3>
 <div class="outline-text-3" id="text-org2c49818">
 <ul class="org-ul"> <li> <a href="20210902220546-react.html#ID-dc50d818-d7d1-48a8-ad76-62ead617c670">React</a>を学ぶためにカンバンアプリ <a href="https://github.com/kijimaD/kanbany">kanbany</a>を作成した。</li>
 <li>Slackの絵文字カウンターをGoogle App Scriptで作成した。 <a href="https://github.com/kijimaD/slack-emoji-counter">kijimaD/slack-emoji-counter</a></li>
 <li> <a href="20210508234743-emacs.html#ID-1ad8c3d5-97ba-4905-be11-e6f2626127ad">Emacs</a>パッケージ <a href="https://github.com/kijimaD/current-word-highlight">current-word-highlight</a>を作成した。パッケージ管理システムリポジトリMelpaに投稿し、マージされた。(file:  <a href="20250501T191528--kdoc-354-ワード移動を可視化するパッケージを作る__project.html#ID-20250501T191528">KDOC 354: current-word-highlight</a>)</li>
 <li>Chrome拡張CreateLinkの、 <a href="20210508234743-emacs.html#ID-1ad8c3d5-97ba-4905-be11-e6f2626127ad">Emacs</a>バージョン <a href="https://github.com/kijimaD/create-link">create-link</a>を作成した。Melpaに投稿し、マージされた。 <a href="20210512001700-create_link.html#ID-f0cefeef-6f99-4ce2-bff7-db6e508f2c84">create-link</a></li>
 <li> <a href="20210511013549-textlint.html#ID-d3394774-aba5-4167-bd18-f194eb2bd9ed">TextLint</a>の、orgファイルに対応させる拡張 <a href="https://github.com/kijimaD/textlint-plugin-org">textlint-plugin-org</a>を作成、npmで公開した。 <a href="https://github.com/textlint/textlint">TextLintのREADME</a>にリンクを掲載した。(file:  <a href="20210511013549-textlint.html#ID-d3394774-aba5-4167-bd18-f194eb2bd9ed">TextLint</a>)</li>
 <li> <a href="20210509095513-ruby.html#ID-cfd092c4-1bb2-43d3-88b1-9f647809e546">Ruby</a>でローグライクを作成した(未完)。 <a href="20210624232811-digger.html#ID-70f249a8-f8c8-4a7e-978c-8ff04ffd09c0">digger</a></li>
 <li> <a href="20210508234743-emacs.html#ID-1ad8c3d5-97ba-4905-be11-e6f2626127ad">Emacs</a>のプロンプトテーマのPRがマージされた。 <a href="https://github.com/xuchunyang/eshell-git-prompt/pull/10">https://github.com/xuchunyang/eshell-git-prompt/pull/10</a></li>
 <li> <a href="20210508234743-emacs.html#ID-1ad8c3d5-97ba-4905-be11-e6f2626127ad">Emacs</a>の簡易ポータブル英和辞書を作成した。 <a href="https://github.com/kijimaD/ej-dict">https://github.com/kijimaD/ej-dict</a>  <a href="20210817094357-ej_dict.html#ID-4bfa17d7-18db-47d5-9f3c-5f3bb3c3231f">ej-dict</a></li>
 <li> <a href="20210922005532-projectile.html#ID-cddd7435-414b-4f6b-bfbf-90c6c1bd77f0">projectile</a>のバグを修正するPRがマージされた。 <a href="https://github.com/bbatsov/projectile/pull/1700">https://github.com/bbatsov/projectile/pull/1700</a></li>
 <li> <a href="20210922005532-projectile.html#ID-cddd7435-414b-4f6b-bfbf-90c6c1bd77f0">projectile</a>の機能追加のPRがマージされた。 <a href="https://github.com/bbatsov/projectile/pull/1702">https://github.com/bbatsov/projectile/pull/1702</a></li>
 <li> <a href="20210922005532-projectile.html#ID-cddd7435-414b-4f6b-bfbf-90c6c1bd77f0">projectile</a>のバグ修正のPRがマージされた。 <a href="https://github.com/bbatsov/projectile/pull/1713">https://github.com/bbatsov/projectile/pull/1713</a></li>
 <li>その他誤字、broken linkの修正などでcontributeした。</li>
 <li>GemfileをエクスポートするgemをRubyGemsで公開した。  <a href="https://github.com/kijimaD/gemat">https://github.com/kijimaD/gemat</a></li>
</ul></div>
</div>
 <div id="outline-container-org4e23853" class="outline-3">
 <h3 id="org4e23853"> <a href="#org4e23853">2020年</a></h3>
 <div class="outline-text-3" id="text-org4e23853">
 <ul class="org-ul"> <li>本のコードをベースに拡張し、 <a href="20210509095513-ruby.html#ID-cfd092c4-1bb2-43d3-88b1-9f647809e546">Ruby</a>でシューティングゲームを作った。  <a href="https://github.com/kijimaD/ban-ban-don">https://github.com/kijimaD/ban-ban-don</a></li>
 <li>鹿児島大学を卒業し、就職のため東京に引っ越した。</li>
 <li>フルタイムでプログラマーとして働きはじめた。少人数のチームだったため様々なことを行う必要があった。  <a href="20210509095946-rails.html#ID-e04aa1a3-509c-45b2-ac64-53d69c961214">Rails</a>  <a href="20210509100112-javascript.html#ID-a6980e15-ecee-466e-9ea7-2c0210243c0d">JavaScript</a>  <a href="20210902220546-react.html#ID-dc50d818-d7d1-48a8-ad76-62ead617c670">React</a>  <a href="20210829232020-mysql.html#ID-7dab097c-60ba-43b9-949f-c58bf3151aa8">MySQL</a> GAS  <a href="20210831223434-rspec.html#ID-afccf86d-70b8-44c0-86a8-cdac25f7dfd3">RSpec</a> Circle CI など。</li>
 <li>初のOSSコントリビュートを行った。YouTube Analytics APIのドキュメントのリンクを修正するPRだった。  <a href="https://github.com/googleapis/google-api-ruby-client/pull/1649">https://github.com/googleapis/google-api-ruby-client/pull/1649</a></li>
</ul></div>
</div>
 <div id="outline-container-org3e22b8b" class="outline-3">
 <h3 id="org3e22b8b"> <a href="#org3e22b8b">2019年</a></h3>
 <div class="outline-text-3" id="text-org3e22b8b">
 <ul class="org-ul"> <li> <a href="20221211233726-php.html#ID-82360e75-76ce-4efa-aa24-f93adfce1f50">PHP</a> Laravelで初めてのwebアプリを作った。本の買取で使用するために必要だった。</li>
 <li>DokuWikiのテーマを自作し、DokuWiki公式ページに公開した。 <a href="https://github.com/kijimaD/bs4simple">https://github.com/kijimaD/bs4simple</a></li>
 <li>練習でWordPressのテーマを作成した。 <a href="https://github.com/kijimaD/wp_theme1">https://github.com/kijimaD/wp_theme1</a></li>
</ul></div>
</div>
 <div id="outline-container-org99ff4e8" class="outline-3">
 <h3 id="org99ff4e8"> <a href="#org99ff4e8">2018年</a></h3>
 <div class="outline-text-3" id="text-org99ff4e8">
 <ul class="org-ul"> <li>村上龍にハマり、彼のすべての小説、エッセイを読んだ。</li>
</ul></div>
</div>
 <div id="outline-container-orgf596a74" class="outline-3">
 <h3 id="orgf596a74"> <a href="#orgf596a74">2017年</a></h3>
 <div class="outline-text-3" id="text-orgf596a74">
 <ul class="org-ul"> <li>WordPressでサイトを運営していた。</li>
</ul></div>
</div>
 <div id="outline-container-orgea10445" class="outline-3">
 <h3 id="orgea10445"> <a href="#orgea10445">2016年</a></h3>
 <div class="outline-text-3" id="text-orgea10445">
 <ul class="org-ul"> <li>鹿児島大学(法文学部/経済情報学科)に入学した。</li>
 <li>北京の清華大学に語学留学した(半年間)。</li>
</ul></div>
</div>
 <div id="outline-container-org9856596" class="outline-3">
 <h3 id="org9856596"> <a href="#org9856596">2015年</a></h3>
 <div class="outline-text-3" id="text-org9856596">
 <ul class="org-ul"> <li> <a href="20220108110637-linux.html#ID-7a81eb7c-8e2b-400a-b01a-8fa597ea527a">Linux</a>に出会い、メインOSとして使いはじめた(以後ずっと)。</li>
 <li> <a href="20210508234743-emacs.html#ID-1ad8c3d5-97ba-4905-be11-e6f2626127ad">Emacs</a>と出会い、学びはじめた。(きっかけは図書館にあったPerlの本で推していたこと)</li>
</ul></div>
</div>
 <div id="outline-container-org0739ad4" class="outline-3">
 <h3 id="org0739ad4"> <a href="#org0739ad4">1998年</a></h3>
 <div class="outline-text-3" id="text-org0739ad4">
 <ul class="org-ul"> <li> <a href="https://goo.gl/maps/JRPokHDENCS9e47i9">鹿児島県/阿久根市</a>に生まれた。</li>
</ul></div>
</div>
</div>
 <div id="outline-container-orgc5e5d56" class="outline-2">
 <h2 id="orgc5e5d56"> <a href="#orgc5e5d56">References</a></h2>
 <div class="outline-text-2" id="text-orgc5e5d56">
 <ul class="org-ul"> <li>Site:  <a href="https://kijimad.github.io/roam/">Insomnia</a></li>
 <li> <a href="20210912124846-dotfiles.html#ID-32295609-a416-4227-9aa9-47aefc42eefc">dotfiles</a>:  <a href="https://github.com/kijimaD/dotfiles">kijimaD/dotfiles</a> +  <a href="https://github.com/kijimaD/.emacs.d">kijimaD/.emacs.d</a></li>
 <li> <a href="https://github.com/kijimaD">kijimaD (Kijima Daigo) - GitHub</a></li>
 <li> <a href="https://twitter.com/DaigoKijima">DaigoKijima - Twitter</a></li>
 <li> <a href="https://www.wantedly.com/id/daigo_kijima">貴島 大悟 - Wantedly</a></li>
 <li> <a href="https://www.linkedin.com/in/kijimad/">貴島 大悟 | LinkedIn</a></li>
 <li> <a href="https://b.hatena.ne.jp/norimaking777/bookmark">norimaking777 - はてなブックマーク</a></li>
</ul></div>
</div>
 <div id="outline-container-org66b6ed0" class="outline-2">
 <h2 id="org66b6ed0"> <a href="#org66b6ed0">Backlinks</a></h2>
 <div class="outline-text-2" id="text-org66b6ed0">
 <ul class="org-ul"> <li> <a href="./index.html">Insomnia</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20210817003906-history.html"/>
  <id>https://kijimad.github.io/roam/20210817003906-history.html</id>
  <updated>2025-06-14T00:00:00+09:00</updated>
</entry>
<entry>
  <title>ej-dict</title>
  <author><name>root</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org8eb71ae" class="outline-2">
 <h2 id="org8eb71ae"> <a href="#org8eb71ae">概要</a></h2>
 <div class="outline-text-2" id="text-org8eb71ae">
 <p>
 <a href="https://github.com/kijimaD/ej-dict">ej-dict</a>は <a href="20210508234743-emacs.html#ID-1ad8c3d5-97ba-4905-be11-e6f2626127ad">Emacs</a>用の自作ライブラリ。フリー辞書の取得と、辞書検索のUIを提供する。
</p>
</div>
</div>
 <div id="outline-container-org35d9d8b" class="outline-2">
 <h2 id="org35d9d8b"> <a href="#org35d9d8b">Goals</a></h2>
 <div class="outline-text-2" id="text-org35d9d8b">
 <p>
 <a href="https://github.com/kijimaD/ej-dict">https://github.com/kijimaD/ej-dict</a>
 <a href="20210508234743-emacs.html#ID-1ad8c3d5-97ba-4905-be11-e6f2626127ad">Emacs</a>でポータブルに使える英和辞書パッケージを作成する。
</p>
 <ul class="org-ul"> <li>自動で辞書データインストール</li>
 <li>カーソル上の文字を検索</li>
 <li>高速</li>
</ul></div>
</div>
 <div id="outline-container-org0e3b072" class="outline-2">
 <h2 id="org0e3b072"> <a href="#org0e3b072">Tasks</a></h2>
 <div class="outline-text-2" id="text-org0e3b072">
</div>
 <div id="outline-container-org3d18635" class="outline-3">
 <h3 id="org3d18635"> <a href="#org3d18635"> <span class="done DONE">DONE</span> とりあえず使える</a></h3>
 <div class="outline-text-3" id="text-org3d18635">
</div>
</div>
</div>
 <div id="outline-container-org3d7f063" class="outline-2">
 <h2 id="org3d7f063"> <a href="#org3d7f063">Backlinks</a></h2>
 <div class="outline-text-2" id="text-org3d7f063">
 <ul class="org-ul"> <li> <a href="./20210817003906-history.html">History</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20210817094357-ej_dict.html"/>
  <id>https://kijimad.github.io/roam/20210817094357-ej_dict.html</id>
  <updated>2025-06-14T00:00:00+09:00</updated>
</entry>
<entry>
  <title>OBS</title>
  <author><name>root</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orgd97d725" class="outline-2">
 <h2 id="orgd97d725"> <a href="#orgd97d725">概要</a></h2>
 <div class="outline-text-2" id="text-orgd97d725">
 <p>
OBSは動画録画/加工をするプログラム。主に <a href="20210911104632-c_language.html#ID-656a0aa4-e5d3-416f-82d5-f909558d0639">C言語</a>で書かれている。スクリーンを録画しつつ右下には自分の顔を表示する、ようなこと(ワイプ)が簡単にできる。保存するだけでなく、出力を選択してYouTubeでキャストしたり、Google Meetで使用したりもできる。
</p>

 <dl class="org-dl"> <dt>repository</dt> <dd> <a href="https://github.com/obsproject/obs-studio">https://github.com/obsproject/obs-studio</a></dd>
</dl></div>
</div>
 <div id="outline-container-org96a8fe5" class="outline-2">
 <h2 id="org96a8fe5"> <a href="#org96a8fe5">Memo</a></h2>
 <div class="outline-text-2" id="text-org96a8fe5">
</div>
 <div id="outline-container-org0e03fcb" class="outline-3">
 <h3 id="org0e03fcb"> <a href="#org0e03fcb">フォント設定</a></h3>
 <div class="outline-text-3" id="text-org0e03fcb">
 <p>
高DPIのディスプレイを使っていると、フォントが豆粒になるので大きくして起動する。
</p>
 <div class="org-src-container">
 <pre class="src src-shell">$  <span class="org-variable-name">QT_SCALE_FACTOR</span>=2 obs
</pre>
</div>
 <p>
Nvidiaのドライバーがどうのとエラーが出るので、使わない設定にした。
</p>
</div>
</div>
</div>
 <div id="outline-container-org0b1be05" class="outline-2">
 <h2 id="org0b1be05"> <a href="#org0b1be05">Tasks</a></h2>
</div>
 <div id="outline-container-orgac69d13" class="outline-2">
 <h2 id="orgac69d13"> <a href="#orgac69d13">Archives</a></h2>
</div>
 <div id="outline-container-orgab2694f" class="outline-2">
 <h2 id="orgab2694f"> <a href="#orgab2694f">Reference</a></h2>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20210829200955-obs.html"/>
  <id>https://kijimad.github.io/roam/20210829200955-obs.html</id>
  <updated>2025-06-14T00:00:00+09:00</updated>
</entry>
<entry>
  <title>MySQL</title>
  <author><name>root</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org7dfed2f" class="outline-2">
 <h2 id="org7dfed2f"> <a href="#org7dfed2f">概要</a></h2>
 <div class="outline-text-2" id="text-org7dfed2f">
 <p>
MySQLは <a href="20220806135724-rdbms.html#ID-2c78a4f7-d41a-407d-bf52-45b1d67d3ffa">RDBMS</a>(Relational Database Management System)のひとつ。RDBMSを操作するための言語が <a href="20210725100835-sql.html#ID-8b69b8d4-1612-4dc5-8412-96b431fdd101">SQL</a>で、ほぼ共通の文法で操作できる。
</p>
</div>
</div>
 <div id="outline-container-org04933ab" class="outline-2">
 <h2 id="org04933ab"> <a href="#org04933ab">Memo</a></h2>
 <div class="outline-text-2" id="text-org04933ab">
</div>
 <div id="outline-container-orgf69914d" class="outline-3">
 <h3 id="orgf69914d"> <a href="#orgf69914d">Tranaction Errorになったときの直し方</a></h3>
 <div class="outline-text-3" id="text-orgf69914d">
 <p>
途中でテストの実行を中断したときに起こることがある。
</p>
 <div class="org-src-container">
 <pre class="src src-shell">$ mysql -u root -p
> SHOW ENGINE INNODB STATUS;  <span class="org-comment-delimiter"># </span> <span class="org-comment">TRANSACTIONSの部分のThread IDを確認する。</span>
> kill Thread_id
</pre>
</div>
</div>
</div>
</div>
 <div id="outline-container-org20cc130" class="outline-2">
 <h2 id="org20cc130"> <a href="#org20cc130">Archives</a></h2>
</div>
 <div id="outline-container-org9171e2f" class="outline-2">
 <h2 id="org9171e2f"> <a href="#org9171e2f">Reference</a></h2>
</div>


 <div id="outline-container-orgbd84b10" class="outline-2">
 <h2 id="orgbd84b10"> <a href="#orgbd84b10">Backlinks</a></h2>
 <div class="outline-text-2" id="text-orgbd84b10">
 <ul class="org-ul"> <li> <a href="./20210508234743-emacs.html">Emacs</a></li>
 <li> <a href="./20210725100835-sql.html">SQL</a></li>
 <li> <a href="./20210805005543-docker.html">Docker</a></li>
 <li> <a href="./20210817003906-history.html">History</a></li>
 <li> <a href="./20210905195215-postgresql.html">PostgreSQL</a></li>
 <li> <a href="./20211021224416-db_design.html">DB Design</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20210829232020-mysql.html"/>
  <id>https://kijimad.github.io/roam/20210829232020-mysql.html</id>
  <updated>2025-06-14T00:00:00+09:00</updated>
</entry>
<entry>
  <title>RSpec</title>
  <author><name>root</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org70b9bcd" class="outline-2">
 <h2 id="org70b9bcd"> <a href="#org70b9bcd">概要</a></h2>
 <div class="outline-text-2" id="text-org70b9bcd">
 <p>
RSpecは <a href="20210509095513-ruby.html#ID-cfd092c4-1bb2-43d3-88b1-9f647809e546">Ruby</a>のテストフレームワーク。 <a href="20210509095946-rails.html#ID-e04aa1a3-509c-45b2-ac64-53d69c961214">Rails</a>開発でよく使われる。
</p>
</div>
</div>
 <div id="outline-container-org2cc7fc2" class="outline-2">
 <h2 id="org2cc7fc2"> <a href="#org2cc7fc2">Memo</a></h2>
 <div class="outline-text-2" id="text-org2cc7fc2">
</div>
 <div id="outline-container-orgfc3eecf" class="outline-3">
 <h3 id="orgfc3eecf"> <a href="#orgfc3eecf">within</a></h3>
 <div class="outline-text-3" id="text-orgfc3eecf">
 <p>
セレクトボックスをクリックしてから選択、というような場合capybaraは不安定になることがある。
まだ表示されてないのに、クリックするためにクリックするポイントがずれたりする。
</p>

 <p>
安直なのはsleepすることだが、いい方法もある。
親要素全体が表示されてから、クリックする。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 1: </span>withinで親要素が表示されるのを待つ</label> <pre class="src src-ruby">within  <span class="org-string">'親要素'</span>  <span class="org-keyword">do</span>
  find( <span class="org-string">'li'</span>,  <span class="org-constant">text:</span>  <span class="org-string">'セレクトボックスの中身'</span>).click
 <span class="org-keyword">end</span>
</pre>
</div>

 <p>
 <a href="https://koheisg.dreamin.cc/system_spec/random-failures">system specとそのrandom落ち (flaky test) との戦い</a>
</p>
</div>
</div>
 <div id="outline-container-orgdf54513" class="outline-3">
 <h3 id="orgdf54513"> <a href="#orgdf54513">ENVをテストするためのヘルパー</a></h3>
 <div class="outline-text-3" id="text-orgdf54513">
 <p>
ENVを変えてテストしたいときがある。
 <a href="https://github.com/rspec/rspec-rails/issues/1279#issuecomment-70275896">https://github.com/rspec/rspec-rails/issues/1279#issuecomment-70275896</a>
ヘルパーを追加する。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 2: </span>helper</label> <pre class="src src-ruby"> <span class="org-keyword">module</span>  <span class="org-type">EnvHelpers</span>
   <span class="org-keyword">def</span>  <span class="org-function-name">with_env_vars</span>(vars)
    original =  <span class="org-type">ENV</span>.to_hash
    vars.each { |k, v|  <span class="org-type">ENV</span>[k] = v }

     <span class="org-keyword">begin</span>
       <span class="org-keyword">yield</span>
     <span class="org-keyword">ensure</span>
       <span class="org-type">ENV</span>.replace(original)
     <span class="org-keyword">end</span>
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 3: </span>rails_helper</label> <pre class="src src-ruby"> <span class="org-type">RSpec</span>.configure  <span class="org-keyword">do</span> |c|
  c.include  <span class="org-type">EnvHelpers</span>
 <span class="org-keyword">end</span>
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 4: </span>rspec</label> <pre class="src src-ruby">it  <span class="org-string">'does something with the FOO environment variable'</span>  <span class="org-keyword">do</span>
  with_env_vars  <span class="org-string">'FOO'</span> =>  <span class="org-string">'bar'</span>  <span class="org-keyword">do</span>
     <span class="org-comment-delimiter"># </span> <span class="org-comment">logic that depends upon ENV['FOO'] goes here</span>
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgdf6a028" class="outline-3">
 <h3 id="orgdf6a028"> <a href="#orgdf6a028">テスト結果にSQLを出力する</a></h3>
 <div class="outline-text-3" id="text-orgdf6a028">
 <p>
どのようなSQLが発行されるか確認できると便利。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 5: </span>発行クエリを出力する</label> <pre class="src src-ruby"> <span class="org-type">RSpec</span>.describe  <span class="org-keyword">do</span>
  before  <span class="org-keyword">do</span>
     <span class="org-type">ActiveRecord</span>:: <span class="org-type">Base</span>.logger =  <span class="org-type">Logger</span>.new( <span class="org-type">STDOUT</span>)
   <span class="org-keyword">end</span>

  it  <span class="org-keyword">do</span>
    ...
   <span class="org-keyword">end</span>
 <span class="org-keyword">end</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-org776c598" class="outline-3">
 <h3 id="org776c598"> <a href="#org776c598">request specでsessionメソッドを使う</a></h3>
 <div class="outline-text-3" id="text-org776c598">
 <div class="org-src-container">
 <pre class="src src-ruby">allow_any_instance_of( <span class="org-type">ActionDispatch</span>:: <span class="org-type">Request</span>).to receive( <span class="org-constant">:session</span>).and_return({})
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgaabc3f6" class="outline-3">
 <h3 id="orgaabc3f6"> <a href="#orgaabc3f6">simplecovカバレッジ</a></h3>
 <div class="outline-text-3" id="text-orgaabc3f6">
 <div class="org-src-container">
 <pre class="src src-shell"> <span class="org-variable-name">COVERAGE</span>=true bundle exec rspec spec/requests/user_spec.rb
open coverage/index.html
</pre>
</div>
</div>
</div>
</div>
 <div id="outline-container-org87eda43" class="outline-2">
 <h2 id="org87eda43"> <a href="#org87eda43">たまに失敗するパターン</a></h2>
 <div class="outline-text-2" id="text-org87eda43">
 <p>
system specではよくある。
</p>
</div>
 <div id="outline-container-org463bd6b" class="outline-3">
 <h3 id="org463bd6b"> <a href="#org463bd6b">読み込み前に検証して失敗する</a></h3>
 <div class="outline-text-3" id="text-org463bd6b">
 <div class="org-src-container">
 <pre class="src src-ruby">expect(page).to have_text  <span class="org-string">'aaa'</span>,  <span class="org-constant">wait:</span> 5  <span class="org-comment-delimiter">#</span> <span class="org-comment">発見できなかったときの最大待ち時間を伸ばす</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-orge9a3569" class="outline-3">
 <h3 id="orge9a3569"> <a href="#orge9a3569">並び順に依存したテスト</a></h3>
 <div class="outline-text-3" id="text-orge9a3569">
 <p>
同じ秒数に作成されたとき、createした順番に並ばない可能性がある。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby">model1 = create( <span class="org-constant">:model</span>)
model2 = create( <span class="org-constant">:model</span>)
</pre>
</div>
 <p>
created_atでソートして表示しているとして、この作成順にソートされるわけではない。
秒数が同じときはidなどがソートに使われるだろう。
1つcreateするのにはわずかな時間なので、たまに失敗するだけで気づきにくい。
</p>
</div>
</div>
 <div id="outline-container-org3ceea8f" class="outline-3">
 <h3 id="org3ceea8f"> <a href="#org3ceea8f">チェックボックス</a></h3>
 <div class="outline-text-3" id="text-org3ceea8f">
 <p>
チェックに少し時間がかかるのでたまにチェックせずに送信して失敗する。
</p>
 <div class="org-src-container">
 <pre class="src src-ruby">check aaa
expect(page).to have_checked_field(aaa), wait 5  <span class="org-comment-delimiter"># </span> <span class="org-comment">チェックを確認する</span>
</pre>
</div>
</div>
</div>
</div>
 <div id="outline-container-orgcba88f3" class="outline-2">
 <h2 id="orgcba88f3"> <a href="#orgcba88f3">Tasks</a></h2>
</div>
 <div id="outline-container-org44f8b94" class="outline-2">
 <h2 id="org44f8b94"> <a href="#org44f8b94">Archives</a></h2>
</div>
 <div id="outline-container-orgddce684" class="outline-2">
 <h2 id="orgddce684"> <a href="#orgddce684">Reference</a></h2>
 <div class="outline-text-2" id="text-orgddce684">
</div>
 <div id="outline-container-org538a4df" class="outline-3">
 <h3 id="org538a4df"> <a href="#org538a4df"></a> <a href="https://stackoverflow.com/questions/38573131/what-is-the-purpose-of-a-transient-do-block-in-factorybot-factories">ruby on rails - What is the purpose of a `transient do` block in FactoryBot factories? - Stack Overflow</a></h3>
 <div class="outline-text-3" id="text-org538a4df">
 <p>
FactoryBotのtransientの使い方。
</p>
</div>
</div>
 <div id="outline-container-org03868e2" class="outline-3">
 <h3 id="org03868e2"> <a href="#org03868e2"></a> <a href="https://stackoverflow.com/questions/20196146/check-the-dimensions-of-an-img-with-rspec-capybara">ruby on rails - Check the dimensions of an img with RSpec/Capybara? - Stack Overflow</a></h3>
 <div class="outline-text-3" id="text-org03868e2">
 <p>
jQueryを使って存在チェックする方法。
</p>
</div>
</div>
 <div id="outline-container-org9ea8f90" class="outline-3">
 <h3 id="org9ea8f90"> <a href="#org9ea8f90"></a> <a href="https://www.betterspecs.org/">Better Specs. Testing Guidelines for Developers.</a></h3>
 <div class="outline-text-3" id="text-org9ea8f90">
 <p>
RSpecのベストプラクティス集。
</p>
</div>
</div>
 <div id="outline-container-orga01b722" class="outline-3">
 <h3 id="orga01b722"> <a href="#orga01b722"></a> <a href="https://qian-dao-zhen-yi.gitbook.io/rspec-style-guide/">Introduction - rspec-style-guide</a></h3>
 <div class="outline-text-3" id="text-orga01b722">
 <p>
可読性の高いテストコードを書くためのRSpecのスタイルガイド。
</p>
</div>
</div>
 <div id="outline-container-org00978e5" class="outline-3">
 <h3 id="org00978e5"> <a href="#org00978e5"></a> <a href="https://dev.classmethod.jp/articles/rspec-recipe/">[Ruby] よく使うRspecのレシピ集（Rspec3.3） | DevelopersIO</a></h3>
 <div class="outline-text-3" id="text-org00978e5">
 <p>
RSpec。
</p>
</div>
</div>
</div>
 <div id="outline-container-orgcf3c718" class="outline-2">
 <h2 id="orgcf3c718"> <a href="#orgcf3c718">Backlinks</a></h2>
 <div class="outline-text-2" id="text-orgcf3c718">
 <ul class="org-ul"> <li> <a href="./20210508234743-emacs.html">Emacs</a></li>
 <li> <a href="./20210817003906-history.html">History</a></li>
 <li> <a href="./20210831225930-test.html">Test</a></li>
 <li> <a href="./20211127104120-gemat.html">gemat</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20210831223434-rspec.html"/>
  <id>https://kijimad.github.io/roam/20210831223434-rspec.html</id>
  <updated>2025-06-14T00:00:00+09:00</updated>
</entry>
<entry>
  <title>Test</title>
  <author><name>root</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orgcb8bc4d" class="outline-2">
 <h2 id="orgcb8bc4d"> <a href="#orgcb8bc4d">概要</a></h2>
 <div class="outline-text-2" id="text-orgcb8bc4d">
 <p>
Software  <a href="20220115181851-development.html#ID-7b14035e-cd37-424d-96c3-ab2988d1c377">development</a>におけるテスト。
</p>

 <p>
テストのメリット。
</p>
 <ul class="org-ul"> <li>挙動をプログラムとして記述しておくことでエラーを起こす変更を防ぐ</li>
 <li>動く <a href="20211212121116-documentation.html#ID-79178e63-a446-4f47-b832-82128cdf854a">documentation</a>として、理解しやすくなる</li>
 <li>アップデートによる変更を検知しやすくなる</li>
 <li>望む結果が記述されているので、変更を加えやすくなる</li>
</ul> <p>
などの利点がある。
各言語やフレームワークでテスト拡張が存在する。 <a href="20210509095513-ruby.html#ID-cfd092c4-1bb2-43d3-88b1-9f647809e546">Ruby</a> →  <a href="20210831223434-rspec.html#ID-afccf86d-70b8-44c0-86a8-cdac25f7dfd3">RSpec</a>など。
</p>
</div>
</div>
 <div id="outline-container-org1110c17" class="outline-2">
 <h2 id="org1110c17"> <a href="#org1110c17">テスト駆動開発</a></h2>
 <div class="outline-text-2" id="text-org1110c17">
 <p>
プロダクトコードを書く → テストコードを書くことが多いが、最初にテストを書いて開発を進めるスタイルがある。
新規に行う開発だけでなく、バグの修正にも有効。
</p>

 <ul class="org-ul"> <li>最初にバグを再現するコードを書く。これは失敗する、などとコミットメッセージに書いておく。</li>
 <li>バグ修正/リファクタリング、テスト/プロダクトコード修正を混ぜない。わけわからなくなるから。</li>
 <li>日本語で検証する内容を書く。もちろん、意図を明確に伝えられる英語力があれば問題ない。単にAdd, Fixとかレベルの語彙しか使えないので、実用的ではない。</li>
 <li>テストのネスト、レベル感を合わせる。</li>
 <li>例の値であることを示す。</li>
</ul></div>
</div>
 <div id="outline-container-org843018c" class="outline-2">
 <h2 id="org843018c"> <a href="#org843018c">Memo</a></h2>
 <div class="outline-text-2" id="text-org843018c">
</div>
 <div id="outline-container-org6f39989" class="outline-3">
 <h3 id="org6f39989"> <a href="#org6f39989">スタブとモックの違い</a></h3>
 <div class="outline-text-3" id="text-org6f39989">
 <dl class="org-dl"> <dt>スタブ</dt> <dd>指定された挙動をする機能。任意の値をテスト対象に与えて、出力を固定し検証できるようにする。受信メッセージのテスト</dd>
 <dt>モック</dt> <dd>(スタブの機能) + 処理中の検証機能。送信メッセージのテスト。引数の検証や回数の検証の機能が必要</dd>
 <dt>スパイ</dt> <dd>(スタブの機能) + 記録機能</dd>
</dl> <p>
モックオブジェクトはリアルタイムにコンポーネントへのアクセスを検証する。
事後に検証してればスパイ、事前に期待値をセットして検証してればモック。
</p>

 <dl class="org-dl"> <dt>受信メッセージのテスト</dt> <dd>オブジェクトがメッセージを受け取ったとき適切な返事をするか
 <ul class="org-ul"> <li>受信メッセージのテストをするときは注目しているオブジェクト以外のオブジェクトは偽物を注入し、テストの成功不成功が注目オブジェクトの実装のみに依存させる</li>
</ul></dd>
 <dt>送信メッセージのテスト</dt> <dd>オブジェクトが副作用のあるメッセージを送信するとき、適切な引数・回数で送信しているか
 <ul class="org-ul"> <li>送信メッセージのテストをするときはメッセージの受け手を偽物にすり替えておき、この偽物にメッセージの引数や呼び出し回数が想定通りか検証する</li>
</ul></dd>

 <dt>(no term)</dt> <dd> <a href="https://qiita.com/k5trismegistus/items/10ce381d29ab62ca0ea6">スタブとモックの違い - Qiita</a></dd>
 <dt>(no term)</dt> <dd> <a href="https://gotohayato.com/content/483/">自動テストのスタブ・スパイ・モックの違い | gotohayato.com</a></dd>
</dl></div>
</div>
</div>
 <div id="outline-container-org769ce0c" class="outline-2">
 <h2 id="org769ce0c"> <a href="#org769ce0c">Tasks</a></h2>
</div>
 <div id="outline-container-org0baccaa" class="outline-2">
 <h2 id="org0baccaa"> <a href="#org0baccaa">Archives</a></h2>
</div>
 <div id="outline-container-orgdc804b2" class="outline-2">
 <h2 id="orgdc804b2"> <a href="#orgdc804b2">Reference</a></h2>
 <div class="outline-text-2" id="text-orgdc804b2">
</div>
 <div id="outline-container-org1f5625d" class="outline-3">
 <h3 id="org1f5625d"> <a href="#org1f5625d"> <span class="todo TODO">TODO</span> </a> <a href="https://tatsu-zine.com/books/unit-testing-principles-practices-and-patterns">単体テストの考え方/使い方 プロジェクトの持続可能な成長を実現するための戦略【委託】 - 達人出版会</a></h3>
 <div class="outline-text-3" id="text-org1f5625d">
 <p>
テストの本。
</p>

 <ul class="org-ul"> <li>AAAパターン
 <ul class="org-ul"> <li>準備(arrange), 実行(Act), 確認(Assert)</li>
 <li>ただしく設計されていれば、確認フェーズは少なくなる可能性が高い。APIとして抽象化されているということだから</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-orgd7c7b8a" class="outline-3">
 <h3 id="orgd7c7b8a"> <a href="#orgd7c7b8a"></a> <a href="https://www.amazon.co.jp/-/en/%E3%83%AA%E3%83%BC%E3%83%BB%E3%82%B3%E3%83%BC%E3%83%97%E3%83%A9%E3%83%B3%E3%83%89/dp/4822282511/?_encoding=UTF8&pd_rd_w=TKE9M&pf_rd_p=804d5b02-2ee3-4291-af73-4ed641bef875&pf_rd_r=H062A0H4W127PBYM7568&pd_rd_r=38f29407-ad17-4065-9846-a2929166ef0b&pd_rd_wg=V9pdt&ref_=pd_gw_bmx_gp_rb3xsz6n">Amazon.co.jp: はじめて学ぶソフトウェアのテスト技法 : リー・コープランド, 宗 雅彦: Japanese Books</a></h3>
 <div class="outline-text-3" id="text-orgd7c7b8a">
 <p>
テストの方法の本。
</p>
</div>
</div>
 <div id="outline-container-orgbfd5cc0" class="outline-3">
 <h3 id="orgbfd5cc0"> <a href="#orgbfd5cc0"></a> <a href="https://speakerdeck.com/willnet/clean-test-code-revised">Clean Test Code Revised - Speaker Deck</a></h3>
 <div class="outline-text-3" id="text-orgbfd5cc0">
 <p>
クリーンなテストコードの書き方。
</p>
</div>
</div>
</div>
 <div id="outline-container-org7832bd9" class="outline-2">
 <h2 id="org7832bd9"> <a href="#org7832bd9">Backlinks</a></h2>
 <div class="outline-text-2" id="text-org7832bd9">
 <ul class="org-ul"> <li> <a href="./20220115181851-development.html">development</a></li>
 <li> <a href="./20220212141124-ci.html">CI</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20210831225930-test.html"/>
  <id>https://kijimad.github.io/roam/20210831225930-test.html</id>
  <updated>2025-06-14T00:00:00+09:00</updated>
</entry>
<entry>
  <title>fish</title>
  <author><name>root</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org948ef04" class="outline-2">
 <h2 id="org948ef04"> <a href="#org948ef04">概要</a></h2>
 <div class="outline-text-2" id="text-org948ef04">
 <p>
fishは <a href="20210606192338-shell.html#ID-585d3b5e-989d-4363-bcc3-894402fcfcf9">Shell</a>のひとつ。特に設定せずとも使い勝手のよい補完を使い始めることができる。
</p>
</div>
</div>
 <div id="outline-container-org04a9f9d" class="outline-2">
 <h2 id="org04a9f9d"> <a href="#org04a9f9d">Memo</a></h2>
 <div class="outline-text-2" id="text-org04a9f9d">
</div>
 <div id="outline-container-orgae5a073" class="outline-3">
 <h3 id="orgae5a073"> <a href="#orgae5a073">ブラウザで設定</a></h3>
 <div class="outline-text-3" id="text-orgae5a073">
 <div class="org-src-container">
 <pre class="src src-shell">fish_config
</pre>
</div>
 <p>
でブラウザで設定できる。
</p>
</div>
</div>
 <div id="outline-container-orgab78322" class="outline-3">
 <h3 id="orgab78322"> <a href="#orgab78322">パッケージシステム</a></h3>
 <div class="outline-text-3" id="text-orgab78322">
 <p>
fishにパッケージシステムomfをインストールする。
</p>

 <div class="org-src-container">
 <pre class="src src-shell">sudo apt install omf
curl -L https://get.oh-my.fish > install
fish install --path=~/.local/share/omf --config=~/.config/omf
</pre>
</div>
</div>
</div>
</div>
 <div id="outline-container-orgc34827f" class="outline-2">
 <h2 id="orgc34827f"> <a href="#orgc34827f">Tasks</a></h2>
</div>
 <div id="outline-container-org3969c86" class="outline-2">
 <h2 id="org3969c86"> <a href="#org3969c86">Archives</a></h2>
</div>
 <div id="outline-container-org14ec663" class="outline-2">
 <h2 id="org14ec663"> <a href="#org14ec663">Reference</a></h2>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20210831231046-fish.html"/>
  <id>https://kijimad.github.io/roam/20210831231046-fish.html</id>
  <updated>2025-06-14T00:00:00+09:00</updated>
</entry>
<entry>
  <title>TypeScript</title>
  <author><name>root</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org804be72" class="outline-2">
 <h2 id="org804be72"> <a href="#org804be72">概要</a></h2>
 <div class="outline-text-2" id="text-org804be72">
 <p>
TypeScriptは <a href="20210509100112-javascript.html#ID-a6980e15-ecee-466e-9ea7-2c0210243c0d">JavaScript</a>の上位互換となるように作られた <a href="20210509101246-programming_language.html#ID-868ac56a-2d42-48d7-ab7f-7047c85a8f39">Programming Language</a>。型定義が最大の特徴。
</p>
</div>
</div>
 <div id="outline-container-org9e11357" class="outline-2">
 <h2 id="org9e11357"> <a href="#org9e11357">Tasks</a></h2>
</div>
 <div id="outline-container-org5bf47fb" class="outline-2">
 <h2 id="org5bf47fb"> <a href="#org5bf47fb">Memo</a></h2>
 <div class="outline-text-2" id="text-org5bf47fb">
</div>
 <div id="outline-container-org3f5ffd6" class="outline-3">
 <h3 id="org3f5ffd6"> <a href="#org3f5ffd6">開発サーバ立ち上げ</a></h3>
 <div class="outline-text-3" id="text-org3f5ffd6">
 <div class="org-src-container">
 <pre class="src src-shell">npm start
</pre>
</div>
</div>
</div>
</div>
 <div id="outline-container-org367dc6a" class="outline-2">
 <h2 id="org367dc6a"> <a href="#org367dc6a">Language Memo</a></h2>
 <div class="outline-text-2" id="text-org367dc6a">
</div>
 <div id="outline-container-org4e73c1e" class="outline-3">
 <h3 id="org4e73c1e"> <a href="#org4e73c1e">継承</a></h3>
 <div class="outline-text-3" id="text-org4e73c1e">
 <p>
クラス継承はextendsキーワードで行う。
</p>

 <div class="org-src-container">
 <pre class="src src-javascript"> <span class="org-keyword">class</span> Parent {}
 <span class="org-keyword">class</span> Child  <span class="org-keyword">extends</span> Parent {}
</pre>
</div>
</div>
</div>
 <div id="outline-container-org12d1708" class="outline-3">
 <h3 id="org12d1708"> <a href="#org12d1708">インターフェース</a></h3>
 <div class="outline-text-3" id="text-org12d1708">
 <p>
 <a href="https://book.yyts.org/features/interfaces">インターフェース (Interfaces) - サバイバルTypeScript-TypeScript入門</a>
</p>

 <blockquote>
 <p>
TypeScriptにはabstract修飾子があり抽象クラスを表現できます。
</p>
</blockquote>
</div>
</div>
 <div id="outline-container-org1333fd3" class="outline-3">
 <h3 id="org1333fd3"> <a href="#org1333fd3">抽象クラス</a></h3>
 <div class="outline-text-3" id="text-org1333fd3">
 <p>
 <a href="https://book.yyts.org/revisiting-javascript/objects-and-classes">JavaScriptのオブジェクトとクラス - サバイバルTypeScript-TypeScript入門</a>
</p>

 <blockquote>
 <p>
avaやPHPなどの言語では、abstract修飾子を使って抽象クラスを定義できます。
抽象クラスは、直接インスタンスを作れないクラスのことです。JavaScriptに
は抽象クラスを定義する構文はありません。
</p>
</blockquote>
</div>
</div>
 <div id="outline-container-org7d5f387" class="outline-3">
 <h3 id="org7d5f387"> <a href="#org7d5f387">アクセス修飾子</a></h3>
 <div class="outline-text-3" id="text-org7d5f387">
 <blockquote>
 <p>
JavaやPHPなどの言語では、フィールドやメソッドにprivate, protected,
publicを指定できます。JavaScriptでもprivateのようなプロパティを実現する
ためにプライベートクラスフィールドという仕様が実験的に導入されはじめて
はいますが、現状はJavaのようなアクセス修飾子はありません。
</p>

 <p>
TypeScriptにはJava風のアクセス修飾子があります。TypeScriptのアクセス修
飾子については「クラス」をご覧ください。
</p>
</blockquote>
</div>
</div>
 <div id="outline-container-org689e63b" class="outline-3">
 <h3 id="org689e63b"> <a href="#org689e63b">プロトタイプベース</a></h3>
 <div class="outline-text-3" id="text-org689e63b">
 <p>
 <a href="https://book.yyts.org/revisiting-javascript/prototype-based">プロトタイプベース - サバイバルTypeScript-TypeScript入門</a>
</p>

 <blockquote>
 <ul class="org-ul"> <li>プロトタイプベースとはどういう考え方なのか？</li>
 <li>プロトタイプベースのJavaScriptは、クラスベースのPHPやJavaとどんなとこ
ろが違う？</li>
 <li>なぜJavaScriptはプロトタイプベースを採用したのか？</li>
 <li>プロトタイプベースの利点は何か？</li>
</ul></blockquote>

 <p>
こういう疑問から始めるのはいいな。
</p>

 <blockquote>
 <p>
オブジェクト指向プログラミング(OOP)では、オブジェクトを扱います。オブジェ
クトを扱う以上は、オブジェクトを生成する必要があります。
</p>

 <p>
しかし、オブジェクトの生成方式は、OOPで統一的な決まりはありません。言語
によって異なるのです。言語によりオブジェクト生成の細部は異なりますが、
生成方法は大きく分けて「クラスベース」と「プロトタイプベース」がありま
す。
</p>
</blockquote>

 <p>
オブジェクト思考プログラミング言語ではクラス作成 → クラス.newしてインスタンスを作成して目的を達成する。
オブジェクトの素となるのがクラスだから、クラスベースと言う。
</p>

 <blockquote>
 <p>
一方のJavaScriptのオブジェクト生成はプロトタイプベースです。プロトタイ
プベースの特徴は、クラスのようなものが無いこところです。(あったとしても
クラスもオブジェクトの一種だったりと特別扱いされていない)
</p>
</blockquote>
</div>
</div>
 <div id="outline-container-org4404064" class="outline-3">
 <h3 id="org4404064"> <a href="#org4404064">振る舞い</a></h3>
 <div class="outline-text-3" id="text-org4404064">
 <p>
 <a href="https://book.yyts.org/features/primitive-types">プリミティブ型 (Primitive Types) - サバイバルTypeScript-TypeScript入門</a>
</p>

 <blockquote>
 <p>
振る舞いがないとはメソッドを持たないことです。
</p>
</blockquote>

 <blockquote>
 <p>
null.toString();
</p>

 <p>
意図せずこのようにしてしまい実行時エラーになってしまった経験はあるかと
思います。これはnullがtoString()という振る舞いを持っていないことに起因
します。
</p>

 <p>
とはいうもののJavaScriptにおいてプリミティブ型の多くはラッパークラスを
持っています。ラッパークラスを持つプリミティブ型の値はメソッド呼び出し
があれば実行時に、対応するラッパークラスのインスタンスに変換されるため、
あたかもプリミティブ型が振る舞いを持つように見え、またそのように使うこ
とができます。これはJavaを使われている方にとってはおなじみのAutoboxing
というJavaScript の言語機能です。
</p>
</blockquote>
</div>
</div>
 <div id="outline-container-org5750696" class="outline-3">
 <h3 id="org5750696"> <a href="#org5750696">バッククォートリテラル</a></h3>
 <div class="outline-text-3" id="text-org5750696">
 <ul class="org-ul"> <li>改行できる</li>
 <li>変数展開できる</li>
</ul> <div class="org-src-container">
 <pre class="src src-typescript">  `console.log(`
hello
world
!!`);
</pre>
</div>
</div>
</div>
 <div id="outline-container-org84fda75" class="outline-3">
 <h3 id="org84fda75"> <a href="#org84fda75">anyを禁止する</a></h3>
 <div class="outline-text-3" id="text-org84fda75">
 <blockquote>
 <p>
TypeScriptのプロジェクトを作る時に必要なtsconfig.jsonにはこのany型の使
用を防ぐためのオプションとしてnoImplicitAnyがあります。既存の
JavaScriptのプロジェクトをTypeScriptに置き換えていくのではなく、スクラッ
チの状態からTypeScriptで作るのであればこの設定を入れるとよいでしょう。
</p>
</blockquote>
</div>
</div>
 <div id="outline-container-org9683e40" class="outline-3">
 <h3 id="org9683e40"> <a href="#org9683e40">分割代入</a></h3>
 <div class="outline-text-3" id="text-org9683e40">
 <div class="org-src-container">
 <pre class="src src-typescript">type TopSecret = {
  height: number;
  weight: number;
};
​function bmi({height, weight}: TopSecret): number {
  const mHeight: number = height / 100.0;
  return weight / (mHeight ** 2);
}

bmi({height: 170, weight: 65});
bmi({weight: 65, height: 170});
</pre>
</div>
</div>
</div>
 <div id="outline-container-org099ec3a" class="outline-3">
 <h3 id="org099ec3a"> <a href="#org099ec3a">タイプエイリアス</a></h3>
 <div class="outline-text-3" id="text-org099ec3a">
 <div class="org-src-container">
 <pre class="src src-typescript">type Person = {
  surname: string;
  givenname: string;
};
const person: Person = {
  surname: 'Faure',
  givenName: 'Gabriel'
};

type Parents = {
  mother: Person;
  father: Person;
};
type Family = {
  parents: Parents;
  children: Person[];
  grandparents: Parents[];
}
const family: Family = {...};
</pre>
</div>
</div>
</div>
 <div id="outline-container-org47701cc" class="outline-3">
 <h3 id="org47701cc"> <a href="#org47701cc">オブジェクト内の関数定義</a></h3>
 <div class="outline-text-3" id="text-org47701cc">
 <p>
オブジェクトが持つメソッドの定義の方法。
</p>
 <div class="org-src-container">
 <pre class="src src-typescript">type A = {
  merge: (arg1: string, arg2: string) => string;
};
type B = {
  merge(arg1: string, arg2: string): string;
}
</pre>
</div>
</div>
</div>
 <div id="outline-container-org6d8de31" class="outline-3">
 <h3 id="org6d8de31"> <a href="#org6d8de31">プリミティブ型タイプエイリアス</a></h3>
 <div class="outline-text-3" id="text-org6d8de31">
 <div class="org-src-container">
 <pre class="src src-typescript">type Surname = string;
type GivenName = string;
type Person = {
  surname: Surname;
  givenName: GivenName;
}
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-typescript">const surname: Surname = 'Faure';
const givenName: GivenName = 'Gabriel';
const person: Person = {
  surname: givenName,
  givenName: surname
}
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-typescript">type SystemSupportLanguage = 'en' | 'tr' | 'it' | 'es';
</pre>
</div>

 <p>
 <code>?</code> をつけると選択可。
</p>
 <div class="org-src-container">
 <pre class="src src-typescript">type = Person = {
  surname: string;
  middleName?: string;
  givenName: string;
}
</pre>
</div>

 <p>
readonly
</p>
 <div class="org-src-container">
 <pre class="src src-typescript">type Person = {
  readOnly surname: string;
  givenName: string;
};
</pre>
</div>

 <p>
入れ子までreadonlyにするわけではない。
</p>
</div>
</div>
 <div id="outline-container-orge30141c" class="outline-3">
 <h3 id="orge30141c"> <a href="#orge30141c">インデックス型</a></h3>
 <div class="outline-text-3" id="text-orge30141c">
 <div class="org-src-container">
 <pre class="src src-typescript">type Butterfly = {
  [key: string] : string;
};

const butterflies: Butterfly = {
  en: 'Butterfly',
  fr: 'Papillon',
  it: 'Farfalla',
  es: 'Mariposa',
  de: 'Schmetterling'
};
</pre>
</div>
</div>
</div>
 <div id="outline-container-org42656cd" class="outline-3">
 <h3 id="org42656cd"> <a href="#org42656cd">Mapped type</a></h3>
 <div class="outline-text-3" id="text-org42656cd">
 <div class="org-src-container">
 <pre class="src src-typescript">type SystemSupportLanguage = 'en' | 'fr' | 'it' | 'es';
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-typescript">  const butterflies: Butterfly = {
    en: 'Butterfly',
    fr: 'Papillon',
    it: 'Farfalla',
    es: 'Mariposa',
    de: 'Schmetterling'
  };
// deでエラーになる
</pre>
</div>
</div>
</div>
 <div id="outline-container-org6659a58" class="outline-3">
 <h3 id="org6659a58"> <a href="#org6659a58">オブジェクト</a></h3>
 <div class="outline-text-3" id="text-org6659a58">
 <div class="org-src-container">
 <pre class="src src-typescript">const pokemon = {
  name: 'pikachu',
  no: 25,
  genre: 'mouse pokemon',
  height: 0.4,
  weight: 6.0,
};
</pre>
</div>

 <p>
オブジェクト型はプリミティブ型以外の総称。
</p>

 <div class="org-src-container">
 <pre class="src src-typescript">const pikachu: object = {
  name: 'pikachu',
  no: 25,
  genre: 'mouse pokemon',
  height: 0.4,
  weight: 6.0,
};

const pokemon: object = new Pokemon{
  'pikachu',
  25,
  'mouse pokemon',
  0.4,
  6.0
};

const increment: object = i => i + 1;
</pre>
</div>

 <p>
⚠object型を与えた変数はその変数の持っているプロパティ、メソッドに対してアクセスできない。
</p>

 <div class="org-src-container">
 <pre class="src src-typescript">pikachu.no;
// error
</pre>
</div>

 <p>
オブジェクトのプロパティは上書き可能。readonlyにするなどが必要。
</p>
</div>
</div>
 <div id="outline-container-orga38aa8e" class="outline-3">
 <h3 id="orga38aa8e"> <a href="#orga38aa8e">分割代入</a></h3>
 <div class="outline-text-3" id="text-orga38aa8e">
 <div class="org-src-container">
 <pre class="src src-typescript">const {
  name,
  no,
  genre
}: Wild = safari();
</pre>
</div>
</div>
</div>
 <div id="outline-container-org43b1228" class="outline-3">
 <h3 id="org43b1228"> <a href="#org43b1228">タイプエイリアスとインターフェースのどちらを使うか</a></h3>
</div>
 <div id="outline-container-org2263f24" class="outline-3">
 <h3 id="org2263f24"> <a href="#org2263f24">インターフェース</a></h3>
</div>
</div>
 <div id="outline-container-orgb5ae166" class="outline-2">
 <h2 id="orgb5ae166"> <a href="#orgb5ae166">Tasks</a></h2>
 <div class="outline-text-2" id="text-orgb5ae166">
</div>
 <div id="outline-container-org9140e75" class="outline-3">
 <h3 id="org9140e75"> <a href="#org9140e75"> <span class="todo TODO">TODO</span> </a> <a href="https://typescript-jp.gitbook.io/deep-dive/">TypeScript Deep Dive 日本語版について - TypeScript Deep Dive 日本語版</a></h3>
 <div class="outline-text-3" id="text-org9140e75">
 <p>
ドキュメント。
</p>
</div>
</div>
 <div id="outline-container-org97df02a" class="outline-3">
 <h3 id="org97df02a"> <a href="#org97df02a"> <span class="todo TODO">TODO</span> </a> <a href="https://www.amazon.co.jp/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0TypeScript-%E2%80%95%E3%82%B9%E3%82%B1%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8BJavaScript%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E9%96%8B%E7%99%BA-Boris-Cherny/dp/4873119049/ref=sr_1_18?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&crid=3LPQKAE9K6XEZ&keywords=graphql&qid=1640733736&sprefix=graphq%2Caps%2C187&sr=8-18">プログラミングTypeScript ―スケールするJavaScriptアプリケーション開発 | Boris Cherny, 今村 謙士, 原 隆文 |本 | 通販 | Amazon</a></h3>
</div>
 <div id="outline-container-org346d113" class="outline-3">
 <h3 id="org346d113"> <a href="#org346d113"> <span class="todo TODO">TODO</span> </a> <a href="http://typescript.ninja/typescript-in-definitelyland/">Revised Revised 型の国のTypeScript | Revised Revised TypeScript in Definitelyland</a></h3>
</div>
 <div id="outline-container-orgddfc167" class="outline-3">
 <h3 id="orgddfc167"> <a href="#orgddfc167"> <span class="todo TODO">TODO</span> </a> <a href="https://future-architect.github.io/typescript-guide/index.html">仕事ですぐに使えるTypeScript — 仕事ですぐに使えるTypeScript ドキュメント</a></h3>
 <div class="outline-text-3" id="text-orgddfc167">
 <p>
ドキュメント。
</p>
</div>
</div>
</div>
 <div id="outline-container-org7134756" class="outline-2">
 <h2 id="org7134756"> <a href="#org7134756">Reference</a></h2>
 <div class="outline-text-2" id="text-org7134756">
</div>
 <div id="outline-container-org6161827" class="outline-3">
 <h3 id="org6161827"> <a href="#org6161827"></a> <a href="https://zenn.dev/luvmini511/articles/6c6f69481c2d17">interfaceとtypeの違い、そして何を使うべきかについて</a></h3>
 <div class="outline-text-3" id="text-org6161827">
 <p>
interfaceの拡張性が高い。interfaceを使ったほうがよさそう。
</p>
</div>
</div>
 <div id="outline-container-org9f03955" class="outline-3">
 <h3 id="org9f03955"> <a href="#org9f03955"></a> <a href="https://www.typescriptlang.org/play?ts=4.3.0-beta#code">TypeScript: TS Playground - An online editor for exploring TypeScript and JavaScript</a></h3>
 <div class="outline-text-3" id="text-org9f03955">
 <p>
Webで動かせるTypeScript。
</p>
</div>
</div>
 <div id="outline-container-orgc6f2f9d" class="outline-3">
 <h3 id="orgc6f2f9d"> <a href="#orgc6f2f9d"></a> <a href="https://www.typescriptlang.org/docs/handbook/jsx.html#the-as-operator">TypeScript: Documentation - JSX</a></h3>
 <div class="outline-text-3" id="text-orgc6f2f9d">
 <p>
Official documentation。
</p>
</div>
</div>
</div>
 <div id="outline-container-org4aed4d8" class="outline-2">
 <h2 id="org4aed4d8"> <a href="#org4aed4d8">Archives</a></h2>
 <div class="outline-text-2" id="text-org4aed4d8">
</div>
 <div id="outline-container-org94ac29d" class="outline-3">
 <h3 id="org94ac29d"> <a href="#org94ac29d"> <span class="done DONE">DONE</span> lspをセットする</a></h3>
 <div class="outline-text-3" id="text-org94ac29d">
 <p>
lspは、Language Server Protocol。
開発ツールと言語サーバープロセスの間における通信プロトコル…つまり実行前に解析することでエラーを検知できる。
検知した内容は共通の通信プロトコルで送信されるので、ソフトを問わずに知ることができる。
</p>

 <p>
まず設定しておくと、インタラクティブに理解が進む。
WEBでどんな感じが試すのもいい。
 <a href="https://www.typescriptlang.org/play">https://www.typescriptlang.org/play</a>
</p>
</div>
</div>
 <div id="outline-container-orga8cb1f2" class="outline-3">
 <h3 id="orga8cb1f2"> <a href="#orga8cb1f2"> <span class="done DONE">DONE</span> TypeScript本</a></h3>
 <div class="outline-text-3" id="text-orga8cb1f2">
 <p>
わかりづらいので本を変えた。
まず最初に読みやすいか確認するべきだな。
徐々にアプリを作っていく形式で、コードをどこに追加していいかわからないのは致命的だ。
</p>

 <p>
本のが古いバージョンで最新ではコードが動かない。
ドラッグアンドドロップできない。
テストのパートが動かない。テストは別でやろう。
</p>

 <ul class="org-ul"> <li>91, 165, 194</li>
</ul></div>
</div>
</div>
 <div id="outline-container-org86ede62" class="outline-2">
 <h2 id="org86ede62"> <a href="#org86ede62">Backlinks</a></h2>
 <div class="outline-text-2" id="text-org86ede62">
 <ul class="org-ul"> <li> <a href="./20210508234743-emacs.html">Emacs</a></li>
 <li> <a href="./20210509100112-javascript.html">JavaScript</a></li>
 <li> <a href="./20210615222732-project.html">project</a></li>
 <li> <a href="./20210817003906-history.html">History</a></li>
 <li> <a href="./20210901101339-rust.html">Rust</a></li>
 <li> <a href="./20210902220546-react.html">React</a></li>
 <li> <a href="./20210926150327-oss.html">OSS</a></li>
 <li> <a href="./20211107104950-linter.html">Linter</a></li>
 <li> <a href="./20241009T091810--kdoc-252-『月刊ラムダノート-4-3-9-2024』__book.html">KDOC 252: 『月刊ラムダノート 4-3-9-2024』</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20210831232330-typescript.html"/>
  <id>https://kijimad.github.io/roam/20210831232330-typescript.html</id>
  <updated>2025-06-14T00:00:00+09:00</updated>
</entry>
<entry>
  <title>Zig</title>
  <author><name>root</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org1942150" class="outline-2">
 <h2 id="org1942150"> <a href="#org1942150">概要</a></h2>
 <div class="outline-text-2" id="text-org1942150">
 <p>
ZigはC言語の置換を目指した <a href="20210509101246-programming_language.html#ID-868ac56a-2d42-48d7-ab7f-7047c85a8f39">Programming Language</a>。方向性としては <a href="20210901101339-rust.html#ID-ddc21510-6693-4c1e-9070-db0dd2a8160b">Rust</a>などと同じ。
</p>

 <ul class="org-ul"> <li>堅牢性</li>
 <li>最適性</li>
 <li>保守性</li>
</ul> <p>
を重視して設計されている。
</p>
</div>
</div>
 <div id="outline-container-org5c69bbd" class="outline-2">
 <h2 id="org5c69bbd"> <a href="#org5c69bbd">Memo</a></h2>
</div>
 <div id="outline-container-org8663715" class="outline-2">
 <h2 id="org8663715"> <a href="#org8663715">Tasks</a></h2>
</div>
 <div id="outline-container-org62aa308" class="outline-2">
 <h2 id="org62aa308"> <a href="#org62aa308">Reference</a></h2>
 <div class="outline-text-2" id="text-org62aa308">
 <ul class="org-ul"> <li> <a href="https://ja.wikipedia.org/wiki/Zig_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E)">Zig (プログラミング言語) - Wikipedia</a></li>
</ul></div>
</div>
 <div id="outline-container-orgc3e19ac" class="outline-2">
 <h2 id="orgc3e19ac"> <a href="#orgc3e19ac">Archives</a></h2>
</div>


 <div id="outline-container-org2c9b102" class="outline-2">
 <h2 id="org2c9b102"> <a href="#org2c9b102">Backlinks</a></h2>
 <div class="outline-text-2" id="text-org2c9b102">
 <ul class="org-ul"> <li> <a href="./20210901101339-rust.html">Rust</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20210901100517-zig.html"/>
  <id>https://kijimad.github.io/roam/20210901100517-zig.html</id>
  <updated>2025-06-14T00:00:00+09:00</updated>
</entry>
<entry>
  <title>Rust</title>
  <author><name>root</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org4796ff2" class="outline-2">
 <h2 id="org4796ff2"> <a href="#org4796ff2">概要</a></h2>
 <div class="outline-text-2" id="text-org4796ff2">
 <p>
RustはC言語、C++の置換を目指した <a href="20210509101246-programming_language.html#ID-868ac56a-2d42-48d7-ab7f-7047c85a8f39">Programming Language</a>。
</p>

 <ul class="org-ul"> <li>性能</li>
 <li>メモリ安全性</li>
 <li>安全な並行性</li>
</ul> <p>
を特徴とする。
</p>

 <p>
 <a href="20210901100517-zig.html#ID-4270d99a-d2b5-429e-b33c-c2e097b20730">Zig</a>と方向性が同じ。
</p>
</div>
</div>
 <div id="outline-container-org64f7ebb" class="outline-2">
 <h2 id="org64f7ebb"> <a href="#org64f7ebb">Memo</a></h2>
 <div class="outline-text-2" id="text-org64f7ebb">
</div>
 <div id="outline-container-orga2ac7ee" class="outline-3">
 <h3 id="orga2ac7ee"> <a href="#orga2ac7ee">book-summaryのエラー</a></h3>
 <div class="outline-text-3" id="text-orga2ac7ee">
 <ul class="org-ul"> <li> <a href="https://github.com/kd-collective/book-summary/blob/db03f5c7e95ee8ebad5d446e7ed1ddc2a0d49561/src/main.rs#L222">https://github.com/kd-collective/book-summary/blob/db03f5c7e95ee8ebad5d446e7ed1ddc2a0d49561/src/main.rs#L222</a></li>
 <li>book-summaryを実行したときにエラーになる</li>
 <li>配列のインデックスがないといっている</li>
 <li>tomlが含まれているところで実行するとだめっぽい</li>
 <li>該当箇所的にもそう</li>
 <li>設定にtitleがないとエラーになる
 <ul class="org-ul"> <li>だが、titleがなくてもbuildはできる</li>
 <li>メインツールでオプショナルなのに依存するのはおかしいし、不親切なのでせめてメッセージを出すようにしたい</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org45b9236" class="outline-3">
 <h3 id="org45b9236"> <a href="#org45b9236">ビルドエラー  <code>failed to run custom build command for `proc-macro2 v1.0.42`</code></a></h3>
 <div class="outline-text-3" id="text-org45b9236">
 <p>
新しいマシンにしたとき発生した。原因不明。ライブラリ名は若干変わるときがある。共通しているのはcustom build commandということ。手元のビルドだけでなく、cargo installも失敗する。
</p>

 <p>
さっぱりわからない。検索しても似たような現象の人は出ない。開発用のライブラリを入れたら直ったという記事もあったが、すでに入っている。
</p>

 <ul class="org-ul"> <li>バージョンを下げてもだめだった</li>
 <li>curlで入れる方法をやり直してもだめだった</li>
 <li>aptで入れ直してもだめだった</li>
</ul></div>
</div>
 <div id="outline-container-org5016a8a" class="outline-3">
 <h3 id="org5016a8a"> <a href="#org5016a8a">cloneとcopyの違い</a></h3>
 <div class="outline-text-3" id="text-org5016a8a">
 <ul class="org-ul"> <li> <a href="https://teratail.com/questions/253918">RustのCloneとCopyについての素朴な疑問</a>の回答からコピペ</li>
</ul> <blockquote>
 <p>
まず明確にしておかなけばならないのは、Copyトレイトを実装した型で行われる値のコピーと、Cloneトレイトを実装した型で行われる値のclone()は多くの場合は異なる操作だということです。
</p>

 <p>
前者はメモリ上のバイト列を単純にコピーする操作で、Cのmemcpyに相当します。このような操作は一般的にはshallow copy（浅いコピー）と呼ばれます。
</p>

 <p>
後者はその型に実装されたclone()メソッドを呼び出す操作です。どういうことをするかはclone()メソッドの実装に依存しますが、多くの場合はmemcpyよりも複雑なdeep copy（深いコピー）を行います。
</p>

 <p>
たとえばString型は文字列データをVec<u8>型で持ちます。Vec<T>型はT型の各要素を格納するメモリ領域と、3つの要素を持つ構造体で表現されています。その構造体の要素は、前述のメモリ領域を指すポインタ、Vec<T>の容量（capacity）、Vec<T>の長さになっています。
</p>

 <p>
仮にStringがCopyトレイトを実装できたとすると、shallow copyによってコピーされるのはVec<u8>の構造体の部分だけになります。u8型の各要素を格納するメモリ領域はコピーされず、また構造体の中にあるポインタも（memcpy相当なので）みな同じアドレスを指します。つまり、コピーによって作られた複数のStringが、同じu8型の要素を共有することになります。
</p>

 <p>
Copyトレイトはmemcpy相当の操作だけで完全にコピーできる型にしか実装できないようになっています。たとえばu8型の値はmemcpyでコピーすれば十分（他にコピーするものがない）なのでCopyトレイトが実装されています。一方、Vec<T>はmemcpyでは不十分（shallow copyになる）なのでCopyトレイトを実装できません。
</p>

 <p>
一方、Vec<T>のclone()メソッドはdeep copyを行うように実装されています。各要素を格納するメモリ領域が新たに割り当てられ、構造体の値も新たに作られます。また個々の要素も、そのclone()メソッドを呼ぶことでコピーされます。つまり、clone()によって作られた複数のStringは、それぞれが異なるメモリ領域にあるu8型の要素を持つことになります。
</p>

 <p>
さて本題のRustの配列型の初期化構文[s; 2]では、なぜsのところにCopyトレイトを実装した型しか受け付けないかですが、その理由はドキュメントに書かれてないので、あくまでも私の推測を元に説明します。
</p>

 <p>
Rustの配列はあらかじめ言語に組み込まれている型（プリミティブ型）です。また、初期化の構文[s; 2]も言語に組み込まれています。そのような構文からは、clone()のようにRustコードで実装されたメソッドを呼び出すことができないのかもしれません。メソッドは呼べないので、型の実装に依存しないmemcpy相当のコピーを行うのではないでしょうか。memcpy相当の操作で完全にコピーできることを保証するには、sがCopyトレイトを実装していなければなりません。
</p>

 <p>
Vec<T>には配列の初期化にそっくりのvec![s; 2]の構文があります。Vec<T>はプリミティブ型ではなく、Rustコードで実装されたユーザー定義型です。またvec![s; 2]はマクロで実装されており、これもコンパイル時にRustコードに変換されます。そのためだと思いますが、vec![s; 2]ではsがCopyを実装している必要はなく、Cloneを実装していれば初期化できます。
</p>
</blockquote>
</div>
</div>
 <div id="outline-container-orga1dae25" class="outline-3">
 <h3 id="orga1dae25"> <a href="#orga1dae25">マクロの例</a></h3>
 <div class="outline-text-3" id="text-orga1dae25">
 <p>
マクロの例。identはidentityの略。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 1: </span>lintを定義するマクロ</label> <pre class="src src-git-permalink">https://github.com/kd-collective/rust/blob/a3beeaa84da241f35888338ded6659938206ff13/src/librustdoc/lint.rs#L66-L83
</pre>
</div>

 <div class="results" id="org428ec18">
 <p>
macro_rules! declare_rustdoc_lint {
    ($(#[$attr:meta])* $name: ident, $level: ident, $descr: literal $(,)?) => {
        declare_tool_lint! {
            $(#[$attr])* pub rustdoc::$name, $level, $descr
        }
    }
}
</p>

 <p>
declare_rustdoc_lint! {
     <i>/</i> The `broken_intra_doc_links` lint detects failures in resolving
     <i>/</i> intra-doc link targets. This is a `rustdoc` only lint, see the
     <i>/</i> documentation in the [rustdoc book].
     <i>/</i>
     <i>/</i> [rustdoc book]: ../../../rustdoc/lints.html#broken_intra_doc_links
    BROKEN_INTRA_DOC_LINKS,
    Warn,
    “failures in resolving intra-doc link targets”
}
</p>

</div>

 <p>
printlnマクロの定義。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 2: </span>println</label> <pre class="src src-git-permalink">https://github.com/kd-collective/rust/blob/a3beeaa84da241f35888338ded6659938206ff13/library/std/src/macros.rs#L101-L108
</pre>
</div>

 <div class="results" id="orgffd28b3">
 <p>
macro_rules! println {
    () => {
        \(crate::print!("\n")
    };
    (\)($arg:tt)*) => {{
        $crate::io::_print(\(crate::format_args_nl!(\)($arg)*));
    }};
}
</p>

</div>
</div>
</div>
 <div id="outline-container-orge6304b2" class="outline-3">
 <h3 id="orge6304b2"> <a href="#orge6304b2">ライフタイムの概要</a></h3>
 <div class="outline-text-3" id="text-orge6304b2">
 <ul class="org-ul"> <li> <a href="https://doc.rust-jp.rs/book-ja/ch10-03-lifetime-syntax.html">ライフタイムで参照を検証する - The Rust Programming Language 日本語版</a></li>
</ul> <p>
Rustにおいて参照はすべてライフタイムを保持する。ライフタイムは、その参照が有効になるスコープ。ライフタイムも暗黙的に推論される。複数の型の可能性があるときには、型を注釈しなければならない。
</p>

 <p>
ライフタイムの主な目的は、ダングリング参照…参照するつもりだったデータ以外のデータを参照してしまうこと…を回避すること。コンパイラは借用チェッカーによってチェックしてエラーを出す。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 3: </span>値がスコープを抜けてしまった参照を使用しようとする</label> <pre class="src src-rust">fn main() {
  {
    let r;

    {
      let x = 5;
      r = &x;
    }

    println!("r: {}", r);
  }
}
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-nil">error[E0597]: `x` does not live long enough
  --> /tmp/babel-Mwh0df/rust-H3aWMg:8:11
   |
8  |       r = &x;
   |           ^^ borrowed value does not live long enough
9  |     }
   |     - `x` dropped here while still borrowed
10 |
11 |     println!("r: {}", r);
   |                       - borrow later used here

error: aborting due to previous error

For more information about this error, try `rustc --explain E0597`.
</pre>
</div>

 <p>
関数のジェネリックなライフタイム。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 4: </span>2つの文字列スライスのうち長い方を返す関数。が、ライフタイムに言及するエラーでコンパイルできない</label> <pre class="src src-rust">// 引数は参照である。longest関数に引数の所有権を奪ってほしくないから
fn longest(x: &str, y: &str) -> &str {
    if x.len() > y.len() {
        x
    } else {
        y
    }
}

fn main() {
    let string1 = String::from("abcd");
    let string2 = "xyz";

    let result = longest(string1.as_str(), string2);
    println!("The longest string is {}", result);
}
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-nil">error[E0106]: missing lifetime specifier
 --> /tmp/babel-Mwh0df/rust-eT95tY:2:33
  |
2 | fn longest(x: &str, y: &str) -> &str {
  |               ----     ----     ^ expected named lifetime parameter
  |
  = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `x` or `y`
help: consider introducing a named lifetime parameter
  |
2 | fn longest<'a>(x: &'a str, y: &'a str) -> &'a str {
  |           ++++     ++          ++          ++

error: aborting due to previous error

For more information about this error, try `rustc --explain E0106`.
</pre>
</div>

 <p>
↑戻り値の型はジェネリックなライフタイム引数である引数であるといっている。返している参照が  <code>x</code> か  <code>y</code> のどちらを参照しているか、コンパイラにはわからないから。ifブロックは  <code>x</code> への参照を返し、elseブロックは  <code>y</code> への参照を返すので、どちらかわからない。
</p>

 <p>
エラーを修正するためには、借用チェッカーが解析できるように、参照間の関係を定義するジェネリックなライフタイム引数を追加する。ライフタイム注釈は、参照の生存期間を変えることはない。ライフタイム注釈は、ライフタイムに影響することなく、複数の参照のライフタイムのお互いの関係を記述する。
</p>

 <p>
ライフタイム引数の名前はアポストロフィーで始まらなければならず、通常全て小文字で、ジェネリック型のように短い。慣例的に  <code>'a</code> という名前を使う。
</p>

 <div class="org-src-container">
 <pre class="src src-rust">&i32 // ただの参照
&'a i32 // 明示的なライフタイム付きの参照
&'a mut i32 // 明示的なライフタイム付きの可変参照
</pre>
</div>

 <p>
ライフタイム注釈をつける。
</p>
 <ul class="org-ul"> <li>何らかのライフタイム’aに対して、関数は2つの引数を取り、どちらも少なくともライフタイム’aと同じだけ生きる文字列スライスであるとコンパイラに教えるようになった</li>
 <li>返る文字列スライスもライフタイム’aと同じだけ生きると、コンパイラに教えている。実際にはlongest関数が返す参照のライフタイムは、渡された参照のうち、小さいほうのライフタイムと同じということになる</li>
</ul> <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 5: </span>ライフタイム注釈を引数、返り値につける</label> <pre class="src src-rust">fn longest<'a>(x: &'a str, y: &'a str) -> &'a str {
    if x.len() > y.len() {
        x
    } else {
        y
    }
}

fn main() {
    let string1 = String::from("abcd");
    let string2 = "xyz";

    let result = longest(string1.as_str(), string2);
    println!("The longest string is {}", result);
}
main();
</pre>
</div>

 <div class="results" id="orgb53b7a6">
 <p>
The longest string is abcd
()
</p>

</div>

 <ul class="org-ul"> <li>ライフタイム引数を指定するとき、いかなる値のライフタイムも変更していない。longest関数は、  <code>x</code> と  <code>y</code> の正確な生存期間を知っている必要はなく、このシグニチャを満たすようなスコープを’aに代入できることを知っているだけ</li>
 <li>関数にライフタイムを注釈するときは、注釈は関数の本体ではなくシグニチャに付与する
 <ul class="org-ul"> <li>コンパイラは注釈がなくとも関数内のコードを解析できる。が、関数に関数外からの参照や関数外への参照がある場合、コンパイラが引数や戻り値のライフタイムも自力で解決することはほとんど不可能になる。</li>
 <li>そのライフタイムは関数が呼び出されるたびに異なる可能性があるので、手動でライフタイムを注釈する必要がある</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org90f7139" class="outline-3">
 <h3 id="org90f7139"> <a href="#org90f7139">トレイトの概要</a></h3>
 <div class="outline-text-3" id="text-org90f7139">
 <p>
 <a href="https://doc.rust-jp.rs/book-ja/ch10-02-traits.html">トレイト：共通の振る舞いを定義する - The Rust Programming Language 日本語版</a>
</p>

 <p>
トレイトを使用すると、あるジェネリックが、特定の振る舞いをもつあらゆる型になり得ることを指定できる。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 6: </span>メソッドシグニチャのあとに、セミコロンを使用している。このトレイトに実装する型はそれぞれ、メソッドの本体に独自の振る舞いを提供しなければならない</label> <pre class="src src-rust">pub trait Summary {
    fn summarize(&self) -> String;
}
</pre>
</div>

 <p>
トレイトを型に実装する。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 7: </span>同じメソッド名summarizeで型によって振る舞いが異なる</label> <pre class="src src-rust">pub trait Summary {
    fn summarize(&self) -> String;
}

pub struct NewsArticle {
    pub headline: String,
    pub location: String,
    pub author: String,
    pub content: String,
}

// impl トレイト for 構造体
impl Summary for NewsArticle {
    fn summarize(&self) -> String {
        format!("{}, by {} ({})", self.headline, self.author, self.location)
    }
}

pub struct Tweet {
    pub username: String,
    pub content: String,
    pub reply: bool,
    pub retweet: bool,
}

impl Summary for Tweet {
    fn summarize(&self) -> String {
        format!("{}: {}", self.username, self.content)
    }
}

fn main() {
    let article = NewsArticle {
        headline: String::from("Big news!"),
        location: String::from("Tokyo"),
        author: String::from("Me"),
        content: String::from("Birthday"),
    };

    println!("1 new news: {}", article.summarize());

    let tweet = Tweet {
        username: String::from("horse_ebooks"),
        content: String::from(
            "of course, as you probably already know, people",
        ),
        reply: false,
        retweet: false,
    };

    println!("1 new tweet: {}", tweet.summarize());
}
main()
</pre>
</div>

 <div class="results" id="orgb404566">
 <p>
1 new news: Big news!, by Me (Tokyo)
1 new tweet: horse_ebooks: of course, as you probably already know, people
()
</p>

</div>

 <p>
制約: 外部のトレイトを外部の型に対して実装できない。コヒーレンス、孤児のルールと呼ばれる特性の一部。この制約によって、他の人のコードが自分のコードを壊したり、その逆が起きないことを保証する。
</p>

 <p>
デフォルト実装。各メソッドのデフォルト実装があると、すべての型に対して実装を要求しないので便利。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 8: </span>Summaryトレイトのsummarizeメソッドにデフォルト実装を指定する</label> <pre class="src src-rust">pub struct NewsArticle {
    pub headline: String,
    pub location: String,
    pub author: String,
    pub content: String,
}

pub trait Summary {
    fn summarize(&self) -> String {
        String::from("(Read more...)")
    }
}

impl Summary for NewsArticle { }

fn main() {
    let article = NewsArticle {
        headline: String::from("Big news!"),
        location: String::from("Tokyo"),
        author: String::from("Me"),
        content: String::from("Birthday"),
    };
    println!("New article available! {}", article.summarize());
}
main()
</pre>
</div>

 <div class="results" id="org551108d">
 <p>
New article available! (Read more…)
()
</p>

</div>

 <p>
デフォルト実装は、自らのトレイトのデフォルト実装を持たない他のメソッドを呼び出すことができる。↑の場合は実装メソッドがないため、デフォルト実装が使われた。
</p>

 <p>
一部だけデフォルト実装にする例。
</p>

 <div class="org-src-container">
 <pre class="src src-rust">pub struct Tweet {
    pub username: String,
    pub content: String,
    pub reply: bool,
    pub retweet: bool,
}

pub trait Summary {
    fn summarize_author(&self) -> String;

    fn summarize(&self) -> String {
        format!("Read more from {}...", self.summarize_author())
    }
}

impl Summary for Tweet {
    fn summarize_author(&self) -> String {
        format!("@{}", self.username)
    }
}

fn main() {
    let tweet = Tweet {
        username: String::from("horse_ebooks"),
        content: String::from(
            "of course, as you probably already know, people",
        ),
        reply: false,
        retweet: false,
    };

    println!("summarize: {}", tweet.summarize());
    println!("summarize_author: {}", tweet.summarize_author());
}

main()
</pre>
</div>

 <div class="results" id="org7132a9b">
 <p>
summarize: Read more from @horse_ebooks…
summarize_author: @horse_ebooks
()
</p>

</div>

 <p>
引数itemのsummarizeメソッドを呼ぶ関数notifyを定義する。引数itemはSummaryトレイトを実装している何らかの型。
</p>

 <div class="org-src-container">
 <pre class="src src-rust">pub struct Tweet {
    pub username: String,
    pub content: String,
    pub reply: bool,
    pub retweet: bool,
}

pub trait Summary {
    fn summarize_author(&self) -> String;

    fn summarize(&self) -> String {
        format!("Read more from {}...", self.summarize_author())
    }
}

impl Summary for Tweet {
    fn summarize_author(&self) -> String {
        format!("@{}", self.username)
    }
}

// 引数: &impl トレイト
pub fn notify(item: &impl Summary) {
    println!("Breaking news! {}", item.summarize());
}

// ↑と等価で、冗長に書いたバージョン。トレイト境界
// 山カッコの中にジェネリックな型引数の宣言を書き、型引数の後ろにコロンを挟んでトレイト境界を置く
// pub fn notify<T: Summary>(item: &T) {
//   // 速報! {}
//   println!("Breaking news! {}", item.summarize());
// }

fn main() {
    let tweet = Tweet {
        username: String::from("horse_ebooks"),
        content: String::from(
            "of course, as you probably already know, people",
        ),
        reply: false,
        retweet: false,
    };

    notify(&tweet);
}

main()
</pre>
</div>

 <div class="results" id="orgc53a6e4">
 <p>
Breaking news! Read more from @horse_ebooks…
()
</p>

</div>

 <p>
トレイトを実装している型を返す。impl Trait構文を戻り値型のところで使うことで、あるトレイトを実装する何らかの型を返す。
</p>

 <div class="org-src-container">
 <pre class="src src-rust">pub struct Tweet {
    pub username: String,
    pub content: String,
    pub reply: bool,
    pub retweet: bool,
}

pub trait Summary {
    fn summarize_author(&self) -> String;

    fn summarize(&self) -> String {
        format!("Read more from {}...", self.summarize_author())
    }
}

impl Summary for Tweet {
    fn summarize_author(&self) -> String {
        format!("@{}", self.username)
    }
}

// impl Trait構文を戻り値型のところで使うことで、**あるトレイトを実装する**何らかの型を返す
// 具体的な型を指定してないところがポイント
// これはクロージャとイテレータを扱うときに特に便利。ある関数はIteratorトレイトを実装するある型を返すのだ、と簡潔に指定できる
fn returns_summarizable() -> impl Summary {
    Tweet {
        username: String::from("horse_ebooks"),
        content: String::from(
            "of course, as you probably already know, people",
        ),
        reply: false,
        retweet: false,
    }
}

fn main() {
  let tweet = returns_summarizable();
  println!("result: {}", tweet.summarize_author());
}

main()
</pre>
</div>

 <div class="results" id="org4ad2d4b">
 <p>
result: @horse_ebooks
()
</p>

</div>

 <ul class="org-ul"> <li>ただしimpl Traitの制約として、1種類の型を返す場合にのみ使える</li>
</ul> <p>
関数に渡したスライスの値の型が、PartialOrdとCopyを実装する限りコンパイルできる、ジェネリックなlargest関数。
</p>

 <div class="org-src-container">
 <pre class="src src-rust">fn largest<T: PartialOrd + Copy>(list: &[T]) -> T {
    let mut largest = list[0];

    for &item in list {
        if item > largest {
            largest = item;
        }
    }

    largest
}

fn main() {
    let number_list = vec![34, 50, 25, 100, 65];
    let result = largest(&number_list);
    println!("The largest number is {}", result);

    let char_list = vec!['y', 'm', 'a', 'q'];
    let result = largest(&char_list);
    println!("The largest char is {}", result);
}

main()
</pre>
</div>

 <div class="results" id="orged27381">
 <p>
The largest number is 100
The largest char is y
()
</p>

</div>

 <p>
トレイト境界を使用して、メソッド実装を条件分けする。
</p>
 <ul class="org-ul"> <li>Pair<T>は常にnew関数を実装する。</li>
 <li>Pair<T>は、内部の型Tが比較を可能にするPartialOrdトレイトと出力を可能にするDisplayトレイトを実装しているときのみ、cmp_displayメソッドを実装する。</li>
</ul> <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 9: </span>トレイト境界によってジェネリックな型に対するメソッド実装を条件分けする</label> <pre class="src src-rust">  use std::fmt::Display;

  struct Pair<T> {
      x: T,
      y: T,
  }

  impl<T> Pair<T>{
      fn new(x: T, y: T) -> Self {
          Self { x, y }
      }
  }

  impl <T: Display + PartialOrd> Pair<T> {
      fn cmp_display(&self) {
          if self.x >= self.y {
              println!("The largest member is x = {}", self.x);
          } else {
              println!("The largest member is y = {}", self.y);
          }
      }
  }

  fn main() {
      let pair = Pair{ x: 1, y: 2};
      pair.cmp_display();
  }
main();

</pre>
</div>

 <div class="results" id="org000edd3">
 <p>
The largest member is y = 2
()
</p>

</div>

 <p>
別のトレイトを実装するあらゆる型に対するトレイト実装を条件分けできる。トレイト境界を満たすあらゆる型にトレイトを実装することは、ブランケット実装と呼ばれ、Rustの標準ライブラリで広く使用される。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 10: </span>rustのソースコード。標準ライブラリは、Displayトレイトを実装するあらゆる型にToStringトレイトを実装している</label> <pre class="src src-git-permalink">https://github.com/kd-collective/rust/blob/8b954910c59a7a362c60959e93110892b6e9a691/library/alloc/src/string.rs#L2388-L2402
</pre>
</div>

 <div class="results" id="orgd5e855a">
 <p>
impl<T: fmt::Display + ?Sized> ToString for T {
     <i>/ A common guideline is to not inline generic functions. However,
    /</i> removing `#[inline]` from this method causes non-negligible regressions.
     <i>/ See  <a href="https://github.com/rust-lang/rust/pull/74852">https://github.com/rust-lang/rust/pull/74852</a>, the last attempt
    /</i> to try to remove it.
    #[inline]
    default fn to_string(&self) -> String {
        let mut buf = String::new();
        let mut formatter = core::fmt::Formatter::new(&mut buf);
        // Bypass format_args!() to avoid write_str with zero-length strs
        fmt::Display::fmt(self, &mut formatter)
            .expect(“a Display implementation returned an error unexpectedly”);
        buf
    }
}
</p>

</div>

 <p>
整数はDisplayを実装するので、整数値を対応するString値に変換できる。
</p>
 <div class="org-src-container">
 <pre class="src src-rust">fn main() {
    println!("{}", 3.to_string());
}
main();
</pre>
</div>

 <div class="results" id="org2221d37">
 <p>
3
()
</p>

</div>
</div>
</div>
 <div id="outline-container-orgdc18e0c" class="outline-3">
 <h3 id="orgdc18e0c"> <a href="#orgdc18e0c">ジェネリクスの概要</a></h3>
 <div class="outline-text-3" id="text-orgdc18e0c">
 <p>
 <a href="https://doc.rust-jp.rs/book-ja/ch10-00-generics.html">ジェネリック型、トレイト、ライフタイム - The Rust Programming Language 日本語版</a>
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 11: </span>Option enumの定義にもジェネリック型が使われている。</label> <pre class="src src-rust">enum Option<T> {
  Some(T),
  None,
}
</pre>
</div>

 <p>
型Tの値を保持するSomeと、値を何も保持しないNone。
</p>

 <p>
複数のジェネリックな型を使用できる。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 12: </span>Result Enumの定義</label> <pre class="src src-rust">enum Result<T, E> {
    Ok(T),
    Err(E),
}
</pre>
</div>

 <p>
メソッド定義にも使える。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 13: </span>implの直後にTを宣言しなければならない。そうすることでPointの山カッコ内の方が、具体的な型ではなくジェネリックな型であることを認識できる</label> <pre class="src src-rust">  struct Point<T> {
    x: T,
    y: T,
  }

impl<T> Point<T> {
  fn x(&self) -> &T {
    &self.x
  }
}

fn main() {
  let p = Point { x: 5, y: 10};
  println!("p.x = {}", p.x());
}
</pre>
</div>
</div>
</div>
 <div id="outline-container-org9d9a787" class="outline-3">
 <h3 id="org9d9a787"> <a href="#org9d9a787">matchとOption</a></h3>
 <div class="outline-text-3" id="text-org9d9a787">
 <p>
 <a href="https://doc.rust-jp.rs/book-ja/ch06-02-match.html">match制御フロー演算子 - The Rust Programming Language 日本語版</a>
</p>

 <div class="org-src-container">
 <pre class="src src-rust">enum Coin {
  Penny,
  Nickel,
  Dime,
  Quarter,
}

fn value_in_cents(coin: Coin) -> u32 {
  match Coin {
    Coin::Penny => 1,
    Coin::Nickel => 5,
    Coin::Dime => 10,
    Coin::Quarter => 25,
  }
}
</pre>
</div>

 <p>
値に束縛されるパターン。Quarterが保持するenumを増やす。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 14: </span>Quarterにenumが増えた</label> <pre class="src src-rust">#[derive(Debug)]
enum UsState {
    Alabama,
    Alaska,
}

enum Coin {
    Penny,
    Nickel,
    Dime,
    Quarter(UsState),
}

fn value_in_cents(coin: Coin) -> u32 {
    match coin {
        Coin::Penny => 1,
        Coin::Nickel => 5,
        Coin::Dime => 10,
        Coin::Quarter(state) => {
            // stateに束縛されるのは、UsState::Alabama
            println!("state quarter from {:?}!", state);
            25
        },
    }
}

value_in_cents(Coin::Quarter(UsState::Alabama))
</pre>
</div>

 <div class="results" id="org056dd56">
 <p>
state quarter from Alabama!
25
</p>

</div>

 <p>
Option<T>とのマッチ。
</p>
 <ul class="org-ul"> <li>マッチは包括的なので、もしNoneアームがなかったとしたらエラーを出してくれる。</li>
</ul> <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 15: </span>中に値があったらその値に1を足す。値がなければNoneを返す</label> <pre class="src src-rust">fn plus_one(x: Option<i32>) -> Option<i32> {
    match x {
        None => None,
        Some(i) => Some(i + 1),
    }
}

fn main() {
    let five = Some(5);
    let six = plus_one(five);
    let none = plus_one(None);
}

</pre>
</div>

 <p>
単にif letで短く書ける。
</p>

 <div class="org-src-container">
 <pre class="src src-rust">if let Some(thing) = thing {
   // 中身の値があるとき実行
  ｝else {
   // 中身の値がないとき実行
  }
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-nil">error[E0433]: failed to resolve: use of undeclared type `Coin`
 --> /tmp/babel-Mwh0df/rust-jR2DGi:4:12
  |
4 |     if let Coin::Quarter(state) = coin {
  |            ^^^^ use of undeclared type `Coin`

error[E0425]: cannot find value `coin` in this scope
 --> /tmp/babel-Mwh0df/rust-jR2DGi:4:35
  |
4 |     if let Coin::Quarter(state) = coin {
  |                                   ^^^^ not found in this scope

error: aborting due to 2 previous errors

Some errors have detailed explanations: E0425, E0433.
For more information about an error, try `rustc --explain E0425`.
</pre>
</div>
</div>
</div>
 <div id="outline-container-org3230d18" class="outline-3">
 <h3 id="org3230d18"> <a href="#org3230d18">enumと構造体</a></h3>
 <div class="outline-text-3" id="text-org3230d18">
 <p>
 <a href="https://doc.rust-jp.rs/book-ja/ch06-01-defining-an-enum.html">Enumを定義する - The Rust Programming Language 日本語版</a>
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 16: </span>enumの各列挙子にデータを直接添付できる</label> <pre class="src src-rust">enum IpAddr {
    V4(String),
    V6(String),
}

fn main () {
    let home = IpAddr::V4(String::from("127.0.0.1"));
    let loopback = IpAddr::V6(String::from("::1"));
}

main()
</pre>
</div>

 <p>
別の例。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 17: </span>これは当然、異なる構造体でも実現できる。しかしenumだと、この種のメッセージいずれもとる関数を簡単に定義できるメリットがある</label> <pre class="src src-rust">enum Message {
  Quit,
  Move { x: i32, y: i32 },
  Write(String),
  ChangeColor(i32, i32, i32),
}
</pre>
</div>

 <p>
Optionも、標準ライブラリにより定義されているEnum。初期化処理(prelude)に含まれているため、明示的にスコープに導入する必要がない。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 18: </span>定義</label> <pre class="src src-git-permalink">https://github.com/kd-collective/rust/blob/8b954910c59a7a362c60959e93110892b6e9a691/library/core/src/option.rs#L514-L523
</pre>
</div>

 <div class="results" id="orgd7ce590">
 <p>
pub enum Option<T> {
     <i>/</i> No value
    #[lang = “None”]
    #[stable(feature = “rust1”, since = “1.0.0”)]
    None,
     <i>/</i> Some value `T`
    #[lang = “Some”]
    #[stable(feature = “rust1”, since = “1.0.0”)]
    Some(#[stable(feature = “rust1”, since = “1.0.0”)] T),
}
</p>

</div>

 <p>
Option値を使って数値型や文字列型を保持する例。
</p>
 <div class="org-src-container">
 <pre class="src src-rust">let some_number = Some(5);
let some_string = Some("a string");

let absent_number: Option<i32> = None;
</pre>
</div>

 <p>
Option<T>とTは異なる。Option<T>を使うためには変換が必要になる。nullである場合を明示的に処理する必要がある。
</p>
</div>
</div>
 <div id="outline-container-orgee2f3f8" class="outline-3">
 <h3 id="orgee2f3f8"> <a href="#orgee2f3f8">構造体のインスタンス化</a></h3>
 <div class="outline-text-3" id="text-orgee2f3f8">
 <p>
 <a href="https://doc.rust-jp.rs/book-ja/ch05-03-method-syntax.html">メソッド記法 - The Rust Programming Language 日本語版</a>
</p>

 <p>
newはない。
</p>

 <div class="org-src-container">
 <pre class="src src-rust">struct Rectangle {
    width: u32,
    height: u32,
}

fn main() {
    let rect1 = Rectangle { width: 30, height: 50 };

    println!("The area of the rectangle is {} square pixels.", area(&rect1));
}

fn area(rectangle: &Rectangle) -> u32{ rectangle.width *
                                       rectangle.height }

main()
</pre>
</div>

 <div class="results" id="org6709566">
 <p>
The area of the rectangle is 1500 square pixels.
()
</p>

</div>

 <p>
構造体で情報出力するために、debug注釈を追加する。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 19: </span>注釈を追加して、構造体の中身を表示できるようになる</label> <pre class="src src-rust">#[derive(Debug)]
struct Rectangle {
  width: u32,
  height: u32,
}

fn main() {
  let rect = Rectangle { width: 1, height: 1};
  println!("rect is {:?}", rect);
}

main()
</pre>
</div>

 <div class="results" id="org2a77c30">
 <p>
rect is Rectangle { width: 1, height: 1 }
()
</p>

</div>

 <p>
構造体上にメソッドを実装する。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 20: </span>rect1.area()で呼び出せる。型に実装することでグルーピングできる</label> <pre class="src src-rust">#[derive(Debug)]
struct Rectangle {
    width: i32,
    height: i32,
}

impl Rectangle {
    // メソッドなので、selfはRectangle。
    fn area(&self) -> u32 {
        self.width * self.height
    }
}

fn main() {
    let rect1 = Rectangle{ width: 1, height: 1 }
    println!(
        "The area of the rectangle is {} square pixels.",
        rect1.area()
    );
}
</pre>
</div>

 <p>
新しいメソッド。
</p>

 <div class="org-src-container">
 <pre class="src src-rust">#[derive(Debug)]
struct Rectangle {
    width: i32,
    height: i32,
}

impl Rectangle {
    fn can_hold(&self, other: &Rectangle) -> bool {
        self.width > other.width && self.height > other.height
    }
}

fn main() {
    let rect1 = Rectangle{ width: 30, height: 50 };
    let rect2 = Rectangle{ width: 10, height: 40 };
    let rect3 = Rectangle{ width: 60, height: 45 };

    println!("Can rect1 hold rect2? {}", rect1.can_hold(&rect2));
    println!("Can rect1 hold rect3? {}", rect1.can_hold(&rect3));
}

main()
</pre>
</div>

 <div class="results" id="org1264e5b">
 <p>
Can rect1 hold rect2? true
Can rect1 hold rect3? false
()
</p>

</div>
</div>
</div>
 <div id="outline-container-org1ee7b0c" class="outline-3">
 <h3 id="org1ee7b0c"> <a href="#org1ee7b0c">ライフタイム</a></h3>
 <div class="outline-text-3" id="text-org1ee7b0c">
 <p>
ライフタイムを使うと、構造体に他の何かに所有されたデータへの参照を保持させることができる。
</p>
</div>
</div>
 <div id="outline-container-org272fbca" class="outline-3">
 <h3 id="org272fbca"> <a href="#org272fbca">フィールドのない構造体: ユニット様構造体</a></h3>
 <div class="outline-text-3" id="text-org272fbca">
 <p>
 <a href="https://doc.rust-jp.rs/book-ja/ch05-01-defining-structs.html#%E3%83%95%E3%82%A3%E3%83%BC%E3%83%AB%E3%83%89%E3%81%AE%E3%81%AA%E3%81%84%E3%83%A6%E3%83%8B%E3%83%83%E3%83%88%E6%A7%98%E3%82%88%E3%81%86%E6%A7%8B%E9%80%A0%E4%BD%93">構造体を定義し、インスタンス化する - The Rust Programming Language 日本語版</a>
</p>

 <blockquote>
 <p>
また、一切フィールドのない構造体を定義することもできます！これらは、()、ユニット型と似たような振る舞いをすることから、 ユニット様構造体と呼ばれます。ユニット様構造体は、ある型にトレイトを実装するけれども、 型自体に保持させるデータは一切ない場面に有効になります。トレイトについては第10章で議論します。
</p>
</blockquote>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 21: </span>使用例</label> <pre class="src src-rust">pub struct Monster {}
</pre>
</div>
</div>
</div>
 <div id="outline-container-org85ff74d" class="outline-3">
 <h3 id="org85ff74d"> <a href="#org85ff74d">マクロ作成</a></h3>
 <div class="outline-text-3" id="text-org85ff74d">
 <p>
コンパイル前に動的にコードを展開して、実行することで柔軟性を得られる。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 22: </span>&ast.identでパースした関数名が取れる</label> <pre class="src src-git-permalink">https://github.com/kd-collective/specs/blob/f07c484ad3caf8dccbf55c96af4ef1e3475dea28/specs-derive/src/lib.rs#L56-L57
</pre>
</div>

 <div class="results" id="org4d504ce">
 <p>
fn impl_component(ast: &DeriveInput) -> proc_macro2::TokenStream {
    let name = &ast.ident;
</p>

</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 23: </span>取得した関数名を使って、quote!でマクロ展開する。quote!内が実際にコードとして実行される</label> <pre class="src src-git-permalink">https://github.com/kd-collective/specs/blob/f07c484ad3caf8dccbf55c96af4ef1e3475dea28/specs-derive/src/lib.rs#L71-L75
</pre>
</div>

 <div class="results" id="orgf8f2bf0">
 <p>
quote! {
    impl #impl_generics Component for #name #ty_generics #where_clause {
	type Storage = #storage<Self>;
    }
}
</p>

</div>
</div>
</div>
 <div id="outline-container-org633f8d1" class="outline-3">
 <h3 id="org633f8d1"> <a href="#org633f8d1">unwrap()は何か</a></h3>
 <div class="outline-text-3" id="text-org633f8d1">
 <p>
unwrap() は、 Option<T> 型や Result<T, E> 型の値（つまり、何かしらの値を ラップ している値）から中身の値を取り出す関数。たとえば Option<T> 型の値に対して unwrap() を呼ぶと、それが内包する T 型の値を返す。それらの型には値が入ってない可能性もあり、入ってない場合にはunwrapは失敗する。
</p>

 <p>
 <a href="https://ja.stackoverflow.com/questions/1730/rust%E3%81%AEunwrap%E3%81%AF%E4%BD%95%E3%82%92%E3%81%99%E3%82%8B%E3%82%82%E3%81%AE%E3%81%A7%E3%81%99%E3%81%8B">rust - Rustの“unwrap()”は何をするものですか？ - スタック・オーバーフロー</a>
</p>
</div>
</div>
 <div id="outline-container-org7cde726" class="outline-3">
 <h3 id="org7cde726"> <a href="#org7cde726">イテレータを定義する</a></h3>
 <div class="outline-text-3" id="text-org7cde726">
 <p>
 <a href="https://docs.microsoft.com/ja-jp/learn/modules/rust-generic-types-traits/5-iterators">反復子を使用する - Learn | Microsoft Docs</a>
</p>

 <div class="org-src-container">
 <pre class="src src-rust">trait Iterator {
    type Item;
    fn next(&mut self) -> Option<Self::Item>;
}

#[derive(Debug)]
struct Counter {
    length: usize,
    count: usize,
}

impl Counter {
    fn new(length: usize) -> Counter {
        Counter {
            count: 0,
            length,
        }
    }
}

impl Iterator for Counter {
    type Item = usize;

    fn next(&mut self) -> Option<Self::Item> {
        self.count += 1;
        if self.count <= self.length {
            Some(self.count)
        } else {
            None
        }
    }
}

fn main() {
    for number in Counter::new(10) {
        println!("{}", number);
    }
}
</pre>
</div>

 <div class="results" id="orgec8f99c">

</div>
</div>
</div>
 <div id="outline-container-orgcbf112d" class="outline-3">
 <h3 id="orgcbf112d"> <a href="#orgcbf112d">Box、スマートポインタは何か</a></h3>
 <div class="outline-text-3" id="text-orgcbf112d">
 <p>
スマートポインタはポインタのように振る舞うだけでなく、追加のメタデータと能力があるデータ構造。
 <a href="https://doc.rust-jp.rs/book-ja/ch15-00-smart-pointers.html">スマートポインタ - The Rust Programming Language 日本語版</a>
</p>

 <p>
Rustでは、boxを使う。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 24: </span>Boxは値5を示し、値5はヒープに保存されている</label> <pre class="src src-rust">fn main() {
    let b = Box::new(5);
    println!("b = {}", b);
}
</pre>
</div>

 <div class="results" id="org2ba44ed">

</div>

 <p>
Rustでスマートポインタを利用するのに使う。
スタックではなくヒープにデータを保存する。
</p>

 <p>
使う場面。
</p>

 <ul class="org-ul"> <li>コンパイル時にはサイズを知ることができない型があり、正確なサイズを要求する文脈でその型の値を使用するとき</li>
 <li>多くのデータがあり、その所有権を移したいが、その際にデータがコピーされないようにしたいとき</li>
 <li>値を所有する必要があり、特定の型であることではなく、特定のトレイトを実装する型であることのみ気にかけているとき</li>
</ul> <p>
 <a href="https://doc.rust-jp.rs/book-ja/ch15-01-box.html">ヒープのデータを指すBox<T>を使用する - The Rust Programming Language 日本語版</a>
</p>
</div>
</div>
 <div id="outline-container-orgba74cee" class="outline-3">
 <h3 id="orgba74cee"> <a href="#orgba74cee">変更を検知して自動ビルドする</a></h3>
 <div class="outline-text-3" id="text-orgba74cee">
 <p>
変更したら自動でcargo runしてほしいときがある。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 25: </span>cargo-watchを使う</label> <pre class="src src-shell">cargo install cargo-watch
cargo watch -x run
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgaeff6b9" class="outline-3">
 <h3 id="orgaeff6b9"> <a href="#orgaeff6b9"> <code>println!</code> マクロとは何か</a></h3>
 <div class="outline-text-3" id="text-orgaeff6b9">
 <div class="org-src-container">
 <pre class="src src-rust">println!("hello world!");
println!("{} days", 31);
println!("{0}, this is {1}, {1}, this is {0}", "Alice", "Bob");
println!("{} of {:b} people know binary, the other half doesn't", 1, 2);
println!("{number:>0width$}", number=1, width=6);
println!("{subject} {verb} {object}", object="the lazy dog", subject="the quick brown fox", verb="jumps over");
</pre>
</div>

 <div class="results" id="orgda74680">
 <p>
hello world!
31 days
Alice, this is Bob, Bob, this is Alice
1 of 10 people know binary, the other half doesn’t
000001
the quick brown fox jumps over the lazy dog
</p>

</div>

 <p>
引数チェックもしてくれる。
</p>
 <div class="org-src-container">
 <pre class="src src-rust">println!("My name is {0}, {1} {0}", "Bond");
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-nil">error: invalid reference to positional argument 1 (there is 1 argument)
 --> /tmp/babel-wnDbpn/rust-W98kSP:2:27
  |
2 | println!("My name is {0}, {1} {0}", "Bond");
  |                           ^^^
  |
  = note: positional arguments are zero-based

error: aborting due to previous error
</pre>
</div>

 <p>
マーカーの変更。
</p>
 <div class="org-src-container">
 <pre class="src src-rust">println!("This struct `{}` won't print...", Structure(3));
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-nil">error[E0425]: cannot find function, tuple struct or tuple variant `Structure` in this scope
 --> /tmp/babel-wnDbpn/rust-If17CF:2:45
  |
2 | println!("This struct `{}` won't print...", Structure(3));
  |                                             ^^^^^^^^^ not found in this scope

error: aborting due to previous error

For more information about this error, try `rustc --explain E0425`.
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-rust">#[derive(Debug)]
struct Structure(i32);
println!("This struct `{:?}` won't print...", Structure(3));
</pre>
</div>

 <div class="results" id="org9adbefc">
 <p>
This struct `Structure(3)` won’t print…
</p>

</div>
</div>
</div>
</div>
 <div id="outline-container-org02493b0" class="outline-2">
 <h2 id="org02493b0"> <a href="#org02493b0">パッケージ</a></h2>
 <div class="outline-text-2" id="text-org02493b0">
</div>
 <div id="outline-container-orge1fd562" class="outline-3">
 <h3 id="orge1fd562"> <a href="#orge1fd562">ホームディレクトリのチルダを展開するライブラリ</a></h3>
 <div class="outline-text-3" id="text-orge1fd562">
 <ul class="org-ul"> <li> <a href="https://github.com/netvl/shellexpand">netvl/shellexpand: A library for shell-like expansions of variables in strings</a></li>
</ul> <p>
どういうわけかデフォルトで展開してくれないので、ライブラリで変換する必要がある。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 26: </span>ホームディレクトリで ls コマンドを実行する</label> <pre class="src src-rust">extern crate shellexpand;

fn main() {
    let cwd = format!("{}", shellexpand::tilde("~/"));
    Command::new("ls").current_dir(&cwd);
}
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgdc8ff8d" class="outline-3">
 <h3 id="orgdc8ff8d"> <a href="#orgdc8ff8d">OSディレクトリライブラリ</a></h3>
 <div class="outline-text-3" id="text-orgdc8ff8d">
 <ul class="org-ul"> <li> <a href="https://github.com/xdg-rs/dirs">xdg-rs/dirs: a low-level library that provides config/cache/data paths, following the respective conventions on Linux, macOS and Windows</a></li>
</ul> <p>
OS間のディレクトリの違いを吸収するライブラリ。ミニマルでコードを読みやすい。
</p>
</div>
</div>
 <div id="outline-container-org002e979" class="outline-3">
 <h3 id="org002e979"> <a href="#org002e979"></a> <a href="20210508234743-emacs.html#ID-1ad8c3d5-97ba-4905-be11-e6f2626127ad">Emacs</a>をRustで書き直すプロジェクト</h3>
 <div class="outline-text-3" id="text-org002e979">
 <p>
EmacsのC言語で書かれた部分をRustに書き直すリポジトリがある。
 <a href="https://github.com/remacs/remacs">remacs/remacs: Rust Emacs</a>
</p>
</div>
</div>
 <div id="outline-container-orgb222e5e" class="outline-3">
 <h3 id="orgb222e5e"> <a href="#orgb222e5e">超高速検索できるripgrep</a></h3>
 <div class="outline-text-3" id="text-orgb222e5e">
 <p>
高速検索するripgrepは、ほかのどのgrepツールより早いらしい。
</p>

 <dl class="org-dl"> <dt>repository</dt> <dd> <a href="https://github.com/BurntSushi/ripgrep">BurntSushi/ripgrep</a></dd>
</dl></div>
</div>
 <div id="outline-container-org4e4181c" class="outline-3">
 <h3 id="org4e4181c"> <a href="#org4e4181c">外観がかっこいい</a> <a href="20210606192338-shell.html#ID-585d3b5e-989d-4363-bcc3-894402fcfcf9">Shell</a>, nushell</h3>
 <div class="outline-text-3" id="text-org4e4181c">
 <p>
 <a href="20210915221421-systemcrafters.html#ID-fa497359-ae3f-494a-b24a-9822eefe67ad">System Crafters</a>の動画 <a href="https://www.youtube.com/watch?v=IHeKUeO7bpo">Integrating Nushell with Emacs</a>のコラボ回で出たパッケージ。
リッチな出力形式、便利コマンドがすごい。
</p>
 <dl class="org-dl"> <dt>repository</dt> <dd> <a href="https://github.com/nushell/nushell">nushell/nushell: A new type of shell</a></dd>
</dl></div>
</div>
</div>
 <div id="outline-container-org94ade80" class="outline-2">
 <h2 id="org94ade80"> <a href="#org94ade80">Tasks</a></h2>
 <div class="outline-text-2" id="text-org94ade80">
</div>
 <div id="outline-container-org4644188" class="outline-3">
 <h3 id="org4644188"> <a href="#org4644188"> <span class="todo TODO">TODO</span> </a> <a href="https://techracho.bpsinc.jp/yoshi/2023_08_30/134157">Rustの借用の話をする｜TechRacho by BPS株式会社</a></h3>
 <div class="outline-text-3" id="text-org4644188">
 <p>
借用の解説。
</p>
</div>
</div>
 <div id="outline-container-org8a514c8" class="outline-3">
 <h3 id="org8a514c8"> <a href="#org8a514c8"> <span class="todo TODO">TODO</span> </a> <a href="https://rustc-dev-guide.rust-lang.org/">Getting Started - Rust Compiler Development Guide</a></h3>
 <div class="outline-text-3" id="text-org8a514c8">
 <p>
Rustコンパイラ開発のガイド。
</p>
</div>
</div>
 <div id="outline-container-org9dfcf9b" class="outline-3">
 <h3 id="org9dfcf9b"> <a href="#org9dfcf9b"> <span class="todo TODO">TODO</span> </a> <a href="https://os.phil-opp.com/">Writing an OS in Rust</a></h3>
 <div class="outline-text-3" id="text-org9dfcf9b">
 <p>
OSをrustで書く本。詳しく書かれている。
</p>
</div>
</div>
 <div id="outline-container-orge32d278" class="outline-3">
 <h3 id="orge32d278"> <a href="#orge32d278">型やライブラリの調べ方    <span class="tag"> <span class="DontKnow">DontKnow</span></span></a></h3>
 <div class="outline-text-3" id="text-orge32d278">
 <p>
何かしたいときにうまく型を見つけるためにはどうしたら良いのか。ドキュメントを見てもいまいちわからない。
</p>
</div>
</div>
 <div id="outline-container-orgc75bf79" class="outline-3">
 <h3 id="orgc75bf79"> <a href="#orgc75bf79">型でorはどうやるのか    <span class="tag"> <span class="DontKnow">DontKnow</span></span></a></h3>
 <div class="outline-text-3" id="text-orgc75bf79">
 <p>
文字列もしくは整数、みたいな型はどうやって表現するのか。 <a href="20210831232330-typescript.html#ID-ad1527ee-63b3-4a9b-a553-10899f57c234">TypeScript</a>でいうところのunion型みたいな。
</p>
</div>
</div>
 <div id="outline-container-org0b36a68" class="outline-3">
 <h3 id="org0b36a68"> <a href="#org0b36a68"></a> <a href="https://slide-rs.github.io/specs-website/docs/book/master/01_intro.html#introduction">Introduction - The Specs Book</a></h3>
 <div class="outline-text-3" id="text-org0b36a68">
 <p>
ECSとSpecsのドキュメント。
</p>
</div>
</div>
 <div id="outline-container-org5f788ee" class="outline-3">
 <h3 id="org5f788ee"> <a href="#org5f788ee"></a> <a href="https://docs.microsoft.com/ja-jp/learn/paths/rust-first-steps/">Rust の最初のステップ - Learn | Microsoft Docs</a></h3>
 <div class="outline-text-3" id="text-org5f788ee">
 <p>
Microsoftのチュートリアル。
</p>
</div>
</div>
 <div id="outline-container-orgf147c60" class="outline-3">
 <h3 id="orgf147c60"> <a href="#orgf147c60"> <span class="todo TODO">TODO</span> </a> <a href="https://doc.rust-jp.rs/rust-by-example-ja/">Introduction - Rust By Example 日本語版</a></h3>
</div>
 <div id="outline-container-orgdc66e23" class="outline-3">
 <h3 id="orgdc66e23"> <a href="#orgdc66e23"> <span class="todo TODO">TODO</span> </a> <a href="https://doc.rust-jp.rs/book-ja/title-page.html">The Rust Programming Language 日本語版</a></h3>
 <div class="outline-text-3" id="text-orgdc66e23">
 <ul class="org-ul"> <li>10</li>
</ul></div>
</div>
 <div id="outline-container-orgc44a3c1" class="outline-3">
 <h3 id="orgc44a3c1"> <a href="#orgc44a3c1"></a> <a href="https://www.warp.dev/blog/why-is-building-a-ui-in-rust-so-hard">Why is building a UI in Rust so hard? | Warp</a></h3>
 <div class="outline-text-3" id="text-orgc44a3c1">
 <p>
RustでのUI作成はなぜつらいか。
</p>
</div>
</div>
</div>
 <div id="outline-container-org07b82d3" class="outline-2">
 <h2 id="org07b82d3"> <a href="#org07b82d3">Reference</a></h2>
 <div class="outline-text-2" id="text-org07b82d3">
</div>
 <div id="outline-container-orge51373b" class="outline-3">
 <h3 id="orge51373b"> <a href="#orge51373b"></a> <a href="https://scrapbox.io/nwtgck/Rust%E3%81%A7%E5%80%A4%E3%81%8B%E3%82%89%E5%9E%8B%E6%83%85%E5%A0%B1%E3%82%92%E6%96%87%E5%AD%97%E5%88%97%E3%81%A8%E3%81%97%E3%81%A6%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B%EF%BC%88stable%EF%BC%89">Rustで値から型情報を文字列として取得する（stable） - nwtgck / Ryo Ota</a></h3>
 <div class="outline-text-3" id="text-orge51373b">
 <p>
デバッグで便利そう。
</p>
</div>
</div>
 <div id="outline-container-orga81440c" class="outline-3">
 <h3 id="orga81440c"> <a href="#orga81440c"></a> <a href="https://qiita.com/smicle/items/29a4d5d1d14ad7f77f60">rust String &str の変換と、文字列 数値 の変換 - Qiita</a></h3>
</div>
 <div id="outline-container-org2f6f945" class="outline-3">
 <h3 id="org2f6f945"> <a href="#org2f6f945"></a> <a href="https://qiita.com/yagince/items/e7474839246ced595f7a">[Rust] &strとStringを理解しようと思ったらsliceやmutを理解できてないことに気づいた話 - Qiita</a></h3>
</div>
 <div id="outline-container-org745921d" class="outline-3">
 <h3 id="org745921d"> <a href="#org745921d"></a> <a href="https://zenn.dev/toga/books/rust-atcoder/viewer/01-intro">序｜RustCoder ―― AtCoder と Rust で始める競技プログラミング入門</a></h3>
 <div class="outline-text-3" id="text-org745921d">
 <p>
入門本。
</p>
</div>
</div>
 <div id="outline-container-org0360953" class="outline-3">
 <h3 id="org0360953"> <a href="#org0360953"></a> <a href="https://ja.wikipedia.org/wiki/Rust_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E)">Rust (プログラミング言語) - Wikipedia</a></h3>
</div>
</div>
 <div id="outline-container-orgdb88781" class="outline-2">
 <h2 id="orgdb88781"> <a href="#orgdb88781">Archives</a></h2>
 <div class="outline-text-2" id="text-orgdb88781">
</div>
 <div id="outline-container-org0377eeb" class="outline-3">
 <h3 id="org0377eeb"> <a href="#org0377eeb"> <span class="done DONE">DONE</span> </a> <a href="https://rust-cli.github.io/book/index.html">Getting started - Command Line Applications in Rust</a></h3>
 <div class="outline-text-3" id="text-org0377eeb">
 <p>
コマンドラインプログラムを作るチュートリアル。
</p>
</div>
</div>
 <div id="outline-container-org8bd3ee8" class="outline-3">
 <h3 id="org8bd3ee8"> <a href="#org8bd3ee8"> <span class="done DONE">DONE</span> </a> <a href="https://www.amazon.co.jp/-/en/%E3%82%AF%E3%82%B8%E3%83%A9%E9%A3%9B%E8%A1%8C%E6%9C%BA/dp/4802613512/ref=sr_1_5?crid=14EZ2K0WKN0UY&keywords=Rust&qid=1648043657&sprefix=rus%2Caps%2C165&sr=8-5">手を動かして考えればよくわかる 高効率言語 Rust 書きかた・作りかた</a>    <span class="tag"> <span class="Read">Read</span></span></h3>
 <div class="outline-text-3" id="text-org8bd3ee8">
</div>
 <div id="outline-container-org57a8ac2" class="outline-4">
 <h4 id="org57a8ac2"> <a href="#org57a8ac2">構造体に実装する</a></h4>
 <div class="outline-text-4" id="text-org57a8ac2">
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 27: </span>型に実装する</label> <pre class="src src-rust">    fn main() {
      let body = Body::new(163.0, 75.2, "田中");
      body.print_result();
      let body = Body::new(158.2, 55.0, "鈴木");
      body.print_result();
      let body = Body::new(174.2, 54.2, "井上");
      body.print_result();
    }

  struct BmiRange {
      min: f64,
      max: f64,
      label: String,
  }

  impl BmiRange {
    fn new(min: f64, max: f64, label: &str) -> Self {
      BmiRange{ min, max, label: label.to_string() }
    }

    fn test(&self, v: f64) -> bool {
      (self.min <= v) && (v < self.max)
    }
  }

  struct Body {
    height: f64,
    weight: f64,
    name: String,
  }

  impl Body {
    fn new(height: f64, weight: f64, name: &str) -> Self {
        Body{ height, weight, name: name.to_string() }
    }

    fn calc_bmi(&self) -> f64 {
      self.weight / (self.height / 100.0).powf(2.0)
    }

    fn print_result(&self) {
      let bmi = self.calc_bmi();
      let bmi_list = [
        BmiRange::new(0.0, 18.5, "低体重"),
        BmiRange::new(18.5, 25.0, "普通体重"),
        BmiRange::new(25.0, 30.0, "肥満1度"),
        BmiRange::new(30.0, 35.0, "肥満2度"),
        BmiRange::new(35.0, 40.0, "肥満3度"),
      ];
      let mut result = String::from("不明");
      for range in bmi_list {
        if range.test(bmi) {
          result = range.label.clone();
          break;
        }
      }
      println!("{}さん、 BMI={:.1}, 判定={}",
      self.name, bmi, result);
    }
  }
main()
</pre>
</div>

 <div class="results" id="orgc730a77">
 <p>
田中さん、 BMI=28.3, 判定=肥満1度
鈴木さん、 BMI=22.0, 判定=普通体重
井上さん、 BMI=17.9, 判定=低体重
()
</p>

</div>
</div>
</div>
 <div id="outline-container-orge3920ab" class="outline-4">
 <h4 id="orge3920ab"> <a href="#orge3920ab">None, Result</a></h4>
 <div class="outline-text-4" id="text-orge3920ab">
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 28: </span>列挙型を使う</label> <pre class="src src-rust">struct Counter {
  value: i64,
}

impl Counter {
  fn new() -> Self {
    Counter { value: 0 }
  }

  fn inc(&mut self) {
    self.value += 1;
    println!("value={}", self.value);
  }
}

fn count(counter: Option<&mut Counter>) {
  match counter{
    None => return,
    Some(c) => c.inc(),
  };
}

fn main() {
  let mut a = Counter::new();
  count(Some(&mut a));
  count(Some(&mut a));
  let a = None;
  count(a);
}
main();
</pre>
</div>

 <div class="results" id="orgde28699">
 <p>
value=1
value=2
()
</p>

</div>
</div>
</div>
</div>
 <div id="outline-container-org4a5ec4a" class="outline-3">
 <h3 id="org4a5ec4a"> <a href="#org4a5ec4a"> <span class="done DONE">DONE</span> </a> <a href="https://bfnightly.bracketproductions.com/">Introduction - Roguelike Tutorial - In Rust</a></h3>
 <div class="outline-text-3" id="text-org4a5ec4a">
 <p>
 <a href="20220319131144-roguelike.html#ID-50ac66da-89f2-42dc-a746-d20b041d06ae">roguelike</a>を作る長大なチュートリアル。
とりあえず14章までやり、理解を確かめるため自作改造フェーズに入った。
残りの部分はチュートリアルとしてやるというより、自作するうえで都度参照していく。
</p>
</div>
</div>
 <div id="outline-container-org7b254e6" class="outline-3">
 <h3 id="org7b254e6"> <a href="#org7b254e6"> <span class="done DONE">DONE</span> clone ツール</a></h3>
 <div class="outline-text-3" id="text-org7b254e6">
 <p>
git cloneをコード管理するツール。初期化したときに、再度cloneしまくるのがメンドいため。とりあえず完了。
</p>
</div>
</div>
</div>
 <div id="outline-container-org1d3ca5d" class="outline-2">
 <h2 id="org1d3ca5d"> <a href="#org1d3ca5d">Backlinks</a></h2>
 <div class="outline-text-2" id="text-org1d3ca5d">
 <ul class="org-ul"> <li> <a href="./20210624232811-digger.html">ローグライク作り</a></li>
 <li> <a href="./20210817003906-history.html">History</a></li>
 <li> <a href="./20210901100517-zig.html">Zig</a></li>
 <li> <a href="./20210922010155-nushell.html">nushell</a></li>
 <li> <a href="./20210926150327-oss.html">OSS</a></li>
 <li> <a href="./20220809233721-bracket_lib.html">bracket-lib</a></li>
 <li> <a href="./20230101T175751--kdoc-16-2022年のまとめ__essay.html">KDOC 16: 2022年のまとめ</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20210901101339-rust.html"/>
  <id>https://kijimad.github.io/roam/20210901101339-rust.html</id>
  <updated>2025-06-14T00:00:00+09:00</updated>
</entry>
<entry>
  <title>Git</title>
  <author><name>root</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org255cc27" class="outline-2">
 <h2 id="org255cc27"> <a href="#org255cc27">概要</a></h2>
 <div class="outline-text-2" id="text-org255cc27">
 <p>
Gitはバージョン管理システムである。
</p>
</div>
</div>
 <div id="outline-container-org0a999e3" class="outline-2">
 <h2 id="org0a999e3"> <a href="#org0a999e3">Memo</a></h2>
 <div class="outline-text-2" id="text-org0a999e3">
</div>
 <div id="outline-container-org23af259" class="outline-3">
 <h3 id="org23af259"> <a href="#org23af259">デフォルトブランチをmaster → mainに変えたときの対応</a></h3>
 <div class="outline-text-3" id="text-org23af259">
 <p>
デフォルトブランチをmaster → mainに変えたとき、ローカルで実行して対応する。
</p>

 <div class="org-src-container">
 <pre class="src src-shell">git branch -m master main
git fetch origin
git branch -u origin/main main
git remote set-head origin -a
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgd264b42" class="outline-3">
 <h3 id="orgd264b42"> <a href="#orgd264b42">warning: refname ’xxx’ is ambiguous</a></h3>
 <div class="outline-text-3" id="text-orgd264b42">
 <p>
pullやpushしたとき、↑が出てうまくいかなくなることがある。これは、ブランチ名とタグ名がかぶっていることが原因。どちらかを削除するとうまくいくようになる。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 2: </span>どちらか</label> <pre class="src src-shell">$ git branch -d xxx
$ git tag -d xxx
</pre>
</div>
</div>
</div>
 <div id="outline-container-org2ebc0c3" class="outline-3">
 <h3 id="org2ebc0c3"> <a href="#org2ebc0c3">ゴミファイルを削除する</a></h3>
 <div class="outline-text-3" id="text-org2ebc0c3">
 <p>
gitignoreしたディレクトリで、いつの間にかゴミファイルがたまりがち。
</p>
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 3: </span>削除されるファイルを確認してから、削除する</label> <pre class="src src-shell">git clean -xdn  <span class="org-comment-delimiter"># </span> <span class="org-comment">dry run</span>
git clean -xdf  <span class="org-comment-delimiter"># </span> <span class="org-comment">実行</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-org72cd472" class="outline-3">
 <h3 id="org72cd472"> <a href="#org72cd472">revertしたブランチを再開するとき</a></h3>
 <div class="outline-text-3" id="text-org72cd472">
 <p>
revertしたブランチの途中から再開すると、revertコミットのために差分が出ない。
なので、revertコミットをさらにrevertして、その上で作業を再開する。
</p>

 <div class="org-src-container">
 <pre class="src src-shell">git revert -m 1 {revertしたコミットハッシュ}
</pre>
</div>

 <p>
 <a href="https://stackoverflow.com/questions/2389361/undo-a-git-merge-that-hasnt-been-pushed-yet/6217372#6217372">https://stackoverflow.com/questions/2389361/undo-a-git-merge-that-hasnt-been-pushed-yet/6217372#6217372</a>
</p>
</div>
</div>
 <div id="outline-container-orgbba2ad4" class="outline-3">
 <h3 id="orgbba2ad4"> <a href="#orgbba2ad4">コミットハッシュ取得</a></h3>
 <div class="outline-text-3" id="text-orgbba2ad4">
 <p>
タグをつけるときに便利。
</p>

 <div class="org-src-container">
 <pre class="src src-shell"> <span class="org-variable-name">LC</span>=$(git rev-parse --short HEAD)
 <span class="org-builtin">echo</span> ${ <span class="org-variable-name">LC</span>}
</pre>
</div>

 <pre class="example">
0f777f9
</pre>


 <p>
↓みたいな感じで。
</p>
 <div class="org-src-container">
 <pre class="src src-shell">docker build -t ghcr.io/kijimad/webapp:${ <span class="org-variable-name">LC</span>} .
</pre>
</div>
</div>
</div>
 <div id="outline-container-org66c11f6" class="outline-3">
 <h3 id="org66c11f6"> <a href="#org66c11f6">certエラーが出るとき</a></h3>
 <div class="outline-text-3" id="text-org66c11f6">
 <p>
依存パッケージインストール時、httpsでcloneできないことがある。証明書がないエラー。
</p>
 <div class="org-src-container">
 <pre class="src src-shell">git config --global http.sslVerify false
</pre>
</div>

 <p>
 <a href="https://stackoverflow.com/questions/19045556/git-clone-https-ssl-error">git clone https/ssl error - Stack Overflow</a>
</p>
</div>
</div>
 <div id="outline-container-orgb7a842d" class="outline-3">
 <h3 id="orgb7a842d"> <a href="#orgb7a842d">バイナリファイルの差分</a></h3>
 <div class="outline-text-3" id="text-orgb7a842d">
 <p>
ファイルによって戦略を変えることができる。
特定のバイナリファイル…Wordファイルだったらこうやって変換してから差分を取る、など。
テキストに変換して、比較できる。
</p>

 <ul class="org-ul"> <li> <a href="http://git-scm.com/book/ja/v2/Git-%E3%81%AE%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%A4%E3%82%BA-Git-%E3%81%AE%E5%B1%9E%E6%80%A7">Git - Git の属性</a></li>
</ul></div>
</div>
 <div id="outline-container-org35d4f2b" class="outline-3">
 <h3 id="org35d4f2b"> <a href="#org35d4f2b">Git軽量化</a></h3>
 <div class="outline-text-3" id="text-org35d4f2b">
 <p>
しばらく使っていると不要なブランチが溜まってきて重くなるので、定期的に不要なものを削除する。
</p>
 <div class="org-src-container">
 <pre class="src src-shell">git gc && git fetch --prune
</pre>
</div>
</div>
</div>
 <div id="outline-container-org322ee89" class="outline-3">
 <h3 id="org322ee89"> <a href="#org322ee89">Gitクライアント</a></h3>
 <div class="outline-text-3" id="text-org322ee89">
 <p>
直にGitコマンドを打つほかに、クライアントを使って操作する方法がある。
プログラミングと密接に関係しているので、エディタに付属したものを使うと、同じインターフェイスで扱えて便利。
例えば <a href="20210508234743-emacs.html#ID-1ad8c3d5-97ba-4905-be11-e6f2626127ad">Emacs</a>では <a href="https://github.com/magit/magit">Magit</a>パッケージが人気。
</p>
</div>
</div>
</div>
 <div id="outline-container-org5605a41" class="outline-2">
 <h2 id="org5605a41"> <a href="#org5605a41">Tasks</a></h2>
 <div class="outline-text-2" id="text-org5605a41">
</div>
 <div id="outline-container-org71f2efb" class="outline-3">
 <h3 id="org71f2efb"> <a href="#org71f2efb"> <span class="todo TODO">TODO</span> </a> <a href="https://zenn.dev/chanmoro/scraps/06c972692f98df">git diff がある場合もしくは untracked なファイルがある場合にエラーの終了コードを返すコマンド</a></h3>
 <div class="outline-text-3" id="text-org71f2efb">
 <p>
差分があるとエラーにする。
</p>

 <div class="org-src-container">
 <pre class="src src-shell">$ test -z  <span class="org-string">"$(git status -s)"</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgbbda48e" class="outline-3">
 <h3 id="orgbbda48e"> <a href="#orgbbda48e"> <span class="todo TODO">TODO</span> </a> <a href="https://koseki.hatenablog.com/entry/2014/04/22/inside-git-1">Git の仕組み (1) - こせきの技術日記</a></h3>
 <div class="outline-text-3" id="text-orgbbda48e">
 <p>
Gitの仕組み。
</p>
</div>
</div>
 <div id="outline-container-orga9aec21" class="outline-3">
 <h3 id="orga9aec21"> <a href="#orga9aec21"> <span class="todo TODO">TODO</span> </a> <a href="https://qiita.com/_ha1f/items/2dca1047c57d4f0bd465">難しいGitコマンドは、仕組みから理解してみよう - Qiita</a></h3>
 <div class="outline-text-3" id="text-orga9aec21">
 <p>
Gitの仕組みの解説。
</p>
</div>
</div>
 <div id="outline-container-org3b0e121" class="outline-3">
 <h3 id="org3b0e121"> <a href="#org3b0e121"> <span class="todo TODO">TODO</span> </a> <a href="http://git-scm.com/book/ja/v2">Git - Book</a></h3>
 <div class="outline-text-3" id="text-org3b0e121">
 <p>
日本語で無料公開されている本。
Gitの仕組みの章がとても面白い。
実際のGitが内部で行っていることを、原始的なコマンドを使ってやってみるというもの。
</p>
</div>
</div>
 <div id="outline-container-orgc8369f4" class="outline-3">
 <h3 id="orgc8369f4"> <a href="#orgc8369f4"> <span class="todo TODO">TODO</span> </a> <a href="https://github.blog/jp/2021-01-06-commits-are-snapshots-not-diffs/">コミットはスナップショットであり差分ではない - GitHubブログ</a></h3>
 <div class="outline-text-3" id="text-orgc8369f4">
 <p>
仕組みからの解説。
</p>
</div>
</div>
</div>
 <div id="outline-container-orgee00748" class="outline-2">
 <h2 id="orgee00748"> <a href="#orgee00748">Reference</a></h2>
 <div class="outline-text-2" id="text-orgee00748">
</div>
 <div id="outline-container-org8c8f4d6" class="outline-3">
 <h3 id="org8c8f4d6"> <a href="#org8c8f4d6"></a> <a href="https://evanli.github.io/Github-Ranking/Top100/Go.html">Github Ranking | Github-Ranking</a></h3>
 <div class="outline-text-3" id="text-org8c8f4d6">
 <p>
スター数のランキング。
</p>
</div>
</div>
 <div id="outline-container-org94c0b2a" class="outline-3">
 <h3 id="org94c0b2a"> <a href="#org94c0b2a"></a> <a href="https://gource.io/">Gource - a software version control visualization tool</a></h3>
 <div class="outline-text-3" id="text-org94c0b2a">
 <p>
Gitの美しい可視化ツール。
</p>
</div>
</div>
 <div id="outline-container-org69a4a69" class="outline-3">
 <h3 id="org69a4a69"> <a href="#org69a4a69"></a> <a href="https://qiita.com/koara-local/items/e36bc172a3c36eb67b4f">[Git] remoteのtagとbranchの名前が同じ場合の消し方 - Qiita</a></h3>
 <div class="outline-text-3" id="text-org69a4a69">
 <p>
 <a href="20220427215330-github_actions.html#ID-2d35ac9e-554a-4142-bba7-3c614cbfe4c4">GitHub Actions</a>で間違えたときになる。調べないとわからない。
</p>
</div>
</div>
 <div id="outline-container-orgb4d4eed" class="outline-3">
 <h3 id="orgb4d4eed"> <a href="#orgb4d4eed"></a> <a href="http://git-scm.com/book/ja/v2/Git%E3%81%AE%E5%86%85%E5%81%B4-%E9%85%8D%E7%AE%A1%EF%BC%88Plumbing%EF%BC%89%E3%81%A8%E7%A3%81%E5%99%A8%EF%BC%88Porcelain%EF%BC%89">Git - 配管（Plumbing）と磁器（Porcelain）</a></h3>
 <div class="outline-text-3" id="text-orgb4d4eed">
 <p>
基本的なGitの仕組みの解説。
</p>
</div>
</div>
 <div id="outline-container-orge4907ff" class="outline-3">
 <h3 id="orge4907ff"> <a href="#orge4907ff"></a> <a href="https://www.youtube.com/watch?v=W71BTkUbdqE">Why Google Stores Billions of Lines of Code in a Single Repository - YouTube</a></h3>
 <div class="outline-text-3" id="text-orge4907ff">
 <p>
なぜGoogleはモノレポで管理しているか。
</p>
</div>
</div>
 <div id="outline-container-org62402ba" class="outline-3">
 <h3 id="org62402ba"> <a href="#org62402ba"></a> <a href="https://codeinthehole.com/tips/a-useful-template-for-commit-messages/">A useful template for commit messages — David Winterbottom</a></h3>
 <div class="outline-text-3" id="text-org62402ba">
 <p>
Git commitテンプレート。
</p>
</div>
</div>
 <div id="outline-container-org6649514" class="outline-3">
 <h3 id="org6649514"> <a href="#org6649514"></a> <a href="https://chris.beams.io/posts/git-commit/">How to Write a Git Commit Message</a></h3>
 <div class="outline-text-3" id="text-org6649514">
 <p>
わかりやすいメッセージの書き方。
</p>
</div>
</div>
</div>
 <div id="outline-container-org96a1da7" class="outline-2">
 <h2 id="org96a1da7"> <a href="#org96a1da7">Archive</a></h2>
 <div class="outline-text-2" id="text-org96a1da7">
</div>
 <div id="outline-container-orge1a6359" class="outline-3">
 <h3 id="orge1a6359"> <a href="#orge1a6359"> <span class="done DONE">DONE</span> Rebase on Magit</a></h3>
 <div class="outline-text-3" id="text-orge1a6359">
 <p>
わかりやすく解説している。
</p>
 <ul class="org-ul"> <li> <a href="https://www.youtube.com/watch?v=zM7K1y4h6UQ&list=PLEoMzSkcN8oMc34dTjyFmTUWbXTKrNfZA&index=3">Fix Your Git Commits Like a Rebase Expert with Magit - YouTube</a></li>
</ul> <p>
今までコミットの修正したことなかったな。
</p>
</div>
</div>
 <div id="outline-container-orga7afd77" class="outline-3">
 <h3 id="orga7afd77"> <a href="#orga7afd77"> <span class="done CLOSE">CLOSE</span> Gitの仕組みを大まかに理解する    <span class="tag"> <span class="DontKnow">DontKnow</span></span></a></h3>
 <div class="outline-text-3" id="text-orga7afd77">
</div>
</div>
</div>
 <div id="outline-container-org03ec387" class="outline-2">
 <h2 id="org03ec387"> <a href="#org03ec387">Backlinks</a></h2>
 <div class="outline-text-2" id="text-org03ec387">
 <ul class="org-ul"> <li> <a href="./20210508234743-emacs.html">Emacs</a></li>
 <li> <a href="./20210615222732-project.html">project</a></li>
 <li> <a href="./20210912124846-dotfiles.html">dotfiles</a></li>
 <li> <a href="./20210922004953-magit_forge.html">magit-forge</a></li>
 <li> <a href="./20210922005248-magit.html">magit</a></li>
 <li> <a href="./20210922005532-projectile.html">projectile</a></li>
 <li> <a href="./20210922010846-terraform.html">Terraform</a></li>
 <li> <a href="./20210922011437-kubernetes.html">Kubernetes</a></li>
 <li> <a href="./20210926103926-github.html">GitHub</a></li>
 <li> <a href="./20211209223810-conventional_commits.html">Conventional Commits</a></li>
 <li> <a href="./20220115181851-development.html">development</a></li>
 <li> <a href="./20240204T105547--kdoc-71-kdocエントリの書き方__essay.html">KDOC 71: KDOCエントリの書き方</a></li>
 <li> <a href="./20240313T202310--kdoc-120-git-lfs反映には削除が必要__essay.html">KDOC 120: Git LFS反映には削除が必要</a></li>
 <li> <a href="./20241115T185022--kdoc-288-dnsフィルタリングで有害コンテンツをブロックする__essay.html">KDOC 288: DNSフィルタリングで有害コンテンツをブロックする</a></li>
 <li> <a href="./index.html">Insomnia</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20210901104129-git.html"/>
  <id>https://kijimad.github.io/roam/20210901104129-git.html</id>
  <updated>2025-06-14T00:00:00+09:00</updated>
</entry>
<entry>
  <title>React</title>
  <author><name>root</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orga7f345b" class="outline-2">
 <h2 id="orga7f345b"> <a href="#orga7f345b">概要</a></h2>
 <div class="outline-text-2" id="text-orga7f345b">
 <p>
Reactは、Web開発に使われる <a href="20210509100112-javascript.html#ID-a6980e15-ecee-466e-9ea7-2c0210243c0d">JavaScript</a>ライブラリ。変更があった画面の一部だけを更新することで、リロードが必要のない、高速でリッチなWebサイトを構築できる。関数型プログラミングの考え方を背景に持つ。
</p>
</div>
</div>
 <div id="outline-container-orga6fe4b6" class="outline-2">
 <h2 id="orga6fe4b6"> <a href="#orga6fe4b6">Memo</a></h2>
 <div class="outline-text-2" id="text-orga6fe4b6">
</div>
 <div id="outline-container-org5b92a06" class="outline-3">
 <h3 id="org5b92a06"> <a href="#org5b92a06">引数を受け取るコンポーネントの例</a></h3>
 <div class="outline-text-3" id="text-org5b92a06">
 <ul class="org-ul"> <li>複数の引数の受け取り方</li>
 <li>関数型の型指定の方法</li>
</ul> <p>
あたりが詰まりポイント。
</p>

 <div class="org-src-container">
 <pre class="src src-typescript">export const Square = ({
  isLive,
  click,
}: {
  isLive: boolean;
  click: () => void;
}) => {
  return (
    <>
      {isLive ? (
        <button className="square live" onClick={click}></button>
      ) : (
        <button className="square death" onClick={click}></button>
      )}
    </>
  );
};
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgf631f3b" class="outline-3">
 <h3 id="orgf631f3b"> <a href="#orgf631f3b">setStateのインクリメント</a></h3>
 <div class="outline-text-3" id="text-orgf631f3b">
 <p>
引数で前の状態を取り出せる。これで取らないと値が、おかしくなることがある。
</p>

 <div class="org-src-container">
 <pre class="src src-typescript">const increment = () => setWidth((prevWidth) => prevWidth + 1);
</pre>
</div>
</div>
</div>
 <div id="outline-container-org38a021e" class="outline-3">
 <h3 id="org38a021e"> <a href="#org38a021e">onClickは関数型をとる</a></h3>
 <div class="outline-text-3" id="text-org38a021e">
 <p>
プロパティonClickが取るのは関数型である。特に深く考えることなかったので詰まった。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 1: </span>無名関数が入っている。正常</label> <pre class="src src-typescript"><button className="square death" onClick={() => console.log("テスト")}></button>
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 2: </span>間違った例。このとき、console.log(“テスト”)は評価されてundefinedが渡され、エラーになる</label> <pre class="src src-typescript"><button className="square death" onClick={console.log("テスト")}></button>
</pre>
</div>
</div>
</div>
 <div id="outline-container-org2a98082" class="outline-3">
 <h3 id="org2a98082"> <a href="#org2a98082">hooksの作り方</a></h3>
 <div class="outline-text-3" id="text-org2a98082">
 <p>
hookの指針。汎用化できるようにする。
 <a href="https://zenn.dev/apple_yagi/articles/bc52d83ec61aee">REST APIと良い感じに通信するHookを自作する</a>
</p>
</div>
</div>
 <div id="outline-container-org995e2b4" class="outline-3">
 <h3 id="org995e2b4"> <a href="#org995e2b4">サーバーサイドレンダリング</a></h3>
 <div class="outline-text-3" id="text-org995e2b4">
 <p>
読み込み時はコンポーネントをHTMLで静的に描画。あとからコンポーネントDOMに対してイベントをフックすることで操作できるようにする(ハイドレーション)。
これによって、高速表示ができる。
サーバーサイド(Node)と、クライアントサイド(ブラウザ環境)のAPIは一部異なる部分があるので、これを共通化する必要がある。
</p>

 <p>
通常の、ブラウザでDOMを描画するほうはクライアントサイドレンダリング。
</p>
</div>
</div>
 <div id="outline-container-org3db18f5" class="outline-3">
 <h3 id="org3db18f5"> <a href="#org3db18f5">便利ツール</a></h3>
 <div class="outline-text-3" id="text-org3db18f5">
 <p>
さまざまなReactのためのlintが存在する。
</p>
 <ul class="org-ul"> <li>hook</li>
 <li>eslint-plugin-jsx-a11y</li>
</ul> <p>
ESLint はコードの正しさを保つのに対し、Prettier はコードの読みやすさを保つためのツール。
同時に使うことができる。
</p>
 <blockquote>
 <p>
eslint-config-prettier は、ESLint のルールのうち、Prettier と相容れないものを無効化
する共有設定です。一方の eslint-plugin-prettier は、Prettier のルールを ESLint のルー
ルに統合するためのプラグインです。つまるところ、これらのパッケージにより、ESLint から
Prettier を実行することが可能になります。
</p>
</blockquote>

 <p>
prettier でコード形式を統一できる。
</p>

 <p>
 <a href="20210831232330-typescript.html#ID-ad1527ee-63b3-4a9b-a553-10899f57c234">TypeScript</a>のテンプレートで作成。
</p>
 <div class="org-src-container">
 <pre class="src src-shell">npx create-react-app my-type --template typescript
</pre>
</div>
</div>
</div>
 <div id="outline-container-orge2c57ca" class="outline-3">
 <h3 id="orge2c57ca"> <a href="#orge2c57ca">fiber</a></h3>
 <div class="outline-text-3" id="text-orge2c57ca">
 <p>
Reactの非同期でDOMの変更を検知する仕組みのこと。
</p>
</div>
</div>
 <div id="outline-container-orgcd491a8" class="outline-3">
 <h3 id="orgcd491a8"> <a href="#orgcd491a8">ステート</a></h3>
 <div class="outline-text-3" id="text-orgcd491a8">
 <p>
プロパティはいわばRead-Onlyなデータで、一度コンポーネントが描画されると変更されない。
一方、コンポーネントの描画後に変更されるデータをステートという。
</p>

 <p>
あるコンポーネントのステートの変更が、他のコンポーネントのプロパティに伝播し、それが全体に波及していく…。
</p>
</div>
</div>
 <div id="outline-container-org414389e" class="outline-3">
 <h3 id="org414389e"> <a href="#org414389e">Webpack</a></h3>
 <div class="outline-text-3" id="text-org414389e">
 <p>
ReactだけではWEB機能を提供できない。
ほかの機能もまとめてモジュール間を調整するのが、モジュールバンドラ。
 <code>Webpack</code>,  <code>Browserify</code>,  <code>Gulp</code>,  <code>Grunt</code> などが存在する。
一番使われているのがWebpack。
</p>

 <p>
 <code>import</code> をたどって依存モジュールのグラフを作成する。
</p>

 <div class="org-src-container">
 <pre class="src src-shell">npm install --save-dev webpack webpack-cli
npm install babel-loader @babel/core --save-dev
npm install @babel/preset-env @babel/preset-react --save-dev
</pre>
</div>

 <ul class="org-ul"> <li>webpack.config.js</li>
 <li>.babelrc</li>
</ul> <p>
を設定する。
</p>

 <p>
単一のファイルにビルドするとエラーが起きたときの行番号がわからなくなる。
 <code>ソースマップ</code> を使うとどこで起きたかわかる。.mapと拡張子のついたファイル。
webpackに設定を追加すると、ビルド時生成されるようになる。
</p>

 <p>
 <code>create-react-app</code> を使うとこれらの作業を自動でやってくれる。
</p>
</div>
</div>
 <div id="outline-container-org04dca29" class="outline-3">
 <h3 id="org04dca29"> <a href="#org04dca29">フラグメント</a></h3>
 <div class="outline-text-3" id="text-org04dca29">
 <p>
コンポーネントを並列に描画はできない。
1つである必要があるが、いちいち包含コンポーネントを書くのは面倒。
フラグメントを使うと簡潔に1つのコンポーネントにまとめられる。
</p>
 <div class="org-src-container">
 <pre class="src src-javascript"> <span class="org-keyword">function</span>  <span class="org-function-name">Cat</span>({ name }) {
     <span class="org-keyword">return</span> (
        <React.Fragment>
            <h1>The cat <span class="org-string">'s name is {name}</h1></span>
 <span class="org-string">            <p><He'</span>s good.</p>
        <React.Fragment>
    )
}

 <span class="org-comment-delimiter">// </span> <span class="org-comment">省略記法</span>
 <span class="org-keyword">function</span>  <span class="org-function-name">Cat</span>({ name }) {
     <span class="org-keyword">return</span> (
        <>
            <h1>The cat <span class="org-string">'s name is {name}</h1></span>
 <span class="org-string">            <p><He'</span>s good.</p>
        <>
    )
}
</pre>
</div>
</div>
</div>
 <div id="outline-container-org1f2be24" class="outline-3">
 <h3 id="org1f2be24"> <a href="#org1f2be24">デストラクチャリングで簡潔に表示する</a></h3>
 <div class="outline-text-3" id="text-org1f2be24">
 <div class="org-src-container">
 <pre class="src src-javascript"> <span class="org-comment-delimiter">// </span> <span class="org-comment">↓使わない例</span>
 <span class="org-keyword">function</span>  <span class="org-function-name">Menu</span>( <span class="org-variable-name">props</span>) {
     <span class="org-keyword">return</span> (
        <h1>{props.title}</h1>
    )
}

 <span class="org-comment-delimiter">// </span> <span class="org-comment">↓デストラクチャリングを使うと簡潔に書ける</span>
 <span class="org-keyword">function</span>  <span class="org-function-name">Menu</span>({title, recipes}) {
     <span class="org-keyword">return</span> (
        <h1>{title}</h1>
    )
}
</pre>
</div>
</div>
</div>
 <div id="outline-container-org71a0827" class="outline-3">
 <h3 id="org71a0827"> <a href="#org71a0827">コンポーネント作成方法の変遷</a></h3>
 <div class="outline-text-3" id="text-org71a0827">
 <ol class="org-ol"> <li>createClass関数(廃止)</li>
 <li>クラスコンポーネント(将来廃止)</li>
 <li>関数コンポーネント(最新)</li>
</ol></div>
</div>
 <div id="outline-container-org8e1f1eb" class="outline-3">
 <h3 id="org8e1f1eb"> <a href="#org8e1f1eb">package.jsonの例</a></h3>
 <div class="outline-text-3" id="text-org8e1f1eb">
 <div class="org-src-container">
 <pre class="src src-json">"scripts": {
  "start": "react-scripts start",
  "build": "react-scripts build",
  "test": "react-scripts test",
  "eject": "react-scripts eject",
  "start:server": "ts-node -O '{\"module\": \"commonjs\"}' ./server/index.ts",
  "dev": "concurrently --kill-others \"npm run start:server\" \"npm run start\""
},
</pre>
</div>
</div>
</div>
 <div id="outline-container-org5236c57" class="outline-3">
 <h3 id="org5236c57"> <a href="#org5236c57">Provider</a></h3>
 <div class="outline-text-3" id="text-org5236c57">
 <p>
props渡し地獄を回避するための組み込みの関数。
</p>

 <div class="org-src-container">
 <pre class="src src-react"><ExampleContext.Provider value={resource.name}>
  <NavigationComponent /> // ← このコンポーネントではcontextで値を取得できるようになる。
</ExampleContext.Provider>
</pre>
</div>

 <dl class="org-dl"> <dt>参考</dt> <dd> <a href="https://qiita.com/ryokkkke/items/dc25111fcf52ea579d58">React Contextの使い方 - Qiita</a></dd>
</dl></div>
</div>
 <div id="outline-container-orge581065" class="outline-3">
 <h3 id="orge581065"> <a href="#orge581065">プロジェクトを新規作成するコマンド</a></h3>
 <div class="outline-text-3" id="text-orge581065">
 <p>
React+ <a href="20210831232330-typescript.html#ID-ad1527ee-63b3-4a9b-a553-10899f57c234">TypeScript</a>、chapter03というディレクトリ名で作成する場合。
</p>
 <div class="org-src-container">
 <pre class="src src-shell">npx create-react-app chapter03 --template typescript
npm install -D tslint  <span class="org-comment-delimiter"># </span> <span class="org-comment">tslint導入</span>
npx tslint --init  <span class="org-comment-delimiter"># </span> <span class="org-comment">tslint設定ファイル</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgdd970fd" class="outline-3">
 <h3 id="orgdd970fd"> <a href="#orgdd970fd">Context</a></h3>
 <div class="outline-text-3" id="text-orgdd970fd">
 <p>
contextはコンポーネント間で情報をやりとりしやすくするための関数。
コンポーネント間でグローバルに値を共有できる。
が、好き放題に値を変えられると安全性や可読性が下がるので、アクションを通してしか値を変化させられないようになっている。
</p>
</div>
</div>
 <div id="outline-container-orgd998000" class="outline-3">
 <h3 id="orgd998000"> <a href="#orgd998000">Reducer</a></h3>
 <div class="outline-text-3" id="text-orgd998000">
 <p>
状態とアクションを元に、行うことを振り分ける関数。
</p>
</div>
</div>
 <div id="outline-container-orgf96476e" class="outline-3">
 <h3 id="orgf96476e"> <a href="#orgf96476e">Hook</a></h3>
 <div class="outline-text-3" id="text-orgf96476e">
 <p>
hookはコンポーネントとは独立した関数で、コンポーネントに対して着脱可能な機能を取り付けるイメージ。ステートを追加したいなら  <code>useState</code> 。
</p>

 <p>
 <code>use</code> はReact hooksにつくプレフィクス。
</p>
 <dl class="org-dl"> <dt>参考</dt> <dd> <a href="https://qiita.com/seira/items/e62890f11e91f6b9653f">React hooksを基礎から理解する (useEffect編) - Qiita</a></dd>
</dl> <p>
hookという名の通り、実行タイミングに関係している。
たとえば、  <code>useEffect</code> に渡された関数はレンダーの結果が画面に反映された後で動作する。
</p>
</div>
</div>
 <div id="outline-container-orgfe2e68a" class="outline-3">
 <h3 id="orgfe2e68a"> <a href="#orgfe2e68a">{} はオブジェクト</a></h3>
 <div class="outline-text-3" id="text-orgfe2e68a">
 <p>
jsではオブジェクトを表す表記。
</p>
 <div class="org-src-container">
 <pre class="src src-typescript">const { state, dispatch } = useAppState()
</pre>
</div>
 <p>
は、通常のオブジェクトを作る{}と同じ。
つまり、↓と同じ。
</p>
 <div class="org-src-container">
 <pre class="src src-typescript">{
  state,
  dispatch
}
</pre>
</div>

 <p>
これらに関数の返り値が代入される、とそれだけのこと。
</p>
</div>
</div>
</div>
 <div id="outline-container-org537264f" class="outline-2">
 <h2 id="org537264f"> <a href="#org537264f">Tasks</a></h2>
 <div class="outline-text-2" id="text-org537264f">
</div>
 <div id="outline-container-org5b44dae" class="outline-3">
 <h3 id="org5b44dae"> <a href="#org5b44dae"> <span class="todo TODO">TODO</span> </a> <a href="https://speakerdeck.com/recruitengineers/react">React - Speaker Deck</a></h3>
 <div class="outline-text-3" id="text-org5b44dae">
 <p>
Reactの解説。
</p>

 <ul class="org-ul"> <li>jQueryではDOMをグローバル変数としていじらないといけなかった</li>
 <li>viewがテンプレートとjsで分離していて辛かった</li>
 <li>Reactは宣言的UI。「何」を記述する</li>
 <li>jQueryは命令的UIになりがち。「どうするか」を記述する</li>
 <li>Reactは状態が変わるごとにコンポーネントを毎回実行してDOMを新規に構築</li>
 <li>毎回新規にレンダリングするのと同等なので、画面の更新について考えることが減る</li>
 <li>仮想DOM…DOMの代わりにjsのオブジェクト(軽量)で仮想的なDOMを構築する
 <ul class="org-ul"> <li>仮想DOMを比較して、差分だけをDOMに反映する</li>
</ul></li>
 <li>ReactはUI構築のためのライブラリ。フレームワークではない。Viewに特化している</li>
 <li>JSX … js XML
 <ul class="org-ul"> <li>jsの式としてXML風の構文を記述できる</li>
 <li>BabelやTS等のツールによってjsの式に変換される</li>
</ul></li>
 <li>JSXとHTMLの違い
 <ul class="org-ul"> <li>小文字と大文字を区別する</li>
 <li>キャメルケースを使う</li>
 <li>HTMLと異なる属性名がある</li>
</ul></li>
 <li>コンポーネント
 <ul class="org-ul"> <li>コンポーネントは状態を持てる</li>
 <li>関数コンポーネントは単なる関数で、関数自体は状態を持っていない</li>
 <li>状態はReactが管理する仮想DOM(Fiber構造体)によって管理される</li>
 <li>関数コンポーネントからReactが管理する情報とやりとりするためにHooksを使う</li>
</ul></li>
 <li>useRef
 <ul class="org-ul"> <li>OOPにおけるインスタンス変数の代わりに使用すう</li>
 <li>仮想DOMをインスタンスとみなす</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org432df7b" class="outline-3">
 <h3 id="org432df7b"> <a href="#org432df7b"> <span class="todo TODO">TODO</span> </a> <a href="https://future-architect.github.io/articles/20200501/">TypeScriptでReactをやるときは、小さいアプリでもReduxを最初から使ってもいいかもねというお話 | フューチャー技術ブログ</a></h3>
 <div class="outline-text-3" id="text-org432df7b">
 <p>
Redux Toolkitがなぜ使いやすいかの解説。
</p>
</div>
</div>
</div>
 <div id="outline-container-org5c72fc7" class="outline-2">
 <h2 id="org5c72fc7"> <a href="#org5c72fc7">Reference</a></h2>
 <div class="outline-text-2" id="text-org5c72fc7">
</div>
 <div id="outline-container-org57507c0" class="outline-3">
 <h3 id="org57507c0"> <a href="#org57507c0"> <span class="todo TODO">TODO</span> </a> <a href="https://www.oreilly.co.jp/books/9784873119380/">O’Reilly Japan - Reactハンズオンラーニング 第2版</a></h3>
 <div class="outline-text-3" id="text-org57507c0">
 <p>
Reactの入門書。
</p>
</div>
</div>
</div>
 <div id="outline-container-org8282119" class="outline-2">
 <h2 id="org8282119"> <a href="#org8282119">Archives</a></h2>
</div>


 <div id="outline-container-org069ed7d" class="outline-2">
 <h2 id="org069ed7d"> <a href="#org069ed7d">Backlinks</a></h2>
 <div class="outline-text-2" id="text-org069ed7d">
 <ul class="org-ul"> <li> <a href="./20210509095946-rails.html">Rails</a></li>
 <li> <a href="./20210509100112-javascript.html">JavaScript</a></li>
 <li> <a href="./20210817003906-history.html">History</a></li>
 <li> <a href="./20211030122204-graphql.html">GraphQL</a></li>
 <li> <a href="./20220417151711-flutter.html">Flutter</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20210902220546-react.html"/>
  <id>https://kijimad.github.io/roam/20210902220546-react.html</id>
  <updated>2025-06-14T00:00:00+09:00</updated>
</entry>
<entry>
  <title>workflow</title>
  <author><name>root</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orga1b04df" class="outline-2">
 <h2 id="orga1b04df"> <a href="#orga1b04df">概要</a></h2>
 <div class="outline-text-2" id="text-orga1b04df">
 <p>
 <a href="20210508234743-emacs.html#ID-1ad8c3d5-97ba-4905-be11-e6f2626127ad">Emacs</a>の <a href="20210907012153-org_mode.html#ID-7e85e3f3-a6b9-447e-9826-307a3618dac8">org-mode</a>を使ってタスク管理している。
</p>
</div>
</div>
 <div id="outline-container-org7eb48c8" class="outline-2">
 <h2 id="org7eb48c8"> <a href="#org7eb48c8">RepeatTasks</a></h2>
 <div class="outline-text-2" id="text-org7eb48c8">
 <p>
 <a href="20250611T180912--kdoc-385-『続ける思考』__draft_book.html#ID-20250611T180912">KDOC 385: 『続ける思考』</a>を参考に、5分でいいので毎日やる。
</p>

 <table> <colgroup> <col class="org-left"></col> <col class="org-left"></col> <col class="org-left"></col> <col class="org-left"></col></colgroup> <thead> <tr> <th scope="col" class="org-left">種類</th>
 <th scope="col" class="org-left">内容</th>
 <th scope="col" class="org-left">ステータス</th>
 <th scope="col" class="org-left">開始日</th>
</tr></thead> <tbody> <tr> <td class="org-left">筋トレ</td>
 <td class="org-left">曜日ごとのセットをやる(5分)</td>
 <td class="org-left">1年間継続</td>
 <td class="org-left">2024-07-08から</td>
</tr> <tr> <td class="org-left">部屋を掃除する</td>
 <td class="org-left">目についたところをやる(5分)</td>
 <td class="org-left">未</td>
 <td class="org-left">2025-06-11から</td>
</tr> <tr> <td class="org-left">本を読む</td>
 <td class="org-left">なんでも本を読む(5分)</td>
 <td class="org-left">未</td>
 <td class="org-left">2025-06-11から</td>
</tr> <tr> <td class="org-left">英語を読む</td>
 <td class="org-left">なんでも英語を読む(5分)</td>
 <td class="org-left">未</td>
 <td class="org-left">2025-06-11から</td>
</tr> <tr> <td class="org-left">コード問題を解く</td>
 <td class="org-left">codekataを解く(5分)</td>
 <td class="org-left">未</td>
 <td class="org-left">2025-06-11から</td>
</tr> <tr> <td class="org-left">メモを書く</td>
 <td class="org-left">1エントリ発行する</td>
 <td class="org-left">未</td>
 <td class="org-left">2025-06-11から</td>
</tr> <tr> <td class="org-left">本を書く</td>
 <td class="org-left">締め切りのないものを進める(5分)</td>
 <td class="org-left">未</td>
 <td class="org-left">2025-06-11から</td>
</tr> <tr> <td class="org-left">英語で日記を書く</td>
 <td class="org-left">英語で日記を書く(5分)</td>
 <td class="org-left">未</td>
 <td class="org-left">2025-06-11から</td>
</tr></tbody></table></div>
 <div id="outline-container-org476f98d" class="outline-3">
 <h3 id="org476f98d"> <a href="#org476f98d"> <span class="todo TODO">TODO</span> 筋トレする</a></h3>
 <div class="outline-text-3" id="text-org476f98d">
 <p>
曜日で運動する。
</p>

 <ul class="org-ul"> <li>月曜
 <ul class="org-ul"> <li>プルアップ 2~3セット</li>
 <li>ステップ1 開始: 2024-07-09</li>
 <li>ステップ2 開始: 2024-08-10</li>
 <li>ステップ3 開始: 2024-11-04</li>
 <li>ステップ4 開始: 2025-04-01</li>
</ul></li>
</ul> <iframe width="560" height="315" src="https://www.youtube.com/embed/vsRRJGHhKnA?si=mrpJR6Xi3tvZkY0Q" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin"></iframe>

 <ul class="org-ul"> <li>火曜
 <ul class="org-ul"> <li>ブリッジ 2~3セット</li>
 <li>ステップ1 開始: 2024-07-09</li>
 <li>ステップ2 開始: 2024-08-06</li>
 <li>ステップ3 開始: 2024-11-18</li>
</ul></li>
</ul> <iframe width="560" height="315" src="https://www.youtube.com/embed/o9yKAjvUQlM?si=Q66HX2aYdmRk7RO4" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin"></iframe>

 <ul class="org-ul"> <li>水曜
 <ul class="org-ul"> <li>ハンドスタンド・プッシュアップ 2~3セット</li>
 <li>ステップ1 開始: 2024-07-09</li>
 <li>ステップ2 開始: 2024-09-26</li>
 <li>ステップ3 開始: 2025-05-07</li>
</ul></li>
</ul> <iframe width="560" height="315" src="https://www.youtube.com/embed/gI4vnrDAxEQ?si=fvwbTSl3HV02Be0Y" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin"></iframe>

 <ul class="org-ul"> <li>木曜
 <ul class="org-ul"> <li>レッグレイズ 2~3セット</li>
 <li>ステップ1 開始: 2024-07-09</li>
 <li>ステップ2 開始: 2024-08-29</li>
 <li>ステップ3 開始: 2024-11-18</li>
 <li>ステップ4 開始: 2025-06-11</li>
</ul></li>
</ul> <iframe width="560" height="315" src="https://www.youtube.com/embed/esoUyks3PZM?si=JAKCIGMuO_s9lcxD" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin"></iframe>

 <ul class="org-ul"> <li>金曜
 <ul class="org-ul"> <li>スクワット 2〜3セット</li>
 <li>ステップ1 開始: 2024-07-09</li>
 <li>ステップ2 開始: 2024-08-09</li>
 <li>ステップ3 開始: 2025-01-15</li>
 <li>ステップ4 開始: 2025-05-24</li>
</ul></li>
</ul> <iframe width="560" height="315" src="https://www.youtube.com/embed/tIHNkW0nGFg?si=TQ9Gcm6z15SbnARP" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin"></iframe>

 <ul class="org-ul"> <li>土曜
 <ul class="org-ul"> <li>プッシュアップ 2~3セット</li>
 <li>ステップ1 開始: 2024-07-09</li>
 <li>ステップ2 開始: 2024-08-11</li>
 <li>ステップ3 開始: 2024-10-20</li>
 <li>ステップ4 開始: 2025-06-11</li>
</ul></li>
</ul> <iframe width="560" height="315" src="https://www.youtube.com/embed/bGuUODcwnHA?si=tBAm6uZp_z3XG4jH" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin"></iframe>

 <ul class="org-ul"> <li>日曜
 <ul class="org-ul"> <li>休み</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-orgd2a33c6" class="outline-3">
 <h3 id="orgd2a33c6"> <a href="#orgd2a33c6"> <span class="todo TODO">TODO</span> 部屋を掃除する</a></h3>
 <div class="outline-text-3" id="text-orgd2a33c6">
 <ul class="org-ul"> <li>テーブル</li>
 <li>床</li>
 <li>台所</li>
 <li>トイレ</li>
 <li>風呂</li>
 <li>廊下</li>
</ul></div>
</div>
 <div id="outline-container-org939069d" class="outline-3">
 <h3 id="org939069d"> <a href="#org939069d"> <span class="todo TODO">TODO</span> 本を読む 2    <span class="tag"> <span class="Train">Train</span></span></a></h3>
 <div class="outline-text-3" id="text-org939069d">
 <p>
何かを読む。
</p>
</div>
</div>
 <div id="outline-container-orgc4bdb23" class="outline-3">
 <h3 id="orgc4bdb23"> <a href="#orgc4bdb23"> <span class="todo TODO">TODO</span> 英語を読む 9    <span class="tag"> <span class="Train">Train</span></span></a></h3>
 <div class="outline-text-3" id="text-orgc4bdb23">
 <p>
英語を練習する。
</p>

 <ul class="org-ul"> <li>シャドウイングしたほうがわかったか試せてよい</li>
 <li>わからなかったところは戻って再生したほうが気持ち悪くない</li>
</ul> <p>
履歴。
</p>

 <ul class="org-ul"> <li> <a href="https://www.youtube.com/watch?v=f8sOJfg9g6w&ab_channel=MoriCalliopeCh.hololive-EN">【Pokémon Emerald Nuzlocke】im back and ready to for victory road (part 11) - YouTube</a></li>
 <li> <a href="https://www.youtube.com/watch?v=bpvcuuvhP_I&ab_channel=MoriCalliopeCh.hololive-EN">【PALWORLD】i wish to become the most greatest, unlike those before #hololiveenglish - YouTube</a></li>
</ul></div>
</div>
 <div id="outline-container-org26398be" class="outline-3">
 <h3 id="org26398be"> <a href="#org26398be"> <span class="todo TODO">TODO</span> コード問題を解く 1    <span class="tag"> <span class="Train">Train</span></span></a></h3>
 <div class="outline-text-3" id="text-org26398be">
 <p>
Codewarsなどで基礎を練習する。
</p>

 <ul class="org-ul"> <li>フィボナッチ数列を作るのがサクッといかなくて凹む。ひどいものだ。前は普通にできていた記憶があるが…</li>
</ul></div>
</div>
 <div id="outline-container-orgfc4caa8" class="outline-3">
 <h3 id="orgfc4caa8"> <a href="#orgfc4caa8"> <span class="todo TODO">TODO</span> メモを書く 2    <span class="tag"> <span class="Train">Train</span></span></a></h3>
 <div class="outline-text-3" id="text-orgfc4caa8">
 <p>
記事を書く。
</p>
</div>
</div>
 <div id="outline-container-org5e8fb63" class="outline-3">
 <h3 id="org5e8fb63"> <a href="#org5e8fb63"> <span class="todo TODO">TODO</span> 本を書く 1</a></h3>
 <div class="outline-text-3" id="text-org5e8fb63">
 <p>
いくつか、やりかけのものがある。少しづつ進める。
</p>
</div>
</div>
 <div id="outline-container-org7a4c589" class="outline-3">
 <h3 id="org7a4c589"> <a href="#org7a4c589"> <span class="todo TODO">TODO</span> 英語で日記を書く</a></h3>
 <div class="outline-text-3" id="text-org7a4c589">
 <p>
英語を練習する。
</p>
</div>
</div>
</div>
 <div id="outline-container-org9c76eba" class="outline-2">
 <h2 id="org9c76eba"> <a href="#org9c76eba">Tasks</a></h2>
</div>
 <div id="outline-container-org38af640" class="outline-2">
 <h2 id="org38af640"> <a href="#org38af640">Archives</a></h2>
 <div class="outline-text-2" id="text-org38af640">
</div>
 <div id="outline-container-org3ebcfb8" class="outline-3">
 <h3 id="org3ebcfb8"> <a href="#org3ebcfb8"> <span class="done DONE">DONE</span> タスク状況をレポート化する</a></h3>
 <div class="outline-text-3" id="text-org3ebcfb8">
 <p>
週ごとで作成できると面白そう。
今週doneしたやつ、タスクでかかった時間の総計。
</p>
</div>
</div>
 <div id="outline-container-org8e8a17a" class="outline-3">
 <h3 id="org8e8a17a"> <a href="#org8e8a17a"> <span class="done DONE">DONE</span> よく使うagenda viewを一発で開けるようにする</a></h3>
 <div class="outline-text-3" id="text-org8e8a17a">
 <ul class="org-ul"> <li> <a href="https://orgmode.org/manual/Exporting-Agenda-Views.html">Exporting Agenda Views (The Org Manual)</a></li>
</ul> <p>
week, log-modeを自動的に選択してほしい。
</p>
</div>
</div>
 <div id="outline-container-org7ab334e" class="outline-3">
 <h3 id="org7ab334e"> <a href="#org7ab334e"> <span class="done CLOSE">CLOSE</span> チェックを忘れるとalertされなくなる</a></h3>
 <div class="outline-text-3" id="text-org7ab334e">
 <p>
何時間かはスヌーズ的にorg-alert通知してくれるが、しばらくすると出なくなる。
一応org-agendaには過ぎてるのも表示されるので放置するようなことはないが、不便。
</p>

 <p>
org-agendaに期限切れが表示されるから、この問題は起きない。
</p>
</div>
</div>
 <div id="outline-container-orgbc4fefc" class="outline-3">
 <h3 id="orgbc4fefc"> <a href="#orgbc4fefc"> <span class="done DONE">DONE</span> 本を読む 1    <span class="tag"> <span class="Train">Train</span></span></a></h3>
 <div class="outline-text-3" id="text-orgbc4fefc">
</div>
</div>
 <div id="outline-container-org14d17fb" class="outline-3">
 <h3 id="org14d17fb"> <a href="#org14d17fb"> <span class="done DONE">DONE</span> メモを書く 1    <span class="tag"> <span class="Train">Train</span></span></a></h3>
 <div class="outline-text-3" id="text-org14d17fb">
 <p>
記事を書く。
</p>
</div>
</div>
 <div id="outline-container-org8b16443" class="outline-3">
 <h3 id="org8b16443"> <a href="#org8b16443"> <span class="done DONE">DONE</span> 英語を読む 1    <span class="tag"> <span class="Train">Train</span></span></a></h3>
 <div class="outline-text-3" id="text-org8b16443">
 <p>
英語を練習する。
</p>
</div>
</div>
 <div id="outline-container-org6511d20" class="outline-3">
 <h3 id="org6511d20"> <a href="#org6511d20"> <span class="done DONE">DONE</span> 英語を読む 2    <span class="tag"> <span class="Train">Train</span></span></a></h3>
 <div class="outline-text-3" id="text-org6511d20">
 <p>
英語を練習する。
</p>

 <ul class="org-ul"> <li> <a href="https://www.youtube.com/watch?v=9wgEU7No7Og&list=PLB8Nt5W7hnKBkR_EiRYUYFEQDdFU6VmCb&ab_channel=MoriCalliopeCh.hololive-EN">【DARK SOULS III】the third one (part 1) #calliolive - YouTube</a></li>
 <li> <a href="https://www.youtube.com/watch?v=Wuk6i-d3bnc&list=PLB8Nt5W7hnKBkR_EiRYUYFEQDdFU6VmCb&index=3&ab_channel=MoriCalliopeCh.hololive-EN">【DARK SOULS III】Gutslliope, the Struggler, Continues to Struggle. (part 2) #calliolive - YouTube</a></li>
 <li> <a href="https://www.youtube.com/watch?v=O6ClKcu5_to&list=PLB8Nt5W7hnKBkR_EiRYUYFEQDdFU6VmCb&index=6&ab_channel=MoriCalliopeCh.hololive-EN">【DARK SOULS III】late night dark souls (part 3) #calliolive - YouTube</a></li>
 <li> <a href="https://www.youtube.com/watch?v=3LYzTW-No0Y&list=PLB8Nt5W7hnKBkR_EiRYUYFEQDdFU6VmCb&index=5&ab_channel=MoriCalliopeCh.hololive-EN">【DARK SOULS III】my iron slab and me (part 4) #calliolive - YouTube</a></li>
 <li> <a href="https://www.youtube.com/watch?v=5fVDhownV9A&list=PLB8Nt5W7hnKBkR_EiRYUYFEQDdFU6VmCb&index=6&ab_channel=MoriCalliopeCh.hololive-EN">【DARK SOULS III】found a moon! hope it doesn’t eclipse!!! (part 5) #calliolive - YouTube</a></li>
 <li> <a href="https://www.youtube.com/watch?v=LFXrs7A56bg&list=PLB8Nt5W7hnKBkR_EiRYUYFEQDdFU6VmCb&index=10&ab_channel=MoriCalliopeCh.hololive-EN">【DARK SOULS III】Who Will Be the Griffith to My Gutslliope? (part 6) #calliolive - YouTube</a></li>
</ul> <p>
メモ。
</p>

 <ul class="org-ul"> <li>画面の前で起こっていることなら何を言っているかわかる。</li>
 <li>ゲームの中の会話は雰囲気しかわからない。単語が難しい。そもそもシナリオが日本語でもわからないだろう</li>
 <li>やったことがあるからなんとなくわかっているだけ説もある。字幕を見ないとわからない</li>

 <li> <a href="https://www.youtube.com/watch?v=3lb0uUNx9e8&ab_channel=FUWAMOCOCh.hololive-EN">【WHITE ALBUM】let’s fill all the blanks in this album of ours ❄️🐾 - YouTube</a></li>
</ul> <p>
メモ。
</p>

 <ul class="org-ul"> <li>曜日の省略形と非省略の表示がかぶっている。そのまま翻訳したためか</li>
 <li>家庭教師センターの電話がなぜかフルボイス。
 <ul class="org-ul"> <li>「声が何かを売りつける声に聞こえる」 → 「なぜそんなに興奮しているの」の流れに笑った</li>
</ul></li>
 <li>描いている時代は古い。FAXの時代</li>
 <li>ボイス含めて3人が同時にしゃべるので、字幕があまり機能しない</li>
 <li>主人公の独特な独白を理解するのが難しい。セリフと混同しやすい</li>
 <li>「うがい。英語だとgarglingはちょっと変だよね」「全然かわいい言葉じゃない」面白い</li>
 <li>立ち絵の右肩に糸くずがついている</li>
 <li>ちゃんと読めてないのかと思いきや同じ反応で、ストーリー上わからないのが当然のところがある</li>
 <li>面白い笑い方</li>
</ul> <iframe width="560" height="315" src="https://www.youtube.com/embed/3lb0uUNx9e8?si=QtOK0p8CpcE5N-v8&start=4648" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin"></iframe>
</div>
</div>
 <div id="outline-container-orgf23604c" class="outline-3">
 <h3 id="orgf23604c"> <a href="#orgf23604c"> <span class="done DONE">DONE</span> 英語を読む 3    <span class="tag"> <span class="Train">Train</span></span></a></h3>
 <div class="outline-text-3" id="text-orgf23604c">
 <p>
英語を練習する。
</p>

 <ul class="org-ul"> <li> <a href="https://www.youtube.com/watch?v=igxBI_NhoEs&list=PLB8Nt5W7hnKBkR_EiRYUYFEQDdFU6VmCb&index=7&ab_channel=MoriCalliopeCh.hololive-EN">【DARK SOULS III】suffering is imminent (part 7) #calliolive - YouTube</a></li>
 <li> <a href="https://www.youtube.com/watch?v=3lb0uUNx9e8&ab_channel=FUWAMOCOCh.hololive-EN">【WHITE ALBUM】let’s fill all the blanks in this album of ours ❄️🐾 - YouTube</a></li>
 <li> <a href="https://www.youtube.com/watch?v=L_2Js5_65J0&t=5s&ab_channel=FUWAMOCOCh.hololive-EN">【WHITE ALBUM】a love that will never melt… right? ❄️🐾 - YouTube</a></li>
 <li> <a href="https://www.youtube.com/watch?v=U4-o9CJnsVY&list=PLB8Nt5W7hnKBkR_EiRYUYFEQDdFU6VmCb&index=12&ab_channel=MoriCalliopeCh.hololive-EN">【DARK SOULS III】Gutslliope Puts His Grasses On for the DLC (part 8) #calliolive - YouTube</a></li>
 <li> <a href="https://www.youtube.com/watch?v=64JKDe5RmHY&list=PLB8Nt5W7hnKBkR_EiRYUYFEQDdFU6VmCb&index=10&ab_channel=MoriCalliopeCh.hololive-EN">【DARK SOULS III】Gutslliope’s Last Stand Against MEAN Dragons (finale) #calliolive - YouTube</a></li>
 <li> <a href="https://www.youtube.com/watch?v=x_d4FNMdxS0&ab_channel=MoriCalliopeCh.hololive-EN">【Dark Souls II】got a great feeling about this one! #calliolive - YouTube</a></li>
 <li> <a href="https://www.youtube.com/watch?v=avf-Erco-10&t=2s&ab_channel=FUWAMOCOCh.hololive-EN">【WHITE ALBUM】frozen hearts in february ❄️🐾 - YouTube</a></li>
 <li> <a href="https://www.youtube.com/watch?v=TrGWf0idKnk&ab_channel=MoriCalliopeCh.hololive-EN">【Dark Souls II】ready for my daily 𝔞𝔰𝔰 beating (part 2) #calliolive - YouTube</a></li>
</ul></div>
</div>
 <div id="outline-container-orgf3b56da" class="outline-3">
 <h3 id="orgf3b56da"> <a href="#orgf3b56da"> <span class="done DONE">DONE</span> 英語を読む 4    <span class="tag"> <span class="Train">Train</span></span></a></h3>
 <div class="outline-text-3" id="text-orgf3b56da">
 <p>
英語を勉強する。
</p>

 <ul class="org-ul"> <li> <a href="https://www.youtube.com/watch?v=avf-Erco-10&t=2s&ab_channel=FUWAMOCOCh.hololive-EN">【WHITE ALBUM】frozen hearts in february ❄️🐾 - YouTube</a></li>
 <li> <a href="https://www.youtube.com/watch?v=TrGWf0idKnk&ab_channel=MoriCalliopeCh.hololive-EN">【Dark Souls II】ready for my daily 𝔞𝔰𝔰 beating (part 2) #calliolive - YouTube</a></li>
 <li> <a href="https://www.youtube.com/watch?v=8D4MM6UFVB0&ab_channel=MoriCalliopeCh.hololive-EN">【Dark Souls II】I Love Pain I Love Suffering (part 3) #calliolive - YouTube</a></li>
</ul></div>
</div>
 <div id="outline-container-org8a67c58" class="outline-3">
 <h3 id="org8a67c58"> <a href="#org8a67c58"> <span class="done DONE">DONE</span> 英語を読む 5    <span class="tag"> <span class="Train">Train</span></span></a></h3>
 <div class="outline-text-3" id="text-org8a67c58">
 <p>
英語を勉強する。
</p>
</div>
</div>
 <div id="outline-container-org24d4b80" class="outline-3">
 <h3 id="org24d4b80"> <a href="#org24d4b80"> <span class="done DONE">DONE</span> 英語を読む 6    <span class="tag"> <span class="Train">Train</span></span></a></h3>
 <div class="outline-text-3" id="text-org24d4b80">
 <p>
英語を勉強する。
</p>
</div>
</div>
 <div id="outline-container-orgac81f4e" class="outline-3">
 <h3 id="orgac81f4e"> <a href="#orgac81f4e"> <span class="done DONE">DONE</span> 英語を読む 7</a></h3>
 <div class="outline-text-3" id="text-orgac81f4e">
 <p>
英語を勉強する。
</p>
</div>
</div>
 <div id="outline-container-orgcd768a0" class="outline-3">
 <h3 id="orgcd768a0"> <a href="#orgcd768a0"> <span class="done DONE">DONE</span> 英語を読む 8    <span class="tag"> <span class="Train">Train</span></span></a></h3>
 <div class="outline-text-3" id="text-orgcd768a0">
 <p>
英語を勉強する。
</p>

 <p>
履歴を出したほうがいい。途中から。
</p>

 <ul class="org-ul"> <li> <a href="https://www.youtube.com/watch?v=HJUVqKbeTj8&t=354s&ab_channel=MoriCalliopeCh.hololive-EN">【Pokémon Emerald Nuzlocke】playoffs looking stacked this year (part 6) - YouTube</a></li>
 <li> <a href="https://www.youtube.com/watch?v=hfsoz_K-J8A&ab_channel=HalfasInteresting">Brooklyn’s Only Interstate Is Doomed - YouTube</a></li>
 <li> <a href="https://www.youtube.com/watch?v=LKPwKFigF8U&ab_channel=Veritasium">Why Boredom is Good For You - YouTube</a></li>
 <li> <a href="https://www.youtube.com/watch?v=oO7PGvC3Ik8&ab_channel=MoriCalliopeCh.hololive-EN">【TEA PARTY】Winter with the Bau Baus! ‪@FUWAMOCOch‬ #fuwamocalli - YouTube</a></li>
 <li> <a href="https://www.youtube.com/watch?v=ffwHDeLd3m4&ab_channel=RealLifeLore">How a Tiny Island Became The Most Crowded Place on Earth - YouTube</a></li>
 <li> <a href="https://www.youtube.com/watch?v=JcJSW7Rprio&ab_channel=suckerpinch">Harder Drive: Hard drives we didn’t want or need - YouTube</a></li>
</ul></div>
</div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20210904124352-workflow.html"/>
  <id>https://kijimad.github.io/roam/20210904124352-workflow.html</id>
  <updated>2025-06-14T00:00:00+09:00</updated>
</entry>
<entry>
  <title>EXWM</title>
  <author><name>root</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orgf8e964a" class="outline-2">
 <h2 id="orgf8e964a"> <a href="#orgf8e964a">概要</a></h2>
 <div class="outline-text-2" id="text-orgf8e964a">
 <p>
EXWM( <a href="20210508234743-emacs.html#ID-1ad8c3d5-97ba-4905-be11-e6f2626127ad">Emacs</a> X Window Manager)は、ウィンドウマネージャの1つ。Emacs下でX Windowの管理ができる。つまり、Emacsでブラウザを開く…など、あらゆる操作が可能になり、各アプリケーションウィンドウを1つのbufferとして扱える。
</p>

 <dl class="org-dl"> <dt>Repository</dt> <dd> <a href="https://github.com/ch11ng/exwm">ch11ng/exwm: Emacs X Window Manager</a></dd>
 <dt>Wiki</dt> <dd> <a href="https://github.com/ch11ng/exwm/wiki#keybindings">Home · ch11ng/exwm Wiki</a></dd>
</dl></div>
</div>
 <div id="outline-container-org7cfef06" class="outline-2">
 <h2 id="org7cfef06"> <a href="#org7cfef06">Memo</a></h2>
 <div class="outline-text-2" id="text-org7cfef06">
</div>
 <div id="outline-container-org8b4499b" class="outline-3">
 <h3 id="org8b4499b"> <a href="#org8b4499b">起動時微妙にフルスクリーンにならないことがある</a></h3>
 <div class="outline-text-3" id="text-org8b4499b">
 <p>
たまにEmacsのモードラインの下に、微妙に黒いゾーンができる。
最初に  <code>(toggle-frame-fullscreen)</code> してから  <code>(exwm-init)</code> するとよい。
</p>
</div>
</div>
 <div id="outline-container-org91bf583" class="outline-3">
 <h3 id="org91bf583"> <a href="#org91bf583">アプリケーション起動</a></h3>
 <div class="outline-text-3" id="text-org91bf583">
 <p>
 <code>S-&</code> でウィンドウが立ち上がるコマンドを実行する。
</p>
 <dl class="org-dl"> <dt> <code>blueman-manager</code></dt> <dd>bluetooth管理</dd>
 <dt> <code>google-chrome</code></dt> <dd>Chrome</dd>
 <dt>nemo</dt> <dd>Linux Mintのファイルマネージャ</dd>
</dl></div>
</div>
 <div id="outline-container-org01fc2f1" class="outline-3">
 <h3 id="org01fc2f1"> <a href="#org01fc2f1">X Windowとは</a></h3>
 <div class="outline-text-3" id="text-org01fc2f1">
 <p>
 <a href="https://docs.freebsd.org/doc/5.0-RELEASE/usr/share/doc/ja_JP.eucJP/books/handbook/x-understanding.html">X を理解する</a>
</p>

 <blockquote>
 <p>
X は最初からネットワークを意識してデザインされており、“クライアント - サーバ”モデルを採用しています。 X では、“X サーバ”はキーボードやモニター、マウスが接続されたコンピュータ上で動きます。このサーバはディスプレイの表示を管理したり、キーボード、マウスなどからの入力を処理したりします。各 X アプリケーション (XTerm や Netscape など) は “クライアント”になります。クライアントは“この座標にウィンドウを描いてください”といったメッセージをサーバへ送り、サーバは“ユーザが OK ボタンを押しました”といったようなメッセージを送り返します。
</p>
</blockquote>
</div>
</div>
</div>
 <div id="outline-container-org48338f2" class="outline-2">
 <h2 id="org48338f2"> <a href="#org48338f2">Code</a></h2>
 <div class="outline-text-2" id="text-org48338f2">
</div>
 <div id="outline-container-org264a914" class="outline-3">
 <h3 id="org264a914"> <a href="#org264a914">再起動のコード</a></h3>
 <div class="outline-text-3" id="text-org264a914">
 <ul class="org-ul"> <li>新しいEmacsを起動してから、現在のemacsをkill</li>
 <li>起動中のプロセスIDを取り、emacsclientだったときは親プロセスをkillする</li>
 <li>終了する前にhookを実行する</li>
</ul> <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 1: </span>再起動のコード</label> <pre class="src src-git-permalink">https://github.com/kd-collective/exwm/blob/10bd12234e896d35a2c4eafabc62a31126d23bf3/exwm.el#L126-L153
</pre>
</div>

 <pre class="example" id="org9540d48">
(defun exwm-restart ()
  "Restart EXWM."
  (interactive)
  (exwm--log)
  (when (exwm--confirm-kill-emacs "[EXWM] Restart? " 'no-check)
    (let* ((attr (process-attributes (emacs-pid)))
           (args (cdr (assq 'args attr)))
           (ppid (cdr (assq 'ppid attr)))
           (pargs (cdr (assq 'args (process-attributes ppid)))))
      (cond
       ((= ppid 1)
        ;; The parent is the init process.  This probably means this
        ;; instance is an emacsclient.  Anyway, start a control instance
        ;; to manage the subsequent ones.
        (call-process (car command-line-args))
        (kill-emacs))
       ((string= args pargs)
        ;; This is a subordinate instance.  Return a magic number to
        ;; inform the parent (control instance) to start another one.
        (kill-emacs ?R))
       (t
        ;; This is the control instance.  Keep starting subordinate
        ;; instances until told to exit.
        ;; Run `server-force-stop' if it exists.
        (run-hooks 'kill-emacs-hook)
        (with-temp-buffer
          (while (= ?R (shell-command-on-region (point) (point) args))))
        (kill-emacs))))))
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgbd011dd" class="outline-2">
 <h2 id="orgbd011dd"> <a href="#orgbd011dd">Tasks</a></h2>
 <div class="outline-text-2" id="text-orgbd011dd">
</div>
 <div id="outline-container-orgb5fb018" class="outline-3">
 <h3 id="orgb5fb018"> <a href="#orgb5fb018">マルチディスプレイに対応する</a></h3>
 <div class="outline-text-3" id="text-orgb5fb018">
 <p>
設定が必要。
</p>

 <ul class="org-ul"> <li> <a href="https://wiki.archlinux.jp/index.php/EXWM">EXWM - ArchWiki</a></li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">require</span> ' <span class="org-constant">exwm-randr</span>)
( <span class="org-keyword">setq</span> exwm-randr-workspace-output-plist '(1  <span class="org-string">"eDP-1"</span>))
(add-hook 'exwm-randr-screen-change-hook
          ( <span class="org-keyword">lambda</span> ()
            (start-process-shell-command
              <span class="org-string">"xrandr"</span> nil  <span class="org-string">"xrandr --output DP-1 --right-of HDMI-1 --auto"</span>)))
(exwm-randr-enable)
(exwm-enable)
</pre>
</div>

 <ul class="org-ul"> <li>微妙に入りきってない</li>
 <li>左右分割しないと使い物にならない</li>
</ul> <p>
など、かなり厳しそうな雰囲気。
</p>
</div>
</div>
 <div id="outline-container-org7ff53d8" class="outline-3">
 <h3 id="org7ff53d8"> <a href="#org7ff53d8"> <span class="todo TODO">TODO</span> Chromeに切り替えたときフォーカスしない</a></h3>
 <div class="outline-text-3" id="text-org7ff53d8">
 <p>
 <a href="20210922013555-qutebrowser.html#ID-b69fe713-7aef-4282-b6e3-f83bc8cb7f6d">qutebrowser</a>やFirefoxでは起きないのでChromeの問題の可能性が高い。
</p>
</div>
</div>
 <div id="outline-container-org48f8851" class="outline-3">
 <h3 id="org48f8851"> <a href="#org48f8851"> <span class="todo TODO">TODO</span> ブラウザが個別に開く設定にし、各バッファ選択から直に移動できるようにする</a></h3>
 <div class="outline-text-3" id="text-org48f8851">
 <p>
どこか <a href="20210915221421-systemcrafters.html#ID-fa497359-ae3f-494a-b24a-9822eefe67ad">System Crafters</a>の動画で紹介されていたはずだ。
</p>
</div>
</div>
 <div id="outline-container-orgd5a9936" class="outline-3">
 <h3 id="orgd5a9936"> <a href="#orgd5a9936"> <span class="todo TODO">TODO</span> 再帰でEmacsを開く方法を調べる</a></h3>
</div>
</div>
 <div id="outline-container-org31d16c5" class="outline-2">
 <h2 id="org31d16c5"> <a href="#org31d16c5">Reference</a></h2>
 <div class="outline-text-2" id="text-org31d16c5">
</div>
 <div id="outline-container-orgf7a30b5" class="outline-3">
 <h3 id="orgf7a30b5"> <a href="#orgf7a30b5"></a> <a href="https://github.com/ch11ng/exwm/wiki">Home · ch11ng/exwm Wiki</a></h3>
 <div class="outline-text-3" id="text-orgf7a30b5">
 <p>
公式wiki。
</p>
</div>
</div>
</div>
 <div id="outline-container-orgc56e112" class="outline-2">
 <h2 id="orgc56e112"> <a href="#orgc56e112">Archives</a></h2>
 <div class="outline-text-2" id="text-orgc56e112">
</div>
 <div id="outline-container-orgc16e4d9" class="outline-3">
 <h3 id="orgc16e4d9"> <a href="#orgc16e4d9"> <span class="done DONE">DONE</span> chromeバッファなどでpersp移動ができなくて不便</a></h3>
 <div class="outline-text-3" id="text-orgc16e4d9">
 <p>
いちいちEmacsバッファに移ってからキーを打たないと反応しなかった。
define-keyでmodeに定義してやると共通のキーバインドで使用できるようになった。
こういうのちょっとめんどい。
</p>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(global-set-key (kbd  <span class="org-string">"C-M-<right>"</span>) 'persp-next)  <span class="org-comment-delimiter">;; </span> <span class="org-comment">従来</span>
(global-set-key (kbd  <span class="org-string">"C-M-<left>"</span>) 'persp-prev)  <span class="org-comment-delimiter">;; </span> <span class="org-comment">従来</span>
(define-key exwm-mode-map (kbd  <span class="org-string">"C-M-<right>"</span>) 'persp-next)  <span class="org-comment-delimiter">;; </span> <span class="org-comment">加える</span>
(define-key exwm-mode-map (kbd  <span class="org-string">"C-M-<left>"</span>) 'persp-prev)  <span class="org-comment-delimiter">;; </span> <span class="org-comment">加える</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-org9c89b0e" class="outline-3">
 <h3 id="org9c89b0e"> <a href="#org9c89b0e"> <span class="done DONE">DONE</span> Setting EXWM</a></h3>
 <div class="outline-text-3" id="text-org9c89b0e">
 <p>
単に  <code>(start-process-shell-command)</code> を使ってコマンドを実行すればいい。
</p>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(start-process-shell-command
    <span class="org-string">"compton"</span> nil  <span class="org-string">"compton -b --config $HOME/dotfiles/.config/compton/compton.conf"</span>)
</pre>
</div>

 <p>
CLOSED:  <span class="timestamp-wrapper"> <span class="timestamp">[2021-09-19 日 00:25]</span></span>
</p>
 <ul class="org-ul"> <li>background</li>
 <li>transparent background</li>
 <li>polybar</li>
</ul></div>
</div>
</div>
 <div id="outline-container-org1d7a436" class="outline-2">
 <h2 id="org1d7a436"> <a href="#org1d7a436">Backlinks</a></h2>
 <div class="outline-text-2" id="text-org1d7a436">
 <ul class="org-ul"> <li> <a href="./20210508234743-emacs.html">Emacs</a></li>
 <li> <a href="./20210606192338-shell.html">Shell</a></li>
 <li> <a href="./20210912124846-dotfiles.html">dotfiles</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20210905140122-exwm.html"/>
  <id>https://kijimad.github.io/roam/20210905140122-exwm.html</id>
  <updated>2025-06-14T00:00:00+09:00</updated>
</entry>
<entry>
  <title>PostgreSQL</title>
  <author><name>root</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orge1b1279" class="outline-2">
 <h2 id="orge1b1279"> <a href="#orge1b1279">概要</a></h2>
 <div class="outline-text-2" id="text-orge1b1279">
 <p>
RDBMSの1つ。 <a href="20210829232020-mysql.html#ID-7dab097c-60ba-43b9-949f-c58bf3151aa8">MySQL</a>と競合している。
</p>
</div>
</div>
 <div id="outline-container-org97ba385" class="outline-2">
 <h2 id="org97ba385"> <a href="#org97ba385">Memo</a></h2>
 <div class="outline-text-2" id="text-org97ba385">
</div>
 <div id="outline-container-org8db484e" class="outline-3">
 <h3 id="org8db484e"> <a href="#org8db484e">基本コマンド</a></h3>
 <div class="outline-text-3" id="text-org8db484e">
 <div class="org-src-container">
 <pre class="src src-shell">データベース一覧の表示
\l

データベースの選択
\c データベース名

テーブル一覧の表示
\dt;

テーブル構造の表示
\d テーブル名;
</pre>
</div>

 <ul class="org-ul"> <li> <a href="https://qiita.com/H-A-L/items/fe8cb0e0ee0041ff3ceb">PostgreSQLの基本的なコマンド - Qiita</a></li>
</ul></div>
</div>
 <div id="outline-container-orge9ec63f" class="outline-3">
 <h3 id="orge9ec63f"> <a href="#orge9ec63f">起動</a></h3>
 <div class="outline-text-3" id="text-orge9ec63f">
 <p>
データベースサーバを起動する必要がある。
</p>
 <div class="org-src-container">
 <pre class="src src-shell">sudo service postgresql start
sudo service postgresql stop
</pre>
</div>

 <p>
起動せずにpsqlすると↓エラー出る。
</p>
 <blockquote>
 <p>
psql: error: could not connect to server: No such file or directory
        Is the server running locally and accepting
        connections on Unix domain socket “ <i>var/run/postgresql</i>.s.PGSQL.5432”?
</p>
</blockquote>
</div>
</div>
</div>
 <div id="outline-container-orge498da4" class="outline-2">
 <h2 id="orge498da4"> <a href="#orge498da4">Tasks</a></h2>
</div>
 <div id="outline-container-orgc8da7d8" class="outline-2">
 <h2 id="orgc8da7d8"> <a href="#orgc8da7d8">Reference</a></h2>
 <div class="outline-text-2" id="text-orgc8da7d8">
</div>
 <div id="outline-container-org3125004" class="outline-3">
 <h3 id="org3125004"> <a href="#org3125004"></a> <a href="https://speakerdeck.com/soudai/postgresql-architecture-and-performance-monitoring">PostgreSQL Architecture And Performance Monitoring - Speaker Deck</a></h3>
 <div class="outline-text-3" id="text-org3125004">
 <p>
PostgreSQLの内部構造と監視の解説。
</p>
</div>
</div>
</div>
 <div id="outline-container-org12f5f5e" class="outline-2">
 <h2 id="org12f5f5e"> <a href="#org12f5f5e">Archives</a></h2>
</div>


 <div id="outline-container-orgf87e517" class="outline-2">
 <h2 id="orgf87e517"> <a href="#orgf87e517">Backlinks</a></h2>
 <div class="outline-text-2" id="text-orgf87e517">
 <ul class="org-ul"> <li> <a href="./20210725100835-sql.html">SQL</a></li>
 <li> <a href="./20210817003906-history.html">History</a></li>
 <li> <a href="./20211002090535-100knocks.html">100knocks</a></li>
 <li> <a href="./20211021224416-db_design.html">DB Design</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20210905195215-postgresql.html"/>
  <id>https://kijimad.github.io/roam/20210905195215-postgresql.html</id>
  <updated>2025-06-14T00:00:00+09:00</updated>
</entry>
<entry>
  <title>org-mode</title>
  <author><name>root</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org69c087c" class="outline-2">
 <h2 id="org69c087c"> <a href="#org69c087c">概要</a></h2>
 <div class="outline-text-2" id="text-org69c087c">
 <p>
org-modeは <a href="20210508234743-emacs.html#ID-1ad8c3d5-97ba-4905-be11-e6f2626127ad">Emacs</a>の機能の1つ。独自のアウトライン形式.orgを扱うためのインターフェースを提供する。Emacsのkiller appの一角で、根強い人気がある。
</p>

 <ul class="org-ul"> <li>キーボードにフォーカスしたアウトライン操作</li>
 <li>プロジェクト管理</li>
 <li>時間計測</li>
 <li>脚注</li>
 <li>PDF、HTMLなどの各種形式への変換( <a href="index.html#ID-2709c815-cd38-4679-86e8-ff2d3b8817e4">Insomnia</a>はこの変換を使ってビルドしている)</li>
 <li>コードの実行、実行結果の文書内への挿入</li>
 <li>シンタックスハイライト</li>
 <li>タグを使用した検索</li>
</ul> <p>
などが可能。
</p>
</div>
</div>
 <div id="outline-container-org9244549" class="outline-2">
 <h2 id="org9244549"> <a href="#org9244549">Memo</a></h2>
 <div class="outline-text-2" id="text-org9244549">
</div>
 <div id="outline-container-org14a49f2" class="outline-3">
 <h3 id="org14a49f2"> <a href="#org14a49f2">pandocでディレクトリ内のorgファイルを1つのPDFにする</a></h3>
 <div class="outline-text-3" id="text-org14a49f2">
 <ul class="org-ul"> <li> <a href="https://zenn.dev/honahuku/scraps/bb784d54600256">ubuntuでpandocを使ったmarkdownのpdf作成</a></li>
</ul> <div class="org-src-container">
 <pre class="src src-shell">sudo apt install pandoc texlive-lang-japanese texlive-latex-extra texlive-luatex
sudo apt install librsvg2-bin  <span class="org-comment-delimiter"># </span> <span class="org-comment">SVG</span>
pandoc -s test.org -o te2st.pdf --pdf-engine=lualatex -V  <span class="org-variable-name">documentclass</span>=ltjsarticle -V  <span class="org-variable-name">luatexjapresetoptions</span>=morisawa
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 1: </span>ディレクトリ下を一括で実行する</label> <pre class="src src-shell">mkdir -p pdf
find ./ -name  <span class="org-string">"*.org"</span> -type f -exec sh -c  <span class="org-string">'echo ${0}; pandoc "${0}" -o "pdf/${0%.org}.pdf" --toc -N --pdf-engine=lualatex -V documentclass=ltjsarticle -V luatexjapresetoptions=morisawa && echo ok'</span> {}  <span class="org-string">\;</span>
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 2: </span>結合する</label> <pre class="src src-shell">sudo apt install pdftk
pdftk *.pdf cat output merge.pdf
</pre>
</div>
</div>
</div>
 <div id="outline-container-org1bad01e" class="outline-3">
 <h3 id="org1bad01e"> <a href="#org1bad01e">見積もり時間</a></h3>
 <div class="outline-text-3" id="text-org1bad01e">
 <p>
 <code>C-c C-x e</code> で見積もり時間を設定できる。見積もり時間を設定すると、モードラインの残り時間の横に表示される。[0:51/03:00]という感じ。
</p>
</div>
</div>
 <div id="outline-container-orge5b69b2" class="outline-3">
 <h3 id="orge5b69b2"> <a href="#orge5b69b2">easy templates</a></h3>
 <div class="outline-text-3" id="text-orge5b69b2">
 <ul class="org-ul"> <li> <code><q tag</code> でquote blockを展開できる</li>
 <li><s tag でsource code blockを展開できる</li>
</ul></div>
</div>
 <div id="outline-container-org2cc5a5d" class="outline-3">
 <h3 id="org2cc5a5d"> <a href="#org2cc5a5d">orgエレメントの情報を取得する</a></h3>
 <div class="outline-text-3" id="text-org2cc5a5d">
 <p>
org-modeをパースした結果が保持されているので、APIによって簡単に扱うことができる。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 3: </span>細かい情報を取得できる</label> <pre class="src src-emacs-lisp">(org-element-context)
</pre>
</div>

 <div class="results" id="org0b4d500">
 <p>
(src-block (:language emacs-lisp :switches nil :parameters :results raw :begin 530 :end 622 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value (org-element-context)
 :post-blank 1 :post-affiliated 553 :caption (((細かい情報を取得できる))) :parent nil))
</p>

</div>

 <p>
org-modeが各エレメントをどのように扱っているか少し想像がつく。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 4: </span>アクセスして取得する用の関数もある</label> <pre class="src src-emacs-lisp">(org-element-type (org-element-context))
</pre>
</div>

 <div class="results" id="orga7daaac">
 <p>
src-block
</p>

</div>
</div>
</div>
 <div id="outline-container-org65a0813" class="outline-3">
 <h3 id="org65a0813"> <a href="#org65a0813">orgファイルからkeywordsを取得する</a></h3>
 <div class="outline-text-3" id="text-org65a0813">
 <p>
(org-collect-keywords)を使うとorgファイルの情報を取得できる。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 5: </span>(org-collect-keywords)を使ってタイトルを取得しているコード例</label> <pre class="src src-git-permalink">https://github.com/kd-collective/org-roam/blob/abe63b436035049923ae96639b9b856697047779/org-roam-db.el#L299-L309
</pre>
</div>

 <div class="results" id="orgba63619">
 <p>
(defun org-roam-db–file-title ()
  “In current Org buffer, get the title.
If there is no title, return the file name relative to
`org-roam-directory’.”
  (org-link-display-format
   (or (cadr (assoc “TITLE” (org-collect-keywords ’(“title”))))
       (file-name-sans-extension (file-relative-name
                                  (buffer-file-name (buffer-base-buffer))
                                  org-roam-directory)))))
</p>

 <p>
(defun org-roam-db-insert-file ()
</p>

</div>
</div>
</div>
 <div id="outline-container-org43d9ac1" class="outline-3">
 <h3 id="org43d9ac1"> <a href="#org43d9ac1">メモをつける</a></h3>
 <div class="outline-text-3" id="text-org43d9ac1">
 <p>
タスクの状態が遷移したときに、メモを開く設定ができる。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 6: </span>property</label> <pre class="src src-nil">:PROPERTIES:
:LOGGING:  lognoterepeat
:END:
</pre>
</div>
</div>
</div>
 <div id="outline-container-org2ac784d" class="outline-3">
 <h3 id="org2ac784d"> <a href="#org2ac784d">プロパティ挿入</a></h3>
 <div class="outline-text-3" id="text-org2ac784d">
 <p>
特殊な意味をもつ、大文字で構成されるさまざまなプロパティが存在する。
EXPORTシリーズ、CUSTOM_ID、ID…。
</p>

 <p>
C-c C-x p で挿入できる。
</p>
</div>
</div>
 <div id="outline-container-org1a87e8d" class="outline-3">
 <h3 id="org1a87e8d"> <a href="#org1a87e8d">直前のタスクで再度計測</a></h3>
 <div class="outline-text-3" id="text-org1a87e8d">
 <p>
C-c C-x C-i (org-clock-in) でタスク計測できる。
</p>

 <p>
直前のタスクで再度計測するときは、 C-c C-x C-x (org-clock-in-last) で可能。
 <a href="https://orgmode.org/manual/Clocking-commands.html">https://orgmode.org/manual/Clocking-commands.html</a>
</p>

 <p>
clock-inが動くだけで、org-pomodoroはinvokeしない。
</p>
</div>
</div>
 <div id="outline-container-org91ef18e" class="outline-3">
 <h3 id="org91ef18e"> <a href="#org91ef18e">見出しのリンクを挿入する</a></h3>
 <div class="outline-text-3" id="text-org91ef18e">
 <p>
 <a href="20210508233810-org_roam.html#ID-815a2c31-7ddb-40ad-bae0-f84e1cfd8de1">Org-roam</a>で見出しへのファイル内リンクを貼りたいとき。
</p>

 <p>
 <code>org-store-link (C-c l)</code>
で、見出しのリンクを取得する。このとき見出しのIDが生成される。これを消すと辿れなくなるので注意。
</p>

 <p>
 <code>org-insert-link (C-c C-l)</code>
で、貼り付ける。
</p>
</div>
</div>
 <div id="outline-container-org7e76de5" class="outline-3">
 <h3 id="org7e76de5"> <a href="#org7e76de5">タグをつける</a></h3>
 <div class="outline-text-3" id="text-org7e76de5">
 <p>
 <code>C-c C-c</code> で見出しにタグを挿入できる。
WIPとかつけるようにすると便利そう。
基本的なカテゴリは階層で、一時的な状態はタグでやるようにするのがよさそう。
</p>

 <p>
 <code>C-c / m</code> で検索できる。
</p>
</div>
</div>
 <div id="outline-container-org8443909" class="outline-3">
 <h3 id="org8443909"> <a href="#org8443909">可変幅と等幅フォント</a></h3>
 <div class="outline-text-3" id="text-org8443909">
 <p>
 <a href="20210508234743-emacs.html#ID-1ad8c3d5-97ba-4905-be11-e6f2626127ad">Emacs</a>はテキストエディタなので、文字表示のほとんどは等幅フォントだ。が、
org-modeでは自然言語の文章なので、幅の違うフォントのほうが読みやすい。
</p>

 <p>
 <a href="https://zzamboni.org/post/beautifying-org-mode-in-emacs/">zzamboni.org | Beautifying Org Mode in Emacs</a>の設定がとても良い。
</p>

 <ul class="org-ul"> <li>M-qでインデントの形に文章を整形する</li>
 <li>variable-pitch-modeが可変幅にするmode</li>
 <li>variable-pitch-modeだけだとコードブロックも可変になっちゃうので、コードブロックなどのfaceも変更する</li>
</ul></div>
</div>
 <div id="outline-container-org6426bff" class="outline-3">
 <h3 id="org6426bff"> <a href="#org6426bff">org-alertで通知する</a></h3>
 <div class="outline-text-3" id="text-org6426bff">
 <p>
 <a href="https://github.com/spegoraro/org-alert">spegoraro/org-alert: System notifications of org agenda items</a>
org-alertでDEADLINEが近い見出しを通知できる。
期限設定していても、通知されなければ忘れる。
スケジュール管理に使うのであれば必須か。
</p>
</div>
</div>
 <div id="outline-container-org194447b" class="outline-3">
 <h3 id="org194447b"> <a href="#org194447b">babelのヘッダーを挿入する</a></h3>
 <div class="outline-text-3" id="text-org194447b">
 <p>
ヘッダーでbabelの実行結果のオプションを変えることができる。
</p>

 <div class="org-src-container">
 <pre class="src src-org"> <span class="org-org-block-begin-line">#+BEGIN_SRC emacs-lisp :result outputs</span>
 <span class="org-org-block">(concat </span> <span class="org-org-block"> <span class="org-string">"hello"</span></span> <span class="org-org-block"> </span> <span class="org-org-block"> <span class="org-string">"world"</span></span> <span class="org-org-block">)</span>
 <span class="org-org-block-end-line">#+END_SRC</span>
</pre>
</div>

 <p>
で実行すると標準出力が挿入される。
</p>

 <p>
手書きは忘れやすいのでコマンドでやる。
コードブロック上で  <code>C-c C-v j</code> ::  <code>org-babel-insert-header-arg</code> 。
</p>

 <p>
わかりやすい説明。
 <a href="http://misohena.jp/blog/2017-10-26-how-to-use-code-block-of-emacs-org-mode.html">org-modeのコードブロック(Babel)の使い方 | Misohena Blog</a>
</p>
</div>
</div>
 <div id="outline-container-orgccdc1b8" class="outline-3">
 <h3 id="orgccdc1b8"> <a href="#orgccdc1b8">babelで結果をそのまま表示する</a></h3>
 <div class="outline-text-3" id="text-orgccdc1b8">
 <p>
適用させたい見出しレベルのproperty内で、↓追加する。
</p>
 <div class="org-src-container">
 <pre class="src src-shell">:header-args+: :results output
</pre>
</div>

 <p>
動作の違い。
</p>

 <div class="org-src-container">
 <pre class="src src-ruby">[1, 2]
</pre>
</div>

 <table> <colgroup> <col class="org-right"></col> <col class="org-right"></col></colgroup> <tbody> <tr> <td class="org-right">1</td>
 <td class="org-right">2</td>
</tr></tbody></table> <div class="org-src-container">
 <pre class="src src-ruby"> <span class="org-builtin">p</span> [1, 2]
</pre>
</div>

 <pre class="example">
[1, 2]
</pre>
</div>
</div>
 <div id="outline-container-orgb9a40ac" class="outline-3">
 <h3 id="orgb9a40ac"> <a href="#orgb9a40ac">org-protocolを設定する</a></h3>
 <div class="outline-text-3" id="text-orgb9a40ac">
 <ul class="org-ul"> <li> <a href="https://github.com/sprig/org-capture-extension">sprig/org-capture-extension: A Chrome and firefox extension facilitating org-capture in emacs</a></li>
</ul> <p>
Chrome拡張としてある。ここのReadmeに書いてあるコマンドを実行する。
</p>
 <ul class="org-ul"> <li>emacsclientをorg-protocolのハンドラとして登録する。たぶんプロトコルと対応するアプリケーションを選ぶ、という処理だろう。httpのときはブラウザを起動する、みたいな</li>
</ul> <div class="org-src-container">
 <pre class="src src-shell">cat >  <span class="org-string">"${HOME}/.local/share/applications/org-protocol.desktop"</span> << EOF
 <span class="org-sh-heredoc">[Desktop Entry]</span>
 <span class="org-sh-heredoc">Name=org-protocol</span>
 <span class="org-sh-heredoc">Exec=emacsclient %u</span>
 <span class="org-sh-heredoc">Type=Application</span>
 <span class="org-sh-heredoc">Terminal=false</span>
 <span class="org-sh-heredoc">Categories=System;</span>
 <span class="org-sh-heredoc">MimeType=x-scheme-handler/org-protocol;</span>
 <span class="org-sh-heredoc">EOF</span>
</pre>
</div>

 <p>
そして↓。Linux MintでもOKだった。
</p>

 <div class="org-src-container">
 <pre class="src src-shell">update-desktop-database ~/.local/share/applications/
</pre>
</div>

 <p>
OSの設定は完了。Emacsの設定を追加する。template名をちゃんと設定する+ディレクトリが存在しないと起動しない。
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">setq</span> org-capture-templates `(
    ( <span class="org-string">"p"</span>  <span class="org-string">"Protocol"</span> entry (file+headline ,(concat org-directory  <span class="org-string">"notes.org"</span>)  <span class="org-string">"Inbox"</span>)
         <span class="org-string">"* %^{Title}\nSource: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?"</span>)
    ( <span class="org-string">"L"</span>  <span class="org-string">"Protocol Link"</span> entry (file+headline ,(concat org-directory  <span class="org-string">"notes.org"</span>)  <span class="org-string">"Inbox"</span>)
         <span class="org-string">"* %? [[%:link][%:description]] \nCaptured On: %U"</span>)
))
</pre>
</div>

 <p>
Chromeに拡張機能をインストールしてクリックすると、Emacsが立ち上がる。
</p>
</div>
</div>
 <div id="outline-container-orgfdb2ba0" class="outline-3">
 <h3 id="orgfdb2ba0"> <a href="#orgfdb2ba0">org-protocolでプロンプトを出さないようにする</a></h3>
 <div class="outline-text-3" id="text-orgfdb2ba0">
 <p>
Linux Mint, Chromeにて。
org-protocolを設定できても、ドメインごとでxdg-openを許可しますかプロンプトが出るので面倒。
ポリシーを変更することで出さないようにする。
</p>

 <p>
設定ポリシーは、chrome://policy/ で確認できる。最初は何もない。
↓実行する。
</p>
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 7: </span>ポリシーを追加する</label> <pre class="src src-shell">sudo mkdir -p /etc/opt/chrome/policies/managed/ &&  <span class="org-builtin">echo</span>  <span class="org-string">'{ "URLAllowlist": ["org-protocol://*"] }'</span> |sudo tee /etc/opt/chrome/policies/managed/whitelist.json
</pre>
</div>

 <p>
chrome://policy/ に表示されるのを確認する(再読込が必要)。
org-protocol使用時にプロンプトが出なくなる。
</p>
</div>
</div>
 <div id="outline-container-orgd964b18" class="outline-3">
 <h3 id="orgd964b18"> <a href="#orgd964b18">メモを取るのにはorg-captureを使う</a></h3>
</div>
 <div id="outline-container-orgfc47567" class="outline-3">
 <h3 id="orgfc47567"> <a href="#orgfc47567">エクスポートしないタグ</a></h3>
 <div class="outline-text-3" id="text-orgfc47567">
 <p>
 <code>C-c C-q</code> で  <code>noexport</code> を指定するとその場所はエクスポートされない。
</p>
</div>
</div>
</div>
 <div id="outline-container-org8c0f7f7" class="outline-2">
 <h2 id="org8c0f7f7"> <a href="#org8c0f7f7">Tasks</a></h2>
 <div class="outline-text-2" id="text-org8c0f7f7">
</div>
 <div id="outline-container-org111d409" class="outline-3">
 <h3 id="org111d409"> <a href="#org111d409"> <span class="todo TODO">TODO</span> org-lintをCIで実行する</a></h3>
 <div class="outline-text-3" id="text-org111d409">
 <p>
 <code>org-lint</code> をディレクトリに対して行う方法。
</p>
</div>
</div>
 <div id="outline-container-org09d3fd3" class="outline-3">
 <h3 id="org09d3fd3"> <a href="#org09d3fd3"> <span class="todo TODO">TODO</span> ファイルごとの形式を正規化する</a></h3>
 <div class="outline-text-3" id="text-org09d3fd3">
 <p>
見出しにけっこうズレがある。そういうのを検知するLintがあるはずだ。
</p>
</div>
</div>
 <div id="outline-container-orge6371f2" class="outline-3">
 <h3 id="orge6371f2"> <a href="#orge6371f2"> <span class="todo TODO">TODO</span> clock table/agenda にリンクをつける</a></h3>
</div>
</div>
 <div id="outline-container-org902410b" class="outline-2">
 <h2 id="org902410b"> <a href="#org902410b">Example</a></h2>
 <div class="outline-text-2" id="text-org902410b">
</div>
 <div id="outline-container-orgf92b9f8" class="outline-3">
 <h3 id="orgf92b9f8"> <a href="#orgf92b9f8">チェックリスト</a></h3>
 <div class="outline-text-3" id="text-orgf92b9f8">
 <p>
 <code>C-c</code> でチェックできる。
</p>
 <ul class="org-ul"> <li>人としてやるべきこと  <code>[1/3]</code>
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 盆栽に水をやる</li>
 <li class="off"> <input type="checkbox"></input> 子孫に美田を残す</li>
 <li class="off"> <input type="checkbox"></input> 借金を返す</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org3ef34db" class="outline-3">
 <h3 id="org3ef34db"> <a href="#org3ef34db">脚注</a></h3>
 <div class="outline-text-3" id="text-org3ef34db">
 <p>
これが脚注 <sup> <a id="fnr.1" class="footref" href="#fn.1" role="doc-backlink">1</a></sup>である。
定義はどこに書いてもいい。
出力時にはFootnotesのアウトラインが作られてそこに挿入される。
</p>
</div>
</div>
</div>
 <div id="outline-container-org489875b" class="outline-2">
 <h2 id="org489875b"> <a href="#org489875b">Reference</a></h2>
 <div class="outline-text-2" id="text-org489875b">
</div>
 <div id="outline-container-org3464af5" class="outline-3">
 <h3 id="org3464af5"> <a href="#org3464af5"></a> <a href="https://www.evalapply.org/posts/why-and-how-i-use-org-mode/index.html">Why and How I use “Org Mode” for my writing and more</a></h3>
 <div class="outline-text-3" id="text-org3464af5">
 <p>
org-modeを使う理由。
</p>
</div>
</div>
 <div id="outline-container-orgc59b148" class="outline-3">
 <h3 id="orgc59b148"> <a href="#orgc59b148"></a> <a href="https://zzamboni.org/post/beautifying-org-mode-in-emacs/">zzamboni.org | Beautifying Org Mode in Emacs</a></h3>
 <div class="outline-text-3" id="text-orgc59b148">
 <p>
かなりいい感じに表示する設定。
</p>
</div>
</div>
 <div id="outline-container-org6343758" class="outline-3">
 <h3 id="org6343758"> <a href="#org6343758"></a> <a href="https://orgmode.org/manual/Results-of-Evaluation.html">Results of Evaluation (The Org Manual)</a></h3>
</div>
 <div id="outline-container-org2ec922f" class="outline-3">
 <h3 id="org2ec922f"> <a href="#org2ec922f"></a> <a href="https://lists.gnu.org/archive/html/emacs-orgmode/2017-10/msg00227.html">Re: [O] Lint multiple files at once</a></h3>
</div>
 <div id="outline-container-org1e004a3" class="outline-3">
 <h3 id="org1e004a3"> <a href="#org1e004a3"></a> <a href="https://blog.jethro.dev/posts/org_mode_workflow_preview/">Org-mode Workflow: A Preview · Jethro Kuan</a></h3>
 <div class="outline-text-3" id="text-org1e004a3">
 <p>
org-mode運用法。
</p>
</div>
</div>
 <div id="outline-container-org59611ff" class="outline-3">
 <h3 id="org59611ff"> <a href="#org59611ff"></a> <a href="https://github.com/sprig/org-capture-extension">sprig/org-capture-extension: A Chrome and firefox extension facilitating org-capture in emacs</a></h3>
 <div class="outline-text-3" id="text-org59611ff">
 <p>
org-protocolの設定。
</p>
</div>
</div>
</div>
 <div id="outline-container-orga211086" class="outline-2">
 <h2 id="orga211086"> <a href="#orga211086">Archives</a></h2>
 <div class="outline-text-2" id="text-orga211086">
</div>
 <div id="outline-container-org923b070" class="outline-3">
 <h3 id="org923b070"> <a href="#org923b070"> <span class="done CLOSE">CLOSE</span> exampleを完成させる</a></h3>
 <div class="outline-text-3" id="text-org923b070">
 <p>
どういう意味なのか、全く思い出せない。
ああ、org-modeの使用例のページを作るということか。
別にいらないだろう。実際の例で示せばいい。
</p>
</div>
</div>
 <div id="outline-container-org8e1e693" class="outline-3">
 <h3 id="org8e1e693"> <a href="#org8e1e693"> <span class="done DONE">DONE</span> org-captureでメモ元リンクを記録しないようにする</a></h3>
 <div class="outline-text-3" id="text-org8e1e693">
</div>
</div>
 <div id="outline-container-org2568083" class="outline-3">
 <h3 id="org2568083"> <a href="#org2568083"> <span class="done CLOSE">CLOSE</span> org-pomodoro完了後メモを残すように設定を復活</a></h3>
 <div class="outline-text-3" id="text-org2568083">
 <p>
別に見ないから不要だろう。
</p>
</div>
</div>
 <div id="outline-container-org0f59112" class="outline-3">
 <h3 id="org0f59112"> <a href="#org0f59112"> <span class="done DONE">DONE</span> denoteを調べる</a></h3>
 <div class="outline-text-3" id="text-org0f59112">
 <ul class="org-ul"> <li> <a href="https://protesilaos.com/codelog/2022-06-18-denote-demo/">Emacs: demonstration of my Denote package (simple note-taking) | Protesilaos Stavrou</a></li>
</ul> <p>
roamだと時系列、ブログ的に表現しにくいので、denoteを調べる。ほとんどは分野別ファイルで問題ないが、たまに必要なときがある。いい感じだ。
</p>

 <p>
denoteリンクをHTMLエクスポートする方法がわからない。エラーになる。
リネームするときは denote-rename-file を使う。
</p>
</div>
</div>
 <div id="outline-container-org3b6087e" class="outline-3">
 <h3 id="org3b6087e"> <a href="#org3b6087e"> <span class="done DONE">DONE</span> Agenda Viewの整理</a></h3>
 <div class="outline-text-3" id="text-org3b6087e">
 <p>
予定関係をうまく使えてない。
</p>

 <ul class="org-ul"> <li>effort表示をorg-agendaでできるようにした
 <ul class="org-ul"> <li>目標値だけで、今どれくらいやったのかはわからないのが若干ビミョーだが…</li>
</ul></li>
 <li>週タスクを決めるためのビュー
 <ul class="org-ul"> <li>TODO一覧を見る</li>
 <li>今週やると決めたものにeffortを設定する</li>
</ul></li>
 <li>今日(週)やることのビュー
 <ul class="org-ul"> <li>週のscheduleの一覧が表示される</li>
 <li>今日やることをWIPにして開始</li>
 <li>2つ表示しようとしたが、面倒だったのでやめた</li>
 <li>scheduledがうまく設定できず。まああまり先に設定してもやらないので、まあやらなくていい。せいぜい今週がわかればいい</li>
 <li>effortでのフィルタはできたので、週にやりたいものはeffortを設定することにする</li>
</ul></li>
</ul></div>
</div>
</div>
 <div id="outline-container-org5799fa0" class="outline-2">
 <h2 id="org5799fa0"> <a href="#org5799fa0">Backlinks</a></h2>
 <div class="outline-text-2" id="text-org5799fa0">
 <ul class="org-ul"> <li> <a href="./20210508233810-org_roam.html">Org-roam</a></li>
 <li> <a href="./20210508234743-emacs.html">Emacs</a></li>
 <li> <a href="./20210904124352-workflow.html">workflow</a></li>
 <li> <a href="./20210911113057-go.html">Go</a></li>
 <li> <a href="./20211002090535-100knocks.html">100knocks</a></li>
 <li> <a href="./20230205172738-mermaid.html">Mermaid</a></li>
 <li> <a href="./20240206T010954--kdoc-72-org-modeのhtmlエクスポート時に結果だけを表示する__wiki.html">KDOC 72: org-modeのHTMLエクスポート時に結果だけを表示する</a></li>
 <li> <a href="./20240207T095628--kdoc-78-org-modeで脚注を再割り振りする__wiki.html">KDOC 78: org-modeで脚注を再割り振りする</a></li>
 <li> <a href="./index.html">Insomnia</a></li>
</ul></div>
</div>
 <div id="footnotes">
 <h2 class="footnotes">Footnotes: </h2>
 <div id="text-footnotes">

 <div class="footdef"> <sup> <a id="fn.1" class="footnum" href="#fnr.1" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"> <p class="footpara">
The link is:  <a href="https://orgmode.org">https://orgmode.org</a>
</p></div></div>


</div>
</div></div>]]></content>
  <link href="https://kijimad.github.io/roam/20210907012153-org_mode.html"/>
  <id>https://kijimad.github.io/roam/20210907012153-org_mode.html</id>
  <updated>2025-06-14T00:00:00+09:00</updated>
</entry>
<entry>
  <title>Haskell</title>
  <author><name>root</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org2c51bbe" class="outline-2">
 <h2 id="org2c51bbe"> <a href="#org2c51bbe">概要</a></h2>
 <div class="outline-text-2" id="text-org2c51bbe">
 <p>
Haskellは純粋関数型 <a href="20210509101246-programming_language.html#ID-868ac56a-2d42-48d7-ab7f-7047c85a8f39">Programming Language</a>。
</p>
</div>
</div>
 <div id="outline-container-orga018dfe" class="outline-2">
 <h2 id="orga018dfe"> <a href="#orga018dfe">Memo</a></h2>
 <div class="outline-text-2" id="text-orga018dfe">
</div>
 <div id="outline-container-org70e6db2" class="outline-3">
 <h3 id="org70e6db2"> <a href="#org70e6db2">QuickCheck</a></h3>
 <div class="outline-text-3" id="text-org70e6db2">
 <p>
QuickCheckというテストライブラリがある。型に基づくプロパティテスト、というもののよう。
</p>

 <p>
 <a href="https://haskell.e-bigmoon.com/stack/test/quickcheck.html">【基礎】ランダムテスト (QuickCheck)</a>
</p>
</div>
</div>
 <div id="outline-container-org24db538" class="outline-3">
 <h3 id="org24db538"> <a href="#org24db538">stack</a></h3>
 <div class="outline-text-3" id="text-org24db538">
 <p>
stackはHaskellの開発ツール。
</p>
 <ul class="org-ul"> <li> <a href="https://docs.haskellstack.org/en/stable/README/">Home - The Haskell Tool Stack</a></li>
</ul></div>
</div>
 <div id="outline-container-orgfeb1690" class="outline-3">
 <h3 id="orgfeb1690"> <a href="#orgfeb1690">REPL</a></h3>
 <div class="outline-text-3" id="text-orgfeb1690">
 <p>
対話実行環境を立ち上げる。
</p>
 <div class="org-src-container">
 <pre class="src src-haskell">ghci
>> :load -- ファイル読み込み
>> :reload -- 再読込。org-babelがおかしくなったときに使える
>> :quit -- ghci終了
</pre>
</div>

 <p>
プロンプトをセット。
</p>
 <div class="org-src-container">
 <pre class="src src-haskell">:set prompt "GHCi> "
</pre>
</div>
</div>
</div>
 <div id="outline-container-org7b221ee" class="outline-3">
 <h3 id="org7b221ee"> <a href="#org7b221ee">前置引数</a></h3>
 <div class="outline-text-3" id="text-org7b221ee">
 <div class="org-src-container">
 <pre class="src src-haskell">(+) 2 2
</pre>
</div>

 <div class="results" id="orgc7c1688">
 <p>
4
</p>

</div>
</div>
</div>
 <div id="outline-container-orge0bc94f" class="outline-3">
 <h3 id="orge0bc94f"> <a href="#orge0bc94f">マイナス演算子</a></h3>
 <div class="outline-text-3" id="text-orge0bc94f">
 <div class="org-src-container">
 <pre class="src src-haskell">2 + (- 1)
</pre>
</div>

 <div class="results" id="org38f9bb0">
 <p>
1
</p>

</div>
</div>
</div>
 <div id="outline-container-org5fafdd6" class="outline-3">
 <h3 id="org5fafdd6"> <a href="#org5fafdd6">:infoコマンド</a></h3>
 <div class="outline-text-3" id="text-org5fafdd6">
 <p>
 <code>infixl</code> が演算子の優先順位。
</p>
 <div class="org-src-container">
 <pre class="src src-haskell">:info (+)
</pre>
</div>

 <div class="results" id="org4e401dc">
 <p>
class Num a where
  (+) :: a -> a -> a
  …
  – Defined in ‘GHC.Num’
infixl 6 +
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">:info (*)
</pre>
</div>

 <div class="results" id="org2f717b4">
 <p>
class Num a where
  …
  (*) :: a -> a -> a
  …
  – Defined in ‘GHC.Num’
infixl 7 *
</p>

</div>
</div>
</div>
 <div id="outline-container-org24839f9" class="outline-3">
 <h3 id="org24839f9"> <a href="#org24839f9">定数</a></h3>
 <div class="outline-text-3" id="text-org24839f9">
 <div class="org-src-container">
 <pre class="src src-haskell">pi
</pre>
</div>

 <div class="results" id="org0ebbb58">
 <p>
3.141592653589793
</p>

</div>
</div>
</div>
 <div id="outline-container-org7e3fd66" class="outline-3">
 <h3 id="org7e3fd66"> <a href="#org7e3fd66">代入</a></h3>
 <div class="outline-text-3" id="text-org7e3fd66">
 <div class="org-src-container">
 <pre class="src src-haskell">let e = exp 1
(e ** pi) - pi
</pre>
</div>

 <div class="results" id="org0a26bed">
 <p>
19.99909997918947
</p>

</div>
</div>
</div>
 <div id="outline-container-orgac62052" class="outline-3">
 <h3 id="orgac62052"> <a href="#orgac62052">リスト</a></h3>
 <div class="outline-text-3" id="text-orgac62052">
 <div class="org-src-container">
 <pre class="src src-haskell">["foo", "bar", "baz"]
</pre>
</div>

 <div class="results" id="orgcb009b1">
 <p>
[“foo”,“bar”,“baz”]
</p>

</div>
</div>
</div>
 <div id="outline-container-orgb044068" class="outline-3">
 <h3 id="orgb044068"> <a href="#orgb044068">列挙表記</a></h3>
 <div class="outline-text-3" id="text-orgb044068">
 <div class="org-src-container">
 <pre class="src src-haskell">[1..10]
</pre>
</div>

 <div class="results" id="org1f4e81c">
 <p>
[1,2,3,4,5,6,7,8,9,10]
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">[1.0,1.25..2.0]
</pre>
</div>

 <div class="results" id="org1b5f19a">
 <p>
[1.0,1.25,1.5,1.75,2.0]
</p>

</div>
</div>
</div>
 <div id="outline-container-orgb39a68a" class="outline-3">
 <h3 id="orgb39a68a"> <a href="#orgb39a68a">リスト結合</a></h3>
 <div class="outline-text-3" id="text-orgb39a68a">
 <div class="org-src-container">
 <pre class="src src-haskell">[3,1,3] ++ [3,7]
</pre>
</div>

 <div class="results" id="orgf980441">
 <p>
[3,1,3,3,7]
</p>

</div>
</div>
</div>
 <div id="outline-container-orgd5f2387" class="outline-3">
 <h3 id="orgd5f2387"> <a href="#orgd5f2387">cons</a></h3>
 <div class="outline-text-3" id="text-orgd5f2387">
 <div class="org-src-container">
 <pre class="src src-haskell">1 : [2, 3]
</pre>
</div>

 <div class="results" id="orga13f51e">
 <p>
[1,2,3]
</p>

</div>
</div>
</div>
 <div id="outline-container-org36e88d5" class="outline-3">
 <h3 id="org36e88d5"> <a href="#org36e88d5">型情報</a></h3>
 <div class="outline-text-3" id="text-org36e88d5">
 <p>
⚠babelで実行すると実行されなくなるので、GHCIだけで試すこと。
</p>
 <div class="org-src-container">
 <pre class="src src-haskell">Prelude> :set +t
Prelude> 'c'
'c'
it :: Char

Prelude> :unset +t
</pre>
</div>
</div>
</div>
 <div id="outline-container-org4475175" class="outline-3">
 <h3 id="org4475175"> <a href="#org4475175">型エラー</a></h3>
 <div class="outline-text-3" id="text-org4475175">
 <div class="org-src-container">
 <pre class="src src-haskell">1.2 % 3.4
</pre>
</div>

 <div class="results" id="org416c904">
 <p>
<interactive>:6213:5: error:
    Variable not in scope: (%) :: Double -> Double -> t
</p>

</div>
</div>
</div>
 <div id="outline-container-org1b4dfd0" class="outline-3">
 <h3 id="org1b4dfd0"> <a href="#org1b4dfd0">:type</a></h3>
 <div class="outline-text-3" id="text-org1b4dfd0">
 <div class="org-src-container">
 <pre class="src src-haskell">:type 1
</pre>
</div>

 <div class="results" id="orgb95e95f">
 <p>
1 :: Num p => p
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">:type "abc"
</pre>
</div>

 <div class="results" id="org0bd5939">
 <p>
“abc” :: [Char]
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">:type it
</pre>
</div>

 <div class="results" id="orgd304583">
 <p>
it :: [Char]
</p>

</div>
</div>
</div>
 <div id="outline-container-org234f6e0" class="outline-3">
 <h3 id="org234f6e0"> <a href="#org234f6e0">いくつかの数値型関数</a></h3>
 <div class="outline-text-3" id="text-org234f6e0">
 <div class="org-src-container">
 <pre class="src src-haskell">succ 6
</pre>
</div>

 <div class="results" id="org20aff8f">
 <p>
7
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">pred 9
</pre>
</div>

 <div class="results" id="org4ea96f0">
 <p>
8
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">sin (pi / 2)
</pre>
</div>

 <div class="results" id="org4f5559d">
 <p>
1.0
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">truncate pi
</pre>
</div>

 <div class="results" id="org59a3c0c">
 <p>
3
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">round 3.4
</pre>
</div>

 <div class="results" id="org5ff9697">
 <p>
3
</p>

</div>
</div>
</div>
 <div id="outline-container-org836153e" class="outline-3">
 <h3 id="org836153e"> <a href="#org836153e"> <code>:?</code> コマンド</a></h3>
 <div class="outline-text-3" id="text-org836153e">
 <div class="org-src-container">
 <pre class="src src-haskell">:?
</pre>
</div>

 <div class="results" id="org50ed61c">
 <p>
display this list of commands
   :info[!] [<name> …]       display information about the given names
                               (!: do not filter instances)
   :issafe [<mod>]             display safe haskell information of module <mod>
   :kind[!] <type>             show the kind of <type>
                               (!: also print the normalised type)
   :load[!] [*]<module> …    load module(s) and their dependents
                               (!: defer type errors)
   :main [<arguments> …]     run the main function with the given arguments
   :module [+/-] [*]<mod> …  set the context for expression evaluation
   :quit                       exit GHCi
   :reload[!]                  reload the current module set
                               (!: defer type errors)
   :run function [<arguments> …] run the function with the given arguments
   :script <file>              run the script <file>
   :type <expr>                show the type of <expr>
   :type +d <expr>             show the type of <expr>, defaulting type variables
   :type +v <expr>             show the type of <expr>, with its specified tyvars
   :unadd <module> …         remove module(s) from the current target set
   :undef <cmd>                undefine user-defined command :<cmd>
   :!<command>                 run the shell command <command>
</p>

 <p>
– Commands for debugging:
</p>

 <p>
:abandon                    at a breakpoint, abandon current computation
:back [<n>]                 go back in the history N steps (after :trace)
:break [<mod>] <l> [<col>]  set a breakpoint at the specified location
:break <name>               set a breakpoint on the specified function
:continue                   resume after a breakpoint
:delete <number>            delete the specified breakpoint
:delete *                   delete all breakpoints
:force <expr>               print <expr>, forcing unevaluated parts
:forward [<n>]              go forward in the history N step s(after :back)
:history [<n>]              after :trace, show the execution history
:list                       show the source code around current breakpoint
:list <identifier>          show the source code for <identifier>
:list [<module>] <line>     show the source code around line number <line>
:print [<name> …]         show a value without forcing its computation
:sprint [<name> …]        simplified version of :print
:step                       single-step after stopping at a breakpoint
:step <expr>                single-step into <expr>
:steplocal                  single-step within the current top-level binding
:stepmodule                 single-step restricted to the current module
:trace                      trace after stopping at a breakpoint
:trace <expr>               evaluate <expr> with tracing on (see :history)
</p>

 <p>
– Commands for changing settings:
</p>

 <p>
:set <option> …           set options
:seti <option> …          set options for interactive evaluation only
:set args <arg> …         set the arguments returned by System.getArgs
:set prog <progname>        set the value returned by System.getProgName
:set prompt <prompt>        set the prompt used in GHCi
:set prompt-cont <prompt>   set the continuation prompt used in GHCi
:set prompt-function <expr> set the function to handle the prompt
:set prompt-cont-function <expr>set the function to handle the continuation prompt
:set editor <cmd>           set the command used for :edit
:set stop [<n>] <cmd>       set the command to run when a breakpoint is hit
:unset <option> …         unset options
</p>

 <p>
Options for ’:set’ and ’:unset’:
</p>

 <p>
+m            allow multiline commands
+r            revert top-level expressions after each evaluation
+s            print timing/memory stats after each evaluation
+t            print type after evaluation
+c            collect type/location info after loading modules
-<flags>      most GHC command line flags can also be set here
		     (eg. -v2, -XFlexibleInstances, etc.)
		for GHCi-specific flags, see User’s Guide,
		Flag reference, Interactive-mode options
</p>

 <p>
– Commands for displaying information:
</p>

 <p>
:show bindings              show the current bindings made at the prompt
:show breaks                show the active breakpoints
:show context               show the breakpoint context
:show imports               show the current imports
:show linker                show current linker state
:show modules               show the currently loaded modules
:show packages              show the currently active package flags
:show paths                 show the currently active search paths
:show language              show the currently active language flags
:show targets               show the current set of targets
:show <setting>             show value of <setting>, which is one of
			       [args, prog, editor, stop]
:showi language             show language flags for interactive evaluation
</p>

</div>
</div>
</div>
 <div id="outline-container-orge1e8143" class="outline-3">
 <h3 id="orge1e8143"> <a href="#orge1e8143">型推論</a></h3>
 <div class="outline-text-3" id="text-orge1e8143">
 <p>
式の後ろに書く::と型の組み合わせのことを  <code>型シグネチャ</code> という。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">:type 'a'
'a' :: Char
</pre>
</div>

 <div class="results" id="org225c4eb">
 <p>
’a’ :: Char
’a’
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">[1, 2, 3] :: Int
</pre>
</div>

 <div class="results" id="orgdf686bf">
 <p>
In an equation for ‘it’: it = [1, 2, 3] :: Int
</p>

</div>
</div>
</div>
 <div id="outline-container-org76f62d7" class="outline-3">
 <h3 id="org76f62d7"> <a href="#org76f62d7">関数適用</a></h3>
 <div class="outline-text-3" id="text-org76f62d7">
 <div class="org-src-container">
 <pre class="src src-haskell">odd 3
</pre>
</div>

 <div class="results" id="orgbf3ef39">
 <p>
True
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">odd 6
</pre>
</div>

 <div class="results" id="orgdad7d0f">
 <p>
False
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">compare 3 3
</pre>
</div>

 <div class="results" id="org695b81b">
 <p>
EQ
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">compare 3 2
</pre>
</div>

 <div class="results" id="org5180fd3">
 <p>
GT
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">(compare 2 3) == LT
compare 2 3 == LT
</pre>
</div>

 <div class="results" id="orgd06ffad">
 <p>
True
True
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">compare (sqrt 3) (sqrt 6)
</pre>
</div>

 <div class="results" id="org4edb7ca">
 <p>
LT
</p>

</div>
</div>
</div>
 <div id="outline-container-org600bb1e" class="outline-3">
 <h3 id="org600bb1e"> <a href="#org600bb1e">合成データ型: リスト</a></h3>
 <div class="outline-text-3" id="text-org600bb1e">
 <p>
合成データ型は他のデータ型から構成する。よく使う合成データ型はリスト(可変長)とタプル(固定長)。
</p>

 <p>
リスト型は  <code>多相的</code> である。多相型を書く場合には  <code>型変数</code> を使う。
 <code>head :: [a] -> a</code> は「どんな型の値を含むかはわからないが、その型の値のリストは作れる」と言っている。
</p>
 <div class="org-src-container">
 <pre class="src src-haskell">:type head
head [1,2,3,4]
head ['a','b','c']
tail [1,2,3,4]
tail [True,False]
</pre>
</div>

 <div class="results" id="org6662461">
 <p>
<interactive>:5924:1-17: error:
    • No instance for (Show Bool) arising from a use of ‘print’
      There are instances for similar types:
        instance Show Prelude.Bool – Defined in ‘GHC.Show’
    • In a stmt of an interactive GHCi command: print it
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">-- 評価結果のBoolがリンクで解釈されてエクスポート時にエラーになるので再評価しない。
:type [[True],[False,False]]
</pre>
</div>

 <div class="results" id="orga00843a">
 <p>
[[True],[False,False]] ::  <code>[[Bool]]</code>
</p>

</div>

 <p>
異なる型ではエラー。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">:type [1, 'a']
</pre>
</div>

 <div class="results" id="org4577e14">
 <p>
<interactive>:1:2: error:
    • No instance for (Num Char) arising from the literal ‘1’
    • In the expression: 1
      In the expression: [1, ’a’]
</p>

</div>
</div>
</div>
 <div id="outline-container-orgd10382d" class="outline-3">
 <h3 id="orgd10382d"> <a href="#orgd10382d">合成データ型: タプル</a></h3>
 <div class="outline-text-3" id="text-orgd10382d">
 <p>
リストと違ってタプルは型が異なっていてもOK。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">(1964, "Labyrinths")
()
</pre>
</div>

 <div class="results" id="org82aca0c">
 <p>
(1964,“Labyrinths”)
()
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">:type (True, "hello")
</pre>
</div>

 <div class="results" id="org905f486">
 <p>
(True, “hello”) :: (Bool, [Char])
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">:type (4, ['a', 'm'], (16, True))
</pre>
</div>

 <div class="results" id="org14a3804">
 <p>
(4, [’a’, ’m’], (16, True))
  :: (Num a1, Num a2) => (a1, [Char], (a2, Bool))
</p>

</div>

 <p>
タプルの型は数/位置/その位置に含まれる要素の型、で表す。
含まれている要素の型や数が異なれば別の型。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">:type (False, 'a')
</pre>
</div>

 <div class="results" id="org1e076db">
 <p>
(False, ’a’) :: (Bool, Char)
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">:type ('a', False)
</pre>
</div>

 <div class="results" id="org0b51f10">
 <p>
(’a’, False) :: (Char, Bool)
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">:type (False, 'a')
</pre>
</div>

 <div class="results" id="org6acde7c">
 <p>
(False, ’a’) :: (Bool, Char)
</p>

</div>
</div>
</div>
 <div id="outline-container-org014631e" class="outline-3">
 <h3 id="org014631e"> <a href="#org014631e">関数</a></h3>
 <div class="outline-text-3" id="text-org014631e">
 <div class="org-src-container">
 <pre class="src src-haskell">take 2 [1,2,3,4,5]
</pre>
</div>

 <div class="results" id="org2e90099">
 <p>
[1,2]
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">drop 3 [1,2,3,4,5]
</pre>
</div>

 <div class="results" id="orgc57c415">
 <p>
[4,5]
</p>

</div>

 <p>
⚠  <code>fst(1,'a')</code> と空白なしで書くと、引数2つに見えるが、違うことに注意。
単一のペアへの関数の適用である。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">fst (1,'a')
</pre>
</div>

 <div class="results" id="org3ead852">
 <p>
1
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">snd (1,'a')
</pre>
</div>

 <div class="results" id="org1b84130">
 <p>
’a’
</p>

</div>
</div>
</div>
 <div id="outline-container-orgdadcee8" class="outline-3">
 <h3 id="orgdadcee8"> <a href="#orgdadcee8">関数の型</a></h3>
 <div class="outline-text-3" id="text-orgdadcee8">
 <div class="org-src-container">
 <pre class="src src-haskell">:type lines
</pre>
</div>

 <div class="results" id="org00fc14c">
 <p>
lines :: String -> [String]
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">lines "the quick\nbrown for\njumps"
</pre>
</div>

 <div class="results" id="org0ce8e58">
 <p>
[“the quick”,“brown for”,“jumps”]
</p>

</div>

 <p>
副作用がある関数で結果の型は  <code>IO</code> ではじまる。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">:type readFile
</pre>
</div>

 <div class="results" id="orga18b1df">
 <p>
readFile :: FilePath -> IO String
</p>

</div>
</div>
</div>
 <div id="outline-container-orgc4f7c1b" class="outline-3">
 <h3 id="orgc4f7c1b"> <a href="#orgc4f7c1b">関数定義</a></h3>
 <div class="outline-text-3" id="text-orgc4f7c1b">
 <p>
Haskellのコードの中では、記号  <code>=</code> は「〜を意味する」ということ。左辺の名前は右辺の式であると定義される。
変数は式に名前をつける手段。
</p>

 <blockquote>
 <p>
命令形言語を使ってきたのなら、変数は、異なる辞典で、異なる値を格納し得るメモリの番地(またはそれに類するもの)を特定する方法と考えるのが自然かもしれません。命令形言語では、いつでも変数の値を変更することが可能です。したがって、その変数のメモリ番地を確認するたびに違う結果になりえます。
変数に対する、この2つの概念には決定的な違いがあります。Haskellでは、式にいったん束縛した変数は、いつでも元の式に置き換えても良いのです。変数の値は変わらないからです。命令形言語はこの置き換え可能性を保持していません。
</p>
</blockquote>

 <div class="org-src-container">
 <pre class="src src-haskell">add a b = a + b
add 1 2
</pre>
</div>

 <div class="results" id="org45ccf1f">
 <p>

</p>

 <p>
3
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">drop 2 "foobar"
drop 4 "foobar"
drop 4 [1, 2]
drop 0 [1, 2]
drop 7 []
drop (-2) "foo"
</pre>
</div>

 <div class="results" id="org868e18d">
 <p>
obar
ar
[]
[1,2]
[]
foo
</p>

</div>
</div>
</div>
 <div id="outline-container-orgfd7c7c8" class="outline-3">
 <h3 id="orgfd7c7c8"> <a href="#orgfd7c7c8">myDrop関数</a></h3>
 <div class="outline-text-3" id="text-orgfd7c7c8">
 <p>
インデントによって既存の定義が継続する。
org-babelでは1行ごとで新しいセッションになってしまうよう。  <code>:{</code> と  <code>}:</code> を使って複数行評価されるようにする。
</p>

 <p>
変数名  <code>xs</code> は  <code>x</code> の複数形という意味。
</p>

 <p>
式指向のためelseが必須(elseに入ったとき結果や型がないという事態になるため)。
</p>
 <div class="org-src-container">
 <pre class="src src-haskell">:{
  myDrop n xs = if n <= 0 || null xs
                then xs
                else myDrop (n - 1) (tail xs)
:}

myDrop 2 "foobar"
myDrop 4 "foobar"
myDrop 4 [1, 2]
myDrop 0 [1, 2]
myDrop 7 []
myDrop(-2) "foo"
</pre>
</div>

 <div class="results" id="org0d376c4">
 <p>

</p>

 <p>
GHCi> “obar”
ar
[]
[1,2]
[]
foo
</p>

</div>

 <p>
論理演算子。
</p>
 <div class="org-src-container">
 <pre class="src src-haskell">:type null
:type (||)
</pre>
</div>

 <div class="results" id="org76dbb7a">
 <p>
null :: Foldable t => t a -> Prelude.Bool
(||) :: Prelude.Bool -> Prelude.Bool -> Prelude.Bool
</p>

</div>
</div>
</div>
 <div id="outline-container-org21de11e" class="outline-3">
 <h3 id="org21de11e"> <a href="#org21de11e">遅延評価</a></h3>
 <div class="outline-text-3" id="text-org21de11e">
 <p>
正格評価: 関数を適用する前に関数への引数を評価する。
 <b>非正格評価(遅延評価)</b>: 評価せず、値が必要になったとき計算する「プロミス」を作る。未評価の式を追跡するのに使うレコードを  <b>サンク</b> という。式の結果が使われないなら、値は計算されない。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">isOdd n = mod n 2 == 1
isOdd 3
</pre>
</div>

 <div class="results" id="org62f6ea4">
 <p>

</p>

 <p>
True
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">print (myDrop 2 "abcd")

:type 2 <= 0 || null "abcd"
null "abcd"
</pre>
</div>

 <div class="results" id="org8f5c4ff">
 <p>
cd
GHCi> 2 <= 0 || null “abcd” :: Prelude.Bool
False
</p>

</div>
</div>
</div>
 <div id="outline-container-orgd4facc8" class="outline-3">
 <h3 id="orgd4facc8"> <a href="#orgd4facc8">型変数</a></h3>
 <div class="outline-text-3" id="text-orgd4facc8">
 <div class="org-src-container">
 <pre class="src src-haskell">last [1,2,3]
last "baz"
:type last
</pre>
</div>

 <div class="results" id="org2ed53d3">
 <p>
3
’z’
last :: [a] -> a
</p>

</div>

 <p>
この  <code>a</code> が型変数。
型シグネチャに型変数を持つときには引数のいくつかはどのような型にでもなれることを示している。→ 多相的である。
</p>
</div>
</div>
 <div id="outline-container-org7071f7f" class="outline-3">
 <h3 id="org7071f7f"> <a href="#org7071f7f">多相関数</a></h3>
 <div class="outline-text-3" id="text-org7071f7f">
 <div class="org-src-container">
 <pre class="src src-haskell">:type fst
</pre>
</div>

 <div class="results" id="orgebc9d4b">
 <p>
fst :: (a, b) -> a
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">:type take
</pre>
</div>

 <div class="results" id="orgdbf109f">
 <p>
take :: Int -> [a] -> [a]
</p>

</div>

 <p>
これは実際にはこういうこと↓。
</p>

 <p>
 <code>take :: Int -> ([a] -> [a])</code>
</p>
</div>
</div>
 <div id="outline-container-org0c9880e" class="outline-3">
 <h3 id="org0c9880e"> <a href="#org0c9880e">純粋性</a></h3>
 <div class="outline-text-3" id="text-org0c9880e">
 <div class="org-src-container">
 <pre class="src src-haskell">:type not
</pre>
</div>

 <div class="results" id="orgfef3aee">
 <p>
not :: Prelude.Bool -> Prelude.Bool
</p>

</div>
</div>
</div>
 <div id="outline-container-org850e0c6" class="outline-3">
 <h3 id="org850e0c6"> <a href="#org850e0c6">型定義</a></h3>
 <div class="outline-text-3" id="text-org850e0c6">
 <p>
↓ BookInfoを  <code>型構成子</code> という。
続く Bookは  <code>値構成子</code> という。
Int, String, [String]は  <code>構成要素</code> という。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">:{
data BookInfo = Book Int String [String]
                deriving (Show)
:}
</pre>
</div>

 <div class="results" id="org725a180">

</div>

 <p>
同じ構造を持っていても、2つの型を区別する。型構成子と値構成子の名前が違うから。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">:{
data MagazineInfo = Magazine Int String [String]
                    deriving (Show)
:}
</pre>
</div>

 <div class="results" id="org619dbb6">

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">:info BookInfo

myInfo = Book 9780135072455 "Algebra of Programming" ["Richard Bird", "Oege de Moor"]
myInfo
:type myInfo
:type Book
</pre>
</div>

 <div class="results" id="org648f1cf">
 <p>
data BookInfo = Book Int String [String]
  – Defined at <interactive>:6313:1
instance [safe] Show BookInfo – Defined at <interactive>:6314:27
GHCi> GHCi> Book 9780135072455 “Algebra of Programming” [“Richard Bird”,“Oege de Moor”]
myInfo :: BookInfo
Book :: Int -> String -> [String] -> BookInfo
</p>

</div>
</div>
</div>
 <div id="outline-container-org63336f0" class="outline-3">
 <h3 id="org63336f0"> <a href="#org63336f0">型シノニム</a></h3>
 <div class="outline-text-3" id="text-org63336f0">
 <p>
型シノニムはコードを読みやすくするだけのもの。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">type CustomerID = Int
type ReviewBody = String
data BetterReview = BetterReview BookInfo CustomerID ReviewBody
</pre>
</div>

 <div class="results" id="org1ca0ff2">

</div>
</div>
</div>
 <div id="outline-container-org591a547" class="outline-3">
 <h3 id="org591a547"> <a href="#org591a547">代数データ型</a></h3>
 <div class="outline-text-3" id="text-org591a547">
 <p>
値構成子が2つある。  <b>選択肢</b> あるいは  <b>ケース</b> という。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">data Bool = False | True
</pre>
</div>

 <div class="results" id="orga3d99c3">

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">type CardHolder = String
type CardNumber = String
type Address = [String]

:{
data BillingInfo = CreditCard CardNumber CardHolder Address
                   | CashOnDelivery
                   | Invoice CustomerID
                     deriving (Show)
:}
:info BillingInfo
</pre>
</div>

 <div class="results" id="org87f0bff">
 <p>

</p>

 <p>
GHCi> GHCi> GHCi> Prelude Data.Char Data.List Data.Char Data.Char| Prelude Data.Char Data.List Data.Char Data.Char| Prelude Data.Char Data.List Data.Char Data.Char| Prelude Data.Char Data.List Data.Char Data.Char| Prelude Data.Char Data.List Data.Char Data.Char| GHCi> data BillingInfo
  = CreditCard CardNumber CardHolder Address
</p>
 <table> <colgroup> <col class="org-left"></col></colgroup> <tbody> <tr> <td class="org-left">CashOnDelivery</td>
</tr> <tr> <td class="org-left">Invoice CustomerID</td>
</tr></tbody></table> <p>
  – Defined at <interactive>:6340:1
instance [safe] Show BillingInfo
  – Defined at <interactive>:6343:32
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">:type CreditCard
CreditCard "2901650221064486" "Thomas Gradgrind"  ["Dickens", "England"]
</pre>
</div>

 <div class="results" id="orgb09d43c">
 <p>
CreditCard :: CardNumber -> CardHolder -> Address -> BillingInfo
CreditCard “2901650221064486” “Thomas Gradgrind” [“Dickens”,“England”]
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">:type it
</pre>
</div>

 <div class="results" id="org1431864">
 <p>
it :: [Char]
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">:type Invoice
Invoice 2222
</pre>
</div>

 <div class="results" id="orgdba8796">
 <p>
Invoice :: CustomerID -> BillingInfo
Invoice 2222
</p>

</div>
</div>
</div>
 <div id="outline-container-orge93dfd9" class="outline-3">
 <h3 id="orge93dfd9"> <a href="#orge93dfd9">タプルと代数データ型</a></h3>
 <div class="outline-text-3" id="text-orge93dfd9">
 <div class="org-src-container">
 <pre class="src src-haskell">Book 2 "The Wealth of Networks" ["Yochai Benkler"]
(2, "The Wealth of Networks", ["Yochai Benkler"])
</pre>
</div>

 <div class="results" id="orgc5290d3">
 <p>
Book 2 “The Wealth of Networks” [“Yochai Benkler”]
(2,“The Wealth of Networks”,[“Yochai Benkler”])
</p>

</div>

 <p>
↓構造的に同一なので同じ型。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">a = ("Porpoise", "Gray")
b = ("Table", "Oak")
</pre>
</div>

 <div class="results" id="org9991644">

</div>

 <p>
↓別の名前なので別の型。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">data Cetacean = Cetacean String String
data Furniture = Furniture String String

c = Cetacean "Porpoise" "Gray"
d = Furniture "Table" "Oak"
</pre>
</div>

 <div class="results" id="org01c557c">

</div>

 <p>
座標。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">:{
-- x, yの座標
data Cartesian2D = Cartesian2D Double Double
                   deriving (Eq, Show)

-- 偏角と長さ
data Polar2D = Polar2D Double Double
               deriving (Eq, Show)
:}
</pre>
</div>

 <div class="results" id="org60c9da8">

</div>

 <p>
 <code>==</code> 演算子は引数が同じ型でないといけないのでエラー。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">Cartesian2D (sqrt 2) (sqrt 2) == Polar2D (pi / 4) 2
</pre>
</div>

 <div class="results" id="org6c004d5">
 <p>
In an equation for ‘it’:
          it = Cartesian2D (sqrt 2) (sqrt 2) == Polar2D (pi / 4) 2
</p>

</div>

 <p>
タプルの場合判断しようがないのでチェックが効かない。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">(1, 2) == (1, 2)
</pre>
</div>

 <div class="results" id="org2065aa0">
 <p>
True
</p>

</div>

 <ul class="org-ul"> <li>複合型をコードの中で広く使う場合には  <code>data</code> 宣言を使う</li>
 <li>規模が小さく、局所的にしか使わない場合はタプルでいい</li>
</ul></div>
</div>
 <div id="outline-container-org7166289" class="outline-3">
 <h3 id="org7166289"> <a href="#org7166289">他の言語との類似</a></h3>
 <div class="outline-text-3" id="text-org7166289">
 <div class="org-src-container">
 <pre class="src src-C"> <span class="org-keyword">struct</span>  <span class="org-type">book_info</span> {
   <span class="org-type">int</span>  <span class="org-variable-name">id</span>;
   <span class="org-type">char</span> * <span class="org-variable-name">name</span>;
   <span class="org-type">char</span> ** <span class="org-variable-name">authors</span>;
};
</pre>
</div>

 <div class="results" id="orgb27b167">

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">:{
data BookInfo = Book Int String [String]
                  deriving (Show)
:}
</pre>
</div>

 <div class="results" id="org3b961b2">

</div>
</div>
</div>
 <div id="outline-container-org166cfdc" class="outline-3">
 <h3 id="org166cfdc"> <a href="#org166cfdc">列挙型</a></h3>
 <div class="outline-text-3" id="text-org166cfdc">
 <p>
 <a href="20210911104632-c_language.html#ID-656a0aa4-e5d3-416f-82d5-f909558d0639">C言語</a>ではこう書く。
</p>

 <div class="org-src-container">
 <pre class="src src-C"> <span class="org-keyword">enum</span>  <span class="org-type">roygbiv</span> {
   <span class="org-variable-name">red</span>,
   <span class="org-variable-name">orange</span>,
   <span class="org-variable-name">yellow</span>,
   <span class="org-variable-name">green</span>,
   <span class="org-variable-name">blue</span>,
   <span class="org-variable-name">indigo</span>,
   <span class="org-variable-name">violet</span>,
};
</pre>
</div>

 <div class="results" id="orga2cfc08">

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">:{
data Roygbiv = Red
             | Orange
             | Yellow
             | Green
             | Blue
             | Indigo
             | Violet
               deriving (Eq, Show)
:}
:type Yellow
:type Red
Red == Yellow
Green == Green
</pre>
</div>

 <div class="results" id="org75cc085">
 <p>

</p>

 <p>
Yellow :: Roygbiv
Red :: Roygbiv
False
True
</p>

</div>

 <p>
haskellのenumは型が厳密。
</p>
 <div class="org-src-container">
 <pre class="src src-haskell">take 3 "foobar"
take Red "foobar"
</pre>
</div>

 <div class="results" id="org3993113">
 <p>
foo
<interactive>:6405:6-8: error:
    • Couldn’t match expected type ‘Int’ with actual type ‘Roygbiv’
    • In the first argument of ‘take’, namely ‘Red’
      In the expression: take Red “foobar”
      In an equation for ‘it’: it = take Red “foobar”
</p>

</div>
</div>
</div>
 <div id="outline-container-orgc9f3b3c" class="outline-3">
 <h3 id="orgc9f3b3c"> <a href="#orgc9f3b3c">union</a></h3>
 <div class="outline-text-3" id="text-orgc9f3b3c">
 <p>
代数データ型が複数の選択肢を持つ場合は <a href="20210911104632-c_language.html#ID-656a0aa4-e5d3-416f-82d5-f909558d0639">C言語</a>の  <code>union</code> と同じ。
</p>
 <div class="org-src-container">
 <pre class="src src-haskell">type Vector = (Double, Double)
:{
data Shape = Circle Vector Double
           | Poly [Vector]
:}
:info Shape
</pre>
</div>

 <div class="results" id="org9eead1b">
 <p>

</p>

 <p>
GHCi> data Shape = Circle Vector Double | Poly [Vector]
– Defined at <interactive>:6409:1
</p>

</div>
</div>
</div>
 <div id="outline-container-org0c3fa97" class="outline-3">
 <h3 id="org0c3fa97"> <a href="#org0c3fa97">パターンマッチ</a></h3>
 <div class="outline-text-3" id="text-org0c3fa97">
 <p>
↓2つの関数というわけではない。
同一関数の異なる入力パターンに対する振る舞いを定義している。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">myNot True = False
myNot False = True
</pre>
</div>

 <div class="results" id="orgb660722">

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">sumList (x:xs) = x + sumList xs
sumList [] = 0

sum [1,2]
</pre>
</div>

 <div class="results" id="orgf659618">
 <p>

</p>

 <p>
GHCi> 3
</p>

</div>

 <p>
タプルのパターンマッチ。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">complicated (True, a, x:xs, 5) = (a, xs)
complicated (True, 1, [1,2,3], 5)
</pre>
</div>

 <div class="results" id="org843cee7">
 <p>

</p>

 <p>
(1,[2,3])
</p>

</div>

 <p>
ぴったり一致しないと成功しない。
すべてのパターンマッチが失敗すると実行時エラー。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">complicated (False, 1, [1,2,3], 5)
</pre>
</div>

 <div class="results" id="org40af762">
 <pre class="example">
*** Exception: <interactive>:1963:1-40: Non-exhaustive patterns in function complicated
</pre>

</div>
</div>
</div>
 <div id="outline-container-orga64663b" class="outline-3">
 <h3 id="orga64663b"> <a href="#orga64663b">Exception: <interactive>:6422:1-40: Non-exhaustive patterns in function complicated</a></h3>
 <div class="outline-text-3" id="text-orga64663b">
 <p>
BookInfo型の場合。
パターンマッチをセット。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">bookID (Book id title authors) = id
bookTitle (Book id title authors) = title
bookAuthors (Book id title authors) = authors
</pre>
</div>

 <div class="results" id="org9450389">

</div>

 <p>
アクセスできる。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">bookID (Book 3 "Probability Theory" ["E.T.H. Jaynes"])
bookTitle (Book 3 "Probability Theory" ["E.T.H. Jaynes"])
bookAuthors (Book 3 "Probability Theory" ["E.T.H. Jaynes"])
</pre>
</div>

 <div class="results" id="orgedb745f">
 <p>
3
Probability Theory
[“E.T.H. Jaynes”]
</p>

</div>

 <p>
構成子に基づいて、アクセサ関数の型を推論できる。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">:type bookID
:type bookTitle
:type bookAuthors
</pre>
</div>

 <div class="results" id="org6994040">
 <p>
bookID :: BookInfo -> Int
bookTitle :: BookInfo -> String
bookAuthors :: BookInfo -> [String]
</p>

</div>
</div>
</div>
 <div id="outline-container-org2768e9d" class="outline-3">
 <h3 id="org2768e9d"> <a href="#org2768e9d">ワイルドカード</a></h3>
 <div class="outline-text-3" id="text-org2768e9d">
 <p>
この類のコードをボイラープレートという。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">nicerID (Book id _ _ ) = id
nicerTitle (Book _ title _) = title
nicerAuthors (Book _ _ authors) = authors
</pre>
</div>

 <div class="results" id="orgc8c3148">

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">goodExample (x:xs) = x + goodExample xs
goodExample _ = 0
goodExample []
goodExample [1, 2]
</pre>
</div>

 <div class="results" id="orgc25a9df">
 <p>

</p>

 <p>
GHCi> 0
0
</p>

</div>
</div>
</div>
 <div id="outline-container-org7c0ff9b" class="outline-3">
 <h3 id="org7c0ff9b"> <a href="#org7c0ff9b">レコード構文</a></h3>
 <div class="outline-text-3" id="text-org7c0ff9b">
 <div class="org-src-container">
 <pre class="src src-haskell">:{
  data Customer = Customer {
     customerID :: CustomerID
   , customerName :: String
   , customerAddress :: Address
     } deriving (Show)
:}
:type customerID
</pre>
</div>

 <div class="results" id="org26da036">
 <p>

</p>

 <p>
customerID :: Customer -> CustomerID
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">:{
customer2 = Customer {
    customerID = 271828
  , customerAddress = ["1048576 Disk Drive",
                      "Milpitas, CA 95134",
                      "USA"]
  , customerName = "Jane Q. Citizen"
  }
:}
customer2
cities
</pre>
</div>

 <div class="results" id="orgf100823">
 <p>

</p>

 <p>
Customer {customerID = 271828, customerName = “Jane Q. Citizen”, customerAddress = [“1048576 Disk Drive”,“Milpitas, CA 95134”,“USA”]}
Book 173 “Use of weapons” [“Iain M. Banks”]
</p>

</div>

 <p>
レコード構文によって使えるアクセサ関数は、通常のHaskellの関数。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">:type customerName
customerName customer2
</pre>
</div>

 <div class="results" id="org6658cbd">
 <p>
customerName :: Customer -> String
Jane Q. Citizen
</p>

</div>
</div>
</div>
 <div id="outline-container-org3e37130" class="outline-3">
 <h3 id="org3e37130"> <a href="#org3e37130">パラメータ化された型</a></h3>
 <div class="outline-text-3" id="text-org3e37130">
 <p>
独自に定義する型も多相型にできる。型宣言に型変数を導入する。
</p>

 <p>
↓この変数は型変数。
</p>
 <div class="org-src-container">
 <pre class="src src-haskell">:{
data Maybe a = Just a
             | Nothing
:}
:info Maybe
</pre>
</div>

 <div class="results" id="org2fdcbc9">
 <p>

</p>

 <p>
data Maybe a = Just a | Nothing – Defined at <interactive>:6475:1
</p>

</div>

 <p>
これによって任意の型上の  <code>Maybe</code> 型を使える。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">someBool = Just True
:type someBool
someString = Just "something"
:type someString
:type Just "Invisible bike"
</pre>
</div>

 <div class="results" id="orge3b40bb">
 <p>
someBool :: Maybe Bool
GHCi> someString :: Maybe [Char]
Just “Invisible bike” :: Maybe [Char]
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">wrapped = Just (Just "wrapped")
:type wrapped
</pre>
</div>

 <div class="results" id="org50efbf5">
 <p>

</p>

 <p>
wrapped :: Maybe (Maybe [Char])
</p>

</div>
</div>
</div>
 <div id="outline-container-org7904c17" class="outline-3">
 <h3 id="org7904c17"> <a href="#org7904c17">再帰型</a></h3>
 <div class="outline-text-3" id="text-org7904c17">
 <p>
リスト型は再帰型。定義に自身が含まれる。
</p>
 <div class="org-src-container">
 <pre class="src src-haskell">:{
data List a = Cons a (List a)
            | Nil
              deriving (Show)
:}
</pre>
</div>

 <div class="results" id="org1f8fe68">

</div>

 <p>
確かめる。
</p>
 <div class="org-src-container">
 <pre class="src src-haskell">Nil
Cons 0 Nil
Cons 1 it
Cons 2 it
Cons 3 it
</pre>
</div>

 <div class="results" id="org2249a04">
 <p>
Nil
Cons 0 Nil
Cons 1 (Cons 0 Nil)
Cons 2 (Cons 1 (Cons 0 Nil))
Cons 3 (Cons 2 (Cons 1 (Cons 0 Nil)))
</p>

</div>

 <p>
二分木。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">:{
data Tree a = Node a (Tree a) (Tree a)
            | Empty
              deriving (Show)
:}
</pre>
</div>

 <div class="results" id="org057579c">

</div>

 <p>
本と違ってなぜかエラーになる。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">fromList (x:xs) = Cons x (fromList xs)
fromList [] = Nil
fromList "durian"
fromList [Just True, Nothing, Just False]
</pre>
</div>

 <div class="results" id="orgdc4ddce">
 <p>
GHCi>  <b>*</b> Exception: <interactive>:6518:1-17: Non-exhaustive patterns in function fromList
Exception: <interactive>:6518:1-17: Non-exhaustive patterns in function fromList
</p>

</div>

 <p>
 <a href="20211007104541-java.html#ID-9fa3711b-a22e-4cf5-ae97-5c057083674a">Java</a>の例(クラス定義)。
</p>
 <div class="org-src-container">
 <pre class="src src-java"> <span class="org-keyword">class</span>  <span class="org-type">Tree</span>< <span class="org-type">A</span>>
{
     <span class="org-type">A</span>  <span class="org-variable-name">value</span>;
     <span class="org-type">Tree</span>< <span class="org-type">A</span>>  <span class="org-variable-name">left</span>;
     <span class="org-type">Tree</span>< <span class="org-type">B</span>>  <span class="org-variable-name">right</span>;

     <span class="org-keyword">public</span>  <span class="org-function-name">Tree</span>( <span class="org-type">A</span>  <span class="org-variable-name">v</span>,  <span class="org-type">Tree</span>< <span class="org-type">A</span>>  <span class="org-variable-name">l</span>,  <span class="org-type">Tree</span>< <span class="org-type">A</span>>  <span class="org-variable-name">r</span>)
    {
        value = v;
        left = l;
        right = r;
    }
}
</pre>
</div>

 <p>
葉を構成する関数。
</p>

 <div class="org-src-container">
 <pre class="src src-java"> <span class="org-keyword">class</span>  <span class="org-type">Example</span>
{
     <span class="org-keyword">static</span>  <span class="org-type">Tree</span>< <span class="org-type">String</span>>  <span class="org-function-name">simpleTree</span>()
    {
         <span class="org-keyword">return</span>  <span class="org-keyword">new</span>  <span class="org-type">Tree</span>< <span class="org-type">String</span>>(
                                 <span class="org-string">"parent"</span>,
                                 <span class="org-keyword">new</span>  <span class="org-type">Tree</span>< <span class="org-type">String</span>>( <span class="org-string">"left leaf"</span>,  <span class="org-constant">null</span>,  <span class="org-constant">null</span>),
                                 <span class="org-keyword">new</span>  <span class="org-type">Tree</span>< <span class="org-type">String</span>>( <span class="org-string">"right leaf"</span>,  <span class="org-constant">null</span>,  <span class="org-constant">null</span>));
    }
}
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-haskell">:{
simpleTree = Node "parent" (Node "left child" Empty Empty)
                           (Node "right child" Empty Empty)
:}
:type simpleTree
</pre>
</div>

 <div class="results" id="org2ab9ef4">
 <p>

</p>

 <p>
simpleTree :: Tree [Char]
</p>

</div>
</div>
</div>
 <div id="outline-container-org397859d" class="outline-3">
 <h3 id="org397859d"> <a href="#org397859d">エラー報告表示</a></h3>
 <div class="outline-text-3" id="text-org397859d">
 <p>
listの要素が1つのときはエラー表示を出す。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">:{
mySecond :: [a] -> a
mySecond xs = if null (tail xs)
              then error ("list too short")
              else head (tail xs)
:}
mySecond "xi"
mySecond [2, 3]
mySecond [2]
</pre>
</div>

 <div class="results" id="orge25e9cb">
 <p>
’i’
3
Exception: list too short
CallStack (from HasCallStack):
  error, called at <interactive>:6531:20 in interactive:Ghci3189
</p>

</div>

 <p>
ちゃんとエラーメッセージが出ている。
</p>
</div>
</div>
 <div id="outline-container-org8c59f88" class="outline-3">
 <h3 id="org8c59f88"> <a href="#org8c59f88">エラーの可能性, Maybe</a></h3>
 <div class="outline-text-3" id="text-org8c59f88">
 <div class="org-src-container">
 <pre class="src src-haskell">:{
safeSecond :: [a] -> Maybe a
safeSecond [] = Nothing
safeSecond xs = if null (tail xs)
                then Nothing
                else Just (head (tail xs))
:}
safeSecond [1,2] -- なぜかできない。
</pre>
</div>

 <div class="results" id="org711eb78">
 <p>

</p>

 <p>
<interactive>:6545:1-16: error:
    • No instance for (Show (Maybe Integer))
        arising from a use of ‘print’
      There are instances for similar types:
        instance Show a => Show (Prelude.Maybe a) – Defined in ‘GHC.Show’
    • In a stmt of an interactive GHCi command: print it
</p>

</div>

 <p>
パターンマッチを使って改善。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">tidySecond :: [a] -> Maybe a

tidySecond (_:x:_) = Just x
tidySecond _       = Nothing
</pre>
</div>

 <div class="results" id="orge3dbeff">

</div>
</div>
</div>
 <div id="outline-container-orga0a7705" class="outline-3">
 <h3 id="orga0a7705"> <a href="#orga0a7705">局所変数</a></h3>
 <div class="outline-text-3" id="text-orga0a7705">
 <div class="org-src-container">
 <pre class="src src-haskell">:{
lend amount balance = let reserve = 100
                          newBalance = balance - amount
                      in if balance < reserve
                         then Nothing
                         else Just newBalance
:}
</pre>
</div>

 <div class="results" id="org15fede6">

</div>
</div>
</div>
 <div id="outline-container-org608307d" class="outline-3">
 <h3 id="org608307d"> <a href="#org608307d">シャドウ</a></h3>
 <div class="outline-text-3" id="text-org608307d">
 <p>
内側の  <code>x</code> が外側の  <code>x</code> を隠す。
</p>
 <div class="org-src-container">
 <pre class="src src-haskell">:{
bar = let x = 1
      in ((let x = "foo" in x), x)
:}
bar
</pre>
</div>

 <div class="results" id="orgd96d4da">
 <p>

</p>

 <p>
(“foo”,1)
</p>

</div>
</div>
</div>
 <div id="outline-container-org930ab98" class="outline-3">
 <h3 id="org930ab98"> <a href="#org930ab98">where節</a></h3>
 <div class="outline-text-3" id="text-org930ab98">
 <div class="org-src-container">
 <pre class="src src-haskell">:{
lend2 amount balance = if amount < reserve * 0.5
                       then Just newBalance
                       else Nothing
      where reserve  = 100
            newBalance = balance - amount
:}
</pre>
</div>

 <div class="results" id="orgd809cf7">

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">:{
pluralise :: String -> [Int] -> [String]
pluralise word counts = map plural counts
    where plural 0 = "no " ++ word ++ "s"
          plural 1 = "one " ++ word
          plural n = show n ++ " " ++ word ++ "s"
:}
pluralise "car" [0]
pluralise "car" [1]
pluralise "car" [2]
</pre>
</div>

 <div class="results" id="org9b3d18f">
 <p>

</p>

 <p>
[“no cars”]
[“one car”]
[“2 cars”]
</p>

</div>
</div>
</div>
 <div id="outline-container-org580c6e9" class="outline-3">
 <h3 id="org580c6e9"> <a href="#org580c6e9">case式</a></h3>
 <div class="outline-text-3" id="text-org580c6e9">
 <div class="org-src-container">
 <pre class="src src-haskell">:{
fromMaybe defval wrapped =
  case wrapped of
    Nothing -> defval
    Just value -> value
:}
</pre>
</div>

 <div class="results" id="orgfc9b3f1">

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">:{
  data Fruit = Apple | Orange
  betterFruit f = case f of
                  "apple" -> Apple
                  "orange" -> Orange
:}
</pre>
</div>

 <div class="results" id="orgebecffe">

</div>
</div>
</div>
 <div id="outline-container-org2e64295" class="outline-3">
 <h3 id="org2e64295"> <a href="#org2e64295">ガード</a></h3>
 <div class="outline-text-3" id="text-org2e64295">
 <div class="org-src-container">
 <pre class="src src-haskell">:{
nodesAreSame (Node a _ _) (Node b _ _)
    | a == b     = Just a
nodesAreSame _ _ = Nothing
:}
</pre>
</div>

 <div class="results" id="org3fb56b4">

</div>

 <p>
lend関数を書き直す。
</p>
 <div class="org-src-container">
 <pre class="src src-haskell">:{
lend3 amount balance
     | amount <= 0            = Nothing
     | amount > reserve * 0.5 = Nothing
     | otherwise              = Just newBalance
    where reserve    = 100
          newBalance = balance - amount
:}
</pre>
</div>

 <div class="results" id="org74b47e8">

</div>

 <p>
myDrop関数を書き直す。
元コード。
</p>
 <div class="org-src-container">
 <pre class="src src-haskell">:{
myDrop n xs = if n <= 0 || null xs
              then xs
              else myDrop (n - 1) (tail xs)
 :}
myDrop 2 "abcd"
</pre>
</div>

 <div class="results" id="org48cd0f6">
 <p>

</p>

 <p>
cd
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">:{
niceDrop n xs | n <= 0 = xs
niceDrop _ []          = []
niceDrop n (_:xs)      = niceDrop (n - 1) xs
:}
niceDrop 2 "abcd"
</pre>
</div>

 <div class="results" id="org2e91120">
 <p>

</p>

 <p>
cd
</p>

</div>
</div>
</div>
 <div id="outline-container-org1fa9c70" class="outline-3">
 <h3 id="org1fa9c70"> <a href="#org1fa9c70">テキスト行分割</a></h3>
 <div class="outline-text-3" id="text-org1fa9c70">
 <div class="org-src-container">
 <pre class="src src-haskell">:type lines
lines "line 1\nline 2"
lines "foo\n\nbar\n"
</pre>
</div>

 <div class="results" id="org53e24be">
 <p>
lines :: String -> [String]
[“line 1”,“line 2”]
[“foo”,“”,“bar”]
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">break odd [2,4,5,6,8]
:module +Data.Char
break isUpper "isUpper"
</pre>
</div>

 <div class="results" id="orge9ad7d8">
 <p>
([2,4],[5,6,8])
GHCi> (“is”,“Upper”)
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">:{
  a `plus` b = a + b
  data a `Pair` b = a `Pair` b
             deriving (Show)
  foo = Pair 1 2
  bar = True `Pair` "quux"
:}
1 `plus` 2
plus 1 2
Pair "a" "a"
"a" `Pair` "a"
</pre>
</div>

 <div class="results" id="org2af2054">
 <p>

</p>

 <p>
3
3
a“ `Pair` ”a
a“ `Pair` ”a
</p>

</div>
</div>
</div>
 <div id="outline-container-orgbcff317" class="outline-3">
 <h3 id="orgbcff317"> <a href="#orgbcff317">リストの処理</a></h3>
 <div class="outline-text-3" id="text-orgbcff317">
 <div class="org-src-container">
 <pre class="src src-haskell">:type length
length []
length [1,2,3]
null []
head [1,2]
tail "foo"
last "bar"
</pre>
</div>

 <div class="results" id="org93063f3">
 <p>
length :: Foldable t => t a -> Int
0
3
True
1
oo
’r’
</p>

</div>

 <p>
連結関数。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">:type (++)
"foo" ++ "bar"
[] ++ [1,2,3]
[1] ++ []
</pre>
</div>

 <div class="results" id="orgd29d8cf">
 <p>
(++) :: [a] -> [a] -> [a]
foobar
[1,2,3]
[1]
</p>

</div>

 <p>
 <code>concat</code> 連結して1つのリストにする。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">:type concat
concat [[1,2,3], [4,5,6]]
concat [[[1,2],[3]], [[4],[5],[6]]]
concat (concat [[1,2],[3]], [[4],[5],[6]])
</pre>
</div>

 <div class="results" id="orgb890e5a">
 <p>
concat :: Foldable t => t [a] -> [a]
[1,2,3,4,5,6]
[[1,2],[3],[4],[5],[6]]
[[4],[5],[6]]
</p>

</div>

 <p>
 <code>reverse</code> 逆順にする。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">:type reverse
reverse "foo"
</pre>
</div>

 <div class="results" id="org2016231">
 <p>
reverse :: [a] -> [a]
oof
</p>

</div>

 <p>
便利な条件判定、  <code>all</code> と  <code>any</code> 。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">:type all
all odd [1,3,5]
all odd [3,1,4]
all odd []
:type any
any even [3,1,4]
any even []
</pre>
</div>

 <div class="results" id="orgefb1adf">
 <p>
all :: Foldable t => (a -> Prelude.Bool) -> t a -> Prelude.Bool
True
False
True
any :: Foldable t => (a -> Prelude.Bool) -> t a -> Prelude.Bool
True
False
</p>

</div>

 <p>
部分リスト。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">:type take
take 3 "foobar"
take 2 [1]
:type drop
drop 3 "xyzzy"
drop 1 []
</pre>
</div>

 <div class="results" id="org1ae7754">
 <p>
take :: Int -> [a] -> [a]
foo
[1]
drop :: Int -> [a] -> [a]
zy
[]
</p>

</div>

 <p>
 <code>splitAt</code> インデックスで分割したリストのペアを返す。
</p>
 <div class="org-src-container">
 <pre class="src src-haskell">:type splitAt
splitAt 3 "foobar"
</pre>
</div>

 <div class="results" id="org7c4f962">
 <p>
splitAt :: Int -> [a] -> ([a], [a])
(“foo”,“bar”)
</p>

</div>

 <p>
 <code>span</code> 条件に合うもの、以外でリストを返す。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">:type span
span even [2,4,6,7,9,10,11]
:type break
break even [1,3,5,6,8,9,10]
</pre>
</div>

 <div class="results" id="org8d2e6ff">
 <p>
span :: (a -> Prelude.Bool) -> [a] -> ([a], [a])
([2,4,6],[7,9,10,11])
break :: (a -> Prelude.Bool) -> [a] -> ([a], [a])
([1,3,5],[6,8,9,10])
</p>

</div>

 <p>
 <code>elem</code> 値がリスト中に存在するか示す。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">:type elem
2 `elem` [5,3,2,1,1]
2 `notElem` [5,3,2,1,1]
</pre>
</div>

 <div class="results" id="org2af5fa1">
 <p>
elem :: (Foldable t, Eq a) => a -> t a -> Prelude.Bool
True
False
</p>

</div>

 <p>
 <code>filter</code> 条件に合うリストを返す。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">:type filter
 filter odd [2,4,1,3,6,8,5,7]
</pre>
</div>

 <div class="results" id="org0e91cfb">
 <p>
filter :: p -> [a1] -> [a2]
Exception: <interactive>:4825:1-16: Non-exhaustive patterns in function filter
</p>

</div>

 <p>
 <code>isPrefixOf</code> 部分リストがより大きなリストの中にあるか調べる。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">:module +Data.List
:type isPrefixOf
"foo" `isPrefixOf` "foobar"
[1,2] `isPrefixOf` []
</pre>
</div>

 <div class="results" id="orgd76f9ed">
 <p>

</p>

 <p>
isPrefixOf :: Eq a => [a] -> [a] -> Prelude.Bool
True
False
</p>

</div>

 <p>
 <code>zip</code> 2つのリストをペアのリストにする。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">:type zip
zip [12,72,93] "zippity"
</pre>
</div>

 <div class="results" id="org538c9a8">
 <p>
zip :: [a] -> [b] -> [(a, b)]
[(12,’z’),(72,’i’),(93,’p’)]
</p>

</div>

 <p>
 <code>zipWith</code> 2つのリストのペアごとに関数を適用する。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">:type zipWith
zipWith (+) [1,2,3] [4,5,6]
</pre>
</div>

 <div class="results" id="orge496ed7">
 <p>
zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
[5,7,9]
</p>

</div>

 <p>
可変長引数はHaskellの型システムのうえでは難しい。
複数のリストを閉じ合わせるには  <code>zip3</code> 〜  <code>zip7`</code> を使う。
</p>
</div>
</div>
 <div id="outline-container-orgd37bfff" class="outline-3">
 <h3 id="orgd37bfff"> <a href="#orgd37bfff">リストのいけてる扱い方</a></h3>
 <div class="outline-text-3" id="text-orgd37bfff">
 <p>
haskellにおいてはほかの言語と同じように、扱えない部分がある。
 <code>length</code> はリスト全体を辿らないといけないが、無限リストである可能性がある。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">:{
  mySmartExample xs = if not (null xs)
                      then head xs
                      else 'Z'
  myOtherExample (x:_) = x
  myOtherExample [] = 'Z'
:}
mySmartExample "head"
mySmartExample []
</pre>
</div>

 <div class="results" id="org993a141">
 <p>

</p>

 <p>
’h’
’Z’
</p>

</div>
</div>
</div>
 <div id="outline-container-org1d19779" class="outline-3">
 <h3 id="org1d19779"> <a href="#org1d19779">部分関数</a></h3>
 <div class="outline-text-3" id="text-org1d19779">
 <p>
正当な入力の部分集合の値に対してのみ値を返す関数のことを部分関数という。
入力の全定義域に対して正しい結果を返す関数のことを全関数という。
</p>
</div>
</div>
 <div id="outline-container-orgc0dd43c" class="outline-3">
 <h3 id="orgc0dd43c"> <a href="#orgc0dd43c">文字列専用の関数</a></h3>
 <div class="outline-text-3" id="text-orgc0dd43c">
 <div class="org-src-container">
 <pre class="src src-haskell">lines "foo\nbar"
unlines ["foo", "bar"]
</pre>
</div>

 <div class="results" id="org5e1a912">
 <p>
[“foo”,“bar”]
foo\nbar\n
</p>

</div>

 <p>
 <code>words</code> は入力文字を任意の空白で区切る。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">words "the \r quick \t brown\n\n\nfox"
unwords ["jumps", "over", "the", "lazy", "dog"]
</pre>
</div>

 <div class="results" id="org650c9c1">
 <p>
[“the”,“quick”,“brown”,“fox”]
jumps over the lazy dog
</p>

</div>
</div>
</div>
 <div id="outline-container-org78e2398" class="outline-3">
 <h3 id="org78e2398"> <a href="#org78e2398">ループ</a></h3>
 <div class="outline-text-3" id="text-org78e2398">
 <p>
Haskellには、  <code>for</code> ループ、  <code>while</code> ループはない。
</p>

 <p>
 <a href="20210911104632-c_language.html#ID-656a0aa4-e5d3-416f-82d5-f909558d0639">C言語</a>の例。
こんなふうにはできないので末尾再帰を使う。
</p>

 <div class="org-src-container">
 <pre class="src src-C"> <span class="org-type">int</span>  <span class="org-function-name">as_int</span>( <span class="org-type">char</span> * <span class="org-variable-name">str</span>)
{
   <span class="org-type">int</span>  <span class="org-variable-name">acc</span>;
   <span class="org-keyword">for</span> (acc = 0; isdigit(*str); str++) {
    acc = acc * 10 + (*str -  <span class="org-string">'0'</span>);
  }

   <span class="org-keyword">return</span> acc;
}
</pre>
</div>

 <div class="results" id="org615bbb1">

</div>

 <p>
配列の中のすべての要素を2乗する。
</p>

 <div class="org-src-container">
 <pre class="src src-C"> <span class="org-type">void</span>  <span class="org-function-name">square</span>( <span class="org-type">double</span> * <span class="org-variable-name">out</span>,  <span class="org-keyword">const</span>  <span class="org-type">double</span> * <span class="org-variable-name">in</span>,  <span class="org-type">size_t</span>  <span class="org-variable-name">length</span>)
{
   <span class="org-keyword">for</span> ( <span class="org-type">size_t</span>  <span class="org-variable-name">i</span> = 0; i < length; i++) {
    out[i] = in[i] * in[i];
  }
}
</pre>
</div>

 <div class="results" id="orgd1c1311">

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">:{
 square :: [Double] -> [Double]
 square (x:xs) = x*x : square xs
 square []     = []
:}
square [1,2]
square []
</pre>
</div>

 <div class="results" id="org334dd0e">
 <p>

</p>

 <p>
[1.0,4.0]
[]
</p>

</div>

 <p>
大文字化。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">:{
upperCase :: String -> String

upperCase (x:xs) = toUpper x : upperCase xs
upperCase []     = []
:}
upperCase "hello"
</pre>
</div>

 <div class="results" id="org2537083">
 <p>

</p>

 <p>
HELLO
</p>

</div>

 <p>
 <code>map</code> は関数を引数としてとり、リストのすべての要素に適用する。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">upperCase2 xs = map toUpper xs
upperCase2 "hello"
</pre>
</div>

 <div class="results" id="org8a3564e">
 <p>

</p>

 <p>
HELLO
</p>

</div>

 <p>
 <code>map</code> を書き直してみる。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">:{
  myMap :: (a -> b) -> [a] -> [b]
  myMap f (x:xs) = f x : myMap f xs
  myMap _ _      = []
:}
  upperCase3 xs = myMap toUpper xs
  upperCase3 "hello"
</pre>
</div>

 <div class="results" id="orga4c6da8">
 <p>

</p>

 <p>
GHCi> “HELLO”
</p>

</div>
</div>
</div>
 <div id="outline-container-orgc940264" class="outline-3">
 <h3 id="orgc940264"> <a href="#orgc940264">フィルター</a></h3>
 <div class="outline-text-3" id="text-orgc940264">
 <div class="org-src-container">
 <pre class="src src-haskell">:{
oddList :: [Int] -> [Int]

oddList (x:xs) | odd x = x : oddList xs
               | otherwise = oddList xs
oddList _                  = []
:}
oddList [1,2,3,4,5,6,7,8,9,10]
</pre>
</div>

 <div class="results" id="org431d6e4">
 <p>

</p>

 <p>
[1,3,5,7,9]
</p>

</div>

 <p>
 <code>helper</code> は末尾再帰の関数で、蓄積変数  <code>acc</code> を使ってリストのその時点での部分和を保持する。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">:{
mySum xs = helper 0 xs
  where helper acc (x:xs) = helper (acc + x) xs
        helper acc _      = acc
:}
mySum [1,2,3,4]
</pre>
</div>

 <div class="results" id="orgd36c941">
 <p>

</p>

 <p>
10
</p>

</div>
</div>
</div>
 <div id="outline-container-orgf8184be" class="outline-3">
 <h3 id="orgf8184be"> <a href="#orgf8184be">畳み込み</a></h3>
 <div class="outline-text-3" id="text-orgf8184be">
 <p>
畳み込み: リストのすべての要素に何かを行い、蓄積変数を更新していって、終わったところで蓄積変数を返す。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">:{
foldl :: (a -> b -> a) -> a -> [b] -> a

foldl step zero (x:xs) = foldl step (step zero x) xs
foldl _    zero []     = zero
:}
</pre>
</div>

 <div class="results" id="orged7c28d">

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">:{
niceSum :: [Integer] -> Integer
niceSum xs = foldl (+) 0 xs
:}
niceSum [1,2,3,4,5]
</pre>
</div>

 <div class="results" id="org50df031">
 <p>

</p>

 <p>
15
</p>

</div>

 <p>
問題を2つに単純化することで、すっきり書けるようになった。
蓄積値の初期値をどうするかと、蓄積変数の更新。
</p>

 <p>
明示的再帰は綿密に読む必要があり、わかりづらい。
畳み込みを使えば再帰を理解しやすい。
</p>

 <p>
右側からの畳み込み。
</p>
 <div class="org-src-container">
 <pre class="src src-haskell">foldr :: (a -> b -> b) -> b -> [a] -> b
foldr step zero (x:xs) = step x (foldr step zero xs)
foldr _    zero []     = 0
</pre>
</div>

 <div class="results" id="org7078b53">

</div>
</div>
</div>
 <div id="outline-container-orgdcea1f0" class="outline-3">
 <h3 id="orgdcea1f0"> <a href="#orgdcea1f0">再帰と畳み込みの比較</a></h3>
 <div class="outline-text-3" id="text-orgdcea1f0">
 <div class="org-src-container">
 <pre class="src src-haskell">:{
filter :: (a -> Bool) -> [a] -> [a]
filter p [] = []
filter p (x:xs)
  | p x = x : filter p xs
  | otherwise = filter p xs
:}
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-haskell">:{
myFilter p xs = foldr step [] xs
  where step x ys | p x = x : ys
                  | otherwise = ys
:}
myFilter (+) [1,2]
</pre>
</div>
</div>
</div>
 <div id="outline-container-org95d3731" class="outline-3">
 <h3 id="org95d3731"> <a href="#org95d3731">無名関数</a></h3>
 <div class="outline-text-3" id="text-org95d3731">
 <p>
普通に書く例。
</p>
 <div class="org-src-container">
 <pre class="src src-haskell">:{
isInAny needle haystack = any inSequence haystack
    where inSequence s = needle `isInfixOf` s
:}
</pre>
</div>

 <div class="results" id="orge840bfb">

</div>

 <p>
無名関数を使う例。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">isInAny2 needle haystack = any (\s -> needle `isInfixOf` s) haystack
</pre>
</div>

 <div class="results" id="org8f9ff44">

</div>
</div>
</div>
 <div id="outline-container-org38a1819" class="outline-3">
 <h3 id="org38a1819"> <a href="#org38a1819">部分適用</a></h3>
 <div class="outline-text-3" id="text-org38a1819">
 <div class="org-src-container">
 <pre class="src src-haskell">:type dropWhile
</pre>
</div>

 <div class="results" id="org6ad5e71">
 <p>
dropWhile :: (a -> Prelude.Bool) -> [a] -> [a]
</p>

</div>

 <p>
->の意味…左側の型を引数に取り、右側の型の値を返す関数。
</p>

 <p>
Haskellにおいては、  <b>すべての関数は1つしか引数を取らない</b> 。
1つ渡すと型シグネチャから1つ削られたことがわかる。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">:type dropWhile
:type dropWhile isSpace
map (dropWhile isSpace) [" a", "f", "    e"]
</pre>
</div>

 <div class="results" id="org0d8c616">
 <p>
dropWhile :: (a -> Prelude.Bool) -> [a] -> [a]
dropWhile isSpace :: [Char] -> [Char]
[“a”,“f”,“e”]
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">:type zip3
zip3 "foo" "bar" "quux"
</pre>
</div>

 <div class="results" id="org59b0d20">
 <p>
zip3 :: [a] -> [b] -> [c] -> [(a, b, c)]
[(’f’,’b’,’q’),(’o’,’a’,’u’),(’o’,’r’,’u’)]
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">:type zip3 "foo"
let zip3foo = zip3 "foo"
:type zip3foo
zip3foo "aaa" "bbb"
</pre>
</div>

 <div class="results" id="org7af3385">
 <p>
zip3 “foo” :: [b] -> [c] -> [(Char, b, c)]
GHCi> zip3foo :: [b] -> [c] -> [(Char, b, c)]
[(’f’,’a’,’b’),(’o’,’a’,’b’),(’o’,’a’,’b’)]
</p>

</div>

 <p>
関数が受け入れ可能な数よりも少ない数の引数を渡すことを関数の部分適用という( <code>カリー化</code>)。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">isInAny3 needle haystack = any (isInfixOf needle) haystack
</pre>
</div>

 <div class="results" id="org00012b7">

</div>

 <p>
カリー化の例。
使う前。
</p>
 <div class="org-src-container">
 <pre class="src src-haskell">niceSum :: [Integer] -> Integer
niceSum xs = foldl (+) 0 xs
</pre>
</div>

 <div class="results" id="orgcd3dd79">

</div>

 <p>
完全に適用せずに、省略できる。
</p>
 <div class="org-src-container">
 <pre class="src src-haskell">niceSum :: [Integer] -> Integer
niceSum = foldl (+) 0
</pre>
</div>

 <div class="results" id="org0a5175b">

</div>
</div>
</div>
 <div id="outline-container-org3e7e783" class="outline-3">
 <h3 id="org3e7e783"> <a href="#org3e7e783">セクション</a></h3>
 <div class="outline-text-3" id="text-org3e7e783">
 <p>
括弧で中置スタイルの関数の部分適用を書ける。
</p>
 <div class="org-src-container">
 <pre class="src src-haskell">(1+) 2
map (*3) [24,36]
map (2^) [3,5,7,9]
</pre>
</div>

 <div class="results" id="orgf51bd2d">
 <p>
3
[72,108]
[8,32,128,512]
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">:type (`elem` ['a'..'z'])
</pre>
</div>

 <div class="results" id="orgf32e7e1">
 <p>
(`elem` [’a’..’z’]) :: Char -> Prelude.Bool
</p>

</div>

 <p>
引数が小文字アルファベットか調べる関数になる。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">(`elem` ['a'..'z']) 'a'
(`elem` [1..9]) 1
(`elem` [1..9]) 10
</pre>
</div>

 <div class="results" id="org23c0f7b">
 <p>
True
True
False
</p>

</div>

 <p>
 <code>all</code> と組み合わせる。簡潔にリスト全体か判定する関数になった。
</p>
 <div class="org-src-container">
 <pre class="src src-haskell">all (`elem` ['a'..'z']) "Frobozz"
</pre>
</div>

 <div class="results" id="org9eb1f54">
 <p>
False
</p>

</div>

 <p>
 <code>inInAny3</code> の改良版。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">isInAny4 needle haystack = any (needle `isInfixOf`) haystack
:type isInAny4

</pre>
</div>

 <div class="results" id="org4747cf7">
 <p>

</p>

 <p>
isInAny4 :: (Foldable t, Eq a) => [a] -> t [a] -> Prelude.Bool
</p>

</div>
</div>
</div>
 <div id="outline-container-org101fa6b" class="outline-3">
 <h3 id="org101fa6b"> <a href="#org101fa6b">アズパターン</a></h3>
 <div class="outline-text-3" id="text-org101fa6b">
 <div class="org-src-container">
 <pre class="src src-haskell">:m +Data.List
tail "foobar"
tail (tail "foobar")
tails "foobar"
tails []
</pre>
</div>

 <div class="results" id="org9ff1c38">
 <p>

</p>

 <p>
oobar
obar
[“foobar”,“oobar”,“obar”,“bar”,“ar”,“r”,“”]
[[]]
</p>

</div>

 <p>
空でない接尾辞が欲しくなったとする。
</p>

 <p>
 <code>xs@(_:xs')</code> はアズパターンという。
変数  <code>xs</code> を、  <code>@</code> 記号の右辺とマッチした値に束縛する、という意味。
</p>
 <div class="org-src-container">
 <pre class="src src-haskell">:{
sufixes :: [a] -> [[a]]
sufixes xs@(_:xs') = xs : sufixes xs'
sufixes _          = []
:}
sufixes "foo"
</pre>
</div>

 <div class="results" id="org6395d7c">
 <p>

</p>

 <p>
[“foo”,“oo”,“o”]
</p>

</div>

 <p>
アズパターンはデータをコピーする代わりに共有する( <code>xs</code> を再利用している)。
メモリの割り当てを回避するのでパフォーマンスが良い。
</p>
</div>
</div>
 <div id="outline-container-orgbdcee25" class="outline-3">
 <h3 id="orgbdcee25"> <a href="#orgbdcee25">合成</a></h3>
 <div class="outline-text-3" id="text-orgbdcee25">
 <p>
 <code>init</code> 関数はリストの最期の要素を除いた残りを返す。
</p>
 <div class="org-src-container">
 <pre class="src src-haskell">init [1,2,3]
</pre>
</div>

 <div class="results" id="org40db777">
 <p>
[1,2]
</p>

</div>

 <p>
 <code>init</code>  <code>tails</code> を合成する。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">suffix2 xs = init (tails xs)
suffix2 [1,2,3]
</pre>
</div>

 <div class="results" id="org697a2c8">
 <p>

</p>

 <p>
[[1,2,3],[2,3],[3]]
</p>

</div>

 <p>
ある関数を適用してから、その結果に別の関数をしている。このパターンを関数にできる。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">:{
compose :: (b -> c) -> (a -> b) -> a -> c
compose f g x = f (g x)
suffixes3 xs = compose init tails xs
:}
suffixes3 [1,2,3]
</pre>
</div>

 <div class="results" id="org5a76e1e">
 <p>

</p>

 <p>
[[1,2,3],[2,3],[3]]
</p>

</div>

 <p>
勝手にカリー化するので変数は外せる。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">suffixes4 = compose init tails
suffixes4 [1,2,3]
</pre>
</div>

 <div class="results" id="org2d7404d">
 <p>

</p>

 <p>
[[1,2,3],[2,3],[3]]
</p>

</div>

 <p>
連結はよくあることなので、  <code>.</code> 演算子として使える。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">suffixes5 = init . tails
suffixes5 [1,2,3]
</pre>
</div>

 <div class="results" id="org8cb4bf3">
 <p>

</p>

 <p>
[[1,2,3],[2,3],[3]]
</p>

</div>

 <p>
通常の演算子のひとつ。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">:type (.)
</pre>
</div>

 <div class="results" id="org7da56ae">
 <p>
(.) :: (b -> c) -> (a -> b) -> a -> c
</p>

</div>

 <p>
単語の先頭が大文字か。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">:type isUpper . head
isUpper 'W'
</pre>
</div>

 <div class="results" id="org3bb747a">
 <p>
isUpper . head :: [Char] -> Prelude.Bool
True
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">:type filter (isUpper . head)
</pre>
</div>

 <div class="results" id="orgac6f972">
 <p>
filter (isUpper . head) :: [a1] -> [a2]
</p>

</div>

 <p>
関数合成の例。
</p>

 <p>
 <code>words</code> を使う。
</p>
 <div class="org-src-container">
 <pre class="src src-haskell">:type words
words "#define DLT_CHAOS     5"
</pre>
</div>

 <div class="results" id="orgf17e51c">
 <p>
words :: String -> [String]
[“#define”,“DLT_CHAOS”,“5”]
</p>

</div>

 <p>
 <code>tail</code> を使う。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">:type tail
tail ["#define","DLT_CHAOS","5"]
</pre>
</div>

 <div class="results" id="orgbc7ed0d">
 <p>
tail :: [a] -> [a]
[“DLT_CHAOS”,“5”]
</p>

</div>

 <p>
合成する。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">:type tail . words
(tail . words) "#define DLT_CHAOS           5"
</pre>
</div>

 <div class="results" id="org3751691">
 <p>
tail . words :: String -> [String]
[“DLT_CHAOS”,“5”]
</p>

</div>

 <p>
 <code>head</code> を使う。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">:type head . tail . words
(head . tail . words) "#define DLT_CHAOS     5"
</pre>
</div>

 <div class="results" id="orge20d2f9">
 <p>
head . tail . words :: String -> String
DLT_CHAOS
</p>

</div>

 <p>
優先順位…ライブラリ関数の合成 > 畳み込み > 末尾再帰。
</p>
</div>
</div>
 <div id="outline-container-org9fb0710" class="outline-3">
 <h3 id="org9fb0710"> <a href="#org9fb0710">スペースリーク</a></h3>
 <div class="outline-text-3" id="text-org9fb0710">
 <p>
遅延評価しない式のことを  <code>正格な式</code> という。
 <code>seq</code> は正格化する。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">:{
foldl' _ zero []    = zero
foldl' step zero (x:xs) =
    let new = step zero x
    in new `seq` foldl' step new xs
:}
</pre>
</div>

 <div class="results" id="orga3d8267">

</div>

 <p>
 <code>seq</code> は値を評価する方法としての存在価値しかない。
</p>
 <div class="org-src-container">
 <pre class="src src-haskell">:type seq
</pre>
</div>

 <div class="results" id="orgee728f9">
 <p>
seq :: a -> b -> b
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">foldl' (+) 1 (2:[])
</pre>
</div>

 <div class="results" id="org6aa93f5">
 <p>
3
</p>

</div>

 <p>
これは↓のように展開される。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">:{
let new = 1 + 2
in new `seq` foldl' (+) new []
:}
</pre>
</div>

 <div class="results" id="org09d7133">
 <p>
3
</p>

</div>

 <p>
一度↓のように展開する。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">fold' (+) 3 []
</pre>
</div>

 <p>
 <code>seq</code> によってサンクがない。
</p>
</div>
</div>
 <div id="outline-container-org78bd599" class="outline-3">
 <h3 id="org78bd599"> <a href="#org78bd599">型クラス</a></h3>
 <div class="outline-text-3" id="text-org78bd599">
 <p>
同値性検査をしたい。
</p>

 <p>
色の場合。
</p>
 <div class="org-src-container">
 <pre class="src src-haskell">:{
data Color = Red | Green | Blue
colorEq :: Color -> Color -> Bool
colorEq Red Red = True
colorEq Green Green = True
colorEq Blue Blue = True
colorEq _ _ = False
:}
</pre>
</div>

 <div class="results" id="orge85c4d0">

</div>

 <p>
stringの場合。
</p>
 <div class="org-src-container">
 <pre class="src src-haskell">stringEq :: [Char] -> [Char] -> Bool
stringEq [] [] = True
stringEq (x:xs) (y:ys) = x == y && stringEq xs ys
stringEq _ _ = False
</pre>
</div>

 <div class="results" id="orgd0288fe">

</div>

 <p>
つまり…型ごとに別の名前の関数を使って比較しなければならない。
すべて  <code>==</code> で比較できると便利(ジェネリック関数)。
型クラスは実際に与えられたデータの型ごとに実装を持ち得る関数の集合によって定義するもの。
</p>

 <p>
型クラスを定義する。  <code>BasicEq</code> という型クラスを定義する。
インスタンスの型は  <code>a</code> 。
</p>
 <div class="org-src-container">
 <pre class="src src-haskell">:{
class BasicEq a where
    isEqual :: a -> a -> Bool
:}
</pre>
</div>

 <div class="results" id="orgacbb38a">

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">:type isEqual
</pre>
</div>

 <div class="results" id="orgb85c748">
 <p>
isEqual :: BasicEq a => a -> a -> Bool
</p>

</div>

 <p>
→ あらゆる型  <code>a</code> に対して、  <code>a</code> が  <code>BasicEq</code> のインスタンスである限り、  <code>isEqual</code> は型  <code>a</code> のパラメータを2つ取り、  <code>Bool</code> を返す。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">:{
instance BasicEq Bool where
    isEqual True  True  = True
    isEqual False False = True
    isEqual _     _     = False
:}
</pre>
</div>

 <div class="results" id="org284f823">

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">:{
class BasicEq2 a where
    isEqual2    :: a -> a -> Bool
    isNotEqual2 :: a -> a -> Bool
:}
</pre>
</div>

 <div class="results" id="orgba7b675">

</div>

 <p>
notを追加する。
</p>
 <div class="org-src-container">
 <pre class="src src-haskell">:{
class BasicEq3 a where
      isEqual3 :: a -> a -> Bool
      -- isEqual3 x y = not (isNotEqual3 x y)

      isNotEqual3 :: a -> a -> Bool
      -- isNotEqual3 x y = not (isEqual3 x y)
:}
</pre>
</div>

 <div class="results" id="org92695d5">

</div>

 <p>
組み込みの  <code>Eq</code> 型を見る。
</p>
 <div class="org-src-container">
 <pre class="src src-haskell">class Eq a where
    (==), (/=) :: a -> a -> Bool

    -- 最低限の完全な定義は(==) か (/=) のどちらか
    x /= y     = not (x == y)
    x == y     = not (x /= y)
</pre>
</div>

 <div class="results" id="org5581b23">

</div>
</div>
</div>
 <div id="outline-container-org7c491a3" class="outline-3">
 <h3 id="org7c491a3"> <a href="#org7c491a3">型クラスのインスタンス宣言</a></h3>
 <div class="outline-text-3" id="text-org7c491a3">
 <p>
Color型だけでなく、BasicEq3のインスタンスとして宣言したあらゆる型に対して  <code>isEqual3</code> が使える。
</p>
 <div class="org-src-container">
 <pre class="src src-haskell">instance BasicEq3 Color where
    isEqual3 Red   Red   = True
    isEqual3 Green Green = True
    isEqual3 Blue  Blue  = True
    isEqual3 _     _     = False
</pre>
</div>

 <div class="results" id="orgc24fc73">

</div>
</div>
</div>
 <div id="outline-container-org69888a9" class="outline-3">
 <h3 id="org69888a9"> <a href="#org69888a9">Show</a></h3>
 <div class="outline-text-3" id="text-org69888a9">
 <div class="org-src-container">
 <pre class="src src-haskell">:type show
</pre>
</div>

 <div class="results" id="org6788da9">
 <p>
show :: Show a => a -> String
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">show 1
show [1,2,3]
show (1,2)
</pre>
</div>

 <div class="results" id="org304aaec">
 <p>
1
[1,2,3]
(1,2)
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">putStrLn (show 1)
putStrLn (show [1,2,3])
</pre>
</div>

 <div class="results" id="orgfb5f786">
 <p>
1
[1,2,3]
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">show "Hello!"
putStrLn (show "Hello!")
show ['H', 'i']
show "Hi, \"Jane\""
putStrLn (show "Hi, \"Jane\"")
</pre>
</div>

 <div class="results" id="orgc4c534b">
 <p>
\“Hello!\”
Hello!
\“Hi\”
\“Hi, \\\”Jane\\\“\”
Hi, \“Jane\”
</p>

</div>

 <p>
自分で定義した型に対して  <code>Show</code> インスタンスを定義する。
</p>
 <div class="org-src-container">
 <pre class="src src-haskell">instance Show Color where
    show Red   = "Red"
    show Green = "Green"
    show Blue  = "Blue"
</pre>
</div>

 <div class="results" id="org4f7a9a8">

</div>
</div>
</div>
 <div id="outline-container-org6b06c11" class="outline-3">
 <h3 id="org6b06c11"> <a href="#org6b06c11">Read</a></h3>
 <div class="outline-text-3" id="text-org6b06c11">
 <div class="org-src-container">
 <pre class="src src-haskell">:type read
</pre>
</div>

 <div class="results" id="org80d2709">
 <p>
read :: Read a => String -> a
</p>

</div>

 <p>
エラーが出てうまくいかない…。
</p>
 <div class="org-src-container">
 <pre class="src src-haskell">:{
main = do
    putStrLn "Please enter a Double:"
    inpStr <- getLine
    let inpDouble = (read inpStr)::Double
    putStrLn ("Twice " ++ show inpDouble ++ " is " ++ show (inpDouble * 2))
:}
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-haskell">read "5"
</pre>
</div>

 <div class="results" id="org8cdc452">
 <p>
Exception: Prelude.read: no parse
</p>

</div>

 <p>
型の  <code>a</code> は、それぞれのReadのインスタンスのこと。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">:type (read "5")
</pre>
</div>

 <div class="results" id="org8bf6cc3">
 <p>
(read “5”) :: Read a => a
</p>

</div>

 <p>
実際に呼ばれる特定の関数はreadの返り値から期待される型で決まる。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">(read "5")::Integer
(read "5")::Double
</pre>
</div>

 <div class="results" id="org6d8062a">
 <p>
5
5.0
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">:{
instance Read Color where
   readsPrec _ value =
       -- ペアは文字列と欲しい返り値
       tryParse [("Red", Red), ("Green", Green), ("Blue", Blue)]
       where tryParse [] = []
             tryParse ((attempt, result):xs) =
                 if (take (length attempt) value) == attempt
                    then [(result, drop (length attempt) value)]
                    else tryParse xs
:}
</pre>
</div>

 <div class="results" id="org4b3b314">

</div>

 <p>
なぜかstack overflowでできない。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">(read "Red")::Color
(read "Green")::Color
(read "Blue")::Color
(read "[Red]")::Color
(read "[Red,Red,Blue]")::Color
</pre>
</div>

 <div class="results" id="org926ec62">
 <p>
Exception: stack overflow
</p>

</div>
</div>
</div>
 <div id="outline-container-orgce4593f" class="outline-3">
 <h3 id="orgce4593f"> <a href="#orgce4593f">シリアライズ</a></h3>
 <div class="outline-text-3" id="text-orgce4593f">
 <div class="org-src-container">
 <pre class="src src-haskell">let d1 = [Just 5, Nothing, Nothing, Just 8, Just 9]::[Maybe Int]
:type show
:type show d1
putStrLn (show d1)
</pre>
</div>

 <div class="results" id="orgc4357ab">
 <p>

</p>

 <p>
show :: Show a => a -> String
show d1 :: String
[Just 5,Nothing,Nothing,Just 8,Just 9]
</p>

</div>

 <p>
ファイルに書き込み。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">writeFile "test" (show d1)
</pre>
</div>

 <div class="results" id="org9f9a9b4">

</div>

 <p>
再度読み込み。
 <code>d2</code> に明示的に型を与えるのがポイント。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">input <- readFile "test"
let d2 = (read input) ::[Maybe Int]
print d1
print d2
d1 == d2
</pre>
</div>

 <div class="results" id="org9c44392">
 <p>

</p>

 <p>
GHCi> [Just 5,Nothing,Nothing,Just 8,Just 9]
[Just 5,Nothing,Nothing,Just 8,Just 9]
True
</p>

</div>

 <p>
showにほかの引数を与えてみる。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">putStrLn $ show [("hi", 1), ("there", 3)]
</pre>
</div>

 <div class="results" id="orgd2d0ea0">
 <p>
[(“hi”,1),(“there”,3)]
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">putStrLn $ show [[1, 2, 3], [4, 0, 1], [], [503]]
</pre>
</div>

 <div class="results" id="org6301056">
 <p>
[[1,2,3],[4,0,1],[],[503]]
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">putStrLn $ show [Left 5, Right "there", Left 0, Right "nine"]
</pre>
</div>

 <div class="results" id="org9c2876c">
 <p>
[Left 5,Right “there”,Left 0,Right “nine”]
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">putStrLn $ show [Left 0, Right [1, 2, 3], Left 5, Right []]
</pre>
</div>

 <div class="results" id="org73ca49b">
 <p>
[Left 0,Right [1,2,3],Left 5,Right []]
</p>

</div>
</div>
</div>
 <div id="outline-container-org6d8bc2c" class="outline-3">
 <h3 id="org6d8bc2c"> <a href="#org6d8bc2c">数値型</a></h3>
 <div class="outline-text-3" id="text-org6d8bc2c">
 <p>
強力な数値型がある。
Haskellの演算子は関数にすぎない。
演算子を関数とみなす場合には括弧で囲む。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">:{
data Color = Red | Green | Blue
       deriving (Read, Show, Eq, Ord)
:}
show Red
(read "Red")::Color
(read "[Red,Red,Blue]")::[Color]
(read "[Red, Red, Blue]")::[Color]
Red == Red
Red == Blue
Data.List.sort [Blue,Green,Blue,Red]
Red < Blue
</pre>
</div>

 <div class="results" id="org8fe5cb6">
 <p>

</p>

 <p>
Red
Red
[Red,Red,Blue]
[Red,Red,Blue]
True
False
[Red,Green,Blue,Blue]
True
</p>

</div>

 <p>
型が参照している型が、やはりその型クラスのインスタンスであると宣言しないといけない。
</p>

 <p>
CannotShow が Show のインスタンスではないので、エラー。
</p>
 <div class="org-src-container">
 <pre class="src src-haskell">:{
data CannotShow = CannotShow
data CannotDeriveShow = CannotDeriveShow CannotShow
                        deriving (Show)
:}
</pre>
</div>

 <div class="results" id="org5f02d73">
 <p>
Prelude Data.Char Data.List Data.Char Data.Char| Prelude Data.Char Data.List Data.Char Data.Char| Prelude Data.Char Data.List Data.Char Data.Char| Prelude Data.Char Data.List Data.Char Data.Char|
<interactive>:7599:35-38: error:
    • No instance for (Show CannotShow)
        arising from the first field of ‘CannotDeriveShow’
          (type ‘CannotShow’)
      Possible fix:
        use a standalone ’deriving instance’ declaration,
          so you can specify the instance context yourself
    • When deriving the instance for (Show CannotDeriveShow)
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">:{
data OK = OK
instance Show OK where
    show _ = "OK"
data ThisWorks = ThisWorks OK
                 deriving (Show)
:}
</pre>
</div>

 <div class="results" id="orgce6f457">

</div>

 <p>
Haskell では異なる型の値を含むリストはサポートされてないので、JSONオブジェクトを直接表現できない。
代わりにデータ構成子でそれぞれの値を含む必要がある。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">type JSONError = String

class JSON a where
    toJValue :: a -> JValue
    fromJValue :: JValue -> Either JSONError a

instance JSON JValue where
    toJValue = id
    fromJValue = Right
</pre>
</div>

 <div class="results" id="orgfa2e5b6">

</div>

 <p>
よりよいエラー文。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">data Maybe a = Nothing
             | Just a
               deriving (Eq, Ord, Read, Show)

data Either a b = Left a
                | Right b
                  deriving (Eq, Ord, Read, Show)
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-haskell">instance JSON Bool where
    toJValue = JBool
    fromJValue (JBool b) = Right b
    fromJValue _ = Left "not a JSON boolean"
</pre>
</div>

 <div class="results" id="orgfe8f164">

</div>

 <p>
特殊なコメントで制限回避。プラグマというコンパイラ指令。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">{-# LANGUAGE TypeSynonymInstances #-}
</pre>
</div>
</div>
</div>
 <div id="outline-container-org870185d" class="outline-3">
 <h3 id="org870185d"> <a href="#org870185d">型クラスとインスタンス</a></h3>
 <div class="outline-text-3" id="text-org870185d">
 <p>
新しいインスタンスはどこででも追加できる。型クラスを定義したモジュール内のみに限定されてない。
型クラスは開世界仮説に基づいている。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">doubleToJValue :: (Double -> a) -> JValue -> Either JSONError a
doubleToJValue f (JNumber v) = Right (f v)
doubleToJValue _ _ = Left "not a JSON number"

instance JSON Int where
    toJValue = JNumber . realToFrac
    fromJValue = doubleToJValue round

instance JSON Integer where
    toJValue = JNumber . realToFrac
    fromJValue = doubleToJValue round

instance JSON Double where
    toJValue = JNumber
    fromJValue = doubleToJValue id
</pre>
</div>

 <div class="results" id="org75132a8">

</div>

 <p>
インスタンスの重複。
リストをJSONの配列に変換する例。
</p>

 <div class="org-src-container">
 <pre class="src src-haskell">instance (JSON a) => JSON [a] where
    toJValue = undefined
    fromJValue = undefined
</pre>
</div>

 <div class="results" id="org02eadde">

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">instance (JSON a) => JSON [(String, a)] where
    toJValue = undefined
    fromJValue = undefined
</pre>
</div>

 <div class="results" id="orga849037">

</div>

 <div class="org-src-container">
 <pre class="src src-haskell">{-# LANGUAGE FlexibleInstances #-}
class Borked a where
    bork :: a -> String

instance Borked Int where
    bork = show

instance Borked (Int, Int) where
    bork (a, b) = bork a ++ ", " ++ bork b

instance (Borked a, Borked b) => Borked (a, b) where
    bork (a, b) = ">>" ++ bork a ++ " " ++ bork b ++ "<<"
</pre>
</div>

 <p>
GHC は保守的で、使える可能性のあるインスタンスは1つだけであるべきとする。
なのでbork を使おうとするとエラーになる。
</p>
</div>
</div>
 <div id="outline-container-org10c1b9e" class="outline-3">
 <h3 id="org10c1b9e"> <a href="#org10c1b9e">型クラスに関する制約の緩和</a></h3>
</div>
</div>
 <div id="outline-container-org7031f7a" class="outline-2">
 <h2 id="org7031f7a"> <a href="#org7031f7a">Tasks</a></h2>
 <div class="outline-text-2" id="text-org7031f7a">
</div>
 <div id="outline-container-org4b97d05" class="outline-3">
 <h3 id="org4b97d05"> <a href="#org4b97d05"> <span class="todo TODO">TODO</span> org-babelでhaskellを実行できなくなる</a></h3>
 <div class="outline-text-3" id="text-org4b97d05">
 <p>
 <code>:set +t</code> を評価すると使えなくなる。
</p>
</div>
</div>
 <div id="outline-container-org178bb1a" class="outline-3">
 <h3 id="org178bb1a"> <a href="#org178bb1a"> <span class="todo TODO">TODO</span> xmpfilterのHaskell版を探す or 作る</a></h3>
 <div class="outline-text-3" id="text-org178bb1a">
 <p>
なければ簡易版で作る。
いちいちロード、コンパイルは学習に不便。既存のがあるはずだが、調べ方がわからない。
</p>

 <p>
 <code>org-babel</code> でよさそう。
</p>
</div>
</div>
 <div id="outline-container-orgb72608e" class="outline-3">
 <h3 id="orgb72608e"> <a href="#orgb72608e"> <span class="todo TODO">TODO</span> </a> <a href="https://www.oreilly.co.jp/books/9784873114231/">O’Reilly Japan - Real World Haskell</a>  <code>[14%]</code></h3>
 <div class="outline-text-3" id="text-orgb72608e">
 <p>

</p>
</div>
 <div id="outline-container-org999bcc3" class="outline-4">
 <h4 id="org999bcc3"> <a href="#org999bcc3"> <span class="done DONE">DONE</span> 100</a></h4>
 <div class="outline-text-4" id="text-org999bcc3">
</div>
</div>
 <div id="outline-container-org166b809" class="outline-4">
 <h4 id="org166b809"> <a href="#org166b809"> <span class="todo TODO">TODO</span> 200</a></h4>
 <div class="outline-text-4" id="text-org166b809">
 <p>
 <span class="timestamp-wrapper"> <span class="timestamp"><2021-10-13 水></span></span>
160pまで到達。
</p>
</div>
</div>
 <div id="outline-container-org07efb72" class="outline-4">
 <h4 id="org07efb72"> <a href="#org07efb72"> <span class="todo TODO">TODO</span> 300</a></h4>
</div>
 <div id="outline-container-org901012f" class="outline-4">
 <h4 id="org901012f"> <a href="#org901012f"> <span class="todo TODO">TODO</span> 400</a></h4>
</div>
 <div id="outline-container-orgb266594" class="outline-4">
 <h4 id="orgb266594"> <a href="#orgb266594"> <span class="todo TODO">TODO</span> 500</a></h4>
</div>
 <div id="outline-container-orgbf083aa" class="outline-4">
 <h4 id="orgbf083aa"> <a href="#orgbf083aa"> <span class="todo TODO">TODO</span> 600</a></h4>
</div>
 <div id="outline-container-orgff6d2d7" class="outline-4">
 <h4 id="orgff6d2d7"> <a href="#orgff6d2d7"> <span class="todo TODO">TODO</span> 700</a></h4>
</div>
</div>
</div>
 <div id="outline-container-orgca66e84" class="outline-2">
 <h2 id="orgca66e84"> <a href="#orgca66e84">Reference</a></h2>
 <div class="outline-text-2" id="text-orgca66e84">
</div>
 <div id="outline-container-org3935c1c" class="outline-3">
 <h3 id="org3935c1c"> <a href="#org3935c1c"></a> <a href="http://walk.northcol.org/haskell/">ウォークスルー Haskell - Haskell 入門</a></h3>
 <div class="outline-text-3" id="text-org3935c1c">
 <p>
わかりやすそうな入門。
</p>
</div>
</div>
 <div id="outline-container-orgba7364a" class="outline-3">
 <h3 id="orgba7364a"> <a href="#orgba7364a"></a> <a href="https://www.lambdanote.com/collections/haskell">『プログラミングHaskell 第2版』 – 技術書出版と販売のラムダノート</a></h3>
</div>
 <div id="outline-container-org05c19d4" class="outline-3">
 <h3 id="org05c19d4"> <a href="#org05c19d4"></a> <a href="https://www.cs.nott.ac.uk/~pszgmh/fold.pdf">A tutorial on the universality and expressiveness of fold</a></h3>
 <div class="outline-text-3" id="text-org05c19d4">
 <p>
haskellの畳み込みのすぐれたチュートリアル。
</p>
</div>
</div>
 <div id="outline-container-orga4a627d" class="outline-3">
 <h3 id="orga4a627d"> <a href="#orga4a627d"></a> <a href="https://www.haskell.org/onlinereport/haskell2010/haskellpa1.html#haskellch4.html">I The Haskell 2010 Language</a></h3>
 <div class="outline-text-3" id="text-orga4a627d">
 <p>
Haskellの仕様書。
</p>
</div>
</div>
 <div id="outline-container-org69555de" class="outline-3">
 <h3 id="org69555de"> <a href="#org69555de"></a> <a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.38.8777">CiteSeerX — The Design of a Pretty-printing Library</a></h3>
 <div class="outline-text-3" id="text-org69555de">
 <p>
haskellのjsonプリティプリンタライブラリの設計。
</p>
</div>
</div>
 <div id="outline-container-orgf04615c" class="outline-3">
 <h3 id="orgf04615c"> <a href="#orgf04615c"></a> <a href="https://wiki.haskell.org/IO%E5%85%A5%E9%96%80%E7%B7%A8">IO入門編 - HaskellWiki</a></h3>
 <div class="outline-text-3" id="text-orgf04615c">
 <p>
IOの説明。
</p>
</div>
</div>
 <div id="outline-container-org2c9b9da" class="outline-3">
 <h3 id="org2c9b9da"> <a href="#org2c9b9da"></a> <a href="http://www.allureofthestars.com/play/">Allure of the Stars</a></h3>
 <div class="outline-text-3" id="text-org2c9b9da">
 <p>
Haskellのブラウザローグライクゲーム。
</p>
</div>
</div>
 <div id="outline-container-org8603ad4" class="outline-3">
 <h3 id="org8603ad4"> <a href="#org8603ad4"></a> <a href="https://www.infoq.com/jp/articles/Understanding-Monads-guide-for-perplexed/">モナドを理解する - 迷える者への手引き</a></h3>
 <div class="outline-text-3" id="text-org8603ad4">
 <p>
Haskellのモナドの解説。
</p>
</div>
</div>
 <div id="outline-container-orgfb21674" class="outline-3">
 <h3 id="orgfb21674"> <a href="#orgfb21674"></a> <a href="https://ja.wikipedia.org/wiki/Haskell">Haskell - Wikipedia</a></h3>
</div>
</div>
 <div id="outline-container-org0c6ab21" class="outline-2">
 <h2 id="org0c6ab21"> <a href="#org0c6ab21">Archives</a></h2>
 <div class="outline-text-2" id="text-org0c6ab21">
</div>
 <div id="outline-container-orgd55de0a" class="outline-3">
 <h3 id="orgd55de0a"> <a href="#orgd55de0a"> <span class="done DONE">DONE</span> すごいHaskellたのしく学ぼう  <code>[100%]</code></a></h3>
 <div class="outline-text-3" id="text-orgd55de0a">
 <p>
何か作る的なテーマがないので読むのがつらい。
参考になりそうなパッケージを探したけど、ピンとくるものがない。
いくつかパッケージをbuildしてみたが、依存パッケージで動かない。どうするかな。
</p>

 <p>
よくわからん。
</p>
</div>
 <div id="outline-container-org0e4b6c2" class="outline-4">
 <h4 id="org0e4b6c2"> <a href="#org0e4b6c2"> <span class="done DONE">DONE</span> 30%</a></h4>
 <div class="outline-text-4" id="text-org0e4b6c2">
</div>
</div>
 <div id="outline-container-orgc33285e" class="outline-4">
 <h4 id="orgc33285e"> <a href="#orgc33285e"> <span class="done DONE">DONE</span> 40%</a></h4>
 <div class="outline-text-4" id="text-orgc33285e">
</div>
</div>
 <div id="outline-container-org55bb153" class="outline-4">
 <h4 id="org55bb153"> <a href="#org55bb153"> <span class="done DONE">DONE</span> 50%</a></h4>
 <div class="outline-text-4" id="text-org55bb153">
 <p>

</p>
</div>
</div>
 <div id="outline-container-org36c426a" class="outline-4">
 <h4 id="org36c426a"> <a href="#org36c426a"> <span class="done DONE">DONE</span> 60%</a></h4>
 <div class="outline-text-4" id="text-org36c426a">
 <p>

</p>
</div>
</div>
 <div id="outline-container-org3dd2192" class="outline-4">
 <h4 id="org3dd2192"> <a href="#org3dd2192"> <span class="done DONE">DONE</span> 70%</a></h4>
 <div class="outline-text-4" id="text-org3dd2192">
 <p>

</p>
</div>
</div>
 <div id="outline-container-orgf4ad575" class="outline-4">
 <h4 id="orgf4ad575"> <a href="#orgf4ad575"> <span class="done DONE">DONE</span> 80%</a></h4>
 <div class="outline-text-4" id="text-orgf4ad575">
 <p>

</p>
</div>
</div>
 <div id="outline-container-orgf89d1a2" class="outline-4">
 <h4 id="orgf89d1a2"> <a href="#orgf89d1a2"> <span class="done DONE">DONE</span> 90%</a></h4>
 <div class="outline-text-4" id="text-orgf89d1a2">
 <p>

</p>
</div>
</div>
 <div id="outline-container-org9b33dde" class="outline-4">
 <h4 id="org9b33dde"> <a href="#org9b33dde"> <span class="done DONE">DONE</span> 100%</a></h4>
 <div class="outline-text-4" id="text-org9b33dde">
 <p>

</p>
</div>
</div>
</div>
</div>
 <div id="outline-container-orge4b4831" class="outline-2">
 <h2 id="orge4b4831"> <a href="#orge4b4831">Backlinks</a></h2>
 <div class="outline-text-2" id="text-orge4b4831">
 <ul class="org-ul"> <li> <a href="./20220108003324-scala.html">Scala</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20210907223510-haskell.html"/>
  <id>https://kijimad.github.io/roam/20210907223510-haskell.html</id>
  <updated>2025-06-14T00:00:00+09:00</updated>
</entry>
<entry>
  <title>Smalltalk</title>
  <author><name>root</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orgee1a896" class="outline-2">
 <h2 id="orgee1a896"> <a href="#orgee1a896">概要</a></h2>
 <div class="outline-text-2" id="text-orgee1a896">
 <p>
Smalltalkはオブジェクト指向の <a href="20210509101246-programming_language.html#ID-868ac56a-2d42-48d7-ab7f-7047c85a8f39">Programming Language</a>。
</p>
</div>
</div>
 <div id="outline-container-org986c08c" class="outline-2">
 <h2 id="org986c08c"> <a href="#org986c08c">Memo</a></h2>
</div>
 <div id="outline-container-org5a8cf29" class="outline-2">
 <h2 id="org5a8cf29"> <a href="#org5a8cf29">Tasks</a></h2>
</div>
 <div id="outline-container-org5fd622a" class="outline-2">
 <h2 id="org5fd622a"> <a href="#org5fd622a">Reference</a></h2>
</div>
 <div id="outline-container-org3b7376c" class="outline-2">
 <h2 id="org3b7376c"> <a href="#org3b7376c">Archives</a></h2>
</div>


 <div id="outline-container-org4e8c001" class="outline-2">
 <h2 id="org4e8c001"> <a href="#org4e8c001">Backlinks</a></h2>
 <div class="outline-text-2" id="text-org4e8c001">
 <ul class="org-ul"> <li> <a href="./20210509095513-ruby.html">Ruby</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20210910102223-smalltalk.html"/>
  <id>https://kijimad.github.io/roam/20210910102223-smalltalk.html</id>
  <updated>2025-06-14T00:00:00+09:00</updated>
</entry>
<entry>
  <title>Regular Expression</title>
  <author><name>root</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org7f2192d" class="outline-2">
 <h2 id="org7f2192d"> <a href="#org7f2192d">概要</a></h2>
 <div class="outline-text-2" id="text-org7f2192d">
 <p>
Regular Expression(正規表現)は構造化データではない文字列からデータを取り出すのに便利な形式。
</p>
</div>
</div>
 <div id="outline-container-orgd1befc0" class="outline-2">
 <h2 id="orgd1befc0"> <a href="#orgd1befc0">Memo</a></h2>
</div>
 <div id="outline-container-org33fedd1" class="outline-2">
 <h2 id="org33fedd1"> <a href="#org33fedd1">Tasks</a></h2>
 <div class="outline-text-2" id="text-org33fedd1">
</div>
 <div id="outline-container-org908a5fd" class="outline-3">
 <h3 id="org908a5fd"> <a href="#org908a5fd"> <span class="todo TODO">TODO</span> </a> <a href="https://gihyo.jp/book/2015/978-4-7741-7270-5">正規表現技術入門 ――最新エンジン実装と理論的背景：書籍案内｜技術評論社</a></h3>
 <div class="outline-text-3" id="text-org908a5fd">
 <p>
正規表現自体の解説。
</p>
</div>
</div>
 <div id="outline-container-org5f59dfe" class="outline-3">
 <h3 id="org5f59dfe"> <a href="#org5f59dfe"> <span class="todo TODO">TODO</span> </a> <a href="https://www.oreilly.co.jp/books/9784873113593/">O’Reilly Japan - 詳説 正規表現 第3版</a></h3>
 <div class="outline-text-3" id="text-org5f59dfe">
 <p>
正規表現の本。
</p>
</div>
</div>
 <div id="outline-container-orgda8aa98" class="outline-3">
 <h3 id="orgda8aa98"> <a href="#orgda8aa98"> <span class="todo TODO">TODO</span> </a> <a href="https://makenowjust-labs.github.io/blog/post/2023-08-06-pike-earley">Pike VMとEarley法の関係についてRubyで実装して考えてみる | makenowjust-labs/blog</a></h3>
 <div class="outline-text-3" id="text-orgda8aa98">
 <p>
正規表現の実装。
</p>
</div>
</div>
</div>
 <div id="outline-container-org343dab1" class="outline-2">
 <h2 id="org343dab1"> <a href="#org343dab1">Reference</a></h2>
</div>
 <div id="outline-container-orgea71eae" class="outline-2">
 <h2 id="orgea71eae"> <a href="#orgea71eae">Archives</a></h2>
</div>


 <div id="outline-container-orgc40ba81" class="outline-2">
 <h2 id="orgc40ba81"> <a href="#orgc40ba81">Backlinks</a></h2>
 <div class="outline-text-2" id="text-orgc40ba81">
 <ul class="org-ul"> <li> <a href="./20210509095513-ruby.html">Ruby</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20210910104106-regular_expression.html"/>
  <id>https://kijimad.github.io/roam/20210910104106-regular_expression.html</id>
  <updated>2025-06-14T00:00:00+09:00</updated>
</entry>
<entry>
  <title>bookmarks</title>
  <author><name>root</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org530c858" class="outline-2">
 <h2 id="org530c858"> <a href="#org530c858">概要</a></h2>
 <div class="outline-text-2" id="text-org530c858">
 <p>
各ノートに分類できないブックマーク集。
</p>

 <p>
リンクを辿らずとも内容がわかるようにすること。
</p>
</div>
</div>
 <div id="outline-container-org750e892" class="outline-2">
 <h2 id="org750e892"> <a href="#org750e892">Memo</a></h2>
</div>
 <div id="outline-container-orge4ceb10" class="outline-2">
 <h2 id="orge4ceb10"> <a href="#orge4ceb10">Tasks</a></h2>
 <div class="outline-text-2" id="text-orge4ceb10">
</div>
 <div id="outline-container-orgb59a169" class="outline-3">
 <h3 id="orgb59a169"> <a href="#orgb59a169"> <span class="todo TODO">TODO</span> </a> <a href="http://archive.linux.or.jp/JF/JFdocs/Unix-and-Internet-Fundamentals-HOWTO/">The Unix and Internet Fundamentals HOWTO</a></h3>
 <div class="outline-text-3" id="text-orgb59a169">
 <p>
コンピュータやシステムに関する、実用的な基礎知識の解説。
</p>
</div>
</div>
 <div id="outline-container-orgbafa992" class="outline-3">
 <h3 id="orgbafa992"> <a href="#orgbafa992"> <span class="todo TODO">TODO</span> Dom document</a></h3>
 <div class="outline-text-3" id="text-orgbafa992">
 <p>
DOMのドキュメント。日本訳もある。
</p>
 <ul class="org-ul"> <li> <a href="https://dom.spec.whatwg.org/">DOM Standard</a></li>
</ul></div>
</div>
 <div id="outline-container-org8f7937a" class="outline-3">
 <h3 id="org8f7937a"> <a href="#org8f7937a"> <span class="todo TODO">TODO</span> Martin Fowlerの和訳</a></h3>
 <div class="outline-text-3" id="text-org8f7937a">
 <p>
リファクタリング手法で有名な人のブログ記事の、和訳リポジトリがある。
</p>

 <ul class="org-ul"> <li> <a href="https://bliki-ja.github.io/">Martin Fowler’s Bliki (ja)</a></li>
</ul></div>
</div>
 <div id="outline-container-org1c20fa4" class="outline-3">
 <h3 id="org1c20fa4"> <a href="#org1c20fa4"> <span class="todo TODO">TODO</span> Practical Scheme</a></h3>
 <div class="outline-text-3" id="text-org1c20fa4">
 <ul class="org-ul"> <li> <a href="http://practical-scheme.net/index-j.html">Practical Scheme</a></li>
</ul></div>
</div>
</div>
 <div id="outline-container-orga82fd72" class="outline-2">
 <h2 id="orga82fd72"> <a href="#orga82fd72">場所</a></h2>
 <div class="outline-text-2" id="text-orga82fd72">
</div>
 <div id="outline-container-org93c47dd" class="outline-3">
 <h3 id="org93c47dd"> <a href="#org93c47dd"></a> <a href="https://alpacat.com/blog/trip-to-kohamajima-island/">珊瑚の湖に浮かぶ小さな島 小浜島に行ってきた - アルパカログ</a></h3>
 <div class="outline-text-3" id="text-org93c47dd">
 <p>
行ってみたい。
</p>
</div>
</div>
</div>
 <div id="outline-container-orgd5a3525" class="outline-2">
 <h2 id="orgd5a3525"> <a href="#orgd5a3525">画像</a></h2>
 <div class="outline-text-2" id="text-orgd5a3525">
</div>
 <div id="outline-container-org1419858" class="outline-3">
 <h3 id="org1419858"> <a href="#org1419858"></a> <a href="https://jaa2100.org/">ジャパンアーカイブズ - Japan Archives 日本の近現代史150年をビジュアルで振り返る</a></h3>
 <div class="outline-text-3" id="text-org1419858">
 <p>
歴史的な写真集。
</p>
</div>
</div>
 <div id="outline-container-org6854fd8" class="outline-3">
 <h3 id="org6854fd8"> <a href="#org6854fd8"></a> <a href="https://ja.cooltext.com/">ロゴ及び画像ジェネレーター</a></h3>
 <div class="outline-text-3" id="text-org6854fd8">
 <p>
ロゴを簡単に生成できるサイト。
</p>
</div>
</div>
</div>
 <div id="outline-container-org251deb0" class="outline-2">
 <h2 id="org251deb0"> <a href="#org251deb0">映画</a></h2>
 <div class="outline-text-2" id="text-org251deb0">
</div>
 <div id="outline-container-org76c128f" class="outline-3">
 <h3 id="org76c128f"> <a href="#org76c128f"></a> <a href="https://www.cinema-lineup.com/thekiller">Netflix『ザ・キラー』</a></h3>
 <div class="outline-text-3" id="text-org76c128f">
 <p>
デヴィッド・フィンチャー監督。おもしろそう。
</p>
</div>
</div>
 <div id="outline-container-org4f7c19d" class="outline-3">
 <h3 id="org4f7c19d"> <a href="#org4f7c19d"></a> <a href="https://kotfm-movie.jp/">映画『キラーズ・オブ・ザ・フラワームーン』公式サイト</a></h3>
 <div class="outline-text-3" id="text-org4f7c19d">
 <p>
映画。
</p>
</div>
</div>
</div>
 <div id="outline-container-org659cf25" class="outline-2">
 <h2 id="org659cf25"> <a href="#org659cf25">音楽</a></h2>
 <div class="outline-text-2" id="text-org659cf25">
</div>
 <div id="outline-container-org61d6e49" class="outline-3">
 <h3 id="org61d6e49"> <a href="#org61d6e49"></a> <a href="https://note.com/giraisan/n/n22236d177a30">超本気解釈！オーケンの「香菜、頭を良くしてあげよう」｜桃子アイスさん｜note</a></h3>
 <div class="outline-text-3" id="text-org61d6e49">
 <p>
面白い考察。
</p>
</div>
</div>
</div>
 <div id="outline-container-orgcceb23e" class="outline-2">
 <h2 id="orgcceb23e"> <a href="#orgcceb23e">GitHub</a></h2>
 <div class="outline-text-2" id="text-orgcceb23e">
</div>
 <div id="outline-container-orgcb88056" class="outline-3">
 <h3 id="orgcb88056"> <a href="#orgcb88056"></a> <a href="https://github.com/github/linguist/blob/master/lib/linguist/languages.yml">linguist/languages.yml at master · github/linguist</a></h3>
 <div class="outline-text-3" id="text-orgcb88056">
 <p>
GitHubが対応してる言語の色が網羅されている。
</p>
</div>
</div>
 <div id="outline-container-org2c55941" class="outline-3">
 <h3 id="org2c55941"> <a href="#org2c55941"></a> <a href="https://github.com/abcdw/rde">abcdw/rde: Tools for managing reproducible development environments. Mirror of https://sr.ht/abcdw/rde/</a></h3>
</div>
 <div id="outline-container-org1f2ff0e" class="outline-3">
 <h3 id="org1f2ff0e"> <a href="#org1f2ff0e"></a> <a href="https://github.com/htop-dev/htop">htop-dev/htop: htop - an interactive process viewer</a></h3>
</div>
</div>
 <div id="outline-container-org3bd85f4" class="outline-2">
 <h2 id="org3bd85f4"> <a href="#org3bd85f4">Essay</a></h2>
 <div class="outline-text-2" id="text-org3bd85f4">
</div>
 <div id="outline-container-orge1e9182" class="outline-3">
 <h3 id="orge1e9182"> <a href="#orge1e9182"></a> <a href="https://note.com/masa_hr/n/n3b390d2ee5e1">ポールグレアム HOW TO DO GREAT WORK ｜HR_researcher</a></h3>
 <div class="outline-text-3" id="text-orge1e9182">
 <blockquote>
 <p>
偉大な仕事をしたいと思っているほとんどの人にとって、正しい戦略はあまり計画を立てないことだと思う。それぞれの段階で、最も興味深く、将来への最良の選択肢を与えてくれそうなことは何でもする。私はこのアプローチを “風上にとどまる ”と呼んでいる。偉大な仕事を成し遂げた人の多くは、このようにしてきたようだ。
</p>
</blockquote>
</div>
</div>
 <div id="outline-container-org034022f" class="outline-3">
 <h3 id="org034022f"> <a href="#org034022f"></a> <a href="https://www.amazon.co.jp/%E6%96%B0%E8%A3%85%E7%89%88-%E3%81%AA%E3%81%9C%E9%81%B8%E3%81%B6%E3%81%9F%E3%81%B3%E3%81%AB%E5%BE%8C%E6%82%94%E3%81%99%E3%82%8B%E3%81%AE%E3%81%8B-%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3%E9%81%8E%E5%89%B0%E6%99%82%E4%BB%A3%E3%81%AE%E8%B3%A2%E3%81%84%E9%81%B8%E6%8A%9E%E8%A1%93-%E3%83%90%E3%83%AA%E3%83%BC-%E3%82%B7%E3%83%A5%E3%83%AF%E3%83%AB%E3%83%84/dp/4270007087">新装版 なぜ選ぶたびに後悔するのか オプション過剰時代の賢い選択術 | バリー シュワルツ, 瑞穂 のりこ |本 | 通販 | Amazon</a></h3>
 <div class="outline-text-3" id="text-org034022f">
 <p>
選択肢はあればあるほど幸せとは限らない。
</p>
</div>
</div>
 <div id="outline-container-orgf315d0c" class="outline-3">
 <h3 id="orgf315d0c"> <a href="#orgf315d0c"></a> <a href="https://cruel.org/wired/wiredindex.html">My Articles for WIRED Japan</a></h3>
 <div class="outline-text-3" id="text-orgf315d0c">
 <p>
山形浩生の、WIREDでの記事。
</p>
</div>
</div>
 <div id="outline-container-orgfff9c69" class="outline-3">
 <h3 id="orgfff9c69"> <a href="#orgfff9c69"></a> <a href="https://gigazine.net/news/20230508-wikipedia-lamest-edit-wars/">Wikipedia公式の「不毛なWikipedia編集合戦」事例集 - GIGAZINE</a></h3>
 <div class="outline-text-3" id="text-orgfff9c69">
 <p>
不毛な記事リスト。
</p>
</div>
</div>
 <div id="outline-container-org785e370" class="outline-3">
 <h3 id="org785e370"> <a href="#org785e370"></a> <a href="https://the-buchiblo.com/2019/02/18/post-2440/">裸祭りってすごい思ったこと。 | Buchiblo</a></h3>
 <div class="outline-text-3" id="text-org785e370">
 <p>
裸祭りから見えてくる日本経済の停滞論。面白い。
</p>
</div>
</div>
 <div id="outline-container-org5d07e0c" class="outline-3">
 <h3 id="org5d07e0c"> <a href="#org5d07e0c"></a> <a href="https://blog.gingerbeardman.com/2019/05/11/back-in-time-vintage-maps-of-akihabara/">Back In Time: Vintage Maps of Akihabara (1976–2001) ⌘I Get Info</a></h3>
 <div class="outline-text-3" id="text-org5d07e0c">
 <p>
秋葉原の地図集。
</p>
</div>
</div>
 <div id="outline-container-org5e6961f" class="outline-3">
 <h3 id="org5e6961f"> <a href="#org5e6961f"></a> <a href="https://ken-horimoto.com/">こっちは遊びでやってんだよ！ | 堀元見のブログ</a></h3>
 <div class="outline-text-3" id="text-org5e6961f">
 <p>
面白い。
</p>
</div>
</div>
 <div id="outline-container-org5d24a3a" class="outline-3">
 <h3 id="org5d24a3a"> <a href="#org5d24a3a"></a> <a href="https://www.amazon.co.jp/exec/obidos/ASIN/4122067375/hatena-blog-22/">Amazon.co.jp: 富士日記(上) 新版 (中公文庫 (た15-10)) : 武田 百合子: Japanese Books</a></h3>
 <div class="outline-text-3" id="text-org5d24a3a">
 <p>
リアルな日記。
</p>
</div>
</div>
 <div id="outline-container-orgde6b535" class="outline-3">
 <h3 id="orgde6b535"> <a href="#orgde6b535"></a> <a href="http://www-comm.cs.shinshu-u.ac.jp/david/papers/stories/japanese/hamming.pdf">あなたとあなたの研究</a></h3>
 <div class="outline-text-3" id="text-orgde6b535">
 <p>
すごい実績を上げる科学者と、それほどでない科学者の違いはなにか。
</p>
</div>
</div>
 <div id="outline-container-orgfdb3a0e" class="outline-3">
 <h3 id="orgfdb3a0e"> <a href="#orgfdb3a0e">知っておきたかったこと</a></h3>
 <div class="outline-text-3" id="text-orgfdb3a0e">
 <p>
人生の指針として保存用にコピーしておく。
 <a href="http://practical-scheme.net/trans/hs-j.html">What You’ll Wish You’d Known</a>
</p>

 <div class="org-src-container">
 <pre class="src src-nil">知っておきたかったこと
--- What You'll Wish You'd Known
Paul Graham, January 2005
Copyright 2005 by Paul Graham.
これは、Paul Graham：What You'll Wish You'd Known を、原著者の許可を得て翻訳・公開するものです。

<版権表示>
本和訳テキストの複製、変更、再配布は、この版権表示を残す限り、自由に行って結構です。
(「この版権表示」には上の文も含まれます。すなわち、再配布を禁止してはいけません)。
Copyright 2005 by Paul Graham
原文: http://www.paulgraham.com/hs.html
日本語訳：Shiro Kawai (shiro ＠ acm.org)
<版権表示終り>

Paul Graham氏のエッセイをまとめた『ハッカーと画家』の 邦訳版が出版されました。
出版社の案内ページ Amazon.co.jp サポートページ

2005/01/22 翻訳公開
2005/01/24 水落毅様より誤記の訂正を反映
このエッセイは、ある高校の講演依頼を受けて準備したものである。 その高校のお偉いさん方が反対して、結局私の講演はキャンセルされたのだが。

こんど高校で講演することになったと言ったら、ぼくの友達はみんな 興味を持って尋ねてきた。高校生に向かってどんな話をするんだい。 だからぼくは逆に聞き返したんだ。君が高校生の時に、誰かがこのことを 教えていてくれたらなぁ、と思うことってあるかい。 そう聞くと、みんな自分のことを語りはじめたんだけれど、 だいたい誰も同じようなことを思っていたんだ。 そこで今日は、ぼくらがみんな、 誰かに教えてもらいたかったなあと思っていることを話そうと思う。

まず、高校にいるうちは知らなくてもいいことから始めよう。 人生で何を為すかってことだ。大人はいつも、君は人生において 何を成し遂げたいかって聞くものだから、答えを考えておかなくちゃ いけないなんて思っているんじゃないかな。 実は大人がこの質問をするのは、単に会話を始めるためなんだ。 君がどんな人間かを知りたくて、そしてこの質問をすればとにかく 君は何かを話し出すだろう。潮溜りのヤドカリを突っついて どんな反応をするか見てみるのと同じさ。

ぼくが高校生に戻ってこの質問を受けたとしたら、 まず何が可能かを学ぶことだと答えるだろう。 人生を賭ける仕事を選ぶのに急ぐ必要なんてない。 必要なのは、自分は何が好きなのかを発見することだ。 上手くできるようになりたいなら、そのことが好きじゃなくちゃだめだからね。

何が好きかを決めるのなんて一番簡単なことだと思うかもしれない。 でもやってみると、それはとても難しい。理由のひとつは、 仕事で実際にどういうことをしているかっていうはっきりしたイメージを 持つことが、多くの仕事では難しいからだ。例えば医者という仕事の実際は、 テレビで描かれるようなものじゃない。もっとも医者の場合は、病院で ボランティアをすれば本物の医者を見る機会が得られるけれどね [1]。

それどころか、今決して学ぶことが出来ない仕事っていうのもある。 今はまだ誰もやっていないような仕事だ。ぼくがこれまでの10年間でやってきた 仕事のほとんどは、ぼくが高校生の時には存在していなかった。 世界はどんどん変化しているし、変化のスピードも速くなってる。 こんな世界では、決まった計画を持つことはあまりうまくない。

それでも毎年5月になると、全国津々浦々の卒業式で決まりきった演説が 聞かれることになる。テーマはこうだ。「夢をあきらめるな。」 ぼくはその真意を知っているけれど、この表現は良いものじゃない。 だって、早いうちに計画を立ててそれに縛られることを暗示しているからね。 コンピュータの世界では、これに名前までついている。 「早すぎる最適化」というんだ。別の言葉で言い替えると「大失敗」ということだ。 演説ではもっと単純にこう言うべきだろうね。「あきらめるな。」

この言葉の真意は、士気を失うなってことだ。 他の人に出来ることを自分は出来ないと思っちゃだめだ。 それに、自分の可能性を過小評価してもいけない。 すごいことを成し遂げた人を見て、自分とは人種が違うと思うかもしれない。 しかも伝記ではそういう幻想はますます誇張される。伝記を書く人っていうのは 対象となる人物にどうしても畏敬の念を抱くものだし、物語の結末がわかっているから そこに至るまでの人生のできごとをまるで運命に導かれたように、 内なる天才が徐々に現れて来るように描きたくなるんだ。 実際のところ、もし16歳のシェークスピアやアインシュタインが君と同級生 だったとしたら、たぶん彼らは才能を現しているだろうけれど、それ以外は 君の他の友達とさほど変わらないはずだとぼくは思う。

こう考えるのは、おっかないことだ。彼らがぼくらと同じなんだとしたら、 彼らはすごいことを成し遂げるためにものすごい努力をしたってことになる。 そう思うのはこわいから、ぼくらは天才というものを信じたがるんだ。 ぼくらが怠けている言い訳ができるからね。 もし彼らが、魔法のシェークスピア属性やアインシュタイン属性のせいで 素晴らしいことを成し遂げたんだとすれば、ぼくらが同じくらい すごいことをできなくてもぼくらのせいじゃないことになる。

天才なんてない、って言ってるわけじゃないよ。 でも、二つの理論を選ぶときに、一方は怠惰であることを正当化するものだと したら、たぶんもう一方の理論が正しい。

ここまでで、卒業演説の「夢をあきらめるな」から、 「他の誰かに出来たなら、きみにも出来る」が彫り出せた。 でもこれはもっと彫り進めることができる。 生まれついての能力の差というものは多少はある。 過大評価されがちだけど、無くは無い。 例えば背が120cmしかない人がいつかNBAでプレーしたいんだと言った時に、 本当に頑張れば何でも出来るよというのは空々しく聞こえるだろう。 [2]

だから、卒業演説はこんなふうになるだろう。 「きみと同じ能力を持つ誰かができることなら、きみにもできる。 そして自分の能力を過小評価しちゃいけない。」 でも、よくあることだけれど、真実に近付こうとするほど 多くの言葉を費さなくちゃならなくなる。 かっこよく決まっている、でも正しくないスローガンを、 泥をかき混ぜるみたいにいじってみたわけだが、 これじゃあまり良いスピーチにはならなさそうだ。 それに、これじゃ何をすべきかってこともよくわからない。 「きみと同じ能力」って? 自分の能力って何だろう?

風上
この問題の解法は、反対側からやってみることだ。 ゴールを最初に決めてそこから逆算するんじゃなく、 より良さそうな状況に向けて少しづつ前に進んでゆくんだ。 成功した人の多くは実際にはそうやって成功したんだ。

卒業演説方式では、きみはまず20年後にどうなりたいかを決めて、 次にそこに至るには今何をすればいい、と考える。 ぼくが提案するのは逆に、将来のことは一切決めないでおいて、 今ある選択肢を見て、良さそうな選択肢がより増えるものを選ぶってことだ。

時間を無駄にしてない限り、実際に何をするかってことはあまり問題じゃない。 面白いと思えて、選択肢が増えるものなら何でもいい。増えた選択肢のどれを 選ぶかなんて後で考えればいいんだ。

たとえば、君が大学の1年生で、数学と経済学のどっちを専攻しようかと 迷っているとする。この場合はね、数学の方が選択肢がひろがるんだ。 数学からはほとんどどの分野へも進むことができる。数学を専攻していたら、 経済学の大学院へ進むのは簡単だろう。でも経済学を専攻して、 数学の大学院へ進むのは難しい。

グライダーを考えてみるといい。グライダーはエンジンを持っていないから、 風上に向かって進もうとすると高度を大きく失うことになる。 着陸に適した地点よりずっと風下に行っちゃったら、打てる手はひどく 限られるものになるだろう。風上にいるべきなんだ。 だからぼくは「夢をあきらめるな」のかわりにこう言おう。「風上をめざせ」。

でも、どうすればいい? 数学が経済学の風上だったとして、 高校生はそんなことを知っていなくちゃならないんだろうか。

もちろん知らないだろう。だから、風上を自分で見つけ出さなくちゃならない。 風上を知る方法のヒントをいくつかあげよう。 賢い人々と、難しい問題を探すことだ。賢い人々は自分達で固まりがちだ。 そういう集団を見つけたら、たぶんそれに参加する価値はある。 但し、そういう集団を見つけることは簡単じゃない。 ごまかしがたくさんあるからだ。

大学生になったばかりのときには、大学のどの学部もだいたい似たように見える。 教授たちはみんな手の届かない知性の壇上にいて、凡人には理解不能な論文を 発表している。でもね、確かに難しい考えがいっぱい詰まっているせいで 理解できないような論文もあるけれど、何か重要なことを言っているように 見せかけるためにわざとわかりにくく書いてある論文だっていっぱいあるんだ。 こんなふうに言うと中傷に聞こえるかもしれないけれど、 これは実験的に確かめられている。有名な『ソーシャル・テクスト』事件だ。 ある物理学者が、人文科学者の論文には、 知的に見えるだけの用語を連ねたでたらめにすぎないものがしばしばあると考えた。 そこで彼はわざと知的に見えるだけの用語を連ねたでたらめ論文を書き、 人文科学の学術誌に投稿したら、その論文が採択されたんだ。

一番良い防御は、常に難しい問題に取り組むようにすることだ。 小説を書くことは難しい。小説を読むことは簡単だ。 難しいということは、不安を感じるということだ。 自分が作っているものが上手くいかないかもしれないとか、 自分が勉強していることが理解出来ないんじゃないかという不安を 感じていないなら、それは難しくない問題だ。 ドキドキするスリルがなくちゃ。

ちょっと厳しすぎる見方じゃないかって思うかい。 不安を感じなくちゃダメだなんて。 そうだね。でもこれはそんなに悪いことじゃない。 不安を乗り越えれば歓喜が待っている。 金メダルを勝ち取った人の顔は幸福に満ちているだろう。 どうしてそんなに幸福なのかわかるかい。安心したからさ。

幸福になる方法がこれしかないと言っているんじゃないよ。 ただ、不安の中にも、そんなに悪くないものがあるって言いたいんだ。

野望
「風上をめざせ」というのは、現実には「難しい問題に取り組め」という ことだった。そして、君は今日からそれを始めることができる。 ぼくも、このことに高校にいる時に気付いていたらなと思うよ。

たいていの人は、自分がやってることを上手くできるようになりたいと 思う。いわゆる現実社会では、この要求はとても強い力なんだ。 しかし高校では、上手くできたからっていいことはあまりない。 やらされていることが偽物だからだ。 ぼくが高校生だった時は、高校生であることが自分の仕事なんだって思ってた。 だから、上手くやれるようになる必要があることっていうのは、 学校でいい成績をあげることだと思ってた。

その時のぼくに、高校生と大人の違いは何かと聞いたなら、 たぶん大人は生活のために稼がなくちゃならない、と答えていただろう。 間違いだ。ほんとうの違いは、大人は自分自身に責任を持つということだ。 生活費を稼ぐのはそのほんの小さな一部にすぎない。 もっと大事なのは、自分自身に対して知的な責任を取ることだ。

もしもう一回高校をやりなおさせられるとしたら、ぼくは学校を 昼間の仕事のようにあしらうだろう。学校でなまけるということじゃないよ。 昼間の仕事のようにやる、っていうのは、それを下手にやるってことじゃない。 その意味は、それによって自分を規定されないようにするってことだ。 たとえば昼間の仕事としてウェイターをやっているミュージシャンは、 自分をウェイターだとは思わないだろう [3]。 同じように、ぼくも、自分を高校生だとは思わないだろうね。 そして昼間の仕事が済めば、本当の仕事を始めるだろう。

高校時代を思い出して一番後悔することは何かって尋ねると、 たいていみんな同じ答えを返す。時間を大いに無駄にしたってね。 君が、今こんなことをしてて将来後悔することになるだろうなと 思っているなら、きっと後悔することになるよ[4]。

これは仕方ないと言う人もいる。高校生はまだ何もきちんと出来ないからってね。 ぼくはそうは思わない。高校生が退屈しているというのがその証拠だ。 8歳の子供は退屈しない。8歳の時には「ぶらつく」かわりに「遊んで」いたはずだ。 やってることは同じなのにね。そして8歳の時、ぼくは退屈することがほとんど 無かった。裏庭と数人の友達がいれば、一日中遊んでいることができた。

今振り返ってみれば、中学高校でこれがつまらなくなった理由は、 ぼくが他の何かをする準備が出来たからだった。 子供であることに飽きてきたんだ。

友達とぶらついちゃだめだなんて言ってないよ。 誰ともつき合わなかったら、仕事しかしないむっつりした小さなロボットに なるしかない。友達と出かけるのは、チョコレートケーキみたいなもんだ。 時々食べるからおいしい。毎食チョコレートケーキを食べていたら、 たとえどんなに好きだとしても、3食目には吐き気がしてくるだろう。 高校で感じる不安感はまさにそれ、精神的な吐き気なんだ [5]。

良い成績を取る以上に何かしなくちゃならないと聞いたら、 『課外活動』のことだと思うかもしれない。 でも君はもう、ほとんどの『課外活動』がどんなにばかげたものかを知っているよね。 チャリティの寄付集めは称賛されるべきことかもしれないが、 それは難しいことじゃない。 何かを成し遂げるってことじゃないからだ。 何かを成し遂げるっていうのは、たとえば上手く文章を書けるようになるとか、 コンピュータをプログラムできるようになるとか、 工業化以前の社会の生活が実際どんなものだったかを知るとか、 モデルを使って人間の顔を書くことを学ぶとか、そういうことだ。 この手の活動は、大学入試願書に一行で書けるようなものにはなかなかならない。

堕落
大学に入ることを人生の目標にするのは危険なことだ。 大学に入るために自分の能力を見せなくちゃならない相手っていうのは、 概して鋭いセンスを欠いている。多くの大学では、 きみの合否を決めるのは教授じゃなくて入学管理者[訳註1]で、 彼らは全然賢くない。知的社会の中では彼らは下士官だ。 きみがどれだけ賢いかなんて彼らに分かりはしない。 私立の進学校が存在することが、その証明になっている。

入試に受かる見込みが上がらないのに多額の金を学校に払う親はほとんどいない。 私立の進学校は、入試に受かるための学校であることを明示している。 でも立ち止まって考えてみたまえ。同じくらいの子供が、 ただ地域の公立高校だけに行くより私立の進学校に行った方が入試に受かりやすくなるってことは、 私立の進学校は入試のプロセスをハックできるってことだ [6]。

君達の多くは、今人生でやるべきことは大学入試に受かるように なることだと思っているだろうね。でもそれは、自分の人生を空っぽの プロセス、それを堕落させるためだけで一つの業界が存在しているほどの プロセスに押し込めていることになる。 シニカルになるのも無理ないよ。 君が感じている不快感は、リアリティTVのプロデューサーや タバコ会社の重役が感じているものと同種のものだ。 君の場合は給料をもらっているわけでもないのにね。

じゃあどうしようかね。 ひとつ、やっちゃいけないのは反抗だ。 ぼくは反抗した。それは間違いだった。 ぼくは、自分達の置かれた状況をはっきり認識していなかったけど、 なにか臭いものを感じていた。だから全部投げ出したんだ。 世界がクソなら、どうなろうと知ったことか、ってね。

教師の一人が試験対策のアンチョコを使っているのを見つけた時に、 ぼくはこれでおあいこだと思った。そんな授業でいい点数をもらって どんな意味があるっていうんだ。

今、振り返ってみれば、ぼくは馬鹿だったと思うよ。 これはまるで、サッカーで相手にファウルされて、おまえ反則しただろ、 ルール違反だ！と怒ってグランドから立ち去るようなものだ。 反則はどうしたって起きる。そうなった時に、冷静さを失わないことが重要だ。 ただゲームを続けるんだ。

きみをこんな状況に押し込めたのは、社会がきみに反則したからだ。 そう、きみが思っているように、授業で習うほとんどのことはクソだ。 そう、きみが思っているように、大学入試は茶番だ。 でも、反則の多くと同じように、悪意があってそうなったわけじゃない [7]。 だから、ただゲームを続けるんだ。

反抗は服従と同じくらいばかげたことだ。 どちらにしてもきみは他人に言われたことに縛られている。 一番良いのは、直角の方向に足を踏み出すことだ。 言われたからただやる、でもなく、言われたからやらない、でもない。 かわりに、学校を昼間の仕事にするんだ。昼間の仕事だと考えれば 学校なんて楽勝だよ。3時には終わるんだし、なんなら自分のやりたいことを 内職しててもいい。

好奇心
じゃあ、本当の仕事は何になるんだろう。 きみがモーツァルトでない限り、やるべきことはまずそれを探し出すことだ。 やりがいのあることって何だろう。すごい発想をする人達はどこにいるだろう。 そして一番重要なこと：自分は何に興味があるだろう。 「適性」という単語はちょっと誤解を招きやすい。 元から備わった性質のように思われるからね。 最も強い種類の適性とは、ある種の問題に対するどん欲な興味だけれど、 そういう興味は後天的に獲得するものが多い。

この考えの変化したものは、現代の文化においては「熱意」という言葉で 呼ばれている。最近、ウェイター募集の広告で「サービスに対する熱意」を 持った人を求めている、というのを見た。 本物の熱意は、ウェイターくらいじゃおさまらないものだ。 それに熱意という単語も良くない。むしろそれは好奇心と呼ぶのがいい。

子供は好奇心旺盛だ。ただ、ぼくがここで言っている好奇心は 子供のとはちょっと違う。子供の好奇心は広くて浅い。 ランダムに色々なことについて「どうして?」と尋ねる。 多くの人は、大人になるまでにこの好奇心が全部渇いてしまう。 これは仕方無いことだ。だって何についても「なぜ?」と尋ねていたら 何もできないからね。でも野心を持つ大人では、 好奇心は全部渇いてしまうのではなく、狭く深くなってゆくんだ。 泥の庭が井戸になるんだ。

好奇心を持っていると、努力が遊びになる。 アインシュタインにとっては、相対性理論は試験のために勉強しなくちゃならない 難しい式の詰まった本ではなかったはずだ。 それは解き明かしたい神秘に見えていただろう。 だからたぶん、彼にとって相対性理論を見出すことは、 今の学生が授業でそれを学ぶことほど、努力とは感じられなかったんじゃないかな。

学校で植え付けられる幻想の一番危険なものは、 素晴らしいことを為すには自分に厳しくなければならないというものだ。 多くの科目はあまりに退屈に教えられるから、 自律心が無いと全部に出席することなんてできやしない。 大学に入ってすぐに、ぼくはヴィドゲンシュタインの言葉を読んで びっくりした。彼は自律心が無くて、たかが一杯のコーヒーであろうと 欲しくなったら我慢することができなかったというんだ。

今、ぼくは素晴らしい仕事をした人を何人も知っているけれど、 みんな同じなんだ。自分を律するということをほとんどしない。 延ばせることはぐずぐず先に延ばすし、興味のないことをやらせようと しても全くの無駄だ。そのうちの一人ときたら、自分の結婚式に 出席してくれた人へのお礼の手紙を出してない。 結婚して4年経つのに。もう一人は、メールボックスに26000通のメールをため込んでる。

自律心が全くのゼロだったら困るよ。走りに行こうかなと思うくらいの 自律心は必要だ。ぼくも時々、走るのが面倒だなあと思うけれど、 一度走り出せばあとは楽しめる。そして何日か走らないと具合が悪くなる。 素晴らしい仕事をする人にとっても同じことなんだ。 仕事をしてないと具合が悪くなるし、仕事を始めるだけの自律心は 持っている。ひとたび仕事を始めれば、興味の方に圧倒されて、 自律心は必要なくなるんだ。

シェークスピアは偉大な文学を産み出そうと歯を食いしばって 勤勉に努力したって思うかい。そんなわけないさ。 きっと楽しんでいたはずだ。だから素晴らしい作品が書けたんだ。

いい仕事をしたいなら、必要なのは見込みのある問題に対する 大きな好奇心だ。アインシュタインにとっての一番大事な瞬間は、 マクスウェルの方程式を眺めて、これはどうなっているんだろうと 自問したところにあった。

生産的な問題に照準を合わせるのには長い時間がかかる。 本当の問題は何なのかを見つけるだけで何年もかかるかもしれないからね。 極端な例を言えば、たとえば数学だ。数学を嫌う人は多い。 でも学校で「数学」の名前でやらされていたことは、 実際に数学者がやっていることとはほど遠いんだ。

偉大な数学者のG. H. ハーディは、高校の時は数学が嫌いだったと 言っている。ただ他の生徒より高い点数をとれたから選択しただけだったと。 後になって、彼は数学が面白いということに気づいた。 質問に正しく答えることのかわりに、自分で問題を見つけるようになってからね。

ぼくの友達の一人は、学校で提出するレポートに苦しんでいると 母親が「それを楽しむ方法を見付ければいいのよ」っていうんだとぼやいていた。 でもそれが、やるべきことなんだ。世界を面白くする問いを見つけ出すんだ。 素晴らしい仕事をした人は、ぼくらと違った世界を見ていたわけじゃない。 ただこの世界の中の、ほんのちょっとした、でも不思議なことがらに気づいただけなんだ。

これは学問だけの話じゃない。「車はどうして贅沢品じゃなきゃいけないんだ? 車が日用品になったらどうなるだろう?」これがヘンリー・フォードの発した 偉大な問いだった。フランツ・ベッケンバウアー[訳註2]の問いはこうだった。 「どうしてみんな自分のポジションに留まってなくちゃならないんだ? ディフェンダーがシュートしたっていいじゃないか。」

現在
偉大な問いを発するのに何年もかかるとしたら、 いま、16歳の君は何をしたらいいだろう。 質問を見つける準備をするんだ。 偉大な問いは突然現れるんじゃない。徐々に頭の中に結晶してくるんだ。 それを結晶させるのは経験だ。だから、偉大な問いを見つけるのに 探し回ってもだめだ。「ぼくができる偉大な発見は何だろう」なんて ぼんやり考えててもだめだ。そんな質問に答えはない。答えがあるなら 既に見つけてるはずだからね。

大きなアイディアが頭に浮かぶようになるには、大きなアイディアを 追い求めるんじゃなく、自分が興味を持つことにたくさんの時間を費すことだ。 そして頭を柔軟に開いておいて、いつでも大きなアイディアが巣を作れるように しておくんだ。アインシュタイン、フォード、ベッケンバウアー、 みんなこのレシピを使ったんだ。彼らはみな、ピアニストがピアノの鍵盤を 知りつくしているのと同じように、自分の仕事を知りつくしていた。 だから何かひっかかりがあれば、すぐにそれに気づけるという自信を持っていたんだ。

今、何を、どうやってすればいいかって? まず興味の持てるプロジェクトを選ぶことだ。ある分量の資料を研究するとか、 何かを作ってみるとか、何かの問題の答えを見つけてみるとか。 ひと月以内で終わらせられるようなプロジェクトがいい。 そして、ちゃんと終わらせられる手段があるようなものにする。 少しは頑張らなくちゃならないようなものがいいけれど、ほんとうに少しだけでいい。 特に最初はね。もし二つのプロジェクトのどっちを選ぶか迷ったら、 面白そうな方を選ぼう。失敗したら、もう一方を始めればいいんだ。 これを繰り返す。そうすると次第に、ちょうど内燃機関みたいに、 このプロセスが自分で走り出すようになる。一つのプロジェクトが次の プロジェクトを生み出すようになるんだ。(そうなるまでには何年もかかるけれどね。)

学校に受けがよさそうというだけでプロジェクトを選ぶのは良くない。 特にそれで制約を受けたり、それが課題のように感じられるならね。 友達を巻き込みたかったら声をかけてもいいだろう。 でもあまりたくさんでない方がいいし、ただ群れたがるだけの人は避けたほうがいい。 友達は士気を保つのにいい (一人だけで始められるベンチャー企業はほとんどない)。 でも秘密にやることにも利点はある。秘密のプロジェクトというだけで 何かわくわくするものがあるし、失敗したって誰にもばれないんだから、 大胆な挑戦ができる。

プロジェクトが君の将来目指すものにあまり関係なさそうだったとしても、 心配することはない。目指すものに到達する道っていうのは、君が思うより ずっと大きく曲がりくねるものなんだ。プロジェクトをやることで、道は伸びてゆくんだ。 一番大事なのは、わくわくして取り組むことだ。そうすれば経験から学ぶことができるからだ。

人に言えないような動機だからって、それを抑えないようにしよう。 欲望の中で最も強いもののひとつは、他人よりうまくやりたいということだ。 ハーディはその気持ちで数学を始めたと言ったが、 それは別に珍しいことじゃないと思う。それを公に認める人は少ないけれど。 他の強い動機としては、知らなくてよいとされていることを知りたいとか、 やっちゃいけないとされていることをやりたいという欲望がある。 大胆な行動をしたいというのも、これに近い欲望だ。 16歳の生徒が小説を書けるなんて多くの人は思っていない。 そういうことに挑戦すれば、どんな結果であっても、プラス点になるはずだ。 本当に大失敗したところで、周囲の期待より悪いってことはないわけだからね [8]。

悪いモデルに気をつけよう。特に怠けることを肯定するようなものにね。 ぼくは高校生の時に、有名作家がやっているような「実存主義的」短篇小説を いくつか書いたことがある。そういうものっていうのは、 読んで面白い小説を書くよりも、たぶん簡単だ。 これは危険信号なんだ。そのことを知っているべきだった。 実際、ぼくが書いたものはどれも退屈だった。 ただ、有名作家みたいに知的で厳粛なものを書くっていうことがすごいことに 思えてただけだったんだ。

今はもう十分に経験を積んだから、そういう有名作家が本当は全然たいしたこと ないってことがわかる。実は有名人のほとんどはそうなんだ。 短期的に見ると、ある仕事の質っていうのは有名度とはほとんど関係がない。 今思えば、ぼくは何かカッコいいことをしたいなんて焦らないで、 ただやりたいことをやってればよかったはずなんだ。 それが実は、カッコいい仕事への道なんだ。

多くのプロジェクトで大事な要素は、もうほとんどそれ自体が一つの プロジェクトになるようなものなんだが、良い本を見つけることだ。 ほとんど全ての教科書はダメだ[9]。 だからたまたま手近にあった本を見て、それがその分野の全てだとは 思わないほうがいい。ごくわずかの良い本を積極的に探さないとならない。

大事なことは、外に出てなにかを為すことだ。黙って座って教えられるのを 待つんじゃなく、自分から踏み出して学ぶんだ。

入試の試験官に自分の人生を合わせる必要なんてない。 自分の好奇心に合わせて人生を作っていけばいい。 野心的な大人はみんなそうしてる。それに、君は待つ必要はないんだ。 大人になるまで待たなくてもいい。だって、ある年齢になったり、 どこかの学校を卒業した時にぱちんと大人になるようなスイッチなんて ないんだからね。自分の人生に責任を持つことを決心したその時に、 君は大人になるんだ。何歳だってできることだ [10]。

ばかげだ話だと思うかい。君はこう思うかもしれないね。 「ぼくは未成年だし、金もないし、親と一緒に住まなくちゃならないし、 一日中大人に言われたことをやらなくちゃならないのに！」ってね。 でもね、大人になって仕事をしていたって、やっぱり似たような 面倒な制限がいろいろあるものさ。でもやる人はちゃんとやり遂げる。 子供であることが制限の多いことだって思ってるなら、子供を持ったら どんなことになるか考えてごらん。

大人と高校生の唯一の違いは、大人はものを成し遂げる必要があることを 知っていて、高校生はそうでないということだ。 多くの人々は、それをだいたい23歳くらいの時に知る。 でも、こっそりいまから始めることを、ぼくは君達に勧めたい。 さあ、始めよう。そうすれば、君達は史上初めて、高校の時に時間を無駄にしなかったと 言える世代になるかもしれない。

原註
[1] ぼくの友人の医者は、 これでも医者の仕事が本当はどんなものかを知ることはできないだろうと言っている。 「どれだけ時間を費して、ほとんど自分の時間を持てない何年もの訓練を受けて、 そしていつだってポケベルで呼び出されることがどんなに煩わしいかなんて、 わかるわけないよ。」

[2] 彼が出来る一番の方法は、 おそらく独裁者になってNBAを脅して自分をプレイさせることだ。 現実的に、それに一番近い立場は労働長官になることだ。

[3] 昼間の仕事というのは、 本当の仕事(バンドで演奏したり、相対性理論を発明したり)に時間を費せるように、 生活費を稼ぐためにやるような仕事のことだ。

高校を昼間の仕事だと思うことは、生徒の何人かにとっては むしろ良い成績をとるのに役立つかもしれない。 授業をゲームだと思えば、内容自体に意味が無くてもがっかりすることはないだろう。

授業がどんなにひどくても、それなりの大学に入るには良い成績は 取っとかないとならない。そのこと自体は、やる価値のあることだ。 近年では、賢い人々の集団を見つけるのに大学は良い場所だからだ。

[4] 二番目に大きな後悔は、重要でないことを気にしすぎていたことだ。 特に、他の人にどう思われているかってことだね。

より正確に言えば、ランダムな人々にどう思われているかを気にするってことだ。 大人だって人にどう思われるかを気にするけれど、誰に思われるかって 点ではより選別していることが多い。

ぼくはだいたい30人くらい、意見を気にする友人がいる。 残りの世界の意見はぼくにとってはどうでもいい。 高校の問題は、まわりに居る人間が、自分の判断ではなくて 年齢と地域がたまたま一緒だったというだけで決まることだ。

[5] 時間を無駄にする 一番の要因は、気を散らすものだ。気を散らすものが無ければ、 自分が何もしていないということにすぐ気づいて、落ち着かなくなるはずだ。 どれだけ余分なことに気を取られてるかを知るには、こういう実験をしてみるといい。 週末にある程度の時間をとって、一人で座ってただ考えるんだ。 ノートを持っていてそれにメモを取るのはいい。けれど、他のものは 全て絶つ。友達も、テレビも、音楽も、電話も、インスタントメッセンジャーも、 メールも、ウェブも、ゲームも、本も、新聞も、雑誌も無しだ。 1時間もすれば、ほとんどの人は何か気を散らすものが欲しくてどうしようもなく なるはずだ。

[6] 私立の進学校が 入学審査官をだますためだけのものだって言うつもりはないよ。 普通は、より良い教育もしてくれる。でもこういう思考実験をしてみたまえ。 私立の進学校が、今と同じ質の教育をしてくれるんだが、そこに行くと ごくわずか (.001) の確率で入試に受かりにくくなるとする。 そしたらどれだけの親が子供を私立の進学校に行かせようとするだろうね。

もちろん、私立の進学校に行った子供はより多くのことを学んだのだから、 より大学の合格者としてふさわしいという議論はできる。 でもそれは経験的には誤りだ。 一番素晴らしい高校だって、そこで教えてくれることなんて 大学で学ぶことに比べたら誤差の範囲だからだ。 公立高校を卒業した子供は入学直後には多少の不利はあるかもしれないが、 2年生になればむしろリードするようになる。

(公立高校の生徒の方が賢いって言っているんじゃなくて、 どんな大学にも公立高校出身の学生がいるってことを言っている。 私立の進学校の方が入試に受かりやすいという前提を認めれば、 公立高校出身で試験に受かった生徒の方が平均的に高い能力を持っているということになる)

[7] どうして社会が君に ファウルするんだろう。その主な原因は、無関心だ。 高校を良くするという外圧が全く無いからだ。 航空管制システムは優れたシステムだが、それは そうでなくちゃ飛行機が落ちてしまうからだ。 企業は製品を作らないとライバルに客を取られてしまう。 でも学校がダメになっても飛行機は落ちないし、競争相手もいない。 高校は邪悪なのではなく、ただランダムなんだ。 でもランダムであることは、かなり悪いことだ。

[8] それに、もちろんお金という動機もある。 高校ではこれはあまり関係無いだろう。人が欲しがるようなものを 作れることは少ないからね。でも多くの偉大なものごとというのは、 お金を稼ぐために為された。 サミュエル・ジョンソンは、「金のため以外にものを書くやつなんて馬鹿だ」と 言っている。(多くの人は、彼は誇張してるんだと思いたがるけどね)。

[9] 大学の教科書だってひどいものだ。 大学に入ってみれば、教科書の多くは(いくつかの輝ける例外を除いては) その分野の第一人者が書いたものじゃないことがわかるだろう。 大学の教科書を書くのはあまり面白い仕事じゃないし、 お金のために書かれることが多い。面白くない仕事なのは、 出版社が色々注文をつけて来るからで、自分がやってることを 理解できない人間に注文をつけられるのは最悪なことだからだ。 高校の教科書では状況は もっと悪いらしい。

[10] 教師はいつも「大人のように振る舞いなさい」と君達に言っているかもしれない。 でも、本当に君達がそうすることを望んでいるかは怪しいものだ。 君達は騒がしくてまとまりが無いかもしれないけれど、 大人に比べたらずっと素直だ。 君達が本当に大人のように振る舞い出したら、それは例えば 大人達を君達の体に移し変えたようなものになるだろう。 FBIエージェントやタクシーの運転手や記者達が、 トイレに行くのにいちいち許可を得る必要があって、しかも一度に一人しか いけないなんて聞いてどういう反応をするか想像してごらん。 君達が教えられたことなんてひとつも守られないはずだ。 もし本当に大人達が高校に入ることになったら、最初にやることはきっと 組合を作って校則の改正を教師達と談判することだろうね。

このエッセイの下書きに目を通してくれた、Ingrid Bassett、Trevor Blackwell、 Rich Draves、Dan Giffin、Sarah Harlin、 Jessica Livingston、Jackie McDonough、Robert Morris、Mark Nitzberg、 Lisa Randall、Aaron Swartz、 それに、高校時代について私に語ってくれた他の多くの人々に感謝します。

訳註
訳註1：
入学管理者：原文admission officer。 米国の大学は入試一発ではなく、大学ごとのAdmission Officeが 志願者の高校での活動や成績、統一テストの結果などを勘案して合否を決定する。
訳註2：
フランツ・ベッケンバウアー Franz Beckenbauer：サッカー選手、監督。 「リベロ」のポジションを確立した。
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgfc07ff2" class="outline-3">
 <h3 id="orgfc07ff2"> <a href="#orgfc07ff2">好きなことをやるには</a></h3>
 <div class="outline-text-3" id="text-orgfc07ff2">
 <p>
ポール・グレアムのエッセイ。翻訳をコピペして、英文部分・訳注を削除。素晴らしい文章なので保存用。
</p>

 <blockquote>
 <p>
 <a href="http://www.naochan.com/deprecated/2006/01/19/">naoya_t memo @deprecated: 2006年01月19日 アーカイブ</a>
How to Do What You Love
2006年1月
January 2006
</p>

 <p>
好きこそものの上手なれ。
別に、耳新しい言葉ではない。
我々はこれを４単語に凝縮して言ってきた。「Do what you love（自分が一番好きなことをやりなさい）」と。
だがこれでは言葉足らずで、大事なところがちゃんと伝わらない。
好きなことをやると言っても、それは一筋縄で行くものではない。
</p>

 <p>
そもそも、これは我々の多くが子供時代に学んできたこととは異質の発想だ。
私が子供の頃には、仕事と楽しみは本質的にまったく正反対のことであるかのように思われた。
暮らしの中には２つの状態（state）があった。
時々大人たちに何かさせられる。これが「仕事」。
残りの時間にやりたいことができる。これが「遊び」。
時には大人たちがやれと言ってくるものが楽しかったりもしたし、同様に、時には遊びが楽しくなかったりもした。転んで怪我した時とか。
でも数えるほどしかない異常なケースを除いて、仕事はだいたい「楽しくないもの」とされてきた。
</p>

 <p>
仕事が楽しくないのは偶然だとは思えなかった。
学校は退屈だった。なぜなら大人になって仕事をするための準備の場だからだ。そうほのめかされていた。
</p>

 <p>
子どもの頃の世界は、２つのグループに分断されていた。大人と子供だ。
大人たちは、呪われた種族か何かであるかのように、働かなければならなかった。
子供たちは働かなくてもよかったものの、学校には行かなければならなかった。
学校は仕事の希釈バージョンであり、僕らが本物の仕事に備えるためのものであった。
学校が嫌いだ、と僕ら子供が言えば、大人の仕事はもっとひどいぞ、学校なんか楽勝だと大人たちは口を揃えた。
</p>

 <p>
とりわけ教師たちは、仕事は楽しくないものだ、と皆そう信じて疑っていないようだった。
それは驚くにはあたらない。だってほとんどの教師にとって仕事はつまらなかったのだから。
どうして、ドッジボールをする代わりに僕らは州都を暗記しなくちゃいけなかったのか？
同じ理由で、彼ら教師も、ビーチに横たわる代わりにガキどもを見張らなくちゃいけなかったんだ。やりたいことなどできなかった。
</p>

 <p>
小さな子供たちに彼らのやりたいことをやらせた方がいい、と言っているのではない。
子供たちはいくつかの物事を行うようにできているはずだ。
しかし、子供たちに退屈な仕事をさせるときには、退屈さは仕事に常について回る性質ではないこと、そしてまさに、今つまらない事をやらなければならないのは、後でもっと面白い事をやれるようにするためであることを子供たちに言っておくのが賢いだろう[註1]。
</p>

 <p>
９歳か１０歳の頃だったか、父が私にこう言ったことがある。
大きくなったら何でもなりたいものになれるんだよ、それを楽しめるなら、と。
あまりにも変わった話だったから、私はそれを正確に覚えている。
乾いた水を使え、とでも言われたようなものだった。
父の言葉の意味について私もいろいろ考えたが、まさか父が、働くことが文字通り、遊んでいるときに楽しいのと同じ意味で、楽しいことであり得る、と言おうとしていたのだとは思いもしなかった。
そのことを理解するには年月を要した。
</p>

 <p>
仕事
Jobs
</p>

 <p>
高校に上がる頃には、実際の仕事についての展望が見え始めていた。
大人たちが時々自分たちの仕事の話をしに来てくれたり、あるいは大人たちの仕事場を我々が見に行ったりもした。
いつでも、大人たちは自分の仕事を楽しんでいる、ということになっていた。
今思い返してみれば、そのうちの一人は本当に楽しんでいたかもしれないと思う。
自家用ジェットのパイロットをやっていた人だ。
でも、銀行の支店長が自分の仕事を楽しんでいたとは思わない。
</p>

 <p>
大人たちがあたかも自分たちの仕事を楽しんでいるかのように演じていた。主な理由はおそらく上流中産階級の慣習から来るもので、たぶんそうする建前になっていたのだと思う。
自分の仕事を嫌悪していると口にするのは、単に出世に響くというだけではなく、社会的な無作法にあたるのだろう。
</p>

 <p>
どうして自分がしている事を好きなふりをするのが慣例になっているのだろうか。このエッセイの最初の一文（好きこそものの上手なれ）がそれを説明している。
何かをうまくやるためにはその何かのことが好きでないといけないと言うのなら、成功して頂点にいる人たちは皆、自分のしていることが好きだということになる。上流中産階級のこの慣習はそこから来ているのだ。
アメリカじゅうの家という家にはこんな椅子があふれている。
持ち主はそうと知りもしないのだが、これは２５０年前にフランス国王のためにデザインされた椅子のn次の模造品だ。
ちょうどそれと同じように、仕事についての人々の慣習的な態度は、素晴らしい事を成し遂げた人々がとる態度のn次の模造品なのである。人々はそうと気づいていないのだが。
</p>

 <p>
なんという疎外(alienation)のレシピだろう。
自分が何をやりたいのかを考える年齢に達するまでに、ほとんどの子供は「自分の仕事を愛する」ということについて全く誤った考えをもたされてしまう。
学校は子供たちに、仕事は不愉快な義務であると見なすようにと教育してきた。
職につくということは学業よりさらに骨の折れることだ、と聞かされる。
それなのに大人たちは、自分たちのやっている事が好きだと言い張る。
子供たちが「自分はこの人たちとは違う。自分はこの世界に向いていない」と思ったとしても彼らを責められまい。
</p>

 <p>
実際、子供たちは三つの嘘を聞かされてきた。
学校でこれが仕事だと教わってきた物事は実は本物の仕事ではない。
大人の仕事は実は（必ずしも）学業よりひどいわけではない。
周りの大人の多くが自分の仕事が好きだと言うが、実は彼らは嘘をついていた。
</p>

 <p>
最も危険な嘘つきは、子供たち自身の両親かもしれない。
家族に高い生活水準を享受させるためにつまらない仕事を選ぶと、実際そうしている人は多いのだが、仕事はつまらないものだという考えを子供たちに感染させてしまうおそれがある。 [註2]
この場合に限っては、両親はむしろ身勝手であった方が子供にとっては良いのかもしれない。自分の仕事を愛するという手本を示せる両親は、子供にとっては高価な家よりもよほど助けになるだろう。
</p>

 <p>
大学に入った後でようやく、仕事についての観念が、生計を立てるという考えから抜け出すことができた。
その後、重要な問題はどうやってお金を作るかではなく、何に取り組むかということになってきた。
理想的にはこれらは重なり合うものだが、（特許庁におけるアインシュタインのような）いくつかの華々しい境界的事例が、これらが同一の問題ではないことを示している。
</p>

 <p>
仕事の定義はいまや「飢え死にすることを避けながら、世界に対し何らかの独自の貢献を行うこと」になった。
しかしそれまでの長い年月の習慣から、私の仕事観の中に依然として苦痛が大きな割合を占めていた。
仕事は依然として規律を必要としているように思える。
難問解決だけが大きな成果を生み出すが、難問解決が文字通り楽しいなんてことは有り得ないのだから。
それに取り組むために多大な努力を強いられることは間違いないのだ。
</p>

 <p>
何か痛みを伴うはずだと思っていたら、間違ったことをしていたとしてもそれに気づくとは考えにくい。
大学院での私の経験はそういうことに尽きる。
</p>

 <p>
上限と下限
Bounds
</p>

 <p>
好きなことをやれっていうけれど、一体どのくらい「好き」だったらいいのだろうか？
それが分からないと、仕事探しをどの辺りでやめたらいいのかも分からない。
（このくらい好きならいいや、と）「好き」の程度を低く見積もりすぎていると、実際多くの人がそうなのだが、仕事探しを早すぎる段階でやめてしまうことになりがちだ。
そして結局両親が選んだ仕事をすることになるか、金や名声を追い求めるか、あるいは惰性で流されるままに何かの仕事についてしまうのがオチだ。
</p>

 <p>
まずは上限。仕事がどのくらい好きなら十分だろうか。
「自分が好きなことをやる」というのは今この瞬間にいちばんやりたいことをするという意味ではない。
アインシュタインにだって多分、コーヒーを一杯飲みたいけれど、先ずは今やってることを済ませてからと自分に言い聞かせたことが何度もあったに違いない。
</p>

 <p>
仕事よりもやりたいことなんて何もない、というくらいに自分の仕事が大好きな人たちの話を読んだとき、私はとまどいを覚えたものだ。
そこまで好きになれるような仕事なんて、どんな種類であれ私にはひとつも思い当たらなかった。
こんな選択肢があったとしよう。
(a)今から１時間何かの仕事をする (b)ローマに瞬間移動して１時間散策する
仕事をする方を自分が選びたくなるような仕事って何かあっただろうか。
正直なところノーだ。
</p>

 <p>
しかし実際はほとんど誰もが、いつ何時であれ、難問に取り組むぐらいならカリブ海を漂流していたり、セックスをしたり、美味しいものを食べたりしていた方がいいと思うことだろう。
「自分が好きなことをする」ということに関する法則は、ある程度の長さの時間を前提としている。
それは「今この瞬間に一番幸せになれることをする」という意味ではなく、
たとえば１週間とか１ヶ月といったような、すこし長めの期間で見て一番幸せになれるようなことをする、という意味だ。
</p>

 <p>
非生産的な快楽には、いずれは飽きてしまうものだ。
しばらくすると、ビーチに横になっているのにも飽きてくる。
幸せなまま居続けたいのなら、何かやらなくてはいけない。
</p>

 <p>
そして下限だが、最低条件として、どんな非生産的な快楽にも負けないほど自分の仕事が好きでないといけない。
「余暇」という概念が何かの間違いではないかと思える程度に、自分のしていることを好きでないといけない。
自分の時間をすべて仕事に使えと言っているのではない。
働いていいのは、くたくたになってあれこれしくじり始める手前までだ。
仕事の後で、何か他のことをやりたくなる。ばかみたいな事でもいい。
でも、このひとときをご褒美だと思ったり、仕事に費やした時間をご褒美のために堪えた苦痛だと思ったりはしない。
</p>

 <p>
最低ラインをそこに設定したのは実際上の理由からだ。
もしあなたの仕事があなたの好きなことでないのなら、億劫で後回しにしがちになるだろう。
仕事するために、自分を無理やり奮い立たせないといけないだろうし、そうしたところで結果は極めて粗末なものになるだろう。
</p>

 <p>
幸せでいるためには、ただ楽しめるだけでなく、すごいと思うような事をしていないといけないと思う。
最後に、「すごい！これってかなりクールだ」と唸る位でないといけない。
何かを作らないといけないという意味ではない。
ハンググライダーの乗り方を覚えたり、外国語を流暢に話せるようになったりするのだって、少なくともしばらくの間は「すごい！これってかなりクールだ」と唸るには十分だろう。
ここでなくてはならないもの、それはテストだ。
</p>

 <p>
基準に達していないと思うもののひとつが、読書だ。
数学や自然科学（hard sciences）分野のいくらかの本を除けば、どれだけちゃんとその本が読めているかを測るテストはない。読書を仕事のように感じることがめったにないのはそのためだ。
生産的だと感じるためには、読んで得たもので何かしなければならない。
</p>

 <p>
私が一番いいと思っているのは、Gino Lee氏が教えてくれたテストだ。
友達を思わず「すごい」と唸らせるようなことをやってみるのだ。
でも、この方法がうまく行くようになるのは２２歳を過ぎてからだろう。
というのも、ほとんどの人はそれ以前には、友達を抽出するにしてもサンプル数が十分ではないからだ。
</p>

 <p>
名声の誘惑
Sirens
</p>

 <p>
友達以外の意見をあれこれ気にするのはやめたほうがいいと思う。
名声を気にしてはいけない。名声というのは、世間のその他大勢の意見だ。
自分が一目置くような判断をする人たちから意見がもらえるのに、知りもしない人たちの意見を考慮することが何のプラスになろうか？
</p>

 <p>
そう言うのは簡単だが、実際そうしようと思うと難しい。特に若いときには。
名声は強力な磁石のようなもので、「私はこれが楽しい」という信念さえもねじ曲げる。
名声は、自分が本当に好きなことではなく、こんなことを好きになりたい、という方をさせようとする。
</p>

 <p>
それが、「小説を書いてみよう」みたいなことを人々に思わせているものの正体だ。
みんな小説を読むのが好きだ。
小説を書いている人たちがノーベル賞をもらっている、ということに注目する。
そしてこう考える。小説家になるのに勝ることなんてあるだろうか、と。
しかし、「小説家になる」という構想を好きになるだけでは不十分だ。上手く書けるようになるつもりでいるなら、実際の執筆作業が好きでないといけない。精緻な虚構を組み上げていくのが好きでないといけない。
</p>

 <p>
名声といっても、ひとの思いつきが化石化したものにすぎない。
何であれ、十分なほどにうまくやれば、それが名声のあるものになるのだ。
今日では名声があると我々が思っているものでも、最初は全く名声とは無縁だったという事例はいくらでもある。
すぐに思い浮かぶ例はジャズだ・・・まあ、どんな既存の芸術形態でもほとんどそうなのだが。
だから、ただ好きなことをやろう。名声は放っておけば何とかなる。
</p>

 <p>
名声は、野心家にとっては特に危険なものだ。
野心的な人たちの時間を雑用で浪費させたければ、目の前に名声をぶらさげてやればいい。
それが、人に講演を頼んだり、序文を書いてもらったり、委員を務めてもらったり、部長になってもらったり等々のためのレシピだ。
単に名声を伴う仕事を避けるというだけでも、良い指標になるだろう。
つまらない仕事でなかったら、そもそも名声で箔をつける必要はなかったはずだからね。
</p>

 <p>
同様に、素晴らしいと思う仕事が２つあって、うち１つが名声を伴う仕事だとしたら、選ぶべきはおそらくもう１つの方だ。
何を素晴らしいと思うかは、常にわずかながら名声に影響されてしまうものだ。
だから、２つの仕事がどちらも優劣つけ難いように思えるなら、名声の少ないほうの仕事をおそらくより純粋に素晴らしいと思っているのだ。
</p>

 <p>
人々が道を踏みはずすもう一つの大きな要因は、お金だ。
お金そのものはそれほど危険なものではない。
電話勧誘や売春、人身被害訴訟のように、いい金にはなるが人から蔑まれているような仕事の話には、野心的な人たちは乗らない。
その種の仕事は、結局は「飯にありつければそれでいい」と思っている人たちがやることになる。（ヒント：その仕事をしている人たちがこんな事を言うような分野は避けよ。）
危険なのは、お金が名声と結びついた時だ。例えば顧問弁護士とか、医薬系の仕事のように。
比較的安全で、華やかな未来が約束され、基本的レベルの名声をある程度自動的に伴うような仕事は、こうした仕事の実情をあまり考えたことのないような若者には危険なほどに魅惑的に映るものだ。
</p>

 <p>
人々が自分のしていることが本当に好きかどうかは、
彼らがたとえお金を貰わなかったとしてもそれをやっただろうか、と訊いてみればわかる。
顧問弁護士たちの中に、今やっている仕事を余暇にタダでやれと言われて、しかも生計を立てるために昼間はウェイターの仕事までしながらやる奴がどれだけいるだろうか。
</p>

 <p>
このチェック方法は、二つの学問分野のどちらかを選びたい場合に特に役に立つ。
この観点に立ってみると、分野間の違いは大きいからだ。
優れた数学者の多くは、仮に数学の教授職がなかったとしても数学をやるだろう。
一方で、この対極にある分野においては、教職が得られるかどうかが動機となる。
だれしも広告代理店で働くよりは英文学の教授になった方がいいと思うだろうし、論文を発表するのはこの手の仕事を獲得するための手段なのだ。
数学科がなかったとしても数学をやる人間はいなくならないだろうが、
しかしコンラッドの小説におけるジェンダーとアイデンティティについて何千何万もの退屈な論文が生み出されるのは、英文学専攻の存在、そしてそれがある故の英文学教授の職の存在があるからだ。
こんなことを楽しみのためにやる奴なんていない。
</p>

 <p>
両親の助言は、お金のことばかり言いすぎる傾向がある。
「本人は小説家になりたいと思っているけれど、両親は医者になってほしいと思っている大学生」のほうが
「本人は医者になりたいと思っているけれど、両親は小説家になってほしいと思っている大学生」より沢山いる、といってもいいだろう。
子供たちは、自分たちの親のことを「実利主義的」だと思っている。でも必ずしもそうとは限らない。
親たちは皆、自分の子供のことには自分自身のこと以上に保守的になる傾向があるが。それは単に親として、子供とは報酬以上にリスクを共有しているせいだ。
８歳の息子が高い木に登ると言い出したり、あるいは１０代の娘が地元の悪ガキとデートすると言い出したとしても、一緒にワクワクしたりすることはないだろう。
しかし息子が木から落ちたり、娘が妊娠させられたりしたときには、そうした結末に対処せざるを得ない。
</p>

 <p>
規律
Discipline
</p>

 <p>
我々の道を誤らせるようなそんな強い力があるのだから、
やりたい仕事を見つけるのが難しいと我々が思うのも不思議ではない。
ほとんどの人は子供の頃に「仕事＝苦痛」という公理を受け入れ絶望してしまった。
そこから抜け出した者たちもほぼ全員が、名声や金に誘惑され座礁してしまった。
それでもやりたい仕事を見つけられた人が一体どのくらいいるだろうか。
数十億人のうち、おそらく二、三十万人といったところだろう。
</p>

 <p>
好きな仕事を見つけるのは難しい。
なし得た人間がそんなに少ないのだから、難しいに違いない。
だから、この作業を甘く見てはいけないし、まだ見つけられない人も、気を落とさないでほしい。
実際、現状に不満であることを認めているなら、まだそれを認められずにいる多くの人たちより一歩先んじている。
あなたにとって軽蔑したくなるような仕事を楽しめと言ってくるような同僚に囲まれているなら、同僚たちは自分に嘘をついている公算が大だ。絶対にとは言わないが、でもおそらくは。
</p>

 <p>
素晴らしい仕事をするのに、規律は人が思うほど必要なものではない。
素晴らしい仕事をするには、それをするのに無理をする必要がないほどに好きなことを何か見つければいいからだ。
だが好きな仕事を探すには、通常規律が必要だ。
１２歳の時に自分のしたいことがわかっていて、レールが敷いてあるかのようにそれに沿って進んでいくだけ、という幸運な人もいるが、そのようなケースは例外だ。
素晴らしい仕事をする人々は大抵、ピンポン球が描く軌跡のようなキャリアの持ち主だ。
学校でAを勉強し、中退してBの職につき、趣味でCを始めてみたらそれで大いに有名になった、といった具合だ。
</p>

 <p>
転職は時として行動力の証であり、時として怠惰の証である。
あなたは落伍しようとしているのだろうか、それとも新たな道を果敢に切り開こうとしているのか？
自分ではわからないということも多い。
後に素晴らしい仕事をする人たちの多くは、自分にぴったりの仕事を探しながらも、最初の頃は期待はずれな仕事もいくつか経験しているようだ。
</p>

 <p>
何か、自分を正直に保つために使える方法はないだろうか。
１つは、いまやっていることがなんであれ、良い仕事をするように努めることだ。たとえその仕事が好きではなくても。
そうすれば少なくとも、仕事に対する不満を怠惰の言い訳に使うこともなくなるだろう。
それに何より、物事をより良く行う習慣がつくことだろう。
</p>

 <p>
もう１つは、常に何かを産み出すということだ。
例えば、小説家になるつもりでいて、今はとりあえず食べてゆくための仕事をこなしているとする。さて、何か産み出しているかい？たとえヘたくそでも、何ページづつか、小説を書いているかい？
何かを産み出しさえすれば、いつか書こうと思っている偉大な小説の幻影にただ酔いしれているばかりではなくなるだろう。自分が実際に書いている明らかに駄作だと分かる代物によって、その展望は打ち砕かれることになるのだ。
</p>

 <p>
「常に何かを生み出す」というのは、好きな仕事を探すための経験則でもある。
そう心に決めると、一般にやるべきだとされていると自分で思い込んでいる物事から自然に離れて、本当に好きなことの方に引き寄せられてゆくのだ。
「常に何かを産み出す」ことが、雨水が重力を頼りに屋根にあいた穴を見い出す如く、ライフワークを見つけてくれることだろう。
</p>

 <p>
もちろん、自分のやりたい仕事を見つけたからといって、実際にその仕事に就けるとは限らない。それは別の話だ。
あなたが野心家なら、この二つは分けて考えるべきだ。
「自分が何をやりたいのか」という観念を「自分にできそうなこと」に汚染されないためには意識的に努力する必要がある。
</p>

 <p>
この二つを分けておくのは痛みを伴う。なぜならこの二つの間にギャップがあることを認めるのはつらいことだからだ。
だから多くの人は、予防線を張るべく自分の期待値をあらかじめ引き下げておく。
例えば、誰でもいいから街を行く人々に「レオナルド（ダ・ビンチ）のような絵が描けるようになりたいか」と尋ねたら、ほとんどの人は、「そんなの私には無理ですよ」とかそれに類する答えを返してくるだろう。
これは事実というよりはむしろ、本人の意思表明である。私はやってみようとは思わない、という意味だ。
というのも、実際には、もし街を歩いている人の中から無作為に１人選んで連れてきて、何とかしてその後２０年間絵を一生懸命描いてもらえたなら、その人は驚くほど上達するだろうからだ。
しかしそれには大いなる精神的な努力が必要とされるだろう。何年もの間、毎日毎日自分の失敗に目を向けることを意味するからだ。
だからこそ、ひとは自分を守るために、「自分には無理だ」と言うのだ。
</p>

 <p>
これに関連して、よく耳にする言葉がもうひとつある。「みんながみんな自分ののやりたい仕事ができるわけじゃない」すなわち、誰かが嫌な仕事をしなければならないのだ、と。
果たしてそうなのか？どうやったらそんな仕事をさせられると言うのか？
アメリカでは、人に嫌な仕事を強制する唯一の方法は徴兵制で、それだってかれこれ３０年間発動されたことがない。
我々にできるのはせいぜい、人々に金と名声を与えて嫌な仕事をするようにけしかけることぐらいだ。
</p>

 <p>
それでも誰もやりたがらないような仕事があるなら、社会はそういった仕事なしでやって行くしかないということではないだろうか。
召使という業種で起こったのはまさにそういうことだ。
何千年もの間、それは「誰かがしなければならない」仕事として誰もが認める実例だった。
しかし２０世紀半ばに召使は豊かな国々では事実上消滅し、金持ちはもう召使なしでやって行くしかなくなった。
</p>

 <p>
だから、「誰かがしなければならない」ような仕事がこの世にあるうちは、あらゆる仕事について「この仕事は間違っている」と誰かが言う可能性があるだろう。
不快な仕事のほとんどは自動化されるか、進んでやる者が誰もいなければ誰もやらないままになるかのいずれかだろう。
</p>

 <p>
二つの道
Two Routes
</p>

 <p>
一方、「みんながみんな自分ののやりたい仕事ができるわけじゃない」という言い分には、別の含みがある。そしてそれもまた、全くもっともな事なのだ。
人は食べていかなければならない。そして、好きな仕事でお金をもらうのは難しい。
これらを達成する道は２つある。
</p>

 <p>
オーガニックルート：地位が上がるにつれ、好きではない仕事を減らしながら好きな仕事の割合を徐々に増やしていく。
</p>

 <p>
二足のわらじルート：好きなことをするのに必要なお金を稼ぐために、好きではないことをする。
</p>

 <p>
オーガニックルートの方がより一般的だ。良い仕事をする人たちは自ずとこの道を辿っていく。
建築家は若いうちは、自分が取れる仕事なら何だって取らなければならない。
でも、そうした仕事うまくこなしていくうちに少しずつ、プロジェクトを取捨選択できる地位に昇っていく。
このルートの不利な点は、進みが遅く、かつ不確実であることだ。
偉くなって終身在職権を手に入れたとしても、本物の自由を享受できるとはいえない。
</p>

 <p>
二足のわらじルートには、いわゆる「昼間の仕事」すなわち毎日決まった時間に働いてお金を稼ぎ、余った時間で好きな事をやるという方法から、もう二度とお金のために働かなくてもよくなるまで何かの仕事をする方法に至るまで、お金のために一度に働く期間の長さに応じた幅広い変種がある。
</p>

 <p>
二足のわらじルートはオーガニックルートほど一般的ではない。それは、慎重な選択が求められるからだ。それに、伴う危険も大きい。
ひとは年を取れば取るほどお金がかかるようになる傾向があるので、お金のための仕事では予定よりも長く働くことになりがちだ。
さらにまた悪いことに、どんな仕事であれ、あなたがする仕事はあなたを変えてゆく。
退屈な仕事をしすぎれば脳が錆びついてくる。
いちばん稼げる仕事がいちばん危険だ。というのも、そんな仕事には全精力を注がなければならないからだ。
</p>

 <p>
二足のわらじルートの有利なところは、障害を飛び越えさせてくれる点だ。
あらゆる仕事が大地に平坦に広がっているわけではない。異業種間を仕切る壁の高さもまちまちだ。 [註7]
自分の仕事のうち好きな仕事が占める割合を最大化していく過程で、建築から商品デザインに移ることはあるかもしれないが、音楽業界に行くことはおそらくないだろう。
何かひとつの仕事でお金をつくってから別の事をする、というのであればもう少し選択の自由がある。
</p>

 <p>
どちらのルートを選んだらよいだろうか。
それは、あなたがやりたいことにどのくらい自信をもっているか、注文を取るのがどのくらい上手か、どれだけのリスクに耐えられるか、あなたがやりたいことに誰かが（あなたが死ぬまで）お金を払ってくれる勝算があるか、といったことにかかっている。
もし　働きたい分野全般に自信があり、かつ人がお金を払ってくれそうなことであれば、多分オーガニックルートを選んだほうがいい。
しかし、もし自分が何をやりたいのか分かっていなかったり、あるいは注文をとるのが好きではないなら、二足のわらじルートを選ぶのもいいかもしれない。そのリスクに耐えられるのならば。
</p>

 <p>
あまり性急に決めてしまわないように。
早いうちからやりたいことがわかっている子たちは格好良く見える。まるで他の子たちより先に算数の問題が解けた子のようだ。
彼らの手元には確かに答えがある。でもそれは間違いである公算が大だ。
</p>

 <p>
医者としてとてもうまく行っている友人がいるのだが、彼女は自分の職にいつも不平不満をこぼしている。
医学部を受けようとしている人たちに助言を求められる度に、彼らを揺さぶって「やめておきなさい！」と怒鳴りつけたくなる。（決してそうすることはないのだが）
どのように彼女はこんな苦境に陥っていったのだろうか。
高校時代には既に、彼女は医者になりたいと思っていた。前途に立ちふさがるあらゆる障害を乗り越えるだけの野心も決意も備わっていた。不幸なことに「医者という仕事が好きではない」ことも障害のひとつに含まれていた。
</p>

 <p>
いまの彼女の人生は、女子高生が選んだ人生だ。
</p>

 <p>
あなたが若い頃には、各々の選択に必要な情報はすべて、それが必要になる前に手に入るような印象を持っていただろう。
だが、仕事については決してそうはいかない。
何の仕事をするか決める時には、信じられないほど不完全な情報を頼りに決断しなければならない。
大学の中でさえ、様々な職種がそれぞれどんなものなのか、ほとんど情報が得られない。
運が良ければ２、３社のインターンシップに参加できるかもしれないが、全ての職でインターンシップが用意されているわけではないし、提供されていたとしても、学べるのは高々バットボーイになることで野球のやり方を学べる程度のことだ。
</p>

 <p>
人生設計においては、その他の多くの物事の設計と同様、柔軟な媒体を使えばより良い結果が得られる。
だから、自分が何をしたいのかに確信をもっているのでなければ、一番のお薦めは、オーガニックにも二足のわらじにも転べるような種類の仕事を選ぶことだろう。
私がコンピュータ・サイエンスを選んだ理由の一部もおそらくそんなことだ。
教授にもなれるし、お金もたくさん稼げるし、ほかの数多の仕事に姿を変えることもできる。
</p>

 <p>
初めのうちは、幅広く色々なことを経験させてくれる仕事を探すのも賢い選択だ。
そうすれば色々な仕事が実際どんな感じなのかをより短時間で学ぶことができる。
逆に、二足のわらじルートでも極端なものは危険だ。自分が好きなことについて学べることがあまりにも少ないからだ。
お金が十分たまったら仕事をやめて小説を書こう、と思いながら十年間証券投資家の仕事に精を出していたとしよう。
いざ仕事をやめた後で、小説を書くのなんて実は好きでも何でもなかったことに気づいてしまったとしたらどうする？
</p>

 <p>
ほとんどの人はこう言うだろう。「任せろ、百万ドルくれたら、やりたいことを見つけてみせる」と。
でもそれは見かけより難しいものだ。
さまざまな制約は、人生に輪郭を与えてくれる。
そうした制約を外してしまうと、ほとんどの人は自分が何をしたらいいか全くわからなくなってしまう。
宝くじを当てた人や、遺産を手に入れた人がどうなるか見てほしい。
誰もが、自分が欲しいのは経済的な保障だと思っているけれど、いちばん幸せなのは経済的な保障を手に入れた人たちではなく、自分がやっている仕事が好きな人たちだ。
だから、（経済的）自由を約束するばかりで、それで一体何をしたらいいのか知る事もないようなプランは、見た目ほどいいものではないかもしれない。
</p>

 <p>
どちらのルートを選ぶにせよ、それなりの苦労が伴うことは覚悟しておこう。
好きな仕事を見つけるのは本当に難しい。ほとんど誰もが失敗している。
仮に見つけられたとしても、３０、４０代そこらで好きなことを自由にやれるようになるなんてことは滅多にない。
でも、今この目的地が視野に入っているなら、達成できる見込みは高い。
仕事を好きになっていいと分かれば、もうゴールは目の前だ。
そして、どの仕事が好きなのか分かっているなら、もうあなたはゴールしたも同然だ。
</p>
</blockquote>
</div>
 <div id="outline-container-org67c8135" class="outline-4">
 <h4 id="org67c8135"> <a href="#org67c8135"></a> <a href="https://www.aozora.gr.jp/cards/000148/files/1102_14956.html">夏目漱石 創作家の態度</a></h4>
 <div class="outline-text-4" id="text-org67c8135">
 <blockquote>
 <p>
なぜと云うと文学史で云う何々主義と云うのは理論から出たのでなくして、個人の作物から出たのであって、その作物の大体を鷲攫わしづかみにして、そうしてもっとも顕著に見える特性だけを目懸めがけて名を下したまでであります。
</p>
</blockquote>

 <blockquote>
 <p>
つまりは幾通りとなく成立し得べき歴史のうちで実際に発展した歴史だけに重きを置いて、しかもほとんど偶然に出現した人間の作そのものを全まったき成体で取り崩くずす事のできないものと見傚みなした上でその特色の著るしきものだけに何主義の名をもってする弊であります。
</p>
</blockquote>
</div>
</div>
 <div id="outline-container-org73e090b" class="outline-4">
 <h4 id="org73e090b"> <a href="#org73e090b"></a> <a href="http://www.foundersatwork.com/steve-wozniak.html">Steve Wozniak - Founders at Work</a></h4>
</div>
 <div id="outline-container-org1c68698" class="outline-4">
 <h4 id="org1c68698"> <a href="#org1c68698"></a> <a href="http://www.paulgraham.com/speak.html">Writing and Speaking</a></h4>
 <div class="outline-text-4" id="text-org1c68698">
 <p>
どうやって書くか、公演するか。
</p>
</div>
</div>
 <div id="outline-container-org1bc63c8" class="outline-4">
 <h4 id="org1bc63c8"> <a href="#org1bc63c8"></a> <a href="http://www.aoky.net/articles/paul_graham/head.htm">頭の中にプログラムを入れる</a></h4>
 <div class="outline-text-4" id="text-org1bc63c8">
 <p>
Paul Grahamのエッセイ。
</p>
</div>
</div>
 <div id="outline-container-org9b5207a" class="outline-4">
 <h4 id="org9b5207a"> <a href="#org9b5207a">簡潔さは力なり(エッセイ)</a></h4>
 <div class="outline-text-4" id="text-org9b5207a">
 <p>
 <a href="20210911183844-lisp.html#ID-18fbe00f-4ec8-4ca0-adfa-2d1381669642">LISP</a>プログラマのPaul Grahamのエッセイ。
</p>
 <ul class="org-ul"> <li> <a href="http://practical-scheme.net/trans/power-j.html">Succinctness is Power</a></li>
</ul></div>
</div>
</div>
</div>
 <div id="outline-container-org6763bfe" class="outline-2">
 <h2 id="org6763bfe"> <a href="#org6763bfe">プログラマー</a></h2>
 <div class="outline-text-2" id="text-org6763bfe">
</div>
 <div id="outline-container-orgdbb00a6" class="outline-3">
 <h3 id="orgdbb00a6"> <a href="#orgdbb00a6"></a> <a href="https://syum.ai/">syum.ai</a></h3>
 <div class="outline-text-3" id="text-orgdbb00a6">
 <p>
有名なプログラマーのプロフィールページ。
</p>
</div>
</div>
 <div id="outline-container-org2cb7945" class="outline-3">
 <h3 id="org2cb7945"> <a href="#org2cb7945"></a> <a href="https://voluntas.github.io/">Twisted Mind | 一日をむだにする方法はいくらでもある。しかし一日を取り戻す方法はひとつもない。</a></h3>
 <div class="outline-text-3" id="text-org2cb7945">
 <p>
時雨堂経営者のブログ。
</p>
</div>
</div>
 <div id="outline-container-org308a284" class="outline-3">
 <h3 id="org308a284"> <a href="#org308a284"></a> <a href="https://research.swtch.com/">research!rsc</a></h3>
 <div class="outline-text-3" id="text-org308a284">
 <p>
Russ Coxのブログ。
</p>
</div>
</div>
 <div id="outline-container-org437d5ec" class="outline-3">
 <h3 id="org437d5ec"> <a href="#org437d5ec"></a> <a href="https://github.com/golang-standards/project-layout/pull/179">Revert everything. by henvic · Pull Request #179 · golang-standards/project-layout</a></h3>
 <div class="outline-text-3" id="text-org437d5ec">
 <p>
リポジトリ芸。
</p>
</div>
</div>
 <div id="outline-container-org185f2ca" class="outline-3">
 <h3 id="org185f2ca"> <a href="#org185f2ca"></a> <a href="http://dnobori.cs.tsukuba.ac.jp/ja/">http://dnobori.cs.tsukuba.ac.jp/ja/</a></h3>
 <div class="outline-text-3" id="text-org185f2ca">
 <p>
すごい人。ソフトウェア研究者・技術者。深さ、広さがすごい。
</p>
</div>
</div>
 <div id="outline-container-org8753311" class="outline-3">
 <h3 id="org8753311"> <a href="#org8753311"></a> <a href="https://shimataro.me/">Taro ODASHIMA | A full-stack web engineer, and a close-up magician!</a></h3>
 <div class="outline-text-3" id="text-org8753311">
 <p>
伝わるポートフォリオ。
</p>
</div>
</div>
 <div id="outline-container-org6ed9fe0" class="outline-3">
 <h3 id="org6ed9fe0"> <a href="#org6ed9fe0"></a> <a href="https://www.bracketproductions.com/">Bracket Productions</a></h3>
 <div class="outline-text-3" id="text-org6ed9fe0">
 <p>
すごいゲーム開発者。
roguelike tutorialの作者。
</p>
</div>
</div>
 <div id="outline-container-orga3d050d" class="outline-3">
 <h3 id="orga3d050d"> <a href="#orga3d050d"></a> <a href="https://hiroppy.me/">universe</a></h3>
 <div class="outline-text-3" id="text-orga3d050d">
 <p>
Javascriptのすごい人。
</p>
</div>
</div>
 <div id="outline-container-orgcff5f50" class="outline-3">
 <h3 id="orgcff5f50"> <a href="#orgcff5f50"></a> <a href="https://toshi0607.com/about/">About Me – DoorLog</a></h3>
 <div class="outline-text-3" id="text-orgcff5f50">
 <p>
すごいエンジニアの人。
未経験時のログが残っていて、そんな時期が存在していたことを知れる。成長速度えぐい。
</p>
</div>
</div>
 <div id="outline-container-orgf7a9ca9" class="outline-3">
 <h3 id="orgf7a9ca9"> <a href="#orgf7a9ca9"></a> <a href="https://note.com/simplearchitect">牛尾 剛｜note</a></h3>
 <div class="outline-text-3" id="text-orgf7a9ca9">
 <p>
エンジニア。
</p>
</div>
 <div id="outline-container-org81cdaa1" class="outline-4">
 <h4 id="org81cdaa1"> <a href="#org81cdaa1"></a> <a href="https://note.com/simplearchitect/n/nf50d0418bc5f">才能ない人を観察してどうやったらできるようになるか考えてみた｜牛尾 剛｜note</a></h4>
 <div class="outline-text-4" id="text-org81cdaa1">
 <p>
アウトカムを急がない。理解するのには時間がかかる。
アウトプットを考えがちだが、それでコピペしてたら意味がない。
</p>

 <ul class="org-ul"> <li>ブログ書くのが重要</li>
</ul></div>
</div>
 <div id="outline-container-org896e0fb" class="outline-4">
 <h4 id="org896e0fb"> <a href="#org896e0fb"></a> <a href="https://note.com/simplearchitect/n/nbf330ae7770f">技術者には試行錯誤は圧倒的に悪であると腹落ちした話｜牛尾 剛｜note</a></h4>
 <div class="outline-text-4" id="text-org896e0fb">
 <p>
ただ単にいろんなパターンを試して正解を探しても、何も学べていない。
関連技術を理解して、自分のコントロール化に置くことが重要。
</p>
</div>
</div>
 <div id="outline-container-orge013d80" class="outline-4">
 <h4 id="orge013d80"> <a href="#orge013d80"></a> <a href="https://note.com/simplearchitect/n/n9bd63cd83c6b">最近の技術イケメン観察日記 Tips 4選｜牛尾 剛｜note</a></h4>
 <div class="outline-text-4" id="text-orge013d80">
 <p>
4時間ほど予定をブロックしているという。
その時間は返信もせず、自分の仕事に熱中する。
</p>
</div>
</div>
 <div id="outline-container-org44299c1" class="outline-4">
 <h4 id="org44299c1"> <a href="#org44299c1"></a> <a href="https://note.com/simplearchitect/n/n1170c5ecfb1a">技術イケメンになれるブログの書き方｜牛尾 剛｜note</a></h4>
</div>
 <div id="outline-container-org2cb8c4d" class="outline-4">
 <h4 id="org2cb8c4d"> <a href="#org2cb8c4d"></a> <a href="https://note.com/simplearchitect/n/n388201603a28">プログラミングというより物事が出来るようになる思考法｜牛尾 剛｜note</a></h4>
</div>
 <div id="outline-container-org108cf08" class="outline-4">
 <h4 id="org108cf08"> <a href="#org108cf08"></a> <a href="https://note.com/simplearchitect/n/n2168b03da314">一流のソフトウェアエンジニアになるための考察｜牛尾 剛｜note</a></h4>
</div>
 <div id="outline-container-orgc6efc97" class="outline-4">
 <h4 id="orgc6efc97"> <a href="#orgc6efc97"></a> <a href="https://note.com/simplearchitect/n/n8cd219056536">コードリーディングのコツは極力コードを読まないこと｜牛尾 剛｜note</a></h4>
</div>
 <div id="outline-container-org144716e" class="outline-4">
 <h4 id="org144716e"> <a href="#org144716e"></a> <a href="https://note.com/simplearchitect/n/n1b0263219060">生産性を上げたければ定時上がりが効率が良い｜牛尾 剛｜note</a></h4>
</div>
</div>
 <div id="outline-container-orgb180d52" class="outline-3">
 <h3 id="orgb180d52"> <a href="#orgb180d52"></a> <a href="https://www.sanityinc.com/">Sanity, Inc. · sanity, inc.</a></h3>
 <div class="outline-text-3" id="text-orgb180d52">
 <p>
Purcel(パッケージシステムMelpaを作った人)のブログ。
</p>
</div>
</div>
 <div id="outline-container-orgbccb592" class="outline-3">
 <h3 id="orgbccb592"> <a href="#orgbccb592"></a> <a href="https://www.fosskers.ca/jp/cv">Colin Woodbury</a></h3>
 <div class="outline-text-3" id="text-orgbccb592">
 <p>
OSSのすごい人。幅広い。長崎でALTをしてたことがあるらしく、ちょっと親近感。
</p>
</div>
</div>
 <div id="outline-container-orgcc82082" class="outline-3">
 <h3 id="orgcc82082"> <a href="#orgcc82082"></a> <a href="https://blog.jiyu.dev/about">About — Jiyu Software</a></h3>
 <div class="outline-text-3" id="text-orgcc82082">
 <p>
かっこいい自己紹介ページ。
</p>
</div>
</div>
 <div id="outline-container-org0b17cca" class="outline-3">
 <h3 id="org0b17cca"> <a href="#org0b17cca"></a> <a href="https://web.archive.org/web/20070821003652/http:/www.danchan.com/weblog/nestum/">a cuppa nestum</a></h3>
 <div class="outline-text-3" id="text-org0b17cca">
 <p>
若かりし頃のブログ。
</p>
</div>
</div>
 <div id="outline-container-org308f8ff" class="outline-3">
 <h3 id="org308f8ff"> <a href="#org308f8ff"></a> <a href="https://danielmiessler.com/">Daniel Miessler | Security, Technology, and Society</a></h3>
 <div class="outline-text-3" id="text-org308f8ff">
 <p>
セキュリティで有名な人。
</p>
</div>
</div>
 <div id="outline-container-org0ba44c9" class="outline-3">
 <h3 id="org0ba44c9"> <a href="#org0ba44c9"></a> <a href="https://www.dodgycoder.net/2012/09/q-with-nine-great-programmers.html">Dodgy Coder: Q&A With Nine Great Programmers</a></h3>
 <div class="outline-text-3" id="text-org0ba44c9">
 <p>
偉大なプログラマーへのQ&A集。
</p>
</div>
</div>
 <div id="outline-container-org729f4f2" class="outline-3">
 <h3 id="org729f4f2"> <a href="#org729f4f2"></a> <a href="https://endlessparentheses.com/about.html">Endless Parentheses · Ramblings on productivity and technical subjects.</a>(Malabarba)</h3>
 <div class="outline-text-3" id="text-org729f4f2">
 <p>
複数のパッケージ開発者。
 <a href="https://endlessparentheses.com/about.html">https://endlessparentheses.com/about.html</a>
</p>
</div>
</div>
 <div id="outline-container-org38aca2a" class="outline-3">
 <h3 id="org38aca2a"> <a href="#org38aca2a"></a> <a href="https://oremacs.com/">(or emacs · irrelevant)</a></h3>
 <div class="outline-text-3" id="text-org38aca2a">
 <p>
Emacsの有名人のブログ。
</p>
</div>
</div>
 <div id="outline-container-orgbf1cf91" class="outline-3">
 <h3 id="orgbf1cf91"> <a href="#orgbf1cf91"></a> <a href="https://liberapay.com/wasamasa/">wasamasa’s profile - Liberapay</a></h3>
 <div class="outline-text-3" id="text-orgbf1cf91">
 <p>
いい感じの自己紹介。Emacs。
</p>
</div>
</div>
 <div id="outline-container-org34945aa" class="outline-3">
 <h3 id="org34945aa"> <a href="#org34945aa"></a> <a href="https://eed3si9n.com/about/">about me · eed3si9n</a></h3>
 <div class="outline-text-3" id="text-org34945aa">
 <p>
 <a href="20220108003324-scala.html#ID-b2f63c13-4b30-481c-9c95-8abe388254fd">Scala</a>のすごい人。
</p>
</div>
</div>
</div>
 <div id="outline-container-org25b38f9" class="outline-2">
 <h2 id="org25b38f9"> <a href="#org25b38f9">プログラム</a></h2>
 <div class="outline-text-2" id="text-org25b38f9">
</div>
 <div id="outline-container-org10094c7" class="outline-3">
 <h3 id="org10094c7"> <a href="#org10094c7"></a> <a href="https://www.youtube.com/@ATTTechChannel">AT&T Tech Channel - YouTube</a></h3>
 <div class="outline-text-3" id="text-org10094c7">
 <p>
数多くのコンピュータに関するビデオがあるチャンネル。さすがAT&T。
</p>
</div>
</div>
 <div id="outline-container-orgae02bb0" class="outline-3">
 <h3 id="orgae02bb0"> <a href="#orgae02bb0"></a> <a href="https://islanddomains.earth/">ドメイン島巡り – 世界のドメイン1,000種類以上を取り扱うインターリンクが、「.cc」「.tv」「.sx」等、南太平洋やカリブ海などの「島のドメイン」約50種類に焦点をあて、実際にその島々に行き、島の魅力をレポートします。</a></h3>
 <div class="outline-text-3" id="text-orgae02bb0">
 <p>
どうかしている熱意を示してくれる例。
</p>
</div>
</div>
 <div id="outline-container-orgb1c133e" class="outline-3">
 <h3 id="orgb1c133e"> <a href="#orgb1c133e"></a> <a href="https://www.nic.ad.jp/ja/translation/index_category.html#29">カテゴリー順 - JPNIC</a></h3>
 <div class="outline-text-3" id="text-orgb1c133e">
 <p>
翻訳文書集。
</p>
</div>
</div>
 <div id="outline-container-orgdda75b7" class="outline-3">
 <h3 id="orgdda75b7"> <a href="#orgdda75b7"></a> <a href="https://oleksii.shmalko.com/how-i-note/">How I note</a></h3>
 <div class="outline-text-3" id="text-orgdda75b7">
 <p>
Zettelkastenの実践メモ。
</p>
</div>
</div>
 <div id="outline-container-org06e7365" class="outline-3">
 <h3 id="org06e7365"> <a href="#org06e7365"></a> <a href="https://www.wdic.org/w/TECH/%E3%83%9F%E3%83%83%E3%82%AD%E3%83%BC">ミッキー - 通信用語の基礎知識</a></h3>
 <div class="outline-text-3" id="text-org06e7365">
 <p>
マウスの移動量の単位。
</p>
</div>
</div>
 <div id="outline-container-org2a0ef6c" class="outline-3">
 <h3 id="org2a0ef6c"> <a href="#org2a0ef6c"></a> <a href="https://rebuild.fm/105a/">Rebuild: Aftershow 105: C, Lisp, and a Bit of Ruby (Matz, Naoya Ito)</a></h3>
 <div class="outline-text-3" id="text-org2a0ef6c">
 <p>
Matz回。
</p>
</div>
</div>
 <div id="outline-container-org2096735" class="outline-3">
 <h3 id="org2096735"> <a href="#org2096735"></a> <a href="https://note.com/ruiu/n/n34430178f976">ビットコインは世界中でどれだけの電力を使っているのか？｜Rui Ueyama</a></h3>
 <div class="outline-text-3" id="text-org2096735">
 <p>
わかりやすく、面白い。
</p>
</div>
</div>
 <div id="outline-container-org9362b3e" class="outline-3">
 <h3 id="org9362b3e"> <a href="#org9362b3e"></a> <a href="https://note.com/ruiu/n/n1676c1053a27">IPv6がなぜいまだに普及していないのか｜Rui Ueyama</a></h3>
 <div class="outline-text-3" id="text-org9362b3e">
 <p>
インセンティブから見た普及しない考察。面白い。
</p>
</div>
</div>
 <div id="outline-container-orged42ec9" class="outline-3">
 <h3 id="orged42ec9"> <a href="#orged42ec9"></a> <a href="https://turingcomplete.fm/">Turing Complete FM</a></h3>
 <div class="outline-text-3" id="text-orged42ec9">
 <p>
ポッドキャスト。
</p>
</div>
</div>
 <div id="outline-container-org9245eb6" class="outline-3">
 <h3 id="org9245eb6"> <a href="#org9245eb6"></a> <a href="https://note.com/ruiu/n/nb5c3fe7e4e7d">乱数生成器とゲームと諜報活動の話｜Rui Ueyama</a></h3>
 <div class="outline-text-3" id="text-org9245eb6">
 <p>
ランダムさをどうやって生み出しているか。面白い。
</p>

 <blockquote>
 <p>
Linuxなどは、キーボードのタイピングの間隔やマウスの速度など、予測の難しい外部イベントの正確なタイミングを測って、そのランダムさをカーネル内に溜め込んでいる。その変数は/dev/randomから読むことができる。
</p>

 <p>
ランダムなイベントはそれほど多くないので、ずっと/dev/randomを読んでいるとランダムさが枯渇してそれ以上読めなくなってしまう。例えばsshの暗号鍵を生成しているときに「マウスを動かすと鍵生成が早く終わります」というメッセージが表示されるのはこのためだ。
</p>
</blockquote>
</div>
</div>
 <div id="outline-container-org6af72f0" class="outline-3">
 <h3 id="org6af72f0"> <a href="#org6af72f0"></a> <a href="https://note.com/ruiu/n/nbb7a52c374ae">メモリのビット反転エラーとセキュリティの話｜Rui Ueyama</a></h3>
 <div class="outline-text-3" id="text-org6af72f0">
 <p>
メモリのエラー率は意外に高いという話。面白い。
</p>
</div>
</div>
 <div id="outline-container-org5b975e6" class="outline-3">
 <h3 id="org5b975e6"> <a href="#org5b975e6"></a> <a href="https://rebuild.fm/360/">Rebuild: 360: Hallucinated Type Safety (matz)</a></h3>
 <div class="outline-text-3" id="text-org5b975e6">
 <ul class="org-ul"> <li>Ruby Kaigi参加者の3分の1はデベロッパー(テクノロジーそのものを作る人)。ユーザカンファレンスの率が他に比べて低い。</li>
</ul></div>
</div>
 <div id="outline-container-org3076f7b" class="outline-3">
 <h3 id="org3076f7b"> <a href="#org3076f7b"></a> <a href="https://rebuild.fm/153/">Rebuild: 153: Connecting The Dots (rui314)</a></h3>
 <div class="outline-text-3" id="text-org3076f7b">
 <p>
自作コンパイラを作る話。
</p>

 <p>
自作言語ではなく、標準化されている既存の言語を作ると手抜きができない。むしろ勉強になる。
</p>
</div>
</div>
 <div id="outline-container-org67f9d0b" class="outline-3">
 <h3 id="org67f9d0b"> <a href="#org67f9d0b"></a> <a href="https://zenn.dev/hickhyphenr/articles/0ffacaa4a9e62a">地図にメッセージを書けるサイトを作りました</a></h3>
 <div class="outline-text-3" id="text-org67f9d0b">
 <p>
面白いアイデア。
</p>
</div>
</div>
 <div id="outline-container-org3aba8cf" class="outline-3">
 <h3 id="org3aba8cf"> <a href="#org3aba8cf"></a> <a href="https://github.com/aws/aws-cdk/issues/18322">cdk-cli: cannot deploy due to colors dependency · Issue #18322 · aws/aws-cdk</a></h3>
 <div class="outline-text-3" id="text-org3aba8cf">
 <p>
依存ライブラリの意図的な削除で起きた不具合。
</p>
</div>
</div>
 <div id="outline-container-orgb5b12e2" class="outline-3">
 <h3 id="orgb5b12e2"> <a href="#orgb5b12e2"></a> <a href="https://github.com/Marak/colors.js/commit/074a0f8ed0c31c35d13d28632bd8a049ff136fb6#diff-92bbac9a308cd5fcf9db165841f2d90ce981baddcb2b1e26cfff170929af3bd1R18">Adds new American flag module · Marak/colors.js@074a0f8</a></h3>
 <div class="outline-text-3" id="text-orgb5b12e2">
 <p>
多くのライブラリに影響を与えた不具合の元になったコード。遊ばれまくっている。
</p>
</div>
</div>
 <div id="outline-container-org906c13c" class="outline-3">
 <h3 id="org906c13c"> <a href="#org906c13c"></a> <a href="https://note.com/ruiu/n/nc9d93a45c2ec">絵文字がある種のUnicodeバグを世界から一掃しつつある件について｜Rui Ueyama｜note</a></h3>
 <div class="outline-text-3" id="text-org906c13c">
 <p>
面白い。絵文字のせいで、英語圏の人々も4byte文字列について考えないといけなった。解決と同時に漢字の表示についても解決していった。絵文字が追加されたのは2010年からだったのか。
</p>
</div>
</div>
 <div id="outline-container-orgca5c852" class="outline-3">
 <h3 id="orgca5c852"> <a href="#orgca5c852"></a> <a href="https://www.oreilly.co.jp/books/9784873115115/">O’Reilly Japan - Making Software</a></h3>
 <div class="outline-text-3" id="text-orgca5c852">
 <p>
開発手法のエッセイ集。
</p>
</div>
</div>
 <div id="outline-container-org8f82656" class="outline-3">
 <h3 id="org8f82656"> <a href="#org8f82656"></a> <a href="https://logstalgia.io/">Logstalgia - a website access log visualization tool</a></h3>
 <div class="outline-text-3" id="text-org8f82656">
 <p>
Webアクセスの美しい可視化ツール。
</p>
</div>
</div>
 <div id="outline-container-orge57d22f" class="outline-3">
 <h3 id="orge57d22f"> <a href="#orge57d22f"></a> <a href="https://roll20.net/compendium/dnd5e/Weapons#content">Weapons | D&D 5th Edition on Roll20 Compendium</a></h3>
 <div class="outline-text-3" id="text-orge57d22f">
 <p>
D&Dスタイルの武器。
</p>
</div>
</div>
 <div id="outline-container-org7aaf646" class="outline-3">
 <h3 id="org7aaf646"> <a href="#org7aaf646"></a> <a href="https://qiita.com/yagince/items/546d86588aaa3fdb3c94">[Rust] proc_macro入門 CustomDeriveを書いてみる - Qiita</a></h3>
 <div class="outline-text-3" id="text-org7aaf646">
 <p>
proc_macroの使い方。
</p>
</div>
</div>
 <div id="outline-container-org3db7521" class="outline-3">
 <h3 id="org3db7521"> <a href="#org3db7521"></a> <a href="https://zenn.dev/saitoyutaka/articles/fe12c982e89a7b">Guixのパッケージを作ってみる</a></h3>
 <div class="outline-text-3" id="text-org3db7521">
 <p>
パッケージの作り方。
</p>
</div>
</div>
 <div id="outline-container-org658987e" class="outline-3">
 <h3 id="org658987e"> <a href="#org658987e"></a> <a href="https://qiita.com/oohira/items/63b5ccb2bf1a913659d6">gRPCって何？ - Qiita</a></h3>
 <div class="outline-text-3" id="text-org658987e">
 <p>
プロトコルの種類。
</p>
</div>
</div>
 <div id="outline-container-org27934ee" class="outline-3">
 <h3 id="org27934ee"> <a href="#org27934ee"></a> <a href="http://www.plantuml.com/plantuml/uml/">PlantUML Web Server</a></h3>
 <div class="outline-text-3" id="text-org27934ee">
 <p>
宣言的な作図ツール。グルーピングができる分mermaidより使いやすい気がする。
</p>
</div>
</div>
 <div id="outline-container-orga5fba37" class="outline-3">
 <h3 id="orga5fba37"> <a href="#orga5fba37"></a> <a href="https://www.techscore.com/tech/DesignPattern/">デザインパターン | TECHSCORE(テックスコア)</a></h3>
 <div class="outline-text-3" id="text-orga5fba37">
 <p>
デザインパターンのサイト。
</p>
</div>
</div>
 <div id="outline-container-orge7f105b" class="outline-3">
 <h3 id="orge7f105b"> <a href="#orge7f105b"></a> <a href="https://speakerdeck.com/twada/growing-reliable-code-phperkaigi-2022?slide=133">予防に勝る防御なし - 堅牢なコードを導く様々な設計のヒント / Growing Reliable Code PHPerKaigi 2022 - Speaker Deck</a></h3>
 <div class="outline-text-3" id="text-orge7f105b">
 <p>
Simple と Easy は異なる。混ぜてはいけない。
Easy: 手数の少なさを重視。覚えることが増え、特定の状況に強いが他には弱い設計になる。
Simple: 覚えることの少なさを重視。手数が増えたり、自分で組み合わせたりしなければならない。
</p>
</div>
</div>
 <div id="outline-container-org0cbff72" class="outline-3">
 <h3 id="org0cbff72"> <a href="#org0cbff72"></a> <a href="https://docs.aws.amazon.com/ja_jp/elasticloadbalancing/latest/network/introduction.html">Network Load Balancer とは? - Elastic Load Balancing</a></h3>
 <div class="outline-text-3" id="text-org0cbff72">
 <p>
ロードバランサーの詳細。
</p>
</div>
</div>
 <div id="outline-container-org623c9aa" class="outline-3">
 <h3 id="org623c9aa"> <a href="#org623c9aa"></a> <a href="https://stakiran.hatenablog.com/entry/2019/07/01/203651">【第二版】ファイアウォールやネットワークにおける上り、下り、イングレス(Ingress)、エグレス(Egress)、インバウンド(Inbound)、アウトバウンド(Outbound)の違い - stamemo</a></h3>
</div>
 <div id="outline-container-orgfffdc3b" class="outline-3">
 <h3 id="orgfffdc3b"> <a href="#orgfffdc3b"></a> <a href="https://qiita.com/NewGyu/items/9597ed2eda763bd504d7">Amazon EC2 Container Service(ECS)の概念整理 - Qiita</a></h3>
 <div class="outline-text-3" id="text-orgfffdc3b">
 <p>
ECSの概要。
</p>
</div>
</div>
 <div id="outline-container-org82a47bd" class="outline-3">
 <h3 id="org82a47bd"> <a href="#org82a47bd"></a> <a href="https://tratt.net/laurie/blog/2022/practising_programming.html">Laurence Tratt: Practising Programming</a></h3>
 <div class="outline-text-3" id="text-org82a47bd">
 <p>
実践してきた方法。
メーラーデーモン、asyncなどの現実世界の問題を解くことで上達していったという。
</p>
</div>
</div>
 <div id="outline-container-org03a68ef" class="outline-3">
 <h3 id="org03a68ef"> <a href="#org03a68ef"></a> <a href="https://programming-place.net/ppp/contents/bookshelf/free.html">無料で読める書籍 | Programming Place Plus</a></h3>
 <div class="outline-text-3" id="text-org03a68ef">
 <p>
プログラミング関係の書籍。
</p>
</div>
</div>
 <div id="outline-container-org8fc09d4" class="outline-3">
 <h3 id="org8fc09d4"> <a href="#org8fc09d4"></a> <a href="https://www.oreilly.co.jp/books/9784873117874/">O’Reilly Japan - Cooking for Geeks 第2版</a></h3>
 <div class="outline-text-3" id="text-org8fc09d4">
 <p>
オライリーの料理本。なぜ。
</p>
</div>
</div>
 <div id="outline-container-org5fcb9c9" class="outline-3">
 <h3 id="org5fcb9c9"> <a href="#org5fcb9c9"></a> <a href="https://github.com/google/styleguide">google/styleguide: Style guides for Google-originated open-source projects</a></h3>
 <div class="outline-text-3" id="text-org5fcb9c9">
 <p>
Googleのスタイルガイド。
</p>
</div>
</div>
 <div id="outline-container-orgf271b33" class="outline-3">
 <h3 id="orgf271b33"> <a href="#orgf271b33"></a> <a href="http://www.happiese.com/system/dataorient.html">データ中心指向とオブジェクト指向</a></h3>
 <div class="outline-text-3" id="text-orgf271b33">
 <p>
指向の違い。
</p>
</div>
</div>
 <div id="outline-container-orgc5b9423" class="outline-3">
 <h3 id="orgc5b9423"> <a href="#orgc5b9423"></a> <a href="https://openviewpartners.com/blog/the-product-led-growth-market-map/#.YbN9aOozbAS">The Product Led Growth Market Map - OpenView</a></h3>
 <div class="outline-text-3" id="text-orgc5b9423">
 <p>
優良IT企業のリスト。あらゆる分野に浸透している。
</p>
</div>
</div>
 <div id="outline-container-org5722dcf" class="outline-3">
 <h3 id="org5722dcf"> <a href="#org5722dcf"></a> <a href="https://practicingruby.com/articles/patterns-for-building-excellent-examples">Patterns for building excellent examples</a></h3>
 <div class="outline-text-3" id="text-org5722dcf">
 <p>
サンプルコードの書き方。
</p>
</div>
</div>
 <div id="outline-container-orgbe457bb" class="outline-3">
 <h3 id="orgbe457bb"> <a href="#orgbe457bb"></a> <a href="https://colin-scott.github.io/personal_website/research/interactive_latency.html">Numbers Every Programmer Should Know By Year</a></h3>
 <div class="outline-text-3" id="text-orgbe457bb">
 <p>
各速度の表。
</p>
</div>
</div>
 <div id="outline-container-orgd3ec4b3" class="outline-3">
 <h3 id="orgd3ec4b3"> <a href="#orgd3ec4b3"></a> <a href="https://speakerdeck.com/uzulla/phpbaziyonatupukemofalsedao">PHPバージョンアップけもの道 - Speaker Deck</a></h3>
 <div class="outline-text-3" id="text-orgd3ec4b3">
 <p>
言語のバージョンアップは大変な仕事。どうやって進めるか。
</p>
</div>
</div>
 <div id="outline-container-orgbf23b1d" class="outline-3">
 <h3 id="orgbf23b1d"> <a href="#orgbf23b1d"></a> <a href="https://www.foragoodstrftime.com/">For a Good Strftime | Easy Skeezy Ruby Date/Time Formatting</a></h3>
 <div class="outline-text-3" id="text-orgbf23b1d">
 <p>
日付のフォーマット文字列を生成するツール。
</p>
</div>
</div>
 <div id="outline-container-org9e90c2f" class="outline-3">
 <h3 id="org9e90c2f"> <a href="#org9e90c2f"></a> <a href="https://zenn.dev/ak/articles/c28fa3a9ba7edb">ブラウザレンダリングの仕組み</a></h3>
 <div class="outline-text-3" id="text-org9e90c2f">
 <p>
非常にわかりやすいレンダリングの解説。
</p>
</div>
</div>
 <div id="outline-container-orga783a74" class="outline-3">
 <h3 id="orga783a74"> <a href="#orga783a74"></a> <a href="https://www.oreilly.co.jp/library/">O’Reilly Japan - Library</a></h3>
 <div class="outline-text-3" id="text-orga783a74">
 <p>
オープンライセンスで公開されているもの。
</p>
</div>
</div>
 <div id="outline-container-org3423221" class="outline-3">
 <h3 id="org3423221"> <a href="#org3423221"></a> <a href="https://www.adobe.com/content/dam/acom/en/devnet/pdf/pdfs/PDF32000_2008.pdf">Adobe PDF</a></h3>
 <div class="outline-text-3" id="text-org3423221">
 <p>
PDFの仕様書。
</p>
</div>
</div>
 <div id="outline-container-org0b62810" class="outline-3">
 <h3 id="org0b62810"> <a href="#org0b62810"></a> <a href="https://transparentcalifornia.com/">Transparent California</a></h3>
 <div class="outline-text-3" id="text-org0b62810">
 <p>
オープンな行政。
</p>
</div>
</div>
 <div id="outline-container-org2e4d392" class="outline-3">
 <h3 id="org2e4d392"> <a href="#org2e4d392"></a> <a href="https://speakerdeck.com/keiya01/burauzafalsezuo-rifang">ブラウザの作り方 - Speaker Deck</a></h3>
</div>
 <div id="outline-container-orgfa9c1d8" class="outline-3">
 <h3 id="orgfa9c1d8"> <a href="#orgfa9c1d8"></a> <a href="https://www.hyrumslaw.com/">Hyrum’s Law</a></h3>
 <div class="outline-text-3" id="text-orgfa9c1d8">
 <p>
Hyrumの法則。
</p>
</div>
</div>
</div>
 <div id="outline-container-org78b37af" class="outline-2">
 <h2 id="org78b37af"> <a href="#org78b37af">乗り物</a></h2>
 <div class="outline-text-2" id="text-org78b37af">
</div>
 <div id="outline-container-org92b5d8a" class="outline-3">
 <h3 id="org92b5d8a"> <a href="#org92b5d8a"></a> <a href="https://www.youtube.com/watch?v=Ug7xa-7sako&t=3026s">EEVblog #1268 - DIY Boeing 747 Cockpit Simulator Full Tour - YouTube</a></h3>
 <div class="outline-text-3" id="text-org92b5d8a">
 <p>
DIYでボーイング747のコックピットを作る人…。
</p>
</div>
</div>
 <div id="outline-container-org61bd13a" class="outline-3">
 <h3 id="org61bd13a"> <a href="#org61bd13a"></a> <a href="http://www.gabacho-net.jp/whims/whim0081.html">団子運転 | きまぐれノート</a></h3>
 <div class="outline-text-3" id="text-org61bd13a">
 <p>
公共交通における、精神衛生上いい話。
</p>
</div>
</div>
 <div id="outline-container-orged0e0f7" class="outline-3">
 <h3 id="orged0e0f7"> <a href="#orged0e0f7"></a> <a href="https://www.buzzfeed.com/jp/tsunehikonishimaki/elevator?utm_term=.wgNwmJDN8#.etEnkazr3">【保存版】エレベーターの行き先をキャンセルする方法（メーカー別）</a></h3>
 <div class="outline-text-3" id="text-orged0e0f7">
 <p>
やり方がある。
</p>
</div>
</div>
 <div id="outline-container-orga2a0ad9" class="outline-3">
 <h3 id="orga2a0ad9"> <a href="#orga2a0ad9"></a> <a href="https://www.myskc.net/o_150627.php">金券ショップの切符はなぜ安いのか</a></h3>
 <div class="outline-text-3" id="text-orga2a0ad9">
 <p>
新幹線の回数券はマネーロンダリングに使われるらしい。
</p>
</div>
</div>
 <div id="outline-container-org7e239e0" class="outline-3">
 <h3 id="org7e239e0"> <a href="#org7e239e0"></a> <a href="https://travel.spot-app.jp/ohtsuki_shimomurayama/">大月駅に終電で寝過ごして来てしまった方へ。始発を待つ方法はコレ！ | SPOT</a></h3>
 <div class="outline-text-3" id="text-org7e239e0">
 <p>
面白い。
</p>
</div>
</div>
 <div id="outline-container-orgf86ef31" class="outline-3">
 <h3 id="orgf86ef31"> <a href="#orgf86ef31"></a> <a href="https://archive.org/details/navpers">NAVPERS Collection : Free Texts : Free Download, Borrow and Streaming : Internet Archive</a></h3>
 <div class="outline-text-3" id="text-orgf86ef31">
 <p>
アメリカ海軍のマニュアル集。
</p>
</div>
</div>
 <div id="outline-container-org403dc4a" class="outline-3">
 <h3 id="org403dc4a"> <a href="#org403dc4a"></a> <a href="https://travel.spot-app.jp/seisyun18kippu_ekimemo/">青春18きっぷで日本縦断。最南端の鹿児島から稚内まで行ってみた | SPOT</a></h3>
 <div class="outline-text-3" id="text-org403dc4a">
 <p>
すごい。
</p>
</div>
</div>
 <div id="outline-container-org757d4fc" class="outline-3">
 <h3 id="org757d4fc"> <a href="#org757d4fc"></a> <a href="http://yamaiga.com/">廃道・廃線・未成道・隧道・林鉄・道路趣味～山さ行がねが～</a></h3>
 <div class="outline-text-3" id="text-org757d4fc">
 <p>
面白い。
</p>
</div>
</div>
</div>
 <div id="outline-container-orgeff2cf5" class="outline-2">
 <h2 id="orgeff2cf5"> <a href="#orgeff2cf5">郷土</a></h2>
 <div class="outline-text-2" id="text-orgeff2cf5">
</div>
 <div id="outline-container-org8f840e7" class="outline-3">
 <h3 id="org8f840e7"> <a href="#org8f840e7"></a> <a href="https://lite-ra.com/2019/08/post-4896_2.html">名古屋をディストピア化させた過剰なモータリゼーションと“トヨタ”｜LITERA／リテラ</a></h3>
 <div class="outline-text-3" id="text-org8f840e7">
 <blockquote>
 <p>
「自動車に乗って移動する生活、歩かない生活。これは街への愛着を失わせ、無関心を常態化させてしまいます。名古屋市民は戦後の道路計画の時代からずっと街から排除されていたと言えます。散歩をしたり、街角にたたずんだり、公園にたむろするという習慣が、ずっと以前に失われていました。都市空間が暴走する自動車と騒音と排気ガスに占拠されたからです。だから名古屋市民は、お昼を食べるにしても、公園のベンチで弁当を広げるよりも自動車の運転席で弁当を食べるほうを好むのです」
</p>
</blockquote>

 <p>
興味深い。
</p>
</div>
</div>
 <div id="outline-container-orgb096d00" class="outline-3">
 <h3 id="orgb096d00"> <a href="#orgb096d00">出水市の道路比較</a></h3>
 <div class="outline-text-3" id="text-orgb096d00">
 <p>
ちょっとした公園、消滅。
</p>

 <ul class="org-ul"> <li> <a href="https://www.google.com/maps/@32.0398207,130.2737716,3a,71.3y,353h,73.64t/data=!3m6!1e1!3m4!1sk1ZzynYzynZjgsvEUNzGbQ!2e0!7i13312!8i6656?coh=205409&entry=ttu">Izumi, Kagoshima - Google Maps</a> before</li>
 <li> <a href="https://www.google.com/maps/@32.0397435,130.2737644,3a,75y,356.2h,77.6t/data=!3m6!1e1!3m4!1sToOPt1N2jNXO6zrECzFMdw!2e0!7i16384!8i8192?coh=205409&entry=ttu">Izumi, Kagoshima - Google Maps</a> after</li>
</ul></div>
</div>
 <div id="outline-container-orgbb0bd26" class="outline-3">
 <h3 id="orgbb0bd26"> <a href="#orgbb0bd26"></a> <a href="https://c57115.hatenablog.com/entry/2021/08/15/071641">鹿児島電化 昭和45年10月1日 - 転轍器</a></h3>
 <div class="outline-text-3" id="text-orgbb0bd26">
 <p>
昔の折口駅の写真がある。
</p>
</div>
</div>
 <div id="outline-container-orgfe6e50c" class="outline-3">
 <h3 id="orgfe6e50c"> <a href="#orgfe6e50c"></a> <a href="https://www.city.akune.lg.jp/material/files/group/67/kohoS6005.pdf">広報あくね 昭和60年5月</a></h3>
 <div class="outline-text-3" id="text-orgfe6e50c">
 <p>
鍋石の記述がある回。
</p>
</div>
</div>
 <div id="outline-container-org2dacf1f" class="outline-3">
 <h3 id="org2dacf1f"> <a href="#org2dacf1f"></a> <a href="http://go-akune.jp/files/Document/0/Document_6_file.pdf">あくね 文化財ガイドマップ</a></h3>
 <div class="outline-text-3" id="text-org2dacf1f">
 <p>
阿久根市の文化財ガイドマップ。
</p>
</div>
</div>
 <div id="outline-container-org56e1b2e" class="outline-3">
 <h3 id="org56e1b2e"> <a href="#org56e1b2e"></a> <a href="https://www.city.akune.lg.jp/material/files/group/13/shiseiyoran_2022.pdf">市勢要覧2022</a></h3>
 <div class="outline-text-3" id="text-org56e1b2e">
 <p>
阿久根市の概要。
</p>
</div>
</div>
 <div id="outline-container-orgf828c82" class="outline-3">
 <h3 id="orgf828c82"> <a href="#orgf828c82"></a> <a href="https://www.pref.kagoshima.jp/am01/chiiki/hokusatsu/chiiki/satsumakaidou.html">鹿児島県／薩摩街道（出水筋）マップについて</a></h3>
 <div class="outline-text-3" id="text-orgf828c82">
 <p>
公開されている薩摩街道マップ。
</p>
</div>
</div>
 <div id="outline-container-orge90b755" class="outline-3">
 <h3 id="orge90b755"> <a href="#orge90b755"></a> <a href="http://hyakkaido.travel.coocan.jp/satumakaidou14akunenisikata.html">薩摩街道14阿久根～西方</a></h3>
 <div class="outline-text-3" id="text-orge90b755">
 <p>
街道歩き。
</p>
</div>
</div>
 <div id="outline-container-org1b10332" class="outline-3">
 <h3 id="org1b10332"> <a href="#org1b10332"></a> <a href="https://www.digital.archives.go.jp/DAS/pickup/view/detail/detailArchives/0301000000/0000000231/00">薩摩国（元禄）</a></h3>
 <div class="outline-text-3" id="text-org1b10332">
 <p>
1700年代の地図。
</p>
</div>
</div>
 <div id="outline-container-org1894101" class="outline-3">
 <h3 id="org1894101"> <a href="#org1894101"></a> <a href="https://catalog.lib.kyushu-u.ac.jp/opac_detail_md/?reqCode=frombib&lang=0&amode=MD820&opkey=&bibid=4066828&start=">西海道全圖 - 九大コレクション | 九州大学附属図書館</a></h3>
 <div class="outline-text-3" id="text-org1894101">
 <p>
九州の古い地図。
</p>
</div>
</div>
 <div id="outline-container-org469cc2d" class="outline-3">
 <h3 id="org469cc2d"> <a href="#org469cc2d"></a> <a href="https://www.digital.archives.go.jp/DAS/meta/listPhoto?LANG=default&BID=F1000000000000001212&ID=M2008032521114289505&TYPE=large">日本国地理測量之図</a></h3>
 <div class="outline-text-3" id="text-org469cc2d">
 <p>
全国図。
</p>
</div>
</div>
 <div id="outline-container-org657164e" class="outline-3">
 <h3 id="org657164e"> <a href="#org657164e"></a> <a href="https://rmda.kulib.kyoto-u.ac.jp/item/rb00023965#?c=0&m=0&s=0&cv=0&r=0&xywh=659%2C7608%2C5352%2C858">大日本帝國豫察西南部地質圖. | 京都大学貴重資料デジタルアーカイブ</a></h3>
 <div class="outline-text-3" id="text-org657164e">
 <p>
九州南部の古い地図。
</p>
</div>
</div>
 <div id="outline-container-orgdbba554" class="outline-3">
 <h3 id="orgdbba554"> <a href="#orgdbba554"></a> <a href="https://maps.qchizu.xyz/#6/37.900865/138.449707/&base=pale&ls=pale%7Cmlit_road2019_bridge_01&disp=11&lcd=mlit_road2019_bridge_01&vs=c1j0h0k0l0u0t0z0r0s0m0f2&d=m">全国Ｑ地図｜各種地形図・地図情報の統合閲覧サイト</a></h3>
 <div class="outline-text-3" id="text-orgdbba554">
 <p>
橋の地図。
</p>
</div>
</div>
 <div id="outline-container-org6474627" class="outline-3">
 <h3 id="org6474627"> <a href="#org6474627"></a> <a href="https://373news.com/_news/storyid/142378/">76年前、自宅前の線路の列車を米軍機が襲った。怖いもの見たさで外に出た。右足に強い痛み。大量の血の中から見つけた銃弾は今も持っている〈証言 語り継ぐ戦争〉 | 鹿児島のニュース | 南日本新聞 | 373news.com</a></h3>
 <div class="outline-text-3" id="text-org6474627">
 <p>
折口の、鉄道車両に対する空襲。
</p>
</div>
</div>
 <div id="outline-container-org10e40c9" class="outline-3">
 <h3 id="org10e40c9"> <a href="#org10e40c9"></a> <a href="https://www3.nhk.or.jp/lnews/kagoshima/20220627/5050019201.html">太平洋戦争末期の阿久根市の列車空襲 米軍撮影の写真見つかる｜NHK 鹿児島県のニュース</a></h3>
 <div class="outline-text-3" id="text-org10e40c9">
 <p>
証言を裏付ける写真が発見される。川の流路が現在と違うことがわかる。
</p>
</div>
</div>
 <div id="outline-container-org4251a61" class="outline-3">
 <h3 id="org4251a61"> <a href="#org4251a61"></a> <a href="https://ameblo.jp/kazkazgonta/entry-12608111672.html">東京発寝台特急の挽歌 第3章 ～西鹿児島行き「はやぶさ」・日本一の長距離列車の旅路～ | ごんたのつれづれ旅日記</a></h3>
 <div class="outline-text-3" id="text-org4251a61">
 <p>
面白い。
</p>
</div>
</div>
 <div id="outline-container-org307dcc1" class="outline-3">
 <h3 id="org307dcc1"> <a href="#org307dcc1"></a> <a href="http://www.ishibashi-mamorukai.jp/list/sb-kago.html">めがね橋一覧表：鹿児島県</a></h3>
 <div class="outline-text-3" id="text-org307dcc1">
 <p>
鹿児島のめがね橋一覧。
</p>
</div>
</div>
 <div id="outline-container-org2d4b653" class="outline-3">
 <h3 id="org2d4b653"> <a href="#org2d4b653"></a> <a href="https://nlftp.mlit.go.jp/kokjo/tochimizu/F3/data/pdf/4622t.pdf">土地分類基本調査 阿久根</a></h3>
 <div class="outline-text-3" id="text-org2d4b653">
 <p>
折口川に関する記述がある。
</p>
 <blockquote>
 <p>
阿久根市折口と野田町の一部の折口川をはさむ水田地帯302haを対象に昭和26年~昭和31年にかけて実施した用水改良事業である。折口川は、路線・断面共の不規則で又河口に設けられた樋門(3連)が不備であるため、排水が悪い。そのため本事業においては幹線・排水路及び樋門を改修すると共に取水堰の改修を行った。
</p>
</blockquote>

 <ul class="org-ul"> <li> <a href="https://mapps.gsi.go.jp/map-lib-api/contentsImageDisplay.do?specificationId=41735&isDetail=true">USA-R50-2-17</a> 1948年</li>
 <li> <a href="https://mapps.gsi.go.jp/map-lib-api/apiContentsView.do?specificationId=18100">USA-M798-A-39</a> 1948年</li>
 <li> <a href="https://purl.stanford.edu/kq741wk9448">1:50,000 chikeizu | 地形図</a></li>
 <li> <a href="https://www.env.go.jp/water/suiiki/h14/fu04.pdf">平成１４年度公共用水域水質測定結果 付表４</a>
 <ul class="org-ul"> <li>河川水質ワースト</li>
</ul></li>
 <li> <a href="https://www.kagoshima-it.go.jp/k-it/pdf/kenkyu_report/i_report_1962_17.pdf">鹿児島県工業試験場(1962／第9号) 大隅中部・垂水地域および阿久根・出水地域の地下水の水質について</a>
 <ul class="org-ul"> <li>水質調査</li>
 <li>折口川、およびその周りの深井戸は各成分が多く水質が悪い。これは折口川周辺の温泉水の混入によるものと思われる。</li>
</ul></li>
</ul></div>
</div>
</div>
 <div id="outline-container-orgc50bd86" class="outline-2">
 <h2 id="orgc50bd86"> <a href="#orgc50bd86">鉄道</a></h2>
 <div class="outline-text-2" id="text-orgc50bd86">
</div>
 <div id="outline-container-orgf88611e" class="outline-3">
 <h3 id="orgf88611e"> <a href="#orgf88611e"></a> <a href="https://www.hotetu.net/kouzannkidou/110816mituikushikinokouzankidou.html">廃線探索 三井串木野鉱山軌道(歩鉄の達人)</a></h3>
 <div class="outline-text-3" id="text-orgf88611e">
 <p>
串木野の配線。
</p>
</div>
</div>
</div>
 <div id="outline-container-org03c0d9c" class="outline-2">
 <h2 id="org03c0d9c"> <a href="#org03c0d9c">趣味</a></h2>
 <div class="outline-text-2" id="text-org03c0d9c">
</div>
 <div id="outline-container-org503efba" class="outline-3">
 <h3 id="org503efba"> <a href="#org503efba"></a> <a href="https://www.jst.go.jp/pr/info/info708/index.html">粘菌の輸送ネットワークから都市構造の設計理論を構築―都市間を結ぶ最適な道路・鉄道網の法則確立に期待―</a></h3>
 <div class="outline-text-3" id="text-org503efba">
 <p>
最適なネットワーク構築の研究。
</p>
</div>
</div>
 <div id="outline-container-org361deb0" class="outline-3">
 <h3 id="org361deb0"> <a href="#org361deb0"></a> <a href="https://site.developerproductivity.dev/jobs/">Jobs</a></h3>
 <div class="outline-text-3" id="text-org361deb0">
 <p>
開発生産性の部署。興味がある。
</p>
</div>
</div>
 <div id="outline-container-org52e3db6" class="outline-3">
 <h3 id="org52e3db6"> <a href="#org52e3db6"></a> <a href="https://q.livesense.co.jp/2023/09/26/2287.html">「心理的安全性」はなぜ混乱を招き続けるのか | Q by Livesense</a></h3>
 <div class="outline-text-3" id="text-org52e3db6">
 <p>
縦書きスタイル。
</p>
</div>
</div>
 <div id="outline-container-orgd5039ec" class="outline-3">
 <h3 id="orgd5039ec"> <a href="#orgd5039ec"></a> <a href="https://wholeearth.info/">Whole Earth Index</a></h3>
 <div class="outline-text-3" id="text-orgd5039ec">
 <p>
Whole Earth Catalogを公開している。
</p>
</div>
</div>
 <div id="outline-container-org159d26a" class="outline-3">
 <h3 id="org159d26a"> <a href="#org159d26a"></a> <a href="https://boku-boardgame.net/ito">ito（イト）を徹底紹介｜価値観のズレに大爆笑できるカードゲーム | ぼくボド</a></h3>
 <div class="outline-text-3" id="text-org159d26a">
 <p>
価値観のズレを楽しむゲーム。
</p>
</div>
</div>
 <div id="outline-container-orgdf681d5" class="outline-3">
 <h3 id="orgdf681d5"> <a href="#orgdf681d5"></a> <a href="https://www.woodwarlock.jp/fs/wood/kwdg0004">ブロックス Blokus ボードゲーム ｜ マテル社（7歳くらいから）｜木のおもちゃ.jp</a></h3>
 <div class="outline-text-3" id="text-orgdf681d5">
 <p>
シンプルで奥深いボードゲーム。
</p>
</div>
</div>
 <div id="outline-container-orga634f60" class="outline-3">
 <h3 id="orga634f60"> <a href="#orga634f60"></a> <a href="https://www.publickey1.jp/blog/10/post_106.html">データセンターで大声を出してはいけません － Publickey</a></h3>
 <div class="outline-text-3" id="text-orga634f60">
 <p>
おもしろ動画。
</p>
</div>
</div>
 <div id="outline-container-org9c81f58" class="outline-3">
 <h3 id="org9c81f58"> <a href="#org9c81f58"></a> <a href="https://www.marinetraffic.com/jp/ais/home/centerx:-12.0/centery:25.0/zoom:4">MarineTraffic: Global Ship Tracking Intelligence | AIS Marine Traffic</a></h3>
 <div class="outline-text-3" id="text-org9c81f58">
 <p>
艦船の位置情報。
</p>
</div>
</div>
 <div id="outline-container-orga288980" class="outline-3">
 <h3 id="orga288980"> <a href="#orga288980"></a> <a href="https://gigazine.net/news/20160607-biohazard-symbol-design/">バイオハザードのマークはどのようにデザインされたのか？ - GIGAZINE</a></h3>
 <div class="outline-text-3" id="text-orga288980">
 <p>
バイオハザードのロゴが作られた経緯。面白い。
</p>
</div>
</div>
 <div id="outline-container-org5b975c7" class="outline-3">
 <h3 id="org5b975c7"> <a href="#org5b975c7"></a> <a href="https://blog.song.mu/entry/centerpin-theory-is-wrong">やはりお前らのセンターピン理論は間違っている - An Epicurean</a></h3>
 <div class="outline-text-3" id="text-org5b975c7">
 <p>
ボウリングの理論。面白い。
</p>
</div>
</div>
 <div id="outline-container-org31c33b9" class="outline-3">
 <h3 id="org31c33b9"> <a href="#org31c33b9"></a> <a href="https://www.wolfmud.org/about-wolfmud.html">WolfMUD: About WolfMUD</a></h3>
 <div class="outline-text-3" id="text-org31c33b9">
 <p>
テキストベースのマルチプレイヤーゲームの説明。
</p>
</div>
</div>
 <div id="outline-container-orgf388042" class="outline-3">
 <h3 id="orgf388042"> <a href="#orgf388042"></a> <a href="https://www.sweethome3d.com/SweetHome3DJSOnline.jsp">Sweet Home 3D JS Online</a></h3>
 <div class="outline-text-3" id="text-orgf388042">
 <p>
部屋を設計できるWebアプリ。
</p>
</div>
</div>
 <div id="outline-container-orgba06ca2" class="outline-3">
 <h3 id="orgba06ca2"> <a href="#orgba06ca2"></a> <a href="https://www.youtube.com/watch?v=wKVqLTzh_z4">Watchmaking: Machining a 0.6 mm Screw - YouTube</a></h3>
 <div class="outline-text-3" id="text-orgba06ca2">
 <p>
極小のネジを作る動画。
</p>
</div>
</div>
 <div id="outline-container-orgcc6122e" class="outline-3">
 <h3 id="orgcc6122e"> <a href="#orgcc6122e"></a> <a href="https://www.zerorenovation.com/blog/highly-soundproof-apartment/">防音力の高いマンションとは？確実に見極めるチェックポイント15個｜中古マンションのリノベーションならゼロリノべ</a></h3>
 <div class="outline-text-3" id="text-orgcc6122e">
 <p>
質問項目。
</p>
</div>
</div>
 <div id="outline-container-org564035d" class="outline-3">
 <h3 id="org564035d"> <a href="#org564035d"></a> <a href="https://haikyo.info/s/11941.html">荒井注のカラオケハウス - 廃墟検索地図</a></h3>
 <div class="outline-text-3" id="text-org564035d">
 <p>
機材が入らなかった珍騒動。
</p>
</div>
</div>
 <div id="outline-container-org7d283a9" class="outline-3">
 <h3 id="org7d283a9"> <a href="#org7d283a9"></a> <a href="https://www.beautiful-furniture.net/masterpiece/aluminum-group-chairs.html">Herman Miller / Aluminum Group Chairs（アルミナムグループチェア</a></h3>
 <div class="outline-text-3" id="text-org7d283a9">
 <p>
たまに家具屋で見る美しい椅子。
</p>
</div>
</div>
 <div id="outline-container-orgaa58aa0" class="outline-3">
 <h3 id="orgaa58aa0"> <a href="#orgaa58aa0"></a> <a href="https://ja.wikipedia.org/wiki/%E5%B1%B1%E4%B8%8B%E6%B8%85">山下清 - Wikipedia</a></h3>
 <div class="outline-text-3" id="text-orgaa58aa0">
 <p>
画家、裸の大将。
</p>
</div>
</div>
 <div id="outline-container-orgb4dc395" class="outline-3">
 <h3 id="orgb4dc395"> <a href="#orgb4dc395"></a> <a href="https://pocket.shonenmagazine.com/article/entry/ijimeruyabai_20190901">追い込まれた経験があるからこそキャラがリアルに――『いじめるヤバイ奴』中村なん先生インタビュー - マガポケベース</a></h3>
 <div class="outline-text-3" id="text-orgb4dc395">
 <p>
異色の経緯。
</p>

 <blockquote>
 <p>
親からは「どうせすぐに打ち切られる」というようなことを言われました。
でも連載が決まってすらいない僕としては「現状は、打ち切られる以下の状態なんだよな……」と。
</p>

 <p>
とはいえ、連載が始まらないと本当にヤバイなぁと感じて、死にものぐるいで頑張りました。
毎週のようにネームを持ち込んで。そこから5カ月で連載が本決まりになりました。
「ああ、命がつながったなぁ」と安堵したのを今でも覚えています。
</p>

 <p>
僕自身はこんな感じですが『いじめるヤバイ奴』は真面目に描いています。
自分のせいでもあるんですが、そんな追い込まれた経験が作品にも生かせているんじゃないかとは思っています。
</p>
</blockquote>
</div>
</div>
 <div id="outline-container-orgcc71129" class="outline-3">
 <h3 id="orgcc71129"> <a href="#orgcc71129"></a> <a href="https://netshop.impress.co.jp/node/10157">佐賀市が運営する通販サイトはなぜ2年足らずで閉鎖したのか | 竹内謙礼の一筆啓上 | ネットショップ担当者フォーラム</a></h3>
 <div class="outline-text-3" id="text-orgcc71129">
 <p>
ネットに関係するすべての商売でいえる。
</p>

 <blockquote>
 <p>
最後の敗因は「ナンバーワンになる意識が低かった」という点だ。ネットショップ運営の初心者にありがちな考え方に「そこまで高い売り上げは望んでいない」というものがある。「月に100万円売れればいいんです」「たくさん売れなくてもいいんです」などと、「高い売り上げを望まない＝頑張らなくてもいい」という図式になってしまい、中途半端なお金と時間の投資で終わらせて、ネットショップの運営に失敗するケースは少なくない。
</p>

 <p>
ネットショップは優れた1店舗にお客が集中するため、売れるネットショップと売れないネットショップの差が極端に分かれやすい。実店舗であれば「近い」「店の雰囲気が良い」と言う理由で、二番手、三番手のお店にもお客が流れて来る。しかしネットショップは「価格」「ページ」「露出」の3拍子がそろった店にお客が集中するため、ナンバーワンの店舗以外にはお客が流れにくくなる。
</p>

 <p>
Eコマース業界が1％の成功店舗と99％の負け組に分かれてしまう要因は、この「全力でやらなければまったく売れない」というネットショップ運営の難しさにある。
</p>
</blockquote>
</div>
</div>
 <div id="outline-container-org1d09dd6" class="outline-3">
 <h3 id="org1d09dd6"> <a href="#org1d09dd6"></a> <a href="https://drive-ns.hatenablog.com/archive">記事一覧 - 週末大冒険</a></h3>
 <div class="outline-text-3" id="text-org1d09dd6">
 <p>
面白いスポット紹介。
</p>
</div>
</div>
 <div id="outline-container-org31c7c77" class="outline-3">
 <h3 id="org31c7c77"> <a href="#org31c7c77"></a> <a href="https://www.youtube.com/watch?v=txkHN6izK2Y">GameBoy Graphics: Tiles, Palettes, and Encoding - YouTube</a></h3>
 <div class="outline-text-3" id="text-org31c7c77">
 <p>
ゲームボーイの描画システムの解説。
</p>
</div>
</div>
 <div id="outline-container-org7a9aca9" class="outline-3">
 <h3 id="org7a9aca9"> <a href="#org7a9aca9"></a> <a href="https://media.longnow.org/files/2/soul-of-japan-wb.pdf">Soul of Japan</a></h3>
 <div class="outline-text-3" id="text-org7a9aca9">
 <p>
日本文化の説明。
</p>
</div>
</div>
 <div id="outline-container-org384e827" class="outline-3">
 <h3 id="org384e827"> <a href="#org384e827"></a> <a href="https://www.youtube.com/watch?v=d0yGdNEWdn0">How to learn any language in six months | Chris Lonsdale | TEDxLingnanUniversity - YouTube</a></h3>
 <div class="outline-text-3" id="text-org384e827">
 <p>
外国語を学ぶ方法。
</p>
 <ul class="org-ul"> <li>コンテンツに集中する</li>
 <li>コミュニケーションの道具として使う</li>
 <li>体で学ぶ</li>
 <li>リラックス、好奇心。曖昧さに耐えられる環境</li>
 <li>ボディランゲージから得る</li>
 <li>たくさん聞く</li>
 <li>組み合わせる</li>
 <li>表情から学ぶ。発音とか</li>
</ul></div>
</div>
 <div id="outline-container-org4803093" class="outline-3">
 <h3 id="org4803093"> <a href="#org4803093"></a> <a href="https://http.cat/">HTTP Cats</a></h3>
 <div class="outline-text-3" id="text-org4803093">
 <p>
HTTP Statusの猫画像。
</p>
</div>
</div>
 <div id="outline-container-orga0bdb12" class="outline-3">
 <h3 id="orga0bdb12"> <a href="#orga0bdb12"></a> <a href="https://milan.cvitkovic.net/writing/rules_for_conferences/">Milan Cvitkovic</a></h3>
 <div class="outline-text-3" id="text-orga0bdb12">
 <p>
カンファレンスのルール。
</p>
</div>
</div>
 <div id="outline-container-org8f8515d" class="outline-3">
 <h3 id="org8f8515d"> <a href="#org8f8515d"></a> <a href="https://ja.wikipedia.org/wiki/%E3%83%9E%E3%83%B3%E3%83%8F%E3%83%83%E3%82%BF%E3%83%B3%E8%B7%9D%E9%9B%A2">マンハッタン距離 - Wikipedia</a></h3>
 <div class="outline-text-3" id="text-org8f8515d">
 <p>
タクシー幾何学。
</p>
</div>
</div>
 <div id="outline-container-org35fb1f5" class="outline-3">
 <h3 id="org35fb1f5"> <a href="#org35fb1f5"></a> <a href="https://ciechanow.ski/mechanical-watch/">Mechanical Watch – Bartosz Ciechanowski</a></h3>
 <div class="outline-text-3" id="text-org35fb1f5">
 <p>
時計の詳細な仕組み。精巧なアニメーションで理解しやすい。
</p>
</div>
</div>
 <div id="outline-container-orgdd7a473" class="outline-3">
 <h3 id="orgdd7a473"> <a href="#orgdd7a473"></a> <a href="https://tatsu-zine.com/books/blood-sweat-and-pixels">血と汗とピクセル 大ヒットゲーム開発者たちの激戦記</a></h3>
 <div class="outline-text-3" id="text-orgdd7a473">
 <p>
スターデューバレーの開発者の話。5年間1人で開発して完成させた…。
ディアブロ3の話はすごいな。最初だめだったゲームが、数年かけてその評価を覆す。
</p>
</div>
</div>
 <div id="outline-container-org4767764" class="outline-3">
 <h3 id="org4767764"> <a href="#org4767764"></a> <a href="https://www.thesaurus.com/">Synonyms and Antonyms of Words | Thesaurus.com</a></h3>
 <div class="outline-text-3" id="text-org4767764">
 <p>
類語辞典。
</p>
</div>
</div>
 <div id="outline-container-orga2c2b05" class="outline-3">
 <h3 id="orga2c2b05"> <a href="#orga2c2b05"></a> <a href="https://futuretage.tumblr.com/">S C A P E S</a></h3>
 <div class="outline-text-3" id="text-orga2c2b05">
 <p>
すごい雰囲気のいいGIFを集めたページ。
</p>
</div>
</div>
 <div id="outline-container-org3103db7" class="outline-3">
 <h3 id="org3103db7"> <a href="#org3103db7"></a> <a href="https://www.sycom.co.jp/custom/model?no=000680">Aqua-Master X570A｜水冷PC｜BTOパソコン｜BTO パソコン(PC)の【@Sycom】(サイコム)</a></h3>
 <div class="outline-text-3" id="text-org3103db7">
 <p>
なしを選択できるので安くできる。
</p>
</div>
</div>
 <div id="outline-container-orgefdcccd" class="outline-3">
 <h3 id="orgefdcccd"> <a href="#orgefdcccd"></a> <a href="https://gigazine.net/news/20110909-tepco-report/">福島第一原発に襲来した高さ10メートルの津波写真付き報告書まとめを東電が公開中 - GIGAZINE</a></h3>
 <div class="outline-text-3" id="text-orgefdcccd">
 <p>
解説。
</p>
</div>
</div>
 <div id="outline-container-org61852e5" class="outline-3">
 <h3 id="org61852e5"> <a href="#org61852e5"></a> <a href="https://www.tepco.co.jp/cc/press/betu11_j/images/110909m.pdf">福島第一原子力発電所 東北地方太平洋沖地震に伴う原子炉施設への影響について</a></h3>
 <div class="outline-text-3" id="text-org61852e5">
 <p>
東電の報告書。
</p>
</div>
</div>
 <div id="outline-container-orgacb6c1c" class="outline-3">
 <h3 id="orgacb6c1c"> <a href="#orgacb6c1c"></a> <a href="https://www.gizmodo.jp/2019/02/the-best-websites-to-use-one-hour.html">｢有意義に｣時間を潰せるウェブサイト12選 | ギズモード・ジャパン</a></h3>
 <div class="outline-text-3" id="text-orgacb6c1c">
 <p>
面白いサイトの紹介。
</p>
</div>
</div>
 <div id="outline-container-orgaed270b" class="outline-3">
 <h3 id="orgaed270b"> <a href="#orgaed270b"></a> <a href="https://www.howstuffworks.com/">HowStuffWorks - Learn How Everything Works!</a></h3>
 <div class="outline-text-3" id="text-orgaed270b">
 <p>
色々な仕組みを教える教育サイト。
</p>
</div>
</div>
 <div id="outline-container-orgdfca398" class="outline-3">
 <h3 id="orgdfca398"> <a href="#orgdfca398"></a> <a href="https://www.mapcrunch.com/">MapCrunch - Random Street View</a></h3>
 <div class="outline-text-3" id="text-orgdfca398">
 <p>
ランダムな場所のストリートビューを表示する。
</p>
</div>
</div>
 <div id="outline-container-org0b077d4" class="outline-3">
 <h3 id="org0b077d4"> <a href="#org0b077d4"></a> <a href="https://apod.nasa.gov/apod/astropix.html">Astronomy Picture of the Day</a></h3>
 <div class="outline-text-3" id="text-org0b077d4">
 <p>
毎日NASAの写真を公開している。
</p>
</div>
</div>
 <div id="outline-container-org7b140d2" class="outline-3">
 <h3 id="org7b140d2"> <a href="#org7b140d2"></a> <a href="https://www.earthcam.com/">EarthCam - Webcam Network</a></h3>
 <div class="outline-text-3" id="text-org7b140d2">
 <p>
世界中のWEBカメラを閲覧できるサイト。
</p>
</div>
</div>
 <div id="outline-container-orgb514481" class="outline-3">
 <h3 id="orgb514481"> <a href="#orgb514481"></a> <a href="https://www.netinbag.com/ja/internet-page-1.html">インターネット - Netinbag.com</a></h3>
 <div class="outline-text-3" id="text-orgb514481">
 <p>
さまざまな分野の興味深いFAQが掲載されてる謎のサイト。
</p>
</div>
</div>
 <div id="outline-container-org9f1989a" class="outline-3">
 <h3 id="org9f1989a"> <a href="#org9f1989a"></a> <a href="https://www.nikkei-science.com/page/magazine/1009/201009_040.html">時間は実在するか？ - 日経サイエンス</a></h3>
 <div class="outline-text-3" id="text-org9f1989a">
 <p>
時間はお金のようなもの、という例えがわかりやすい。
</p>
</div>
</div>
 <div id="outline-container-org31a941a" class="outline-3">
 <h3 id="org31a941a"> <a href="#org31a941a"></a> <a href="https://old.no/charmap/Unicode/">Unicode 10.0</a></h3>
 <div class="outline-text-3" id="text-org31a941a">
 <p>
1ページにまとまったUnicode絵文字一覧。
</p>
</div>
</div>
 <div id="outline-container-org2ea61e6" class="outline-3">
 <h3 id="org2ea61e6"> <a href="#org2ea61e6"></a> <a href="https://manytools.org/hacker-tools/convert-images-to-ascii-art/">ASCII art generator for geeks! - Convert images/pictures to ASCII art online! (HTML/text)</a></h3>
 <div class="outline-text-3" id="text-org2ea61e6">
 <p>
画像をアスキーアートに変換する。
</p>
</div>
</div>
 <div id="outline-container-org739e9af" class="outline-3">
 <h3 id="org739e9af"> <a href="#org739e9af"></a> <a href="http://ccmixter.org/view/media/home">ccMixter - Welcome to ccMixter</a></h3>
 <div class="outline-text-3" id="text-org739e9af">
 <p>
CCの音源。
</p>
</div>
</div>
 <div id="outline-container-org0659b66" class="outline-3">
 <h3 id="org0659b66"> <a href="#org0659b66"></a> <a href="https://bonkersworld.net/">Bonkers World</a></h3>
 <div class="outline-text-3" id="text-org0659b66">
 <p>
おもしろい風刺画サイト。
</p>
</div>
</div>
 <div id="outline-container-org35bf4bd" class="outline-3">
 <h3 id="org35bf4bd"> <a href="#org35bf4bd"></a> <a href="https://mycolor.space/?hex=%23EFEC88&sub=1">ColorSpace - Color Palettes Generator and Color Gradient Tool</a></h3>
 <div class="outline-text-3" id="text-org35bf4bd">
 <p>
カラーテーマを作成してくれる。
</p>
</div>
</div>
 <div id="outline-container-orgab18eb3" class="outline-3">
 <h3 id="orgab18eb3"> <a href="#orgab18eb3"></a> <a href="https://www.science.org/careers/2016/03/how-seriously-read-scientific-paper">How to (seriously) read a scientific paper | Science | AAAS</a></h3>
 <div class="outline-text-3" id="text-orgab18eb3">
 <p>
科学論文の読み方。
</p>
</div>
</div>
 <div id="outline-container-org9ec7e35" class="outline-3">
 <h3 id="org9ec7e35"> <a href="#org9ec7e35"></a> <a href="https://www.remove.bg/upload">Upload Image – remove.bg</a></h3>
 <div class="outline-text-3" id="text-org9ec7e35">
 <p>
画像から背景を消すツール。
</p>
</div>
</div>
 <div id="outline-container-org3bf3d68" class="outline-3">
 <h3 id="org3bf3d68"> <a href="#org3bf3d68"></a> <a href="https://tanks-encyclopedia.com/">Tank Encyclopedia, the first online tank museum</a></h3>
 <div class="outline-text-3" id="text-org3bf3d68">
 <p>
戦車の百科事典。おもしろい。
</p>
</div>
</div>
 <div id="outline-container-orgd6bc78e" class="outline-3">
 <h3 id="orgd6bc78e"> <a href="#orgd6bc78e"></a> <a href="http://www.securico.co.jp/jbl/image/guns.html">銃の基礎知識</a></h3>
 <div class="outline-text-3" id="text-orgd6bc78e">
 <p>
面白い。特に  <code>警察庁長官狙撃事件</code> の銃の観点から見た分析が興味深い。
</p>
</div>
</div>
 <div id="outline-container-org3976b91" class="outline-3">
 <h3 id="org3976b91"> <a href="#org3976b91"></a> <a href="http://www.kagakueizo.org/">科学映像館</a></h3>
 <div class="outline-text-3" id="text-org3976b91">
 <p>
古い映像が面白い。
</p>
</div>
</div>
 <div id="outline-container-org7843e34" class="outline-3">
 <h3 id="org7843e34"> <a href="#org7843e34"></a> <a href="https://tiermaker.com/">Tier List Maker for Everything - TierMaker</a></h3>
 <div class="outline-text-3" id="text-org7843e34">
 <p>
なんでもリスト、ランキングを作るサイト。
</p>
</div>
</div>
 <div id="outline-container-org880f769" class="outline-3">
 <h3 id="org880f769"> <a href="#org880f769"></a> <a href="https://manjotpahwa.medium.com/10-reading-habits-that-changed-my-life-5c7673bc34bc">10 Reading habits that changed my life | by Manjot Pahwa | Medium</a></h3>
 <div class="outline-text-3" id="text-org880f769">
 <p>
読み方。
</p>
</div>
</div>
 <div id="outline-container-org633f009" class="outline-3">
 <h3 id="org633f009"> <a href="#org633f009"></a> <a href="https://generated.photos/">Generated Photos | Unique, worry-free model photos</a></h3>
 <div class="outline-text-3" id="text-org633f009">
 <p>
架空の顔を生成するツール。
</p>
</div>
</div>
 <div id="outline-container-orgd609adb" class="outline-3">
 <h3 id="orgd609adb"> <a href="#orgd609adb"></a> <a href="https://www.handheldmuseum.com/">Electronic Handheld Game Museum</a></h3>
 <div class="outline-text-3" id="text-orgd609adb">
 <p>
携帯ゲーム機の博物館。
</p>
</div>
</div>
 <div id="outline-container-orgb62e1d5" class="outline-3">
 <h3 id="orgb62e1d5"> <a href="#orgb62e1d5"></a> <a href="https://www.yumeginga.jp/720_directors_room/monokowashis/index.html">「ものこわし」のすすめ！</a></h3>
 <div class="outline-text-3" id="text-orgb62e1d5">
 <p>
身近なエンジニアリング。
</p>
</div>
</div>
 <div id="outline-container-org7faf218" class="outline-3">
 <h3 id="org7faf218"> <a href="#org7faf218"></a> <a href="https://www.wdic.org/w/WDIC/%E8%A9%AD%E5%BC%81%E3%81%AE%E7%89%B9%E5%BE%B4%E3%81%AE%E3%82%AC%E3%82%A4%E3%83%89%E3%83%A9%E3%82%A4%E3%83%B3">詭弁の特徴のガイドライン 通信用語の基礎知識</a></h3>
</div>
 <div id="outline-container-org2a8fae5" class="outline-3">
 <h3 id="org2a8fae5"> <a href="#org2a8fae5"></a> <a href="http://www.toothpastefordinner.com/">Toothpaste For Dinner by @drewtoothpaste - wait for that first beer</a></h3>
 <div class="outline-text-3" id="text-org2a8fae5">
 <p>
面白い漫画のサイト。
</p>
</div>
</div>
 <div id="outline-container-org0e1ebd5" class="outline-3">
 <h3 id="org0e1ebd5"> <a href="#org0e1ebd5"></a> <a href="http://www.jsce.or.jp/committee/hsce/2800/index2(2800).htm">日本の近代土木遺産</a></h3>
 <div class="outline-text-3" id="text-org0e1ebd5">
 <p>
面白い。
</p>
</div>
</div>
 <div id="outline-container-orgbadf3a7" class="outline-3">
 <h3 id="orgbadf3a7"> <a href="#orgbadf3a7"></a> <a href="http://osomatsulabo.web.fc2.com/archives.files/archives.html">バイオハザードへのツッコミ</a></h3>
 <div class="outline-text-3" id="text-orgbadf3a7">
 <p>
面白い。
</p>
</div>
</div>
 <div id="outline-container-orgf1ba780" class="outline-3">
 <h3 id="orgf1ba780"> <a href="#orgf1ba780"></a> <a href="https://www.arcgis.com/apps/SimpleViewer/index.html?appid=733446cc5a314ddf85c59ecc10321b41">Japan 1:50,000 測量地図 スタンフォード</a></h3>
 <div class="outline-text-3" id="text-orgf1ba780">
 <p>
日本の古地図。
</p>
</div>
</div>
 <div id="outline-container-orga565900" class="outline-3">
 <h3 id="orga565900"> <a href="#orga565900"></a> <a href="http://blog.livedoor.jp/lionfan/archives/52681874.html">らいおんの隠れ家 : 「忍者ハットリくん☆ベスト盤」から抜粋。 - livedoor Blog（ブログ）</a></h3>
 <div class="outline-text-3" id="text-orga565900">
 <p>
こういうの大好き。
</p>
</div>
</div>
 <div id="outline-container-org06a0c83" class="outline-3">
 <h3 id="org06a0c83"> <a href="#org06a0c83"></a> <a href="https://toyokeizai.net/articles/-/450356">父の借金を負わされた男性がやっと掴んだ｢幸せ｣ | ボクらは｢貧困強制社会｣を生きている | 東洋経済オンライン | 社会をよくする経済ニュース</a></h3>
 <div class="outline-text-3" id="text-org06a0c83">
 <p>
逆境でも才能によって抜け出せる人もいる。
</p>
</div>
</div>
 <div id="outline-container-org486a0ae" class="outline-3">
 <h3 id="org486a0ae"> <a href="#org486a0ae"></a> <a href="https://mdbootstrap.com/docs/standard/content-styles/colors/">Bootstrap 5 Colors - examples & tutorial</a></h3>
 <div class="outline-text-3" id="text-org486a0ae">
 <p>
Bootstrapの色一覧。
</p>
</div>
</div>
 <div id="outline-container-org09a4f79" class="outline-3">
 <h3 id="org09a4f79"> <a href="#org09a4f79"> <span class="done DONE">DONE</span> The Tipping Point</a></h3>
 <div class="outline-text-3" id="text-org09a4f79">
 <ul class="org-ul"> <li>25, 30, 40, 43, 58, 60, 73, 80, 86, 90, 96, 101, 122, 144, 158, 177, 200, 202, 215, 230, 244, 250, 260</li>

 <li>6回辿る
 <ul class="org-ul"> <li>任意の人を2人選んで関係を6回辿ればつながる、というがこれは一様でない。一部の人が大きなつながりを持っていてハブになっている。コネクター。その人を元に様々な人がつながりを生んでいるような。</li>
</ul></li>
 <li>知人
 <ul class="org-ul"> <li>ほとんどの人にとって、この種の知人関係養成(バースデーカードを送ることとか)にはシャイになる。誰でもやっぱりそうだよな。connectorの一人は、そういうゆるいつながりを維持することに長けていた。</li>
 <li>仕事を得るうえでは、弱いつながりの方が役に立つ。多くの人が紹介で職を得る。友人よりも知人の方が多い。定義的に知人の方が外部の世界の人々であるからだ。</li>
</ul></li>
 <li>セサミストリート
 <ul class="org-ul"> <li>セサミストリートはもっとも教育的な番組の1つである。どうやって子供に興味をもってもらうか。世界に名前付けをしている段階の子供にとって、1つの名前が異なる2つの物を指すことがあることを理解させるのは難しい。</li>
</ul></li>
 <li>1980年代のニューヨークの犯罪
 <ul class="org-ul"> <li>犯罪は病気のように伝染する。割れ窓。犯罪を防ぐためには巨大な問題を解決する必要はない。落書きなど小さな犯罪を防げばいい。</li>
</ul></li>
 <li>人間は行動を考えるとき、文脈より人物の性格や備わったものを重視しやすい(FAE)。実際は文脈のほうが大きな影響をおよぼしている。たとえば兄弟構成。よく言われる特質(年上の子は保守的、とか)は、家族外では当てはまらないことが多い。</li>
 <li>家族より、近所やコミュニティの方が影響が大きい。歩いていてすれ違う人も、どう行動するかを決定するのに大きな影響をもたらす。</li>
 <li>組織は小さいほうがいい。大きいとコミュニケーションコストが大きくなり、コントロールが難しくなるから。</li>
 <li>1960年のミクロネシアでは自殺はほとんど知られてなかったが、一人の少年の自殺をきっかけに毎年増加していった。率はアメリカの7倍にまで達した。自殺は伝染する。</li>
 <li>ヘビースモーカーの典型的な特徴。当てはまる人が多いな。
 <ul class="org-ul"> <li>外向的</li>
 <li>不安症、神経症</li>
 <li>飲酒、コーヒーの量が非喫煙者に比べて多い</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org6b7b348" class="outline-3">
 <h3 id="org6b7b348"> <a href="#org6b7b348"></a> <a href="https://www.amtrak.com/content/dam/projects/dotcom/english/public/documents/Maps/Amtrak-System-Map-020923.pdf">Amtrak National Route Map</a></h3>
 <div class="outline-text-3" id="text-org6b7b348">
 <p>
アムトラックの路線図。
</p>
</div>
</div>
</div>
 <div id="outline-container-orgc5213a9" class="outline-2">
 <h2 id="orgc5213a9"> <a href="#orgc5213a9">未分類</a></h2>
 <div class="outline-text-2" id="text-orgc5213a9">
</div>
 <div id="outline-container-orgd298b62" class="outline-3">
 <h3 id="orgd298b62"> <a href="#orgd298b62"></a> <a href="https://dictionary.sanseido-publ.co.jp/column/sankok88">その88 「せいせいしゅくしゅく」に市民権を。 | 三省堂国語辞典のすすめ（飯間 浩明） | 三省堂 ことばのコラム</a></h3>
 <div class="outline-text-3" id="text-orgd298b62">
 <p>
おもしろ言葉ネタ。
</p>
</div>
</div>
 <div id="outline-container-orgcc90ce3" class="outline-3">
 <h3 id="orgcc90ce3"> <a href="#orgcc90ce3"></a> <a href="https://gigazine.net/news/20130502-mcdonalds-theory/">「マクドナルド理論」を使うとより優れたアイデアが出てきてプロジェクトが進行する - GIGAZINE</a></h3>
 <div class="outline-text-3" id="text-orgcc90ce3">
 <p>
マクドナルドはやめようとなって対案が出てくる現象。
</p>
</div>
</div>
 <div id="outline-container-org08dee2b" class="outline-3">
 <h3 id="org08dee2b"> <a href="#org08dee2b"></a> <a href="https://xtech.nikkei.com/atcl/nxt/column/18/00138/022401228/?i_cid=nbpnxt_ranking">令和も続くIT現場の所属企業隠し、「名刺を切らしておりまして…」は法に触れるか | 日経クロステック（xTECH）</a></h3>
 <div class="outline-text-3" id="text-org08dee2b">
 <p>
他人事ではない話。
</p>
</div>
</div>
 <div id="outline-container-org858bb2d" class="outline-3">
 <h3 id="org858bb2d"> <a href="#org858bb2d"></a> <a href="https://omocoro.jp/kiji/362872/">差出人不明の仕送り | オモコロ</a></h3>
 <div class="outline-text-3" id="text-org858bb2d">
 <p>
怖い話。
</p>

 <blockquote>
 <p>
栗原：あのね、人は死んだらいなくなるんです。それはもう、あっけないくらい。灰だけ残して消えてしまう。
</p>

 <p>
でも、残された人たちは、それに耐えられないんですよ。だから、死んだ人の『居場所』を作る。
それがお墓です。
</p>
</blockquote>
</div>
</div>
 <div id="outline-container-orge49fbf9" class="outline-3">
 <h3 id="orge49fbf9"> <a href="#orge49fbf9"></a> <a href="https://www.youtube.com/channel/UCsLiV4WJfkTEHH0b9PmRklw">Webdriver Torso - YouTube</a></h3>
 <div class="outline-text-3" id="text-orge49fbf9">
 <p>
GoogleがYouTubeの本番環境の品質検証で使っていた動画チャンネル。
</p>
</div>
</div>
 <div id="outline-container-orgcd16d9a" class="outline-3">
 <h3 id="orgcd16d9a"> <a href="#orgcd16d9a"></a> <a href="http://shapecatcher.com/">Shapecatcher: Draw the Unicode character you want!</a></h3>
 <div class="outline-text-3" id="text-orgcd16d9a">
 <p>
手書きで記号検索する。
</p>
</div>
</div>
 <div id="outline-container-org551647b" class="outline-3">
 <h3 id="org551647b"> <a href="#org551647b"></a> <a href="https://unicode-table.com/en/search/?q=square">Search - Unicode Character Table</a></h3>
 <div class="outline-text-3" id="text-org551647b">
 <p>
絵文字を探すときに便利。
</p>
</div>
</div>
</div>
 <div id="outline-container-orgfe47b56" class="outline-2">
 <h2 id="orgfe47b56"> <a href="#orgfe47b56">Archives</a></h2>
 <div class="outline-text-2" id="text-orgfe47b56">
</div>
 <div id="outline-container-orgd5b918e" class="outline-3">
 <h3 id="orgd5b918e"> <a href="#orgd5b918e"> <span class="done DONE">DONE</span> はてなブックマークからroam notesに移動</a></h3>
 <div class="outline-text-3" id="text-orgd5b918e">
 <p>
 <span class="timestamp-wrapper"> <span class="timestamp"><2021-09-26 日> </span></span> org-protocolを設定したのではてブを使う理由はない。
</p>
</div>
</div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20210910122240-bookmarks.html"/>
  <id>https://kijimad.github.io/roam/20210910122240-bookmarks.html</id>
  <updated>2025-06-14T00:00:00+09:00</updated>
</entry>
<entry>
  <title>C言語</title>
  <author><name>root</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orgb5fdd12" class="outline-2">
 <h2 id="orgb5fdd12"> <a href="#orgb5fdd12">概要</a></h2>
 <div class="outline-text-2" id="text-orgb5fdd12">
 <p>
C言語は汎用の <a href="20210509101246-programming_language.html#ID-868ac56a-2d42-48d7-ab7f-7047c85a8f39">Programming Language</a>。OS、プログラミング言語、ハードウェアとの接続といった基盤的な部分で使われる。
</p>

 <p>
たとえば。
</p>

 <ul class="org-ul"> <li> <a href="20220108110637-linux.html#ID-7a81eb7c-8e2b-400a-b01a-8fa597ea527a">Linux</a></li>
 <li> <a href="20210509095513-ruby.html#ID-cfd092c4-1bb2-43d3-88b1-9f647809e546">Ruby</a></li>
 <li> <a href="20210725134208-python.html#ID-a6c9c9ad-d9b1-4e13-8992-75d8590e464c">Python</a></li>
 <li> <a href="20210508234743-emacs.html#ID-1ad8c3d5-97ba-4905-be11-e6f2626127ad">Emacs</a></li>
</ul> <p>
現在基盤として使われている多くのプログラムがCで書かれていて、 <a href="20210926150327-oss.html#ID-bb71747d-8599-4aee-b747-13cb44c05773">OSS</a>として公開されている。別の言語で書くにしても、既存の巨大なコード群を参考にできるのは大きな利点。
</p>
</div>
</div>
 <div id="outline-container-org6ed4e78" class="outline-2">
 <h2 id="org6ed4e78"> <a href="#org6ed4e78">Memo</a></h2>
 <div class="outline-text-2" id="text-org6ed4e78">
</div>
 <div id="outline-container-org9b54ba7" class="outline-3">
 <h3 id="org9b54ba7"> <a href="#org9b54ba7">ラインエディタedのメイン関数</a></h3>
 <div class="outline-text-3" id="text-org9b54ba7">
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 1: </span>割り込み処理などを見ることができる</label> <pre class="src src-git-permalink">https://github.com/kd-collective/NetBSD/blob/89341ae2e1875e7f91cefa9b1dcc0e4549edcde0/bin/ed/main.c#L113
</pre>
</div>

 <div class="results" id="orgf4452db">
 <p>
main(int ac, char *av[])
</p>

</div>
</div>
</div>
 <div id="outline-container-org386cfee" class="outline-3">
 <h3 id="org386cfee"> <a href="#org386cfee">シグナル</a></h3>
 <div class="outline-text-3" id="text-org386cfee">
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 2: </span>シグナルによって中断を検知する</label> <pre class="src src-git-permalink">https://github.com/kd-collective/NetBSD/blob/89341ae2e1875e7f91cefa9b1dcc0e4549edcde0/games/arithmetic/arithmetic.c#L156-L162
</pre>
</div>

 <div class="results" id="org3aa623e">
 <p>
 <i>* Handle interrupt character.  Print score and exit. *</i>
static void
intr(int dummy __unused)
{
	showstats(1);
	exit(0);
}
</p>

</div>
</div>
</div>
 <div id="outline-container-org3fe490a" class="outline-3">
 <h3 id="org3fe490a"> <a href="#org3fe490a">shellのノード定義</a></h3>
 <div class="outline-text-3" id="text-org3fe490a">
 <div class="org-src-container">
 <pre class="src src-git-permalink">https://github.com/kd-collective/NetBSD/blob/89341ae2e1875e7f91cefa9b1dcc0e4549edcde0/bin/sh/nodetypes#L56-L61
</pre>
</div>

 <div class="results" id="orgd2f9a2f">
 <p>
NCMD ncmd			# a simple command
	type	  int
	backgnd	  int			# set to run command in background
	args	  nodeptr		# the arguments
	redirect  nodeptr		# list of file redirections
	lineno	  int
</p>

</div>
</div>
</div>
 <div id="outline-container-org9cb7cc9" class="outline-3">
 <h3 id="org9cb7cc9"> <a href="#org9cb7cc9">バイナリツリー</a></h3>
 <div class="outline-text-3" id="text-org9cb7cc9">
 <p>
バイナリツリーの中にはleft, rightを持つものがあり、leftは小さい、rightは大きいとしてノードの順番を決定する。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 3: </span>バイナリツリーの定義。各ノードはほかのノードを最高2つまで持つことができる</label> <pre class="src src-git-permalink">https://github.com/kd-collective/NetBSD/blob/89341ae2e1875e7f91cefa9b1dcc0e4549edcde0/external/bsd/libbind/dist/include/isc/tree.h#L44-L49
</pre>
</div>

 <div class="results" id="orgc1eaf91">
 <p>
typedef	struct tree_s {
		tree_t  data;
		struct tree_s *left, *right;
		short		bal;
	}
	tree;
</p>

</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 4: </span>ツリー内の要素を再帰的に検索する</label> <pre class="src src-git-permalink">https://github.com/kd-collective/NetBSD/blob/89341ae2e1875e7f91cefa9b1dcc0e4549edcde0/external/bsd/libbind/dist/isc/tree.c#L105-L130
</pre>
</div>

 <div class="results" id="org5c36ff7">
 <p>
tree_t
tree_srch(tree **ppr_tree, int (*pfi_compare)(tree_t, tree_t), tree_t p_user) {
	ENTER(“tree_srch”)
</p>

 <p>
if (*ppr_tree) {
	int i_comp = (*pfi_compare)(p_user, (**ppr_tree).data);
</p>

 <p>
if (i_comp > 0)
	RET(tree_srch(&(**ppr_tree).right,
		      pfi_compare,
		      p_user))
</p>

 <p>
if (i_comp < 0)
	RET(tree_srch(&(**ppr_tree).left,
		      pfi_compare,
		      p_user))
</p>

 <p>
	 <i>* not higher, not lower… this must be the one.
	 *</i>
	RET((**ppr_tree).data)
}
</p>

 <p>
	 <i>* grounded. NOT found.
	 *</i>
	RET(NULL)
}
</p>

</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 5: </span>系統的にツリーをたどる</label> <pre class="src src-git-permalink">https://github.com/kd-collective/NetBSD/blob/89341ae2e1875e7f91cefa9b1dcc0e4549edcde0/external/bsd/libbind/dist/isc/tree.c#L155-L169
</pre>
</div>

 <div class="results" id="org08a391f">
 <p>
int
tree_trav(tree **ppr_tree, int (*pfi_uar)(tree_t)) {
	ENTER(“tree_trav”)
</p>

 <p>
if (!*ppr_tree)
	RET(TRUE)
</p>

 <p>
	if (!tree_trav(&(**ppr_tree).left, pfi_uar))
		RET(FALSE)
	if (!(*pfi_uar)((**ppr_tree).data))
		RET(FALSE)
	if (!tree_trav(&(**ppr_tree).right, pfi_uar))
		RET(FALSE)
	RET(TRUE)
}
</p>

</div>

 <ul class="org-ul"> <li>ツリーは言語構造の表現ができる</li>
</ul> <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 6: </span>lintでの例</label> <pre class="src src-git-permalink">https://github.com/kd-collective/NetBSD/blob/89341ae2e1875e7f91cefa9b1dcc0e4549edcde0/usr.bin/xlint/lint1/lint1.h#L284-L305
</pre>
</div>

 <div class="results" id="orgd2fa771">
 <p>
typedef	struct tnode {
	op_t tn_op;		 <i>* operator *</i>
	type_t  <b>tn_type;	/</b> type  <b>/
	bool	tn_lvalue:1;	/</b> node is lvalue  <b>/
	bool	tn_cast:1;	/</b> if tn_op == CVT, it’s an explicit cast  <b>/
	bool	tn_parenthesized:1;
	bool	tn_sys:1;	/</b> in strict bool mode, allow mixture between
</p>
 <ul class="org-ul"> <li>bool and scalar, for code from system</li>
 <li>headers that may be a mixture between</li>
 <li>scalar types and bool</li>
</ul> <p>
				  <b>/
	bool	tn_system_dependent:1; /</b> depends on sizeof or offsetof  <b>/
	union {
		struct {
			struct	tnode *_tn_left;	/</b> (left) operand  <b>/
			struct	tnode *_tn_right;	/</b> right operand  <b>/
		} tn_s;
		sym_t *_tn_sym;	/</b> symbol if op  <code>= NAME */
		val_t	*_tn_val;	/* value if op =</code> CON  <b>/
		strg_t *_tn_string;	/</b> string if op == STRING */
	} tn_u;
} tnode_t;
</p>

</div>
</div>
</div>
 <div id="outline-container-orgaed391f" class="outline-3">
 <h3 id="orgaed391f"> <a href="#orgaed391f">ハッシュテーブルエントリに複数の要素を格納する</a></h3>
 <div class="outline-text-3" id="text-orgaed391f">
 <p>
シンボルテーブルの構築によく使われる。
</p>

 <div class="org-src-container">
 <pre class="src src-git-permalink">https://github.com/kd-collective/NetBSD/blob/89341ae2e1875e7f91cefa9b1dcc0e4549edcde0/games/battlestar/parse.c#L75-L84
</pre>
</div>

 <div class="results" id="orga59a097">
 <p>
static struct wlist *
lookup(const char   *s)
{
	struct wlist *wp;
</p>

 <p>
	for (wp = hashtab[hash(s)]; wp != NULL; wp = wp->next)
		if (*s  <code>= *wp->string && strcmp(s, wp->string) =</code> 0)
			return wp;
	return NULL;
}
</p>

</div>
</div>
</div>
 <div id="outline-container-org4353d59" class="outline-3">
 <h3 id="org4353d59"> <a href="#org4353d59">循環リスト実装</a></h3>
 <div class="outline-text-3" id="text-org4353d59">
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 8: </span>終端がないので、forを使えない。最初の要素を保存して、同じ要素にあたるまでループする</label> <pre class="src src-git-permalink">https://github.com/kd-collective/NetBSD/blob/89341ae2e1875e7f91cefa9b1dcc0e4549edcde0/bin/csh/lex.c#L176-L189
</pre>
</div>

 <div class="results" id="org34085b9">
 <p>
prlex(FILE *fp, struct wordent *sp0)
{
    struct wordent *sp;
</p>

 <p>
    sp = sp0->next;
    for (;;) {
	(void)fprintf(fp, “%s”, vis_str(sp->word));
	sp = sp->next;
	if (sp  <code>= sp0)
	    break;
	if (sp->word[0] !</code> ’\n’)
	    (void) fputc(’ ’, fp);
    }
}
</p>

</div>
</div>
</div>
 <div id="outline-container-org8a5bab0" class="outline-3">
 <h3 id="org8a5bab0"> <a href="#org8a5bab0">リスト処理</a></h3>
 <div class="outline-text-3" id="text-org8a5bab0">
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 9: </span>host_listを定義</label> <pre class="src src-git-permalink">https://github.com/kd-collective/NetBSD/blob/89341ae2e1875e7f91cefa9b1dcc0e4549edcde0/usr.bin/rup/rup.c#L63-L70
</pre>
</div>

 <div class="results" id="orgd079b64">
 <p>
static struct host_list {
	struct host_list *next;
	int family;
	union {
		struct in6_addr _addr6;
		struct in_addr _addr4;
	} addr;
} *hosts;
</p>

</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 10: </span>リストを辿りforで処理する</label> <pre class="src src-git-permalink">https://github.com/kd-collective/NetBSD/blob/89341ae2e1875e7f91cefa9b1dcc0e4549edcde0/usr.bin/rup/rup.c#L79-L105
</pre>
</div>

 <div class="results" id="org9e06afe">
 <p>
search_host(struct sockaddr *sa)
{
	struct host_list *hp;
</p>

 <p>
if (!hosts)
	return 0;
</p>

 <p>
	for (hp = hosts; hp != NULL; hp = hp->next) {
		switch (hp->family) {
		case AF_INET6:
			if (!memcmp(&hp->addr6,
			    &((struct sockaddr_in6 *)(void *)sa)->sin6_addr,
			    sizeof (struct in6_addr)))
				return 1;
			break;
		case AF_INET:
			if (!memcmp(&hp->addr4,
			    &((struct sockaddr_in *)(void *)sa)->sin_addr,
			    sizeof (struct in_addr)))
				return 1;
			break;
		default:
			break;
		}
	}
	return 0;
}
</p>

</div>

 <p>
nextという要素を持つ構造体は1方向リスト連結リストのノードを定義する。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 11: </span>nextを追加して辿れるようにする</label> <pre class="src src-git-permalink">https://github.com/kd-collective/NetBSD/blob/89341ae2e1875e7f91cefa9b1dcc0e4549edcde0/usr.bin/rup/rup.c#L108-L134
</pre>
</div>

 <div class="results" id="org497e294">
 <p>
remember_host(struct sockaddr *sa)
{
	struct host_list *hp;
</p>

 <p>
	if ((hp = malloc(sizeof(struct host_list))) == NULL) {
		err(1, “malloc”);
		 <i>* NOTREACHED *</i>
	}
	hp->family = sa->sa_family;
	hp->next = hosts;
	switch (sa->sa_family) {
	case AF_INET6:
		(void)memcpy(&hp->addr6,
		    &((struct sockaddr_in6  <b>)(void *)sa)->sin6_addr,
		    sizeof (struct in6_addr));
		break;
	case AF_INET:
		(void)memcpy(&hp->addr4,
		    &((struct sockaddr_in *)(void *)sa)->sin_addr,
		    sizeof (struct in_addr));
		break;
	default:
		errx(1, “unknown address family”);
		/</b> NOTREACHED */
	}
	hosts = hp;
}
</p>

</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 12: </span>ダブル連結リストから要素epを削除</label> <pre class="src src-git-permalink">https://github.com/kd-collective/NetBSD/blob/89341ae2e1875e7f91cefa9b1dcc0e4549edcde0/usr.bin/telnet/commands.c#L1700-L1716
</pre>
</div>

 <div class="results" id="org6099ad2">
 <p>
struct env_lst *
env_undefine(const char *var, char *d)
{
	struct env_lst *ep;
</p>

 <p>
	if ((ep = env_find(var)) != NULL) {
		ep->prev->next = ep->next;
		if (ep->next)
			ep->next->prev = ep->prev;
		if (ep->var)
			free(ep->var);
		if (ep->value)
			free(ep->value);
		free(ep);
	}
	return NULL;
}
</p>

</div>
</div>
</div>
 <div id="outline-container-org820bacd" class="outline-3">
 <h3 id="org820bacd"> <a href="#org820bacd">配列定義</a></h3>
 <div class="outline-text-3" id="text-org820bacd">
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 13: </span>配列要素があらかじめわかっている場合の初期化</label> <pre class="src src-git-permalink">https://github.com/kd-collective/NetBSD/blob/89341ae2e1875e7f91cefa9b1dcc0e4549edcde0/lib/libc/time/localtime.c#L869-L871
</pre>
</div>

 <div class="results" id="org75270f8">
 <p>
static const int	year_lengths[2] = {
	DAYSPERNYEAR, DAYSPERLYEAR
};
</p>

</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 14: </span>通常の年と潤年の日数</label> <pre class="src src-git-permalink">https://github.com/kd-collective/NetBSD/blob/89341ae2e1875e7f91cefa9b1dcc0e4549edcde0/lib/libc/time/localtime.c#L864-L867
</pre>
</div>

 <div class="results" id="org51eb328">
 <p>
static const int	mon_lengths[2][MONSPERYEAR] = {
	{ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 },
	{ 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 }
};
</p>

</div>
</div>
</div>
 <div id="outline-container-orge67a930" class="outline-3">
 <h3 id="orge67a930"> <a href="#orge67a930">データの内部構造を表現する</a></h3>
 <div class="outline-text-3" id="text-orge67a930">
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 15: </span>tarが各ファイルの情報を表現するために使用する構造体</label> <pre class="src src-git-permalink">https://github.com/kd-collective/NetBSD/blob/89341ae2e1875e7f91cefa9b1dcc0e4549edcde0/external/bsd/file/dist/src/tar.h#L53-L71
</pre>
</div>

 <div class="results" id="org6bdb746">
 <p>
union record {
	unsigned char	charptr[RECORDSIZE];
	struct header {
		char	name[NAMSIZ];
		char	mode[8];
		char	uid[8];
		char	gid[8];
		char	size[12];
		char	mtime[12];
		char	chksum[8];
		char	linkflag;
		char	linkname[NAMSIZ];
		char	magic[8];
		char	uname[TUNMLEN];
		char	gname[TGNMLEN];
		char	devmajor[8];
		char	devminor[8];
	} header;
};
</p>

</div>
</div>
</div>
 <div id="outline-container-org18710e5" class="outline-3">
 <h3 id="org18710e5"> <a href="#org18710e5">多態の実装</a></h3>
 <div class="outline-text-3" id="text-org18710e5">
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 16: </span>データの種類を定義。名前にtypeをつける慣例</label> <pre class="src src-git-permalink">https://github.com/kd-collective/NetBSD/blob/89341ae2e1875e7f91cefa9b1dcc0e4549edcde0/include/rpc/rpc_msg.h#L54-L57
</pre>
</div>

 <div class="results" id="org8b9fe99">
 <p>
enum msg_type {
	CALL=0,
	REPLY=1
};
</p>

</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 17: </span>msg_typeで2つの型が識別される</label> <pre class="src src-git-permalink">https://github.com/kd-collective/NetBSD/blob/89341ae2e1875e7f91cefa9b1dcc0e4549edcde0/include/rpc/rpc_msg.h#L149-L155
</pre>
</div>

 <div class="results" id="org355315e">
 <p>
struct rpc_msg {
	uint32_t  rm_xid;
	enum msg_type  rm_direction;
	union {
		struct call_body RM_cmb;
		struct reply_body RM_rmb;
	} ru;
</p>

</div>
</div>
</div>
 <div id="outline-container-orgfe89681" class="outline-3">
 <h3 id="orgfe89681"> <a href="#orgfe89681">共用体の使用例</a></h3>
 <div class="outline-text-3" id="text-orgfe89681">
 <p>
共用体はメモリを共用し、節約するために用いる。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 18: </span>mallocのコードから</label> <pre class="src src-git-permalink">https://github.com/kd-collective/NetBSD/blob/89341ae2e1875e7f91cefa9b1dcc0e4549edcde0/lib/libbsdmalloc/malloc.c#L75-L89
</pre>
</div>

 <div class="results" id="orgf10f133">
 <p>
union	overhead {
	union	overhead  <b>ov_next;	/</b> when free  <b>/
	struct {
		u_char ovu_magic;	/</b> magic number  <b>/
		u_char ovu_index;	/</b> bucket #  <b>/
#ifdef RCHECK
		u_short ovu_rmagic;	/</b> range magic number  <b>/
		u_long ovu_size;	/</b> actual block size */
#endif
	} ovu;
#define	ov_magic ovu.ovu_magic
#define	ov_index ovu.ovu_index
#define	ov_rmagic ovu.ovu_rmagic
#define	ov_size  ovu.ovu_size
};
</p>

</div>

 <p>
空き状態と専有状態を同時にとることはないので、同じメモリ空間を共用できる。
</p>
</div>
</div>
 <div id="outline-container-orgcf7562d" class="outline-3">
 <h3 id="orgcf7562d"> <a href="#orgcf7562d">構造体の使用例</a></h3>
 <div class="outline-text-3" id="text-orgcf7562d">
 <p>
外部媒体のデータ構造を表現するために構造体が用いられる。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 19: </span>ネットワークインターフェースカードのコマンドブロックのデータ構造</label> <pre class="src src-git-permalink">https://github.com/kd-collective/NetBSD/blob/89341ae2e1875e7f91cefa9b1dcc0e4549edcde0/sys/dev/ic/i82557reg.h#L147-L151
</pre>
</div>

 <div class="results" id="orga46d769">
 <p>
struct fxp_cb_nop {
	volatile uint16_t cb_status;
	volatile uint16_t cb_command;
	volatile uint32_t link_addr;
};
</p>

</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 20: </span>TCPパケットヘッダの定義</label> <pre class="src src-git-permalink">https://github.com/kd-collective/NetBSD/blob/89341ae2e1875e7f91cefa9b1dcc0e4549edcde0/external/bsd/tcpdump/dist/tcp.h#L37-L47
</pre>
</div>

 <div class="results" id="orgc75b5dd">
 <p>
struct tcphdr {
	uint16_t th_sport;		 <i>* source port *</i>
	uint16_t th_dport;		 <i>* destination port *</i>
	tcp_seq  th_seq;			 <i>* sequence number *</i>
	tcp_seq  th_ack;			 <i>* acknowledgement number *</i>
	uint8_t  th_offx2;		 <i>* data offset, rsvd *</i>
	uint8_t  th_flags;
	uint16_t th_win;			 <i>* window *</i>
	uint16_t th_sum;			 <i>* checksum *</i>
	uint16_t th_urp;			 <i>* urgent pointer *</i>
} UNALIGNED;
</p>

</div>
</div>
</div>
 <div id="outline-container-org5e8fd08" class="outline-3">
 <h3 id="org5e8fd08"> <a href="#org5e8fd08">strlenの実装</a></h3>
 <div class="outline-text-3" id="text-org5e8fd08">
 <div class="org-src-container">
 <pre class="src src-git-permalink">https://github.com/kd-collective/NetBSD/blob/89341ae2e1875e7f91cefa9b1dcc0e4549edcde0/common/lib/libc/string/strlen.c#L49-L56
</pre>
</div>

 <div class="results" id="org5244b50">
 <p>
strlen(const char *str)
{
	const char *s;
</p>

 <p>
	for (s = str; *s; ++s)
		continue;
	return(s - str);
}
</p>

</div>

 <p>
ポインタを文字列の終端に達するまでインクリメントして、先頭のアドレスを差し引く。
</p>
 <div class="org-src-container">
 <pre class="src src-C"> <span class="org-preprocessor">#include</span>  <span class="org-string"><stdio.h></span>
 <span class="org-preprocessor">#include</span>  <span class="org-string"><string.h></span>
 <span class="org-type">int</span>  <span class="org-function-name">test_strlen</span>( <span class="org-type">char</span> * <span class="org-variable-name">str</span>)  <span class="org-comment-delimiter">// </span> <span class="org-comment">strは先頭のアドレス</span>
{
   <span class="org-type">char</span> * <span class="org-variable-name">s</span>;

   <span class="org-keyword">for</span> (s = str; *s; ++s)
     <span class="org-keyword">continue</span>;  <span class="org-comment-delimiter">// </span> <span class="org-comment">要素の数だけインクリメント</span>
   <span class="org-keyword">return</span>(s - str);  <span class="org-comment-delimiter">// </span> <span class="org-comment">進んだ分を求める</span>
}
</pre>
</div>

 <div class="results" id="org74d84ad">

</div>
</div>
</div>
 <div id="outline-container-org2039f06" class="outline-3">
 <h3 id="org2039f06"> <a href="#org2039f06">無限ループのイディオム</a></h3>
 <div class="outline-text-3" id="text-org2039f06">
 <p>
無限ループの書き方。条件を指定しない。
</p>

 <div class="org-src-container">
 <pre class="src src-git-permalink">https://github.com/kd-collective/emacs/blob/d983e080e027bd7b680b1e40ccfa0c71d6a3cd94/lib-src/emacsclient.c#L275-L286
</pre>
</div>

 <div class="results" id="org69588f3">
 <p>
for (;;)
  {
    char *buf = malloc (buf_size);
    if (!buf)
      return NULL;
    if (getcwd (buf, buf_size)  <code>= buf)
	    return buf;
	  free (buf);
	  if (errno !</code> ERANGE || buf_size  <code>= bufsize_max)
	    return NULL;
	  buf_size = buf_size <</code> bufsize_max / 2 ? 2 * buf_size : bufsize_max;
  }
</p>

</div>
</div>
</div>
 <div id="outline-container-org07a0506" class="outline-3">
 <h3 id="org07a0506"> <a href="#org07a0506">配列変数は先頭の要素へのポインタ</a></h3>
 <div class="outline-text-3" id="text-org07a0506">
 <p>
配列変数には先頭の要素へのポインタが入っていて、インデックスをその分ずらすことで要素を取得できる。配列が0から始まるのはそのため。
</p>

 <ul class="org-ul"> <li>最初の要素は、*doses もしくは doses[0] で取得できる。</li>
</ul> <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 21: </span>等価なさまざまな表記</label> <pre class="src src-C"> <span class="org-type">doses</span>[3] == *(doses + 3) == *(3 + doses) == 3[doses]
</pre>
</div>

 <div class="results" id="org5967ed4">

</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 22: </span>ポインタをずらすことで、文字列をスキップできる</label> <pre class="src src-C"> <span class="org-type">void</span>  <span class="org-function-name">skip</span>( <span class="org-type">char</span> * <span class="org-variable-name">msg</span>)
{
  puts(msg + 6);
}
 <span class="org-type">char</span> * <span class="org-variable-name">msg_from_amy</span> =  <span class="org-string">"Dont call me"</span>;
 <span class="org-function-name">skip</span>(msg_from_amy);
</pre>
</div>

 <div class="results" id="org382a4f2">
 <p>
all me
</p>

</div>
</div>
</div>
 <div id="outline-container-orgd95de8b" class="outline-3">
 <h3 id="orgd95de8b"> <a href="#orgd95de8b">引数の渡し方</a></h3>
 <div class="outline-text-3" id="text-orgd95de8b">
 <p>
関数呼び出しのとき、デフォルトは値渡しで、コピーされた値が使用される。コピーされるので、呼び出し元の引数の値は変化しない。変化させたいときは、参照を渡す必要がある。
</p>
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 23: </span>main内で座標を保持して、移動するための関数で座標を変化させるような場合、参照渡しでないといけない。</label> <pre class="src src-C"> <span class="org-type">void</span>  <span class="org-function-name">move</span>( <span class="org-type">int</span> * <span class="org-variable-name">lat</span>,  <span class="org-type">int</span> * <span class="org-variable-name">lon</span>) {
  *lat = *lat + 1;  <span class="org-comment-delimiter">// </span> <span class="org-comment">引数で渡されたlatにはメモリアドレスが入っているので、格納している値を読み込むために*を使う。</span>
  *lon = *lon + 1;
}

 <span class="org-type">int</span>  <span class="org-function-name">main</span>() {
   <span class="org-type">int</span>  <span class="org-variable-name">latitude</span> = 32;
   <span class="org-type">int</span>  <span class="org-variable-name">longitude</span> = 64;
  move(&latitude, &longitude);  <span class="org-comment-delimiter">// </span> <span class="org-comment">参照を渡す。参照でない場合、単なる値のコピーとなって、move()内で全く関係ないローカル変数の値が変わるだけになる。main()内の値は変わらない。</span>
  printf( <span class="org-string">"停止...現在位置：[%i, %i]\n"</span>, latitude, longitude);
   <span class="org-keyword">return</span> 0;
}
</pre>
</div>

 <div class="results" id="orgb9ef68e">
 <p>
停止…現在位置：[33, 65]
</p>

</div>

 <p>
渡したメモリ位置を更新する関数といえる。
</p>
</div>
</div>
</div>
 <div id="outline-container-org20e791e" class="outline-2">
 <h2 id="org20e791e"> <a href="#org20e791e">Tasks</a></h2>
 <div class="outline-text-2" id="text-org20e791e">
</div>
 <div id="outline-container-org2295acf" class="outline-3">
 <h3 id="org2295acf"> <a href="#org2295acf"> <span class="todo TODO">TODO</span> </a> <a href="https://www.amazon.co.jp/C%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0FAQ%E2%80%95C%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%81%AE%E3%82%88%E3%81%8F%E5%B0%8B%E3%81%AD%E3%82%89%E3%82%8C%E3%82%8B%E8%B3%AA%E5%95%8F-%E6%96%B0%E7%B4%80%E5%85%83%E7%A4%BE%E6%83%85%E5%A0%B1%E5%B7%A5%E5%AD%A6%E3%82%B7%E3%83%AA%E3%83%BC%E3%82%BA-%E3%82%B9%E3%83%86%E3%82%A3%E3%83%BC%E3%83%96-%E3%82%B5%E3%83%9F%E3%83%83%E3%83%88/dp/4775302507">Amazon.co.jp: CプログラミングFAQ: Cプログラミングのよく尋ねられる質問 (新紀元社情報工学シリーズ) : スティーブ サミット, Summit,Steve, 欽一, 北野: 本</a></h3>
 <div class="outline-text-3" id="text-org2295acf">
 <p>
Cの詳細な解説本。
</p>
</div>
</div>
 <div id="outline-container-orgb5658e1" class="outline-3">
 <h3 id="orgb5658e1"> <a href="#orgb5658e1"> <span class="todo TODO">TODO</span> </a> <a href="https://www.amazon.co.jp/%E3%82%A8%E3%82%AD%E3%82%B9%E3%83%91%E3%83%BC%E3%83%88C%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E2%80%95%E7%9F%A5%E3%82%89%E3%82%8C%E3%81%96%E3%82%8BC%E3%81%AE%E6%B7%B1%E5%B1%A4-Ascii-books-%E3%83%94%E3%83%BC%E3%82%BF%E3%83%BC-%E3%83%B4%E3%82%A1%E3%83%B3%E3%83%BB%E3%83%87%E3%83%BB%E3%83%AA%E3%83%B3%E3%83%87%E3%83%B3/dp/4756116396">Amazon.co.jp: エキスパートCプログラミング: 知られざるCの深層</a></h3>
 <div class="outline-text-3" id="text-orgb5658e1">
 <p>
Cの解説本。
</p>
</div>
</div>
 <div id="outline-container-org412f1ab" class="outline-3">
 <h3 id="org412f1ab"> <a href="#org412f1ab"> <span class="todo TODO">TODO</span> </a> <a href="https://www.amazon.co.jp/C-%E3%81%AE%E8%A8%AD%E8%A8%88%E3%81%A8%E9%80%B2%E5%8C%96-Bjarne-Stroustrup/dp/4797328541">C++の設計と進化 | Bjarne Stroustrup 岩谷 宏 | 本 | 通販 | Amazon</a></h3>
 <div class="outline-text-3" id="text-org412f1ab">
 <p>
元のコンセプトはシンプルとのこと。
</p>
</div>
</div>
 <div id="outline-container-org163871b" class="outline-3">
 <h3 id="org163871b"> <a href="#org163871b"> <span class="todo TODO">TODO</span> </a> <a href="https://9cguide.appspot.com/">総合目次 - 苦しんで覚えるC言語</a></h3>
 <div class="outline-text-3" id="text-org163871b">
 <p>
WEB版の入門書。
</p>
</div>
</div>
 <div id="outline-container-org28f5c76" class="outline-3">
 <h3 id="org28f5c76"> <a href="#org28f5c76"> <span class="todo TODO">TODO</span> </a> <a href="https://www.oreilly.co.jp/books/9784873116099/">O’Reilly Japan - Head First C</a></h3>
 <div class="outline-text-3" id="text-org28f5c76">
 <ul class="org-ul"> <li>41, 59, 67, 103, 105</li>
</ul> <p>
楽しい入門書。
</p>
</div>
</div>
</div>
 <div id="outline-container-orgbd44b2a" class="outline-2">
 <h2 id="orgbd44b2a"> <a href="#orgbd44b2a">Reference</a></h2>
 <div class="outline-text-2" id="text-orgbd44b2a">
</div>
 <div id="outline-container-org2e3755e" class="outline-3">
 <h3 id="org2e3755e"> <a href="#org2e3755e"></a> <a href="https://syohex.hatenablog.com/entry/20100610/1276180481">weakシンボル - Shohei Yoshida’s Diary</a></h3>
 <div class="outline-text-3" id="text-org2e3755e">
 <p>
C言語のweakシンボルの使い方。
</p>
</div>
</div>
 <div id="outline-container-org88c700a" class="outline-3">
 <h3 id="org88c700a"> <a href="#org88c700a"></a> <a href="http://www.narihiro.info/g1gc-impl-book/">徹底解剖「G1GC」実装編</a></h3>
 <div class="outline-text-3" id="text-org88c700a">
 <p>
GCの実装の解説。
</p>
</div>
</div>
 <div id="outline-container-orgbf67b4b" class="outline-3">
 <h3 id="orgbf67b4b"> <a href="#orgbf67b4b"></a> <a href="https://kuina.ch/l6prog">６さいからのプログラミング</a></h3>
 <div class="outline-text-3" id="text-orgbf67b4b">
 <p>
C言語のチュートリアル。
</p>
</div>
</div>
 <div id="outline-container-org8d90fd8" class="outline-3">
 <h3 id="org8d90fd8"> <a href="#org8d90fd8"></a> <a href="http://www.kouno.jp/home/c_faq/">Language C FAQ</a></h3>
 <div class="outline-text-3" id="text-org8d90fd8">
 <p>
日本語版。
</p>
</div>
</div>
 <div id="outline-container-org8fda7d1" class="outline-3">
 <h3 id="org8fda7d1"> <a href="#org8fda7d1"></a> <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2137r0.html">P2137R0: Goals and priorities for C++</a></h3>
 <div class="outline-text-3" id="text-org8fda7d1">
 <p>
C++の提案書。
</p>
</div>
</div>
 <div id="outline-container-org2118bac" class="outline-3">
 <h3 id="org2118bac"> <a href="#org2118bac"></a> <a href="http://www.nurs.or.jp/~sug/soft/index.htm">杉浦とソフトウェア開発</a></h3>
 <div class="outline-text-3" id="text-org2118bac">
 <p>
なんだかすごい人。
</p>
</div>
</div>
 <div id="outline-container-orgc777ec4" class="outline-3">
 <h3 id="orgc777ec4"> <a href="#orgc777ec4"></a> <a href="http://www.kh.rim.or.jp/~nagamura/misc/stroustrup-interview.html">Bjarne Stroustrup インタビュー (？)</a></h3>
 <div class="outline-text-3" id="text-orgc777ec4">
 <p>
C++の開発者へのインタビュー。
</p>
</div>
</div>
</div>
 <div id="outline-container-org243b5d5" class="outline-2">
 <h2 id="org243b5d5"> <a href="#org243b5d5">Archives</a></h2>
</div>


 <div id="outline-container-org6d1dd4e" class="outline-2">
 <h2 id="org6d1dd4e"> <a href="#org6d1dd4e">Backlinks</a></h2>
 <div class="outline-text-2" id="text-org6d1dd4e">
 <ul class="org-ul"> <li> <a href="./20210508234743-emacs.html">Emacs</a></li>
 <li> <a href="./20210509095513-ruby.html">Ruby</a></li>
 <li> <a href="./20210829200955-obs.html">OBS</a></li>
 <li> <a href="./20210907223510-haskell.html">Haskell</a></li>
 <li> <a href="./20210911113057-go.html">Go</a></li>
 <li> <a href="./20210915221421-systemcrafters.html">System Crafters</a></li>
 <li> <a href="./20220108003324-scala.html">Scala</a></li>
 <li> <a href="./20220328224652-lua.html">Lua</a></li>
 <li> <a href="./20230815T231456--kdoc-27-cコンパイラを書く__project.html">KDOC 27: Cコンパイラを書く</a></li>
 <li> <a href="./20231014T171444--kdoc-46-goの宣言構文がcと異なる理由__wiki.html">KDOC 46: Goの宣言構文がCと異なる理由</a></li>
 <li> <a href="./20240105T215847--kdoc-63-『私はどのようにしてlinuxカーネルを学んだか』__book.html">KDOC 63: 『私はどのようにしてLinuxカーネルを学んだか』</a></li>
 <li> <a href="./20240301T205049--kdoc-115-負の値が関わる剰余挙動の違い__wiki.html">KDOC 115: 負の値が関わる剰余挙動の違い</a></li>
 <li> <a href="./20240324T214548--kdoc-129-『ポインタ理解のためのアセンブリ入門』__book.html">KDOC 129: 『ポインタ理解のためのアセンブリ入門』</a></li>
 <li> <a href="./20240427T120833--kdoc-141-cのポインタ操作をアセンブリで見る__wiki.html">KDOC 141: Cのポインタ操作をアセンブリで見る</a></li>
 <li> <a href="./20240427T184254--kdoc-143-cの添字記法は単なるシンタックスシュガーである__wiki.html">KDOC 143: Cの添字記法は単なるシンタックスシュガーである</a></li>
 <li> <a href="./20240617T152502--kdoc-192-『write-great-code-vol1』__draft_book.html">KDOC 192: 『Write Great Code Vol.1』</a></li>
 <li> <a href="./20240717T223527--kdoc-202-『30日でできる-os自作入門』__book.html">KDOC 202: 『30日でできる! OS自作入門』</a></li>
 <li> <a href="./20240824T173305--kdoc-225-mallocをアセンブラで見る__wiki.html">KDOC 225: mallocをアセンブラで見る</a></li>
 <li> <a href="./20240921T003646--kdoc-245-パックしたデータ型がどのように保存されているか見る__wiki.html">KDOC 245: パックしたデータ型がどのように保存されているか見る</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20210911104632-c_language.html"/>
  <id>https://kijimad.github.io/roam/20210911104632-c_language.html</id>
  <updated>2025-06-14T00:00:00+09:00</updated>
</entry>
<entry>
  <title>Go</title>
  <author><name>root</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org71ab160" class="outline-2">
 <h2 id="org71ab160"> <a href="#org71ab160">概要</a></h2>
 <div class="outline-text-2" id="text-org71ab160">
 <p>
Go言語はGoogleによって開発された <a href="20210509101246-programming_language.html#ID-868ac56a-2d42-48d7-ab7f-7047c85a8f39">Programming Language</a>。シンプルさをコンセプトにしているという。 <a href="20210805005543-docker.html#ID-1658782a-d331-464b-9fd7-1f8233b8b7f8">Docker</a>はGoで書かれている。
</p>
</div>
</div>
 <div id="outline-container-orgee440b5" class="outline-2">
 <h2 id="orgee440b5"> <a href="#orgee440b5">Memo</a></h2>
 <div class="outline-text-2" id="text-orgee440b5">
</div>
 <div id="outline-container-orga7069c2" class="outline-3">
 <h3 id="orga7069c2"> <a href="#orga7069c2"> <span class="todo TODO">TODO</span> </a> <a href="https://levelup.gitconnected.com/understanding-nil-in-go-unique-comparison-behaviors-94c42f2d8979?source">Understanding Nil in Go: Unique Comparison Behaviors | by Beck Moulton | Jan, 2024 | Level Up Coding</a></h3>
 <div class="outline-text-3" id="text-orga7069c2">
 <p>
Goのnilを理解する。
</p>
</div>
</div>
 <div id="outline-container-orgf62d7b5" class="outline-3">
 <h3 id="orgf62d7b5"> <a href="#orgf62d7b5"> <span class="todo TODO">TODO</span> </a> <a href="https://100go.co/ja/">100 Go Mistakes</a></h3>
 <div class="outline-text-3" id="text-orgf62d7b5">
 <p>
Go言語でありがちな間違い。
</p>
</div>
</div>
 <div id="outline-container-org527225a" class="outline-3">
 <h3 id="org527225a"> <a href="#org527225a"></a> <a href="https://speakerdeck.com/akeno/oapi-codegenwoshi-tutemita?slide=24">oapi-codegenを使ってみた - Speaker Deck</a></h3>
 <div class="outline-text-3" id="text-org527225a">
 <p>
oapi-codegenの使い方。とくにバリデーションが参考になる。
</p>
</div>
</div>
 <div id="outline-container-org1794718" class="outline-3">
 <h3 id="org1794718"> <a href="#org1794718"></a> <a href="https://note.crohaco.net/2020/gorp-unittest-with-db/">[Golang] gorpでDBを使ったユニットテストを書くたったひとつの冴えたやりかた - くろのて</a></h3>
 <div class="outline-text-3" id="text-org1794718">
 <p>
factory-botを便利に使う方法。
</p>
</div>
</div>
 <div id="outline-container-org0d3dbf8" class="outline-3">
 <h3 id="org0d3dbf8"> <a href="#org0d3dbf8">ポインタを渡すのにいちいち変数にしなくてよい</a></h3>
 <div class="outline-text-3" id="text-org0d3dbf8">
 <p>
引数にポインタをとるとき。↓のようにしたくなる。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 1: </span>関数xxxxは*intを引数にとる</label> <pre class="src src-go">i := 1
xxxx(&i)
</pre>
</div>

 <p>
実際は↓のように短く書ける。
</p>

 <div class="org-src-container">
 <pre class="src src-go">func GetPtr[T any](x T) *T {
        return &x
}

xxxx(GetPtr(1))
</pre>
</div>
</div>
</div>
 <div id="outline-container-org103da54" class="outline-3">
 <h3 id="org103da54"> <a href="#org103da54">What happens with closures running as goroutines</a></h3>
 <div class="outline-text-3" id="text-org103da54">
 <ul class="org-ul"> <li> <a href="https://go.dev/doc/faq#closures_and_goroutines">Frequently Asked Questions (FAQ) - The Go Programming Language</a></li>
</ul> <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 2: </span>この結果はc, c, cになる</label> <pre class="src src-go">func main() {
    done := make(chan bool)

    values := []string{"a", "b", "c"}
    for _, v := range values {
        go func() {
            fmt.Println(v)
            done <- true
        }()
    }

    // wait for all goroutines to complete before exiting
    for _ = range values {
        <-done
    }
}
</pre>
</div>

 <ul class="org-ul"> <li> <code>v</code> に入るインスタンスはループ間で共通である</li>
 <li>ループがまわり切ってから、goルーチンが実行される。goルーチンが実行されるときには、インスタンスは最後の  <code>"c"</code> になっている</li>
</ul></div>
</div>
 <div id="outline-container-org13ac598" class="outline-3">
 <h3 id="org13ac598"> <a href="#org13ac598">delveを使う</a></h3>
 <div class="outline-text-3" id="text-org13ac598">
 <p>
gdbだと謎のgoroutineらしきものがたびたび挿入される(  <code>runtime.sigtramp</code> )。直し方がよくわからないのでやめた。代わりにdelveを使うことに。構造体の表示がいい感じだ。使い方はだいたい同じ。
</p>

 <p>
Emacsの  <code>M-x gdb</code> と同等になるのが <a href="https://github.com/benma/go-dlv.el/">benma/go-dlv.el</a>で配布されている。dap-modeよりこちらが好み。  <code>(dlv-current-func)</code> を使う。
</p>
</div>
</div>
 <div id="outline-container-org4621457" class="outline-3">
 <h3 id="org4621457"> <a href="#org4621457">gdbで変数表示すると<optimized out>となるのを防ぐ</a></h3>
 <div class="outline-text-3" id="text-org4621457">
 <p>
コンパイル時に最適化した結果、変数や式を削除することがある。その場合デバッガで表示できなくなる。コンパイルオプションで最適化を無効化すると表示できる。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 3: </span>最適化を無効化する</label> <pre class="src src-shell">go build -gcflags= <span class="org-string">"-N -l"</span> main.go
</pre>
</div>
</div>
</div>
 <div id="outline-container-org42a5bab" class="outline-3">
 <h3 id="org42a5bab"> <a href="#org42a5bab">オプションパターン</a></h3>
 <div class="outline-text-3" id="text-org42a5bab">
 <p>
オプションがたくさんある、でかいコードベースで見る表現の解説を見つけた。
</p>

 <ul class="org-ul"> <li> <a href="https://thomasnguyen.site/functional-options-pattern-in-golang">Functional Options Pattern in Golang</a></li>
</ul> <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 4: </span>optionsをループさせて、自在な組み合わせでオプションを設定する</label> <pre class="src src-go">package main

import "fmt"

type Config struct {
    Host     string
    Port     int
    Username string
    Password string
}

type Option func(*Config)

func WithHost(host string) Option {
    return func(c *Config) {
        c.Host = host
    }
}

func WithPort(port int) Option {
    return func(c *Config) {
        c.Port = port
    }
}

func WithCredentials(username, password string) Option {
    return func(c *Config) {
        c.Username = username
        c.Password = password
    }
}

func NewConfig(options ...Option) *Config {
    config := &Config{
        Host:     "localhost",
        Port:     8080,
        Username: "",
        Password: "",
    }

    for _, option := range options {
        option(config)
    }

    return config
}

</pre>
</div>
</div>
</div>
 <div id="outline-container-org64982d0" class="outline-3">
 <h3 id="org64982d0"> <a href="#org64982d0">型でラップする</a></h3>
 <div class="outline-text-3" id="text-org64982d0">
 <p>
型で挙動を変える書き方ができる。
</p>

 <div class="org-src-container">
 <pre class="src src-go">type Mover bool
const (
        Animate = Mover(true)
        DontAnimate = Mover(false)
)
func (m Mover) move() { }

Animate.move()
DontAnimate.move()
</pre>
</div>
</div>
</div>
 <div id="outline-container-org4eb5642" class="outline-3">
 <h3 id="org4eb5642"> <a href="#org4eb5642">ゴルーチンはそれが作られたアドレス空間と同じ空間で実行する</a></h3>
 <div class="outline-text-3" id="text-org4eb5642">
 <p>
Go言語による並行処理から。
</p>

 <p>
ゴルーチンの中でクロージャーを実行すると、クロージャーはこれらの変数のコピーに対して操作するのか、それとも元の変数の参照に対してか。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 5: </span>ゴルーチンの中でクロージャーを実行する</label> <pre class="src src-go">var wg sync.WaitGroup
salutation := "hello"
wg.Add(1)
go func() {
        defer wg.Done()
        salutation = "welcome"
}()
wg.Wait()
fmt.Println(salutation)
</pre>
</div>

 <div class="results" id="orgbd62417">
 <p>
welcome
</p>

</div>

 <p>
ゴルーチンはそれが作られたアドレス空間と同じ空間で実行する、ということ。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 6: </span>同じ結果になる</label> <pre class="src src-go">var wg sync.WaitGroup
for _, salutation := range []string{"hello", "greetings", "good day"} {
        wg.Add(1)
        go func() {
                defer wg.Done()
                fmt.Println(salutation)
        }()
}
wg.Wait()
</pre>
</div>

 <div class="results" id="orga9beb99">
 <p>
good day
good day
good day
</p>

</div>

 <ul class="org-ul"> <li>ゴルーチンが開始する前にループが終了してしまう</li>
 <li>salutation変数はスコープ外になる</li>
 <li>Goランタイムは変数salutationの参照がまだ保持されているのを知っていて、ゴルーチンがそのメモリにアクセスし続けられるようにメモリをヒープに移す</li>
 <li>文字列スライスの最後の“good day”への参照を保持したままヒープに移される</li>
</ul> <p>
ループを想定したようにただしく書くには、salutationのコピーをクロージャーに渡して、ゴルーチンが実行されるようになるまでにループの各繰り返しから渡されたデータを操作できるようにする。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 7: </span>文字列の構造体のコピーが行われる</label> <pre class="src src-go">var wg sync.WaitGroup
for _, salutation := range []string{"hello", "greetings", "good day"} {
        wg.Add(1)
        go func(salutation string) {
                defer wg.Done()
                fmt.Println(salutation)
        }(salutation)
}
wg.Wait()
</pre>
</div>

 <div class="results" id="org3704dd6">
 <p>
good day
hello
greetings
</p>

</div>
</div>
</div>
 <div id="outline-container-org9a9f67d" class="outline-3">
 <h3 id="org9a9f67d"> <a href="#org9a9f67d">golanglint-ci のgci warningが出たとき</a></h3>
 <div class="outline-text-3" id="text-org9a9f67d">
 <p>
原因はよくわからない。ツールをインストールしてフォーマットをかける。
</p>

 <ul class="org-ul"> <li> <a href="https://stackoverflow.com/questions/75174808/meaning-of-file-is-not-gci-ed-with-skip-generated-s-standard-default-gci">main.go:24: File is not `gci`-ed with –skip-generated -s standard,default (gci)</a></li>
</ul> <blockquote>
 <p>
main.go:24: File is not `gci`-ed with –skip-generated -s standard,default (gci)
</p>
</blockquote>

 <div class="org-src-container">
 <pre class="src src-shell">go install github.com/daixiang0/gci@latest
gci write --skip-generated -s standard,default .
</pre>
</div>
</div>
</div>
 <div id="outline-container-org16caa45" class="outline-3">
 <h3 id="org16caa45"> <a href="#org16caa45">カバレッジ計測方法</a></h3>
 <div class="outline-text-3" id="text-org16caa45">
 <p>
カバレッジフラグをオンにしているとコンパイル時、各ブロックにカウンタが挿入されて実行されている。
</p>
</div>
</div>
 <div id="outline-container-orgafc6fc0" class="outline-3">
 <h3 id="orgafc6fc0"> <a href="#orgafc6fc0">一部のテストを実行する</a></h3>
 <div class="outline-text-3" id="text-orgafc6fc0">
 <p>
ファイル指定でテストを実行しようとすると、ほかのパッケージを読み込んでくれないため走らせられないことがある。多くの場合、ほかのファイルへの読み込みがあるので、現実的ではない。なので、読み込むファイルは全体にして、走らせる関数を指定して一部だけ実行する。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 8: </span>Buildinfoとつくテストだけを実行する</label> <pre class="src src-go">go test ./... -run Buildinfo
</pre>
</div>
</div>
</div>
 <div id="outline-container-org22ad806" class="outline-3">
 <h3 id="org22ad806"> <a href="#org22ad806">スタックとヒープ</a></h3>
 <div class="outline-text-3" id="text-org22ad806">
 <ul class="org-ul"> <li>メモリの読み書きを行う場所は、スタックとヒープに分かれる
 <ul class="org-ul"> <li>スタックはメモリの使い方や使用量がコンパイル時に決定できる場合に用いられる
 <ul class="org-ul"> <li>関数呼び出し時に確保され、関数から抜けるときに開放される。</li>
 <li>あらかじめどのメモリをどれだけ使うかわかっているため、必要になる直前で確保し、いらなくなったらすぐに破棄できメモリを効率よく使える</li>
</ul></li>
 <li>ヒープはメモリの使い方や使用量が実行時にしかわからない場合に用いる
 <ul class="org-ul"> <li>ヒープに確保した変数の生存期間は用途によってバラバラ</li>
 <li>ガベージコレクタを用いてヒープのメモリを集中管理し、しかるべきタイミングで解放する</li>
 <li>GoではGC時にSTW(Stop The World)が発生するものを採用しているので、GCが動いている間はプログラムの実行が止まる</li>
</ul></li>
 <li>なので、パフォーマンスを考慮するときはメモリを確保する先がスタックになるかヒープになるかは重要</li>
 <li>変数の型が実態で定義される場合、Goはその変数をスタック上に確保する。 <a href="20210911104632-c_language.html#ID-656a0aa4-e5d3-416f-82d5-f909558d0639">C言語</a>と同じ</li>
 <li>変数の型をポインタにすると、メモリはヒープかスタックのどちらかに確保される</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org99eaaaa" class="outline-3">
 <h3 id="org99eaaaa"> <a href="#org99eaaaa">一時ファイルを作る</a></h3>
 <div class="outline-text-3" id="text-org99eaaaa">
 <ul class="org-ul"> <li>os.CreateTemp が便利</li>
 <li>os.MkdirTemp → ディレクトリ</li>
 <li>(*testing.T).TempDir → テストで便利。テスト関数の終了時にディレクトリを消してくれる</li>
</ul></div>
</div>
 <div id="outline-container-org861bee7" class="outline-3">
 <h3 id="org861bee7"> <a href="#org861bee7">大文字かを確認する</a></h3>
 <div class="outline-text-3" id="text-org861bee7">
 <div class="org-src-container">
 <pre class="src src-go">fmt.Print(unicode.IsUpper('a'))
</pre>
</div>

 <div class="results" id="org7d8cc86">
 <p>
false
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-go">fmt.Print(unicode.IsUpper('A'))
</pre>
</div>

 <div class="results" id="org929b870">
 <p>
true
</p>

</div>
</div>
</div>
 <div id="outline-container-org94541c8" class="outline-3">
 <h3 id="org94541c8"> <a href="#org94541c8">goimportsが必要なパッケージを消してしまうときに確認すること</a></h3>
 <div class="outline-text-3" id="text-org94541c8">
 <p>
goimportsは面倒なimportを自動で書いてくれる便利なパッケージ。必要なパッケージを自動で消してしまうのでハマった。チェックリストを残す。
</p>

 <ul class="org-ul"> <li>名前は合っているか。特に自分のパッケージを読み込む場合、module名と一致しているか</li>
 <li>本当にその箇所から読み込めている記述になっているか。publicな呼び出しになっているか</li>
</ul></div>
</div>
 <div id="outline-container-org59e2b1a" class="outline-3">
 <h3 id="org59e2b1a"> <a href="#org59e2b1a">copyは固定長のsliceに対してしかできない</a></h3>
 <div class="outline-text-3" id="text-org59e2b1a">
 <p>
copyはその名の通りsliceをコピーするメソッド。固定長でないとコピーされない。
</p>
</div>
</div>
 <div id="outline-container-org61016e2" class="outline-3">
 <h3 id="org61016e2"> <a href="#org61016e2">カバレッジを計測する</a></h3>
 <div class="outline-text-3" id="text-org61016e2">
 <div class="org-src-container">
 <pre class="src src-shell">$ go test -coverprofile=cover.out .
$ go tool cover -html=cover.out -o cover.html
</pre>
</div>

 <p>
Golang/goのリポジトリ全体を計測する。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 9: </span>Go自体をビルドしてから、テストを実行する</label> <pre class="src src-shell"> <span class="org-builtin">cd</span> ./src
./all.bash
../bin/go test -cover ./... -coverprofile=cover.out
../bin/go tool cover -html=cover.out -o cover.html
</pre>
</div>
</div>
</div>
 <div id="outline-container-org3f01181" class="outline-3">
 <h3 id="org3f01181"> <a href="#org3f01181">対象のインターフェースを満たしている関数の一覧を見る</a></h3>
 <div class="outline-text-3" id="text-org3f01181">
 <div class="org-src-container">
 <pre class="src src-shell">godoc -http  <span class="org-string">":8000"</span> -analysis type
 <span class="org-comment-delimiter"># </span> <span class="org-comment">http://localhost:6060/pkg/io/</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-org1221f90" class="outline-3">
 <h3 id="org1221f90"> <a href="#org1221f90">失敗する可能性のあるときはerrorを返す</a></h3>
 <div class="outline-text-3" id="text-org1221f90">
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 10: </span>errorを返す関数の例</label> <pre class="src src-go">
func (w *Wallet) Withdraw(amount Bitcoin) error {
	if amount > w.balance {
		return ErrInsufficientFunds
	}

	w.balance -= amount
	return nil
}
</pre>
</div>

 <p>
成功したときは、errorにnilが入る。
</p>

 <p>
error時の処理は呼び出し元で定義し、errorを返す可能性のある関数定義では単にerrorを返すことだけに集中する。
</p>
</div>
</div>
 <div id="outline-container-org5abc688" class="outline-3">
 <h3 id="org5abc688"> <a href="#org5abc688">named return value</a></h3>
 <div class="outline-text-3" id="text-org5abc688">
 <p>
返り値に名前をつける機能。最初に初期化され、returnするとそれ時点の名前のついた変数が返される。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 11: </span>value1, value2は自動で初期化される。returnするとその時点でバインドされた変数が返される</label> <pre class="src src-go">func test() (value1, value2 int) {
        value1 = 1
        value2 = 2
        return
}
</pre>
</div>

 <p>
とすると、返り値には1, 2が返る。長い関数だとわかりづらくなるので注意。
</p>
</div>
</div>
 <div id="outline-container-orge797882" class="outline-3">
 <h3 id="orge797882"> <a href="#orge797882">コールグラフを活用して関数呼び出しの全体像を把握する</a></h3>
 <div class="outline-text-3" id="text-orge797882">
 <p>
どの関数がどこから呼び出されているかの図を生成する。
</p>

 <div class="org-src-container">
 <pre class="src src-shell">go install github.com/ofabry/go-callvis@master  <span class="org-comment-delimiter"># </span> <span class="org-comment">なぜかlatestバージョンでは失敗した</span>
</pre>
</div>

 <p>
そして調べたい関数を呼び出したmain.goのあるディレクトリで実行する。
</p>

 <div class="org-src-container">
 <pre class="src src-shell">go-callvis -group pkg,type ./  <span class="org-comment-delimiter"># </span> <span class="org-comment">-groupはグルーピング表示するオプション</span>

go-callvis -group pkg,type -focus fmt ./  <span class="org-comment-delimiter"># </span> <span class="org-comment">フォーカス表示</span>
</pre>
</div>

 <p>
と、ブラウザが立ち上がって、図が表示される。図の中のライブラリをクリックすると、さらにそのライブラリの呼び出しを描画する。
</p>
</div>
</div>
 <div id="outline-container-orgc1a9023" class="outline-3">
 <h3 id="orgc1a9023"> <a href="#orgc1a9023">go getしたときの証明書エラー</a></h3>
 <div class="outline-text-3" id="text-orgc1a9023">
 <p>
go get したとき  <code>x509: certificate signed by unknown authority</code> エラーになる。
</p>

 <p>
証明書の更新をすればよいとのこと。
</p>

 <div class="org-src-container">
 <pre class="src src-shell">$ sudo apt update
$ sudo apt install --only-upgrade -y ca-certificates  <span class="org-comment-delimiter">#</span> <span class="org-comment">最新</span>
$ update-ca-certificates
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgbb10945" class="outline-3">
 <h3 id="orgbb10945"> <a href="#orgbb10945">リクエストデータを構造体にバインドする</a></h3>
 <div class="outline-text-3" id="text-orgbb10945">
 <p>
リクエストを使うときに通常使われる方法。値の検証と後で利用しやすくするため、定義した構造体に入れる。
</p>

 <ul class="org-ul"> <li> <a href="https://echo.labstack.com/guide/binding/">Binding Request Data | Echo - High performance, minimalist Go web framework</a></li>
</ul></div>
</div>
 <div id="outline-container-org2ba8d17" class="outline-3">
 <h3 id="org2ba8d17"> <a href="#org2ba8d17">構造体の埋め込みの使い方</a></h3>
 <div class="outline-text-3" id="text-org2ba8d17">
 <ul class="org-ul"> <li> <a href="https://qiita.com/momotaro98/items/4f6e2facc40a3f37c3c3">Go言語の埋め込みについて4つのポイントでまとめました - Qiita</a></li>
</ul> <p>
Goの埋め込みの解説。
</p>

 <p>
埋め込みはあくまでも借りているだけで、埋め込み元のオブジェクトのメソッドとして実行される。埋め込み先の構造体が埋め込み元のメソッドを実行しても埋め込み先のオブジェクトには影響を与えない。
</p>
</div>
</div>
 <div id="outline-container-orgd97226f" class="outline-3">
 <h3 id="orgd97226f"> <a href="#orgd97226f"></a> <a href="https://christina04.hatenablog.com/entry/pointers-in-golang">ポインタを図で理解する - Carpe Diem</a></h3>
 <div class="outline-text-3" id="text-orgd97226f">
 <p>
図によるポインタのわかりやすい解説。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 12: </span>値の比較</label> <pre class="src src-go">var x = 100
fmt.Println("1: x address:\t", &x)

var y *int
fmt.Println("2: y value:\t", y)
fmt.Println("3: y address:\t", &y)
y = &x
fmt.Println("4: y value:\t", y)	// yの値には、xのアドレスが入っている
fmt.Println("5: y address:\t", &y)
</pre>
</div>

 <div class="results" id="org28c993f">
 <p>
1: x address:	 0xc00001a0c0
2: y value:	 <nil>
3: y address:	 0xc000012030
4: y value:	 0xc00001a0c0
5: y address:	 0xc000012030
</p>

</div>

 <ul class="org-ul"> <li>型としての  <code>*</code>
 <ul class="org-ul"> <li>ポインタ変数はメモリ上のアドレスを値として入れられる変数</li>
 <li>変数の中身(つまり値)はメモリアドレス</li>
</ul></li>
 <li>変数の演算子としての  <code>*</code>,  <code>&</code>
 <ul class="org-ul"> <li> <code>*</code> ポインタの指すメモリアドレスの実データ(value)</li>
 <li> <code>&</code> 変数がメモリ上で確保された際のアドレス(address)</li>
</ul></li>
</ul> <p>
 <code>*x</code> だけど  <code>x</code> がポインタ型変数でない場合、値にアドレスがなくて辿れず当然値も取得できないのでエラー。
</p>

 <ul class="org-ul"> <li>メモリアドレスは変数であれば必ず存在する。なのでどの変数でも  <code>&</code> が使える</li>
 <li>valueは値(1)か、メモリアドレス(0xc00001a0c0)が入っているか、nil。値にメモリアドレスが入っている場合のみ  <code>*</code> が使える</li>
</ul> <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 13: </span>ポインタ変数だけどnilのとき、runtime errorになる</label> <pre class="src src-go">var x *int
fmt.Println("x value:\t", *x)
</pre>
</div>

 <div class="results" id="org45bd975">
 <p>
panic: runtime error: invalid memory address or nil pointer dereference
[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x480f1a]
</p>

</div>

 <p>
ポインタ変数のvalueにメモリアドレスがないのでpanicが起きる。動かしてみないとわからないのでコンパイルエラーでなくruntimeエラー。
</p>

 <p>
Goはすべて値渡し(=コピー)。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 14: </span>valueは同じだが、addressはすべて異なる</label> <pre class="src src-go">func main() {
        var x = "alice"
        fmt.Println("x address:\t", &x)
        y := &x
        fmt.Println("y value:\t", y)
        fmt.Println("y address:\t", &y)

        show(y)
}

func show(s *string) {
        fmt.Println("f value:\t", s)
        fmt.Println("f address:\t", &s)
}
</pre>
</div>

 <div class="results" id="org6c31e5d">
 <p>
x address:	 0xc000014250
y value:	 0xc000014250
y address:	 0xc000012030
f value:	 0xc000014250
f address:	 0xc000012038
</p>

</div>

 <p>
定義された変数と、関数引数として使われた変数では、参照先アドレスは同じ(xのアドレス)。アドレスは異なる、つまりコピーされている。
</p>

 <p>
ポインタレシーバ。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 15: </span>main関数から、レシーバから呼ばれたときのアドレスと値を比較する</label> <pre class="src src-go">type Person struct {
        Name string
        Age int
}

func main() {
        x := &Person{"alice", 20}
        fmt.Printf("x value:\t%p\n", x)
        fmt.Printf("x address:\t%p\n", &x)
        x.Greet("test")

        fmt.Printf("new x value:\t%v\n", x)
}

func (p *Person) Greet(msg string) {
        fmt.Printf("p value:\t%p\n", p)
        fmt.Printf("p address:\t%p\n", &p)

        // ポインタ変数を上書きするのではなく、参照先を上書きする
        p.Name = "hahaha"
}
</pre>
</div>

 <div class="results" id="orgc640f53">
 <p>
x value:	0xc000010030
x address:	0xc000012028
p value:	0xc000010030
p address:	0xc000012038
new x value:	&{hahaha 20}
</p>

</div>
</div>
</div>
 <div id="outline-container-org01f48cf" class="outline-3">
 <h3 id="org01f48cf"> <a href="#org01f48cf">レシーバーを値とポインタのどちらにするか</a></h3>
 <div class="outline-text-3" id="text-org01f48cf">
 <p>
メソッドのレシーバーを値にするかポインタにするかは、レシーバのフィールドに変更をしたいかによって決める。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 16: </span>インスタンスのフィールドは変更されない(エラーにもならないので注意)</label> <pre class="src src-go">func (s Struct) SetValue(v int {
        s.v = v
})
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 17: </span>値を変更できる</label> <pre class="src src-go">func (s *Struct) SetValue(v int {
        s.v = v
})
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgf08bac5" class="outline-3">
 <h3 id="orgf08bac5"> <a href="#orgf08bac5">ポインタの操作</a></h3>
 <div class="outline-text-3" id="text-orgf08bac5">
 <ul class="org-ul"> <li>ポインタ型を示すときは  <code>*Person</code> と宣言。これによってPerson型の変数のポインタが入ることが示される</li>
 <li>ポインタ型を生成するときは  <code>&</code> を使う。これは変換関数のようなもの。  <code>&変数名</code> という形式。実際に変数宣言されているものに対してポインタがある。それぞれにアドレスが割り当てられるようなもの。だから、型とか関数自体はポインタにしない(意味がない)。あくまで変数をリンクさせて、変更を波及させられるのが良いところだから</li>
 <li>ポインタを解決実際の値を見るときは *p</li>
 <li>&p で*Person型を生成する、というような関係性</li>
</ul> <div class="org-src-container">
 <pre class="src src-go">var p *int // 変数pには、int型の変数のポインタが入るという宣言
i := 1
p = &i				// 変数iを参照するポインタ型変数p

// p 				// -> 0xc000010000
// *p 				// -> 1

fmt.Println(p)
fmt.Println(*p)
i = 2				// あくまで変えるのは参照先の値であって、p -> i のリンク自体を変えるわけじゃない
fmt.Println(p)			// メモリアドレスは変わらない
fmt.Println(*p)			// 参照先のアドレスが変わった
</pre>
</div>

 <div class="results" id="orgf8656af">
 <p>
0xc00001a0c0
1
0xc00001a0c0
2
</p>

</div>

 <ul class="org-ul"> <li>「アドレスを取得(&)」という操作と「アドレスを解決(*)」という操作がある。</li>
</ul></div>
</div>
 <div id="outline-container-org197fc8b" class="outline-3">
 <h3 id="org197fc8b"> <a href="#org197fc8b"> <span class="todo TODO">TODO</span> </a> <a href="https://qiita.com/hnakamur/items/848097aad846d40ae84b">Goでファイルの存在チェック - Qiita</a></h3>
 <div class="outline-text-3" id="text-org197fc8b">
 <p>
存在チェックの方法。
</p>
</div>
</div>
 <div id="outline-container-orgabe58af" class="outline-3">
 <h3 id="orgabe58af"> <a href="#orgabe58af">ファイル埋め込み</a></h3>
 <div class="outline-text-3" id="text-orgabe58af">
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 18: </span>sample.jsonを型sampleBytesに格納する</label> <pre class="src src-go">//go:embed sample.json
var sampleBytes []byte
</pre>
</div>

 <p>
ファイルを直に変数に入れることができる。いちいち読み込みのコードを書かなくて良くなる。
</p>

 <p>
複数ファイルの埋め込みもできる。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 19: </span>embed.FS型のファイルシステムとして変数に埋め込む。あとから各々ファイルを取り出す</label> <pre class="src src-go">//go:embed README.md version.txt
var static embed.FS

r, err := static.Readfile("README.md")
</pre>
</div>

 <p>
確かに短く書ける。しかしこれだけなら、従来の方法でもできる。メリットは、設定ファイルをバイナリに埋め込めること。
</p>

 <ul class="org-ul"> <li> <a href="https://future-architect.github.io/articles/20210208/">Go 1.16からリリースされたgo:embedとは | フューチャー技術ブログ</a></li>
</ul></div>
</div>
 <div id="outline-container-orgdf83068" class="outline-3">
 <h3 id="orgdf83068"> <a href="#orgdf83068">変数名のかぶりに注意する</a></h3>
 <div class="outline-text-3" id="text-orgdf83068">
 <p>
型名と同じ変数名を宣言すると、よりローカルな変数名が優先されるため、その型が使えなくなる。それだけでなく、型指定で~は型ではありませんエラーが謎に出るため、ハマる可能性が高い。Lintで防げるだろうか。
</p>
</div>
</div>
 <div id="outline-container-orgdf1db69" class="outline-3">
 <h3 id="orgdf1db69"> <a href="#orgdf1db69">よく使う型の定義</a></h3>
 <div class="outline-text-3" id="text-orgdf1db69">
 <ul class="org-ul"> <li>fdはファイルディスクリプタ。プログラムからファイルを操作する際、操作対象のファイルを識別・同定するために割り当てられる番号</li>
</ul> <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 20: </span>file型</label> <pre class="src src-git-permalink">https://github.com/kd-collective/go/blob/a813be86df74bf2a9c5b272c0b0934d196ac665d/src/os/file_unix.go#L54-L61
</pre>
</div>

 <div class="results" id="orga5fe572">
 <p>
type file struct {
	pfd         poll.FD
	name        string
	dirinfo     *dirInfo  <i>/ nil unless directory being read
	nonblock    bool     /</i> whether we set nonblocking mode
	stdoutOrErr bool      <i>/ whether this is stdout or stderr
	appendMode  bool     /</i> whether file is opened for appending
}
</p>

</div>

 <ul class="org-ul"> <li>ネットワークで使うConnインターフェース</li>
</ul> <div class="org-src-container">
 <pre class="src src-git-permalink">https://github.com/kd-collective/go/blob/a813be86df74bf2a9c5b272c0b0934d196ac665d/src/net/net.go#L113-L168
</pre>
</div>

 <div class="results" id="orgc915008">
 <p>
type Conn interface {
	 <i>/ Read reads data from the connection.
	/</i> Read can be made to time out and return an error after a fixed
	// time limit; see SetDeadline and SetReadDeadline.
	Read(b []byte) (n int, err error)
</p>

 <p>
 <i>/ Write writes data to the connection.
/</i> Write can be made to time out and return an error after a fixed
// time limit; see SetDeadline and SetWriteDeadline.
Write(b []byte) (n int, err error)
</p>

 <p>
 <i>/ Close closes the connection.
/</i> Any blocked Read or Write operations will be unblocked and return errors.
Close() error
</p>

 <p>
// LocalAddr returns the local network address, if known.
LocalAddr() Addr
</p>

 <p>
// RemoteAddr returns the remote network address, if known.
RemoteAddr() Addr
</p>

 <p>
 <i>/ SetDeadline sets the read and write deadlines associated
/</i> with the connection. It is equivalent to calling both
 <i>/ SetReadDeadline and SetWriteDeadline.
/</i>
 <i>/ A deadline is an absolute time after which I/O operations
/</i> fail instead of blocking. The deadline applies to all future
 <i>/ and pending I/O, not just the immediately following call to
/</i> Read or Write. After a deadline has been exceeded, the
 <i>/ connection can be refreshed by setting a deadline in the future.
/</i>
 <i>/ If the deadline is exceeded a call to Read or Write or to other
/</i> I/O methods will return an error that wraps os.ErrDeadlineExceeded.
 <i>/ This can be tested using errors.Is(err, os.ErrDeadlineExceeded).
/</i> The error’s Timeout method will return true, but note that there
 <i>/ are other possible errors for which the Timeout method will
/</i> return true even if the deadline has not been exceeded.
 <i>/
/</i> An idle timeout can be implemented by repeatedly extending
 <i>/ the deadline after successful Read or Write calls.
/</i>
// A zero value for t means I/O operations will not time out.
SetDeadline(t time.Time) error
</p>

 <p>
 <i>/ SetReadDeadline sets the deadline for future Read calls
/</i> and any currently-blocked Read call.
// A zero value for t means Read will not time out.
SetReadDeadline(t time.Time) error
</p>

 <p>
	 <i>/ SetWriteDeadline sets the deadline for future Write calls
	/</i> and any currently-blocked Write call.
	 <i>/ Even if write times out, it may return n > 0, indicating that
	/</i> some of the data was successfully written.
	// A zero value for t means Write will not time out.
	SetWriteDeadline(t time.Time) error
}
</p>

</div>
</div>
</div>
 <div id="outline-container-org412aef4" class="outline-3">
 <h3 id="org412aef4"> <a href="#org412aef4">ファイルを開く関数</a></h3>
 <div class="outline-text-3" id="text-org412aef4">
 <ul class="org-ul"> <li>Open(), Create() は引数が違うだけで同じ関数OpenFile()を呼び出している</li>
 <li>よく使う権限の組み合わせでラップしているだけ</li>
</ul> <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 21: </span>Open</label> <pre class="src src-git-permalink">https://github.com/kd-collective/go/blob/a813be86df74bf2a9c5b272c0b0934d196ac665d/src/os/file.go#L311-L313
</pre>
</div>

 <div class="results" id="org940680e">
 <p>
func Open(name string) (*File, error) {
	return OpenFile(name, O_RDONLY, 0)
}
</p>

</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 22: </span>Create</label> <pre class="src src-git-permalink">https://github.com/kd-collective/go/blob/a813be86df74bf2a9c5b272c0b0934d196ac665d/src/os/file.go#L320-L322
</pre>
</div>

 <div class="results" id="orgf053473">
 <p>
func Create(name string) (*File, error) {
	return OpenFile(name, O_RDWR|O_CREATE|O_TRUNC, 0666)
}
</p>

</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 23: </span>OpenFile</label> <pre class="src src-git-permalink">https://github.com/kd-collective/go/blob/a813be86df74bf2a9c5b272c0b0934d196ac665d/src/os/file.go#L330-L339
</pre>
</div>

 <div class="results" id="orge330424">
 <p>
func OpenFile(name string, flag int, perm FileMode) (*File, error) {
	testlog.Open(name)
	f, err := openFileNolog(name, flag, perm)
	if err != nil {
		return nil, err
	}
	f.appendMode = flag&O_APPEND != 0
</p>

 <p>
	return f, nil
}
</p>

</div>
</div>
</div>
 <div id="outline-container-org95da785" class="outline-3">
 <h3 id="org95da785"> <a href="#org95da785">基本コマンド</a></h3>
 <div class="outline-text-3" id="text-org95da785">
 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 24: </span>mod.goを作成する</label> <pre class="src src-shell">go mod init example
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 25: </span>依存パッケージをインストールする。mod.goに記載される</label> <pre class="src src-shell">go install
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 26: </span>ビルド+実行</label> <pre class="src src-shell">go run hello.go
</pre>
</div>

 <p>
 <a href="20210508234743-emacs.html#ID-1ad8c3d5-97ba-4905-be11-e6f2626127ad">Emacs</a> dap-modeでデバッガ起動。行の横をクリックしてブレークポイントをセットしたのち、コマンド実行。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 27: </span>デバッグ実行</label> <pre class="src src-emacs-lisp">M-x dap-debug
</pre>
</div>
</div>
</div>
 <div id="outline-container-org07a55dc" class="outline-3">
 <h3 id="org07a55dc"> <a href="#org07a55dc"></a> <a href="20210907012153-org_mode.html#ID-7e85e3f3-a6b9-447e-9826-307a3618dac8">org-mode</a>での実行方法</h3>
 <div class="outline-text-3" id="text-org07a55dc">
 <p>
ob-goをインストールして  <code>(require "ob-go")</code> する。実行方法が少し変わっていて、下のように指定する。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 28: </span>babel引数で指定importを指定する。本文には書かない</label> <pre class="src src-go">fmt.Println("hello world")
</pre>
</div>

 <div class="results" id="org2f783ab">
 <p>
hello world
</p>

</div>

 <ul class="org-ul"> <li> <a href="https://github.com/pope/ob-go">pope/ob-go: Org-Babel support for evaluating go code.</a></li>
</ul></div>
</div>
 <div id="outline-container-org5aedd10" class="outline-3">
 <h3 id="org5aedd10"> <a href="#org5aedd10"></a> <a href="20210508234743-emacs.html#ID-1ad8c3d5-97ba-4905-be11-e6f2626127ad">Emacs</a>に <a href="20220305121848-lsp.html#ID-eb807577-cd69-478c-8f82-264243c67354">LSP</a>+DAPを設定する</h3>
 <div class="outline-text-3" id="text-org5aedd10">
 <p>
DAP(Debug Adapter Protocol)はデバッガー補助。エディタ関係なくIDEのようにエディタ上でブレークポイントをセットできるプロトコル。 <a href="20220305121848-lsp.html#ID-eb807577-cd69-478c-8f82-264243c67354">LSP</a>のデバッガーバージョンな概念。
</p>

 <p>
Go用のデバッガはemacsコマンドでインストールできず、go installでインストールする必要がある。
</p>

 <ul class="org-ul"> <li> <a href="https://emacs-lsp.github.io/dap-mode/page/configuration/#go">Configuration - DAP Mode</a>
 <ul class="org-ul"> <li>外部コマンドをgo installでインストール
 <ul class="org-ul"> <li>LSPのライブラリ名は  <code>gopls</code></li>
 <li>Debuggerのライブラリ名は  <code>delve</code> (注意: VScode用のプログラムを用いる方法はdeprecatedで、現在は直接installするのが最新)</li>
</ul></li>
 <li>go installしたあと、Emacs側が認識できるように設定する</li>
</ul></li>
</ul> <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 29: </span>インストールする</label> <pre class="src src-shell">$ go install golang.org/x/tools/gopls@master             <span class="org-comment-delimiter"># </span> <span class="org-comment">Language Server</span>
$ go install github.com/go-delve/delve/cmd/dlv@master    <span class="org-comment-delimiter"># </span> <span class="org-comment">debugger</span>
</pre>
</div>

 <p>
自分の環境では一瞬デバッガのボタンが表示されて Debug Adapter finished になってしまう状態になった。Warningには  <code>Warning (emacs): Initialize request failed: Failed to launch Disable showing Disable logging</code> が表示される。理由がよくわからないため、表示させる。  <code>(setq dap-print-io t)</code> を評価すると、messageバッファに詳細なログを出力する。
</p>

 <p>
原因は、しっかりと表示されていた。
</p>

 <blockquote>
 <p>
“format”: “Failed to launch: Go version 1.14.15 is too old for this version of Delve (minimum supported version 1.17, suppress this error with –check-go-version=false)”,
</p>
</blockquote>

 <p>
ということで、goのバージョンを上げると無事デバッガが起動するようになった。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 30: </span>その他便利ライブラリ</label> <pre class="src src-shell">$ go install github.com/uudashr/gopkgs/cmd/gopkgs        <span class="org-comment-delimiter"># </span> <span class="org-comment">Go パッケージ</span>
$ go install golang.org/x/tools/cmd/goimports@master     <span class="org-comment-delimiter"># </span> <span class="org-comment">import の過不足を自動で補完</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgfca504c" class="outline-3">
 <h3 id="orgfca504c"> <a href="#orgfca504c">printの仕組み</a></h3>
 <div class="outline-text-3" id="text-orgfca504c">
 <p>
プリンターの状態を保存している、重要そうな構造体。
</p>

 <div class="org-src-container">
 <pre class="src src-git-permalink">https://github.com/golang/go/blob/122a22e0e9eba7fe712030d429fc4bcf6f447f5e/src/fmt/print.go#L119-L120
</pre>
</div>

 <div class="results" id="orga7115b1">
 <p>
// pp is used to store a printer’s state and is reused with sync.Pool to avoid allocations.
type pp struct {
</p>

</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 31: </span>フラグを実装している箇所。歴史的理由で引数はintになっているらしい</label> <pre class="src src-git-permalink">https://github.com/golang/go/blob/122a22e0e9eba7fe712030d429fc4bcf6f447f5e/src/fmt/print.go#L188-L202
</pre>
</div>

 <div class="results" id="orgae91097">
 <p>
func (p *pp) Flag(b int) bool {
	switch b {
	case ’-’:
		return p.fmt.minus
	case ’+’:
		return p.fmt.plus || p.fmt.plusV
	case ’#’:
		return p.fmt.sharp || p.fmt.sharpV
	case ’ ’:
		return p.fmt.space
	case ’0’:
		return p.fmt.zero
	}
	return false
}
</p>

</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 32: </span>Printは出力先が標準出力の、Fprintのエイリアスにすぎない</label> <pre class="src src-git-permalink">https://github.com/golang/go/blob/122a22e0e9eba7fe712030d429fc4bcf6f447f5e/src/fmt/print.go#L271-L273
</pre>
</div>

 <div class="results" id="orgb335f09">
 <p>
func Print(a …any) (n int, err error) {
	return Fprint(os.Stdout, a…)
}
</p>

</div>

 <ul class="org-ul"> <li>doPrintf
 <ul class="org-ul"> <li>printArg
 <ul class="org-ul"> <li>printValue</li>
</ul></li>
</ul></li>

 <li>実際画面に表示してるのはどこなんだろう
 <ul class="org-ul"> <li>print系の中でbufに書き込みをしているのはよく見る</li>
 <li>関数の中に画面出力、みたいな部分は見当たらず</li>
 <li>別に「画面に出力する」という関数があるわけじゃなくて、「標準出力にあたるファイルに書き込みをする」関数があるだけ。だから、標準出力以外への書き込みとの差は一切ない</li>
 <li>/dev/stdin は特殊ファイルという。画面への入出力などをファイルとして操作できるようにしたものだから、ファイル書き込みとなんら変わらずに操作できる</li>
 <li>Stdoutは1と定義されている。なので、fd1つまり/dev/stdout/1を作成する</li>
</ul></li>
</ul> <div class="org-src-container">
 <pre class="src src-git-permalink">https://github.com/kd-collective/go/blob/9b8750f53ed89fb326e4d811524e647683136bac/src/os/file.go#L66
</pre>
</div>

 <div class="results" id="org3547562">
 <p>
Stdout = NewFile(uintptr(syscall.Stdout), “/dev/stdout”)
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-git-permalink">https://github.com/kd-collective/go/blob/9b8750f53ed89fb326e4d811524e647683136bac/src/cmd/vendor/golang.org/x/sys/unix/syscall_unix.go#L20
</pre>
</div>

 <div class="results" id="org47c6567">
 <p>
Stdout = 1
</p>

</div>

 <ul class="org-ul"> <li>print系は、ベースになる関数がある。書き込み先とフォーマット解析の組み合わせで、いろいろ名前がついている</li>
 <li>本質的に、ファイル書き込みにすぎない</li>
 <li>フォーマット解析でいろいろ処理があって、多くを占める。各型での文字列の取り出し方とか</li>
</ul></div>
</div>
 <div id="outline-container-org1109f83" class="outline-3">
 <h3 id="org1109f83"> <a href="#org1109f83">Stringerとは</a></h3>
 <div class="outline-text-3" id="text-org1109f83">
 <p>
よく見るが、何か。
</p>

 <div class="org-src-container">
 <pre class="src src-git-permalink">https://github.com/kd-collective/go/blob/9b8750f53ed89fb326e4d811524e647683136bac/src/fmt/print.go#L63-L65
</pre>
</div>

 <div class="results" id="orgab7d54d">
 <p>
type Stringer interface {
	String() string
}
</p>

</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 33: </span>String()を実装してるのでMyStringはStringer</label> <pre class="src src-go">type MyString string

func (s MyString) String() string {
  return "mystring"
}

func main() {
  s := MyString("hello")
  fmt.Println(s) // String()の結果が使われる
}
</pre>
</div>

 <div class="results" id="org564b77b">
 <p>
mystring
</p>

</div>

 <p>
printするときには、先にStringerの判定が入る。Stringerを満たしていれば、String()を使う。満たさなければ、通常の、printに渡された文字列引数を使って表示する。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 34: </span>fmtパッケージのhandleMethodsという関数</label> <pre class="src src-git-permalink">https://github.com/kd-collective/go/blob/9b8750f53ed89fb326e4d811524e647683136bac/src/fmt/print.go#L670-L675
</pre>
</div>

 <div class="results" id="org282d5c7">
 <p>
case Stringer:
	handled = true
	defer p.catchPanic(p.arg, verb, “String”)
	p.fmtString(v.String(), verb)
	return
}
</p>

</div>
</div>
</div>
 <div id="outline-container-org1bfe30e" class="outline-3">
 <h3 id="org1bfe30e"> <a href="#org1bfe30e">runeとは</a></h3>
 <div class="outline-text-3" id="text-org1bfe30e">
 <ul class="org-ul"> <li> <a href="https://qiita.com/seihmd/items/4a878e7fa340d7963fee">Goのruneを理解するためのUnicode知識 - Qiita</a></li>
 <li>文字と01の並びを対応づける仕組み、それが文字コード。その1つのUnicodeは世界中のあらゆる文字列を収録されるために作られている規格
 <ul class="org-ul"> <li>aはUnicodeでu+0041と表される。16進数で0041という値と対応づけられる。この値はcode point(code position)と呼ばれ、文字コード中の位置を指し示す文字のIDといえる</li>
 <li>符号化方式は41とか1F601といったcode pointの値をコンピュータが扱うデータ形式に置き換えるための規則。方式によってcode pointを何byte単位で扱うかが異なってくる</li>
 <li>Goでは符号化方式としてUTF-8を使用している。UTF-8では1byteから4byteの可変長データでcode pointを置換する。数字やアルファベットのような広く使われている文字は1byteになり、Unicodeに後から追加された絵文字などは4byteになる。</li>
 <li>Unicodeの符号化方式にはUTF-16やUTF-8がある</li>
</ul></li>
 <li>stringにインデックスでアクセスしたときに得られるbyte値は文字コードをUTF-8で1byteごとに区切った値</li>
</ul> <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 35: </span>“あ”は3byteで表される</label> <pre class="src src-go">s := "あ"
for i := 0; i < len(s); i++{
  fmt.Printf("% x", s[i])
}
</pre>
</div>

 <div class="results" id="orge42eec0">
 <p>
e3 81 82
</p>

</div>

 <ul class="org-ul"> <li>ひとつの文字は複数byteで表現される可能性がある。文字を表すbyteをまとめて読まないと正しい文字として認識できなくなる</li>
 <li>なので文字を数える単位としてはbyteではなくcode pointのほうが都合がいい。Goではcode pointを単位として文字を扱うための仕組み、つまりruneを用意している</li>
 <li>runeの実体はint32のエイリアス。int32なのはUnicodeの4byte分のcode pointを表現するため</li>
</ul> <div class="org-src-container">
 <pre class="src src-git-permalink">https://github.com/kd-collective/go/blob/9b8750f53ed89fb326e4d811524e647683136bac/src/builtin/builtin.go#L90-L92
</pre>
</div>

 <div class="results" id="org9e360c2">
 <p>
 <i>/ rune is an alias for int32 and is equivalent to int32 in all ways. It is
/</i> used, by convention, to distinguish character values from integer values.
type rune = int32
</p>

</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 36: </span>runeはint32のエイリアス。なので単なる数字</label> <pre class="src src-go">fmt.Println('あ')
fmt.Println('a')
fmt.Println(' ')
fmt.Println('!')
fmt.Println('"')
fmt.Println('a' * 2)
fmt.Println('a' - 'b')
</pre>
</div>

 <div class="results" id="orgb3ced87">
 <p>
12354
97
32
33
34
194
-1
</p>

</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 37: </span>stringを[]runeと[]byteにキャストする。文字列が対応するcodepoint、byteに姿を変えているだけ</label> <pre class="src src-go">s := "あいう"
fmt.Println([]rune(s))
fmt.Println([]byte(s))
</pre>
</div>

 <div class="results" id="org3f39a79">
 <p>
[12354 12356 12358]
[227 129 130 227 129 132 227 129 134]
</p>

</div>
</div>
</div>
 <div id="outline-container-org0c734c5" class="outline-3">
 <h3 id="org0c734c5"> <a href="#org0c734c5"></a> <a href="https://postd.cc/performance-without-the-event-loop/">イベントループなしでのハイパフォーマンス – C10K問題へのGoの回答 | POSTD</a></h3>
 <div class="outline-text-3" id="text-org0c734c5">
 <p>
Goルーチンの解説。ベースがないのでよく理解できなかった。
</p>
</div>
</div>
 <div id="outline-container-org303f7e0" class="outline-3">
 <h3 id="org303f7e0"> <a href="#org303f7e0"></a> <a href="https://christina04.hatenablog.com/entry/why-goroutine-is-good">goroutineはなぜ軽量なのか - Carpe Diem</a></h3>
 <div class="outline-text-3" id="text-org303f7e0">
 <p>
Goルーチンの解説。よくわからなかった。
</p>
</div>
</div>
 <div id="outline-container-org4a521ed" class="outline-3">
 <h3 id="org4a521ed"> <a href="#org4a521ed"></a> <a href="https://qiita.com/takc923/items/de68671ea889d8df6904">Golangのスケジューラあたりの話 - Qiita</a></h3>
</div>
 <div id="outline-container-orgca6f797" class="outline-3">
 <h3 id="orgca6f797"> <a href="#orgca6f797"></a> <a href="https://christina04.hatenablog.com/entry/2017/07/05/005944">Non-Blocking I/O, I/O Multiplexing, Asynchronous I/Oの区別 - Carpe Diem</a></h3>
 <div class="outline-text-3" id="text-orgca6f797">
 <p>
非同期処理の解説。
</p>
</div>
</div>
</div>
 <div id="outline-container-orgd7bbce1" class="outline-2">
 <h2 id="orgd7bbce1"> <a href="#orgd7bbce1">Tasks</a></h2>
 <div class="outline-text-2" id="text-orgd7bbce1">
</div>
 <div id="outline-container-orgfdfbb3e" class="outline-3">
 <h3 id="orgfdfbb3e"> <a href="#orgfdfbb3e"> <span class="todo TODO">TODO</span> </a> <a href="https://www.ardanlabs.com/blog/2018/12/garbage-collection-in-go-part1-semantics.html">Garbage Collection In Go : Part I - Semantics</a></h3>
 <div class="outline-text-3" id="text-orgfdfbb3e">
 <p>
Goのガベージコレクションの解説記事。
</p>
</div>
</div>
 <div id="outline-container-orgb68ee49" class="outline-3">
 <h3 id="orgb68ee49"> <a href="#orgb68ee49"> <span class="todo TODO">TODO</span> </a> <a href="https://github.com/dgryski/go-perfbook">dgryski/go-perfbook: Thoughts on Go performance optimization</a></h3>
 <div class="outline-text-3" id="text-orgb68ee49">
 <p>
Goのパフォーマンス最適の読み物。
</p>
</div>
</div>
 <div id="outline-container-org8cb2fb4" class="outline-3">
 <h3 id="org8cb2fb4"> <a href="#org8cb2fb4"> <span class="todo TODO">TODO</span> </a> <a href="https://speakerdeck.com/uji/5fen-dewan-quan-li-jie-surugofalseiota">5分で完全理解するGoのiota - Speaker Deck</a></h3>
 <div class="outline-text-3" id="text-org8cb2fb4">
 <p>
GoのiotaのTips。
</p>
</div>
</div>
 <div id="outline-container-org8ee5e3f" class="outline-3">
 <h3 id="org8ee5e3f"> <a href="#org8ee5e3f"> <span class="todo TODO">TODO</span> </a> <a href="https://blog.lufia.org/entry/2021/03/17/113000">Goアセンブリの書き方 - Plan 9とGo言語のブログ</a></h3>
 <div class="outline-text-3" id="text-org8ee5e3f">
 <p>
Goアセンブリの解説記事。
</p>
</div>
</div>
 <div id="outline-container-org38b0303" class="outline-3">
 <h3 id="org38b0303"> <a href="#org38b0303"> <span class="todo TODO">TODO</span> </a> <a href="https://cmc.gitbook.io/go-internals/">go-internals - Go Internals</a></h3>
 <div class="outline-text-3" id="text-org38b0303">
 <p>
Goの内部仕様についての本。
</p>
</div>
</div>
 <div id="outline-container-orgb2c9a03" class="outline-3">
 <h3 id="orgb2c9a03"> <a href="#orgb2c9a03"> <span class="todo TODO">TODO</span> </a> <a href="https://qiita.com/Akatsuki_py/items/231350711f9ab6eba95e">Goアセンブリ入門 - Qiita</a></h3>
 <div class="outline-text-3" id="text-orgb2c9a03">
 <p>
Goアセンブリの解説。
</p>

 <div class="org-src-container">
 <pre class="src src-go-asm">package main
func add(a, b int32) (int32, bool) { return a + b, true }
func main() { add(10, 32) }
</pre>
</div>

 <div class="results" id="org6602d46">
 <p>
main.add STEXT nosplit size=71 args=0x8 locals=0x10 funcid=0x0 align=0x0
	0x0000 00000 (/tmp/babel-ZDNznW/XkIsxn.go:2)	TEXT	main.add(SB), NOSPLIT|ABIInternal, $16-8
	0x0000 00000 (/tmp/babel-ZDNznW/XkIsxn.go:2)	SUBQ	$16, SP
	0x0004 00004 (/tmp/babel-ZDNznW/XkIsxn.go:2)	MOVQ	BP, 8(SP)
	0x0009 00009 (/tmp/babel-ZDNznW/XkIsxn.go:2)	LEAQ	8(SP), BP
	0x000e 00014 (/tmp/babel-ZDNznW/XkIsxn.go:2)	FUNCDATA	$0, gclocals·g2BeySu+wFnoycgXfElmcg==(SB)
	0x000e 00014 (/tmp/babel-ZDNznW/XkIsxn.go:2)	FUNCDATA	$1, gclocals·g2BeySu+wFnoycgXfElmcg==(SB)
	0x000e 00014 (/tmp/babel-ZDNznW/XkIsxn.go:2)	FUNCDATA	$5, main.add.arginfo1(SB)
	0x000e 00014 (/tmp/babel-ZDNznW/XkIsxn.go:2)	MOVL	AX, main.a+24(SP)
	0x0012 00018 (/tmp/babel-ZDNznW/XkIsxn.go:2)	MOVL	BX, main.b+28(SP)
	0x0016 00022 (/tmp/babel-ZDNznW/XkIsxn.go:2)	MOVL	$0, main.~r0+4(SP)
	0x001e 00030 (/tmp/babel-ZDNznW/XkIsxn.go:2)	MOVB	$0, main.~r1+3(SP)
	0x0023 00035 (/tmp/babel-ZDNznW/XkIsxn.go:2)	MOVL	main.a+24(SP), CX
	0x0027 00039 (/tmp/babel-ZDNznW/XkIsxn.go:2)	ADDL	main.b+28(SP), CX
	0x002b 00043 (/tmp/babel-ZDNznW/XkIsxn.go:2)	MOVL	CX, main.~r0+4(SP)
	0x002f 00047 (/tmp/babel-ZDNznW/XkIsxn.go:2)	MOVB	$1, main.~r1+3(SP)
	0x0034 00052 (/tmp/babel-ZDNznW/XkIsxn.go:2)	MOVL	main.~r0+4(SP), AX
	0x0038 00056 (/tmp/babel-ZDNznW/XkIsxn.go:2)	MOVL	$1, BX
	0x003d 00061 (/tmp/babel-ZDNznW/XkIsxn.go:2)	MOVQ	8(SP), BP
	0x0042 00066 (/tmp/babel-ZDNznW/XkIsxn.go:2)	ADDQ	\(16, SP
	0x0046 00070 (/tmp/babel-ZDNznW/XkIsxn.go:2)	RET
	0x0000 48 83 ec 10 48 89 6c 24 08 48 8d 6c 24 08 89 44  H...H.l\).H.l$..D
	0x0010 24 18 89 5c 24 1c c7 44 24 04 00 00 00 00 c6 44  $..\$..D$……D
	0x0020 24 03 00 8b 4c 24 18 03 4c 24 1c 89 4c 24 04 c6  $…L$..L$..L$..
	0x0030 44 24 03 01 8b 44 24 04 bb 01 00 00 00 48 8b 6c  D$…D$……H.l
	0x0040 24 08 48 83 c4 10 c3                             $.H….
main.main STEXT size=54 args=0x0 locals=0x10 funcid=0x0 align=0x0
	0x0000 00000 (/tmp/babel-ZDNznW/XkIsxn.go:3)	TEXT	main.main(SB), ABIInternal, $16-0
	0x0000 00000 (/tmp/babel-ZDNznW/XkIsxn.go:3)	CMPQ	SP, 16(R14)
	0x0004 00004 (/tmp/babel-ZDNznW/XkIsxn.go:3)	PCDATA	$0, $-2
	0x0004 00004 (/tmp/babel-ZDNznW/XkIsxn.go:3)	JLS	47
	0x0006 00006 (/tmp/babel-ZDNznW/XkIsxn.go:3)	PCDATA	$0, $-1
	0x0006 00006 (/tmp/babel-ZDNznW/XkIsxn.go:3)	SUBQ	$16, SP
	0x000a 00010 (/tmp/babel-ZDNznW/XkIsxn.go:3)	MOVQ	BP, 8(SP)
	0x000f 00015 (/tmp/babel-ZDNznW/XkIsxn.go:3)	LEAQ	8(SP), BP
	0x0014 00020 (/tmp/babel-ZDNznW/XkIsxn.go:3)	FUNCDATA	$0, gclocals·g2BeySu+wFnoycgXfElmcg==(SB)
	0x0014 00020 (/tmp/babel-ZDNznW/XkIsxn.go:3)	FUNCDATA	$1, gclocals·g2BeySu+wFnoycgXfElmcg==(SB)
	0x0014 00020 (/tmp/babel-ZDNznW/XkIsxn.go:3)	MOVL	$10, AX
	0x0019 00025 (/tmp/babel-ZDNznW/XkIsxn.go:3)	MOVL	$32, BX
	0x001e 00030 (/tmp/babel-ZDNznW/XkIsxn.go:3)	PCDATA	$1, $0
	0x001e 00030 (/tmp/babel-ZDNznW/XkIsxn.go:3)	NOP
	0x0020 00032 (/tmp/babel-ZDNznW/XkIsxn.go:3)	CALL	main.add(SB)
	0x0025 00037 (/tmp/babel-ZDNznW/XkIsxn.go:3)	MOVQ	8(SP), BP
	0x002a 00042 (/tmp/babel-ZDNznW/XkIsxn.go:3)	ADDQ	$16, SP
	0x002e 00046 (/tmp/babel-ZDNznW/XkIsxn.go:3)	RET
	0x002f 00047 (/tmp/babel-ZDNznW/XkIsxn.go:3)	NOP
	0x002f 00047 (/tmp/babel-ZDNznW/XkIsxn.go:3)	PCDATA	$1, $-1
	0x002f 00047 (/tmp/babel-ZDNznW/XkIsxn.go:3)	PCDATA	$0, $-2
	0x002f 00047 (/tmp/babel-ZDNznW/XkIsxn.go:3)	CALL	runtime.morestack_noctxt(SB)
	0x0034 00052 (/tmp/babel-ZDNznW/XkIsxn.go:3)	PCDATA	$0, \(-1
	0x0034 00052 (/tmp/babel-ZDNznW/XkIsxn.go:3)	JMP	0
	0x0000 49 3b 66 10 76 29 48 83 ec 10 48 89 6c 24 08 48  I;f.v)H...H.l\).H
	0x0010 8d 6c 24 08 b8 0a 00 00 00 bb 20 00 00 00 66 90  .l$……. …f.
	0x0020 e8 00 00 00 00 48 8b 6c 24 08 48 83 c4 10 c3 e8  …..H.l$.H…..
	0x0030 00 00 00 00 eb ca                                ……
	rel 33+4 t=7 main.add+0
	rel 48+4 t=7 runtime.morestack_noctxt+0
go:cuinfo.producer.main SDWARFCUINFO dupok size=0
	0x0000 2d 4e 20 2d 6c 20 72 65 67 61 62 69              -N -l regabi
go:cuinfo.packagename.main SDWARFCUINFO dupok size=0
	0x0000 6d 61 69 6e                                      main
main..inittask SNOPTRDATA size=24
	0x0000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  …………….
	0x0010 00 00 00 00 00 00 00 00                          ……..
gclocals·g2BeySu+wFnoycgXfElmcg== SRODATA dupok size=8
	0x0000 01 00 00 00 00 00 00 00                          ……..
main.add.arginfo1 SRODATA static dupok size=5
	0x0000 00 04 04 04 ff                                   …..
</p>

</div>
</div>
</div>
 <div id="outline-container-orge5b81c6" class="outline-3">
 <h3 id="orge5b81c6"> <a href="#orge5b81c6"> <span class="todo TODO">TODO</span> </a> <a href="https://zenn.dev/smartshopping/articles/5df9c3717e25bd">【Go】Mapの内部構造とO(1)のメカニズム</a></h3>
 <div class="outline-text-3" id="text-orge5b81c6">
 <p>
Mapの中身の解説。
</p>
</div>
</div>
 <div id="outline-container-org70ae348" class="outline-3">
 <h3 id="org70ae348"> <a href="#org70ae348"> <span class="todo TODO">TODO</span> </a> <a href="https://reproducible-builds.org/">Reproducible Builds — a set of software development practices that create an independently-verifiable path from source to binary code</a></h3>
 <div class="outline-text-3" id="text-org70ae348">
 <p>
再現可能なビルド。
</p>
</div>
</div>
 <div id="outline-container-orgeef9170" class="outline-3">
 <h3 id="orgeef9170"> <a href="#orgeef9170"> <span class="todo TODO">TODO</span> </a> <a href="https://zenn.dev/nobishii/articles/goquiz_20230817">[Go Quiz] 単一の型のみによる型制約を持つ型パラメータを型に持つ変数にその型の変数を代入できるか</a></h3>
 <div class="outline-text-3" id="text-orgeef9170">
 <p>
型のクイズ。
</p>
</div>
</div>
 <div id="outline-container-orgc031385" class="outline-3">
 <h3 id="orgc031385"> <a href="#orgc031385"> <span class="todo TODO">TODO</span> </a> <a href="https://zenn.dev/nobishii/articles/type_param_intro">Go言語のジェネリクス入門</a></h3>
 <div class="outline-text-3" id="text-orgc031385">
 <p>
ジェネリクスの解説。
</p>
</div>
</div>
 <div id="outline-container-org9fc75b4" class="outline-3">
 <h3 id="org9fc75b4"> <a href="#org9fc75b4"> <span class="todo TODO">TODO</span> </a> <a href="https://speakerdeck.com/dqneo/go-specification-untyped-constants">入門Go言語仕様 / Go Specification Untyped Constants - Speaker Deck</a></h3>
 <div class="outline-text-3" id="text-org9fc75b4">
 <p>
Untyped Constantsの解説。
</p>
</div>
</div>
 <div id="outline-container-org582780b" class="outline-3">
 <h3 id="org582780b"> <a href="#org582780b"> <span class="todo TODO">TODO</span> </a> <a href="https://www.youtube.com/watch?v=TOUkp_Dxb9w">(4) 列挙型の作り方を再考する - Go Conference 2023 Online - YouTube</a></h3>
 <div class="outline-text-3" id="text-org582780b">
 <p>
iotaで作るのがデフォルトではあるけれど。
</p>
</div>
</div>
 <div id="outline-container-orgfe96a7d" class="outline-3">
 <h3 id="orgfe96a7d"> <a href="#orgfe96a7d"> <span class="todo TODO">TODO</span> </a> <a href="https://www.oreilly.com/library/view/hands-on-software-architecture/9781788622592/">Hands-On Software Architecture with Golang [Book</a>]</h3>
 <div class="outline-text-3" id="text-orgfe96a7d">
 <p>
Golangの本。
</p>
</div>
</div>
 <div id="outline-container-org7de8f38" class="outline-3">
 <h3 id="org7de8f38"> <a href="#org7de8f38"> <span class="todo TODO">TODO</span> </a> <a href="https://qiita.com/tenntenn/items/45c568d43e950292bc31">Goを学びたての人が誤解しがちなtypeと構造体について #golang - Qiita</a></h3>
 <div class="outline-text-3" id="text-org7de8f38">
 <p>
シンタックスの意味。
</p>
</div>
</div>
 <div id="outline-container-org7f9920b" class="outline-3">
 <h3 id="org7f9920b"> <a href="#org7f9920b"> <span class="todo TODO">TODO</span> </a> <a href="https://qiita.com/sonatard/items/464a9d45c689386edfe1">Better C - Goと整数 #golang - Qiita</a></h3>
 <div class="outline-text-3" id="text-org7f9920b">
 <p>
Goの整数の仕様の解説。
</p>
</div>
</div>
 <div id="outline-container-org1ee1b67" class="outline-3">
 <h3 id="org1ee1b67"> <a href="#org1ee1b67"> <span class="todo TODO">TODO</span> </a> <a href="https://qiita.com/sonatard/items/7b9b376f3420879a00d6">Go Binary Hacks - go buildせずにビルドする #golang - Qiita</a></h3>
 <div class="outline-text-3" id="text-org1ee1b67">
 <p>
go buildの仕組み解説。全然わからん。
</p>
</div>
</div>
 <div id="outline-container-org2d97e88" class="outline-3">
 <h3 id="org2d97e88"> <a href="#org2d97e88"> <span class="todo TODO">TODO</span> </a> <a href="https://go.dev/talks/2012/splash.article">Go at Google: Language Design in the Service of Software Engineering - The Go Programming Language</a></h3>
 <div class="outline-text-3" id="text-org2d97e88">
 <p>
 <a href="20210911113057-go.html#ID-7cacbaa3-3995-41cf-8b72-58d6e07468b1">Go</a>の言語デザインの解説。
</p>
</div>
</div>
 <div id="outline-container-org0bcb08d" class="outline-3">
 <h3 id="org0bcb08d"> <a href="#org0bcb08d"> <span class="todo TODO">TODO</span> </a> <a href="https://research.swtch.com/interfaces">research!rsc: Go Data Structures: Interfaces</a></h3>
 <div class="outline-text-3" id="text-org0bcb08d">
 <p>
Russ Coxによるインターフェースの詳しい解説。
</p>
</div>
</div>
 <div id="outline-container-org34a91da" class="outline-3">
 <h3 id="org34a91da"> <a href="#org34a91da"> <span class="todo TODO">TODO</span> </a> <a href="https://qiita.com/fujim2/items/493b2c8eac47a3ffe7c7">golangの並行処理のための言語要素に対応するCSPの記述を理解して形式検証の実践を開始しよう(記述編） - Qiita</a></h3>
 <div class="outline-text-3" id="text-org34a91da">
 <p>
CSPを理解する。
</p>
</div>
</div>
 <div id="outline-container-org597e212" class="outline-3">
 <h3 id="org597e212"> <a href="#org597e212"> <span class="todo TODO">TODO</span> </a> <a href="https://go.dev/blog/declaration-syntax">Go’s Declaration Syntax - The Go Programming Language</a></h3>
 <div class="outline-text-3" id="text-org597e212">
 <p>
Cのシンタックスとの違い、理由。
</p>
</div>
</div>
 <div id="outline-container-orgc65c05e" class="outline-3">
 <h3 id="orgc65c05e"> <a href="#orgc65c05e"> <span class="todo TODO">TODO</span> </a> <a href="https://gist.github.com/kofuk/922bdce139e657d67baf22e053f4b548">Goアセンブラのクイックガイド</a></h3>
 <div class="outline-text-3" id="text-orgc65c05e">
 <p>
公式ドキュメントの翻訳。
</p>
</div>
</div>
 <div id="outline-container-orgfefa617" class="outline-3">
 <h3 id="orgfefa617"> <a href="#orgfefa617"> <span class="todo TODO">TODO</span> </a> <a href="https://docs.google.com/presentation/d/10ru3LdbofJqgdmD8pprZuZyWbGvOFC8rKxb6q5Q46Xc/edit#slide=id.p">Go言語低レイヤー入門 Hello world が 画面に表示されるまで (GoConforenceTokyo2021) - Google Slides</a></h3>
 <div class="outline-text-3" id="text-orgfefa617">
 <p>
低レイヤーの解説。
</p>
</div>
</div>
 <div id="outline-container-org3ca24ba" class="outline-3">
 <h3 id="org3ca24ba"> <a href="#org3ca24ba"> <span class="todo TODO">TODO</span> </a> <a href="https://zenn.dev/hsaki/articles/godoc-asm-ja">解説&翻訳 - A Quick Guide to Go’s Assembler</a></h3>
 <div class="outline-text-3" id="text-org3ca24ba">
 <p>
Goアセンブラの解説。
</p>
</div>
</div>
 <div id="outline-container-org80c5cae" class="outline-3">
 <h3 id="org80c5cae"> <a href="#org80c5cae"> <span class="todo TODO">TODO</span> </a> <a href="https://zenn.dev/dqneo/articles/ce9459676a3303">go build を使わずにGoプログラムをビルドする</a></h3>
 <div class="outline-text-3" id="text-org80c5cae">
 <p>
go buildの仕組み。実際に動かして取っ掛かりを見つけるのが面白い。そういうアプローチもあるのか。
</p>

 <blockquote>
 <p>
私はソースを読むよりもリバースエンジニアリングする方が得意なので、今回もログだけを見て処理内容を推測して自作しました。
</p>
</blockquote>

 <p>
ビルドタグで言及されてたページ。
</p>

 <p>
- <a href="https://zenn.dev/team_soda/articles/golang-build-tags-history"> Goのビルドタグの書き方が// +buildから//go:buildに変わった理由</a>
</p>
</div>
</div>
 <div id="outline-container-org3965c83" class="outline-3">
 <h3 id="org3965c83"> <a href="#org3965c83"> <span class="todo TODO">TODO</span> </a> <a href="https://go.dev/doc/comment">Go Doc Comments - The Go Programming Language</a></h3>
 <div class="outline-text-3" id="text-org3965c83">
 <p>
Go Docのコメントの仕様。
</p>
</div>
</div>
 <div id="outline-container-orga682e35" class="outline-3">
 <h3 id="orga682e35"> <a href="#orga682e35"> <span class="todo TODO">TODO</span> </a> <a href="https://github.com/golang/go/wiki/CompilerOptimizations#function-inlining">CompilerOptimizations · golang/go Wiki</a></h3>
 <div class="outline-text-3" id="text-orga682e35">
 <p>
コンパイラの最適化。
</p>
</div>
</div>
 <div id="outline-container-org1038c49" class="outline-3">
 <h3 id="org1038c49"> <a href="#org1038c49"> <span class="todo TODO">TODO</span> </a> <a href="https://docs.google.com/document/d/1CxgUBPlx9iJzkz9JWkb6tIpTe5q32QDmz8l0BouG0Cw/preview">Go Escape Analysis Flaws - Google Docs</a></h3>
 <div class="outline-text-3" id="text-org1038c49">
 <p>
Goエスケープの説明。
</p>
</div>
</div>
 <div id="outline-container-orged000b5" class="outline-3">
 <h3 id="orged000b5"> <a href="#orged000b5"> <span class="todo TODO">TODO</span> </a> <a href="https://zenn.dev/mjhd/articles/a09cb5905b7848">Go 1.20: Profile-Guided Optimization</a></h3>
 <div class="outline-text-3" id="text-orged000b5">
 <blockquote>
 <p>
Profile-Guided Optimizationは、コンパイル時最適化のヒントとして、ランタイムのプロファイル情報を使うことでより効率よく最適化する手法です。
</p>
</blockquote>
</div>
</div>
 <div id="outline-container-org971469b" class="outline-3">
 <h3 id="org971469b"> <a href="#org971469b"> <span class="todo TODO">TODO</span> </a> <a href="https://qiita.com/ruiu/items/54f0dbdec0d48082a5b1">Goでスレッド（goroutine）セーフなプログラムを書くために必ず注意しなければいけない点 - Qiita</a></h3>
 <div class="outline-text-3" id="text-org971469b">
 <p>
並列実行の注意点。
</p>
</div>
</div>
 <div id="outline-container-org7be9bfc" class="outline-3">
 <h3 id="org7be9bfc"> <a href="#org7be9bfc"> <span class="todo TODO">TODO</span> </a> <a href="https://go.dev/ref/mem">The Go Memory Model - The Go Programming Language</a></h3>
 <div class="outline-text-3" id="text-org7be9bfc">
 <p>
Goのメモリモデル。
</p>
</div>
</div>
 <div id="outline-container-orgc32b746" class="outline-3">
 <h3 id="orgc32b746"> <a href="#orgc32b746"> <span class="todo TODO">TODO</span> </a> <a href="https://zenn.dev/sryoya/articles/b0e8e8d83032b0">sync.Onceの内部実装から学ぶ実装アイデア</a></h3>
 <div class="outline-text-3" id="text-orgc32b746">
 <p>
sync.Onceの仕組み。
</p>
</div>
</div>
 <div id="outline-container-org1fe5ffd" class="outline-3">
 <h3 id="org1fe5ffd"> <a href="#org1fe5ffd"> <span class="todo TODO">TODO</span> チェックミスに見えるところを確認する</a></h3>
 <div class="outline-text-3" id="text-org1fe5ffd">
 <p>
チャネルの矢印がないときに、パッケージがないエラーになることがある。ちゃんとそっちを示してほしいのに。フォーマッタとビルドの検知が合ってないために起こるように見える。
</p>
</div>
</div>
 <div id="outline-container-orgd139327" class="outline-3">
 <h3 id="orgd139327"> <a href="#orgd139327"> <span class="todo TODO">TODO</span> </a> <a href="https://github.com/golang/go/wiki/Articles">Articles · golang/go Wiki</a></h3>
 <div class="outline-text-3" id="text-orgd139327">
 <p>
公式の記事。
</p>
</div>
</div>
 <div id="outline-container-org961e3c1" class="outline-3">
 <h3 id="org961e3c1"> <a href="#org961e3c1"> <span class="todo TODO">TODO</span> </a> <a href="https://qiita.com/Akatsuki_py/items/8041fba499d54d59e0dd">“go build”した時に何が起きているのか？ - Qiita</a></h3>
 <div class="outline-text-3" id="text-org961e3c1">
 <p>
コンパイル時になにが起きているか、ログから調べる。
</p>
</div>
</div>
 <div id="outline-container-orgca6d1e2" class="outline-3">
 <h3 id="orgca6d1e2"> <a href="#orgca6d1e2"> <span class="todo TODO">TODO</span> </a> <a href="https://deeeet.com/writing/2016/05/08/gogc-2016/">GolangのGCを追う | Taichi Nakashima</a></h3>
 <div class="outline-text-3" id="text-orgca6d1e2">
 <p>
GCの解説。
</p>
</div>
</div>
 <div id="outline-container-org861dd96" class="outline-3">
 <h3 id="org861dd96"> <a href="#org861dd96"> <span class="todo TODO">TODO</span> </a> <a href="https://www.altoros.com/blog/golang-internals-part-5-the-runtime-bootstrap-process/">Golang Internals, Part 5: the Runtime Bootstrap Process | Altoros</a></h3>
 <div class="outline-text-3" id="text-org861dd96">
 <p>
Goのランタイムの解説。
</p>
</div>
</div>
 <div id="outline-container-org9b9783c" class="outline-3">
 <h3 id="org9b9783c"> <a href="#org9b9783c"> <span class="todo TODO">TODO</span> </a> <a href="https://speakerdeck.com/rhysd/go-detukurufan-yong-yan-yu-chu-li-xi-shi-zhuang-zhan-lue">Go でつくる汎用言語処理系 実装戦略 - Speaker Deck</a></h3>
 <div class="outline-text-3" id="text-org9b9783c">
 <p>
言語処理系の作り方。
</p>
</div>
</div>
 <div id="outline-container-org8d6d06c" class="outline-3">
 <h3 id="org8d6d06c"> <a href="#org8d6d06c"> <span class="todo TODO">TODO</span> </a> <a href="https://go.dev/src/cmd/compile/README">Introduction to the Go compiler - The Go Programming Language</a></h3>
 <div class="outline-text-3" id="text-org8d6d06c">
 <p>
Goコンパイルの流れ。
</p>
</div>
</div>
 <div id="outline-container-org59c5afb" class="outline-3">
 <h3 id="org59c5afb"> <a href="#org59c5afb"> <span class="todo TODO">TODO</span> </a> <a href="https://maku77.github.io/p/29dgjnq/">ベンチマークを行う (testing.B) - まくまく Golang ノート</a></h3>
 <div class="outline-text-3" id="text-org59c5afb">
 <p>
ベンチマークする方法。
</p>
</div>
</div>
 <div id="outline-container-org8329201" class="outline-3">
 <h3 id="org8329201"> <a href="#org8329201"> <span class="todo TODO">TODO</span> </a> <a href="https://zenn.dev/spiegel/books/error-handling-in-golang/viewer/evaluations">エラー評価のいろいろ｜Go のエラーハンドリング</a></h3>
 <div class="outline-text-3" id="text-org8329201">
 <p>
エラーハンドリングの本。
</p>
</div>
</div>
 <div id="outline-container-orgd784915" class="outline-3">
 <h3 id="orgd784915"> <a href="#orgd784915"> <span class="todo TODO">TODO</span> </a> <a href="https://qiita.com/hkurokawa/items/a4d402d3182dff387674">Go の定数の話 - Qiita</a></h3>
 <div class="outline-text-3" id="text-orgd784915">
 <p>
じつは複雑な定数。
</p>
</div>
</div>
 <div id="outline-container-orge15149b" class="outline-3">
 <h3 id="orge15149b"> <a href="#orge15149b"> <span class="todo TODO">TODO</span> </a> <a href="https://zenn.dev/senk/articles/33c9dc7ea25dab">[Go] 言語仕様書の「型と値の特性」を理解する</a></h3>
 <div class="outline-text-3" id="text-orge15149b">
 <p>
値。
</p>
</div>
</div>
 <div id="outline-container-org84302e0" class="outline-3">
 <h3 id="org84302e0"> <a href="#org84302e0"> <span class="todo TODO">TODO</span> interfaceを満たす構造体の調べ方</a></h3>
 <div class="outline-text-3" id="text-org84302e0">
 <p>
どうするんだっけ。
</p>
</div>
</div>
 <div id="outline-container-orge6d6f51" class="outline-3">
 <h3 id="orge6d6f51"> <a href="#orge6d6f51"> <span class="todo TODO">TODO</span> </a> <a href="https://github.com/golang/example">golang/example: Go example projects</a></h3>
 <div class="outline-text-3" id="text-orge6d6f51">
 <p>
例で学ぶ解説。
</p>
</div>
</div>
 <div id="outline-container-orga4390f8" class="outline-3">
 <h3 id="orga4390f8"> <a href="#orga4390f8"> <span class="todo TODO">TODO</span> </a> <a href="https://zenn.dev/spiegel/articles/20201010-ni-is-not-nil">nil == nil でないとき（または Go プログラマは息をするように依存を注入する）</a></h3>
 <div class="outline-text-3" id="text-orga4390f8">
 <p>
直感に反する挙動からわかる、内部の仕組みの話。
</p>
</div>
</div>
 <div id="outline-container-org8851d1a" class="outline-3">
 <h3 id="org8851d1a"> <a href="#org8851d1a"> <span class="todo TODO">TODO</span> </a> <a href="https://gihyo.jp/book/2023/978-4-297-13419-8">Go言語プログラミングエッセンス：書籍案内｜技術評論社</a></h3>
 <div class="outline-text-3" id="text-org8851d1a">
 <p>
来月発売される本。
</p>
</div>
</div>
 <div id="outline-container-orge1be3d9" class="outline-3">
 <h3 id="orge1be3d9"> <a href="#orge1be3d9"> <span class="todo TODO">TODO</span> </a> <a href="https://d-tsuji.github.io/effective_go/documents/effective_go_ja.html">Effective Go — Effective Go ドキュメント</a></h3>
 <div class="outline-text-3" id="text-orge1be3d9">
 <p>
日本語訳。
</p>
</div>
</div>
 <div id="outline-container-orgfffa844" class="outline-3">
 <h3 id="orgfffa844"> <a href="#orgfffa844"> <span class="todo TODO">TODO</span> </a> <a href="https://runebook.dev/ja/docs/go/-index-">Go 1.19 日本語</a></h3>
 <div class="outline-text-3" id="text-orgfffa844">
 <p>
日本語訳された公式ドキュメント。
</p>
</div>
</div>
 <div id="outline-container-orgb471b35" class="outline-3">
 <h3 id="orgb471b35"> <a href="#orgb471b35"> <span class="todo TODO">TODO</span> </a> <a href="https://zenn.dev/hsaki/books/golang-concurrency/viewer/intro">はじめに｜Goでの並行処理を徹底解剖！</a></h3>
 <div class="outline-text-3" id="text-orgb471b35">
 <p>
並行処理の解説本。
</p>

 <p>
並行処理と並列処理は全く異なる。
</p>

 <ul class="org-ul"> <li>並行処理(Concurrency)
 <ul class="org-ul"> <li>ある時点の範囲において、複数のタスクを扱うこと</li>
 <li>どういう風にふたつを終わらせるかは自由</li>
 <li>複数の処理を独立に実行できる  <b>構成</b> のこと</li>
 <li>「並行処理できる設備がある」</li>
 <li>一度に多くのことを扱うこと</li>
 <li>問題解決の手段としてのプログラミングパターン</li>
 <li>平行性はコードの性質</li>
</ul></li>
 <li>並列処理(Parallelism)
 <ul class="org-ul"> <li>ある時点の点において、複数のタスクを扱うこと</li>
 <li>1点において、タスクAとBを同時に実行する</li>
 <li>複数の処理を同時に  <b>実行</b> すること</li>
 <li>「並列処理で生産する」</li>
 <li>一度に多くのことを行うこと</li>
 <li>並行処理を可能にするハードウェアの特性のこと</li>
 <li>並列性は動作しているプログラムの性質</li>
</ul></li>
</ul> <p>
チャネルは送受信、実行同期のための機構。
</p>


 <div id="orgfdb1218" class="figure">
 <p> <img src="images/20230521-parallel.drawio.svg" alt="20230521-parallel.drawio.svg" class="org-svg"></img></p>
</div>

 <ul class="org-ul"> <li>ゴルーチンは他のコードに対して並行に実行している関数のこと(必ずしも並列ではない)</li>
</ul></div>
</div>
 <div id="outline-container-org6844b73" class="outline-3">
 <h3 id="org6844b73"> <a href="#org6844b73"> <span class="todo TODO">TODO</span> </a> <a href="https://www.manning.com/books/learn-go-with-pocket-sized-projects?utm_source=donia&utm_medium=affiliate&utm_campaign=book_latour_learn_1_5_23&utm_content=linkedin&a_aid=donia&a_bid=48b0541c">Learn Go with Pocket-Sized Projects</a></h3>
 <div class="outline-text-3" id="text-org6844b73">
 <p>
Goのハンズオン集。
</p>
</div>
</div>
 <div id="outline-container-org4f57dff" class="outline-3">
 <h3 id="org4f57dff"> <a href="#org4f57dff"> <span class="todo TODO">TODO</span> </a> <a href="https://qiita.com/tenntenn/items/b1bb5eb4d372bd2d936f">gorenameをライブラリとして使う #golang - Qiita</a></h3>
 <div class="outline-text-3" id="text-org4f57dff">
 <p>
IdをIDに変換する例。
</p>
</div>
</div>
 <div id="outline-container-org65af6fe" class="outline-3">
 <h3 id="org65af6fe"> <a href="#org65af6fe"> <span class="todo TODO">TODO</span> </a> <a href="https://qiita.com/lighttiger2505/items/8c1c2222d8ceb04b43fd">Go標準のflagパッケージと比べてみようサードパーティflagライブラリ - Qiita</a></h3>
 <div class="outline-text-3" id="text-org65af6fe">
 <p>
読む。
</p>
</div>
</div>
 <div id="outline-container-orge9439b3" class="outline-3">
 <h3 id="orge9439b3"> <a href="#orge9439b3"> <span class="todo TODO">TODO</span> </a> <a href="http://go.shibu.jp/effective_go.html">Effective Go — プログラミング言語 Go ドキュメント v0.1 documentation</a></h3>
 <div class="outline-text-3" id="text-orge9439b3">
 <p>
Goらしく書くためのtips。
</p>
</div>
</div>
 <div id="outline-container-org6047bb2" class="outline-3">
 <h3 id="org6047bb2"> <a href="#org6047bb2"> <span class="todo TODO">TODO</span> </a> <a href="https://qiita.com/mnuma/items/109458d90ce9dbdde426">Go Patternsで学ぶGo - Qiita</a></h3>
 <div class="outline-text-3" id="text-org6047bb2">
 <p>
Goで役立つパターン。
</p>
</div>
</div>
 <div id="outline-container-org7894f25" class="outline-3">
 <h3 id="org7894f25"> <a href="#org7894f25"> <span class="todo TODO">TODO</span> </a> <a href="https://www.educative.io/answers/how-to-read-and-write-with-golang-bufio">How to read and write with Golang bufio</a></h3>
 <div class="outline-text-3" id="text-org7894f25">
 <p>
bufioのわかりやすい解説。
</p>
</div>
</div>
 <div id="outline-container-org17b168a" class="outline-3">
 <h3 id="org17b168a"> <a href="#org17b168a"> <span class="todo TODO">TODO</span> </a> <a href="https://qiita.com/tutuz/items/e875d8ea3c31450195a7">Go言語を使ったTCPクライアントの作り方 - Qiita</a></h3>
 <div class="outline-text-3" id="text-org17b168a">
 <p>
TCPの仕組み、作り方。
</p>
</div>
</div>
 <div id="outline-container-org575a486" class="outline-3">
 <h3 id="org575a486"> <a href="#org575a486"> <span class="todo TODO">TODO</span> new()とmake()の違い    <span class="tag"> <span class="DontKnow">DontKnow</span></span></a></h3>
 <div class="outline-text-3" id="text-org575a486">
 <p>
どちらも大まかには初期化するものだが、微妙に異なる。
</p>

 <ul class="org-ul"> <li>newはゼロ値で確保された値へのポインタを得る関数</li>
</ul> <div class="org-src-container">
 <pre class="src src-git-permalink">https://github.com/kd-collective/go/blob/9b8750f53ed89fb326e4d811524e647683136bac/src/builtin/builtin.go#L212
</pre>
</div>

 <div class="results" id="org1fb1d00">
 <p>
func new(Type) *Type
</p>

</div>

 <ul class="org-ul"> <li>makeはマップ、スライス、チャンネル（map[type]type, []type, chan）の確保と初期化を行い型そのものを得る関数</li>
</ul> <div class="org-src-container">
 <pre class="src src-git-permalink">https://github.com/kd-collective/go/blob/9b8750f53ed89fb326e4d811524e647683136bac/src/builtin/builtin.go#L207
</pre>
</div>

 <p>
#+begin_resultsg go
func make(t Type, size …IntegerType) Type
#+end_results
</p>
</div>
</div>
 <div id="outline-container-org676dbc2" class="outline-3">
 <h3 id="org676dbc2"> <a href="#org676dbc2"> <span class="todo TODO">TODO</span> </a> <a href="https://zenn.dev/hsaki/books/golang-context/viewer/intro">よくわかるcontextの使い方</a></h3>
 <div class="outline-text-3" id="text-org676dbc2">
 <p>
contextの詳しい解説。この人すごいなあ。
</p>

 <ul class="org-ul"> <li>contextのvalueに入れるのにふさわしい値はリクエストスコープな値
 <ul class="org-ul"> <li>1つのリクエストが処理されている間に共有される</li>
 <li>ユーザーID</li>
 <li>認証トークン</li>
 <li>トレースのためにサーバ側でつける処理ID</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-orge9e5cfa" class="outline-3">
 <h3 id="orge9e5cfa"> <a href="#orge9e5cfa"> <span class="todo TODO">TODO</span> orgパーサを書く</a></h3>
 <div class="outline-text-3" id="text-orge9e5cfa">
 <p>
パーサの理解を深めるためにやる。
</p>

 <p>
参考。
</p>

 <ul class="org-ul"> <li> <a href="https://www.m3tech.blog/entry/2021/08/23/124000">マークダウンパーサを作ろう - エムスリーテックブログ</a></li>
</ul> <p>
最終的にフォーマッタにしたい。
</p>

 <ul class="org-ul"> <li>複数行で継続するものと、行内だけで有効化されるものがある。基本的に行内</li>
 <li>先頭行で効果を発揮するものと、囲むことで有効化するものがある</li>
</ul></div>
</div>
 <div id="outline-container-orgf603250" class="outline-3">
 <h3 id="orgf603250"> <a href="#orgf603250"> <span class="todo TODO">TODO</span> </a> <a href="https://compilerbook.com/">Writing A Compiler In Go | Thorsten Ball</a></h3>
 <div class="outline-text-3" id="text-orgf603250">
 <p>
Goでインタプリタを書く本の続編。
</p>
</div>
</div>
 <div id="outline-container-orgdc2809f" class="outline-3">
 <h3 id="orgdc2809f"> <a href="#orgdc2809f"> <span class="todo TODO">TODO</span> </a> <a href="https://astaxie.gitbooks.io/build-web-application-with-golang/content/ja/?q=">Introduction · Build web application with Golang</a></h3>
 <div class="outline-text-3" id="text-orgdc2809f">
 <p>
Go Web プログラミング。
</p>
</div>
</div>
 <div id="outline-container-org4bd897e" class="outline-3">
 <h3 id="org4bd897e"> <a href="#org4bd897e"> <span class="todo TODO">TODO</span> </a> <a href="http://go.shibu.jp/">プログラミング言語 Go ドキュメント — プログラミング言語 Go ドキュメント v0.1 documentation</a></h3>
 <div class="outline-text-3" id="text-org4bd897e">
 <p>
Goドキュメント。
</p>
</div>
</div>
 <div id="outline-container-org0ebe11b" class="outline-3">
 <h3 id="org0ebe11b"> <a href="#org0ebe11b"> <span class="todo TODO">TODO</span> </a> <a href="https://knsh14.github.io/translations/go-codereview-comments/">Go Codereview Comments</a></h3>
 <div class="outline-text-3" id="text-org0ebe11b">
 <p>
GoのTips集。
</p>
</div>
</div>
 <div id="outline-container-orgecf6d86" class="outline-3">
 <h3 id="orgecf6d86"> <a href="#orgecf6d86"> <span class="todo TODO">TODO</span> </a> <a href="https://hiwane.github.io/gospec-ja/">Go プログラミング言語仕様 | gospec-ja</a></h3>
 <div class="outline-text-3" id="text-orgecf6d86">
 <p>
言語仕様の日本語訳。
</p>
</div>
</div>
 <div id="outline-container-org1f5d1fa" class="outline-3">
 <h3 id="org1f5d1fa"> <a href="#org1f5d1fa"> <span class="todo TODO">TODO</span> </a> <a href="https://qiita.com/taigamikami/items/fc798cdd6a4eaf9a7d5e">Goのgoroutine, channelをちょっと攻略！ - Qiita</a></h3>
 <div class="outline-text-3" id="text-org1f5d1fa">
 <p>
ゴルーチンの解説。
</p>
</div>
</div>
 <div id="outline-container-orgd1b6792" class="outline-3">
 <h3 id="orgd1b6792"> <a href="#orgd1b6792"> <span class="todo TODO">TODO</span> </a> <a href="https://qiita.com/tenntenn/items/45c568d43e950292bc31">Goを学びたての人が誤解しがちなtypeと構造体について #golang - Qiita</a></h3>
 <div class="outline-text-3" id="text-orgd1b6792">
 <p>
typeとstructの違いの解説。
</p>
</div>
</div>
 <div id="outline-container-orgdb092e5" class="outline-3">
 <h3 id="orgdb092e5"> <a href="#orgdb092e5"> <span class="todo TODO">TODO</span> actをworkflow化する</a></h3>
 <div class="outline-text-3" id="text-orgdb092e5">
 <p>
 <a href="20220427215330-github_actions.html#ID-2d35ac9e-554a-4142-bba7-3c614cbfe4c4">GitHub Actions</a>ですぐに実行できるようにする。
</p>

 <ul class="org-ul"> <li>workflow化する</li>
 <li>スターターパッケージを作成する</li>
</ul> <p>
フォークをどう扱うか問題がある。自分は運用でカバーしてるけど。自分で使うには十分だけど、他の人に利用してもらうにはまだビミョー。
</p>
</div>
</div>
 <div id="outline-container-org7755afc" class="outline-3">
 <h3 id="org7755afc"> <a href="#org7755afc"> <span class="todo TODO">TODO</span> actをバージョン対応する</a></h3>
 <div class="outline-text-3" id="text-org7755afc">
 <p>
mainを使ってるので、バージョンを固定して安全に使えるようにする。
</p>
</div>
</div>
 <div id="outline-container-org235e0dd" class="outline-3">
 <h3 id="org235e0dd"> <a href="#org235e0dd"> <span class="todo TODO">TODO</span> maruをバージョン対応する</a></h3>
 <div class="outline-text-3" id="text-org235e0dd">
 <p>
READMEのタグをmainにしてるので、バージョン番号にする。タグを切り替えると画像も変わるようにして、安全にする。安心して使えるようにする。
</p>
</div>
</div>
 <div id="outline-container-org740990a" class="outline-3">
 <h3 id="org740990a"> <a href="#org740990a"> <span class="todo TODO">TODO</span> ローカルパッケージをimportする方法</a></h3>
 <div class="outline-text-3" id="text-org740990a">
 <p>
読みたいライブラリがmoduleで、直接実行できない。実行できないと、printデバッグもできない。テストでもできるか。だが引数が面倒なのだと大変。
</p>

 <p>
ローカルimportの方法も一応知っておきたい。
</p>
</div>
</div>
 <div id="outline-container-org4f26468" class="outline-3">
 <h3 id="org4f26468"> <a href="#org4f26468"> <span class="todo TODO">TODO</span> octocovを読む</a></h3>
 <div class="outline-text-3" id="text-org4f26468">
 <ul class="org-ul"> <li> <a href="https://github.com/k1LoW/octocov">k1LoW/octocov</a></li>
</ul> <p>
何か作っていて参考にするときは、よく読める。理解できる。が大雑把なスコープで「理解しよう」でやるとあまり進まない。
</p>
</div>
</div>
 <div id="outline-container-orgc044982" class="outline-3">
 <h3 id="orgc044982"> <a href="#orgc044982"> <span class="todo TODO">TODO</span> goclocを読む</a></h3>
 <div class="outline-text-3" id="text-orgc044982">
 <p>
goclocはリポジトリのコード量を調べるツール。
</p>

 <ul class="org-ul"> <li> <a href="https://github.com/hhatto/gocloc">hhatto/gocloc: A little fast cloc(Count Lines Of Code)</a></li>
</ul> <p>
参考になるところのメモ。
</p>

 <ul class="org-ul"> <li>気軽にコマンド実行できるようにdockerイメージを用意する</li>
 <li>オプションの取り回し方。構造体に入れておく</li>
 <li>結果を構造体に入れておく</li>
 <li>本体とCLIは別packageになっている</li>
</ul> <p>
気になる部分。
</p>

 <ul class="org-ul"> <li>言語判定のライブラリを使っているみたいだが、大きな、割と雑なマップがある</li>
</ul></div>
</div>
 <div id="outline-container-org9e45638" class="outline-3">
 <h3 id="org9e45638"> <a href="#org9e45638"> <span class="todo TODO">TODO</span> colorを読む</a></h3>
 <div class="outline-text-3" id="text-org9e45638">
 <p>
CLIに色をつけるライブラリ。
</p>

 <ul class="org-ul"> <li> <a href="https://github.com/fatih/color">fatih/color: Color package for Go (golang)</a></li>
</ul> <p>
別の色関係のライブラリが出てくる。何が違うのかわからない。
</p>

 <ul class="org-ul"> <li> <a href="https://github.com/mattn/go-colorable">mattn/go-colorable</a></li>
</ul> <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 38: </span>関数Set。メソッドSetを呼び出す</label> <pre class="src src-git-permalink">https://github.com/kd-collective/color/blob/dbae876e45b9c53e464d101d63f4758c9f0bd8e8/color.go#L131-L137
</pre>
</div>

 <div class="results" id="org0356af9">
 <p>
 <i>/ Set sets the given parameters immediately. It will change the color of
/</i> output with the given SGR parameters until color.Unset() is called.
func Set(p …Attribute) *Color {
	c := New(p…)
	c.Set()
	return c
}
</p>

</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 39: </span>メソッドSet。Printfで、色指定された文字を表示している</label> <pre class="src src-git-permalink">https://github.com/kd-collective/color/blob/dbae876e45b9c53e464d101d63f4758c9f0bd8e8/color.go#L149-L157
</pre>
</div>

 <div class="results" id="org79abdac">
 <p>
// Set sets the SGR sequence.
func (c *Color) Set() *Color {
	if c.isNoColorSet() {
		return c
	}
</p>

 <p>
	fmt.Fprint(Output, c.format())
	return c
}
</p>

</div>

 <p>
なんだか地味に長いし、よくわからない。
</p>
</div>
</div>
 <div id="outline-container-orgb0dd025" class="outline-3">
 <h3 id="orgb0dd025"> <a href="#orgb0dd025"> <span class="todo TODO">TODO</span> </a> <a href="https://www.amazon.co.jp/Go%E8%A8%80%E8%AA%9Ereflect%E3%83%8F%E3%83%B3%E3%83%89%E3%83%96%E3%83%83%E3%82%AF-%E6%8A%80%E8%A1%93%E3%81%AE%E6%B3%89%E3%82%B7%E3%83%AA%E3%83%BC%E3%82%BA%EF%BC%88NextPublishing%EF%BC%89-%E5%8D%83%E8%91%89-%E5%A4%A7%E4%BA%8C%E9%83%8E-ebook/dp/B08NT59MS4/ref=sr_1_16?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&crid=1HEEXC8ONO3XN&keywords=go+%E8%A8%80%E8%AA%9E&qid=1663726078&sprefix=go+%E3%81%92n%2Caps%2C202&sr=8-16">Go言語reflectハンドブック (技術の泉シリーズ（NextPublishing）) | 千葉 大二郎 | 工学 | Kindleストア | Amazon</a></h3>
 <div class="outline-text-3" id="text-orgb0dd025">
 <p>
reflectの解説。
</p>
</div>
</div>
 <div id="outline-container-org68fea01" class="outline-3">
 <h3 id="org68fea01"> <a href="#org68fea01"> <span class="todo TODO">TODO</span> </a> <a href="https://www.amazon.co.jp/Go%E3%81%A8SAM%E3%81%A7%E5%AD%A6%E3%81%B6AWS-Lambda-%E6%8A%80%E8%A1%93%E3%81%AE%E6%B3%89%E3%82%B7%E3%83%AA%E3%83%BC%E3%82%BA%EF%BC%88NextPublishing%EF%BC%89-%E6%9D%89%E7%94%B0-%E5%AF%BF%E6%86%B2-ebook/dp/B07LGNGDHF/ref=sr_1_36?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&crid=1HEEXC8ONO3XN&keywords=go+%E8%A8%80%E8%AA%9E&qid=1663726078&sprefix=go+%E3%81%92n%2Caps%2C202&sr=8-36">GoとSAMで学ぶAWS Lambda (技術の泉シリーズ（NextPublishing）) | 杉田 寿憲 | 工学 | Kindleストア | Amazon</a></h3>
 <div class="outline-text-3" id="text-org68fea01">
 <p>
Goを使ったサーバレスの解説。
</p>
</div>
</div>
 <div id="outline-container-org67dc703" class="outline-3">
 <h3 id="org67dc703"> <a href="#org67dc703"> <span class="todo TODO">TODO</span> </a> <a href="https://www.amazon.co.jp/Go%E8%A8%80%E8%AA%9E%E3%81%AB%E3%82%88%E3%82%8B%E4%B8%A6%E8%A1%8C%E5%87%A6%E7%90%86-Katherine-Cox-Buday/dp/4873118468/ref=sr_1_19?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&crid=1HEEXC8ONO3XN&keywords=go+%E8%A8%80%E8%AA%9E&qid=1663726078&sprefix=go+%E3%81%92n%2Caps%2C202&sr=8-19">Go言語による並行処理 | Katherine Cox-Buday, 山口 能迪 |本 | 通販 | Amazon</a></h3>
 <div class="outline-text-3" id="text-org67dc703">
 <p>
平行処理の解説。
</p>

 <ul class="org-ul"> <li>57</li>

 <li id="Coffman条件">デッドロックが発生するために存在しなければならない条件
 <ul class="org-ul"> <li>相互排他
 <ul class="org-ul"> <li>ある並行プロセスがリソースに対して排他的な権利をどの時点においても保持している</li>
</ul></li>
 <li>条件待ち
 <ul class="org-ul"> <li>ある並行プロセスはリソースの保持と追加のリソース待ちを同時に行わなければならない</li>
</ul></li>
 <li>横取り不可
 <ul class="org-ul"> <li>ある並行プロセスによって保持されているリソースは、そのプロセスによってのみ解放される</li>
</ul></li>
 <li>循環待ち
 <ul class="org-ul"> <li>ある並行プロセス(P1)は、他の連なっている並行プロセス(P2)を待たなければならない。そしてP2はP1を待っている</li>
</ul></li>
</ul></li>

 <li>たいていの言語はCSPのメッセージパッシング形式よりもメモリを共有し同期するほうを好んでいる。共有メモリのモデルは正確に使うことが難しくなる</li>
 <li>GoでははじめからCSPを導入している</li>
 <li>syncパッケージは伝統的なメモリアクセス同期で並行処理を達成する。問題解決する平行処理の書き方を高水準(Goルーチン、チャネル)、低水準(sync)で選択できる</li>
 <li>プログラムを書く際にはある瞬間にただ1つのゴルーチンがある特定のデータの責任を持つように心がける。メモリを共有することで通信してはいけない。かわりに通信することでメモリを共有する</li>
 <li>Goのモットー「通信によってメモリを共有し、メモリの共有によって通信してはいけない」</li>
 <li>何かしら結果を生成するコードがあり、その結果を別のコードに共有したい場合、これはデータの所有権を移動していることになる。ガベージコレクションをサポートしていない言語でのメモリの所有権と同じ考え方。データには所有権があり、平行プログラムを安全にする方法の1つとして、1度に1つの並行処理のコンテキストのみがデータの所有権を持つようにする。チャネルを使うと、この意図をチャネルの形で表現することで並行プログラムを安全にする構想を伝えることができる
 <ul class="org-ul"> <li>大きな利点は、バッファ付きチャネルを生成して、コストが低いインメモリのキューを実装し生産者(Producer)と消費者(Consumer)を切り離すことができる</li>
</ul></li>
 <li>OSスレッドを使う言語では平行処理を抽象化する方法として便利なほかのパターンや実装方法がある。たとえばスレッドプール。こうした抽象化はたいていOSスレッドの補強や強化をする目的で作られていて、Goで使うことはあまりない</li>
 <li>問題空間をゴルーチンに当てはめられるようにして、ワークフロー内の並行処理部分をうまく表現し、どんどんゴルーチンを起動する</li>
 <li id="ゴルーチン">他のコードに対して並行に実行している関数のこと(必ずしも並列ではない)</li>
 <li>ゴルーチンはコルーチンとして知られる高水準の抽象化</li>
</ul></div>
</div>
 <div id="outline-container-org924691b" class="outline-3">
 <h3 id="org924691b"> <a href="#org924691b"> <span class="todo TODO">TODO</span> </a> <a href="https://www.amazon.co.jp/Go%E8%A8%80%E8%AA%9E%E3%81%AB%E3%82%88%E3%82%8B%E5%88%86%E6%95%A3%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9-%E2%80%95%E4%BF%A1%E9%A0%BC%E6%80%A7%E3%80%81%E6%8B%A1%E5%BC%B5%E6%80%A7%E3%80%81%E4%BF%9D%E5%AE%88%E6%80%A7%E3%81%AE%E9%AB%98%E3%81%84%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%81%AE%E6%A7%8B%E7%AF%89-Travis-Jeffery/dp/4873119979/ref=sr_1_5?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&crid=1HEEXC8ONO3XN&keywords=go+%E8%A8%80%E8%AA%9E&qid=1663726078&sprefix=go+%E3%81%92n%2Caps%2C202&sr=8-5">Go言語による分散サービス ―信頼性、拡張性、保守性の高いシステムの構築 | Travis Jeffery, 柴田 芳樹 |本 | 通販 | Amazon</a></h3>
 <div class="outline-text-3" id="text-org924691b">
 <p>
分散サービスの解説。
</p>
</div>
</div>
 <div id="outline-container-orgdd3598b" class="outline-3">
 <h3 id="orgdd3598b"> <a href="#orgdd3598b"> <span class="todo TODO">TODO</span> </a> <a href="https://www.amazon.co.jp/%E5%AE%9F%E7%94%A8-Go%E8%A8%80%E8%AA%9E-%E2%80%95%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E9%96%8B%E7%99%BA%E3%81%AE%E7%8F%BE%E5%A0%B4%E3%81%A7%E7%9F%A5%E3%81%A3%E3%81%A6%E3%81%8A%E3%81%8D%E3%81%9F%E3%81%84%E3%82%A2%E3%83%89%E3%83%90%E3%82%A4%E3%82%B9-%E6%B8%8B%E5%B7%9D-%E3%82%88%E3%81%97%E3%81%8D/dp/4873119693/ref=sr_1_3?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&crid=1HEEXC8ONO3XN&keywords=go+%E8%A8%80%E8%AA%9E&qid=1663726078&sprefix=go+%E3%81%92n%2Caps%2C202&sr=8-3">実用 Go言語 ―システム開発の現場で知っておきたいアドバイス | 渋川 よしき, 辻 大志郎, 真野 隼記 |本 | 通販 | Amazon</a></h3>
 <div class="outline-text-3" id="text-orgdd3598b">
 <ul class="org-ul"> <li>45, 94, 102, 199, 232</li>
</ul> <p>
業務に役立つGoの解説。
</p>

 <blockquote>
 <p>
Javaの世界では、親のコントロールクラスを継承して必要なメソッドを再定義しフレームワークから利用する、といった大規模なフレームワーク風のコーディングスタイルがあります。これはmain()関数が見えない、「ハリウッドの法則」にのっとったもので、一見コード量が少なく効率も良さそうに思えますが、フレームワークの進化が進めば進むほど、ソフトウェアの構造を考えて実装するという経験が得られず、「ソフトウェアの仕組みや開発技術を学ぶ」よりも「フレームワークの作法」を学ぶことが要求されるようになります。ジュニアな開発者でもレールから外れることなく、一定の成果をあげられるという利点がありますが、プログラマーとしての成長が難しいという欠点があります。
</p>
</blockquote>

 <ul class="org-ul"> <li>Goでパフォーマンスに差があらわれがちなポイントはスライスとマップのメモリ確保
 <ul class="org-ul"> <li>スライスはその実態として固定長の配列が確保されており、スライスはそれを参照する窓として使われメモリの読み書きが行われる</li>
 <li>長さが足りないといって好き勝手に拡張できない</li>
 <li>裏の配列に要素を追加し続けて割り当てられたサイズを使い果たした場合、Goのランタイムは新しくメモリを確保し、それに配列の内容をコピーして移動する</li>
 <li>確保しているメモリのことをキャパシティという。cap()で取得できる</li>
</ul></li>
 <li>オーバーライド・継承のあるオブジェクト指向プログラミングではテンプレートメソッドパターンが一般的に用いられる
 <ul class="org-ul"> <li>テンプレートメソッドパターン: フレームワーク側でロジックの大部分をにない、一部のカスタマイズ可能なポイントのロジックのみを変更する設計</li>
</ul></li>
 <li>Goではテンプレートメソッドパターンを使用しない代わりにストラテジーパターンを用いる</li>
 <li>シンプルなインターフェースを使うAPI(Reader, Writerを引数にとる)をコアとして作り、それをラップして使いやすいAPIを別に提供するのが、Goで広く行われている設計方法
 <ul class="org-ul"> <li>ユニットテストなどが行いやすい。</li>
</ul></li>
 <li>文法がシンプルだからこそ、どう使うかが重要になっている</li>
 <li>エラーのラップ、アンラップができる。たとえば「ファイルパスエラー」という低レベルなエラーをラップして「設定ファイルの読み込みエラー」とより抽象度の高いエラーで表現でき、必要に応じてアンラップし、詳細情報にもアクセスできる</li>
 <li>エラーのチェック忘れをkisielk/errcheckで確かめられる</li>
 <li> <code>go install</code> はgo.modに影響なくインストールできる。  <code>go get</code> はgo.modに反映する</li>
 <li>Goの場合、パッケージを相互依存の関係にできないことから、パッケージ連携ごとに同じような構造体を量産することになりコード量が増加する。まずはシンプルに、パッケージを細かく分割しないことを考える</li>
 <li>フォークしたGoプロジェクトはハッシュが異なるため、そのままでは依存関係に記述できない</li>
</ul></div>
</div>
 <div id="outline-container-org5d464bd" class="outline-3">
 <h3 id="org5d464bd"> <a href="#org5d464bd"> <span class="todo TODO">TODO</span> </a> <a href="https://zenn.dev/hokita/articles/66cc118b227ae3">はじめてのゲームプログラミング（Ebiten）</a></h3>
 <div class="outline-text-3" id="text-org5d464bd">
 <p>
簡単なゲームのチュートリアル。
</p>
</div>
</div>
 <div id="outline-container-org9a3c9e4" class="outline-3">
 <h3 id="org9a3c9e4"> <a href="#org9a3c9e4"> <span class="todo TODO">TODO</span> </a> <a href="https://golangprojectstructure.com/creating-cool-games-with-ebiten-in-go/">Creating Cool Games With Ebiten | Golang Project Structure</a></h3>
 <div class="outline-text-3" id="text-org9a3c9e4">
 <p>
ゲームのチュートリアル。
</p>
</div>
</div>
 <div id="outline-container-org97f476c" class="outline-3">
 <h3 id="org97f476c"> <a href="#org97f476c"> <span class="todo TODO">TODO</span> </a> <a href="https://www.fatoldyeti.com/categories/roguelike-tutorial/">Roguelike Tutorial | Fat Old Yeti</a></h3>
 <div class="outline-text-3" id="text-org97f476c">
 <p>
Ebitenでローグライクを作るチュートリアル。
</p>
</div>
</div>
 <div id="outline-container-org7a8aec4" class="outline-3">
 <h3 id="org7a8aec4"> <a href="#org7a8aec4"> <span class="todo TODO">TODO</span> </a> <a href="https://medium.com/@chrisandrews_76960/2d-game-development-in-golang-part-1-5e2c11a513ed">2D Game Development in Golang — Part 1 | by Chris Andrews | Medium</a></h3>
 <div class="outline-text-3" id="text-org7a8aec4">
 <p>
Ebitenの小さなチュートリアル。
</p>
</div>
</div>
 <div id="outline-container-orgdd2afce" class="outline-3">
 <h3 id="orgdd2afce"> <a href="#orgdd2afce"> <span class="todo TODO">TODO</span> </a> <a href="https://qiita.com/bokuweb/items/1575337bef44ae82f4d3">ファミコンエミュレータの創り方 - Hello, World!編 - - Qiita</a></h3>
 <div class="outline-text-3" id="text-orgdd2afce">
 <p>
エミュレータの作り方の概要。
</p>
</div>
</div>
 <div id="outline-container-org58e7117" class="outline-3">
 <h3 id="org58e7117"> <a href="#org58e7117"> <span class="todo TODO">TODO</span> </a> <a href="https://zenn.dev/akatsuki/articles/ec95ab95f0e89ea8c38f">ゲームボーイのエミュレータをGoで作った話</a></h3>
 <div class="outline-text-3" id="text-org58e7117">
 <p>
作り方の解説。
</p>
</div>
</div>
 <div id="outline-container-orgfd19570" class="outline-3">
 <h3 id="orgfd19570"> <a href="#orgfd19570"> <span class="todo TODO">TODO</span> </a> <a href="https://swet.dena.com/entry/2021/12/07/123000">「テスタビリティの高いGoのAPIサーバを開発しよう」というハンズオンを公開しました - DeNA Testing Blog</a></h3>
 <div class="outline-text-3" id="text-orgfd19570">
 <p>
GoのAPIハンズオン。
</p>
</div>
</div>
 <div id="outline-container-org10dd7f4" class="outline-3">
 <h3 id="org10dd7f4"> <a href="#org10dd7f4"> <span class="todo TODO">TODO</span> </a> <a href="https://wxdublin.gitbooks.io/docker-code-walk/content/client.html">Client | Docker Code Walk</a></h3>
 <div class="outline-text-3" id="text-org10dd7f4">
 <p>
Dockerコードの概略。
</p>
</div>
</div>
 <div id="outline-container-org0c3f8d5" class="outline-3">
 <h3 id="org0c3f8d5"> <a href="#org0c3f8d5"> <span class="todo TODO">TODO</span> </a> <a href="https://tatsu-zine.com/books/starting-grpc">スターティングgRPC【委託】 - 達人出版会</a></h3>
 <div class="outline-text-3" id="text-org0c3f8d5">
 <p>
サーバ側Go, クライアント側Rubyと異なる言語を用いてサンプルアプリケーションを実装する。
</p>
</div>
</div>
 <div id="outline-container-org4dc9c6d" class="outline-3">
 <h3 id="org4dc9c6d"> <a href="#org4dc9c6d"> <span class="todo TODO">TODO</span> </a> <a href="https://gihyo.jp/dp/ebook/2019/978-4-297-10728-4">改訂2版 みんなのGo言語 | Gihyo Digital Publishing … 技術評論社の電子書籍</a></h3>
 <div class="outline-text-3" id="text-org4dc9c6d">
 <p>
わかりやすいという入門書。
</p>
</div>
</div>
 <div id="outline-container-orgf711694" class="outline-3">
 <h3 id="orgf711694"> <a href="#orgf711694"> <span class="todo TODO">TODO</span> </a> <a href="https://tatsu-zine.com/books/go-web-programming">Goプログラミング実践入門 標準ライブラリでゼロからWebアプリを作る【委託】 - 達人出版会</a></h3>
 <div class="outline-text-3" id="text-orgf711694">
 <ul class="org-ul"> <li>27, 68, 73, 93, 148</li>
</ul> <p>
ゼロから実装する。あまりピンとこない。
</p>
</div>
 <div id="outline-container-org6c92426" class="outline-4">
 <h4 id="org6c92426"> <a href="#org6c92426">フレームワークの弊害</a></h4>
 <div class="outline-text-4" id="text-org6c92426">
 <ul class="org-ul"> <li>フレームワークを使えばすぐ構築できる。が、フレームワーク独自の約束事やパターンに従わないといけないことも多い。それがベストプラクティスであると仮定しているが、ベストプラクティスは理解していないとカーゴカルト・プログラミングに陥りどんなときでも無条件で適用してしまう</li>
 <li>フレームワークを構築する基盤となっている概念を理解することが重要。正しい理解があれば、ある約束事やパターンが存在する理由がわかるようになる</li>
 <li>たとえばクライアント側にクッキーとしてデータを保持し、サーバ側にセッションとして保持するのには理由がある。HTTPがコネクションレスのプロトコルであり、サーバの各回の呼び出しには以前の呼び出しの情報が含まれていないからである</li>
 <li>Go言語においてハンドラとは、ServeHttpというメソッドを持ったインターフェースのこと</li>
 <li> <a href="https://qiita.com/huji0327/items/c85affaf5b9dbf84c11e">【Go】マルチプレクサってなんやねん - Qiita</a></li>
</ul></div>
</div>
</div>
 <div id="outline-container-org639a3bd" class="outline-3">
 <h3 id="org639a3bd"> <a href="#org639a3bd"> <span class="todo TODO">TODO</span> Go Design Patterns</a></h3>
</div>
 <div id="outline-container-org95a238b" class="outline-3">
 <h3 id="org95a238b"> <a href="#org95a238b"> <span class="todo TODO">TODO</span> Cloud Native Go</a></h3>
</div>
 <div id="outline-container-orgb1b07a1" class="outline-3">
 <h3 id="orgb1b07a1"> <a href="#orgb1b07a1"> <span class="todo TODO">TODO</span> Go and Go-Moku The Oriental Board Games</a></h3>
</div>
 <div id="outline-container-org8c1abfa" class="outline-3">
 <h3 id="org8c1abfa"> <a href="#org8c1abfa"> <span class="todo TODO">TODO</span> Mastering Go Create Golang production applications using network libraries, concurrency, and advanced Go data structures</a></h3>
</div>
 <div id="outline-container-orgfe5771f" class="outline-3">
 <h3 id="orgfe5771f"> <a href="#orgfe5771f"> <span class="todo TODO">TODO</span> RESTful Go APIs Design und Implementierung leichtgewichtiger Hypermedia Services</a></h3>
</div>
 <div id="outline-container-org6ced5d3" class="outline-3">
 <h3 id="org6ced5d3"> <a href="#org6ced5d3"> <span class="todo TODO">TODO</span> Hands-On System Programming with Go</a></h3>
</div>
 <div id="outline-container-orga9f3289" class="outline-3">
 <h3 id="orga9f3289"> <a href="#orga9f3289"> <span class="todo TODO">TODO</span> Powerful Command-Line Applications in Go</a></h3>
</div>
 <div id="outline-container-orgfcec01f" class="outline-3">
 <h3 id="orgfcec01f"> <a href="#orgfcec01f"> <span class="todo TODO">TODO</span> Build an Orchestrator in Go</a></h3>
</div>
 <div id="outline-container-org27c12c1" class="outline-3">
 <h3 id="org27c12c1"> <a href="#org27c12c1"> <span class="todo TODO">TODO</span> The Docker Book</a></h3>
</div>
 <div id="outline-container-org9e7894c" class="outline-3">
 <h3 id="org9e7894c"> <a href="#org9e7894c"> <span class="todo TODO">TODO</span> </a> <a href="https://github.com/google/go-github">google/go-github: Go library for accessing the GitHub v3 API</a></h3>
 <div class="outline-text-3" id="text-org9e7894c">
 <p>
GoのGitHubアクセスのためのライブラリ。
</p>

 <p>
実際の参考になる使用例。
</p>
 <ul class="org-ul"> <li> <a href="https://github.com/k1LoW/octocov/blob/main/gh/gh.go">https://github.com/k1LoW/octocov/blob/main/gh/gh.go</a></li>
</ul></div>
</div>
 <div id="outline-container-org0e67fa1" class="outline-3">
 <h3 id="org0e67fa1"> <a href="#org0e67fa1"> <span class="todo TODO">TODO</span> </a> <a href="https://www.ebiebievidence.com/posts/2020/12/golang-compiler/">Go コンパイラのコードを読んでみよう | ebiebievidence.com</a></h3>
 <div class="outline-text-3" id="text-org0e67fa1">
 <p>
Goのコンパイラの解説。
</p>
</div>
</div>
 <div id="outline-container-org7582d28" class="outline-3">
 <h3 id="org7582d28"> <a href="#org7582d28"> <span class="todo TODO">TODO</span> </a> <a href="https://zenn.dev/ytakaya/articles/ff6321bad0cbea">Goを学ぶときに参照した学習リソースまとめ</a></h3>
 <div class="outline-text-3" id="text-org7582d28">
 <p>
面白くためになる題材の紹介。
</p>
</div>
</div>
 <div id="outline-container-org100b0c0" class="outline-3">
 <h3 id="org100b0c0"> <a href="#org100b0c0"> <span class="todo TODO">TODO</span> </a> <a href="https://zenn.dev/hsaki/articles/gospecdictionary#%E3%81%9D%E3%81%AE%E8%A8%98%E8%BF%B0%E3%81%8C%E3%81%82%E3%82%8B%E3%81%93%E3%81%A8%E3%81%A7%E4%BD%95%E3%81%8C%E5%AC%89%E3%81%97%E3%81%84%E3%81%AE%E3%81%8B%EF%BC%9F%E3%81%A8%E3%81%84%E3%81%86%E3%81%93%E3%81%A8%E3%82%92%E6%84%8F%E8%AD%98%E3%81%99%E3%82%8B">Goの言語仕様書精読のススメ & 英語彙集</a></h3>
 <div class="outline-text-3" id="text-org100b0c0">
 <p>
読み方。より深い理解のやりかた。
</p>

 <blockquote>
 <p>
GoSpecは言語仕様書であり、全ての記述には意味があるはずです。
</p>

 <p>
例えばTypesの章で導入される「全ての型にはunderlying typeがある」という概念は、一見すると「なんでこんなものを導入するんだ？？」と思うかもしれません。
</p>

 <p>
(略)
</p>

 <p>
しかし、このunderlying typeはassignability(代入可能性)を定義するために不可欠なものです(後述)。
</p>

 <p>
このように「この記述はどこで役に立つの？」という意識を持つことで、全体像の理解につながります。
</p>
</blockquote>

 <blockquote>
 <p>
某書籍に「例示は理解の試金石」という言葉があります。
</p>

 <p>
(略)
</p>

 <p>
これは本当にそうで、読んだ内容を元に「こういうコードはこの記述を元に確かにこういう挙動をする」という例が作れるかどうかで理解の深さが段違いだという実感があります。
</p>
</blockquote>
</div>
</div>
 <div id="outline-container-orgac588c3" class="outline-3">
 <h3 id="orgac588c3"> <a href="#orgac588c3"> <span class="todo TODO">TODO</span> jvm実装の続き</a></h3>
 <div class="outline-text-3" id="text-orgac588c3">
 <p>
invoke_virtualのメソッド呼び出しで詰まっていた。
</p>

 <p>
 <a href="https://github.com/rodbate/jvm-on-go/blob/eb536d93317d0ef24ae9e2f298fd08b8ad4e49f8/pkg/rtda/method_ref.go#L27-L42">https://github.com/rodbate/jvm-on-go/blob/eb536d93317d0ef24ae9e2f298fd08b8ad4e49f8/pkg/rtda/method_ref.go#L27-L42</a>
</p>

 <p>
このへんが参考になるか。関数オブジェクトをハッシュに入れておいて、検索して呼び出せばいい。
</p>
</div>
</div>
</div>
 <div id="outline-container-orgf7401ea" class="outline-2">
 <h2 id="orgf7401ea"> <a href="#orgf7401ea">Go言語へのコントリビュート準備</a></h2>
 <div class="outline-text-2" id="text-orgf7401ea">
</div>
 <div id="outline-container-org12f0c12" class="outline-3">
 <h3 id="org12f0c12"> <a href="#org12f0c12"> <span class="done DONE">DONE</span> </a> <a href="https://go.dev/doc/contribute">Contribution Guide - The Go Programming Language</a></h3>
 <div class="outline-text-3" id="text-org12f0c12">
 <p>
Goのコントリビューションガイド。
</p>
</div>
</div>
 <div id="outline-container-orgac50626" class="outline-3">
 <h3 id="orgac50626"> <a href="#orgac50626"> <span class="done DONE">DONE</span> </a> <a href="https://www.youtube.com/watch?v=DjZMKKfNVMc">justforfunc #17: contributing to the Go project - YouTube</a></h3>
 <div class="outline-text-3" id="text-orgac50626">
 <p>
Goにコントリビュートするチュートリアル。開発環境構築、Googleの規約へのサイン、変更、レビューまでの流れを全てカバーしている。わかりやすい。
</p>
</div>
</div>
 <div id="outline-container-orgf932c75" class="outline-3">
 <h3 id="orgf932c75"> <a href="#orgf932c75"> <span class="done DONE">DONE</span> リポジトリを見てどういう開発の種類があるか把握する</a></h3>
 <div class="outline-text-3" id="text-orgf932c75">
 <ul class="org-ul"> <li>388fbf287c</li>
</ul> <p>
毎日たくさんのコミットがある。どういったことをやって、より良くしているのだろうか。コードの種類、議論の進め方。ファイルを見てイチから理解していくのは難しいが、差分から少しずつ見ていけば糸口がつかめるのではないか。また、プログラミング言語の場合、ライブラリでも全然違うはずなので調べる。
</p>

 <p>
開発参加に必要な段階として、コードというより周辺知識をつければいいように見える。
</p>

 <ul class="org-ul"> <li>未使用コード削除</li>
 <li>contextオプション追加</li>
 <li>オーバーフローを防ぐためuint型へ</li>
 <li>画像変換の高速化</li>
 <li>特定の条件でvendorモードに入るのを防ぐ</li>
 <li>cmd.StdinPipe()を使ってテストのsleepヘルパーを消す</li>
 <li>特定のテスト失敗時のデバッグ情報を増やす</li>
 <li>メモリ効率の良いコードに置き換える</li>
 <li>OSごとに異なる部分の一部を修正する</li>
 <li>フレーキーテストを修正する</li>
 <li>テストのカバーしてない部分を追加する</li>
 <li>エラー時の挙動</li>
 <li>意味のない中間変数の削除</li>
 <li>エラーコードの修正</li>
 <li>エラーコードの共通化</li>
 <li>変数名の修正</li>
 <li>ドキュメントの修正</li>
 <li>Plan9での、ファイル並列アクセス</li>
 <li>バージョンによって異なる挙動部分のエラーについて、メッセージにバージョン情報を追加</li>
 <li>テストを並列にする</li>
 <li>不要になったテストの削除</li>
 <li>無限ループになってタイムアウトする問題の修正</li>
 <li>便利関数を使う(strings.Cut) 2e054128bf</li>
 <li>tarのヘッダーにファイルサイズ制限をつける 0bf7ee9977</li>
</ul> <p>
こうやって列挙してみると、多くの領域をカバーする必要はないことがわかる。取り組みやすいところや、集中的にやる領域を決めればよさそう。
</p>

 <p>
issueを見てみる。これらがうまく解ければ楽なのだが。種類。今の段階でよくわからなくても、議論を見ることは調べる取っ掛かりになりそう。何を理解することがゴールになるのか、ということだ。散漫に読むより、ある問題があることを念頭において、仕組みを知ろうとするほうが頭に入る。解くために必要だからだ。
</p>

 <ul class="org-ul"> <li>go fmtのバグ</li>
 <li>機能リクエスト</li>
 <li>フレーキーテスト</li>
</ul> <p>
メモ。
</p>
 <ul class="org-ul"> <li>経験豊富なプログラマーがどうやって問題解決しているかの生の資料になる。</li>
 <li>全体をふんわりではなく、特定のコマンドに絞って知識を深める、問題に取り組むのがよさそう</li>
</ul></div>
</div>
 <div id="outline-container-orge0e6b25" class="outline-3">
 <h3 id="orge0e6b25"> <a href="#orge0e6b25"> <span class="done DONE">DONE</span> コンパイルする</a></h3>
 <div class="outline-text-3" id="text-orge0e6b25">
 <p>
開発を開始するには、まずGo自体をコンパイルする必要がある。そうでないと、テストも実行できない。
</p>

 <p>
src/all.bash にシェルスクリプトがあり、それでコンパイルできる。実行にはgoが必要。goを使ってgoをコンパイルする。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 40: </span>コンパイルを実行する</label> <pre class="src src-shell">$ cd src  <span class="org-comment-delimiter"># </span> <span class="org-comment">カレントディレクトリがsrc下である必要がある</span>
$ ./all.bash
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgbbbf1f6" class="outline-3">
 <h3 id="orgbbbf1f6"> <a href="#orgbbbf1f6"> <span class="done DONE">DONE</span> テストを実行する</a></h3>
 <div class="outline-text-3" id="text-orgbbbf1f6">
 <p>
手元でコンパイルしてgo処理系を最新にしてない場合、↓のような状態になる。
</p>

 <ul class="org-ul"> <li>テストを実行するとパッケージ関連で失敗する</li>
 <li>実行できるテストもあるが、ソースコード(本体、テスト)への変更が全く反映されず、すべて成功する</li>
</ul> <blockquote>
 <p>
$ go test -v
package std/math/big
	arith_amd64.go:10:8: use of internal package internal/cpu not allowed
</p>
</blockquote>
</div>
</div>
 <div id="outline-container-orgddf81a1" class="outline-3">
 <h3 id="orgddf81a1"> <a href="#orgddf81a1"> <span class="done DONE">DONE</span> テストがソースコードを反映してない</a></h3>
 <div class="outline-text-3" id="text-orgddf81a1">
 <p>
いじってテストを走らせたりビルドしても反映しない。通常であれば構文レベルになるものも無視される。別のソースコードを見ているぽい。本体コードについてはワーキングディレクトリではなく、マシンにインストールしてあるgoを使っている気がするな。テストが反映しないのはよくわからない。
</p>

 <ul class="org-ul"> <li>手元ビルドした最新のgoへのパスが通っていないためだった。パスを通すと、テストを失敗させられるように</li>
 <li>どうしてテストが反映されないという結果になるのかわからない</li>
</ul></div>
</div>
</div>
 <div id="outline-container-org31dac5c" class="outline-2">
 <h2 id="org31dac5c"> <a href="#org31dac5c">Library</a></h2>
 <div class="outline-text-2" id="text-org31dac5c">
 <p>
使えそうな、参考になりそうなライブラリをまとめる。
</p>
</div>
 <div id="outline-container-org86301a4" class="outline-3">
 <h3 id="org86301a4"> <a href="#org86301a4"></a> <a href="https://cli.urfave.org/">Welcome - urfave/cli</a></h3>
 <div class="outline-text-3" id="text-org86301a4">
 <p>
cliアプリを作るライブラリ。
</p>
</div>
</div>
 <div id="outline-container-orge7dc765" class="outline-3">
 <h3 id="orge7dc765"> <a href="#orge7dc765"></a> <a href="https://github.com/jroimartin/gocui">jroimartin/gocui: Minimalist Go package aimed at creating Console User Interfaces.</a></h3>
 <div class="outline-text-3" id="text-orge7dc765">
 <p>
GoでCUIツールを作れるライブラリ。
</p>
</div>
</div>
 <div id="outline-container-org418abc8" class="outline-3">
 <h3 id="org418abc8"> <a href="#org418abc8"></a> <a href="https://github.com/jesseduffield/lazydocker">jesseduffield/lazydocker: The lazier way to manage everything docker</a></h3>
 <div class="outline-text-3" id="text-org418abc8">
 <p>
CLIで <a href="20210805005543-docker.html#ID-1658782a-d331-464b-9fd7-1f8233b8b7f8">Docker</a>の状態を閲覧できるライブラリ。
</p>
</div>
</div>
</div>
 <div id="outline-container-org580a04c" class="outline-2">
 <h2 id="org580a04c"> <a href="#org580a04c">Reference</a></h2>
 <div class="outline-text-2" id="text-org580a04c">
</div>
 <div id="outline-container-orge49cb59" class="outline-3">
 <h3 id="orge49cb59"> <a href="#orge49cb59"></a> <a href="https://qiita.com/hgsgtk/items/363c02064d25e73b03a4">[Go] constant x.x truncated to integerはなぜおきるのか #Go - Qiita</a></h3>
 <div class="outline-text-3" id="text-orge49cb59">
 <p>
小数まわりの解説。
</p>
</div>
</div>
 <div id="outline-container-org1f4f79a" class="outline-3">
 <h3 id="org1f4f79a"> <a href="#org1f4f79a"></a> <a href="https://christina04.hatenablog.com/entry/go-cli-interface">GoのCLIで標準入力とファイル読み込みの両方に対応する - Carpe Diem</a></h3>
 <div class="outline-text-3" id="text-org1f4f79a">
 <p>
Unixライクなインターフェースにするメリット・やり方。
</p>
</div>
</div>
 <div id="outline-container-orgc5a4554" class="outline-3">
 <h3 id="orgc5a4554"> <a href="#orgc5a4554"></a> <a href="https://zenn.dev/foxtail88/books/a5e3c432340c28">Go言語: path/filepathとの良いお付き合い</a></h3>
 <div class="outline-text-3" id="text-orgc5a4554">
 <p>
filepathの本。
</p>
</div>
</div>
 <div id="outline-container-orgd87c265" class="outline-3">
 <h3 id="orgd87c265"> <a href="#orgd87c265"></a> <a href="https://github.com/vbd/Fieldnotes/blob/main/golang.md">Fieldnotes/golang.md at main · vbd/Fieldnotes</a></h3>
 <div class="outline-text-3" id="text-orgd87c265">
 <p>
Goの読み物リスト。
</p>
</div>
</div>
 <div id="outline-container-org972b8fa" class="outline-3">
 <h3 id="org972b8fa"> <a href="#org972b8fa"></a> <a href="https://www.libhunt.com/l/go">Go Open-Source Projects</a></h3>
 <div class="outline-text-3" id="text-org972b8fa">
 <p>
Goのリポジトリトレンド。
</p>
</div>
</div>
 <div id="outline-container-org99dc9b0" class="outline-3">
 <h3 id="org99dc9b0"> <a href="#org99dc9b0"></a> <a href="https://go.dev/talks/2014/names.slide#1">What’s in a name?</a></h3>
 <div class="outline-text-3" id="text-org99dc9b0">
 <p>
Goの名前に関する解説。よく言われることがだが、標準ライブラリが参考になると書いてある。
</p>
</div>
</div>
 <div id="outline-container-org0c02d8f" class="outline-3">
 <h3 id="org0c02d8f"> <a href="#org0c02d8f"></a> <a href="https://dave.cheney.net/2014/12/01/five-suggestions-for-setting-up-a-go-project">Five suggestions for setting up a Go project | Dave Cheney</a></h3>
 <div class="outline-text-3" id="text-org0c02d8f">
 <p>
Goのパッケージ構成や名前などの解説。実際のリポジトリを上げていてわかりやすい。
</p>
</div>
</div>
 <div id="outline-container-orgf35a44f" class="outline-3">
 <h3 id="orgf35a44f"> <a href="#orgf35a44f"></a> <a href="https://techbookfest.org/product/9a3U54LBdKDE30ewPS6Ugn?productVariantID=itEzQN5gKZX8gXMmLTEXAB">Go言語で構築するクリーンアーキテクチャ設計：コードカキタイ</a></h3>
 <div class="outline-text-3" id="text-orgf35a44f">
 <p>
クリーンアーキテクチャの本。
</p>
</div>
</div>
 <div id="outline-container-orgd7ac9d4" class="outline-3">
 <h3 id="orgd7ac9d4"> <a href="#orgd7ac9d4"></a> <a href="https://github.com/gin-gonic/gin/issues/1363">how do i get response body in after router middleware? · Issue #1363 · gin-gonic/gin</a></h3>
 <div class="outline-text-3" id="text-orgd7ac9d4">
 <p>
ミドルウェアで返したレスポンスを取得する方法。
</p>
</div>
</div>
 <div id="outline-container-org1b73f39" class="outline-3">
 <h3 id="org1b73f39"> <a href="#org1b73f39"></a> <a href="https://zenn.dev/tchssk/articles/495b49d7adaa8d">Go の HTTP サーバーで Swagger UI を提供する</a></h3>
 <div class="outline-text-3" id="text-org1b73f39">
 <p>
サーバ自体でAPIドキュメントを提供する方法。
</p>
</div>
</div>
 <div id="outline-container-orgce56985" class="outline-3">
 <h3 id="orgce56985"> <a href="#orgce56985"></a> <a href="https://pkg.go.dev/github.com/getkin/kin-openapi@v0.97.0/openapi3filter#example-Validator">openapi3filter package - github.com/getkin/kin-openapi/openapi3filter - Go Packages</a></h3>
 <div class="outline-text-3" id="text-orgce56985">
 <p>
openapi3filterの例。
</p>
</div>
</div>
 <div id="outline-container-org660a4ab" class="outline-3">
 <h3 id="org660a4ab"> <a href="#org660a4ab"></a> <a href="https://www.wantedly.com/companies/company_6435340/post_articles/364864">Goによるサービス開発6年のしくじり - Go Conference 2021 Autumn Sponsor Session | ミイダス株式会社</a></h3>
 <div class="outline-text-3" id="text-org660a4ab">
 <p>
メモ。
</p>
</div>
</div>
 <div id="outline-container-org7ffe57d" class="outline-3">
 <h3 id="org7ffe57d"> <a href="#org7ffe57d"></a> <a href="https://zenn.dev/jy8752/books/73769005e6afa9">古典学派的テストとGoで考える持続可能なアーキテクチャ入門</a></h3>
 <div class="outline-text-3" id="text-org7ffe57d">
 <p>
モックを極力しない流儀の、古典学派のテスト本。
</p>
</div>
</div>
 <div id="outline-container-org7364eaa" class="outline-3">
 <h3 id="org7364eaa"> <a href="#org7364eaa"></a> <a href="https://go.dev/talks/2015/how-go-was-made.slide#1">How Go was made</a></h3>
 <div class="outline-text-3" id="text-org7364eaa">
 <p>
Goの歴史。
</p>
</div>
</div>
 <div id="outline-container-orgfd6dc08" class="outline-3">
 <h3 id="orgfd6dc08"> <a href="#orgfd6dc08"></a> <a href="https://qiita.com/Jxck/items/8717a5982547cfa54ebc">Go の Test に対する考え方 #Go - Qiita</a></h3>
 <div class="outline-text-3" id="text-orgfd6dc08">
 <p>
理由が書かれている。
</p>
</div>
</div>
 <div id="outline-container-orgff08e9d" class="outline-3">
 <h3 id="orgff08e9d"> <a href="#orgff08e9d"></a> <a href="https://research.swtch.com/telemetry-intro">research!rsc: Transparent Telemetry for Open-Source Projects (Transparent Telemetry, Part 1)</a></h3>
 <div class="outline-text-3" id="text-orgff08e9d">
 <p>
MacOSでの Go1.14のコンパイルにX Codeが必要なのは意図的でなかった。しばらくの間、誰もそれをバグとして気づかなかった。
</p>
</div>
</div>
 <div id="outline-container-org43e729c" class="outline-3">
 <h3 id="org43e729c"> <a href="#org43e729c"></a> <a href="https://zenn.dev/keishi_lcc/articles/c40fcb9d2c589d">Golang(echo)のAPIをrenderでデプロイする方法</a></h3>
 <div class="outline-text-3" id="text-org43e729c">
 <p>
タダのバックエンドサーバ。
</p>
</div>
</div>
 <div id="outline-container-org9beee36" class="outline-3">
 <h3 id="org9beee36"> <a href="#org9beee36"></a> <a href="https://zenn.dev/kou_pg_0131/articles/goreleaser-usage">GoReleaser で Go 製 CLI のリリースを自動化＆ Homebrew でインストールできるようにする</a></h3>
 <div class="outline-text-3" id="text-org9beee36">
 <p>
goreleaserの使い方。
</p>
</div>
</div>
 <div id="outline-container-orga5d7d4e" class="outline-3">
 <h3 id="orga5d7d4e"> <a href="#orga5d7d4e"></a> <a href="https://astaxie.gitbooks.io/build-web-application-with-golang/content/ja/11.2.html">GDBを使用したデバッグ · Build web application with Golang</a></h3>
 <div class="outline-text-3" id="text-orga5d7d4e">
 <p>
デバッグ方法の解説。
</p>
</div>
</div>
 <div id="outline-container-org5d08b22" class="outline-3">
 <h3 id="org5d08b22"> <a href="#org5d08b22"></a> <a href="https://go.dev/blog/comparable">All your comparable types - The Go Programming Language</a></h3>
 <div class="outline-text-3" id="text-org5d08b22">
 <p>
1.20の変更。比較可能な型。
</p>
</div>
</div>
 <div id="outline-container-orgc743d42" class="outline-3">
 <h3 id="orgc743d42"> <a href="#orgc743d42"></a> <a href="https://go.dev/doc/toolchain">Go Toolchains - The Go Programming Language</a></h3>
 <div class="outline-text-3" id="text-orgc743d42">
 <p>
Goツールチェイン。
</p>
</div>
</div>
 <div id="outline-container-org703b3cf" class="outline-3">
 <h3 id="org703b3cf"> <a href="#org703b3cf"></a> <a href="https://github.com/golang/go/issues/57001">extended forwards compatibility for Go · Issue #57001 · golang/go</a></h3>
 <div class="outline-text-3" id="text-org703b3cf">
 <p>
go.modで指定するバージョンでは、Goツールチェーンを指定するわけではない。それを変えようという提案。
</p>
</div>
</div>
 <div id="outline-container-org8d366f6" class="outline-3">
 <h3 id="org8d366f6"> <a href="#org8d366f6"></a> <a href="https://github.com/golang/go/issues/60686">cmd/go: “loadPackageData called with empty package path” build panic · Issue #60686 · golang/go</a></h3>
 <div class="outline-text-3" id="text-org8d366f6">
 <p>
比較的わかりやすい、小さなバグ。
</p>
</div>
</div>
 <div id="outline-container-org77f316f" class="outline-3">
 <h3 id="org77f316f"> <a href="#org77f316f"></a> <a href="https://github.com/golang/go/issues/21835">proposal: use PCG Source in math/rand for Go 2 · Issue #21835 · golang/go</a></h3>
 <div class="outline-text-3" id="text-org77f316f">
 <p>
randの実装を効率が良いものに変える提案。
</p>
</div>
</div>
 <div id="outline-container-org17ff26c" class="outline-3">
 <h3 id="org17ff26c"> <a href="#org17ff26c"></a> <a href="https://github.com/hashicorp/go-plugin">hashicorp/go-plugin: Golang plugin system over RPC.</a></h3>
 <div class="outline-text-3" id="text-org17ff26c">
 <p>
go pluginの例。
</p>
</div>
</div>
 <div id="outline-container-org9f68464" class="outline-3">
 <h3 id="org9f68464"> <a href="#org9f68464"></a> <a href="https://go-review.googlesource.com/c/go/+/101457">doc: remove non-prime from list of primes in spec (101457) · Gerrit Code Review</a></h3>
 <div class="outline-text-3" id="text-org9f68464">
 <p>
素数に9が含まれているのはタイポではなく、そういうジョークとのこと。
</p>
</div>
</div>
 <div id="outline-container-org4e9251d" class="outline-3">
 <h3 id="org4e9251d"> <a href="#org4e9251d"></a> <a href="https://appliedgo.net/">Applied Go · Applied Go</a></h3>
 <div class="outline-text-3" id="text-org4e9251d">
 <p>
高品質なGoのチュートリアル。
</p>
</div>
</div>
 <div id="outline-container-org56871fa" class="outline-3">
 <h3 id="org56871fa"> <a href="#org56871fa"></a> <a href="https://go.dev/talks/2015/simplicity-is-complicated.slide#1">Simplicity is Complicated</a></h3>
 <div class="outline-text-3" id="text-org56871fa">
 <p>
ロブ・パイクによるGoのスライド。
</p>
</div>
</div>
 <div id="outline-container-org4554f8a" class="outline-3">
 <h3 id="org4554f8a"> <a href="#org4554f8a"></a> <a href="https://speakerdeck.com/retervision/go-runtime-scheduler">Go Runtime Scheduler - Speaker Deck</a></h3>
 <div class="outline-text-3" id="text-org4554f8a">
 <p>
Goのスケジューラを実装する。
</p>
</div>
</div>
 <div id="outline-container-org58f36f9" class="outline-3">
 <h3 id="org58f36f9"> <a href="#org58f36f9"></a> <a href="https://zenn.dev/tmk616/articles/383fc3fbb0ec4b">【Go】go getは不要？go installとは？</a></h3>
 <div class="outline-text-3" id="text-org58f36f9">
 <p>
わかりやすい説明。
</p>

 <ul class="org-ul"> <li>go get はgo.modに変更を加える</li>
 <li>go install はバイナリをインストールする</li>
</ul></div>
</div>
 <div id="outline-container-orgf2dd4b6" class="outline-3">
 <h3 id="orgf2dd4b6"> <a href="#orgf2dd4b6"></a> <a href="https://qiita.com/sueken/items/30b6da9259e94c1ede71">golangのio.Readerは使い回しできない - Qiita</a></h3>
 <div class="outline-text-3" id="text-orgf2dd4b6">
 <p>
知らなかったな。
</p>
</div>
</div>
 <div id="outline-container-org9a00bac" class="outline-3">
 <h3 id="org9a00bac"> <a href="#org9a00bac"></a> <a href="https://engineering.mercari.com/blog/entry/2018-08-08-080000/">Go Fridayこぼれ話：非公開（unexported）な機能を使ったテスト #golang | メルカリエンジニアリング</a></h3>
 <div class="outline-text-3" id="text-org9a00bac">
 <ul class="org-ul"> <li>プロダクトコードとテストは別パッケージしたほうがいい
 <ul class="org-ul"> <li>はじめてのユーザになり、インターフェースや公開の状態を考えられるから</li>
</ul></li>
 <li>非公開な関数や変数をテストしたときは、テスト用にエクスポートすればいい</li>
</ul></div>
</div>
 <div id="outline-container-org84e835c" class="outline-3">
 <h3 id="org84e835c"> <a href="#org84e835c"></a> <a href="https://go.dev/blog/survey2022-q2-results">Go Developer Survey 2022 Q2 Results - The Go Programming Language</a></h3>
 <div class="outline-text-3" id="text-org84e835c">
 <p>
サーベイ結果。
</p>
</div>
</div>
 <div id="outline-container-org5aadcae" class="outline-3">
 <h3 id="org5aadcae"> <a href="#org5aadcae"></a> <a href="https://go.googlesource.com/proposal/+/master/design">design - proposal - Git at Google</a></h3>
 <div class="outline-text-3" id="text-org5aadcae">
 <p>
proposal一覧。
</p>
</div>
</div>
 <div id="outline-container-org700834a" class="outline-3">
 <h3 id="org700834a"> <a href="#org700834a"></a> <a href="https://github.com/golang/proposal#proposal-review">golang/proposal: Go Project Design Documents</a></h3>
 <div class="outline-text-3" id="text-org700834a">
 <p>
Go言語のproposal。
</p>
</div>
</div>
 <div id="outline-container-orgd466078" class="outline-3">
 <h3 id="orgd466078"> <a href="#orgd466078"></a> <a href="https://zenn.dev/tenntenn/books/d168faebb1a739/viewer/22e4d4">はじめに｜逆引き Goによる静的解析</a></h3>
 <div class="outline-text-3" id="text-orgd466078">
 <p>
Goで静的解析をする入門本。
</p>
</div>
</div>
 <div id="outline-container-org3cd3c37" class="outline-3">
 <h3 id="org3cd3c37"> <a href="#org3cd3c37"></a> <a href="https://yuroyoro.github.io/goast-viewer/">yuroyoro.github.io/goast-viewer/</a></h3>
 <div class="outline-text-3" id="text-org3cd3c37">
 <p>
GoのASTビューワー。
</p>
</div>
</div>
 <div id="outline-container-orgf2bb7d2" class="outline-3">
 <h3 id="orgf2bb7d2"> <a href="#orgf2bb7d2"></a> <a href="https://divan.dev/posts/visual_programming_go/">Rethinking Visual Programming with Go · divan’s blog</a></h3>
 <div class="outline-text-3" id="text-orgf2bb7d2">
 <p>
ソースコードの呼び出し関係をグラフィカルに表示する。
</p>
</div>
</div>
 <div id="outline-container-orgc73220a" class="outline-3">
 <h3 id="orgc73220a"> <a href="#orgc73220a"></a> <a href="https://www.onlinetool.io/xmltogo/">XML to Go</a></h3>
 <div class="outline-text-3" id="text-orgc73220a">
 <p>
XMLからGoの構造体に変換するツール。
</p>
</div>
</div>
 <div id="outline-container-org85132fe" class="outline-3">
 <h3 id="org85132fe"> <a href="#org85132fe"></a> <a href="https://www.campoy.cat/">Francesc Campoy Flores</a></h3>
 <div class="outline-text-3" id="text-org85132fe">
 <p>
Goプログラマー、Youtuber。チャンネルは更新止まってるぽい。
</p>
</div>
</div>
 <div id="outline-container-org762e56f" class="outline-3">
 <h3 id="org762e56f"> <a href="#org762e56f"></a> <a href="https://go.dev/blog/">The Go Blog - The Go Programming Language</a></h3>
 <div class="outline-text-3" id="text-org762e56f">
 <p>
Goの公式ブログ。
</p>
</div>
</div>
 <div id="outline-container-orga7a2355" class="outline-3">
 <h3 id="orga7a2355"> <a href="#orga7a2355"></a> <a href="https://go.dev/doc/">Documentation - The Go Programming Language</a></h3>
 <div class="outline-text-3" id="text-orga7a2355">
 <p>
公式ドキュメント。
</p>
</div>
</div>
 <div id="outline-container-orgb2bca84" class="outline-3">
 <h3 id="orgb2bca84"> <a href="#orgb2bca84"></a> <a href="https://github.com/golang/go/issues/54968">debug/buildinfo: timeout in Read · Issue #54968 · golang/go</a></h3>
 <div class="outline-text-3" id="text-orgb2bca84">
 <p>
参考になるissue。バグ報告のうまいやり方。playgroundを使う。タイムアウトになるバグの原因。
</p>
</div>
</div>
 <div id="outline-container-orgd4e15cf" class="outline-3">
 <h3 id="orgd4e15cf"> <a href="#orgd4e15cf"></a> <a href="https://unknownplace.org/archives/golang-editing-with-emacs/">EmacsでのGo言語編集環境 - unknownplace.org</a></h3>
 <div class="outline-text-3" id="text-orgd4e15cf">
 <p>
 <a href="20210508234743-emacs.html#ID-1ad8c3d5-97ba-4905-be11-e6f2626127ad">Emacs</a>のgo-modeでのフォーマット、定義ジャンプ、便利なさまざまな機能。
</p>

 <ul class="org-ul"> <li>C-c C-a でimportを追加できる</li>
</ul></div>
</div>
 <div id="outline-container-org1eb8e0a" class="outline-3">
 <h3 id="org1eb8e0a"> <a href="#org1eb8e0a"></a> <a href="https://zenn.dev/hsaki/books/golang-concurrency/viewer/goelement">ゴールーチンとチャネル｜Goでの並行処理を徹底解剖！</a></h3>
 <div class="outline-text-3" id="text-org1eb8e0a">
 <p>
Goルーチンの解説。
</p>
</div>
</div>
 <div id="outline-container-org95538a9" class="outline-3">
 <h3 id="org95538a9"> <a href="#org95538a9"></a> <a href="https://qiita.com/Yaruki00/items/7edc04720a24e71abfa2">Goでflagを使ってコマンドライン引数を扱う - Qiita</a></h3>
 <div class="outline-text-3" id="text-org95538a9">
 <p>
手軽に使える。
</p>
</div>
</div>
 <div id="outline-container-org5895910" class="outline-3">
 <h3 id="org5895910"> <a href="#org5895910"></a> <a href="https://ebiten.org/">Ebitengine - A dead simple 2D game library for Go</a></h3>
 <div class="outline-text-3" id="text-org5895910">
 <p>
Goのゲームライブラリ。
</p>
</div>
</div>
 <div id="outline-container-orgbc94cbb" class="outline-3">
 <h3 id="orgbc94cbb"> <a href="#orgbc94cbb"></a> <a href="https://www.techscore.com/tech/Go/Lang/Basic15/">15. スライスのハマりどころ | TECHSCORE(テックスコア)</a></h3>
 <div class="outline-text-3" id="text-orgbc94cbb">
 <p>
スライスの詳しい解説。
</p>

 <p>
キャパシティは参照するメモリ配列の範囲。
</p>
</div>
</div>
</div>
 <div id="outline-container-orged5a6f6" class="outline-2">
 <h2 id="orged5a6f6"> <a href="#orged5a6f6">Archives</a></h2>
 <div class="outline-text-2" id="text-orged5a6f6">
</div>
 <div id="outline-container-orgf613cdd" class="outline-3">
 <h3 id="orgf613cdd"> <a href="#orgf613cdd"> <span class="done DONE">DONE</span> </a> <a href="https://tatsu-zine.com/books/go-five-recipes">Go言語を楽しむ5つのレシピ コタツと蜜柑とゴーファーとわたし【委託】 - 達人出版会</a></h3>
 <div class="outline-text-3" id="text-orgf613cdd">
 <p>
画像処理やWebAssemblyなど。
</p>

 <p>
ざっと読んだだけ。コードの中は読んでないので必要になったら確認する。
</p>
</div>
</div>
 <div id="outline-container-org54c74b8" class="outline-3">
 <h3 id="org54c74b8"> <a href="#org54c74b8"> <span class="done DONE">DONE</span> </a> <a href="https://go-tour-jp.appspot.com/list">A Tour of Go</a></h3>
 <div class="outline-text-3" id="text-org54c74b8">
 <p>
最初のチュートリアル。
</p>
</div>
</div>
 <div id="outline-container-org135433d" class="outline-3">
 <h3 id="org135433d"> <a href="#org135433d"> <span class="done DONE">DONE</span> </a> <a href="https://dev.classmethod.jp/articles/list-containers-by-docker-sdk-go/">Docker Engine SDKでコンテナ一覧を取得する | DevelopersIO</a></h3>
 <div class="outline-text-3" id="text-org135433d">
 <p>
小さなコマンドラインツールの例。
</p>
</div>
</div>
 <div id="outline-container-orgbe83a00" class="outline-3">
 <h3 id="orgbe83a00"> <a href="#orgbe83a00"> <span class="done DONE">DONE</span> </a> <a href="https://haibara-works.hatenablog.com/entry/2020/12/05/235227">GoでDockerを操る [Docker Engine SDK] - はいばらのブログ</a></h3>
 <div class="outline-text-3" id="text-orgbe83a00">
 <p>
goとdockerの解説。
</p>
</div>
</div>
 <div id="outline-container-org0396f5a" class="outline-3">
 <h3 id="org0396f5a"> <a href="#org0396f5a"> <span class="done DONE">DONE</span> </a> <a href="https://zenn.dev/kenny/articles/b9dd668bf09efe">Goで作成したAPIをDockerで動かす</a></h3>
 <div class="outline-text-3" id="text-org0396f5a">
 <p>
APIのサンプルコード。
</p>
</div>
</div>
 <div id="outline-container-orgb599c14" class="outline-3">
 <h3 id="orgb599c14"> <a href="#orgb599c14"> <span class="done DONE">DONE</span> </a> <a href="https://www.amazon.co.jp/%E6%94%B9%E8%A8%822%E7%89%88-%E5%9F%BA%E7%A4%8E%E3%81%8B%E3%82%89%E3%82%8F%E3%81%8B%E3%82%8B-Go%E8%A8%80%E8%AA%9E-%E5%8F%A4%E5%B7%9D%E6%98%87-ebook/dp/B06WP6S2QT/ref=sr_1_1?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&crid=1GPYX46MK3OK&keywords=%E5%9F%BA%E7%A4%8E%E3%81%8B%E3%82%89%E3%82%8F%E3%81%8B%E3%82%8B+go%E8%A8%80%E8%AA%9E&qid=1663028634&sprefix=%E5%9F%BA%E7%A4%8E%E3%81%8B%E3%82%89%E3%82%8F%E3%81%8B%E3%82%8Bgo%E8%A8%80%E8%AA%9E%2Caps%2C2056&sr=8-1">改訂2版 基礎からわかる Go言語 | 古川昇 | 工学 | Kindleストア | Amazon</a></h3>
 <div class="outline-text-3" id="text-orgb599c14">
 <ul class="org-ul"> <li>117, 133, 141, 155</li>
</ul> <p>
Go言語の入門本。
</p>

 <ul class="org-ul"> <li>Goでは、最初の文字が大文字で始まる名前は、外部のパッケージから参照できるエクスポートされた名前。例えばPiはmathパッケージでエクスポートされる</li>
</ul> <div class="org-src-container">
 <pre class="src src-go">package main
import (
        "fmt"
        "math"
)
func main() {
        fmt.println(Math.pi)
}
</pre>
</div>

 <ul class="org-ul"> <li>変数が存在するメモリ上の位置を「アドレス」といい、そのアドレスを格納可能な変数を「ポインタ」という</li>
 <li> <code>int</code> 型変数のアドレスを格納できるポインタの型は  <code>*int</code> 型というように、アスタリスクをつける</li>
</ul> <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 41: </span>ポインタ</label> <pre class="src src-go">var ptr *int
var i int = 12345
ptr = &i

fmt.Println("iのアドレス:", &i)
fmt.Println("ptrの値(変数iのアドレス):", ptr)

fmt.Println("iの値:", i)
fmt.Println("ポインタ経由のiの値:", *ptr)

*ptr = 999
fmt.Println("ポインタ経由で変更したiの値:", i)
</pre>
</div>

 <div class="results" id="orgf6d1d07">
 <p>
iのアドレス: 0xc0000b6010
ptrの値(変数iのアドレス): 0xc0000b6010
iの値: 12345
ポインタ経由のiの値: 12345
ポインタ経由で変更したiの値: 999
</p>

</div>

 <div class="org-src-container">
 <pre class="src src-go">func main() {
        a, b := 1, 1

        double(a, &b)
        fmt.Println("値渡し:", a)
        fmt.Println("ポインタ渡し:", b)
}

func double(x int, y *int) {
        x = x * 2
        *y = *y * 2
}
</pre>
</div>

 <div class="results" id="org55120a3">
 <p>
値渡し: 1
ポインタ渡し: 2
</p>

</div>

 <p>
関数リテラル。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 42: </span>関数リテラル = 無名関数</label> <pre class="src src-go">func main() {
        val := 123

        // 関数リテラルの記述と呼び出しを同時に行う
        func(i int) {
                // 関数リテラル外の変数valにアクセス可能
                fmt.Println(i * val)
        }(10)

        // 関数リテラルを変数に代入
        f := func(s string) {
                fmt.Println(s)
        }

        f("hoge")
}
</pre>
</div>

 <div class="results" id="org966ce30">
 <p>
1230
hoge
</p>

</div>

 <p>
関数型。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 43: </span>代入して呼び出す</label> <pre class="src src-go">func main() {
        // 関数型の変数宣言
        var f func(int, int) int

        // 関数リテラルの値を代入
        f = func(a int, b int) int {
                return a + b
        }

        // 関数型の変数経由で関数を呼び出す
        fmt.Println(f(1, 2))


        // 関数型の変数に値を代入
        f = multiply

        // 関数型の変数経由で関数を呼び出す
        fmt.Println(f(1, 2))
}

func multiply(x int, y int) int {
        return x * y
}
</pre>
</div>

 <div class="results" id="org55d72d7">
 <p>
3
2
</p>

</div>

 <p>
メソッドの宣言。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 44: </span>型に実装する</label> <pre class="src src-go">type myType int

// myType型をレシーバに持つ関数、すなわちmyType型のメソッドを宣言。レシーバは一番最初に書く
func (value myType) println() {
        fmt.Println(value)
}

func main() {
        // myType型の変数を宣言する
        var z myType = 1234

        // myType型のメソッドを呼び出す
        z.println()
}
</pre>
</div>

 <div class="results" id="orgc4eb3e3">
 <p>
1234
</p>

</div>

 <p>
メソッドのレシーバをポインタにする。
</p>

 <div class="org-src-container">
 <pre class="src src-go">// int型
type myType int

func (value myType) setByValue(newValue myType) {
        // ここで値を代入しても無意味。Valueはコピーされるので
        value = newValue
}

func(value *myType) setByPointer(newValue myType) {
        // 代入した値が反映される
        *value = newValue
}
func main() {
        var x myType = 0

        // レシーバは値。値は変更できない
        x.setByValue(1)
        fmt.Println("値: 0 ->", x)

        // レシーバはポインタ。値は変更できる
        x.setByPointer(2)
        fmt.Println("ポインタ: 0 ->", x)
}

</pre>
</div>

 <div class="results" id="orge468a86">
 <p>
値: 0 -> 0
ポインタ: 0 -> 2
</p>

</div>

 <p>
構造体型に名前をつける。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 45: </span>構造体にMyDataという新しい型名を与える</label> <pre class="src src-go">type MyData struct {
      s string
      b byte
}
</pre>
</div>

 <div class="results" id="org64a57b9">

</div>

 <ul class="org-ul"> <li>メソッドの宣言には値レシーバ、ポインタレシーバの2つがある。混在させるべきではない
 <ul class="org-ul"> <li>変数レシーバではメソッドの操作は元の変数のコピーを操作する</li>
 <li>ポインタレシーバでは、ポインタを使うので元の変数を変更できる</li>
</ul></li>
 <li>ポインタレシーバを使う2つの理由
 <ul class="org-ul"> <li>メソッドがレシーバが指す先の変数を変更するため</li>
 <li>メソッドの呼び出しごとに変数のコピーを避けるため</li>
</ul></li>
</ul> <p>
匿名フィールド。匿名フィールドが持つフィールドとメソッドが、埋め込み先の構造体型にも実装されているかのように扱われる。Go言語には型の実装はないが、構造体に他の型を埋め込むことで継承似たようなことを実現できる。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 46: </span>埋め込み</label> <pre class="src src-go">// 埋め込まれる型の構造体
type embedded struct {
        i int
}

// embedded型のメソッド
func (x embedded) doSomething() {
        fmt.Println("test.doSomething()")
}

// 埋め込み先の構造体
type test struct {
        embedded // embedded型の埋め込み
}

func main() {
        var x test

        // embedded型に実装されているメソッドに、test型の値でアクセス
        x.doSomething()

        // embedded型のフィールドに、test型の値でアクセス
        fmt.Println(x.i)
}
</pre>
</div>

 <div class="results" id="org957322b">
 <p>
test.doSomething()
0
</p>

</div>

 <p>
構造体の初期化。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 47: </span>2つの方法がある</label> <pre class="src src-go">type Person struct {
        name string
        age int
}

func main() {
        // 構造体リテラルを使用せず、フィールドを個別に初期化
        var p1 Person
        p1.name = "Jhon"
        p1.age = 23

        // 構造体リテラルで初期化
        p2 := Person{age: 31, name: "Tom"}
        p3 := Person{"Jane", 42}
        p4 := &Person{"Mike", 36}
        fmt.Println(p1, p2, p3, p4)
}
</pre>
</div>

 <div class="results" id="org6b8b678">
 <p>
{Jhon 23} {Tom 31} {Jane 42} &{Mike 36}
</p>

</div>

 <p>
埋め込みを行った構造体を構造体リテラルで初期化する。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 48: </span>埋め込み</label> <pre class="src src-go">type Person struct {
        name string
        age int
}

type Employee struct {
        id int
        Person // 埋め込み
}

func main() {
        e := Employee{1, Person{"jack", 28}}
        fmt.Println(e)
}
</pre>
</div>

 <div class="results" id="orgcafa145">
 <p>
{1 {jack 28}}
</p>

</div>

 <p>
Go言語のインターフェースの役割は「振る舞い」を規定すること。Go言語のインターフェースは「インターフェース」と「それを実装した型」との関係性を明示的に記述する必要がない。インターフェースに定義されている関数をメソッドとして実装している型は、自動的にそのインターフェースを実装していることになる。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 49: </span>インターフェースと型は自動で関連付けられる</label> <pre class="src src-go">type Calculator interface {
        // 関数の定義
        Calculate(a int, b int) int
}

type Add struct {
        // フィールドは持たない
}

// Add型にCalculatorインターフェースのCalculator関数を実装
func (x Add) Calculate(a int, b int) int {
        return a + b
}

type Sub struct { }

func (x Sub) Calculate(a int, b int) int {
        return a - b
}

func main() {
        var add Add
        var sub Sub

        var cal Calculator // interface

        cal = add // interfaceを満たす関数を持っているので、自動的にインターフェースを実装していることになり、代入できる
        fmt.Println("和:", cal.Calculate(1, 2))

        cal = sub
        fmt.Println("差:", cal.Calculate(1, 2))
}
</pre>
</div>

 <div class="results" id="org24024f9">
 <p>
和: 3
差: -1
</p>

</div>

 <p>
空インターフェース。関数を持たない空のインターフェース。定義関数をすべて実装している型はインターフェースを実装したことになるので、すべての型は空インターフェースを実装していることになる。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 50: </span>空インターフェース。どんな値でも代入できる。_ は未使用エラーを防ぐため</label> <pre class="src src-go">var empty interface {}

empty = "abc"
empty = 12345
empty = 3.14

_ = empty
</pre>
</div>

 <div class="results" id="org08972e9">

</div>

 <p>
関数を1つしか持たないインターフェースの場合、そのインターフェース名は「関数名+er」とするのが慣わし。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 51: </span>関数名がReadであれば、インターフェース名はReader</label> <pre class="src src-go">type Reader interface {
        Read(p []byte) (n int, err error)
}
</pre>
</div>

 <p>
型アサーションはインターフェース型の値を他の型へ変換するとき、または変換できるか確認するときに使う。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 52: </span>型アサーション</label> <pre class="src src-go">func main() {
        // 空インターフェースにstring型の値を格納
        var i interface{} = "test"
        // 型アサーションを使いstring型へ
        var s string = i.(string) // 型アサーション
        fmt.Printf("i: %T\n", i)
        fmt.Printf("s: %T\n", s)
}
</pre>
</div>

 <div class="results" id="org4f37be4">
 <p>
i: string
s: string
</p>

</div>

 <p>
型アサーション失敗時にランタイムパニックを発生させない。チェックに使う。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 53: </span>型アサーションから2番目の値を受け取るときは、変換できなくてもランタイムパニックは起きない</label> <pre class="src src-go">func main() {
        // 空インターフェースにstring型の値を格納
        var i interface{} = "test"

        // 型アサーションに成功する例
        s1, ok := i.(string)
        fmt.Println(s1, ok)

        // 型アサーションに失敗する例
        // string型はdummyメソッドを持たないので変換できない
        s2, ok := i.(interface {
                dummy()
        })
        fmt.Println(s2, ok)
}
</pre>
</div>

 <div class="results" id="orgaf5400d">
 <p>
test true
<nil> false
</p>

</div>

 <p>
型switch文。通常のswitch文とは異なる。式switchが値によって分岐するのに対し、型switch文は値が持つ型によって分岐する。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 54: </span>型switch</label> <pre class="src src-go">func main() {
        showType(nil)
        showType(12345)
        showType("abcdef")
        showType(3.14)
}

func showType(x interface{}) {
        switch x.(type) {

        case nil:
                fmt.Println("nil")

        case int, int32, int64:
                fmt.Println("整数")

        case string:
                fmt.Println("文字列")

        default:
                fmt.Println("不明")
        }
}
</pre>
</div>

 <div class="results" id="org219883d">
 <p>
nil
整数
文字列
不明
</p>

</div>

 <p>
配列アクセス。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 55: </span>配列にアクセスする</label> <pre class="src src-go">func main() {
        var date [7]string

        date[0] = "日曜日"
        date[1] = "月曜日"
        date[2] = "火曜日"
        date[3] = "水曜日"
        date[4] = "木曜日"
        date[5] = "金曜日"
        date[6] = "土曜日"

        // indexバージョン
        for i := 0; i < len(date); i++ {
                fmt.Print(date[i], " ")
        }

        // rangeバージョン
        // 改行
        fmt.Println()

        for _, value := range date {
                fmt.Print(value, " ")
        }

        fmt.Println()
}
</pre>
</div>

 <div class="results" id="orgdb61df4">
 <p>
日曜日 月曜日 火曜日 水曜日 木曜日 金曜日 土曜日
日曜日 月曜日 火曜日 水曜日 木曜日 金曜日 土曜日
</p>

</div>

 <ul class="org-ul"> <li>スライス → 可変長</li>
 <li>配列 → 非可変長</li>
</ul> <p>
スライス式。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 56: </span>スライスにアクセスする</label> <pre class="src src-go">func main() {
        // 配列を宣言
        x := [5]string{"a", "b", "c", "d", "e"}
        // スライス型の変数を宣言
        var s1 []string

        // 配列全体をスライス
        s1 = x[:]
        fmt.Println(s1)

        // インデックス1~3までをスライス
        s2 := x[1:4]
        fmt.Println(s2)

        // インデックス3~をスライス
        s3 := x[3:]
        fmt.Println(s3)

        // インデックス1~3をスライス
        s4 := x[:4]
        fmt.Println(s4)
}
</pre>
</div>

 <div class="results" id="org2d12703">
 <p>
[a b c d e]
[b c d]
[d e]
[a b c d]
</p>

</div>

 <p>
スライスは「参照型」の1つ。Go言語にはスライス、マップ、チャネルという3つの参照型がある。データの実体を持たず、データへの参照情報しか持たない。
</p>

 <p>
スライスを可変長パラメータに直接受け渡す。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 57: </span>スライス…で展開して渡す</label> <pre class="src src-go">func main() {
        s := []string{"a", "b", "c"}

        // 以下2つの結果は同じ
        test(s...)
        test("a", "b", "c")
}
func test(s ...string) {
        fmt.Println(len(s), s)
}
</pre>
</div>

 <div class="results" id="org4a3275c">
 <p>
3 [a b c]
3 [a b c]
</p>

</div>

 <p>
エラーハンドリング。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 58: </span>存在しないファイルを参照して失敗させて検証する</label> <pre class="src src-go">func main() {
        file, err := os.Open("test.txt")

        if err != nil {
                fmt.Println(err.Error())
                // os.Exit(1)
        }

        file.Close()
        fmt.Println("finish")
}
</pre>
</div>

 <div class="results" id="orga57cffc">
 <p>
open test.txt: no such file or directory
finish
</p>

</div>

 <p>
独自のエラー処理。
</p>

 <div class="org-src-container">
 <pre class="src src-go">        type MyError struct {
                message string
        }

        func (err MyError) Error() string {
                return err.message
        }

      func main() {
          val, err := hex2int("1")
          fmt.Println(val, err)

          val, err = hex2int("00000f")
          fmt.Println(val, err)

          val, err = hex2int("abcd")
          fmt.Println(val, err)

          val, err = hex2int("z")
          fmt.Println(val, err)
    }

// 16進数文字列をint型に変換する
  func hex2int(hex string) (val int, err error) {
        // 1文字づつ取り出す
      for _, r := range hex {
            val *= 16
            switch {
                  case '0' <= r && r <= '9':
                  val += int(r - '0')
                  case 'a' <= r && r <= 'f':
                  val += int(r-'a') + 10
                  default:
                  return 0, MyError{"不正な文字列です。" + string(r)}
            }
      }

      // 戻り値errには初期値であるnilが返る
      return
}

</pre>
</div>

 <div class="results" id="org580f1a3">
 <p>
1 <nil>
15 <nil>
43981 <nil>
0 不正な文字列です。z
</p>

</div>

 <p>
処理終了。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 59: </span>panic関数</label> <pre class="src src-go">func main() {
        f1()
}

func f1() {
        panic("パニック発生 ")
}
</pre>
</div>

 <div class="results" id="orgf21523c">

</div>

 <p>
チャネルはGoプログラムの中の通信機構で、ゴルーチン間における通信、同期、値の同期に使用する。
</p>

 <div class="org-src-container">
 <pre class="src src-go">func main() {
        c := make(chan int, 10)
        c <- 0

        fmt.Println("cap:", cap(c))
        fmt.Println("len:", len(c))
}
</pre>
</div>

 <div class="results" id="org536f72f">
 <p>
cap: 10
len: 1
</p>

</div>

 <p>
selectは複数のチャネルに対して同時に送受信待ちを行うときに使用する。
</p>
</div>
</div>
 <div id="outline-container-org816183b" class="outline-3">
 <h3 id="org816183b"> <a href="#org816183b"> <span class="done DONE">DONE</span> </a> <a href="https://future-architect.github.io/articles/20210427b/">GoでDockerのAPIを叩いてみる | フューチャー技術ブログ</a></h3>
 <div class="outline-text-3" id="text-org816183b">
 <p>
goとdocker。
</p>
</div>
</div>
 <div id="outline-container-org8f08193" class="outline-3">
 <h3 id="org8f08193"> <a href="#org8f08193"> <span class="done DONE">DONE</span> </a> <a href="https://blog.zaim.co.jp/n/nc05117f6dffd">Go でコマンドラインツールを作るときに便利なパッケージ｜@hira</a></h3>
 <div class="outline-text-3" id="text-org8f08193">
 <p>
環境変数、カラー、インジケータ。
</p>
</div>
</div>
 <div id="outline-container-orgf4fc8a9" class="outline-3">
 <h3 id="orgf4fc8a9"> <a href="#orgf4fc8a9"> <span class="done DONE">DONE</span> cloneツール作成</a></h3>
 <div class="outline-text-3" id="text-orgf4fc8a9">
 <p>
clonerのgoバージョンを作成する。
</p>
</div>
</div>
 <div id="outline-container-orge001246" class="outline-3">
 <h3 id="orge001246"> <a href="#orge001246"> <span class="done DONE">DONE</span> gcloneをリファクタする</a></h3>
 <div class="outline-text-3" id="text-orge001246">
 <p>
goclocを読んでいると、gcloneのひどい書き方が目につく。型、構造体の使い方、ファイルやモジュール分割。一通り完了。非常に勉強になった。
</p>
</div>
</div>
 <div id="outline-container-orgafce6d5" class="outline-3">
 <h3 id="orgafce6d5"> <a href="#orgafce6d5"> <span class="done DONE">DONE</span> </a> <a href="https://zenn.dev/hsaki/books/golang-io-package">Goから学ぶI/O</a></h3>
 <div class="outline-text-3" id="text-orgafce6d5">
 <p>
GoのIOの解説。
</p>

 <blockquote>
 <p>
os.File型のReadメソッドは以下のような実装となっています。
</p>

 <ol class="org-ol"> <li>os.file型のReadメソッドを呼ぶ</li>
 <li>1の中でos.file型のreadメソッドを呼ぶ</li>
 <li>2の中でpoll.FD型のReadメソッドを呼ぶ</li>
 <li>3の中でsyscall.Readメソッドを呼ぶ</li>
 <li>OSカーネルのシステムコールで読み込み処理</li>
</ol></blockquote>

 <ul class="org-ul"> <li> <a href="20220113160623-network.html#ID-c5102c82-3146-4710-a826-85a802997929">network</a>もI/Oと捉えられる。コネクションからデータを読み取る・書き込むといえるから</li>
 <li> <a href="20220108110637-linux.html#ID-7a81eb7c-8e2b-400a-b01a-8fa597ea527a">Linux</a>の設計思想として“everything-is-a-file philosophy”というものがある。キーボードからの入力も、プリンターへの出力も、ハードディスクやネットワークからのI/Oもありとあらゆるものをすべて「OSのファイルシステムにあるファイルへのI/Oとして捉える」という思想。ネットワークからのデータ読み取り・書き込みも、OS内部的には通常のファイルI/Oと変わらない。そのため、ネットワークコネクションに対しても、通常ファイルと同様にfdが与えられる</li>
 <li>ファイル読み込みでもネットワークコネクションでも、システムコールsocket()を呼んで、fdを取得し、fdを内部フィールドに含んだ型を生成するところは共通</li>
 <li>リスナーからコネクションを得る = リスナーからfdを取り出して、それをTCPConnにラップする</li>
</ul></div>
</div>
 <div id="outline-container-org482728d" class="outline-3">
 <h3 id="org482728d"> <a href="#org482728d"> <span class="done DONE">DONE</span> gclone拡張</a></h3>
 <div class="outline-text-3" id="text-org482728d">
 <p>
ファイルサイズの増分、各所要時間を表示する。
</p>

 <p>
ダウンロードしているとき先にリポジトリ名を表示して、あとから結果に応じて記号をつける。
</p>

 <div class="org-src-container">
 <pre class="src src-shell">github@gclone... ✔ (10s)
github@go............ ✗ (0.6s)
...
40.4s
10.1G
</pre>
</div>

 <p>
インラインに表示するのがむずかしい。spinnerとコンフリクトしてるのか。
</p>
</div>
</div>
 <div id="outline-container-org8f0a938" class="outline-3">
 <h3 id="org8f0a938"> <a href="#org8f0a938"> <span class="done DONE">DONE</span> GitHub APIで統計を取る</a></h3>
 <div class="outline-text-3" id="text-org8f0a938">
 <p>
アイデア。
</p>

 <ul class="org-ul"> <li>言語別のリポジトリ数、行数、コミット数</li>
 <li>シールド
 <ul class="org-ul"> <li>定期的にGitHub Actionsでビルドすることで、数値を画像に反映させる</li>
</ul></li>
 <li>データストア用リポジトリという考え方を深める(octcovやupptime的な)
 <ul class="org-ul"> <li>汎用的なデータストアとして用いる</li>
 <li>別リポジトリから簡単に扱えるworkflowを作成する</li>
 <li>データストアリポジトリのURLと、キーによって、保存する</li>
 <li>データを元に画像なり生成して、時系列を見られるようにする</li>
</ul></li>
 <li>リポジトリ一覧を作る。コミット数、言語情報を一覧する</li>
 <li>データストアに保存、加工しやすい形にする</li>
 <li>画像/jsonで出力する</li>
 <li>他サイトに貼れるようにする</li>
</ul> <div class="org-src-container">
 <pre class="src src-nil">総コミット: 5000

| 名前     | 概要           | 言語       |
|----------+----------------+------------|
| .emacs.d | emacs dotfiles | Emacs Lisp |
| dotfiles | system config  | Shell      |
| gclone   | git clone tool | Go         |

| 言語         | リポジトリ数 | コミット数 |
|------------+--------------+------------|
| Go         |            4 |        100 |
| Ruby       |            5 |        200 |
| Emacs Lisp |            2 |        100 |
</pre>
</div>

 <ul class="org-ul"> <li>汎用的なデータストアリポジトリ(配信用)。ツールを実行して更新する</li>
 <li>CLIツール
 <ul class="org-ul"> <li>情報取得</li>
 <li>json出力</li>
 <li>画像出力</li>
 <li>README.md出力</li>
 <li>コミット機能</li>
</ul></li>
 <li>フロントエンド</li>
</ul></div>
 <div id="outline-container-org566e6c6" class="outline-4">
 <h4 id="org566e6c6"> <a href="#org566e6c6">作業ログ</a></h4>
 <div class="outline-text-4" id="text-org566e6c6">
 <p>
コミット数を取るのが難しい。 <a href="20211030122204-graphql.html#ID-b4f456cf-d250-4877-ac4c-4b03144392f0">GraphQL</a>で取るようにした。
</p>
</div>
</div>
</div>
 <div id="outline-container-org8c23d93" class="outline-3">
 <h3 id="org8c23d93"> <a href="#org8c23d93"> <span class="done DONE">DONE</span> 丸画像を生成する</a></h3>
 <div class="outline-text-3" id="text-org8c23d93">
 <p>
言語別の色の丸画像を生成するパッケージ。
</p>
</div>
</div>
 <div id="outline-container-org5ba77dc" class="outline-3">
 <h3 id="org5ba77dc"> <a href="#org5ba77dc"> <span class="done DONE">DONE</span> act出力の順番固定</a></h3>
 <div class="outline-text-3" id="text-org5ba77dc">
 <ol class="org-ol"> <li>keyだけを別のスライスにして、ソートする。</li>
 <li>keyをイテレートして、mapの中身を取り出す</li>
</ol></div>
</div>
 <div id="outline-container-orgff562fa" class="outline-3">
 <h3 id="orgff562fa"> <a href="#orgff562fa"> <span class="done DONE">DONE</span> バナー生成</a></h3>
 <div class="outline-text-3" id="text-orgff562fa">
 <p>
ほかの形も追加する。
</p>
</div>
</div>
 <div id="outline-container-org70247d2" class="outline-3">
 <h3 id="org70247d2"> <a href="#org70247d2"> <span class="done DONE">DONE</span> 誤字修正PRを送る</a></h3>
 <div class="outline-text-3" id="text-org70247d2">
 <ul class="org-ul"> <li> <a href="https://github.com/golang/go">golang/go: The Go programming language</a></li>

 <li>TestStdErrorHander</li>
 <li>hexdecimal</li>
</ul></div>
</div>
 <div id="outline-container-orgdb26144" class="outline-3">
 <h3 id="orgdb26144"> <a href="#orgdb26144"> <span class="done DONE">DONE</span> </a> <a href="https://www.oreilly.co.jp/books/9784873118222/">O’Reilly Japan - Go言語でつくるインタプリタ</a></h3>
 <div class="outline-text-3" id="text-orgdb26144">
 <ul class="org-ul"> <li>31, 42, 45, 52, 75, 86, 105, 115, 162, 184, 238, 252, 297</li>
</ul> <p>
インタプリタを実装する。
</p>

 <ul class="org-ul"> <li>字句解析フェーズが文字列をトークン列に変換</li>
 <li>構文解析フェーズがトークン列をASTに変換</li>
 <li>マクロ展開フェーズがASTを受け取り、修正して、返却</li>
 <li>評価</li>
</ul> <p>
一通りやったが、あまり腑に落ちてない。部分的なコードの多くは読んで理解できたが、自分で別のことに利用したり、拡張は全くできそうにない。
</p>
</div>
</div>
 <div id="outline-container-orga2cd6b9" class="outline-3">
 <h3 id="orga2cd6b9"> <a href="#orga2cd6b9"> <span class="done DONE">DONE</span> </a> <a href="https://tatsu-zine.com/books/nuxt-go-web-app-development">NuxtとGoではじめるWebアプリ開発【委託】 - 達人出版会</a></h3>
 <div class="outline-text-3" id="text-orga2cd6b9">
 <p>
動画検索アプリを題材に、NuxtとGoを使ったアプリ開発をやる本。
</p>

 <p>
ところどころSDKのバージョンの違いで本の記述では動かないところがある。どこか間違ったらしく、jsonトークンを受け取る箇所がうまくできない。Firebaseへのログイン状態を判断する箇所がうまくいってないので、データベースの動きも確かめられていない。
</p>
</div>
</div>
 <div id="outline-container-org71d6874" class="outline-3">
 <h3 id="org71d6874"> <a href="#org71d6874"> <span class="done DONE">DONE</span> ライフゲーム作成</a></h3>
 <div class="outline-text-3" id="text-org71d6874">
 <p>
バックエンドGo, フロントReactで作る。
</p>

 <ul class="org-ul"> <li> <a href="https://github.com/kijimaD/golife">kijimaD/golife: implement Conway’s Game of Life</a></li>
</ul></div>
</div>
 <div id="outline-container-org0297af4" class="outline-3">
 <h3 id="org0297af4"> <a href="#org0297af4"> <span class="done DONE">DONE</span> gofmtを読む</a></h3>
 <div class="outline-text-3" id="text-org0297af4">
 <p>
整形の方法を読む。
</p>

 <p>
主要な関数を見ていく。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 60: </span>各ファイルにフォーマットを実行する関数</label> <pre class="src src-git-permalink">https://github.com/golang/go/blob/51af90445696772703ed88d967e8c23c8e9e992d/src/cmd/gofmt/gofmt.go#L229
</pre>
</div>

 <div class="results" id="orgae9f01a">
 <p>
func processFile(filename string, info fs.FileInfo, in io.Reader, r *reporter) error {
</p>

</div>

 <ol class="org-ol"> <li>ファイル読み込み</li>
 <li>ast取り出し</li>
 <li>フォーマット</li>
 <li>差分があれば、結果に対する各種処理
 <ul class="org-ul"> <li>複数ファイルオプションがあれば、ファイル名をプリント</li>
 <li>書き込みオプションがあれば、ファイルに書き込み。最初にバックアップを別ファイルに保存し、目標ファイルへの上書きにエラーがあれば戻せるようにする。エラーがなかった場合は完了</li>
 <li>差分表示オプションがあれば、差分をプリント</li>
</ul></li>
</ol> <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 61: </span>実行の全体像</label> <pre class="src src-git-permalink">https://github.com/golang/go/blob/51af90445696772703ed88d967e8c23c8e9e992d/src/cmd/gofmt/gofmt.go#L387
</pre>
</div>

 <div class="results" id="org34db518">
 <p>
func gofmtMain(s *sequencer) {
</p>

</div>

 <p>
疑問。
</p>

 <ul class="org-ul"> <li> <code>fdSem</code> とは
 <ul class="org-ul"> <li>fdSem guards the number of concurrently-open file descriptors.</li>
 <li>file descriptor semaphore か。セマフォとは、同時実行を制御する仕組み</li>
 <li>定義の make(chan bool, 200) はバッファ作成。チャネルに一時データを保存する</li>
 <li> <code>fdsem <- true</code> は入れる</li>
 <li> <code><-fdSem</code> は取り出し</li>
 <li>ファイル関係の処理が入るときにfdSemをコントロールして、file descriptorの上限を超えないようにしている</li>
</ul></li>
 <li> <code>weight</code> とは
 <ul class="org-ul"> <li>maxWeightはコア数の環境変数から計算した値を使う</li>
 <li>maxWeightは最大の同時接続数のことで、weightはその接続数のカウントのこと。接続が増えるとカウントが減り、0になるとほかのゴルーチンは並列実行できない</li>
 <li>weightはファイルサイズから計算する</li>
 <li>ファイルサイズによって同時実行数を制御する…ということか。あまりピンとこない</li>
</ul></li>
 <li> <code>sequencer</code> とは
 <ul class="org-ul"> <li>スライス等ではないが、prevフィールドで辿れるグループピング構造に見える</li>
 <li>weight, ファイル処理を含む無名関数が入っている</li>
 <li>エラーを出す無名関数を入れることもある</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org67aaea1" class="outline-3">
 <h3 id="org67aaea1"> <a href="#org67aaea1"> <span class="done DONE">DONE</span> bufioを読む</a></h3>
 <div class="outline-text-3" id="text-org67aaea1">
 <p>
結局全然ピンと来てない。
</p>

 <p>
まずバッファの概念を理解することが必要そう。解説してあった。こういうのを自分でコードから調査できるようになりたい。
</p>
 <ul class="org-ul"> <li> <a href="https://zenn.dev/hsaki/books/golang-io-package/viewer/bufio">bufioパッケージによるbuffered I/O｜Goから学ぶI/O</a></li>
</ul> <p>
あるバイト数に達するまでbufioの内部バッファにためておく処理がある。それが普通のbufioとioの違い。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 62: </span>重要そうな部分。余りバッファがあればコピーし、余りバッファがないときはコピーせず直接write</label> <pre class="src src-git-permalink">https://github.com/golang/go/blob/122a22e0e9eba7fe712030d429fc4bcf6f447f5e/src/bufio/bufio.go#L662-L685
</pre>
</div>

 <div class="results" id="org9dccf0f">
 <p>
func (b *Writer) Write(p []byte) (nn int, err error) {
	for len(p) > b.Available() && b.err  <code>= nil {
		var n int
		if b.Buffered() =</code> 0 {
			 <i>/ Large write, empty buffer.
			/</i> Write directly from p to avoid copy.
			n, b.err = b.wr.Write(p)
		} else {
			n = copy(b.buf[b.n:], p)
			b.n += n
			b.Flush()
		}
		nn += n
		p = p[n:]
	}
	if b.err != nil {
		return nn, b.err
	}
	n := copy(b.buf[b.n:], p)
	b.n += n
	nn += n
	return nn, nil
}
</p>

</div>
</div>
</div>
 <div id="outline-container-org4bbba25" class="outline-3">
 <h3 id="org4bbba25"> <a href="#org4bbba25"> <span class="done DONE">DONE</span> </a> <a href="https://gihyo.jp/dp/ebook/2021/978-4-297-12520-2">エキスパートたちのGo言語 一流のコードから応用力を学ぶ | Gihyo Digital Publishing … 技術評論社の電子書籍</a></h3>
 <div class="outline-text-3" id="text-org4bbba25">
 <p>
ノウハウ集。通読するものというよりは、好きな箇所をつまみ食いする本。
</p>
</div>
</div>
 <div id="outline-container-orgb3f83b3" class="outline-3">
 <h3 id="orgb3f83b3"> <a href="#orgb3f83b3"> <span class="done DONE">DONE</span> </a> <a href="https://zenn.dev/empenguin/articles/09c1b50ebeb8e7">Golang による Strategy パターン</a></h3>
 <div class="outline-text-3" id="text-orgb3f83b3">
 <p>
必要になったので参考にする。
</p>
</div>
</div>
 <div id="outline-container-orgcf6edf9" class="outline-3">
 <h3 id="orgcf6edf9"> <a href="#orgcf6edf9"> <span class="done DONE">DONE</span> </a> <a href="https://selfnote.work/20210516/programming/golang-design-pattern-prototype/">[Go言語]Prototypeパターンを学ぼう | セルフノート</a></h3>
 <div class="outline-text-3" id="text-orgcf6edf9">
 <p>
デザインパターンの紹介。
</p>
</div>
</div>
 <div id="outline-container-org196beea" class="outline-3">
 <h3 id="org196beea"> <a href="#org196beea"> <span class="done DONE">DONE</span> </a> <a href="https://andmorefine.gitbook.io/learn-go-with-tests/">テスト駆動開発でGO言語を学びましょう - テスト駆動開発でGO言語を学びましょう</a></h3>
 <div class="outline-text-3" id="text-org196beea">
 <p>
テスト駆動開発によるGo入門。動かしてわかりやすいだけでなく、後の学習に役に立ちそうな言葉も多い。
</p>

 <ul class="org-ul"> <li>標準ライブラリを使ってみるときにテストで動作チェックしてみると、勉強になる</li>
</ul> <blockquote>
 <p>
Go標準ライブラリは本当に良いです。時間をかけて勉強してください。
このようにio.Writerインターフェースにある程度慣れていることで、テストでbytes.Bufferを Writerとして使うことができ、標準ライブラリの他のWriterを使ってコマンドラインアプリやウェブサーバで関数を使うことができます。
標準ライブラリに慣れるほど、これらの汎用インターフェイスが表示され、独自のコードで再利用して、ソフトウェアをさまざまなコンテキストで再利用可能にすることができます。
</p>
</blockquote>

 <blockquote>
 <p>
システムの実行にとって実装が本当に重要でない限り、テストが有用な動作をチェックするようにしてください。
</p>
</blockquote>

 <blockquote>
 <ul class="org-ul"> <li>リファクタリングの定義では、コードは変更されますが、動作は同じです。理論的にリファクタリングを行うことに決めた場合は、テストを変更せずにコミットを実行できるはずです。だからテストを書くときは自問してください

 <ul class="org-ul"> <li>必要な動作や実装の詳細をテストしていますか？</li>
 <li>このコードをリファクタリングする場合、テストに多くの変更を加える必要がありますか？</li>
</ul></li>
 <li>テストが3つ以上のモックで動作している場合、それは危険信号であるように感じます（デザインを再検討する時間）</li>
</ul></blockquote>

 <blockquote>
 <p>
TDDアプローチの詳細
</p>
 <ul class="org-ul"> <li>ささいな例に直面した場合は、問題を「薄いスライス」に分解してください。ウサギの穴に入り込み、「ビッグバン」アプローチをとらないように、できるだけ早く_testsで動作するソフトウェアを使用できるようにしてください。</li>
 <li>動作するソフトウェアを入手したら、必要なソフトウェアにたどり着くまで小さなステップで繰り返すのが簡単です。</li>
</ul></blockquote>
</div>
</div>
 <div id="outline-container-org4b019ea" class="outline-3">
 <h3 id="org4b019ea"> <a href="#org4b019ea"> <span class="done DONE">DONE</span> 実行結果をいい感じに保持するにはどうするか</a></h3>
 <div class="outline-text-3" id="text-org4b019ea">
 <p>
都度printするのではなく、貯めておいて、表示する箇所で整形して表示したい。表示部分と処理が分離される効果もある。何か公開されているツールを参考にすればできそう。
</p>

 <ul class="org-ul"> <li>単純に1階層の結果であれば、構造体に入れて普通に返せばいい</li>
 <li>複数階層であれば、工夫が必要そう</li>
</ul> <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 63: </span>docker build形式でもよさそう</label> <pre class="src src-nil">[python 2/4]RUN pip3 install
[build  2/13] COPY . .
</pre>
</div>
</div>
</div>
 <div id="outline-container-org2a880eb" class="outline-3">
 <h3 id="org2a880eb"> <a href="#org2a880eb"> <span class="done DONE">DONE</span> </a> <a href="https://qiita.com/tenntenn/items/ac5940dfbca703183fdf">Goのスコープについて考えてみよう #golang - Qiita</a></h3>
 <div class="outline-text-3" id="text-org2a880eb">
 <p>
スコープの解説。
</p>

 <p>
スコープには4つの種類がある。
</p>

 <ul class="org-ul"> <li>ユニバース</li>
 <li>ファイル</li>
 <li>パッケージ</li>
 <li>ローカル</li>
</ul> <p>
それぞれの種類のスコープでは以下のオブジェクトが定義できる。
</p>

 <table> <colgroup> <col class="org-left"></col> <col class="org-left"></col> <col class="org-left"></col> <col class="org-left"></col> <col class="org-left"></col></colgroup> <thead> <tr> <th scope="col" class="org-left"> </th>
 <th scope="col" class="org-left">ユニバース</th>
 <th scope="col" class="org-left">ファイル</th>
 <th scope="col" class="org-left">パッケージ</th>
 <th scope="col" class="org-left">ローカル</th>
</tr></thead> <tbody> <tr> <td class="org-left">組み込み関数(types.Builtin)</td>
 <td class="org-left">✔</td>
 <td class="org-left"> </td>
 <td class="org-left"> </td>
 <td class="org-left"> </td>
</tr> <tr> <td class="org-left">nil(types.nil)</td>
 <td class="org-left">✔</td>
 <td class="org-left"> </td>
 <td class="org-left"> </td>
 <td class="org-left"> </td>
</tr> <tr> <td class="org-left">定数(types.Const)</td>
 <td class="org-left">✔</td>
 <td class="org-left"> </td>
 <td class="org-left">✔</td>
 <td class="org-left">✔</td>
</tr> <tr> <td class="org-left">型名(types.TypeName)</td>
 <td class="org-left">✔</td>
 <td class="org-left"> </td>
 <td class="org-left">✔</td>
 <td class="org-left">✔</td>
</tr> <tr> <td class="org-left">関数(types.Func)</td>
 <td class="org-left"> </td>
 <td class="org-left"> </td>
 <td class="org-left">✔</td>
 <td class="org-left"> </td>
</tr> <tr> <td class="org-left">変数(types.Var)</td>
 <td class="org-left"> </td>
 <td class="org-left"> </td>
 <td class="org-left">✔</td>
 <td class="org-left">✔</td>
</tr> <tr> <td class="org-left">パッケージ名(types.PkgName)</td>
 <td class="org-left"> </td>
 <td class="org-left">✔</td>
 <td class="org-left"> </td>
 <td class="org-left"> </td>
</tr> <tr> <td class="org-left">ラベル(Label)</td>
 <td class="org-left"> </td>
 <td class="org-left"> </td>
 <td class="org-left"> </td>
 <td class="org-left">✔</td>
</tr></tbody></table></div>
</div>
 <div id="outline-container-orga65803d" class="outline-3">
 <h3 id="orga65803d"> <a href="#orga65803d"> <span class="done DONE">DONE</span> </a> <a href="https://qiita.com/tenntenn/items/e15cc0c54b3bbfddb04e">Goの比較可能性（comparable） - Qiita</a></h3>
 <div class="outline-text-3" id="text-orga65803d">
 <p>
比較可能な型の説明。
</p>

 <ul class="org-ul"> <li>比較可能
 <ul class="org-ul"> <li>真偽値</li>
 <li>整数値</li>
 <li>浮動小数点値</li>
 <li>複素数値</li>
 <li>文字列</li>
 <li>ポインタ</li>
 <li>チャネル</li>
 <li>インタフェース
 <ul class="org-ul"> <li>動的型と動的値の2つから構成される</li>
 <li>動的型が  <code>%T</code> verbで表示できる</li>
</ul></li>
 <li>構造体(条件あり)</li>
 <li>配列(条件あり)
 <ul class="org-ul"> <li>構成するフィールドや要素に比較できない型がある場合は比較できない</li>
</ul></li>
</ul></li>
 <li>比較可能の場合、  <code>==</code> 演算子、  <code>!=</code> 演算子で比較できる。</li>
 <li>順序付け可能な場合はさらに  <code><</code> ,  <code><=</code> ,  <code>></code> ,  <code>>=</code> が使用できる</li>
</ul> <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 64: </span>falseになる。動的型はint型で同じだが、動的値が同じなため</label> <pre class="src src-go">var x, y any = 100, 200
fmt.Println(x == y)
</pre>
</div>

 <div class="results" id="orgdc301c1">
 <p>
false
</p>

</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 65: </span>falseになる。動的型が違うので</label> <pre class="src src-go">var x, y any = int(100), int32(100)
fmt.Println(x == y)
</pre>
</div>

 <div class="results" id="orgf043cd6">
 <p>
false
</p>

</div>

 <p>
まとめ。
</p>

 <ul class="org-ul"> <li>動的型が違う場合は必ずfalse</li>
 <li>動的型が同じでどちらかの動的型が比較不可能な場合はパニック</li>
 <li>動的型が同じでcomparableでかつ動的値が同じ場合はtrue</li>
 <li>動的型が同じでcomparableでかつ動的値が違う場合はfalse</li>
</ul></div>
</div>
 <div id="outline-container-org93b4b4c" class="outline-3">
 <h3 id="org93b4b4c"> <a href="#org93b4b4c"> <span class="done DONE">DONE</span> ネストしたときのoavの挙動を確認する</a></h3>
 <div class="outline-text-3" id="text-org93b4b4c">
 <ul class="org-ul"> <li> <a href="https://github.com/kijimaD/oav">kijimaD/oav</a></li>
</ul> <p>
検知してない疑惑。問題なかった。
</p>

 <ul class="org-ul"> <li>type: objectをつけてない項目があった</li>
 <li>その項目はarrayだけを子に持っていた。そのため、自身のtypeもarrayになっていた</li>
 <li>おそらく、子の項目で自身のtypeが決定する。ほとんどは複合型で、objectに自動で決定して問題ないが、今回のように問題があるケースがある</li>
</ul></div>
</div>
 <div id="outline-container-orgb643830" class="outline-3">
 <h3 id="orgb643830"> <a href="#orgb643830"> <span class="done DONE">DONE</span> </a> <a href="https://www.amazon.co.jp/Go%E3%81%AA%E3%82%89%E3%82%8F%E3%81%8B%E3%82%8B%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0-%E6%B8%8B%E5%B7%9D-%E3%82%88%E3%81%97%E3%81%8D/dp/4908686033/ref=sr_1_3?keywords=go+%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0&qid=1653145833&sprefix=go+%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%2Caps%2C206&sr=8-3">Goならわかるシステムプログラミング | 渋川 よしき, ごっちん |本 | 通販 - Amazon.co.jp</a></h3>
 <div class="outline-text-3" id="text-orgb643830">
 <p>
途中まで読んだが、あまりおもしろくないので後回しにする。
</p>

 <p>
システムプログラミングをGoで学ぶ本。
</p>

 <ul class="org-ul"> <li>まずデバッガ環境を整えることから</li>
 <li>ファイルディスクリプタに対応するものは、通常のファイルに限らない。標準入出力/ソケット/OS/CPUに内蔵されている乱数生成の仕組みなど、ファイルではないものにもファイルディスクリプタが割り当てられ、どれもファイルと同じようにアクセスできる</li>
 <li>OSは、プロセスが起動されるとまず3つの疑似ファイルを作成し、それぞれにファイルディスクリプタを割り当てる。0が標準入力、1が標準出力、2が標準エラー出力</li>
 <li>可能な限りすべてのものがファイルとして抽象化されている</li>
 <li>go言語ではファイルディスクリプタのような共通化の仕組みを言語レベルで持ってOSによる差異を吸収している。io.Writer</li>
 <li>インターフェースは、構造体と違って何かしら実体を持つものを表すのではなく、「どんなことができるか」を宣言しているだけ</li>
 <li>リクエストではスロースタートによって、最適な速度を決定している。大きなファイル転送するときに徐々に速度が上がっていくのはこのためか</li>
 <li>Linuxのファイルの管理情報を格納している領域を、inodeという</li>
 <li>Linuxでファイルを読み書きする場合には、まずバッファにデータが格納される。すでにバッファに載っていて、そのファイルに対する書き込みが行われていないならバッファだけにしかアクセスしない</li>
 <li>.envファイルを利用するアイデアは、 <a href="20210509095946-rails.html#ID-e04aa1a3-509c-45b2-ac64-53d69c961214">Rails</a>での発明らしい</li>
 <li>OSが実行ファイルを読み込んで実行するには、そのためのリソースを用意しなければならない。そのようなリソースをまとめたプログラムの実行単位がプロセス
 <ul class="org-ul"> <li>カーネルは新しいプロセスを作るたびに各プロセスでどういった入出力が行われるかの管理テーブルをつくる。そのインデックス値がファイルディスクリプタ</li>
</ul></li>
 <li>プロセスを束ねたグループというものもある。プロセスグループ(別名ジョブ)。パイプを使うと同じプロセスグループになる</li>
 <li>シグナルはプロセスに対して送られる</li>
 <li id="システムコール">プロセス → OSカーネル</li>
 <li id="シグナル">OSカーネル → プロセス</li>
 <li>スレッドがCPUコアに対してマッピングされるのに対し、goroutineはOSのスレッドにマッピングされる</li>
 <li>goroutineはOSのスレッドと比較してタスク切り替えのコストが低い
 <ul class="org-ul"> <li>スイッチには前の処理が使っていたレジスタの退避が必要になるが、退避が最小限が済むコード位置にスイッチのためのコードが埋め込める</li>
 <li>初期スタックメモリのサイズが小さい。メモリ確保は処理時間がかかるので、起動時間では小さいほうが有利</li>
 <li>などによって、goroutineは起動時間、切り替え時間がOSのスレッドより1000倍のオーダーで高速</li>
 <li>Goが提供する並行・並列処理の3要素
 <ul class="org-ul"> <li>goroutine: 実行</li>
 <li>チャネル・コミュニケーション</li>
 <li>select: 調停</li>
</ul></li>
 <li>並行・並列処理の実現手法
 <ul class="org-ul"> <li>マルチプロセス</li>
 <li>イベント駆動</li>
 <li>マルチスレッド</li>
 <li>ストリーミング・プロセッシング</li>
</ul></li>
 <li>スライスの裏には配列がある。実際には配列を参照するウィンドウ(対象の配列のスタート位置，終了位置、確保済みのサイズの3つの情報を持つ)で構成されている</li>
 <li>バックエンドの配列に対し、使いやすいフロントエンドとして提供されているのがスライス</li>
 <li>スライスの実態は3つの数値とポインタを持った24バイトのデータ
 <ul class="org-ul"> <li>スライスの先頭の要素へのポインタ</li>
 <li>スライスの長さ</li>
 <li>スライスが確保している要素数</li>
</ul></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org3e4887d" class="outline-3">
 <h3 id="org3e4887d"> <a href="#org3e4887d"> <span class="done DONE">DONE</span> </a> <a href="https://go.dev/ref/spec">The Go Programming Language Specification - The Go Programming Language</a></h3>
 <div class="outline-text-3" id="text-org3e4887d">
 <p>
言語の仕様書。
</p>

 <ul class="org-ul"> <li>リテラルってなんだ
 <ul class="org-ul"> <li> <a href="https://ja.wikipedia.org/wiki/%E3%83%AA%E3%83%86%E3%83%A9%E3%83%AB">リテラル - Wikipedia</a></li>
 <li>ソースコード内に値を直接表記したもの
 <ul class="org-ul"> <li> <code>int x = 7;</code> だと7</li>
 <li> <code>double pi = 3.14;</code> だと3.14</li>
 <li> <code>string s = "hello";</code> だと“hello”</li>
</ul></li>
 <li>トークンとは違うのかな。トークンは値だけでなく識別子や予約語も含む</li>
 <li> <a href="https://e-words.jp/w/%E3%83%AA%E3%83%86%E3%83%A9%E3%83%AB.html">リテラル（直値）とは - 意味をわかりやすく - IT用語辞典 e-Words</a></li>
 <li>リテラルとは、コンピュータプログラムのソースコードなどの中に、特定のデータ型の値を直に記載したもの。また、そのように値をコードに書き入れるために定められている書式。</li>
</ul></li>
 <li>セレクタってなんだ
 <ul class="org-ul"> <li> <code>x.f</code> は値  <code>x</code> のフィールド  <code>f</code> 、またはメソッド  <code>f</code> を示す</li>
</ul></li>
 <li>定義型(defined type)ってなんだ
 <ul class="org-ul"> <li>事前定義された型か、独自に定義された型</li>
 <li> <code>type S []int</code> の  <code>S</code></li>
 <li> <code>type T int</code> の  <code>T</code> と  <code>int</code></li>
 <li>defined typeでない型は複合型</li>
</ul></li>
 <li>型リテラルってなんだ
 <ul class="org-ul"> <li> <a href="https://zenn.dev/syumai/articles/77bc12aca9b654">Goの型同一性を理解する</a></li>
 <li>他の型を利用して構成される型</li>
 <li> <code>var a [5]int</code> における[5]int</li>
 <li> <code>type B int</code> (Bは型名)</li>
 <li> <code>var b []B</code> における[]B</li>
 <li>リテラル中に他の型が使われない、func()や、struct{}といった型リテラルも存在する</li>
 <li>型リテラルを使って示される型は、型定義が行われていないためdefined typeではない</li>
 <li>型リテラルの種類
 <ul class="org-ul"> <li>要素型を持つ
 <ul class="org-ul"> <li>配列型</li>
 <li>スライス型</li>
 <li>マップ型</li>
 <li>チャンネル型</li>
</ul></li>
 <li>キー型を持つ
 <ul class="org-ul"> <li>マップ型</li>
</ul></li>
 <li>フィールド型を持つ
 <ul class="org-ul"> <li>構造体型</li>
</ul></li>
 <li>ベースの型を持つ
 <ul class="org-ul"> <li>ポインタ型</li>
</ul></li>
 <li>仮引数型、結果型を持つ
 <ul class="org-ul"> <li>関数型</li>
</ul></li>
</ul></li>
 <li>型リテラルによって示される型同士が同一かどうかを判定するには、型リテラルの構造が同一かつ、型リテラル中に現れる型が同一であることを確認する必要がある</li>
 <li>型リテラルごとに、同一性の条件がある</li>
 <li>インターフェース型は任意の型を使って構成されるわけではない。インターフェース型はメソッドを持ち、それぞれのメソッドは関数型を持つ</li>
</ul></li>
 <li>underlying type(基底型)ってなんだ
 <ul class="org-ul"> <li>すべての型はunderlying typeを持つ</li>
 <li>事前に定義された型や、型リテラルによって示される型のunderlying typeはその型自身
 <ul class="org-ul"> <li> <code>int</code> -> 基底型: int</li>
 <li> <code>string</code> -> 基底型: string</li>
 <li> <code>[]int</code> -> 基底型: []int</li>
 <li> <code>struct{}</code> -> 基底型: struct{}</li>
</ul></li>
 <li>それ以外の型のunderlying typeは型宣言の対象によって決まる</li>
 <li>2つの型宣言
 <ul class="org-ul"> <li> <code>type A string</code> -> 型宣言
 <ul class="org-ul"> <li> <code>type A string</code> -> Aの基底型: string</li>
 <li> <code>type B A</code> -> Bの基底型: string</li>
 <li> <code>type C []int</code> -> Cの基底型: []int</li>
</ul></li>
 <li> <code>type B = int</code> -> エイリアス宣言
 <ul class="org-ul"> <li> <code>type A string</code> -> defined type</li>
 <li> <code>type B = A</code> -> Bの基底型: string</li>
 <li> <code>type C = []int</code> -> Cの基底型: []int</li>
</ul></li>
</ul></li>
 <li>2つの型のいずれもdefined typeでない場合、それぞれの型のunderlying typeの型リテラルが構造的に等しい場合に同一となる
 <ul class="org-ul"> <li>defined typeでない型とは、型リテラルと型エイリアス</li>
 <li>型リテラルのunderlying typeはその型リテラル自身</li>
 <li>型同一性においてunderlying typeの考慮が必要なのは型エイリアスのみ</li>
 <li> <code>type NamedMap = map[string][]int</code>
 <ul class="org-ul"> <li>NamedMapの基底型はmap[string][]int</li>
 <li>m1とm2はunderlying typeの型リテラルの構造が同一なので同一</li>
 <li> <code>var m1 map[string][]int</code></li>
 <li> <code>var m2 NamedMap</code></li>
</ul></li>
</ul></li>
</ul></li>
 <li>参考になる用語  <a href="https://zenn.dev/senk/articles/91fa080844bb12">[Go] 言語仕様書に出てくる型関連の用語まとめ</a></li>
 <li> <a href="https://zenn.dev/nobishii/articles/defined_types">Go言語のdefined typeとは何か</a></li>
 <li>修飾識別子
 <ul class="org-ul"> <li>パッケージ名をつけて修飾された識別子</li>
 <li>PackageName “.” identifier .</li>
 <li>修飾識別子は、インポートされなければならない</li>
</ul></li>
 <li>runeの例で白鵬が出てきて笑う
 <ul class="org-ul"> <li> <a href="https://github.com/golang/go/blob/20e9b7f1b53d49fd66e0344b1d0d42d3cf5e47b6/doc/go_spec.html#L5624">https://github.com/golang/go/blob/20e9b7f1b53d49fd66e0344b1d0d42d3cf5e47b6/doc/go_spec.html#L5624</a></li>
</ul></li>
 <li>終端文
 <ul class="org-ul"> <li>return, goto, panic…</li>
</ul></li>
 <li>式文(expression statements)
 <ul class="org-ul"> <li>関数呼び出しとメソッド呼び出しと受信演算は、文コンテキストに現れる。そのような文は、丸括弧で囲まれている必要がある</li>
</ul></li>
 <li>アドレス演算子</li>
 <li>ポインター間接参照</li>
 <li>誤字
 <ul class="org-ul"> <li>自薦宣言</li>
 <li>関数内え</li>
 <li>キーを全く含まないは要素リスト</li>
 <li>ある要素がキーをもつならば，すべて要素が</li>
 <li>関数はリテラルは</li>
 <li>ようそが要素が</li>
 <li>定数インデック</li>
 <li>インデックは</li>
 <li>次の関係を満足する</li>
 <li>連続した要素がその文字列のバイトたち</li>
 <li>であるスライスを生成される</li>
 <li>結合性を上書して</li>
 <li>fStmt =</li>
 <li>仕様できる</li>
 <li>文囲む親関数</li>
 <li>じたがって</li>
 <li>を満足する</li>
 <li>を基準としたの</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org964b5d3" class="outline-3">
 <h3 id="org964b5d3"> <a href="#org964b5d3"> <span class="done DONE">DONE</span> </a> <a href="https://github.com/golang/go/blob/release-branch.go1.13/src/cmd/compile/README.md">go/README.md at release-branch.go1.13 · golang/go · GitHub</a></h3>
 <div class="outline-text-3" id="text-org964b5d3">
 <p>
Go コンパイラについての公式ドキュメント。
</p>
</div>
</div>
 <div id="outline-container-org6c0b8fb" class="outline-3">
 <h3 id="org6c0b8fb"> <a href="#org6c0b8fb"> <span class="done DONE">DONE</span> </a> <a href="https://www.oreilly.co.jp/books/9784873117522/">O’Reilly Japan - Go言語によるWebアプリケーション開発</a></h3>
 <div class="outline-text-3" id="text-org6c0b8fb">
 <p>
いろんなWebアプリの紹介。
</p>

 <ul class="org-ul"> <li>sync.Once型を使うと関数が1回しか実行しないことを保証できる</li>
 <li>Newメソッド, Offメソッド, Tracerインターフェース</li>
</ul> <div id="orga72c531" class="figure">
 <p> <img src="images/20230520-web.drawio.svg" alt="20230520-web.drawio.svg" class="org-svg"></img></p>
</div>

 <blockquote>
 <p>
呼び出される時点ではまだ利用できない値に依存しているということがわかりました。そこで、何らかの対策が必要になります。例えば、必要なフィールドを個別に引数として渡すという変更が考えられます。しかし、こうするとインタフェースが不安定なものになってしまいます。いずれかのAvatarの実装で新しい種類の情報が必要になるたびに、メソッドのシグネチャーを変更しなければならなくなるためです。代わりに、Avatarの実装が必要とする情報をカプセル化した新しい型を定義することにします。
</p>
</blockquote>

 <ul class="org-ul"> <li>メッセージが送信されるたびにアバター画像URLを生成するとスケールしない。アバターURLはクッキーの中にキャッシュすることにする</li>
</ul></div>
</div>
 <div id="outline-container-orged02b64" class="outline-3">
 <h3 id="orged02b64"> <a href="#orged02b64"> <span class="done DONE">DONE</span> </a> <a href="https://zenn.dev/hsaki/articles/go-convert-json-struct">Goにおけるjsonの扱い方を整理・考察してみた ~ データスキーマを添えて</a></h3>
 <div class="outline-text-3" id="text-orged02b64">
 <p>
エンコードの解説。
</p>

 <ul class="org-ul"> <li>インメモリ表現
 <ul class="org-ul"> <li>何らかの構造を持つことを前提とした扱い方
 <ul class="org-ul"> <li>リスト</li>
 <li>配列</li>
 <li>構造体</li>
</ul></li>
</ul></li>
 <li>バイト列表現
 <ul class="org-ul"> <li>ただのバイト列として扱い。データそのものに何が書いてあるかを気にする必要がない</li>
 <li>ファイルへの書き込み</li>
 <li>ネットワークへの受信</li>
</ul></li>
</ul> <p>
エンコードはインメモリ表現からバイト列表現への変換のこと。
</p>

 <ul class="org-ul"> <li>Go構造体からjsonを生成する</li>
 <li>平文から暗号文を生成する</li>
</ul> <p>
デコーディングはバイト列表現からインメモリ表現への変換のこと。
</p>

 <ul class="org-ul"> <li>jsonからGo構造体を生成する</li>
 <li>暗号文から平文を生成する</li>
</ul> <p>
Unmarshalは、対応してないjsonのフィールドがあると取りこぼす。そしてゼロ値を入れる。この挙動を防ぎたいときは、Unmarshalで書き込む先の変数をinterface{}型にして入れ、それから型アサーションで確かめればよい。
</p>
</div>
</div>
 <div id="outline-container-org7435519" class="outline-3">
 <h3 id="org7435519"> <a href="#org7435519"> <span class="done DONE">DONE</span> </a> <a href="https://techbookfest.org/product/vJdm4hcCDab9xE5Yjshyv8?productVariantID=6CzemppiY937uDD4bXT6nE">詳解Go標準パッケージ：web-apps.tech</a></h3>
 <div class="outline-text-3" id="text-org7435519">
 <p>
Goの標準パッケージを詳解する本。
</p>
</div>
</div>
 <div id="outline-container-orgee7b81e" class="outline-3">
 <h3 id="orgee7b81e"> <a href="#orgee7b81e"> <span class="done DONE">DONE</span> </a> <a href="https://techbookfest.org/product/5127270203129856?productVariantID=5036058678919168">Goでちょっとひといき：Women Who Go Tokyo</a></h3>
 <div class="outline-text-3" id="text-orgee7b81e">
 <p>
Goの解説集。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 66: </span>エントリポイントから呼ばれる</label> <pre class="src src-git-permalink">https://github.com/golang/go/blob/a031f4ef83edc132d5f49382bfef491161de2476/src/runtime/rt0_linux_amd64.s#L7-L8
</pre>
</div>

 <div class="results" id="orgd8a126a">
 <p>
TEXT _rt0_amd64_linux(SB),NOSPLIT,$-8
	JMP	_rt0_amd64(SB)
</p>

</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 67: </span>ジャンプ先</label> <pre class="src src-git-permalink">https://github.com/golang/go/blob/a031f4ef83edc132d5f49382bfef491161de2476/src/runtime/asm_amd64.s#L15-L18
</pre>
</div>

 <div class="results" id="orgc4598f9">
 <p>
TEXT _rt0_amd64(SB),NOSPLIT,$-8
	MOVQ	0(SP), DI	 <i>/ argc
	LEAQ	8(SP), SI	/</i> argv
	JMP	runtime rt0_go(SB)
</p>

</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 68: </span>g0とはproc.goで定義されている変数のこと</label> <pre class="src src-git-permalink">https://github.com/golang/go/blob/a031f4ef83edc132d5f49382bfef491161de2476/src/runtime/proc.go#L115
</pre>
</div>

 <div class="results" id="orgdd3a774">
 <p>
g0           g
</p>

</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 69: </span>g型の定義</label> <pre class="src src-git-permalink">https://github.com/golang/go/blob/a031f4ef83edc132d5f49382bfef491161de2476/src/runtime/runtime2.go#L414
</pre>
</div>

 <div class="results" id="orgfc7865d">
 <p>
type g struct {
</p>

</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 70: </span>どのプロセッサが使われているか確認する</label> <pre class="src src-git-permalink">https://github.com/golang/go/blob/a031f4ef83edc132d5f49382bfef491161de2476/src/runtime/asm_amd64.s#L183-L187
</pre>
</div>

 <div class="results" id="orga319a29">
 <p>
CMPL	BX, $0x756E6547   <i>/ “Genu”
JNE	notintel
CMPL	DX, $0x49656E69  /</i> “ineI”
JNE	notintel
CMPL	CX, $0x6C65746E  // “ntel”
</p>

</div>

 <dl class="org-dl"> <dt>TLS</dt> <dd>Thread Local Storage</dd>
 <dt>(no term)</dt> <dd>runtimeまわりでは  <code>g</code> はgoroutine、  <code>m</code> はワーカースレッドをさす</dd>
</dl> <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 71: </span>初期化する。CPU数、ページサイズをセットする</label> <pre class="src src-git-permalink">https://github.com/golang/go/blob/a031f4ef83edc132d5f49382bfef491161de2476/src/runtime/os_linux.go#L346-L368
</pre>
</div>

 <div class="results" id="orgce1add4">
 <p>
func osinit() {
	ncpu = getproccount()
	physHugePageSize = getHugePageSize()
	if iscgo {
		 <i>/ #42494 glibc and musl reserve some signals for
		/</i> internal use and require they not be blocked by
		 <i>/ the rest of a normal C runtime. When the go runtime
		/</i> blocks…unblocks signals, temporarily, the blocked
		 <i>/ interval of time is generally very short. As such,
		/</i> these expectations of *libc code are mostly met by
		 <i>/ the combined go+cgo system of threads. However,
		/</i> when go causes a thread to exit, via a return from
		 <i>/ mstart(), the combined runtime can deadlock if
		/</i> these signals are blocked. Thus, don’t block these
		 <i>/ signals when exiting threads.
		/</i> - glibc: SIGCANCEL (32), SIGSETXID (33)
		// - musl: SIGTIMER (32), SIGCANCEL (33), SIGSYNCCALL (34)
		sigdelset(&sigsetAllExiting, 32)
		sigdelset(&sigsetAllExiting, 33)
		sigdelset(&sigsetAllExiting, 34)
	}
	osArchInit()
}
</p>

</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 72: </span>スケジューラの初期化</label> <pre class="src src-git-permalink">https://github.com/golang/go/blob/a031f4ef83edc132d5f49382bfef491161de2476/src/runtime/proc.go#L694-L779
</pre>
</div>

 <div class="results" id="org9f5fb1b">
 <p>
func schedinit() {
	lockInit(&sched.lock, lockRankSched)
	lockInit(&sched.sysmonlock, lockRankSysmon)
	lockInit(&sched.deferlock, lockRankDefer)
(略)
</p>

</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 73: </span>ここでmainパッケージのmain関数にリンクする</label> <pre class="src src-git-permalink">https://github.com/golang/go/blob/a031f4ef83edc132d5f49382bfef491161de2476/src/runtime/proc.go#L131-L132
</pre>
</div>

 <ul class="org-ul"> <li>デバッガでステップインしたあとパブリックな関数を見つけて、それを呼び出すようにすると再度デバッガを実行するときに素早く目的の関数までたどり着きやすくなる。変数まわりを調べて同じ引数で渡せるようにする</li>
</ul></div>
</div>
 <div id="outline-container-orgeac8c2e" class="outline-3">
 <h3 id="orgeac8c2e"> <a href="#orgeac8c2e"> <span class="done DONE">DONE</span> gcloneをリファクタする</a></h3>
 <div class="outline-text-3" id="text-orgeac8c2e">
 <p>
Goを学んだ初期に書いた。わかりにくいコードになっているのを直す。
</p>
</div>
</div>
 <div id="outline-container-orge38e6d0" class="outline-3">
 <h3 id="orge38e6d0"> <a href="#orge38e6d0"> <span class="done DONE">DONE</span> </a> <a href="https://zenn.dev/hsaki/books/golang-httpserver-internal">Deep Dive into The Go’s Web Server</a></h3>
 <div class="outline-text-3" id="text-orge38e6d0">
 <p>
Goのサーバーの解説。
</p>

 <div class="org-src-container">
 <pre class="src src-git-permalink">https://github.com/kd-collective/go/blob/2eca0b1e1663d826893b6b1fd8bd89da98e65d1e/src/net/http/server.go#L2503-L2515
</pre>
</div>

 <div class="results" id="org16ed29a">
 <p>
 <i>/ ServeHTTP dispatches the request to the handler whose
/</i> pattern most closely matches the request URL.
func (mux  <b>ServeMux) ServeHTTP(w ResponseWriter, r *Request) {
	if r.RequestURI == "</b>“ {
		if r.ProtoAtLeast(1, 1) {
			w.Header().Set(”Connection“, ”close")
		}
		w.WriteHeader(StatusBadRequest)
		return
	}
	h, _ := mux.Handler(r)
	h.ServeHTTP(w, r)
}
</p>

</div>
</div>
</div>
 <div id="outline-container-org3c67d22" class="outline-3">
 <h3 id="org3c67d22"> <a href="#org3c67d22"> <span class="done DONE">DONE</span> </a> <a href="https://www.amazon.co.jp/Go%E3%81%AA%E3%82%89%E3%82%8F%E3%81%8B%E3%82%8B%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0-%E6%B8%8B%E5%B7%9D-%E3%82%88%E3%81%97%E3%81%8D/dp/4908686033/ref=sr_1_3?keywords=go+%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0&qid=1653145833&sprefix=go+%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%2Caps%2C206&sr=8-3">Goならわかるシステムプログラミング</a></h3>
 <div class="outline-text-3" id="text-org3c67d22">
 <p>
前回途中でわからなくなったので、また読み始めた。
</p>
</div>
</div>
 <div id="outline-container-orgc8c02de" class="outline-3">
 <h3 id="orgc8c02de"> <a href="#orgc8c02de"> <span class="done CLOSE">CLOSE</span> Len()の仕組み    <span class="tag"> <span class="DontKnow">DontKnow</span></span></a></h3>
 <div class="outline-text-3" id="text-orgc8c02de">
 <p>
スライスなどの長さを調べるLen()はどういう実装になっているのだろうか。組み込みだから、ほかの関数とは異なりそう。
</p>

 <div class="org-src-container">
 <pre class="src src-git-permalink">https://github.com/kd-collective/go/blob/9b8750f53ed89fb326e4d811524e647683136bac/src/builtin/builtin.go#L161-L173
</pre>
</div>

 <div class="results" id="orge65101c">
 <p>
 <i>/ The len built-in function returns the length of v, according to its type:
/</i>
 <i>/	Array: the number of elements in v.
/</i> Pointer to array: the number of elements in *v (even if v is nil).
 <i>/	Slice, or map: the number of elements in v; if v is nil, len(v) is zero.
/</i> String: the number of bytes in v.
 <i>/	Channel: the number of elements queued (unread) in the channel buffer;
/</i>          if v is nil, len(v) is zero.
 <i>/
/</i> For some arguments, such as a string literal or a simple array expression, the
 <i>/ result can be a constant. See the Go language specification’s "Length and
/</i> capacity" section for details.
func len(v Type) int
</p>

</div>
</div>
</div>
</div>
 <div id="outline-container-org25b436a" class="outline-2">
 <h2 id="org25b436a"> <a href="#org25b436a">Backlinks</a></h2>
 <div class="outline-text-2" id="text-org25b436a">
 <ul class="org-ul"> <li> <a href="./20210615222732-project.html">project</a></li>
 <li> <a href="./20210805005543-docker.html">Docker</a></li>
 <li> <a href="./20210817003906-history.html">History</a></li>
 <li> <a href="./20210911113057-go.html">Go</a></li>
 <li> <a href="./20210926151212-computer_science.html">Computer Science</a></li>
 <li> <a href="./20211107104950-linter.html">Linter</a></li>
 <li> <a href="./20221118T002048--kdoc-5-fmtを読む__project.html">KDOC 5: fmtを読む</a></li>
 <li> <a href="./20221119T014335--kdoc-7-ドローン・地図関係の会社に入社した__essay.html">KDOC 7: ドローン・地図関係の会社に入社した</a></li>
 <li> <a href="./20221201T225506--kdoc-8-レビューツール-メモ__project.html">KDOC 8: レビューツール メモ</a></li>
 <li> <a href="./20221211T125426--kdoc-11-unitcheckerを読む__project.html">KDOC 11: unitcheckerを読む</a></li>
 <li> <a href="./20221217T192846--kdoc-13-make2helpを読む__project.html">KDOC 13: make2helpを読む</a></li>
 <li> <a href="./20230101T175751--kdoc-16-2022年のまとめ__essay.html">KDOC 16: 2022年のまとめ</a></li>
 <li> <a href="./20230319T130040--kdoc-24-ゲームボーイエミュレータを作る__project.html">KDOC 24: ゲームボーイエミュレータを作る</a></li>
 <li> <a href="./20230326190222-ebitengine.html">Ebitengine</a></li>
 <li> <a href="./20231014T171444--kdoc-46-goの宣言構文がcと異なる理由__wiki.html">KDOC 46: Goの宣言構文がCと異なる理由</a></li>
 <li> <a href="./20231103T214003--kdoc-52-goで構造体がインターフェースを実装しているか確認する__wiki.html">KDOC 52: Goで構造体がインターフェースを実装しているか確認する</a></li>
 <li> <a href="./20231103T214045--kdoc-53-goで独自定義のエラーをconstにする__wiki.html">KDOC 53: Goで独自定義のエラーをconstにする</a></li>
 <li> <a href="./20231104T094840--kdoc-54-goのiotaの仕組み__wiki.html">KDOC 54: Goのiotaの仕組み</a></li>
 <li> <a href="./20231108T131646--kdoc-55-giteaのコードを読んだメモ__project.html">KDOC 55: giteaのコードを読んだメモ</a></li>
 <li> <a href="./20231111T135147--kdoc-56-flagrのコードを読んだメモ__project.html">KDOC 56: flagrのコードを読んだメモ</a></li>
 <li> <a href="./20231118T023047--kdoc-58-仕事でやるのが一番早い__essay.html">KDOC 58: 仕事でやるのが一番早い</a></li>
 <li> <a href="./20240129T011433--kdoc-65-『go-changes』__book.html">KDOC 65: 『Go Changes』</a></li>
 <li> <a href="./20240130T235419--kdoc-66-通知ビューワを作る__project.html">KDOC 66: 通知ビューワを作る</a></li>
 <li> <a href="./20240203T020208--kdoc-67-2023年のまとめ__essay.html">KDOC 67: 2023年のまとめ</a></li>
 <li> <a href="./20240209T005055--kdoc-82-errorsunwrapを読む__wiki.html">KDOC 82: errors.Unwrapを読む</a></li>
 <li> <a href="./20240210T220439--kdoc-86-errorsisの比較ロジック__wiki.html">KDOC 86: errors.Is()の比較ロジック</a></li>
 <li> <a href="./20240214T224307--kdoc-95-なぜjsonunmarshalの引数はバイト列なのか__wiki.html">KDOC 95: なぜjson.Unmarshalの引数はバイト列なのか</a></li>
 <li> <a href="./20240217T002258--kdoc-96-errorsasの使い方__wiki.html">KDOC 96: errors.As()の使い方</a></li>
 <li> <a href="./20240224T030106--kdoc-104-やりたいことが多すぎる__essay.html">KDOC 104: やりたいことが多すぎる</a></li>
 <li> <a href="./20240301T205049--kdoc-115-負の値が関わる剰余挙動の違い__wiki.html">KDOC 115: 負の値が関わる剰余挙動の違い</a></li>
 <li> <a href="./20240313T221722--kdoc-121-goでローカルパッケージをインストールする__wiki.html">KDOC 121: Goでローカルパッケージをインストールする</a></li>
 <li> <a href="./20240315T114639--kdoc-123-handlefuncとは何か__wiki.html">KDOC 123: HandleFuncとは何か</a></li>
 <li> <a href="./20240316T132944--kdoc-124-go-dlvelを使う__wiki.html">KDOC 124: go-dlv.elを使う</a></li>
 <li> <a href="./20240421T010312--kdoc-138-goプロファイラの使いかた__wiki.html">KDOC 138: Goプロファイラの使いかた</a></li>
 <li> <a href="./20240429T125828--kdoc-145-見てわかるgoアセンブリの違い__wiki.html">KDOC 145: 見てわかるGoアセンブリの違い</a></li>
 <li> <a href="./20240501T161813--kdoc-151-goコンパイラの定数式の埋め込みをみる__wiki.html">KDOC 151: Goコンパイラの定数式の埋め込みをみる</a></li>
 <li> <a href="./20240608T113006--kdoc-188-『visual-guide-to-slices-in-go』__book.html">KDOC 188: 『Visual Guide to Slices in Go』</a></li>
 <li> <a href="./20240612T011737--kdoc-189-goでスライスがどのように保存されているか調べる__wiki.html">KDOC 189: Goでスライスがどのように保存されているか調べる</a></li>
 <li> <a href="./20241010T004623--kdoc-253-goでn段階に可変長引数を渡す__wiki.html">KDOC 253: GoでN段階に可変長引数を渡す</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20210911113057-go.html"/>
  <id>https://kijimad.github.io/roam/20210911113057-go.html</id>
  <updated>2025-06-14T00:00:00+09:00</updated>
</entry>
<entry>
  <title>Erlang</title>
  <author><name>root</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org1b62bd3" class="outline-2">
 <h2 id="org1b62bd3"> <a href="#org1b62bd3">概要</a></h2>
 <div class="outline-text-2" id="text-org1b62bd3">
 <p>
Erlangは平行処理指向の関数型 <a href="20210509101246-programming_language.html#ID-868ac56a-2d42-48d7-ab7f-7047c85a8f39">Programming Language</a>。
</p>
</div>
</div>
 <div id="outline-container-orgf6aa707" class="outline-2">
 <h2 id="orgf6aa707"> <a href="#orgf6aa707">Memo</a></h2>
</div>
 <div id="outline-container-orge003216" class="outline-2">
 <h2 id="orge003216"> <a href="#orge003216">Tasks</a></h2>
</div>
 <div id="outline-container-org80cc0e5" class="outline-2">
 <h2 id="org80cc0e5"> <a href="#org80cc0e5">Reference</a></h2>
</div>
 <div id="outline-container-org993c06d" class="outline-2">
 <h2 id="org993c06d"> <a href="#org993c06d">Archives</a></h2>
</div>


 <div id="outline-container-orgef24922" class="outline-2">
 <h2 id="orgef24922"> <a href="#orgef24922">Backlinks</a></h2>
 <div class="outline-text-2" id="text-orgef24922">
 <ul class="org-ul"> <li> <a href="./20220108103722-elixir.html">Elixir</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20210911153752-erlang.html"/>
  <id>https://kijimad.github.io/roam/20210911153752-erlang.html</id>
  <updated>2025-06-14T00:00:00+09:00</updated>
</entry>
<entry>
  <title>LISP</title>
  <author><name>root</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org1d1f3d5" class="outline-2">
 <h2 id="org1d1f3d5"> <a href="#org1d1f3d5">概要</a></h2>
 <div class="outline-text-2" id="text-org1d1f3d5">
 <p>
LISPは <a href="20210509101246-programming_language.html#ID-868ac56a-2d42-48d7-ab7f-7047c85a8f39">Programming Language</a>。1958年に登場して以来、多数の方言が存在し、
現在も使われ続けている。
</p>

 <ul class="org-ul"> <li> <a href="20210926152425-common_lisp.html#ID-2337587f-0d95-484f-922a-f4cca1ace49e">Common Lisp</a></li>
 <li> <a href="20210926144913-scheme.html#ID-53a7a781-8398-4069-8735-6ac5b8c3bc05">Scheme</a></li>
 <li> <a href="20210509122633-emacs_lisp.html#ID-c7e81fac-9f8b-4538-9851-21d4ff3c2b08">Emacs Lisp</a></li>
</ul></div>
</div>
 <div id="outline-container-org9ee4b7a" class="outline-2">
 <h2 id="org9ee4b7a"> <a href="#org9ee4b7a">Memo</a></h2>
 <div class="outline-text-2" id="text-org9ee4b7a">
</div>
 <div id="outline-container-org6924a41" class="outline-3">
 <h3 id="org6924a41"> <a href="#org6924a41"></a> <a href="20210508234743-emacs.html#ID-1ad8c3d5-97ba-4905-be11-e6f2626127ad">Emacs</a>での実行環境準備</h3>
 <div class="outline-text-3" id="text-org6924a41">
 <p>
例えばCommon Lispの実装の1つSBCL(Steel Bank Common Lisp)を使用する方法。
 <a href="20210508234743-emacs.html#ID-1ad8c3d5-97ba-4905-be11-e6f2626127ad">Emacs</a>のラッパーライブラリはSLIME。起動からコンソール画面表示までやってくれる。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 1: </span>SBCLをインストール</label> <pre class="src src-shell">$ <span class="org-variable-name">sudo</span> apt-get install sbcl
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 2: </span>SBCLを選択</label> <pre class="src src-emacs-lisp">( <span class="org-keyword">setq</span> inferior-lisp-program  <span class="org-string">"sbcl"</span>)
</pre>
</div>
 <p>
を評価。
 <code>M-x slime</code> で、接続して使用できるようになる。
</p>
</div>
</div>
</div>
 <div id="outline-container-orgde0902c" class="outline-2">
 <h2 id="orgde0902c"> <a href="#orgde0902c">Tasks</a></h2>
 <div class="outline-text-2" id="text-orgde0902c">
</div>
 <div id="outline-container-org20a70f0" class="outline-3">
 <h3 id="org20a70f0"> <a href="#org20a70f0"> <span class="todo TODO">TODO</span> </a> <a href="https://www.amazon.co.jp/-/en/%E7%AC%B9%E5%B7%9D-%E8%B3%A2%E4%B8%80-ebook/dp/B01B1FYQVQ/?_encoding=UTF8&pd_rd_w=eNfAv&pf_rd_p=5ce033f0-5b81-46ec-8910-385cc2abff14&pf_rd_r=XQTYBYBT7WDGZDYXJ1F3&pd_rd_r=cc740f97-a72c-4bcc-a32f-c926d52344fe&pd_rd_wg=njTzq&ref_=pd_gw_ci_mcx_mr_hp_d">Amazon.co.jp: やさしいLispの作り方: C言語で作るミニミニLisp処理系 eBook : 笹川 賢一: Kindle Store</a>    <span class="tag"> <span class="Read">Read</span></span></h3>
</div>
 <div id="outline-container-orgc8ca196" class="outline-3">
 <h3 id="orgc8ca196"> <a href="#orgc8ca196"> <span class="todo TODO">TODO</span> </a> <a href="http://www.asahi-net.or.jp/~kc7k-nd/">On Lisp日本語訳 草稿置き場</a></h3>
 <div class="outline-text-3" id="text-orgc8ca196">
 <p>
マクロの書き方の詳しい解説。
</p>
</div>
</div>
 <div id="outline-container-org64974c4" class="outline-3">
 <h3 id="org64974c4"> <a href="#org64974c4"> <span class="todo TODO">TODO</span> </a> <a href="https://www.vocrf.net/docs_ja/jsicp.pdf">SICP非公式日本語版 翻訳改訂版</a></h3>
 <div class="outline-text-3" id="text-org64974c4">
 <p>
↓の訳(かなりよくないよう)の全面改良版。
</p>
</div>
</div>
 <div id="outline-container-org8c08972" class="outline-3">
 <h3 id="org8c08972"> <a href="#org8c08972"> <span class="todo TODO">TODO</span> </a> <a href="https://sicp.iijlab.net/fulltext/xcont.html">計算機プログラムの構造と解釈 第二版</a></h3>
 <div class="outline-text-3" id="text-org8c08972">
 <p>
通称SICP、 <a href="20210926151212-computer_science.html#ID-e3b48a23-21bc-4cdf-8395-052fab9fecb5">Computer Science</a>で有名な本。
</p>
</div>
</div>
 <div id="outline-container-org0e8e147" class="outline-3">
 <h3 id="org0e8e147"> <a href="#org0e8e147"> <span class="todo TODO">TODO</span> マンガで分かるLisp</a></h3>
 <div class="outline-text-3" id="text-org0e8e147">
 <ul class="org-ul"> <li> <a href="http://lambda.bugyo.tk/cdr/mwl/">http://lambda.bugyo.tk/cdr/mwl/</a></li>
 <li> <a href="http://www.inf.ufsc.br/~aldo.vw/func/cl-quick-reference.pdf">wilburs-lisp-intro.dvi</a></li>
</ul></div>
</div>
</div>
 <div id="outline-container-org8702f73" class="outline-2">
 <h2 id="org8702f73"> <a href="#org8702f73">Reference</a></h2>
 <div class="outline-text-2" id="text-org8702f73">
</div>
 <div id="outline-container-org87ffd84" class="outline-3">
 <h3 id="org87ffd84"> <a href="#org87ffd84"></a> <a href="https://www.amazon.com/Lisp-Small-Pieces-Christian-Queinnec-ebook-dp-B00AKE1U6O/dp/B00AKE1U6O/ref=mt_other?_encoding=UTF8&me=&qid=">Lisp in Small Pieces , Queinnec, Christian, Callaway, Kathleen, eBook - Amazon.com</a></h3>
 <div class="outline-text-3" id="text-org87ffd84">
 <p>
コンパイラの章があるよう。
</p>
</div>
</div>
</div>
 <div id="outline-container-orgcadee87" class="outline-2">
 <h2 id="orgcadee87"> <a href="#orgcadee87">Archives</a></h2>
</div>


 <div id="outline-container-org41c2a27" class="outline-2">
 <h2 id="org41c2a27"> <a href="#org41c2a27">Backlinks</a></h2>
 <div class="outline-text-2" id="text-org41c2a27">
 <ul class="org-ul"> <li> <a href="./20210509095513-ruby.html">Ruby</a></li>
 <li> <a href="./20210910122240-bookmarks.html">bookmarks</a></li>
 <li> <a href="./20210926143813-clojure.html">Clojure</a></li>
 <li> <a href="./20210926144913-scheme.html">Scheme</a></li>
 <li> <a href="./20210926152425-common_lisp.html">Common Lisp</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20210911183844-lisp.html"/>
  <id>https://kijimad.github.io/roam/20210911183844-lisp.html</id>
  <updated>2025-06-14T00:00:00+09:00</updated>
</entry>
<entry>
  <title>dotfiles</title>
  <author><name>root</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org53aabc3" class="outline-2">
 <h2 id="org53aabc3"> <a href="#org53aabc3">概要</a></h2>
 <div class="outline-text-2" id="text-org53aabc3">
 <p>
Linux系のプログラムでは、dotfileと呼ばれる  <code>.</code> から始まるプレーンテキストで設定を書くことが多い。
</p>

 <ul class="org-ul"> <li> <a href="20210901104129-git.html#ID-90c6b715-9324-46ce-a354-63d09403b066">Git</a>管理できる</li>
 <li>別のマシンでも全く同じ環境を作り出すことができる</li>
</ul> <p>
などのメリットがある。
</p>

 <p>
 <a href="https://github.com/kijimaD/dotfiles">kijimaD/dotfiles: System settings</a>
</p>
</div>
</div>
 <div id="outline-container-org9a5840c" class="outline-2">
 <h2 id="org9a5840c"> <a href="#org9a5840c">Memo</a></h2>
 <div class="outline-text-2" id="text-org9a5840c">
</div>
 <div id="outline-container-org8fbf30c" class="outline-3">
 <h3 id="org8fbf30c"> <a href="#org8fbf30c">QEMU(仮想デスクトップ環境)</a></h3>
 <div class="outline-text-3" id="text-org8fbf30c">
 <p>
新しい <a href="20220108110637-linux.html#ID-7a81eb7c-8e2b-400a-b01a-8fa597ea527a">Linux</a>ディストリビューションを試すときや、設定を変更するときは仮想マシン上で行ったほうがいい。
気軽に試せるし、再現性が高い。緊密なフィードバックループがあるとき開発は効率的になる。
</p>

 <p>
逆にマシン本体へのインストールだと、設定変更や壊れたときの対応が面倒。
マシン本体へのインストールは本番環境みたいなもので、すばやく試すのには向いてないし、壊れたときがさらに面倒。
</p>
</div>
</div>
 <div id="outline-container-orgad2ebfe" class="outline-3">
 <h3 id="orgad2ebfe"> <a href="#orgad2ebfe"></a> <a href="20210525005710-gnu_guix.html#ID-d694ecaa-6a8b-4669-a95c-f76de6dcbd2c">GNU Guix</a>を仮想マシンで起動する</h3>
 <div class="outline-text-3" id="text-orgad2ebfe">
 <p>
 <a href="20210525005710-gnu_guix.html#ID-d694ecaa-6a8b-4669-a95c-f76de6dcbd2c">GNU Guix </a> <a href="https://www.youtube.com/watch?v=7ZdMRLPZhFs">5 Reasons to Try Guix in 2022 - YouTube</a>
</p>
 <div class="org-src-container">
 <pre class="src src-shell">sudo apt install qemu-kvm
qemu-system-x86_64  <span class="org-sh-escaped-newline">\</span>
    -nic user, <span class="org-variable-name">model</span>=virtio-net-pci  <span class="org-sh-escaped-newline">\</span>
    -enable-kvm -m 2048  <span class="org-sh-escaped-newline">\</span>
    -device virtio-blk, <span class="org-variable-name">drive</span>=guix-demo  <span class="org-sh-escaped-newline">\</span>
    -drive  <span class="org-variable-name">if</span>=none, <span class="org-variable-name">file</span>=$ <span class="org-variable-name">HOME</span>/Downloads/guix-vm.qcow2, <span class="org-variable-name">id</span>=guix-demo  <span class="org-sh-escaped-newline">\</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-org520826a" class="outline-3">
 <h3 id="org520826a"> <a href="#org520826a">Windowsを仮想マシンで起動する</a></h3>
 <div class="outline-text-3" id="text-org520826a">
 <p>
 <a href="https://qiita.com/Hiroki_Kawakami/items/b18f6c50df4ce215e40d">無料のWindows仮想マシンをQEMUで動かす - Qiita</a>
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 1: </span>Hyper-V用のイメージWin10.vhdxを用意して起動する</label> <pre class="src src-shell">qemu-system-x86_64 -m 4096 -smp 2 -hda MSEdge <span class="org-string">\ </span>- <span class="org-string">\ </span>Win10.vhdx -enable-kvm
</pre>
</div>

 <p>
 <a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/">配布サイト</a>に記載のように、パスワードは  <code>Passw0rd!</code> 。
仮想マシンのフォーカスを抜けるにはCtrl + Alt + g。
</p>
</div>
</div>
</div>
 <div id="outline-container-org0a9e4a7" class="outline-2">
 <h2 id="org0a9e4a7"> <a href="#org0a9e4a7">好みのOSを作る</a></h2>
 <div class="outline-text-2" id="text-org0a9e4a7">
 <p>
カスタマイズ性の高いソフトを組み合わせて、再現性の高い最高のシステムを作る。
Guixは土台になる。
だいたい <a href="20210915221421-systemcrafters.html#ID-fa497359-ae3f-494a-b24a-9822eefe67ad">System Crafters</a>の情報がベースになってる。
</p>

 <ul class="org-ul"> <li>プレーンテキストでの設定</li>
 <li>柔軟な設定</li>
 <li>コードがオープン</li>
 <li>キーボード指向</li>
</ul></div>
 <div id="outline-container-org3f0c6b5" class="outline-3">
 <h3 id="org3f0c6b5"> <a href="#org3f0c6b5"></a> <a href="20210525005710-gnu_guix.html#ID-d694ecaa-6a8b-4669-a95c-f76de6dcbd2c">GNU Guix</a></h3>
 <div class="outline-text-3" id="text-org3f0c6b5">
 <p>
パッケージ管理システム。
</p>
</div>
</div>
 <div id="outline-container-org2225205" class="outline-3">
 <h3 id="org2225205"> <a href="#org2225205">GNU </a> <a href="20210508234743-emacs.html#ID-1ad8c3d5-97ba-4905-be11-e6f2626127ad">Emacs</a></h3>
 <div class="outline-text-3" id="text-org2225205">
 <p>
環境。
</p>
</div>
</div>
 <div id="outline-container-org9e5afd0" class="outline-3">
 <h3 id="org9e5afd0"> <a href="#org9e5afd0">GNU Stow</a></h3>
 <div class="outline-text-3" id="text-org9e5afd0">
 <p>
設定ファイル管理ツール。
シンボリックリンクを管理してくれる。
</p>
</div>
</div>
 <div id="outline-container-org18b8abf" class="outline-3">
 <h3 id="org18b8abf"> <a href="#org18b8abf">GNU Shepherd</a></h3>
 <div class="outline-text-3" id="text-org18b8abf">
 <p>
サービス管理ツール。
</p>
</div>
</div>
 <div id="outline-container-orge195c62" class="outline-3">
 <h3 id="orge195c62"> <a href="#orge195c62">GNU Make</a></h3>
 <div class="outline-text-3" id="text-orge195c62">
 <p>
古代からのビルド用ツール。タスク定義をドキュメント化するのに使う。
</p>
</div>
</div>
 <div id="outline-container-org63edc01" class="outline-3">
 <h3 id="org63edc01"> <a href="#org63edc01">nyxt</a></h3>
 <div class="outline-text-3" id="text-org63edc01">
 <p>
完全キーボードでのインターネットブラウジングを可能にする。
</p>
</div>
</div>
 <div id="outline-container-org6a3d40b" class="outline-3">
 <h3 id="org6a3d40b"> <a href="#org6a3d40b">i3-wm</a></h3>
 <div class="outline-text-3" id="text-org6a3d40b">
 <p>
どうしてもEmacsで日本語入力ができない。
ibusが特定アプリで動作しない不具合にあたっている。
gnomeでは完全にできるので、自動でやってくれてるところがあるよう。
Emacs上ではskkを使うようにして解決。Emacs以外では普通に入力すればいい。
</p>

 <p>
ドキュメント
 <a href="https://i3wm.org/docs/userguide.html#_hiding_vertical_borders">https://i3wm.org/docs/userguide.html#_hiding_vertical_borders</a>
</p>

 <ul class="org-ul"> <li>close window:  <code>Mod + Shift + q</code></li>
</ul></div>
</div>
 <div id="outline-container-orgd13583c" class="outline-3">
 <h3 id="orgd13583c"> <a href="#orgd13583c">polybar</a></h3>
 <div class="outline-text-3" id="text-orgd13583c">
 <p>
柔軟に設定できるメニューバー。
</p>
</div>
</div>
 <div id="outline-container-orga7764da" class="outline-3">
 <h3 id="orga7764da"> <a href="#orga7764da">compton</a></h3>
 <div class="outline-text-3" id="text-orga7764da">
 <p>
Emacs側で透過設定しても字が薄くなって微妙だが、ウィンドウ側でやると綺麗にできる。
また、ほかのアプリケーションを透過できて統一感がある。かっこいい。
</p>
</div>
</div>
 <div id="outline-container-orgc6c1ebf" class="outline-3">
 <h3 id="orgc6c1ebf"> <a href="#orgc6c1ebf">feh</a></h3>
 <div class="outline-text-3" id="text-orgc6c1ebf">
 <p>
背景を設定する。
</p>
 <div class="org-src-container">
 <pre class="src src-shell">feh --bg-fill -Zr ~/dotfiles/backgrounds/4k-Ultra-HD_00330.jpg
</pre>
</div>
</div>
</div>
 <div id="outline-container-org074c724" class="outline-3">
 <h3 id="org074c724"> <a href="#org074c724">dunst</a></h3>
 <div class="outline-text-3" id="text-org074c724">
 <p>
 <a href="https://github.com/dunst-project/dunst">dunst-project/dunst: Lightweight and customizable notification daemon</a>
通知機能が入ってないウィンドウシステムでは( <a href="20210905140122-exwm.html#ID-eb196529-bdbd-48c5-9d5b-a156fe5c2f41">EXWM</a>とか)、これを組み合わせて通知する。
</p>
</div>
</div>
</div>
 <div id="outline-container-orgf1448c6" class="outline-2">
 <h2 id="orgf1448c6"> <a href="#orgf1448c6">Tasks</a></h2>
 <div class="outline-text-2" id="text-orgf1448c6">
</div>
 <div id="outline-container-orgced02c7" class="outline-3">
 <h3 id="orgced02c7"> <a href="#orgced02c7"> <span class="todo TODO">TODO</span> インストールスクリプトを個別実行できるようにする</a></h3>
 <div class="outline-text-3" id="text-orgced02c7">
 <p>
1つ1つ実行できると便利そうなので。
</p>
</div>
</div>
 <div id="outline-container-org007070f" class="outline-3">
 <h3 id="org007070f"> <a href="#org007070f"> <span class="todo TODO">TODO</span> フォント追加タスクを作成する</a></h3>
 <div class="outline-text-3" id="text-org007070f">
 <p>
nerd-fontsをインストールする。cloneしてきて、スクリプトを実行する。
</p>

 <div class="org-src-container">
 <pre class="src src-shell">./install.sh
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgb2c36f1" class="outline-3">
 <h3 id="orgb2c36f1"> <a href="#orgb2c36f1"> <span class="todo TODO">TODO</span> インストールタスクが壊れてるのを直す</a></h3>
 <div class="outline-text-3" id="text-orgb2c36f1">
 <p>
イメージからインストールする前提でMakeタスクのいくつかを消しているので、手動でインストールするときは大変面倒なことになっている。直す。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 2: </span>org-roamを使うときに必要だった</label> <pre class="src src-shell">sudo apt install libsqlite3-dev
</pre>
</div>
</div>
</div>
 <div id="outline-container-org91b7a29" class="outline-3">
 <h3 id="org91b7a29"> <a href="#org91b7a29"> <span class="todo TODO">TODO</span> DBeaverインストール</a></h3>
 <div class="outline-text-3" id="text-org91b7a29">
 <p>
閲覧に便利なdbクライアントをインストールする。
</p>
</div>
</div>
 <div id="outline-container-org6b25654" class="outline-3">
 <h3 id="org6b25654"> <a href="#org6b25654"> <span class="todo TODO">TODO</span> strategyを設定する</a></h3>
 <div class="outline-text-3" id="text-org6b25654">
 <p>
ubuntu22.04, ubuntu20.04, xubuntuを同時にテストできるようにしたい。できないにしても、動作確認には役立つ…か。少なくともデグレは防げる。
</p>
</div>
</div>
 <div id="outline-container-orgcb17c8c" class="outline-3">
 <h3 id="orgcb17c8c"> <a href="#orgcb17c8c"> <span class="todo TODO">TODO</span> イメージを22.04に上げる</a></h3>
 <div class="outline-text-3" id="text-orgcb17c8c">
 <p>
今は20.04。
</p>
</div>
</div>
 <div id="outline-container-org630c2d0" class="outline-3">
 <h3 id="org630c2d0"> <a href="#org630c2d0"> <span class="todo TODO">TODO</span> dist-upgradeする</a></h3>
 <div class="outline-text-3" id="text-org630c2d0">
 <p>
22.04をイメージのベースにするのが厳しそうなので、妥協してdist-upgradeを走らせる。
</p>

 <p>
どうしてもアップデートの途中で止まってしまう。
</p>
</div>
</div>
 <div id="outline-container-org810cd03" class="outline-3">
 <h3 id="org810cd03"> <a href="#org810cd03"> <span class="todo TODO">TODO</span> イメージ展開用のmakeタスクを作成</a></h3>
 <div class="outline-text-3" id="text-org810cd03">
 <p>
動作検証で頻繁にやるので。
</p>
</div>
</div>
</div>
 <div id="outline-container-org43d785a" class="outline-2">
 <h2 id="org43d785a"> <a href="#org43d785a">Reference</a></h2>
 <div class="outline-text-2" id="text-org43d785a">
</div>
 <div id="outline-container-org8ec5196" class="outline-3">
 <h3 id="org8ec5196"> <a href="#org8ec5196"></a> <a href="https://config.daviwil.com/desktop">Desktop Environment - config.daviwil.com</a></h3>
 <div class="outline-text-3" id="text-org8ec5196">
 <p>
すごいdotfile。
</p>
</div>
</div>
 <div id="outline-container-org8698078" class="outline-3">
 <h3 id="org8698078"> <a href="#org8698078"></a> <a href="https://gitlab.com/dnsmichi/dotfiles">Michael Friedrich / dotfiles · GitLab</a></h3>
 <div class="outline-text-3" id="text-org8698078">
 <p>
dotfilesの例。
</p>
</div>
</div>
 <div id="outline-container-org6bcca31" class="outline-3">
 <h3 id="org6bcca31"> <a href="#org6bcca31"></a> <a href="https://sachachua.com/dotemacs/">Sacha Chua’s Emacs configuration</a>(Sacha Chua)</h3>
 <div class="outline-text-3" id="text-org6bcca31">
 <p>
Emacsで有名な人のdotfiles。設定が莫大。
</p>
</div>
</div>
 <div id="outline-container-org7d65552" class="outline-3">
 <h3 id="org7d65552"> <a href="#org7d65552"></a> <a href="https://sqrtminusone.xyz/configs/readme/">My dotfiles</a>(SqrtMinusOne)</h3>
 <div class="outline-text-3" id="text-org7d65552">
 <p>
Emacs界隈でよく見かける人。グラフ化していて良い。
</p>
</div>
</div>
 <div id="outline-container-org31a61ef" class="outline-3">
 <h3 id="org31a61ef"> <a href="#org31a61ef"></a> <a href="https://mvallim.github.io/live-custom-ubuntu-from-scratch/">How to create a custom Ubuntu live from scratch | live-custom-ubuntu-from-scratch</a></h3>
 <div class="outline-text-3" id="text-org31a61ef">
 <p>
スクラッチでブータブルイメージを作る。
</p>
</div>
</div>
</div>
 <div id="outline-container-orge117c08" class="outline-2">
 <h2 id="orge117c08"> <a href="#orge117c08">Archives</a></h2>
 <div class="outline-text-2" id="text-orge117c08">
</div>
 <div id="outline-container-org6118fee" class="outline-3">
 <h3 id="org6118fee"> <a href="#org6118fee"> <span class="done DONE">DONE</span> dotfilesをCIテストする</a></h3>
 <div class="outline-text-3" id="text-org6118fee">
 <p>

</p>
 <ul class="org-ul"> <li> <a href="https://uu64.me/blog/2020/11/dotfiles">Github Actions を使って dotfiles の CI を Ubuntu/macOS 上で実行する | uu64.me</a></li>
</ul> <p>
テスト、Lintはセットしたが、実行時エラーが解消できない。guixに依存した  <code>.bash_profile</code> なんだよな。
</p>
</div>
</div>
 <div id="outline-container-org6251bcb" class="outline-3">
 <h3 id="org6251bcb"> <a href="#org6251bcb"> <span class="done DONE">DONE</span> </a> <a href="20210805005543-docker.html#ID-1658782a-d331-464b-9fd7-1f8233b8b7f8">Docker</a>でテストする</h3>
 <div class="outline-text-3" id="text-org6251bcb">
 <p>
クリーンな環境で一連のインストール作業ができるかチェックすると安心だろう。
 <a href="20210525005710-gnu_guix.html#ID-d694ecaa-6a8b-4669-a95c-f76de6dcbd2c">GNU Guix</a>関連をどうするかで詰まっている。使いこなせれば <a href="20210805005543-docker.html#ID-1658782a-d331-464b-9fd7-1f8233b8b7f8">Docker</a>でやる必要はなくなるはずだが。
docker ubuntuではsystemctlが起動できないようになっているなので、 <a href="20210525005710-gnu_guix.html#ID-d694ecaa-6a8b-4669-a95c-f76de6dcbd2c">GNU Guix</a>が起動せず、依存関係が満たせない。
GitHub Actionでは実行できるのでそれでやった。実行テストさえできればいいだろう。
</p>
</div>
</div>
 <div id="outline-container-org23af23e" class="outline-3">
 <h3 id="org23af23e"> <a href="#org23af23e"> <span class="done DONE">DONE</span> dotfilesにSSH設定の例を追加する</a></h3>
 <div class="outline-text-3" id="text-org23af23e">
 <p>
少なくとも例だけのせておくと便利だろう。
環境を楽に選択できるようconfigを設定する。
 <a href="https://qiita.com/hkak03key/items/3b0c4752bfbcc52e676d">https://qiita.com/hkak03key/items/3b0c4752bfbcc52e676d</a>
</p>
</div>
</div>
 <div id="outline-container-orgd31e1da" class="outline-3">
 <h3 id="orgd31e1da"> <a href="#orgd31e1da"> <span class="done DONE">DONE</span> インストールディスクを作成する(いちいち最初からするのが面倒なので)</a></h3>
 <div class="outline-text-3" id="text-orgd31e1da">
 <p>
すべて整備された状態でクリーンインストールできるようにしたい。イメージを作るとかそういうのができるはず。system.scmではパーティションやユーザ名を入力するのだから。
</p>

 <ul class="org-ul"> <li> <a href="https://github.com/daviwil/dotfiles/blob/master/Systems.org#system-installation">system-installation</a></li>
 <li> <a href="https://qiita.com/misohagi/items/4443fcc495366c717c38">GitHub ActionsでカスタマイズしたUbuntuのISOイメージを作る - Qiita</a></li>
 <li> <a href="https://rohhie.net/ubuntu20-04-try-to-make-a-live-cd-from-scratch-basic/">Ubuntu20.04 Live CDを作ってみる 基本編 | ろっひー</a></li>
</ul> <p>
可能なことは確かだが、全然わからない。
</p>
</div>
</div>
 <div id="outline-container-orgac20e7f" class="outline-3">
 <h3 id="orgac20e7f"> <a href="#orgac20e7f"> <span class="done CLOSE">CLOSE</span> mozcのdotfilesを用意する</a></h3>
 <div class="outline-text-3" id="text-orgac20e7f">
 <p>
configファイルはないようだ。なのでファイル管理できない。
</p>
</div>
</div>
 <div id="outline-container-org3cfbe3b" class="outline-3">
 <h3 id="org3cfbe3b"> <a href="#org3cfbe3b"> <span class="done DONE">DONE</span> 色を変えて再起動するpolybar設定</a></h3>
 <div class="outline-text-3" id="text-org3cfbe3b">
</div>
</div>
 <div id="outline-container-orgd460461" class="outline-3">
 <h3 id="orgd460461"> <a href="#orgd460461"> <span class="done DONE">DONE</span> polybarとpomodoroを連携させる</a></h3>
 <div class="outline-text-3" id="text-orgd460461">
 <ul class="org-ul"> <li> <a href="https://colekillian.com/posts/org-pomodoro-and-polybar/">Org Pomodoro and Polybar - Cole Killian Adventure</a></li>
</ul> <p>
改良してゲージ型にした。
全体カウント機能を追加した。一日ごとにリセットする。
</p>
</div>
</div>
 <div id="outline-container-org89796b8" class="outline-3">
 <h3 id="org89796b8"> <a href="#org89796b8"> <span class="done DONE">DONE</span> </a> <a href="20210805005543-docker.html#ID-1658782a-d331-464b-9fd7-1f8233b8b7f8">Docker</a>で動作チェックできるようにする</h3>
 <div class="outline-text-3" id="text-org89796b8">
 <p>
クリーンな環境でうまくいっているかチェックしたい。
Guix関連が難しく、詰まっている。
</p>
</div>
</div>
 <div id="outline-container-org9addeda" class="outline-3">
 <h3 id="org9addeda"> <a href="#org9addeda"> <span class="done DONE">DONE</span> xfce4にする</a></h3>
 <div class="outline-text-3" id="text-org9addeda">
 <p>
 <a href="20210905140122-exwm.html#ID-eb196529-bdbd-48c5-9d5b-a156fe5c2f41">EXWM</a>の関係で、xfceのほうがいい。
</p>
</div>
</div>
 <div id="outline-container-org5cce043" class="outline-3">
 <h3 id="org5cce043"> <a href="#org5cce043"> <span class="done CLOSE">CLOSE</span> emacsをCIで初回起動する</a></h3>
 <div class="outline-text-3" id="text-org5cce043">
 <p>
いろいろ走るので初回が遅い。.emacs.dを指定して起動、とかしたらいいかな。emacs-sqliteのバイナリが見つからないエラーになる。ライブラリが入ってないため、コンパイルが自動でされないよう。
</p>

 <ul class="org-ul"> <li>emacsql-sqlite</li>
</ul> <p>
cコンパイラ(gcc, clang, build-essentialどれでも )をインストールするとemacs-sqliteのコンパイルはできるようになる。だがubuntu自体の起動が失敗する。謎。Ubuntuインストール後、Guixでgccインストール、手動でコンパイルするしかない。めんどくさい。
</p>

 <ul class="org-ul"> <li>vterm</li>
</ul> <p>
いくつかライブラリが必要。ない場合は自動コンパイルが走りわかりやすいエラー文も出るので対処はしやすい。
</p>

 <p>
emacsを起動したイメージでブートすると、ユーザ作成モーダルを抜けられない。何らかの権限的な理由でユーザ作成に失敗しているように見える。
</p>
</div>
</div>
 <div id="outline-container-orgbaf198c" class="outline-3">
 <h3 id="orgbaf198c"> <a href="#orgbaf198c"> <span class="done DONE">DONE</span> caskはタグが打たれたときだけ実行する</a></h3>
 <div class="outline-text-3" id="text-orgbaf198c">
 <p>
実行時間が長いので、開発に支障が出る。
</p>
</div>
</div>
 <div id="outline-container-org8efab8f" class="outline-3">
 <h3 id="org8efab8f"> <a href="#org8efab8f"> <span class="done DONE">DONE</span> URLとファイル名を定数化する</a></h3>
 <div class="outline-text-3" id="text-org8efab8f">
</div>
</div>
 <div id="outline-container-org96ae7ac" class="outline-3">
 <h3 id="org96ae7ac"> <a href="#org96ae7ac"> <span class="done DONE">DONE</span> cloner追加</a></h3>
 <div class="outline-text-3" id="text-org96ae7ac">
 <p>
cargo install clonerを追加する。
</p>

 <ul class="org-ul"> <li>build-essential が入ってないので、ビルドに失敗する</li>
 <li>build-essential を入れるとubiquityが失敗する</li>
</ul></div>
</div>
 <div id="outline-container-org1eec40b" class="outline-3">
 <h3 id="org1eec40b"> <a href="#org1eec40b"> <span class="done CLOSE">CLOSE</span> バージョン情報、gitハッシュ情報をイメージに含める</a></h3>
 <div class="outline-text-3" id="text-org1eec40b">
 <p>
あとから、イメージがどのバージョンなのかわからないので。それ用のファイルはありそうだが。
</p>

 <p>
まあ、USBのパーティションの名前に含めればいいか。
</p>
</div>
</div>
 <div id="outline-container-org998baaf" class="outline-3">
 <h3 id="org998baaf"> <a href="#org998baaf"> <span class="done DONE">DONE</span> qemuを入れる</a></h3>
 <div class="outline-text-3" id="text-org998baaf">
 <p>
使うので。
</p>
</div>
</div>
 <div id="outline-container-org6cd60e5" class="outline-3">
 <h3 id="org6cd60e5"> <a href="#org6cd60e5"> <span class="done DONE">DONE</span> dockerイメージを作る</a></h3>
 <div class="outline-text-3" id="text-org6cd60e5">
 <p>
動作検証できるように、isoからイメージにしておく。
</p>

 <ul class="org-ul"> <li> <a href="https://medium.com/@SofianeHamlaoui/convert-iso-images-to-docker-images-4e1b1b637d75">🐳 Convert ISO images to docker images | by Sofiane Hamlaoui | Medium</a></li>
</ul> <p>
単にtarに固めただけでできた。デバッグやテストもやりやすそうだ。
</p>
</div>
</div>
 <div id="outline-container-org5f0eb8a" class="outline-3">
 <h3 id="org5f0eb8a"> <a href="#org5f0eb8a"> <span class="done DONE">DONE</span> 必須のgoライブラリを入れる</a></h3>
 <div class="outline-text-3" id="text-org5f0eb8a">
 <p>
LSP, DAPを入れる。
</p>

 <p>
ダウンロードすると、起動しなくなる。emacsを起動と同じく、何か特定のことをすると動かなくなる。走らせるとシステムディレクトリに何らかの変更をもたらす場合、動かなくなる可能性。たとえば  <code>go install</code> やemacs起動したとき、ホームディレクトリ以外に何かを保存するとか。
</p>

 <p>
とりあえずisoビルド段階では入れず、makeタスクに追加した。
</p>
</div>
</div>
 <div id="outline-container-org0026e33" class="outline-3">
 <h3 id="org0026e33"> <a href="#org0026e33"> <span class="done DONE">DONE</span> makeタスクを整理</a></h3>
 <div class="outline-text-3" id="text-org0026e33">
 <p>
ブートイメージ化で不要になったものがあったり、逆に必要なものがあったりする。
</p>
</div>
</div>
</div>
 <div id="outline-container-org7cb638f" class="outline-2">
 <h2 id="org7cb638f"> <a href="#org7cb638f">Backlinks</a></h2>
 <div class="outline-text-2" id="text-org7cb638f">
 <ul class="org-ul"> <li> <a href="./20210817003906-history.html">History</a></li>
 <li> <a href="./20211212120517-chore.html">chore</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20210912124846-dotfiles.html"/>
  <id>https://kijimad.github.io/roam/20210912124846-dotfiles.html</id>
  <updated>2025-06-14T00:00:00+09:00</updated>
</entry>
<entry>
  <title>System Crafters</title>
  <author><name>root</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org8760892" class="outline-2">
 <h2 id="org8760892"> <a href="#org8760892">概要</a></h2>
 <div class="outline-text-2" id="text-org8760892">
 <p>
System Craftersは <a href="20210508234743-emacs.html#ID-1ad8c3d5-97ba-4905-be11-e6f2626127ad">Emacs</a>を中心としたテーマを扱うYouTubeコミュニティ。
</p>

 <dl class="org-dl"> <dt>YouTube Channel</dt> <dd> <a href="https://www.youtube.com/channel/UCAiiOTio8Yu69c3XnR7nQBQ">https://www.youtube.com/channel/UCAiiOTio8Yu69c3XnR7nQBQ</a></dd>
 <dt>配信者 David Wilson</dt> <dd> <a href="https://github.com/daviwil">https://github.com/daviwil</a></dd>
</dl></div>
</div>
 <div id="outline-container-org3efc13b" class="outline-2">
 <h2 id="org3efc13b"> <a href="#org3efc13b">Memo</a></h2>
 <div class="outline-text-2" id="text-org3efc13b">
</div>
 <div id="outline-container-org5240f07" class="outline-3">
 <h3 id="org5240f07"> <a href="#org5240f07"></a> <a href="https://www.youtube.com/watch?v=MvNIUnep22g">Crafting a Config Site Generator, Part 2 - System Crafters Live! - YouTube</a></h3>
 <div class="outline-text-3" id="text-org5240f07">
 <p>
静的サイトジェネレータを作る。
</p>
</div>
</div>
 <div id="outline-container-org4dbbea7" class="outline-3">
 <h3 id="org4dbbea7"> <a href="#org4dbbea7"></a> <a href="https://www.youtube.com/watch?v=7FbcaudHTg4">Figuring out First-Class Continuations for Mesche - YouTube</a></h3>
 <div class="outline-text-3" id="text-org4dbbea7">
 <p>
ライブコーディング。
</p>
</div>
</div>
 <div id="outline-container-org759efd0" class="outline-3">
 <h3 id="org759efd0"> <a href="#org759efd0"></a> <a href="https://www.youtube.com/watch?v=2KdBbEtqpY0">Creating a Scripting Language in 5 Days - Live Coding in C - YouTube</a></h3>
 <div class="outline-text-3" id="text-org759efd0">
 <p>
 <a href="20210911104632-c_language.html#ID-656a0aa4-e5d3-416f-82d5-f909558d0639">C言語</a>でスクリプト言語を作るライブコーディング。
</p>
</div>
</div>
 <div id="outline-container-org02f13a4" class="outline-3">
 <h3 id="org02f13a4"> <a href="#org02f13a4"></a> <a href="https://www.youtube.com/watch?v=wqdT0xKMQT8">System Crafters Live! - The Hidden Value of Emacs’ Tab Bar - YouTube</a></h3>
 <div class="outline-text-3" id="text-org02f13a4">
 <p>
新しいYouTubeチャンネル、Flux Harmonicの情報。
 <a href="20210508234743-emacs.html#ID-1ad8c3d5-97ba-4905-be11-e6f2626127ad">Emacs</a>28に追加された機能 Tab Bar。
</p>
</div>
</div>
 <div id="outline-container-orgcc9b377" class="outline-3">
 <h3 id="orgcc9b377"> <a href="#orgcc9b377"></a> <a href="https://www.youtube.com/watch?v=50Vsh4qw-E4">“Inverse Literate” Emacs Configurations - Hack Sessions - YouTube</a></h3>
 <div class="outline-text-3" id="text-orgcc9b377">
 <ul class="org-ul"> <li>configを文書化する。</li>
 <li>outline-modeを使う。</li>
 <li>文芸的に書いた設定をorg->lispで変換する。</li>
</ul></div>
</div>
 <div id="outline-container-org5367acb" class="outline-3">
 <h3 id="org5367acb"> <a href="#org5367acb"></a> <a href="https://www.youtube.com/watch?v=R5cdtSfTpE0">System Crafters Live! - A First Look at Guix Home - YouTube</a></h3>
 <div class="outline-text-3" id="text-org5367acb">
 <ul class="org-ul"> <li>guix home はユーザレベルでデーモンやインストールをしてくれるプログラム</li>
</ul></div>
</div>
</div>
 <div id="outline-container-org719b595" class="outline-2">
 <h2 id="org719b595"> <a href="#org719b595">Tasks</a></h2>
</div>
 <div id="outline-container-org4701c8c" class="outline-2">
 <h2 id="org4701c8c"> <a href="#org4701c8c">Reference</a></h2>
 <div class="outline-text-2" id="text-org4701c8c">
</div>
 <div id="outline-container-org849f745" class="outline-3">
 <h3 id="org849f745"> <a href="#org849f745"></a> <a href="https://www.youtube.com/channel/UCZ4HO8or08HUGUzA0w8Tagw">Flux Harmonic - YouTube</a></h3>
 <div class="outline-text-3" id="text-org849f745">
 <p>
もう1つのチャンネル。ライブコーディングが中心。
</p>
</div>
</div>
</div>
 <div id="outline-container-orga48e031" class="outline-2">
 <h2 id="orga48e031"> <a href="#orga48e031">Archives</a></h2>
 <div class="outline-text-2" id="text-orga48e031">
</div>
 <div id="outline-container-org52f71ce" class="outline-3">
 <h3 id="org52f71ce"> <a href="#org52f71ce"> <span class="done DONE">DONE</span> 5 Org Roam Hacks for Better Productivity in Emacs</a></h3>
 <div class="outline-text-3" id="text-org52f71ce">
 <p>
 <a href="20210508233810-org_roam.html#ID-815a2c31-7ddb-40ad-bae0-f84e1cfd8de1">Org-roam</a>のハック。
</p>
 <ul class="org-ul"> <li> <a href="https://www.youtube.com/watch?v=CUkuyW6hr18">5 Org Roam Hacks for Better Productivity in Emacs</a></li>
</ul></div>
</div>
</div>
 <div id="outline-container-org7148ce4" class="outline-2">
 <h2 id="org7148ce4"> <a href="#org7148ce4">Backlinks</a></h2>
 <div class="outline-text-2" id="text-org7148ce4">
 <ul class="org-ul"> <li> <a href="./20210508233810-org_roam.html">Org-roam</a></li>
 <li> <a href="./20210508234743-emacs.html">Emacs</a></li>
 <li> <a href="./20210525005710-gnu_guix.html">GNU Guix</a></li>
 <li> <a href="./20210901101339-rust.html">Rust</a></li>
 <li> <a href="./20210905140122-exwm.html">EXWM</a></li>
 <li> <a href="./20210912124846-dotfiles.html">dotfiles</a></li>
 <li> <a href="./20210922010155-nushell.html">nushell</a></li>
 <li> <a href="./20240302T024538--kdoc-118-ハックできる認知範囲を増やす__essay.html">KDOC 118: ハックできる認知範囲を増やす</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20210915221421-systemcrafters.html"/>
  <id>https://kijimad.github.io/roam/20210915221421-systemcrafters.html</id>
  <updated>2025-06-14T00:00:00+09:00</updated>
</entry>
<entry>
  <title>magit-forge</title>
  <author><name>root</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org082d24b" class="outline-2">
 <h2 id="org082d24b"> <a href="#org082d24b">概要</a></h2>
 <div class="outline-text-2" id="text-org082d24b">
 <p>
Forgeは <a href="20210508234743-emacs.html#ID-1ad8c3d5-97ba-4905-be11-e6f2626127ad">Emacs</a>packageの1つ。
 <a href="20210922005248-magit.html#ID-5ba43a42-93cb-48fa-8578-0558c757493f">magit</a>のインターフェースで <a href="20210926103926-github.html#ID-6b889822-21f1-4a3e-9755-e3ca52fa0bc4">GitHub</a>などコードホスティングサービスを操作できる。
Magitと同じ操作でPull Requestに対してcheckoutなど <a href="20210901104129-git.html#ID-90c6b715-9324-46ce-a354-63d09403b066">Git</a>操作が行えたり、操作が高度に統合されている。
</p>

 <dl class="org-dl"> <dt>Repository</dt> <dd> <a href="https://github.com/magit/forge">magit/forge</a></dd>
</dl></div>
</div>
 <div id="outline-container-orgeba927b" class="outline-2">
 <h2 id="orgeba927b"> <a href="#orgeba927b">Memo</a></h2>
 <div class="outline-text-2" id="text-orgeba927b">
</div>
 <div id="outline-container-org970525a" class="outline-3">
 <h3 id="org970525a"> <a href="#org970525a">URLを変えた場合の対応</a></h3>
 <div class="outline-text-3" id="text-org970525a">
 <div class="org-src-container">
 <pre class="src src-shell">git remote set-url origin git@github.com:user/repo.git
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 1: </span>一度削除してからpull</label> <pre class="src src-emacs-lisp">(forge-reset-database)
(forge-pull)
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgd967f8c" class="outline-3">
 <h3 id="orgd967f8c"> <a href="#orgd967f8c">API token登録</a></h3>
 <div class="outline-text-3" id="text-orgd967f8c">
 <p>
 <a href="20210926103926-github.html#ID-6b889822-21f1-4a3e-9755-e3ca52fa0bc4">GitHub</a>でAPIトークンを発行し、マシンに登録する必要がある。
</p>

 <p>
 <code>~/.authinfo</code> に以下のような形式で書き込む。
</p>
 <div class="org-src-container">
 <pre class="src src-nil">machine api.github.com login kijimaD^forge password aaaaaaaaaaaaaaaaaaaaaaa
</pre>
</div>

 <p>
 <code>(forge-pull)</code> してみてできたら成功。
</p>

 <p>
注意: すでにトークンで接続成功していた場合はキャッシュを削除しないと反映しない。
トークン再発行時は注意。
 <code>(auth-source-forget-all-cached)</code>
</p>
</div>
</div>
 <div id="outline-container-org9f67b82" class="outline-3">
 <h3 id="org9f67b82"> <a href="#org9f67b82">issue comment</a></h3>
 <div class="outline-text-3" id="text-org9f67b82">
 <p>
issueにコメントを追加する。
 <code>C-c C-n</code>
 <code>forge-create-post</code>
</p>
</div>
</div>
 <div id="outline-container-org8696e40" class="outline-3">
 <h3 id="org8696e40"> <a href="#org8696e40">buffer name</a></h3>
 <div class="outline-text-3" id="text-org8696e40">
 <p>
buffer nameはmagitの関数を利用して生成している。だから同じ形式で利用できる。
さらにここにforge特有のformat設定を一層増やせばいいのかな。
</p>
</div>
</div>
</div>
 <div id="outline-container-orga07faac" class="outline-2">
 <h2 id="orga07faac"> <a href="#orga07faac">Tasks</a></h2>
 <div class="outline-text-2" id="text-orga07faac">
</div>
 <div id="outline-container-org35bc475" class="outline-3">
 <h3 id="org35bc475"> <a href="#org35bc475"> <span class="todo TODO">TODO</span> 管理方法を確立する</a></h3>
 <div class="outline-text-3" id="text-org35bc475">
 <p>
適当なため毎回magitのトップ画面に行って探している。
番号をorgに貼っておいて、それを開くとtopicを開くようにしたい。
</p>
</div>
</div>
 <div id="outline-container-orgdeb0809" class="outline-3">
 <h3 id="orgdeb0809"> <a href="#orgdeb0809"> <span class="todo TODO">TODO</span> tracked issueを表示する</a></h3>
</div>
 <div id="outline-container-orgf2c46f0" class="outline-3">
 <h3 id="orgf2c46f0"> <a href="#orgf2c46f0"> <span class="todo TODO">TODO</span> 別windowで開けるようにする</a></h3>
 <div class="outline-text-3" id="text-orgf2c46f0">
 <p>
magitのように、ユニバーサル引数を使って別windowで開けるようにしたい。
仕組みが違うみたいでforgeでどうやったらいいのかよくわからないな。
</p>

 <ul class="org-ul"> <li>forge-visit 開くときの関数</li>
 <li>forge-topic-setup-buffer</li>
 <li>magit-setup-buffer</li>
 <li>magit-setup-buffer-internal</li>
</ul></div>
</div>
 <div id="outline-container-org0ccc0cc" class="outline-3">
 <h3 id="org0ccc0cc"> <a href="#org0ccc0cc"> <span class="todo TODO">TODO</span> どうやってissue, PRを辿れるか</a></h3>
 <div class="outline-text-3" id="text-org0ccc0cc">
 <p>
#9999 とあった場合、visitするとブラウザが起動してしまう。
そうでなくて、forgeで開いてほしい。
</p>
</div>
</div>
 <div id="outline-container-org3c1a93b" class="outline-3">
 <h3 id="org3c1a93b"> <a href="#org3c1a93b"> <span class="todo TODO">TODO</span> buffner name formatを設定可能にする</a></h3>
 <div class="outline-text-3" id="text-org3c1a93b">
 <p>
バッファ名を  <code>*forge: kijimad/emacs #10398 Add magit-forge settings</code> のようにtopic名を含めると、バッファ検索しやすくて便利。
</p>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">defun</span>  <span class="org-function-name">forge-topic-setup-buffer</span> (topic)
  ( <span class="org-keyword">let*</span> ((repo  (forge-get-repository topic))
         (ident (concat (forge--topic-type-prefix topic)
                        (number-to-string ( <span class="org-keyword">oref</span> topic number))))
         (name  (format  <span class="org-string">"*forge: %s/%s %s %s*"</span>
                        ( <span class="org-keyword">oref</span> repo owner)
                        ( <span class="org-keyword">oref</span> repo name)
                        ident
                        ( <span class="org-keyword">oref</span> topic title)))
         (magit-generate-buffer-name-function ( <span class="org-keyword">lambda</span> (_mode _value) name))
         (current-repo (forge-get-repository nil))
         (default-directory ( <span class="org-keyword">if</span> ( <span class="org-keyword">and</span> current-repo
                                     (eq ( <span class="org-keyword">oref</span> current-repo id)
                                         ( <span class="org-keyword">oref</span> repo id)))
                                default-directory
                              ( <span class="org-keyword">or</span> ( <span class="org-keyword">oref</span> repo worktree)
                                  default-directory))))
    (magit-setup-buffer #'forge-topic-mode t
      (forge-buffer-topic topic)
      (forge-buffer-topic-ident ident))))
</pre>
</div>

 <p>
formatは  <code>magit-buffer-name-format</code> を参考にすればよさそう。
</p>
</div>
</div>
</div>
 <div id="outline-container-org5113c02" class="outline-2">
 <h2 id="org5113c02"> <a href="#org5113c02">Reference</a></h2>
 <div class="outline-text-2" id="text-org5113c02">
</div>
 <div id="outline-container-orgcb5c21e" class="outline-3">
 <h3 id="orgcb5c21e"> <a href="#orgcb5c21e"></a> <a href="https://magit.vc/manual/forge/">Top (Forge User and Developer Manual)</a></h3>
 <div class="outline-text-3" id="text-orgcb5c21e">
 <p>
Forgeのマニュアル。
</p>
</div>
</div>
</div>
 <div id="outline-container-org761e4ad" class="outline-2">
 <h2 id="org761e4ad"> <a href="#org761e4ad">Archives</a></h2>
</div>


 <div id="outline-container-orgf241f1e" class="outline-2">
 <h2 id="orgf241f1e"> <a href="#orgf241f1e">Backlinks</a></h2>
 <div class="outline-text-2" id="text-orgf241f1e">
 <ul class="org-ul"> <li> <a href="./20210508234743-emacs.html">Emacs</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20210922004953-magit_forge.html"/>
  <id>https://kijimad.github.io/roam/20210922004953-magit_forge.html</id>
  <updated>2025-06-14T00:00:00+09:00</updated>
</entry>
<entry>
  <title>magit</title>
  <author><name>root</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orgb2c4e7e" class="outline-2">
 <h2 id="orgb2c4e7e"> <a href="#orgb2c4e7e">概要</a></h2>
 <div class="outline-text-2" id="text-orgb2c4e7e">
 <p>
Magitは <a href="20210508234743-emacs.html#ID-1ad8c3d5-97ba-4905-be11-e6f2626127ad">Emacs</a> packageの1つ。
 <a href="20210901104129-git.html#ID-90c6b715-9324-46ce-a354-63d09403b066">Git</a>のインターフェイスを提供する。
Emacsキラーアプリの一角。
</p>

 <dl class="org-dl"> <dt>Repository</dt> <dd> <a href="https://github.com/magit/magit">magit/magit</a></dd>
</dl></div>
</div>
 <div id="outline-container-org43c3728" class="outline-2">
 <h2 id="org43c3728"> <a href="#org43c3728">Memo</a></h2>
 <div class="outline-text-2" id="text-org43c3728">
</div>
 <div id="outline-container-orgea805de" class="outline-3">
 <h3 id="orgea805de"> <a href="#orgea805de">コミットハッシュから検索する</a></h3>
 <div class="outline-text-3" id="text-orgea805de">
 <p>
 <code>magit-show-commit</code> で検索できる。カーソル上にハッシュがあると自動で表示してくれる。
</p>
</div>
</div>
</div>
 <div id="outline-container-org35644c1" class="outline-2">
 <h2 id="org35644c1"> <a href="#org35644c1">Tasks</a></h2>
</div>
 <div id="outline-container-orga2b00e7" class="outline-2">
 <h2 id="orga2b00e7"> <a href="#orga2b00e7">Reference</a></h2>
</div>
 <div id="outline-container-orgdc77c22" class="outline-2">
 <h2 id="orgdc77c22"> <a href="#orgdc77c22">Archives</a></h2>
 <div class="outline-text-2" id="text-orgdc77c22">
</div>
 <div id="outline-container-org5eba33d" class="outline-3">
 <h3 id="org5eba33d"> <a href="#org5eba33d"> <span class="done DONE">DONE</span> 基本的な仕組みを把握する</a></h3>
 <div class="outline-text-3" id="text-org5eba33d">
 <p>
 <a href="20210901104129-git.html#ID-90c6b715-9324-46ce-a354-63d09403b066">Git</a>の機能ごとで独立しているので、1つ1つ見ていけば一応理解はできる。
メインになるのはprocessで <a href="20210901104129-git.html#ID-90c6b715-9324-46ce-a354-63d09403b066">Git</a>コマンドを実行している関数で、引数で挙動を変える。
実行結果をパースして、UIに反映する。
</p>
</div>
</div>
</div>
 <div id="outline-container-org70e1b82" class="outline-2">
 <h2 id="org70e1b82"> <a href="#org70e1b82">Backlinks</a></h2>
 <div class="outline-text-2" id="text-org70e1b82">
 <ul class="org-ul"> <li> <a href="./20210508234743-emacs.html">Emacs</a></li>
 <li> <a href="./20210509122633-emacs_lisp.html">Emacs Lisp</a></li>
 <li> <a href="./20210922004953-magit_forge.html">magit-forge</a></li>
 <li> <a href="./index.html">Insomnia</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20210922005248-magit.html"/>
  <id>https://kijimad.github.io/roam/20210922005248-magit.html</id>
  <updated>2025-06-14T00:00:00+09:00</updated>
</entry>
<entry>
  <title>projectile</title>
  <author><name>root</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orge269c4c" class="outline-2">
 <h2 id="orge269c4c"> <a href="#orge269c4c">概要</a></h2>
 <div class="outline-text-2" id="text-orge269c4c">
 <p>
projectileは <a href="20210508234743-emacs.html#ID-1ad8c3d5-97ba-4905-be11-e6f2626127ad">Emacs</a> packageの1つ。
 <a href="20210901104129-git.html#ID-90c6b715-9324-46ce-a354-63d09403b066">Git</a>リポジトリ単位でプロジェクトとし、その中でファイル検索してファイル切り替えをすばやく行える。
</p>
</div>
</div>
 <div id="outline-container-orgc792ac0" class="outline-2">
 <h2 id="orgc792ac0"> <a href="#orgc792ac0">Repository</a></h2>
 <div class="outline-text-2" id="text-orgc792ac0">
 <ul class="org-ul"> <li> <a href="https://github.com/bbatsov/projectile">bbatsov/projectile</a></li>
</ul></div>
</div>
 <div id="outline-container-org671e392" class="outline-2">
 <h2 id="org671e392"> <a href="#org671e392">Memo</a></h2>
</div>
 <div id="outline-container-org4867ffd" class="outline-2">
 <h2 id="org4867ffd"> <a href="#org4867ffd">Tasks</a></h2>
 <div class="outline-text-2" id="text-org4867ffd">
</div>
 <div id="outline-container-org3b41e28" class="outline-3">
 <h3 id="org3b41e28"> <a href="#org3b41e28"> <span class="todo TODO">TODO</span> </a> <a href="https://github.com/bbatsov/projectile/issues/1551">Don’t save nonexistent files in the Projectile cache · Issue #1551 · bbatsov/projectile</a></h3>
 <div class="outline-text-3" id="text-org3b41e28">
 <p>
もう解決したのか、再現しない。
保存しなければキャッシュに保存されない。
</p>
</div>
</div>
</div>
 <div id="outline-container-org19cf14d" class="outline-2">
 <h2 id="org19cf14d"> <a href="#org19cf14d">Reference</a></h2>
</div>
 <div id="outline-container-orge32b56a" class="outline-2">
 <h2 id="orge32b56a"> <a href="#orge32b56a">Archives</a></h2>
 <div class="outline-text-2" id="text-orge32b56a">
</div>
 <div id="outline-container-orgbb10a18" class="outline-3">
 <h3 id="orgbb10a18"> <a href="#orgbb10a18"> <span class="done DONE">DONE</span> projectile issue#1709</a></h3>
 <div class="outline-text-3" id="text-orgbb10a18">
 <ul class="org-ul"> <li> <a href="https://github.com/bbatsov/projectile/issues/1709">projectile-switch-buffers with prefix argument plus k also kills current buffer · Issue #1709 · bbatsov/projectile</a></li>
</ul> <p>
 <code>projectile-project-buffer-p</code> が誤検知してる。現在のバッファがプロジェクトでないのにプロジェクト判定し、それで消すときに含まれてしまう。
</p>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">defun</span>  <span class="org-function-name">projectile-project-buffer-p</span> (buffer project-root)
 <span class="org-doc">"Check if BUFFER is under PROJECT-ROOT."</span>
( <span class="org-keyword">with-current-buffer</span> buffer
  ( <span class="org-keyword">and</span> (not (string-prefix-p  <span class="org-string">" "</span> (buffer-name buffer)))
       (not (projectile-ignored-buffer-p buffer))
       default-directory  <span class="org-comment-delimiter">;; </span> <span class="org-comment">これが怪しい。どこから取ってる？</span>
       (string-equal (file-remote-p default-directory)
                     (file-remote-p project-root))
       (not (string-match-p  <span class="org-string">"^http</span> <span class="org-string"> <span class="org-regexp-grouping-backslash">\\</span></span> <span class="org-string"> <span class="org-regexp-grouping-construct">(</span></span> <span class="org-string">s</span> <span class="org-string"> <span class="org-regexp-grouping-backslash">\\</span></span> <span class="org-string"> <span class="org-regexp-grouping-construct">)</span></span> <span class="org-string">?://"</span> default-directory))
       (string-prefix-p project-root (file-truename default-directory) (eq system-type 'windows-nt)))))
</pre>
</div>

 <p>
 <code>default-directory</code> が、switch先のdirectoryを指している。なのでtrueになる。
つまり消そうとしているdirectoryではないがtrueを返し誤って消される。
</p>

 <p>
初回のループで変数  <code>default-directory</code> が引数のbufferと合っていない。現在開いているバッファが入り、現在開いているものまで消してしまう。
無理やり  <code>(cd ...)</code> とすれば変更できるが、いかしてない。
</p>

 <p>
 <code>default-directory</code> を使わない方法でやるとこうなる。
ほかにも変更が必要そうだな。
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">defun</span>  <span class="org-function-name">projectile-project-buffer-p</span> (buffer project-root)
   <span class="org-doc">"Check if BUFFER is under PROJECT-ROOT."</span>
  ( <span class="org-keyword">with-current-buffer</span> buffer
    ( <span class="org-keyword">and</span> (not (string-prefix-p  <span class="org-string">" "</span> (buffer-name buffer)))
         (not (projectile-ignored-buffer-p buffer))
         (file-name-directory buffer-file-name)
         (string-equal (file-remote-p (file-name-directory buffer-file-name))
                       (file-remote-p project-root))
         (not (string-match-p  <span class="org-string">"^http</span> <span class="org-string"> <span class="org-regexp-grouping-backslash">\\</span></span> <span class="org-string"> <span class="org-regexp-grouping-construct">(</span></span> <span class="org-string">s</span> <span class="org-string"> <span class="org-regexp-grouping-backslash">\\</span></span> <span class="org-string"> <span class="org-regexp-grouping-construct">)</span></span> <span class="org-string">?://"</span> (file-name-directory buffer-file-name)))
         (string-prefix-p project-root (file-truename (file-name-directory buffer-file-name)) (eq system-type 'windows-nt)))))
</pre>
</div>

 <p>
取得できない理由。current buffer以外にセットされているから。
ループを進んだ後はなぜできてるのか。
</p>

 <ul class="org-ul"> <li> <a href="https://stackoverflow.com/questions/28196228/emacs-how-to-get-directory-of-current-buffer">elisp - Emacs, how to get directory of current buffer? - Stack Overflow</a></li>
</ul> <blockquote>
 <p>
Sometimes default-directory for the current buffer may be set to something other than the current directory of the file the buffer is currently visiting, in which case the solution above wouldn’t give what the asker was looking for.
</p>

 <p>
In such cases, you can use the file-name-directory method, like so: (file-name-directory buffer-file-name)
</p>
</blockquote>

 <p>
初回以降の  <code>default-directory</code> を変えている要素は何だ。何か変わっているはずだが、単なるループで他の条件は一切変わってないようだな…。
</p>

 <p>
テストで再現できない。
</p>

 <p>
project-root:  <code>/home/kijima/.emacs.d/</code>
buffer: projectile.el
default-directory: .emacs.d → これがおかしい。
</p>

 <p>
projectile-switch-project → projectile-switch-project-by-name(名前で選択) → アクション選択
projectile-project-buffers → projectile-project-buffer-p
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(it  <span class="org-string">"ensures the buffer is switched immediately"</span>
      ( <span class="org-keyword">let</span> ((projectile-switch-project-action
             ( <span class="org-keyword">lambda</span> () (switch-to-buffer (find-file-noselect  <span class="org-string">"file"</span> t)))))
        (projectile-test-with-sandbox
         (projectile-test-with-files
          ( <span class="org-string">"project/"</span>
            <span class="org-string">"project/file"</span>)
          (projectile-add-known-project (file-name-as-directory (expand-file-name  <span class="org-string">"project"</span>)))
          (projectile-switch-project-by-name (file-name-as-directory (expand-file-name  <span class="org-string">"project"</span>)))

          (expect (current-buffer)  <span class="org-builtin">:to-be</span> (get-file-buffer  <span class="org-string">"project/file"</span>))))))
</pre>
</div>

 <p>
テストでprojectバッファを開いてる状態にするにはどうしたらいいんだ。ディレクトリが間違っていた。
printデバッグで原因を把握する。
</p>

 <p>
(projectile-acquire-root)が正しいディレクトリを取得していない。
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(message (format  <span class="org-string">"relevant: %s"</span> (projectile-relevant-known-projects)))
(message (format  <span class="org-string">"2: %s"</span> (projectile-project-buffers)))
(message (format  <span class="org-string">"%s"</span> (projectile-acquire-root)))
(message (format  <span class="org-string">"bbb  %s"</span> (buffer-list)))
</pre>
</div>

 <p>
失敗するのは、scratchなどbuffer-file-nameを持たないとき(file-name-directory nil)となってエラーになるから。問題が起こるのは、実行されたディレクトリがプロジェクトディレクトリではないとき。
</p>

 <p>
PR出したが、この方法だとshellなどで特殊bufferのときうまくいかない。修正してPR open。マージされた。
安易にcloseするのでなく、よく考えてからだな。焦って恥ずかしい、となるのだが耐える。
</p>
</div>
</div>
</div>
 <div id="outline-container-org6daa9cf" class="outline-2">
 <h2 id="org6daa9cf"> <a href="#org6daa9cf">Backlinks</a></h2>
 <div class="outline-text-2" id="text-org6daa9cf">
 <ul class="org-ul"> <li> <a href="./20210817003906-history.html">History</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20210922005532-projectile.html"/>
  <id>https://kijimad.github.io/roam/20210922005532-projectile.html</id>
  <updated>2025-06-14T00:00:00+09:00</updated>
</entry>
<entry>
  <title>nushell</title>
  <author><name>root</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orgd109f9a" class="outline-2">
 <h2 id="orgd109f9a"> <a href="#orgd109f9a">概要</a></h2>
 <div class="outline-text-2" id="text-orgd109f9a">
 <p>
nushellは <a href="20210901101339-rust.html#ID-ddc21510-6693-4c1e-9070-db0dd2a8160b">Rust</a>で書かれた <a href="20210606192338-shell.html#ID-585d3b5e-989d-4363-bcc3-894402fcfcf9">Shell</a>プログラム。
見やすい表結果の表示、パイプでのMarkdownの変換など、イカした機能がある。
</p>

 <dl class="org-dl"> <dt>Repository</dt> <dd> <a href="https://github.com/nushell/nushell">nushell/nushell: A new type of shell</a></dd>
</dl></div>
</div>
 <div id="outline-container-org5fb4b65" class="outline-2">
 <h2 id="org5fb4b65"> <a href="#org5fb4b65">Memo</a></h2>
</div>
 <div id="outline-container-org3283548" class="outline-2">
 <h2 id="org3283548"> <a href="#org3283548">Tasks</a></h2>
</div>
 <div id="outline-container-org1297a66" class="outline-2">
 <h2 id="org1297a66"> <a href="#org1297a66">Reference</a></h2>
 <div class="outline-text-2" id="text-org1297a66">
 <dl class="org-dl"> <dt> <a href="20210915221421-systemcrafters.html#ID-fa497359-ae3f-494a-b24a-9822eefe67ad">System Crafters</a>で作者の人とコラボ</dt> <dd> <a href="https://www.youtube.com/watch?v=IHeKUeO7bpo">System Crafters Live! - Integrating Nushell with Emacs - YouTube</a></dd>
</dl></div>
</div>
 <div id="outline-container-orgf84b1aa" class="outline-2">
 <h2 id="orgf84b1aa"> <a href="#orgf84b1aa">Archives</a></h2>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20210922010155-nushell.html"/>
  <id>https://kijimad.github.io/roam/20210922010155-nushell.html</id>
  <updated>2025-06-14T00:00:00+09:00</updated>
</entry>
<entry>
  <title>Terraform</title>
  <author><name>root</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orge0b7fff" class="outline-2">
 <h2 id="orge0b7fff"> <a href="#orge0b7fff">概要</a></h2>
 <div class="outline-text-2" id="text-orge0b7fff">
 <p>
Terraformはインフラをコード管理できるツール。
</p>

 <ul class="org-ul"> <li> <a href="20211221000645-aws.html#ID-d17ea774-2739-44f3-89dc-97a86b2c7bf7">AWS</a>でポチポチやらなくても、コードで環境を再現できる。</li>
 <li> <a href="20210901104129-git.html#ID-90c6b715-9324-46ce-a354-63d09403b066">Git</a>管理されている恩恵を受けられる</li>
</ul></div>
</div>
 <div id="outline-container-orgf8607d7" class="outline-2">
 <h2 id="orgf8607d7"> <a href="#orgf8607d7">Memo</a></h2>
 <div class="outline-text-2" id="text-orgf8607d7">
</div>
 <div id="outline-container-org20d7950" class="outline-3">
 <h3 id="org20d7950"> <a href="#org20d7950">インストール</a></h3>
 <div class="outline-text-3" id="text-org20d7950">
 <p>
 <a href="https://www.terraform.io/downloads">https://www.terraform.io/downloads</a>
</p>
</div>
</div>
 <div id="outline-container-org3c6518b" class="outline-3">
 <h3 id="org3c6518b"> <a href="#org3c6518b">ディレクトリ構成</a></h3>
 <div class="outline-text-3" id="text-org3c6518b">
 <p>
共通リソースを作り、環境別に埋め込んで実行することで管理が楽になり、検証の正確度もあがる。 <a href="https://dev.classmethod.jp/articles/directory-layout-bestpractice-in-terraform/">Terraformにおけるディレクトリ構造のベストプラクティス | DevelopersIO</a>で紹介されている構成が管理しやすい。トップディレクトリに変数を埋め込んだ共通のリソースを配置する。下層の環境ディレクトリに環境ごとの可変の値を入れ、トップディレクトリをmodule指定することで挙動を変更する。
</p>
</div>
</div>
</div>
 <div id="outline-container-org0fa9989" class="outline-2">
 <h2 id="org0fa9989"> <a href="#org0fa9989">Tasks</a></h2>
 <div class="outline-text-2" id="text-org0fa9989">
</div>
 <div id="outline-container-orga3fdd15" class="outline-3">
 <h3 id="orga3fdd15"> <a href="#orga3fdd15">実践Terraform</a></h3>
 <div class="outline-text-3" id="text-orga3fdd15">
</div>
</div>
</div>
 <div id="outline-container-orgda71949" class="outline-2">
 <h2 id="orgda71949"> <a href="#orgda71949">Reference</a></h2>
 <div class="outline-text-2" id="text-orgda71949">
</div>
 <div id="outline-container-orgd851041" class="outline-3">
 <h3 id="orgd851041"> <a href="#orgd851041"></a> <a href="https://dev.classmethod.jp/articles/aws-with-terraform/">既存のAWS環境を後からTerraformでコード化する | DevelopersIO</a></h3>
</div>
 <div id="outline-container-orgf6acd4a" class="outline-3">
 <h3 id="orgf6acd4a"> <a href="#orgf6acd4a"></a> <a href="https://beyondjapan.com/blog/2020/05/terraformer-import-existing-infrastructure/">Terraformerを使ってTerraformに既存インフラのリソースをインポートする | 株式会社ビヨンド</a></h3>
 <div class="outline-text-3" id="text-orgf6acd4a">
 <p>
terraformer。
</p>
</div>
</div>
 <div id="outline-container-org694a2bf" class="outline-3">
 <h3 id="org694a2bf"> <a href="#org694a2bf"></a> <a href="https://www.lac.co.jp/lacwatch/service/20200903_002270.html">5分で分かるTerraform（Infrastructure as Code） | セキュリティ対策のラック</a></h3>
</div>
</div>
 <div id="outline-container-org4964a11" class="outline-2">
 <h2 id="org4964a11"> <a href="#org4964a11">Archives</a></h2>
</div>


 <div id="outline-container-org0739d1a" class="outline-2">
 <h2 id="org0739d1a"> <a href="#org0739d1a">Backlinks</a></h2>
 <div class="outline-text-2" id="text-org0739d1a">
 <ul class="org-ul"> <li> <a href="./20210817003906-history.html">History</a></li>
 <li> <a href="./20220113160623-network.html">network</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20210922010846-terraform.html"/>
  <id>https://kijimad.github.io/roam/20210922010846-terraform.html</id>
  <updated>2025-06-14T00:00:00+09:00</updated>
</entry>
</feed>
