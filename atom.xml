<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><author><name>Kijima Daigo</name></author>
<title>Insomnia</title>
<generator>Emacs webfeeder.el</generator>
<link href="https://kijimad.github.io/roam"/>
<link href="https://kijimad.github.io/roam/atom.xml" rel="self"/>
<id>https://kijimad.github.io/roam/atom.xml</id>
<updated>2025-07-04T07:51:44+09:00</updated>
<entry>
  <title>KDOC 416: Goのエスケープ解析における2つの不変条件を見る</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org90757de" class="outline-2">
 <h2 id="org90757de"> <a href="#org90757de">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org90757de">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul> <ul class="org-ul"> <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-orgdb6a961" class="outline-2">
 <h2 id="orgdb6a961"> <a href="#orgdb6a961">概要</a></h2>
 <div class="outline-text-2" id="text-orgdb6a961">
 <p>
Goのドキュメントにヒープエスケープの「不変条件」が書かれていたので、見る。
</p>

 <div class="org-src-container">
 <pre class="src src-git-permalink">https://github.com/golang/go/blob/988a20c8c5e2c9eb49f8749e5ee94ce3c964fe59/src/cmd/compile/internal/escape/escape.go#L20-L29
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-nil">// Escape analysis.
//
// Here we analyze functions to determine which Go variables
// (including implicit allocations such as calls to "new" or "make",
// composite literals, etc.) can be allocated on the stack. The two
// key invariants we have to ensure are: (1) pointers to stack objects
// cannot be stored in the heap, and (2) pointers to a stack object
// cannot outlive that object (e.g., because the declaring function
// returned and destroyed the object's stack frame, or its space is
// reused across loop iterations for logically distinct variables).
</pre>
</div>

 <p>
2つの不変条件。
</p>

 <ul class="org-ul"> <li>(1)スタックオブジェクトへのポインタはヒープに保存できない</li>
 <li>(2)スタックオブジェクトへのポインタはそのオブジェクトより長生きできない
 <ul class="org-ul"> <li>関数を抜けるとオブジェクトのスタックフレームは解放される。もしくは解放されたスペースがループ内で論理的に異なる変数として再利用される</li>
</ul></li>
</ul> <p>
つまり、保存場所とポインタ先の関係、スタックオブジェクトとスタックオブジェクトのライフタイムの関係、に関する原則と解釈した。
</p>

 <ul class="org-ul"> <li>(1) 保存場所とポインタ先の問題(空間)
 <ul class="org-ul"> <li>ルール: スタックオブジェクトへのポインタは、ヒープ領域に保存してはならない。</li>
 <li>理由: ヒープにあるデータは、関数呼び出しを超えて長生きする可能性がある。しかし、それが指し示す先のスタックオブジェクトは、関数を抜けると解放される。結果、ヒープ上には実体のないポインタ（ダングリングポインタ）が残る</li>
 <li>解決策: コンパイラは、ヒープに保存されるポインタが指す先のオブジェクトもヒープにエスケープさせる。これによってヒープからヒープを指す状態にする</li>
</ul></li>
 <li>(2) ポインタ「寿命」の問題(時間)
 <ul class="org-ul"> <li>ルール: スタックオブジェクトへのポインタは、そのオブジェクトのライフタイムを超えて存在してはならない</li>
 <li>理由: 関数を抜けるとスタックオブジェクトは消える。そのポインタが残るとダングリングポインタとなる</li>
 <li>解決策: コンパイラは、ポインタがオブジェクトのライフタイムを超えて使われる可能性を検知したら、そのオブジェクト自体を最初からヒープに確保する</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org64365bb" class="outline-2">
 <h2 id="org64365bb"> <a href="#org64365bb">関連</a></h2>
 <div class="outline-text-2" id="text-org64365bb">
 <ul class="org-ul"> <li> <a href="20250630T185540--kdoc-411-スタックは積み重ねて取り出して解放する。ではヒープは__draft_permanent.html#ID-20250630T185540">KDOC 411: スタックは積み重ねて取り出して解放する。ではヒープは?</a>。調べるきっかけになった</li>
 <li> <a href="20250701T174437--kdoc-413-ローカル変数がヒープにエスケープされるのを見る__draft_wiki.html#ID-20250701T174437">KDOC 413: ローカル変数がヒープにエスケープされるのを見る</a>。エスケープする具体例</li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250702T194815--kdoc-416-goのエスケープ解析における2つの不変条件を見る__draft_permanent.html"/>
  <id>https://kijimad.github.io/roam/20250702T194815--kdoc-416-goのエスケープ解析における2つの不変条件を見る__draft_permanent.html</id>
  <updated>2025-07-04T16:51:41+09:00</updated>
</entry>
<entry>
  <title>KDOC 415: io.Readerのシグネチャはヒープエスケープを避ける設計になっている</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orgcfba9ed" class="outline-2">
 <h2 id="orgcfba9ed"> <a href="#orgcfba9ed">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-orgcfba9ed">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-07-01 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org6f57eb1" class="outline-2">
 <h2 id="org6f57eb1"> <a href="#org6f57eb1">概要</a></h2>
 <div class="outline-text-2" id="text-org6f57eb1">
 <p>
io.Reader, io.Writerのインターフェース設計には、ヒープのエスケープも関係しているという。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 1: </span>io.Readerのシグネチャ</label> <pre class="src src-go">type Reader interface {
        Read(p []byte) (n int, err error)
}
</pre>
</div>

 <p>
 <code>[]byte</code> の初期化は呼び出し側の責務になっている。これによって呼び出し側がメモリ管理できるようになる。スタックに留まり、スタックにエスケープするのを抑えられる。Readを何度呼んでも新しいヒープ確保が発生しない。
</p>

 <p>
実際に試してみる。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 2: </span>Read1だけがヒープのエスケープが発生する</label> <pre class="src src-shell"> <span class="org-variable-name">tmpfile</span>=$(mktemp /tmp/tmpgo.XXXXXX.go)

cat > $ <span class="org-variable-name">tmpfile</span> <<EOF
 <span class="org-sh-heredoc">package main</span>

 <span class="org-sh-heredoc">func main() {</span>
 <span class="org-sh-heredoc">  // スタックに置いたまま</span>
 <span class="org-sh-heredoc">  buf := make([]byte, 2)</span>
 <span class="org-sh-heredoc">  Read2(buf)</span>
 <span class="org-sh-heredoc">}</span>

 <span class="org-sh-heredoc">// Read側で初期化して返すと、ヒープにエスケープしなければならない</span>
 <span class="org-sh-heredoc">func Read1() []byte {</span>
 <span class="org-sh-heredoc">  return make([]byte, 1)</span>
 <span class="org-sh-heredoc">}</span>

 <span class="org-sh-heredoc">// 呼び出し側で初期化してもらうようにすると、ヒープにエスケープする必要がない</span>
 <span class="org-sh-heredoc">func Read2([]byte) {}</span>

 <span class="org-sh-heredoc">EOF</span>

go build -gcflags= <span class="org-string">"-m"</span> -o bin $ <span class="org-variable-name">tmpfile</span> 2>&1
rm bin
rm $ <span class="org-variable-name">tmpfile</span>
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-nil"># command-line-arguments
/tmp/tmpgo.Q5eDch.go:12:6: can inline Read2
/tmp/tmpgo.Q5eDch.go:3:6: can inline main
/tmp/tmpgo.Q5eDch.go:8:6: can inline Read1
/tmp/tmpgo.Q5eDch.go:5:8: inlining call to Read2
/tmp/tmpgo.Q5eDch.go:4:14: make([]byte, 2) does not escape
/tmp/tmpgo.Q5eDch.go:9:14: make([]byte, 1) escapes to heap
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgcf9ff0c" class="outline-2">
 <h2 id="orgcf9ff0c"> <a href="#orgcf9ff0c">関連</a></h2>
 <div class="outline-text-2" id="text-orgcf9ff0c">
 <ul class="org-ul"> <li> <a href="https://syntactic-sugar.dev/blog/nested-route/go-escape-analysis">Stack or Heap? Going Deeper with Escape Analysis in Go for Better Performance</a>。調べている中でio.Readerとio.Writerインターフェースの設計について言及していたのを見つけた</li>
 <li> <a href="20250701T193212--kdoc-414-インターフェースがヒープにエスケープされるのを見る__draft_wiki.html#ID-20250701T193212">KDOC 414: インターフェースがヒープにエスケープされるのを見る</a>。調べるきっかけになった</li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250701T213624--kdoc-415-ioreaderのシグネチャはヒープエスケープを避ける設計になっている__draft_permanent.html"/>
  <id>https://kijimad.github.io/roam/20250701T213624--kdoc-415-ioreaderのシグネチャはヒープエスケープを避ける設計になっている__draft_permanent.html</id>
  <updated>2025-07-04T16:51:41+09:00</updated>
</entry>
<entry>
  <title>KDOC 406: TCP/IPでは1つのIPアドレスでネットワークとノードをまとめて表す</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orgbf094e1" class="outline-2">
 <h2 id="orgbf094e1"> <a href="#orgbf094e1">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-orgbf094e1">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-24 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-29 貴島</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org883123f" class="outline-2">
 <h2 id="org883123f"> <a href="#org883123f">概要</a></h2>
 <div class="outline-text-2" id="text-org883123f">
 <p>
TCP/IPの特徴の1つに、1つのIPアドレスでネットワークとノードをまとめて表すという点がある(位置400)。
</p>
</div>
</div>
 <div id="outline-container-orgcb48af8" class="outline-2">
 <h2 id="orgcb48af8"> <a href="#orgcb48af8">関連</a></h2>
 <div class="outline-text-2" id="text-orgcb48af8">
 <ul class="org-ul"> <li> <a href="20250506T120102--kdoc-377-『一日で読めてわかるtcpipのエッセンス』__book.html#ID-20250506T120102">KDOC 377: 『一日で読めてわかるTCP/IPのエッセンス』</a>から</li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250624T085212--kdoc-406-tcpipでは1つのipアドレスでネットワークとノードをまとめて表す__book.html"/>
  <id>https://kijimad.github.io/roam/20250624T085212--kdoc-406-tcpipでは1つのipアドレスでネットワークとノードをまとめて表す__book.html</id>
  <updated>2025-07-04T16:51:37+09:00</updated>
</entry>
<entry>
  <title>KDOC 405: IPアドレスは論理アドレスで、MACアドレスは物理アドレスである</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org5b1210f" class="outline-2">
 <h2 id="org5b1210f"> <a href="#org5b1210f">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org5b1210f">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-24 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-29 貴島</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-orge27e8ab" class="outline-2">
 <h2 id="orge27e8ab"> <a href="#orge27e8ab">概要</a></h2>
 <div class="outline-text-2" id="text-orge27e8ab">
 <p>
IPアドレスは論理アドレスであり、MACアドレスは物理アドレスである(位置569)。
</p>

 <p>
物理的な実態に紐付けられた概念の上に、抽象された論理的な層が構成される。メモリなど、コンピュータではよくみるパターン。
</p>
</div>
</div>
 <div id="outline-container-org814e97d" class="outline-2">
 <h2 id="org814e97d"> <a href="#org814e97d">関連</a></h2>
 <div class="outline-text-2" id="text-org814e97d">
 <ul class="org-ul"> <li> <a href="20250506T120102--kdoc-377-『一日で読めてわかるtcpipのエッセンス』__book.html#ID-20250506T120102">KDOC 377: 『一日で読めてわかるTCP/IPのエッセンス』</a>から</li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250624T002111--kdoc-405-ipアドレスは論理アドレスで、macアドレスは物理アドレスである__book.html"/>
  <id>https://kijimad.github.io/roam/20250624T002111--kdoc-405-ipアドレスは論理アドレスで、macアドレスは物理アドレスである__book.html</id>
  <updated>2025-07-04T16:51:37+09:00</updated>
</entry>
<entry>
  <title>KDOC 418: 実行時のオーバーヘッドなしで型のサイズを判定する</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orgd053454" class="outline-2">
 <h2 id="orgd053454"> <a href="#orgd053454">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-orgd053454">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul> <ul class="org-ul"> <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-orgb6d086d" class="outline-2">
 <h2 id="orgb6d086d"> <a href="#orgb6d086d">概要</a></h2>
 <div class="outline-text-2" id="text-orgb6d086d">
 <p>
CPUアーキテクチャによって、型のサイズは異なることがある。実行時のオーバーヘッドなしで判定しているのをGo言語自体のソースコードで見かけた。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 1: </span>uint型のビットサイズを判定する</label> <pre class="src src-git-permalink">https://github.com/golang/go/blob/0f8ab2db177baee7b04182f5641693df3b212aa9/src/math/bits/bits.go#L17
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-nil">const uintSize = 32 << (^uint(0) >> 63) // 32 or 64
</pre>
</div>

 <p>
ビット演算に慣れてないので、一瞬でわからない。確認する。
</p>

 <ul class="org-ul"> <li> <code>^</code> でビット反転する</li>
 <li>>> で右ビット演算する</li>
 <li><< で左ビット演算する</li>
</ul> <p>
中心になるアイデアは、すべてのビットに1が立つとビットサイズの違いが現れるということだ。分解して見る。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 2: </span>それぞれ見る(64bitアーキテクチャで実行した)</label> <pre class="src src-go">import "fmt"
func main() {
  fmt.Printf("%b\n", uint(0))
  fmt.Printf("%b\n", ^uint(0))

  fmt.Printf("%d\n", 32 << 0) // 32bitの場合、すべてシフトされて0になっている。移動しない
  fmt.Printf("%d\n", 32 << 1) // 64bitの場合、シフトして1が残る。1だけ左シフトする
}
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-nil">0
1111111111111111111111111111111111111111111111111111111111111111
32
64
</pre>
</div>

 <p>
ビットシフト演算子のどちらが移動量かわからなくなるので確認する。移動元と移動量の位置は同じで、向きでシフトの向きが異なると覚える。
</p>

 <div class="org-src-container">
 <pre class="src src-go">import "fmt"
func main() {
  fmt.Printf("%b\n", 0b0010 << 1)
  fmt.Printf("%b\n", 0b0010 >> 1)
}
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-nil">100
1
</pre>
</div>
</div>
</div>
 <div id="outline-container-org029125a" class="outline-2">
 <h2 id="org029125a"> <a href="#org029125a">関連</a></h2>
 <div class="outline-text-2" id="text-org029125a">
 <p>
なし。
</p>
</div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250703T174843--kdoc-418-実行時のオーバーヘッドなしで型のサイズを判定する__draft_wiki.html"/>
  <id>https://kijimad.github.io/roam/20250703T174843--kdoc-418-実行時のオーバーヘッドなしで型のサイズを判定する__draft_wiki.html</id>
  <updated>2025-07-04T16:51:34+09:00</updated>
</entry>
<entry>
  <title>KDOC 401: 起動中のプロセスをstraceで観察する</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org7ef9889" class="outline-2">
 <h2 id="org7ef9889"> <a href="#org7ef9889">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org7ef9889">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-21 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-26 貴島</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org7cebbe0" class="outline-2">
 <h2 id="org7cebbe0"> <a href="#org7cebbe0">概要</a></h2>
 <div class="outline-text-2" id="text-org7cebbe0">
 <p>
 <code>strace</code> ですでに起動しているプロセスを見てみると気軽に発行システムコールを眺められる。コマンドをメモしておく。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 1: </span>viteの開発サーバに対してアタッチする。ホットリロードのためにポーリングがされているのがわかる</label> <pre class="src src-shell">sudo strace -p $(pgrep node | head -n1)
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-nil">strace: Process 1550973 attached
epoll_pwait(15, [{events=EPOLLIN, data={u32=22, u64=22}}], 1024, 638, NULL, 8) = 1
read(22, "\35\0\0\0H\253\0\0\6\1\0\0\0\7\0\0\0command\3\4\0\0\0pin"..., 65536) = 33
write(20, "\t\0\0\0I\253\0\0\6\0\0\0\0", 13) = 13
epoll_pwait(15, [], 1024, 0, NULL, 8)   = 0
(略)
</pre>
</div>
</div>
</div>
 <div id="outline-container-org83609f9" class="outline-2">
 <h2 id="org83609f9"> <a href="#org83609f9">関連</a></h2>
 <div class="outline-text-2" id="text-org83609f9">
 <p>
なし。
</p>
</div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250621T094036--kdoc-401-起動中のプロセスをstraceで観察する__wiki.html"/>
  <id>https://kijimad.github.io/roam/20250621T094036--kdoc-401-起動中のプロセスをstraceで観察する__wiki.html</id>
  <updated>2025-07-04T16:51:34+09:00</updated>
</entry>
<entry>
  <title>KDOC 413: ローカル変数がヒープにエスケープされるのを見る</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org7a53a96" class="outline-2">
 <h2 id="org7a53a96"> <a href="#org7a53a96">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org7a53a96">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-07-01 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org0c9c0c0" class="outline-2">
 <h2 id="org0c9c0c0"> <a href="#org0c9c0c0">概要</a></h2>
 <div class="outline-text-2" id="text-org0c9c0c0">
 <p>
関数を抜けた後も使うようなケースでは、消されないようにスタックからヒープに移す必要がある。後も使うケースとしては、ポインタを返すなどがある。ローカル変数として宣言されていても、ヒープに移動させられる。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 1: </span>ローカル変数がヒープにエスケープされる様子を見る</label> <pre class="src src-shell"> <span class="org-variable-name">tmpfile</span>=$(mktemp /tmp/tmpgo.XXXXXX.go)

cat > $ <span class="org-variable-name">tmpfile</span> <<EOF
 <span class="org-sh-heredoc">package main</span>

 <span class="org-sh-heredoc">func main() {}</span>

 <span class="org-sh-heredoc">func f() *int {</span>
 <span class="org-sh-heredoc">        x := 42</span>
 <span class="org-sh-heredoc">        return &x // ヒープへ</span>
 <span class="org-sh-heredoc">}</span>

 <span class="org-sh-heredoc">EOF</span>

go build -gcflags= <span class="org-string">"-m"</span> -o bin $ <span class="org-variable-name">tmpfile</span> 2>&1
rm bin
rm $ <span class="org-variable-name">tmpfile</span>
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-nil"># command-line-arguments
/tmp/tmpgo.G6OymE.go:3:6: can inline main
/tmp/tmpgo.G6OymE.go:5:6: can inline f
/tmp/tmpgo.G6OymE.go:6:9: moved to heap: x
</pre>
</div>
</div>
</div>
 <div id="outline-container-org8d9d812" class="outline-2">
 <h2 id="org8d9d812"> <a href="#org8d9d812">関連</a></h2>
 <div class="outline-text-2" id="text-org8d9d812">
 <ul class="org-ul"> <li> <a href="20250630T185540--kdoc-411-スタックは積み重ねて取り出して解放する。ではヒープは__draft_permanent.html#ID-20250630T185540">KDOC 411: スタックは積み重ねて取り出して解放する。ではヒープは?</a>。ヒープを調べるきっかけになった</li>
</ul></div>
</div>
 <div id="outline-container-orgcd5a8ad" class="outline-2">
 <h2 id="orgcd5a8ad"> <a href="#orgcd5a8ad">Backlinks</a></h2>
 <div class="outline-text-2" id="text-orgcd5a8ad">
 <ul class="org-ul"> <li> <a href="./20250702T194815--kdoc-416-goのエスケープ解析における2つの不変条件を見る__draft_permanent.html">KDOC 416: Goのエスケープ解析における2つの不変条件を見る</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250701T174437--kdoc-413-ローカル変数がヒープにエスケープされるのを見る__draft_wiki.html"/>
  <id>https://kijimad.github.io/roam/20250701T174437--kdoc-413-ローカル変数がヒープにエスケープされるのを見る__draft_wiki.html</id>
  <updated>2025-07-04T16:51:30+09:00</updated>
</entry>
<entry>
  <title>KDOC 410: 物事に対する情熱は行動の後に生まれる</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org06b2b3d" class="outline-2">
 <h2 id="org06b2b3d"> <a href="#org06b2b3d">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org06b2b3d">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-29 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org9acbd5e" class="outline-2">
 <h2 id="org9acbd5e"> <a href="#org9acbd5e">概要</a></h2>
 <div class="outline-text-2" id="text-org9acbd5e">
 <p>
大人や社会は「好きなことを仕事にしろ」と言った。しかし、「好きなこと」をどうやって見つけるのかには口をつぐんだ。本当は知らないと自白する代わりに、「色んなことをしてそれを探せ」と言った。
</p>

 <p>
受け取ったメッセージを思い返してみると、こういうことだ。
</p>

 <ul class="org-ul"> <li>自分が好きなものは広い世界のどこかに存在している</li>
 <li>いろんな体験をすれば発見できる。だからバイトしろ。海外に行け。勉強しろ。スポーツしろ</li>
 <li>ないならもっと探せ。でも時間制限があるから、22歳までに見つけろ</li>
 <li>好きなものかはやってみれば直感や感情で判定できる</li>
 <li>エゴや憧れも好きのうちだ。実際に体験してなくてもそれは好きに分類できる</li>
 <li>本当に好きならたくさん努力できるだろう。努力できないなら好きとはいえない</li>
</ul> <p>
「砂漠のどこかにダイヤが転がっているからそれを探せ」と言っているように聞こえた。このモデルの問題点は、ダイヤはどこにも転がっていないという点だ。自分探しに成功した人間が存在しないように、好きなことは未知の場所を探して見つけられるものではない。
</p>

 <hr></hr> <hr></hr> <p>
「物事に対する情熱はやり続けた後に生まれる」という考え方もある。
</p>

 <p>
行動が先にあって好きになっていくということだ。ダイヤを探すのではなく、手に持っている石を磨き続ければダイヤになる。現時点で情熱がないとしたらそれはまだ発見できていないということではなく、何も続けていないということだ。何でもいいからやり始めればいい。重要なのは  <b>「選ぶこと」</b> ではなく  <b>「磨き始めること」</b> だ。
</p>

 <p>
ありもしないものを探せというアドバイスより、何でもいいから続けてみろ、というアドバイスのほうが建設的に見える。
</p>
</div>
</div>
 <div id="outline-container-org6b37eae" class="outline-2">
 <h2 id="org6b37eae"> <a href="#org6b37eae">関連</a></h2>
 <div class="outline-text-2" id="text-org6b37eae">
 <ul class="org-ul"> <li> <a href="20221027T235104--kdoc-3-『ない仕事の作り方』__book.html#ID-20221027T235104">KDOC 3: 『ない仕事の作り方』</a>では、好きだから集めるのではなく、大量に集めるから好きになるのだ、と主張する</li>
 <li> <a href="20250611T180912--kdoc-385-『続ける思考』__book.html#ID-20250611T180912">KDOC 385: 『続ける思考』</a>では、意味など考えず時間をかけた結果として好きになる、と主張する</li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250629T110721--kdoc-410-物事に対する情熱は行動の後に生まれる__draft_essay.html"/>
  <id>https://kijimad.github.io/roam/20250629T110721--kdoc-410-物事に対する情熱は行動の後に生まれる__draft_essay.html</id>
  <updated>2025-07-04T16:51:30+09:00</updated>
</entry>
<entry>
  <title>KDOC 409: 挫折し続けた運動を習慣化できたのは毎日やったから</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orgf494f69" class="outline-2">
 <h2 id="orgf494f69"> <a href="#orgf494f69">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-orgf494f69">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-26 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-29 貴島</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org4d54976" class="outline-2">
 <h2 id="org4d54976"> <a href="#org4d54976">概要</a></h2>
 <div class="outline-text-2" id="text-org4d54976">
 <p>
運動を1年間継続してやっている。体の変化を実感し、自信になっている。肉体だけでない。自分がやると決めたことを続けられる人間なのだということを誇らしく感じる。
</p>

 <p>
 <a href="20240810T073930--kdoc-215-運動習慣を身につけるヒントを考える__essay.html#ID-20240810T073930">KDOC 215: 運動習慣を身につけるヒントを考える</a>では、継続1ヶ月時点で、なぜ続けられているのかを考えている。今は最大の要因について違う意見を持っている。もっとも重要な要因は、「毎日やっていたから」に見える。本で紹介していたトレーニングのスケジュールが曜日ごとに違う部位のトレーニングを1種類やる、というものだったのでそのとおりに毎日やっていた。
</p>

 <p>
意見を変えた理由は、ほかの習慣における再現性である。運動は習慣化できたが、ほかのことへの応用はうまくいっていなかった。
</p>

 <p>
最近、 <a href="20250624T222943--kdoc-408-続けるコツは週7日やることである__essay.html#ID-20250624T222943">KDOC 408: 続けるコツは週7日やることである</a>がよさそうに見えたので、毎日やるのを実践している。毎日5分本を読む、5分英語の動画を見る、といった習慣をはじめてしばらく期間が経過したのだが、じつに自然に継続している。
</p>

 <p>
重要なのは、毎日実行すること、毎日実行できるようにハードルを下げる、ということだったように見える。
</p>
</div>
</div>
 <div id="outline-container-org4d8a9c5" class="outline-2">
 <h2 id="org4d8a9c5"> <a href="#org4d8a9c5">関連</a></h2>
 <div class="outline-text-2" id="text-org4d8a9c5">
 <ul class="org-ul"> <li> <a href="20240708T214636--kdoc-197-『プリズナー・トレーニング』__book.html#ID-20240708T214636">KDOC 197: 『プリズナー・トレーニング』</a>。運動を習慣化できた本</li>
 <li> <a href="20250611T180912--kdoc-385-『続ける思考』__book.html#ID-20250611T180912">KDOC 385: 『続ける思考』</a>。習慣化するために誰でも再現可能な方法を解説する本</li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250626T085406--kdoc-409-挫折し続けた運動を習慣化できたのは毎日やったから__essay.html"/>
  <id>https://kijimad.github.io/roam/20250626T085406--kdoc-409-挫折し続けた運動を習慣化できたのは毎日やったから__essay.html</id>
  <updated>2025-07-04T16:51:29+09:00</updated>
</entry>
<entry>
  <title>KDOC 412: ヒープ管理方法の変遷を見る</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org8c5e1a3" class="outline-2">
 <h2 id="org8c5e1a3"> <a href="#org8c5e1a3">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org8c5e1a3">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-30 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-orgde0dd57" class="outline-2">
 <h2 id="orgde0dd57"> <a href="#orgde0dd57">概要</a></h2>
 <div class="outline-text-2" id="text-orgde0dd57">
 <p>
ヒープ管理方法の変遷を見る。柔軟性、安全性、パフォーマンスのトレードオフの歴史である。
</p>

 <ol class="org-ol"> <li>従来はプログラマーが  <code>malloc</code> や  <code>free</code> でヒープを確保・解放していた
 <ul class="org-ul"> <li>課題: メモリ解放忘れや解放済みのポインタへのアクセス。安全性に問題があった</li>
</ul></li>
 <li>処理系にガベージコレクションを組み込み、メモリ管理を自動で行うようにした
 <ul class="org-ul"> <li>課題: パフォーマンスへの影響、一時停止、管理の複雑さ</li>
</ul></li>
 <li>所有権に基づいてメモリを管理する。コンパイル時にメモリ管理の正しさを検証し、実行時のオーバーヘッドなく安全性を得る
 <ul class="org-ul"> <li>課題: リストなど特定のケースで実装が難しいことがあるという</li>
</ul></li>
</ol></div>
</div>
 <div id="outline-container-org0f3c6c1" class="outline-2">
 <h2 id="org0f3c6c1"> <a href="#org0f3c6c1">関連</a></h2>
 <div class="outline-text-2" id="text-org0f3c6c1">
 <ul class="org-ul"> <li> <a href="https://ja.wikipedia.org/wiki/%E3%82%AC%E3%83%99%E3%83%BC%E3%82%B8%E3%82%B3%E3%83%AC%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3">ガベージコレクション - Wikipedia</a></li>
 <li> <a href="20250630T185540--kdoc-411-スタックは積み重ねて取り出して解放する。ではヒープは__draft_permanent.html#ID-20250630T185540">KDOC 411: スタックは積み重ねて解放する。ではヒープは?</a>。きっかけになった疑問</li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250630T192238--kdoc-412-ヒープ管理方法の変遷を見る__draft_permanent.html"/>
  <id>https://kijimad.github.io/roam/20250630T192238--kdoc-412-ヒープ管理方法の変遷を見る__draft_permanent.html</id>
  <updated>2025-07-04T16:51:11+09:00</updated>
</entry>
<entry>
  <title>KDOC 403: 六義園を観察する</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org0c1f619" class="outline-2">
 <h2 id="org0c1f619"> <a href="#org0c1f619">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org0c1f619">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-21 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-29 貴島</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-orgb672d74" class="outline-2">
 <h2 id="orgb672d74"> <a href="#orgb672d74">概要</a></h2>
 <div class="outline-text-2" id="text-orgb672d74">
 <p>
六義園は、東京都文京区にある庭園である。博物館かどうかは微妙だが、来歴や解説の展示も割とあるので博物館観察シリーズに入れる。
</p>

 <iframe src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3905.019232201816!2d139.74315321198782!3d35.733100472456165!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x60188dbdf73e4461%3A0x7648774313f66fe5!2sRikugien%20Gardens!5e1!3m2!1sen!2sjp!4v1750636306703!5m2!1sen!2sjp" width="600" height="450" style="border:0;" allowfullscreen="" loading="lazy" referrerpolicy="no-referrer-when-downgrade"></iframe>
</div>
</div>
 <div id="outline-container-org81c750e" class="outline-2">
 <h2 id="org81c750e"> <a href="#org81c750e">メモ</a></h2>
 <div class="outline-text-2" id="text-org81c750e">
 <ul class="org-ul"> <li>公園ではなく、庭園である。代々木公園とは違う。広い庭園だが順路以外は入れない。座れる場所もそう多くない。ゆっくりするというより、庭園の設計どおりに観覧客が視点を移動させ風景を味わうものであるという意図を感じた。この点、博物館に近い
 <ul class="org-ul"> <li>人が留まらないので、静かである</li>
</ul></li>
 <li>太神楽(だいかぐら)という、大道芸的な伝統芸能があるのを知った。あじさいの美しい庭園の入り口部分で、和装の芸人2人が観覧席を前に技芸を披露していた。芸人なのでおひねりを要求するのだが、やはり場所によるプレミア感なのか、額面の入りがよかったように見えた。小銭を入れている人はいなかった(自分も札を出した)。これが仮に錦糸町駅前のパフォーマンスだったとすると、同じ額になってはいなかったように見える</li>
 <li>外国人の比率が多かったように見える。客層を反映しているのか、園内は英語が付記されたものが多かった。太神楽の芸人もブロークンな英語を交えてトークしていた</li>
 <li>園内のいたるところに解説板がある。場所の名前についての解説、意匠の解説などがある</li>
</ul></div>
</div>
 <div id="outline-container-org4dedfae" class="outline-2">
 <h2 id="org4dedfae"> <a href="#org4dedfae">関連</a></h2>
 <div class="outline-text-2" id="text-org4dedfae">
 <p>
なし。
</p>
</div>
</div>
 <div id="outline-container-org31add1a" class="outline-2">
 <h2 id="org31add1a"> <a href="#org31add1a">Backlinks</a></h2>
 <div class="outline-text-2" id="text-org31add1a">
 <ul class="org-ul"> <li> <a href="./20240908T180537--kdoc-238-他人の博物館を観察して参考にする__project.html">KDOC 238: 他人の博物館を観察して参考にする</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250621T205407--kdoc-403-六義園を観察する__essay.html"/>
  <id>https://kijimad.github.io/roam/20250621T205407--kdoc-403-六義園を観察する__essay.html</id>
  <updated>2025-07-04T16:51:06+09:00</updated>
</entry>
<entry>
  <title>KDOC 399: 『PostgreSQL 17.0』</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org5727a5b" class="outline-2">
 <h2 id="org5727a5b"> <a href="#org5727a5b">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org5727a5b">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul> <ul class="org-ul"> <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org3c205c9" class="outline-2">
 <h2 id="org3c205c9"> <a href="#org3c205c9">概要</a></h2>
 <div class="outline-text-2" id="text-org3c205c9">
 <p>
 <a href="https://pgsql-jp.github.io/jpug-doc/17.0/postgresql-17.0-A4.pdf">PostgreSQL 17.0文書</a>は、PostgreSQLのマニュアル。
</p>
</div>
</div>
 <div id="outline-container-org43145cd" class="outline-2">
 <h2 id="org43145cd"> <a href="#org43145cd">メモ</a></h2>
 <div class="outline-text-2" id="text-org43145cd">
 <ul class="org-ul"> <li>PostgreSQLはクライアント/サーバモデルを採用している。クライアントとサーバのホストが異なる場合、TCP/IPネットワーク経由で通信する(p4)
 <ul class="org-ul"> <li>(感想)ホストが同じ場合はソケット接続という理解で合っているか</li>
</ul></li>
 <li>サーバは接続ごとに新しいプロセスを開始(fork)する。これによってクライアントからの複数同時接続を取り扱える(p4)</li>
 <li>左外部結合というのは、結合演算子の左側に指定したテーブルの各行が最低でも1度出力されるから。いっぽう右側では左側のテーブルの行に一致するもののみが出力される(p14)</li>
 <li>SQLのWHEREとHAVINGの間の相互作用を理解するのが重要である。WHEREとHAVINGの基本的な違いは、WHEREがグループや集約を演算する前に入力行を選択するのに対し、HAVINGはグループと集約を演算したあとにグループ化された行を選択する。したがって、WHERE句は集約関数を持てない。集約を使ってどの行をその集約の入力にすることになるから(p17)</li>
 <li>複数のトランザクションが同時に動作しているとき、それぞれのトランザクションは別のトランザクションが行っている未完了の変更を見ることができてはならない。作業中のトランザクションによる更新は、ほかのトランザクションからはトランザクションが完結するまで不可視である。そのトランザクションが完結した時点でトランザクションで行った更新のすべてが見えるようになる(p21)</li>
 <li>PostgreSQLはすべてのSQL文をトランザクション内で実行するようになっている。BEGINを発行しない場合、それぞれの文は暗黙的にBEGINが付いているとみなし、成功すればCOMMITで囲われているものとする(p21)</li>
 <li>セーブポイントはトランザクションを構成するある部分を選択的に破棄するいっぽう、破棄されない残りの部分をコミットする(p22)</li>
 <li>システムは  <code>NAMEDATALEN</code> - 1より長い識別子を使わない。より長い名前を書くと短く切られる。デフォルトでは  <code>NAMEDATALEN</code> は64バイトなので、識別子は最長で63バイト。定数は変えて増やせる(p40)</li>
 <li>任意の文字の連なりをダブルクォートで囲ったものを区切り識別子 or 引用符付き識別子という(p40)
 <ul class="org-ul"> <li>(感想)なぜプログラミング言語のように文字列リテラルといわないのか</li>
 <li>(感想)名前の列あるいはテーブルを問い合わせるために使うから。データそのものでなく、識別子として使うからこのような名前になっている</li>
</ul></li>
 <li>引用符がつかない名前は常に小文字に解釈される。識別子を引用符で囲むことで大文字と小文字が区別される(p40)</li>
 <li>SQLにおける文字列定数は、単一引用符で括られた任意の文字の並びである(p41)
 <ul class="org-ul"> <li>(感想)なぜ文字列定数というのだろう</li>
</ul></li>
 <li>対象の文字列内に単一引用符が多くあると、それらをすべて二重にしなければならないので理解しづらくなる。そのような場合は単一引用符をエスケープすることなく使用できるドル引用符付けが便利。ただし標準SQLで定義されていない(p44)</li>
 <li>定数は文脈に基づいて自動的にもっとも適切な型に変換される(p46)</li>
 <li>(感想)集約とか関数とかはあまり使ったことがないしあまり使うケースもないように見えるので、細かい話があまり頭に入ってこない</li>
 <li>SQLではテーブル内の行の順序は保証されない。テーブルを読み込むと、明示的に並び替えを要求しない限り行は不特定な順番で並び替えられる(p69)</li>
 <li>リレーショナルデータベース理論では、すべてのテーブルに主キーが1つ必要とされている。PostgrSQLは強制しないが、これに従うことが推奨される(p80)</li>
 <li>関連削除のデフォルト設定はNO ACTIONである。NO ACTIONでは検査をトランザクション中で後回しにできる。RESTRICTは後回しにできない(p83)</li>
 <li>排他制約  <code>EXCLUDE</code> によって、2つの行に関して演算子の比較の少なくとも1つが偽もしくはnullを返すのを確実にする(p84)</li>
 <li>全てのテーブルに、システムによって暗黙的に定義されたシステム列がいくつかある(p84)</li>
</ul></div>
</div>
 <div id="outline-container-orga327e51" class="outline-2">
 <h2 id="orga327e51"> <a href="#orga327e51">関連</a></h2>
 <div class="outline-text-2" id="text-orga327e51">
 <p>
なし。
</p>
</div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250618T233353--kdoc-399-『postgresql-170』__draft_book.html"/>
  <id>https://kijimad.github.io/roam/20250618T233353--kdoc-399-『postgresql-170』__draft_book.html</id>
  <updated>2025-07-04T16:51:05+09:00</updated>
</entry>
<entry>
  <title>KDOC 404: ネットワークは階層化によってネットワークやアプリケーションの自由度を高くしている</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orgb8d5ec8" class="outline-2">
 <h2 id="orgb8d5ec8"> <a href="#orgb8d5ec8">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-orgb8d5ec8">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-22 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-29 貴島</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org65bdf84" class="outline-2">
 <h2 id="org65bdf84"> <a href="#org65bdf84">概要</a></h2>
 <div class="outline-text-2" id="text-org65bdf84">
 <p>
ネットワークシステムは何段階にも機能を分け、組み合わせた形で構築されている。実際のネットワーク方式(Wi-Fi、有線…)、伝送の制御、アプリケーション…。このようにすることでネットワーク方式やアプリケーションの自由度が高くなる(位置206)
</p>
</div>
</div>
 <div id="outline-container-org0261ffe" class="outline-2">
 <h2 id="org0261ffe"> <a href="#org0261ffe">関連</a></h2>
 <div class="outline-text-2" id="text-org0261ffe">
 <ul class="org-ul"> <li> <a href="20250506T120102--kdoc-377-『一日で読めてわかるtcpipのエッセンス』__book.html#ID-20250506T120102">KDOC 377: 『一日で読めてわかるTCP/IPのエッセンス』</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250622T091856--kdoc-404-ネットワークは階層化によってネットワークやアプリケーションの自由度を高くしている__book.html"/>
  <id>https://kijimad.github.io/roam/20250622T091856--kdoc-404-ネットワークは階層化によってネットワークやアプリケーションの自由度を高くしている__book.html</id>
  <updated>2025-07-04T16:51:01+09:00</updated>
</entry>
<entry>
  <title>KDOC 408: 続けるコツは週7日やることである</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orgf8acfc9" class="outline-2">
 <h2 id="orgf8acfc9"> <a href="#orgf8acfc9">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-orgf8acfc9">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-24 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-29 貴島</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-orgb8007fd" class="outline-2">
 <h2 id="orgb8007fd"> <a href="#orgb8007fd">概要</a></h2>
 <div class="outline-text-2" id="text-orgb8007fd">
 <p>
ラクに続けるコツは、週7日やることである(位置372)。
</p>

 <p>
今日はいいから明日やろう、となる余地があるとすぐにやらなくなるのを何度も経験してきた。毎朝5分、例外なく毎日やることで意思の力に関係なく続けやすい。そして、取り組み始めれば意外とノッてきて長くできるものである。
</p>
</div>
</div>
 <div id="outline-container-orgf379c2a" class="outline-2">
 <h2 id="orgf379c2a"> <a href="#orgf379c2a">関連</a></h2>
 <div class="outline-text-2" id="text-orgf379c2a">
 <ul class="org-ul"> <li> <a href="20250611T180912--kdoc-385-『続ける思考』__book.html#ID-20250611T180912">KDOC 385: 『続ける思考』</a>から</li>
</ul></div>
</div>
 <div id="outline-container-orgda3d1ce" class="outline-2">
 <h2 id="orgda3d1ce"> <a href="#orgda3d1ce">Backlinks</a></h2>
 <div class="outline-text-2" id="text-orgda3d1ce">
 <ul class="org-ul"> <li> <a href="./20250626T085406--kdoc-409-挫折し続けた運動を習慣化できたのは毎日やったから__essay.html">KDOC 409: 挫折し続けた運動を習慣化できたのは毎日やったから</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250624T222943--kdoc-408-続けるコツは週7日やることである__essay.html"/>
  <id>https://kijimad.github.io/roam/20250624T222943--kdoc-408-続けるコツは週7日やることである__essay.html</id>
  <updated>2025-07-04T16:50:54+09:00</updated>
</entry>
<entry>
  <title>KDOC 402: Goの識別子の境界を探る</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orgc6d9cec" class="outline-2">
 <h2 id="orgc6d9cec"> <a href="#orgc6d9cec">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-orgc6d9cec">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-21 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-29 貴島</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-orgba03362" class="outline-2">
 <h2 id="orgba03362"> <a href="#orgba03362">概要</a></h2>
 <div class="outline-text-2" id="text-orgba03362">
 <p>
多くの現代的なプログラミング言語では識別子にUnicodeの文字(コードポイント)を使えるということを知っていたが、ちゃんとGoの仕様を調べたことはなかった。確認する。
</p>

 <p>
最初に、何も調べずに実行してみて確かめてみる。違和感がすごいが、英語ネイティブが見ているのはこういう景色なのだろう。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 1: </span>すべて正しいシンタックス。ビルド、実行できる</label> <pre class="src src-go">import "fmt"
func main() {
        // 変数名に日本語が使える
        あ := "a"
        fmt.Println(あ)

        // 関数名に日本語が使える
        漢字()

        // 型名に日本語が使える
        type 地名 struct {}
        var 江戸川橋 地名
        fmt.Println(江戸川橋)
}

func 漢字() {}
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-nil">a
{}
</pre>
</div>

 <p>
調べてみる。
</p>

 <p>
 <a href="https://go.dev/ref/spec#letter">言語仕様書</a>によると、識別子( <code>identifier</code>)の定義はこうだ。出てきた  <code>letter</code>,  <code>unicode_letter</code> も辿って調べた。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 2: </span>identifierの定義</label> <pre class="src src-code">identifier = letter { letter | unicode_digit } .
letter     = unicode_letter | "_" .
unicode_letter = /* a Unicode code point categorized as "Letter" */ .
</pre>
</div>

 <p>
ここからわかること、考察。
</p>

 <ul class="org-ul"> <li>Unicodeにはカテゴリという概念がある。letter(文字), mark(結合記号), number(数字), punctuation(句読点), …
 <ul class="org-ul"> <li>結合記号はアクセント記号のように、ほかの文字と組み合わせて使う記号のことである</li>
 <li>たとえば漢字はletterのサブカテゴリotherに属する</li>
</ul></li>
 <li>識別子の先頭にletterカテゴリの文字があれば、あとはなんでもいい。逆にいえば、結合記号、数字、句読点、…から開始できない</li>
 <li>アンダースコア  <code>_</code> は句読点カテゴリの文字である。例外的にletterとして許容されている
 <ul class="org-ul"> <li>自然に使っていて、全く意識してなかった</li>
</ul></li>
</ul> <p>
以上から、無効なパターンを試した <sup> <a id="fnr.1" class="footref" href="#fn.1" role="doc-backlink">1</a></sup>。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 3: </span>結合記号、数字、句読点、…から開始できない</label> <pre class="src src-shell"> <span class="org-variable-name">tmpfile</span>=$(mktemp /tmp/tmpgo.XXXXXX.go)

cat > $ <span class="org-variable-name">tmpfile</span> <<EOF
 <span class="org-sh-heredoc">package main</span>

 <span class="org-sh-heredoc">func main() {</span>
 <span class="org-sh-heredoc">  // 先頭のアクセント記号は不可</span>
 <span class="org-sh-heredoc">  ◌̀ := "あ"</span>
 <span class="org-sh-heredoc">  print(◌̀)</span>

 <span class="org-sh-heredoc">  // 先頭の数字は不可</span>
 <span class="org-sh-heredoc">  ９ := "あ"</span>
 <span class="org-sh-heredoc">  print(９)</span>

 <span class="org-sh-heredoc">  // 先頭の漢数字はletter扱いなので問題ない</span>
 <span class="org-sh-heredoc">  九 := "あ"</span>
 <span class="org-sh-heredoc">  print(九)</span>

 <span class="org-sh-heredoc">  // 先頭の句読点は不可</span>
 <span class="org-sh-heredoc">  、 := "あ"</span>
 <span class="org-sh-heredoc">  print(、)</span>

 <span class="org-sh-heredoc">  // 先頭のシンボルは不可</span>
 <span class="org-sh-heredoc">  👍 := "あ"</span>
 <span class="org-sh-heredoc">  print(👍)</span>
 <span class="org-sh-heredoc">}</span>
 <span class="org-sh-heredoc">EOF</span>

go run $ <span class="org-variable-name">tmpfile</span> 2>&1
rm $ <span class="org-variable-name">tmpfile</span>
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-nil">/tmp/tmpgo.FO1KQz.go:5:3: invalid character U+25CC '◌' in identifier
/tmp/tmpgo.FO1KQz.go:5:6: invalid character U+0300 '̀' in identifier
/tmp/tmpgo.FO1KQz.go:6:9: invalid character U+25CC '◌' in identifier
/tmp/tmpgo.FO1KQz.go:6:12: invalid character U+0300 '̀' in identifier
/tmp/tmpgo.FO1KQz.go:9:3: identifier cannot begin with digit U+FF19 '９'
/tmp/tmpgo.FO1KQz.go:10:9: identifier cannot begin with digit U+FF19 '９'
/tmp/tmpgo.FO1KQz.go:17:3: invalid character U+3001 '、' in identifier
/tmp/tmpgo.FO1KQz.go:18:9: invalid character U+3001 '、' in identifier
/tmp/tmpgo.FO1KQz.go:21:3: invalid character U+1F44D '👍' in identifier
/tmp/tmpgo.FO1KQz.go:22:9: invalid character U+1F44D '👍' in identifier
/tmp/tmpgo.FO1KQz.go:22:9: too many errors
</pre>
</div>

 <p>
調べる前の認識は、正確ではなかったのがわかった。
</p>
</div>
</div>
 <div id="outline-container-org346f682" class="outline-2">
 <h2 id="org346f682"> <a href="#org346f682">関連</a></h2>
 <div class="outline-text-2" id="text-org346f682">
 <ul class="org-ul"> <li> <a href="https://en.wikipedia.org/wiki/Unicode_character_property">Unicode character property - Wikipedia</a>。カテゴリ表を参考にした</li>
 <li> <a href="https://go.dev/ref/spec#letter">The Go Programming Language Specification</a>。Goの言語仕様書</li>
</ul></div>
</div>
 <div id="footnotes">
 <h2 class="footnotes">Footnotes: </h2>
 <div id="text-footnotes">

 <div class="footdef"> <sup> <a id="fn.1" class="footnum" href="#fnr.1" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"> <p class="footpara">
org-babelで標準エラーを出すためシェルスクリプトから実行している。
</p></div></div>


</div>
</div></div>]]></content>
  <link href="https://kijimad.github.io/roam/20250621T183743--kdoc-402-goの識別子の境界を探る__wiki.html"/>
  <id>https://kijimad.github.io/roam/20250621T183743--kdoc-402-goの識別子の境界を探る__wiki.html</id>
  <updated>2025-07-04T16:50:54+09:00</updated>
</entry>
<entry>
  <title>KDOC 411: スタックは積み重ねて取り出して解放する。ではヒープは?</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orgedb129f" class="outline-2">
 <h2 id="orgedb129f"> <a href="#orgedb129f">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-orgedb129f">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-30 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org8034080" class="outline-2">
 <h2 id="org8034080"> <a href="#org8034080">概要</a></h2>
 <div class="outline-text-2" id="text-org8034080">
 <p>
スタックとヒープについて聞かれた。
</p>

 <p>
スタック領域は関数呼び出しとともに積み重ねてローカル変数を保存していき、抜けるとともに解放できる明確なイメージがあった。しかし、ヒープはどう使われているかを答えられなくて凹んだ。
</p>

 <hr></hr> <hr></hr> <p>
逆になぜ、スタックの使用方法は明確なイメージがあったのだろうか。それはよくコードとアセンブリを比較していたからだ。スタックベースの操作が頻繁に登場し、関数呼び出し時にメモリを確保し、抜けるときに破棄する流れをよく見た。
</p>

 <p>
多くのCPUの命令セットアーキテクチャは  <code>push</code> /  <code>pop</code> /  <code>ret</code> などのスタック操作をサポートしている。これらの命令は「一番上に積む」「一番上から取る」という制限された動きしかできず柔軟性はない。だからコンパイル時にサイズを決めて機械的に変換でき、どの領域が使われているかは明確である。スタックは、CPUレベルで使っていると言える。
</p>

 <p>
いっぽう、アセンブリでヒープ確保は、  <code>malloc</code> のようなライブラリ関数の呼び出し( <code>call</code>)として現れる。そのさきで何が行われているかは、OSや言語処理系レベルの話だ。スタックより柔軟に使えるが複雑なために、上のレイヤーに任せているといえる。
</p>
</div>
</div>
 <div id="outline-container-org47ede88" class="outline-2">
 <h2 id="org47ede88"> <a href="#org47ede88">関連</a></h2>
 <div class="outline-text-2" id="text-org47ede88">
 <ul class="org-ul"> <li> <a href="https://ja.wikipedia.org/wiki/%E3%83%92%E3%83%BC%E3%83%97%E9%A0%98%E5%9F%9F">ヒープ領域 - Wikipedia</a></li>
 <li> <a href="20240427T120833--kdoc-141-cのポインタ操作をアセンブリで見る__wiki.html#ID-20240427T120833">KDOC 141: Cのポインタ操作をアセンブリで見る</a>。アセンブラを見ていた例</li>
</ul></div>
</div>
 <div id="outline-container-org651e28d" class="outline-2">
 <h2 id="org651e28d"> <a href="#org651e28d">Backlinks</a></h2>
 <div class="outline-text-2" id="text-org651e28d">
 <ul class="org-ul"> <li> <a href="./20250630T192238--kdoc-412-ヒープ管理方法の変遷を見る__draft_permanent.html">KDOC 412: ヒープ管理方法の変遷を見る</a></li>
 <li> <a href="./20250701T174437--kdoc-413-ローカル変数がヒープにエスケープされるのを見る__draft_wiki.html">KDOC 413: ローカル変数がヒープにエスケープされるのを見る</a></li>
 <li> <a href="./20250701T193212--kdoc-414-インターフェースがヒープにエスケープされるのを見る__draft_wiki.html">KDOC 414: インターフェースがヒープにエスケープされるのを見る</a></li>
 <li> <a href="./20250702T194815--kdoc-416-goのエスケープ解析における2つの不変条件を見る__draft_permanent.html">KDOC 416: Goのエスケープ解析における2つの不変条件を見る</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250630T185540--kdoc-411-スタックは積み重ねて取り出して解放する。ではヒープは__draft_permanent.html"/>
  <id>https://kijimad.github.io/roam/20250630T185540--kdoc-411-スタックは積み重ねて取り出して解放する。ではヒープは__draft_permanent.html</id>
  <updated>2025-07-04T16:50:46+09:00</updated>
</entry>
<entry>
  <title>KDOC 407: 1W5Hでユーザーストーリーを書く</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orgf910ce0" class="outline-2">
 <h2 id="orgf910ce0"> <a href="#orgf910ce0">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-orgf910ce0">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-24 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-29 貴島</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-orgca7b9ef" class="outline-2">
 <h2 id="orgca7b9ef"> <a href="#orgca7b9ef">概要</a></h2>
 <div class="outline-text-2" id="text-orgca7b9ef">
 <p>
 <a href="https://speakerdeck.com/soudai/grow-one-day-each-day?slide=30">**強い**エンジニアのなり方 - フィードバックサイクルを勝ち取る / grow one day each day</a>で、問題設定の文脈において1W5H形式でユーザーストーリーに記載することが書かれていた。
</p>

 <p>
これらは当たり前に見える。しかしだからこそ、ズレが生まれる。それを明確にすることが大事なのだと考えた。
</p>

 <p>
メモ。
</p>

 <ul class="org-ul"> <li>Why
 <ul class="org-ul"> <li>なぜ必要なのか</li>
</ul></li>
 <li>What
 <ul class="org-ul"> <li>実現したいことは何か</li>
 <li>成果物は何か</li>
 <li>完了の定義</li>
</ul></li>
 <li>When
 <ul class="org-ul"> <li>タスクの期限</li>
</ul></li>
 <li>Where
 <ul class="org-ul"> <li>ビジョンやゴールはどこか</li>
 <li>どこで実行されるか</li>
</ul></li>
 <li>Who
 <ul class="org-ul"> <li>ステークホルダーは誰か</li>
 <li>利用者は誰か</li>
 <li>依頼者は誰か</li>
 <li>レビューは誰にお願いするか</li>
</ul></li>
 <li>How
 <ul class="org-ul"> <li>どのように実現するか</li>
 <li>実装のための制約や方針も含む</li>
</ul></li>
</ul> <p>
ユーザーストーリーの見直し。
</p>

 <ul class="org-ul"> <li>もっとも実現したいことにフォーカスする</li>
 <li>複数の方法に置き換え</li>
 <li>実現する場所、実装する場所を置き換える</li>
 <li>届けたいペルソナを絞る</li>
 <li>制約を減らす方法を検討する</li>
 <li>今やるべきか検討する</li>
</ul></div>
</div>
 <div id="outline-container-org4f0dc84" class="outline-2">
 <h2 id="org4f0dc84"> <a href="#org4f0dc84">関連</a></h2>
 <div class="outline-text-2" id="text-org4f0dc84">
 <p>
なし。
</p>
</div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250624T214442--kdoc-407-1w5hでユーザーストーリーを書く__essay.html"/>
  <id>https://kijimad.github.io/roam/20250624T214442--kdoc-407-1w5hでユーザーストーリーを書く__essay.html</id>
  <updated>2025-07-04T16:50:46+09:00</updated>
</entry>
<entry>
  <title>KDOC 417: WASMでリクエスト実装を変えているのを見る</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orge7cb179" class="outline-2">
 <h2 id="orge7cb179"> <a href="#orge7cb179">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-orge7cb179">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul> <ul class="org-ul"> <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org8fe9ad3" class="outline-2">
 <h2 id="org8fe9ad3"> <a href="#org8fe9ad3">概要</a></h2>
 <div class="outline-text-2" id="text-org8fe9ad3">
 <p>
WASMはブラウザのサンドボックス化された環境で実行される。外部機能にアクセスするには、JavaScriptのAPIを経由する。
</p>

 <div class="org-src-container">
 <pre class="src src-git-permalink">https://github.com/golang/go/blob/988a20c8c5e2c9eb49f8749e5ee94ce3c964fe59/src/net/http/roundtrip_js.go#L129
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-nil">fetchPromise := js.Global().Call("fetch", req.URL.String(), opt)
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgd867524" class="outline-2">
 <h2 id="orgd867524"> <a href="#orgd867524">関連</a></h2>
 <div class="outline-text-2" id="text-orgd867524">
 <p>
なし。
</p>
</div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250702T234055--kdoc-417-wasmでリクエスト実装を変えているのを見る__draft_permanent.html"/>
  <id>https://kijimad.github.io/roam/20250702T234055--kdoc-417-wasmでリクエスト実装を変えているのを見る__draft_permanent.html</id>
  <updated>2025-07-04T16:50:45+09:00</updated>
</entry>
<entry>
  <title>KDOC 414: インターフェースがヒープにエスケープされるのを見る</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org3065dfb" class="outline-2">
 <h2 id="org3065dfb"> <a href="#org3065dfb">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org3065dfb">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-07-01 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org830a0d4" class="outline-2">
 <h2 id="org830a0d4"> <a href="#org830a0d4">概要</a></h2>
 <div class="outline-text-2" id="text-org830a0d4">
 <p>
関数を抜けた後も使うようなケースでは、消されないようにスタックからヒープに移す必要がある。インターフェースを返すと、実体を関数から抜けた後も保持しておく必要があるため、ヒープにエスケープされる。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 1: </span>最初スタックにあったローカル変数がヒープにエスケープされる様子を見る</label> <pre class="src src-shell"> <span class="org-variable-name">tmpfile</span>=$(mktemp /tmp/tmpgo.XXXXXX.go)

cat > $ <span class="org-variable-name">tmpfile</span> <<EOF
 <span class="org-sh-heredoc">package main</span>

 <span class="org-sh-heredoc">func main() {}</span>

 <span class="org-sh-heredoc">func f() any {</span>
 <span class="org-sh-heredoc">  x := "hello"</span>
 <span class="org-sh-heredoc">  return x // ヒープへ</span>
 <span class="org-sh-heredoc">}</span>

 <span class="org-sh-heredoc">EOF</span>

go build -gcflags= <span class="org-string">"-m"</span> -o bin $ <span class="org-variable-name">tmpfile</span> 2>&1
rm bin
rm $ <span class="org-variable-name">tmpfile</span>
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-nil"># command-line-arguments
/tmp/tmpgo.wTCwGe.go:3:6: can inline main
/tmp/tmpgo.wTCwGe.go:5:6: can inline f
/tmp/tmpgo.wTCwGe.go:7:10: x escapes to heap
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgbfca636" class="outline-2">
 <h2 id="orgbfca636"> <a href="#orgbfca636">関連</a></h2>
 <div class="outline-text-2" id="text-orgbfca636">
 <ul class="org-ul"> <li> <a href="20250630T185540--kdoc-411-スタックは積み重ねて取り出して解放する。ではヒープは__draft_permanent.html#ID-20250630T185540">KDOC 411: スタックは積み重ねて取り出して解放する。ではヒープは?</a>。ヒープを調べるきっかけになった</li>
</ul></div>
</div>
 <div id="outline-container-org81387d2" class="outline-2">
 <h2 id="org81387d2"> <a href="#org81387d2">Backlinks</a></h2>
 <div class="outline-text-2" id="text-org81387d2">
 <ul class="org-ul"> <li> <a href="./20250701T213624--kdoc-415-ioreaderのシグネチャはヒープエスケープを避ける設計になっている__draft_permanent.html">KDOC 415: io.Readerのシグネチャはヒープエスケープを避ける設計になっている</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250701T193212--kdoc-414-インターフェースがヒープにエスケープされるのを見る__draft_wiki.html"/>
  <id>https://kijimad.github.io/roam/20250701T193212--kdoc-414-インターフェースがヒープにエスケープされるのを見る__draft_wiki.html</id>
  <updated>2025-07-04T16:50:44+09:00</updated>
</entry>
<entry>
  <title>KDOC 400: 役割や責任を明確にすることでチーム内のコミュニケーションが円滑になる</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org4020838" class="outline-2">
 <h2 id="org4020838"> <a href="#org4020838">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org4020838">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-21 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-25 貴島</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org6d5d3e1" class="outline-2">
 <h2 id="org6d5d3e1"> <a href="#org6d5d3e1">概要</a></h2>
 <div class="outline-text-2" id="text-org6d5d3e1">
 <p>
役割や責任を明確にすることでチーム内のコミュニケーションが円滑になる、という。プロジェクトのポジションのフレームワークとして、RACIチャート、DACIモデルというものがある。プロジェクトを始めたり人員が変化するタイミングで確認するとよい。
</p>
</div>
</div>
 <div id="outline-container-org49cff5e" class="outline-2">
 <h2 id="org49cff5e"> <a href="#org49cff5e">関連</a></h2>
 <div class="outline-text-2" id="text-org49cff5e">
 <ul class="org-ul"> <li> <a href="https://soudai.hatenablog.com/entry/2024/11/23/132843">仕事を任せるコツとやり方 - そーだいなるらくがき帳</a>から。自分の経験と照らし合わせて、言語化されたように感じた</li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250620T082616--kdoc-400-役割や責任を明確にすることでチーム内のコミュニケーションが円滑になる__essay.html"/>
  <id>https://kijimad.github.io/roam/20250620T082616--kdoc-400-役割や責任を明確にすることでチーム内のコミュニケーションが円滑になる__essay.html</id>
  <updated>2025-07-04T16:50:44+09:00</updated>
</entry>
</feed>
