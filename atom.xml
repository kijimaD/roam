<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><author><name>Kijima Daigo</name></author>
<title>Insomnia</title>
<generator>Emacs webfeeder.el</generator>
<link href="https://kijimad.github.io/roam"/>
<link href="https://kijimad.github.io/roam/atom.xml" rel="self"/>
<id>https://kijimad.github.io/roam/atom.xml</id>
<updated>2025-06-23T19:41:09+09:00</updated>
<entry>
  <title>KDOC 386: IPはデータを機器に届けられるが、目的のプログラムを示せない</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orgdcef86a" class="outline-2">
 <h2 id="orgdcef86a"> <a href="#orgdcef86a">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-orgdcef86a">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-16 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-16 貴島</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-orgb8dda7b" class="outline-2">
 <h2 id="orgb8dda7b"> <a href="#orgb8dda7b">概要</a></h2>
 <div class="outline-text-2" id="text-orgb8dda7b">
 <p>
IPはデータを別のネットワークの機器に届けられるが、目的のプログラムを示せない。機器間の伝送までしかできない。この識別を行いプログラム間でのデータ転送を実現するのが伝送プロトコルのUDPとTCPの役割である(位置151)。
</p>
</div>
</div>
 <div id="outline-container-org3ae2d1e" class="outline-2">
 <h2 id="org3ae2d1e"> <a href="#org3ae2d1e">関連</a></h2>
 <div class="outline-text-2" id="text-org3ae2d1e">
 <ul class="org-ul"> <li> <a href="20250506T120102--kdoc-377-『一日で読めてわかるtcpipのエッセンス』__draft_book.html#ID-20250506T120102">KDOC 377: 『一日で読めてわかるTCP/IPのエッセンス』</a>から</li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250611T184309--kdoc-386-ipはデータを機器に届けられるが、目的のプログラムを示せない__book.html"/>
  <id>https://kijimad.github.io/roam/20250611T184309--kdoc-386-ipはデータを機器に届けられるが、目的のプログラムを示せない__book.html</id>
  <updated>2025-06-24T04:41:07+09:00</updated>
</entry>
<entry>
  <title>KDOC 402: Goの識別子の境界を探る</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org8639b85" class="outline-2">
 <h2 id="org8639b85"> <a href="#org8639b85">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org8639b85">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-21 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-orgaeda389" class="outline-2">
 <h2 id="orgaeda389"> <a href="#orgaeda389">概要</a></h2>
 <div class="outline-text-2" id="text-orgaeda389">
 <p>
多くの現代的なプログラミング言語では識別子にUnicodeの文字列を使えるということを知っていたが、ちゃんとGoの仕様を調べたことはなかった。確認する。
</p>

 <p>
実行してみて確かめてみる。違和感がすごいが、英語ネイティブが見ているのはこういう景色なのだろう。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 1: </span>すべて正しいシンタックス</label> <pre class="src src-go">import "fmt"
func main() {
        // 変数名
        あ := "a"
        fmt.Println(あ)

        // 関数名
        漢字()

        // 型名
        type 地名 struct {}
        var 江戸川橋 地名
        fmt.Println(江戸川橋)
}

func 漢字() {}
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-nil">a
{}
</pre>
</div>

 <p>
 <a href="https://go.dev/ref/spec#letter">言語仕様書</a>によると、識別子( <code>identifier</code>)の定義はこうだ。出てきた  <code>letter</code>,  <code>unicode_letter</code> も辿って調べた。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 2: </span>identifierの定義</label> <pre class="src src-code">identifier = letter { letter | unicode_digit } .
letter     = unicode_letter | "_" .
unicode_letter = /* a Unicode code point categorized as "Letter" */ .
</pre>
</div>

 <p>
ここからわかること、考察。
</p>

 <ul class="org-ul"> <li>Unicodeにはカテゴリという概念がある。letter, mark, number, punctuation, …
 <ul class="org-ul"> <li>たとえば漢字はletterのサブカテゴリotherに属する</li>
</ul></li>
 <li>最初にletterカテゴリがあれば、あとはなんでもいい。逆にいえば、マーク、数字、句読点、…から開始できない</li>
 <li>アンダースコア  <code>_</code> は句読点カテゴリである。例外的に許容されているのであって、ほかの句読点は不可
 <ul class="org-ul"> <li>自然に使っていて、全く意識してなかった</li>
</ul></li>
</ul> <p>
以上から、無効なパターンを試した <sup> <a id="fnr.1" class="footref" href="#fn.1" role="doc-backlink">1</a></sup>。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 3: </span>マーク、数字、句読点、…から開始できない</label> <pre class="src src-shell"> <span class="org-variable-name">tmpfile</span>=$(mktemp /tmp/tmpgo.XXXXXX.go)

cat > $ <span class="org-variable-name">tmpfile</span> <<EOF
 <span class="org-sh-heredoc">package main</span>

 <span class="org-sh-heredoc">func main() {</span>
 <span class="org-sh-heredoc">  // 先頭のマーク(アクセント記号など)は不可</span>
 <span class="org-sh-heredoc">  ◌̀ := "あ"</span>
 <span class="org-sh-heredoc">  print(◌̀)</span>

 <span class="org-sh-heredoc">  // 先頭の数字は不可</span>
 <span class="org-sh-heredoc">  ９ := "あ"</span>
 <span class="org-sh-heredoc">  print(９)</span>

 <span class="org-sh-heredoc">  // 先頭の漢数字はletter扱いなので問題ない</span>
 <span class="org-sh-heredoc">  九 := "あ"</span>
 <span class="org-sh-heredoc">  print(九)</span>

 <span class="org-sh-heredoc">  // 先頭の句読点は不可</span>
 <span class="org-sh-heredoc">  、 := "あ"</span>
 <span class="org-sh-heredoc">  print(、)</span>

 <span class="org-sh-heredoc">  // 先頭のシンボルは不可</span>
 <span class="org-sh-heredoc">  👍 := "あ"</span>
 <span class="org-sh-heredoc">  print(👍)</span>
 <span class="org-sh-heredoc">}</span>
 <span class="org-sh-heredoc">EOF</span>

go run $ <span class="org-variable-name">tmpfile</span> 2>&1
rm $ <span class="org-variable-name">tmpfile</span>
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-nil"># command-line-arguments
/tmp/tmpgo.jBwftD.go:5:3: invalid character U+25CC '◌' in identifier
/tmp/tmpgo.jBwftD.go:5:6: invalid character U+0300 '̀' in identifier
/tmp/tmpgo.jBwftD.go:6:9: invalid character U+25CC '◌' in identifier
/tmp/tmpgo.jBwftD.go:6:12: invalid character U+0300 '̀' in identifier
/tmp/tmpgo.jBwftD.go:9:3: identifier cannot begin with digit U+FF19 '９'
/tmp/tmpgo.jBwftD.go:10:9: identifier cannot begin with digit U+FF19 '９'
/tmp/tmpgo.jBwftD.go:17:3: invalid character U+3001 '、' in identifier
/tmp/tmpgo.jBwftD.go:18:9: invalid character U+3001 '、' in identifier
/tmp/tmpgo.jBwftD.go:22:3: invalid character U+FF3F '＿' in identifier
/tmp/tmpgo.jBwftD.go:23:9: invalid character U+FF3F '＿' in identifier
/tmp/tmpgo.jBwftD.go:23:9: too many errors
</pre>
</div>

 <p>
調べる前の認識は、正確ではなかったのがわかった。
</p>
</div>
</div>
 <div id="outline-container-org6e1b8e3" class="outline-2">
 <h2 id="org6e1b8e3"> <a href="#org6e1b8e3">関連</a></h2>
 <div class="outline-text-2" id="text-org6e1b8e3">
 <ul class="org-ul"> <li> <a href="https://en.wikipedia.org/wiki/Unicode_character_property">Unicode character property - Wikipedia</a>。カテゴリ表を参考にした</li>
 <li> <a href="https://go.dev/ref/spec#letter">The Go Programming Language Specification</a>。Goの言語仕様書</li>
</ul></div>
</div>
 <div id="footnotes">
 <h2 class="footnotes">Footnotes: </h2>
 <div id="text-footnotes">

 <div class="footdef"> <sup> <a id="fn.1" class="footnum" href="#fnr.1" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"> <p class="footpara">
org-babelで標準エラーを出すため変則的な書き方になった。
</p></div></div>


</div>
</div></div>]]></content>
  <link href="https://kijimad.github.io/roam/20250621T183743--kdoc-402-goの識別子の境界を探る__draft_wiki.html"/>
  <id>https://kijimad.github.io/roam/20250621T183743--kdoc-402-goの識別子の境界を探る__draft_wiki.html</id>
  <updated>2025-06-24T04:41:06+09:00</updated>
</entry>
<entry>
  <title>KDOC 389: GORM + MySQLでカラムの順番が変動するのはなぜか?</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org6124f3b" class="outline-2">
 <h2 id="org6124f3b"> <a href="#org6124f3b">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org6124f3b">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-16 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-16 貴島</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-orgac62600" class="outline-2">
 <h2 id="orgac62600"> <a href="#orgac62600">概要</a></h2>
 <div class="outline-text-2" id="text-orgac62600">
 <p>
MySQL + gormでマイグレーションすると、カラムの順序が毎回微妙に変動してしまう。そうなると <a href="https://github.com/k1LoW/tbls">tbls</a>でDBスキーマを出力すると毎回差分が出て、自動チェックができなくて困る。
</p>

 <p>
Postgresでは発生しない。原因はDBなのか、ORMなのか。なぜなのだろうか。
</p>
</div>
</div>
 <div id="outline-container-orgff9bd06" class="outline-2">
 <h2 id="orgff9bd06"> <a href="#orgff9bd06">関連</a></h2>
 <div class="outline-text-2" id="text-orgff9bd06">
 <p>
なし。
</p>
</div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250612T234932--kdoc-389-gorm-mysqlでカラムの順番が変動するのはなぜか__permanent.html"/>
  <id>https://kijimad.github.io/roam/20250612T234932--kdoc-389-gorm-mysqlでカラムの順番が変動するのはなぜか__permanent.html</id>
  <updated>2025-06-24T04:41:04+09:00</updated>
</entry>
<entry>
  <title>KDOC 396: 優れた技術ブログは思考プロセスを含む</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orgfefce67" class="outline-2">
 <h2 id="orgfefce67"> <a href="#orgfefce67">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-orgfefce67">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul> <ul class="org-ul"> <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org7ba5f35" class="outline-2">
 <h2 id="org7ba5f35"> <a href="#org7ba5f35">概要</a></h2>
 <div class="outline-text-2" id="text-org7ba5f35">
 <p>
優れた技術ブログは、どう実装したかだけでなく、「なぜそうしたのか」「他にどんな選択肢を検討したのか」という思考プロセスを含む、という。
</p>

 <ul class="org-ul"> <li> <a href="https://syu-m-5151.hatenablog.com/entry/2025/04/07/181150">エンジニアブログは技術的であるべきで登壇は衒学的であると思う理由 - じゃあ、おうちで学べる</a>から。</li>
</ul></div>
</div>
 <div id="outline-container-org2cb3370" class="outline-2">
 <h2 id="org2cb3370"> <a href="#org2cb3370">関連</a></h2>
 <div class="outline-text-2" id="text-org2cb3370">
 <p>
なし。
</p>
</div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250616T220141--kdoc-396-優れた技術ブログは思考プロセスを含む__draft_essay.html"/>
  <id>https://kijimad.github.io/roam/20250616T220141--kdoc-396-優れた技術ブログは思考プロセスを含む__draft_essay.html</id>
  <updated>2025-06-24T04:41:02+09:00</updated>
</entry>
<entry>
  <title>KDOC 384: 『syntactic support for error handling』</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orgecfeeae" class="outline-2">
 <h2 id="orgecfeeae"> <a href="#orgecfeeae">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-orgecfeeae">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-11 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-16 貴島</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-orga0f1f47" class="outline-2">
 <h2 id="orga0f1f47"> <a href="#orga0f1f47">概要</a></h2>
 <div class="outline-text-2" id="text-orga0f1f47">
 <p>
Go公式ブログの <a href="https://go.dev/blog/error-syntax">[ On | No ] syntactic support for error handling</a>を読んだメモ。
</p>
</div>
</div>
 <div id="outline-container-org68e5673" class="outline-2">
 <h2 id="org68e5673"> <a href="#org68e5673">メモ</a></h2>
 <div class="outline-text-2" id="text-org68e5673">
 <ul class="org-ul"> <li>エラーハンドリングの書き方  <code>if err != nil</code> に関しては、今までたくさんのプロポーザルが送られてきた</li>
 <li>多くの場合は個人の好みに基づいた調整の提案が溢れかえった</li>
 <li>エラーのシンタックスと、エラーハンドリングは別の問題である</li>
 <li>定型文を覆い隠すと、明快さが失われる</li>
 <li>ワンラインの、追加文法は受け入れない。1つのことは1つの書き方に反するから
 <ul class="org-ul"> <li> <code>:=</code> の、再宣言する機能は例外である。エラーハンドリングのため追加された機能</li>
</ul></li>
 <li> <code>Cmp.Or</code> を使って複数のエラーを一気にチェックできる。値であるから、自由度がある</li>
 <li>当面の間、Goチームはエラーハンドリングに関するシンタックスの問題を解決しようとするのをやめる。変更提案を却下する</li>
</ul></div>
</div>
 <div id="outline-container-orgb22a0ed" class="outline-2">
 <h2 id="orgb22a0ed"> <a href="#orgb22a0ed">関連</a></h2>
 <div class="outline-text-2" id="text-orgb22a0ed">
 <p>
なし。
</p>
</div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250610T175039--kdoc-384-『syntactic-support-for-error-handling』__book.html"/>
  <id>https://kijimad.github.io/roam/20250610T175039--kdoc-384-『syntactic-support-for-error-handling』__book.html</id>
  <updated>2025-06-24T04:41:02+09:00</updated>
</entry>
<entry>
  <title>KDOC 392: 絞ってからJOINすることでパフォーマンスを改善する</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org4656e93" class="outline-2">
 <h2 id="org4656e93"> <a href="#org4656e93">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org4656e93">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul> <ul class="org-ul"> <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org8c754a9" class="outline-2">
 <h2 id="org8c754a9"> <a href="#org8c754a9">概要</a></h2>
 <div class="outline-text-2" id="text-org8c754a9">
</div>
</div>
 <div id="outline-container-org7068baf" class="outline-2">
 <h2 id="org7068baf"> <a href="#org7068baf">関連</a></h2>
 <div class="outline-text-2" id="text-org7068baf">
 <p>
なし。
</p>
</div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250614T103239--kdoc-392-絞ってからjoinすることでパフォーマンスを改善する__draft_wiki.html"/>
  <id>https://kijimad.github.io/roam/20250614T103239--kdoc-392-絞ってからjoinすることでパフォーマンスを改善する__draft_wiki.html</id>
  <updated>2025-06-24T04:41:01+09:00</updated>
</entry>
<entry>
  <title>KDOC 401: 起動中のプロセスをstraceで観察する</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org018574f" class="outline-2">
 <h2 id="org018574f"> <a href="#org018574f">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org018574f">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul> <ul class="org-ul"> <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-orgb6da7da" class="outline-2">
 <h2 id="orgb6da7da"> <a href="#orgb6da7da">概要</a></h2>
 <div class="outline-text-2" id="text-orgb6da7da">
</div>
</div>
 <div id="outline-container-org0e2b576" class="outline-2">
 <h2 id="org0e2b576"> <a href="#org0e2b576">関連</a></h2>
 <div class="outline-text-2" id="text-org0e2b576">
 <p>
なし。
</p>
</div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250621T094036--kdoc-401-起動中のプロセスをstraceで観察する__draft_wiki.html"/>
  <id>https://kijimad.github.io/roam/20250621T094036--kdoc-401-起動中のプロセスをstraceで観察する__draft_wiki.html</id>
  <updated>2025-06-24T04:40:59+09:00</updated>
</entry>
<entry>
  <title>KDOC 387: イーサネットによる通信はMACアドレスを使う</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orgb8445c5" class="outline-2">
 <h2 id="orgb8445c5"> <a href="#orgb8445c5">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-orgb8445c5">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-12 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-16 貴島</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-orgb7f1882" class="outline-2">
 <h2 id="orgb7f1882"> <a href="#orgb7f1882">概要</a></h2>
 <div class="outline-text-2" id="text-orgb7f1882">
 <p>
イーサネットによる通信は、MACアドレスを使い、各機器のインターフェース間で行われる。イーサネットの通信は1つのイーサネットネットワークの内部でしかできない(位置274)
</p>
</div>
</div>
 <div id="outline-container-org696cdcf" class="outline-2">
 <h2 id="org696cdcf"> <a href="#org696cdcf">関連</a></h2>
 <div class="outline-text-2" id="text-org696cdcf">
 <ul class="org-ul"> <li> <a href="20250506T120102--kdoc-377-『一日で読めてわかるtcpipのエッセンス』__draft_book.html#ID-20250506T120102">KDOC 377: 『一日で読めてわかるTCP/IPのエッセンス』</a>から</li>
</ul></div>
</div>
 <div id="outline-container-org934054c" class="outline-2">
 <h2 id="org934054c"> <a href="#org934054c">Backlinks</a></h2>
 <div class="outline-text-2" id="text-org934054c">
 <ul class="org-ul"> <li> <a href="./20250613T090351--kdoc-390-イーサネットや無線lanは1つのネットワーク内での通信を行える__draft_book.html">KDOC 390: イーサネットや無線LANは1つのネットワーク内での通信を行える</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250612T204735--kdoc-387-イーサネットによる通信はmacアドレスを使う__book.html"/>
  <id>https://kijimad.github.io/roam/20250612T204735--kdoc-387-イーサネットによる通信はmacアドレスを使う__book.html</id>
  <updated>2025-06-24T04:40:59+09:00</updated>
</entry>
<entry>
  <title>KDOC 398: GORMフックはレシーバーがnilになる可能性がある</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org6d51b83" class="outline-2">
 <h2 id="org6d51b83"> <a href="#org6d51b83">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org6d51b83">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-19 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org26206a2" class="outline-2">
 <h2 id="org26206a2"> <a href="#org26206a2">概要</a></h2>
 <div class="outline-text-2" id="text-org26206a2">
 <p>
GORMでは <a href="https://gorm.io/ja_JP/docs/hooks.html">Hooks</a>を使用できる。これによってCRUD操作の前後の処理を挿入できる。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 1: </span>Userを削除する前に実行される</label> <pre class="src src-go">func (u *User) BeforeDelete(tx *gorm.DB) (err error) {
  return
}
</pre>
</div>

 <p>
もし  <code>Delete()</code> にスライスのUserを渡し一括で削除しようとすると、フックは1度だけ実行され、レシーバはnilになる。
</p>

 <p>
直感的ではないが、こうなっていなければ1件1件削除するたびにモデル情報を取得する必要があり、パフォーマンスの問題になるだろう。
</p>
</div>
</div>
 <div id="outline-container-org94f1b47" class="outline-2">
 <h2 id="org94f1b47"> <a href="#org94f1b47">関連</a></h2>
 <div class="outline-text-2" id="text-org94f1b47">
 <p>
なし。
</p>
</div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250618T232434--kdoc-398-gormフックはレシーバーがnilになる可能性がある__draft_wiki.html"/>
  <id>https://kijimad.github.io/roam/20250618T232434--kdoc-398-gormフックはレシーバーがnilになる可能性がある__draft_wiki.html</id>
  <updated>2025-06-24T04:40:38+09:00</updated>
</entry>
<entry>
  <title>KDOC 397: 技術力とは、技術選択の理由を説明できること</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org671e9fa" class="outline-2">
 <h2 id="org671e9fa"> <a href="#org671e9fa">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org671e9fa">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul> <ul class="org-ul"> <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org0812492" class="outline-2">
 <h2 id="org0812492"> <a href="#org0812492">概要</a></h2>
 <div class="outline-text-2" id="text-org0812492">
 <p>
技術力とは、技術選択の理由を説明できること、長期的な影響を予測できること、そしてプロジェクト全体における個々の実装の位置づけを理解できることである、という。
</p>

 <p>
どの選択肢の中から何を選んだかのプロセスが技術力である。それをやるには、なぜ必要かどの文脈で有用かなどの本質的な理解が必要になる。
</p>
</div>
</div>
 <div id="outline-container-orgc7666f7" class="outline-2">
 <h2 id="orgc7666f7"> <a href="#orgc7666f7">関連</a></h2>
 <div class="outline-text-2" id="text-orgc7666f7">
 <ul class="org-ul"> <li> <a href="https://syu-m-5151.hatenablog.com/entry/2025/02/04/203205">滅びゆく「なぜ？」と「どうして？」の学びをどう受け止めればよいのか？新人エンジニアの指導で感じる生成AI時代の指導の難しさ - じゃあ、おうちで学べる</a>からのメモ</li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250617T082740--kdoc-397-技術力とは、技術選択の理由を説明できること__draft_essay.html"/>
  <id>https://kijimad.github.io/roam/20250617T082740--kdoc-397-技術力とは、技術選択の理由を説明できること__draft_essay.html</id>
  <updated>2025-06-24T04:40:33+09:00</updated>
</entry>
<entry>
  <title>KDOC 391: 1対1のテーブルを維持する</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org6c6ec13" class="outline-2">
 <h2 id="org6c6ec13"> <a href="#org6c6ec13">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org6c6ec13">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-19 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org3058349" class="outline-2">
 <h2 id="org3058349"> <a href="#org3058349">概要</a></h2>
 <div class="outline-text-2" id="text-org3058349">
 <p>
親テーブルと子テーブルのレコードが1対1の対応であることを保ちたい場面がある。親だけ、あるいは子だけが消された状態はデータ不整合である。防ぎたい。
</p>

 <p>
たとえばこのような、必ず「ユーザ」は「個人ユーザ」か「会社ユーザ」である、ようなケース。
</p>

 <p>
users。親。
</p>

 <table> <colgroup> <col class="org-left"></col></colgroup> <thead> <tr> <th scope="col" class="org-left">フィールド</th>
</tr></thead> <tbody> <tr> <td class="org-left">id</td>
</tr></tbody></table> <p>
user_individuals。子。
</p>

 <table> <colgroup> <col class="org-left"></col></colgroup> <thead> <tr> <th scope="col" class="org-left">フィールド</th>
</tr></thead> <tbody> <tr> <td class="org-left">id</td>
</tr> <tr> <td class="org-left">user_id</td>
</tr></tbody></table> <p>
user_companies。子。
</p>

 <table> <colgroup> <col class="org-left"></col></colgroup> <thead> <tr> <th scope="col" class="org-left">フィールド</th>
</tr></thead> <tbody> <tr> <td class="org-left">id</td>
</tr> <tr> <td class="org-left">user_id</td>
</tr></tbody></table> <p>
データベース制約によって、親が消されたら子を削除する、は簡単にできる(DELETE CASCADE)。いっぽう、親子が1対1で子だけの削除を禁止する、というのをデータベースのレベルでは表現できないように見える。
</p>

 <p>
この場合、アプリケーションでガードする、しか方法を知らない。ベストではない。仕様がわかりにくいのと、事故は起きうるのが問題に見える。
</p>

 <ul class="org-ul"> <li>消すときは親テーブルを消し、親削除による関連削除によって子を削除するルールにする</li>
 <li>ORMのフックで、子テーブルの直接削除は禁止する</li>
 <li>アプリケーションに整合チェックを入れて確認する</li>
</ul></div>
</div>
 <div id="outline-container-orgd72530d" class="outline-2">
 <h2 id="orgd72530d"> <a href="#orgd72530d">関連</a></h2>
 <div class="outline-text-2" id="text-orgd72530d">
 <p>
なし。
</p>
</div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250614T012819--kdoc-391-1対1のテーブルを維持する__draft_wiki.html"/>
  <id>https://kijimad.github.io/roam/20250614T012819--kdoc-391-1対1のテーブルを維持する__draft_wiki.html</id>
  <updated>2025-06-24T04:40:33+09:00</updated>
</entry>
<entry>
  <title>KDOC 388: 『仕事ですぐに使えるTypeScript』</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org642f2e3" class="outline-2">
 <h2 id="org642f2e3"> <a href="#org642f2e3">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org642f2e3">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul> <ul class="org-ul"> <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org62fbc93" class="outline-2">
 <h2 id="org62fbc93"> <a href="#org62fbc93">概要</a></h2>
 <div class="outline-text-2" id="text-org62fbc93">
 <p>
 <a href="https://future-architect.github.io/typescript-guide/typescript-guide.pdf">仕事ですぐに使えるTypeScript</a>は、TypeScriptの入門本。
</p>

 <ul class="org-ul"> <li>76</li>
</ul></div>
</div>
 <div id="outline-container-org03dd4ee" class="outline-2">
 <h2 id="org03dd4ee"> <a href="#org03dd4ee">メモ</a></h2>
 <div class="outline-text-2" id="text-org03dd4ee">
 <ul class="org-ul"> <li>TypeScriptのソースコードはあくまでもJavaScriptに変換されてから実行される。TypeScriptのコンパイラが持つインターフェースやtypeなど固有の型情報はランタイムには存在しない。そのため「このオブジェクトがこのインターフェースを持つとき」という実行文はほかの言語のようにそのまま実行できない(p68)</li>
 <li>TypeScriptはそれを解決するために型ガードという機能が実装されている。実行時の文脈を解析し、型の選択肢を適切に絞り込んでいく。コンパイラはtypeofやinstanceofなどを見て型ガードと判定する、という(p68)</li>
 <li>(感想)なぜtypeofは文字列で返すのだろうか。型ガードがある理由と同じようにランタイムにまつわるものだろうか。TypeScriptの層で吸収できそうにも見える</li>
 <li>型ガードではTypeScriptのコンパイラだけが知っている情報は扱えない。JavaScriptとして実行時にアクセスできる情報を使って、booleanを返す必要がある(p70)</li>
 <li>型アサーションは実行文ではなく、あくまでコンパイラの持つ型情報を上書きするものである。型ガードと異なり、実行時には一切参照しない(p70)</li>
 <li>従来のJavaScriptは関数の使い勝手がよかったいっぽうで、言語の他の機能は少なかった。関数を多用したテクニックが多くあった(p75)</li>
</ul></div>
</div>
 <div id="outline-container-orgff0d169" class="outline-2">
 <h2 id="orgff0d169"> <a href="#orgff0d169">関連</a></h2>
 <div class="outline-text-2" id="text-orgff0d169">
 <p>
なし。
</p>
</div>
</div>
 <div id="outline-container-orgcfcc227" class="outline-2">
 <h2 id="orgcfcc227"> <a href="#orgcfcc227">Backlinks</a></h2>
 <div class="outline-text-2" id="text-orgcfcc227">
 <ul class="org-ul"> <li> <a href="./20250603T215644--kdoc-383-javascriptはブラウザの組み込み言語でありランタイムの更新は難しい__permanent.html">KDOC 383: JavaScriptはブラウザの組み込み言語でありランタイムの更新は難しい</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250612T231654--kdoc-388-『仕事ですぐに使えるtypescript』__draft_book.html"/>
  <id>https://kijimad.github.io/roam/20250612T231654--kdoc-388-『仕事ですぐに使えるtypescript』__draft_book.html</id>
  <updated>2025-06-24T04:40:32+09:00</updated>
</entry>
<entry>
  <title>KDOC 399: 『PostgreSQL 17.0』</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org627fc54" class="outline-2">
 <h2 id="org627fc54"> <a href="#org627fc54">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org627fc54">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul> <ul class="org-ul"> <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-orge49dbbe" class="outline-2">
 <h2 id="orge49dbbe"> <a href="#orge49dbbe">概要</a></h2>
 <div class="outline-text-2" id="text-orge49dbbe">
 <p>
 <a href="https://pgsql-jp.github.io/jpug-doc/17.0/postgresql-17.0-A4.pdf">PostgreSQL 17.0文書</a>は、PostgreSQLのマニュアル。
</p>
</div>
</div>
 <div id="outline-container-orgae86e50" class="outline-2">
 <h2 id="orgae86e50"> <a href="#orgae86e50">メモ</a></h2>
 <div class="outline-text-2" id="text-orgae86e50">
 <ul class="org-ul"> <li>PostgreSQLはクライアント/サーバモデルを採用している。クライアントとサーバのホストが異なる場合、TCP/IPネットワーク経由で通信する(p4)
 <ul class="org-ul"> <li>(感想)ホストが同じ場合はソケット接続という理解で合っているか</li>
</ul></li>
 <li>サーバは接続ごとに新しいプロセスを開始(fork)する。これによってクライアントからの複数同時接続を取り扱える(p4)</li>
 <li>左外部結合というのは、結合演算子の左側に指定したテーブルの各行が最低でも1度出力されるから。いっぽう右側では左側のテーブルの行に一致するもののみが出力される(p14)</li>
 <li>SQLのWHEREとHAVINGの間の相互作用を理解するのが重要である。WHEREとHAVINGの基本的な違いは、WHEREがグループや集約を演算する前に入力行を選択するのに対し、HAVINGはグループと集約を演算したあとにグループ化された行を選択する。したがって、WHERE句は集約関数を持てない。集約を使ってどの行をその集約の入力にすることになるから(p17)</li>
 <li>複数のトランザクションが同時に動作しているとき、それぞれのトランザクションは別のトランザクションが行っている未完了の変更を見ることができてはならない。作業中のトランザクションによる更新は、ほかのトランザクションからはトランザクションが完結するまで不可視である。そのトランザクションが完結した時点でトランザクションで行った更新のすべてが見えるようになる(p21)</li>
 <li>PostgreSQLはすべてのSQL文をトランザクション内で実行するようになっている。BEGINを発行しない場合、それぞれの文は暗黙的にBEGINが付いているとみなし、成功すればCOMMITで囲われているものとする(p21)</li>
 <li>セーブポイントはトランザクションを構成するある部分を選択的に破棄するいっぽう、破棄されない残りの部分をコミットする(p22)</li>
</ul></div>
</div>
 <div id="outline-container-org58d5885" class="outline-2">
 <h2 id="org58d5885"> <a href="#org58d5885">関連</a></h2>
 <div class="outline-text-2" id="text-org58d5885">
 <p>
なし。
</p>
</div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250618T233353--kdoc-399-『postgresql-170』__draft_book.html"/>
  <id>https://kijimad.github.io/roam/20250618T233353--kdoc-399-『postgresql-170』__draft_book.html</id>
  <updated>2025-06-24T04:40:31+09:00</updated>
</entry>
<entry>
  <title>KDOC 395: IPの役割は複数ネットワークにおいて任意の相手にデータを送れるようにすること</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org72db6ad" class="outline-2">
 <h2 id="org72db6ad"> <a href="#org72db6ad">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org72db6ad">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul> <ul class="org-ul"> <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-orgafaa758" class="outline-2">
 <h2 id="orgafaa758"> <a href="#orgafaa758">概要</a></h2>
 <div class="outline-text-2" id="text-orgafaa758">
 <p>
IPの役割は複雑に接続されたインターネット(ネットワークが相互に接続されたもの)において、接続されている個々の機器が任意の相手にデータを送れるようにすることである(位置119)。
</p>
</div>
</div>
 <div id="outline-container-org04f46f2" class="outline-2">
 <h2 id="org04f46f2"> <a href="#org04f46f2">関連</a></h2>
 <div class="outline-text-2" id="text-org04f46f2">
 <ul class="org-ul"> <li> <a href="20250506T120102--kdoc-377-『一日で読めてわかるtcpipのエッセンス』__draft_book.html#ID-20250506T120102">KDOC 377: 『一日で読めてわかるTCP/IPのエッセンス』</a>から</li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250616T202053--kdoc-395-ipの役割は複数ネットワークにおいて任意の相手にデータを送れるようにすること__draft_book.html"/>
  <id>https://kijimad.github.io/roam/20250616T202053--kdoc-395-ipの役割は複数ネットワークにおいて任意の相手にデータを送れるようにすること__draft_book.html</id>
  <updated>2025-06-24T04:40:27+09:00</updated>
</entry>
<entry>
  <title>KDOC 383: JavaScriptはブラウザの組み込み言語でありランタイムの更新は難しい</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orgcd2613a" class="outline-2">
 <h2 id="orgcd2613a"> <a href="#orgcd2613a">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-orgcd2613a">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-11 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-16 貴島</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org457af2d" class="outline-2">
 <h2 id="org457af2d"> <a href="#org457af2d">概要</a></h2>
 <div class="outline-text-2" id="text-org457af2d">
 <p>
JavaScriptはブラウザの組み込み言語であるため、サーバーアプリケーションのようにランタイムをアプリケーションに合わせて維持したり更新できない。そのため、拡張した機能や文法を使いつつJavaScriptに変換することでランタイムを変更することなく追加機能の恩恵を受けるということをしている。
</p>
</div>
</div>
 <div id="outline-container-orgc1fa151" class="outline-2">
 <h2 id="orgc1fa151"> <a href="#orgc1fa151">関連</a></h2>
 <div class="outline-text-2" id="text-orgc1fa151">
 <ul class="org-ul"> <li> <a href="20250612T231654--kdoc-388-『仕事ですぐに使えるtypescript』__draft_book.html#ID-20250612T231654">KDOC 388: 『仕事ですぐに使えるTypeScript』</a>4ページの内容から</li>
 <li> <a href="20250603T215521--kdoc-382-javascriptにトランスパイルするのはなぜか__permanent.html#ID-20250603T215521">KDOC 382: JavaScriptにトランスパイルするのはなぜか?</a>。疑問に対する答え</li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250603T215644--kdoc-383-javascriptはブラウザの組み込み言語でありランタイムの更新は難しい__permanent.html"/>
  <id>https://kijimad.github.io/roam/20250603T215644--kdoc-383-javascriptはブラウザの組み込み言語でありランタイムの更新は難しい__permanent.html</id>
  <updated>2025-06-24T04:40:23+09:00</updated>
</entry>
<entry>
  <title>KDOC 385: 『続ける思考』</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org05097af" class="outline-2">
 <h2 id="org05097af"> <a href="#org05097af">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org05097af">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-16 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-orgfc95215" class="outline-2">
 <h2 id="orgfc95215"> <a href="#orgfc95215">概要</a></h2>
 <div class="outline-text-2" id="text-orgfc95215">
 <p>
 <a href="https://amzn.to/3SQiCn6">『続ける思考』</a>はどうやってものごとを続けるか、についての本である。「習慣家」である筆者がその方法を解説する。
</p>
</div>
</div>
 <div id="outline-container-orgc9fabce" class="outline-2">
 <h2 id="orgc9fabce"> <a href="#orgc9fabce">メモ</a></h2>
 <div class="outline-text-2" id="text-orgc9fabce">
 <ul class="org-ul"> <li>(感想)アイデアを説明するために映画や漫画の引用を多用する。わかりやすい。映画や漫画を見て記録したことが生かされている</li>
 <li>ただ「成果」を先に求めてしまうとそれがすべてになる。はじめた瞬間から「修練」や「修行」になってしまう。つらい(位置227)</li>
 <li>最初は上達を感じてたのしい。でもそのうち尻すぼみしていく。なかなかうまくならない。自分ってこんなものかと考える。つまらなく感じる(位置238)
 <ul class="org-ul"> <li>(感想)非常によくわかる。その繰り返しだ</li>
</ul></li>
 <li>別に最初に想像するようにうまくならなくてもいい。続けていけば必ず何かの「変化」が起こる。そのことを信じて何かを続けてみる。「正しい努力」という考え方を捨てて、「ただ続ける」ことをまずは意識すればよい、という(位置238)</li>
 <li>気持ちいいやり方を自分で見つけるために重要なことは、じぶんで解き方を発見することだ。そのためには最初から効率を求めすぎないことである。攻略法を見ずにやりながら考えることが、気持ちいい継続を生む秘訣である、という(位置253)</li>
 <li>最短の攻略法ですぐうまくなると、すぐに飽きる。それが「続かない」につながる(位置275)</li>
 <li>ラクに続けるコツは、週7日やることだ(位置372)</li>
 <li>どうしてもやりたくない日はやったフリだけする。ジョギングだったら着替えるだけとか、掃除なら掃除機を手に取るとか。さわりだけやれば意外にそのあとのことはできてしまう(位置830)</li>
 <li>自分を動かすエンジンは「小さな達成」だ。すべてのことに「小さなゴール」を設定し、「クリア」したらすぐ次のステージに移ることが重要である(位置987)</li>
 <li>自分で1人で漫画を書き続けヒットさせた人の話。不定期アップになると、読んでくれる人が離れる。その恐怖が背中を押してくれた。毎週同じ日に1話アップするというのは重要で、読んでくれる人に覚えてもらえる、という(位置1088)</li>
 <li>結果だけ見るとネットでバズった漫画が売れてアニメ化されて、と簡単に進んだだけに見える。しかしそこに行き着くまでには誰にも注目されずに2年間コツコツ描き続けた孤独なひとりきりの時間がある(位置1101)</li>
 <li>「うまくなる」「何か得する」「いいことが起きる」続けた先に待っていると考えることをやめてみる。目指すべきゴールを考えるのをやめてみる。上達しなくても別にいい。なんの役に立たなくても別にいい。楽しくなくてもいい。「こうなりたい」と考えずにはじめれば、壁にぶつかることもない(位置1124)</li>
 <li>楽しむためには「ラク」にやりすぎないことである。取り組むこと自体は「ラク」にすまさないのが長く続けていくポイントである(位置1190)</li>
 <li>誰にもでもできる大したことないことを、誰もやらないくらいに積み重ねる(位置1343)</li>
 <li>継続を阻む最大の敵は「大きな達成」である。目標の達成をゴールだと考えるとそこで終わる(位置1356)</li>
 <li>「誰でもできることを、誰もやらないくらい長くやる」ことには価値がある(位置1494)</li>
 <li>記録することで観察力が高まる。変化は記録してないと気づかない。最初は余計なことを考えずただ記録するだけでよい。半年、1年も毎日続けると、自然とメモする内容に変化が起こる(位置1667)</li>
 <li>雑談を盛り上げるには3番目にハマっていることの話をするといい。熱く語りすぎないから(位置1680)</li>
 <li>はじめは意味を考える必要はない。あとでその意味に気づくくらいでちょうどいい(位置1937)</li>
 <li>すぐ手に入る、すぐ結果がわかる、すぐ答えが出る。そんな時代であるから「好き」か遠のく。便利になることで人は好きを失っているのではないか、という。好きになることの裏には、たくさんの時間とただ楽しいだけではない大変さが必要である。AIでさらにすぐに答えが出るようになるだろう。「時間をかける」ということが難しくなる可能性がある(位置2205)</li>
 <li>(感想)好きは行動の後に生まれるという点で、 <a href="20221027T235104--kdoc-3-『ない仕事の作り方』__book.html#ID-20221027T235104">KDOC 3: 『ない仕事の作り方』</a>と通じる考え方である。より具体的に実行するためにどうすればいいか、にフォーカスしている。</li>
</ul></div>
</div>
 <div id="outline-container-org47faba9" class="outline-2">
 <h2 id="org47faba9"> <a href="#org47faba9">関連</a></h2>
 <div class="outline-text-2" id="text-org47faba9">
 <p>
なし。
</p>
</div>
</div>
 <div id="outline-container-orgd84140b" class="outline-2">
 <h2 id="orgd84140b"> <a href="#orgd84140b">Backlinks</a></h2>
 <div class="outline-text-2" id="text-orgd84140b">
 <ul class="org-ul"> <li> <a href="./20210904124352-workflow.html">workflow</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250611T180912--kdoc-385-『続ける思考』__draft_book.html"/>
  <id>https://kijimad.github.io/roam/20250611T180912--kdoc-385-『続ける思考』__draft_book.html</id>
  <updated>2025-06-24T04:40:19+09:00</updated>
</entry>
<entry>
  <title>KDOC 400: 役割や責任を明確にすることでチーム内のコミュニケーションが円滑になる</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orgce31adb" class="outline-2">
 <h2 id="orgce31adb"> <a href="#orgce31adb">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-orgce31adb">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-21 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org443ab78" class="outline-2">
 <h2 id="org443ab78"> <a href="#org443ab78">概要</a></h2>
 <div class="outline-text-2" id="text-org443ab78">
 <p>
役割や責任を明確にすることでチーム内のコミュニケーションが円滑になる、という。プロジェクトのポジションのフレームワークとして、RACIチャート、DACIモデルというものがある。
</p>
</div>
</div>
 <div id="outline-container-org19585e8" class="outline-2">
 <h2 id="org19585e8"> <a href="#org19585e8">関連</a></h2>
 <div class="outline-text-2" id="text-org19585e8">
 <ul class="org-ul"> <li> <a href="https://soudai.hatenablog.com/entry/2024/11/23/132843">仕事を任せるコツとやり方 - そーだいなるらくがき帳</a>から。自分が体験したケースと関係し、言語化されたように感じた</li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250620T082616--kdoc-400-役割や責任を明確にすることでチーム内のコミュニケーションが円滑になる__draft_essay.html"/>
  <id>https://kijimad.github.io/roam/20250620T082616--kdoc-400-役割や責任を明確にすることでチーム内のコミュニケーションが円滑になる__draft_essay.html</id>
  <updated>2025-06-24T04:40:11+09:00</updated>
</entry>
<entry>
  <title>KDOC 390: イーサネットや無線LANは1つのネットワーク内での通信を行える</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org691ad6d" class="outline-2">
 <h2 id="org691ad6d"> <a href="#org691ad6d">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org691ad6d">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-16 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org0857a1a" class="outline-2">
 <h2 id="org0857a1a"> <a href="#org0857a1a">概要</a></h2>
 <div class="outline-text-2" id="text-org0857a1a">
 <p>
イーサネットや無線LANは1つのネットワーク内での通信を行えるが、そのままでは多数のネットワークを相互に接続できない(位置119)。
</p>
</div>
</div>
 <div id="outline-container-org727a0a8" class="outline-2">
 <h2 id="org727a0a8"> <a href="#org727a0a8">関連</a></h2>
 <div class="outline-text-2" id="text-org727a0a8">
 <ul class="org-ul"> <li> <a href="20250506T120102--kdoc-377-『一日で読めてわかるtcpipのエッセンス』__draft_book.html#ID-20250506T120102">KDOC 377: 『一日で読めてわかるTCP/IPのエッセンス』</a>から</li>
 <li> <a href="20250612T204735--kdoc-387-イーサネットによる通信はmacアドレスを使う__book.html#ID-20250612T204735">KDOC 387: イーサネットによる通信はMACアドレスを使う</a>を、言い換えたもの。層ごとに役割があり、できないことを考えると理解がしやすく見える</li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250613T090351--kdoc-390-イーサネットや無線lanは1つのネットワーク内での通信を行える__draft_book.html"/>
  <id>https://kijimad.github.io/roam/20250613T090351--kdoc-390-イーサネットや無線lanは1つのネットワーク内での通信を行える__draft_book.html</id>
  <updated>2025-06-24T04:40:11+09:00</updated>
</entry>
<entry>
  <title>KDOC 394: manのシステムコールセクションはインストールされてないことがある</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org133d3bd" class="outline-2">
 <h2 id="org133d3bd"> <a href="#org133d3bd">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org133d3bd">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul> <ul class="org-ul"> <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org2a9c40c" class="outline-2">
 <h2 id="org2a9c40c"> <a href="#org2a9c40c">概要</a></h2>
 <div class="outline-text-2" id="text-org2a9c40c">
 <p>
Linux Mint 22.1では、manのシステムコールのセクションが見つからない。ディストリビュージョンによっては、省略されていることがあるという。
</p>

 <p>
インストールする。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 1: </span>manpages-devをインストールする</label> <pre class="src src-shell">sudo apt update
sudo apt install manpages-dev
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-shell">man 2 fork | head -n10
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-nil">fork(2)                       System Calls Manual                      fork(2)

NAME
       fork - create a child process

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <unistd.h>
</pre>
</div>
</div>
</div>
 <div id="outline-container-org7e0f6ee" class="outline-2">
 <h2 id="org7e0f6ee"> <a href="#org7e0f6ee">関連</a></h2>
 <div class="outline-text-2" id="text-org7e0f6ee">
 <p>
なし。
</p>
</div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250614T125259--kdoc-394-manのシステムコールセクションはインストールされてないことがある__draft_wiki.html"/>
  <id>https://kijimad.github.io/roam/20250614T125259--kdoc-394-manのシステムコールセクションはインストールされてないことがある__draft_wiki.html</id>
  <updated>2025-06-24T04:40:10+09:00</updated>
</entry>
<entry>
  <title>KDOC 393: データとコードを同時に変更してはいけない</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org130122a" class="outline-2">
 <h2 id="org130122a"> <a href="#org130122a">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org130122a">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-16 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org4a3a8fb" class="outline-2">
 <h2 id="org4a3a8fb"> <a href="#org4a3a8fb">概要</a></h2>
 <div class="outline-text-2" id="text-org4a3a8fb">
 <p>
社会人1年目のときに、「データ変更とコード変更を同時にやってはいけない」と教わった。データ変更 → デプロイ → コード変更 → デプロイというように片方ずつ変更せよ、というようなことだ。カラム変更、インデックス追加、レコード変更といった操作に長時間費やす可能性がある。その間はデータとコードが一致しなくなる。リクエストが来た場合、動かない可能性がある。最悪の場合、不整合レコードになる。
</p>

 <p>
教わった内容は単なる習慣になり、意識することはあまりなくなっていた。あるとき、誇張した形でそれが現れた。デプロイが3ヶ月ごとにしかできないような <sup> <a id="fnr.1" class="footref" href="#fn.1" role="doc-backlink">1</a></sup>Webのシステムにおいては、常にデプロイ可能なシステムよりシビアに、データとコードについて考える必要があった。
</p>

 <p>
問題なくデプロイするには、2つの方法があるように見える。
</p>

 <ul class="org-ul"> <li>ダウンタイムを受け入れて、バックエンドサーバを止めるか遮断する。ブロックしないと、データ変更中にリクエストが来て不整合になってしまう。フロントエンドを止めるだけでは不十分である。リロードしてない人はアクセスを飛ばせてしまう
 <ul class="org-ul"> <li>❌ ダウンタイムの発生</li>
 <li>❌ 停止させるための方法確立が必要</li>
 <li>❌ 何か起こった場合に原因が切り分けにくい</li>
 <li>⭕ 手順が単純、少ない</li>
</ul></li>
 <li>チェックポイントとなるコミットで、数回繰り返してデプロイする
 <ul class="org-ul"> <li>⭕ ダウンタイムが発生しない</li>
 <li>❌ 数回デプロイする分時間がかかる</li>
 <li>⭕ 何か起こった時点で把握しやすく、原因を切り分けやすい</li>
 <li>❌ 手順が複雑、多い</li>
</ul></li>
</ul> <p>
ダウンタイムの許容ポリシーにもよるが、規模が大きくなるほど段階的に進めてデプロイしたほうがよさそうに見える。
</p>
</div>
</div>
 <div id="outline-container-orgb16a3c4" class="outline-2">
 <h2 id="orgb16a3c4"> <a href="#orgb16a3c4">関連</a></h2>
 <div class="outline-text-2" id="text-orgb16a3c4">
 <p>
なし。
</p>
</div>
</div>
 <div id="footnotes">
 <h2 class="footnotes">Footnotes: </h2>
 <div id="text-footnotes">

 <div class="footdef"> <sup> <a id="fn.1" class="footnum" href="#fnr.1" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"> <p class="footpara">
令和でもそういうことがあるのである…。
</p></div></div>


</div>
</div></div>]]></content>
  <link href="https://kijimad.github.io/roam/20250614T104010--kdoc-393-データとコードを同時に変更してはいけない__draft_wiki.html"/>
  <id>https://kijimad.github.io/roam/20250614T104010--kdoc-393-データとコードを同時に変更してはいけない__draft_wiki.html</id>
  <updated>2025-06-24T04:40:09+09:00</updated>
</entry>
</feed>
