<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><author><name>Kijima Daigo</name></author>
<title>Insomnia</title>
<generator>Emacs webfeeder.el</generator>
<link href="https://kijimad.github.io/roam"/>
<link href="https://kijimad.github.io/roam/atom.xml" rel="self"/>
<id>https://kijimad.github.io/roam/atom.xml</id>
<updated>2025-08-06T08:47:48+09:00</updated>
<entry>
  <title>KDOC 416: Goのエスケープ解析における2つの不変条件を見る</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org60dab7b" class="outline-2">
 <h2 id="org60dab7b"> <a href="#org60dab7b">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org60dab7b">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-07-20 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-07-24 貴島</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org406084b" class="outline-2">
 <h2 id="org406084b"> <a href="#org406084b">概要</a></h2>
 <div class="outline-text-2" id="text-org406084b">
 <p>
Goのドキュメントにヒープエスケープの「不変条件」が書かれていたので、見る。
</p>

 <div class="org-src-container">
 <pre class="src src-git-permalink">https://github.com/golang/go/blob/988a20c8c5e2c9eb49f8749e5ee94ce3c964fe59/src/cmd/compile/internal/escape/escape.go#L20-L29
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-nil">// Escape analysis.
//
// Here we analyze functions to determine which Go variables
// (including implicit allocations such as calls to "new" or "make",
// composite literals, etc.) can be allocated on the stack. The two
// key invariants we have to ensure are: (1) pointers to stack objects
// cannot be stored in the heap, and (2) pointers to a stack object
// cannot outlive that object (e.g., because the declaring function
// returned and destroyed the object's stack frame, or its space is
// reused across loop iterations for logically distinct variables).
</pre>
</div>

 <p>
2つの不変条件。
</p>

 <ul class="org-ul"> <li>(1)スタックオブジェクトへのポインタはヒープに保存できない</li>
 <li>(2)スタックオブジェクトへのポインタはそのオブジェクトより長生きできない
 <ul class="org-ul"> <li>関数を抜けるとオブジェクトのスタックフレームは解放される。もしくは解放されたスペースがループ内で論理的に異なる変数として再利用される</li>
</ul></li>
</ul> <p>
つまり、保存場所とポインタ先の関係、スタックオブジェクトとスタックオブジェクトのライフタイムの関係、に関する原則と解釈した。
</p>

 <ul class="org-ul"> <li>(1) 保存場所とポインタ先の問題(空間)
 <ul class="org-ul"> <li>ルール: スタックオブジェクトへのポインタは、ヒープ領域に保存してはならない。</li>
 <li>理由: ヒープにあるデータは、関数呼び出しを超えて長生きする可能性がある。しかし、それが指し示す先のスタックオブジェクトは、関数を抜けると解放される。結果、ヒープ上には実体のないポインタ（ダングリングポインタ）が残る</li>
 <li>解決策: コンパイラは、ヒープに保存されるポインタが指す先のオブジェクトもヒープにエスケープさせる。これによってヒープからヒープを指す状態にする</li>
</ul></li>
 <li>(2) ポインタ「寿命」の問題(時間)
 <ul class="org-ul"> <li>ルール: スタックオブジェクトへのポインタは、そのオブジェクトのライフタイムを超えて存在してはならない</li>
 <li>理由: 関数を抜けるとスタックオブジェクトは消える。そのポインタが残るとダングリングポインタとなる</li>
 <li>解決策: コンパイラは、ポインタがオブジェクトのライフタイムを超えて使われる可能性を検知したら、そのオブジェクト自体を最初からヒープに確保する</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org1b6dfad" class="outline-2">
 <h2 id="org1b6dfad"> <a href="#org1b6dfad">関連</a></h2>
 <div class="outline-text-2" id="text-org1b6dfad">
 <ul class="org-ul"> <li> <a href="20250630T185540--kdoc-411-スタックは積み重ねて取り出して解放する。ではヒープは__permanent.html#ID-20250630T185540">KDOC 411: スタックは積み重ねて取り出して解放する。ではヒープは?</a>。調べるきっかけになった</li>
 <li> <a href="20250701T174437--kdoc-413-ローカル変数がヒープにエスケープされるのを見る__wiki.html#ID-20250701T174437">KDOC 413: ローカル変数がヒープにエスケープされるのを見る</a>。エスケープする具体例</li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250702T194815--kdoc-416-goのエスケープ解析における2つの不変条件を見る__permanent.html"/>
  <id>https://kijimad.github.io/roam/20250702T194815--kdoc-416-goのエスケープ解析における2つの不変条件を見る__permanent.html</id>
  <updated>2025-08-06T17:47:47+09:00</updated>
</entry>
<entry>
  <title>KDOC 415: io.Readerのシグネチャはヒープエスケープを避けられる設計になっている</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org546451c" class="outline-2">
 <h2 id="org546451c"> <a href="#org546451c">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org546451c">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-07-01 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-07-19 貴島</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-orgd19fc3e" class="outline-2">
 <h2 id="orgd19fc3e"> <a href="#orgd19fc3e">概要</a></h2>
 <div class="outline-text-2" id="text-orgd19fc3e">
 <p>
io.Reader, io.Writerのインターフェース設計には、ヒープのエスケープも関係しているという。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 1: </span>io.Readerのシグネチャ</label> <pre class="src src-go">type Reader interface {
        Read(p []byte) (n int, err error)
}
</pre>
</div>

 <p>
 <code>[]byte</code> の初期化は呼び出し側の責務になっている。これによって呼び出し側がメモリ管理できるようになる。呼び出し側のスタックに留まり、ヒープにエスケープするのを抑えられる。Readを何度呼んでも新しいヒープ確保が発生しない。呼び出し側がヒープにする自由度もある。
</p>

 <p>
実際に試してみる。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 2: </span>Read1だけがヒープのエスケープが発生する</label> <pre class="src src-shell"> <span class="org-variable-name">tmpfile</span>=$(mktemp /tmp/tmpgo.XXXXXX.go)

cat > $ <span class="org-variable-name">tmpfile</span> <<EOF <span class="org-sh-heredoc">
package main

func main() {}

// Read側で初期化して返すと、ヒープにエスケープしなければならない
func Read1() []byte {
  return make([]byte, 1)
}

// 呼び出し側で初期化してもらうようにすると、ヒープにエスケープする必要がない
func Read2([]byte) {}

EOF
</span>
go build -gcflags= <span class="org-string">"-m"</span> -o bin $ <span class="org-variable-name">tmpfile</span> 2>&1
rm bin
rm $ <span class="org-variable-name">tmpfile</span>
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-nil">/tmp/tmpgo.s6wAwW.go:3:6: can inline main
/tmp/tmpgo.s6wAwW.go:6:6: can inline Read1
/tmp/tmpgo.s6wAwW.go:11:6: can inline Read2
/tmp/tmpgo.s6wAwW.go:7:14: make([]byte, 1) escapes to heap
</pre>
</div>
</div>
</div>
 <div id="outline-container-org5e52980" class="outline-2">
 <h2 id="org5e52980"> <a href="#org5e52980">関連</a></h2>
 <div class="outline-text-2" id="text-org5e52980">
 <ul class="org-ul"> <li> <a href="https://syntactic-sugar.dev/blog/nested-route/go-escape-analysis">Stack or Heap? Going Deeper with Escape Analysis in Go for Better Performance</a>。調べている中でio.Readerとio.Writerインターフェースの設計について言及していたのを見つけた</li>
 <li> <a href="20250701T193212--kdoc-414-インターフェースがヒープにエスケープされるのを見る__wiki.html#ID-20250701T193212">KDOC 414: インターフェースがヒープにエスケープされるのを見る</a>。調べるきっかけになった</li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250701T213624--kdoc-415-ioreaderのシグネチャはヒープエスケープを避けられる設計になっている__permanent.html"/>
  <id>https://kijimad.github.io/roam/20250701T213624--kdoc-415-ioreaderのシグネチャはヒープエスケープを避けられる設計になっている__permanent.html</id>
  <updated>2025-08-06T17:47:47+09:00</updated>
</entry>
<entry>
  <title>KDOC 410: 物事に対する情熱は行動の後に生まれる</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org516b883" class="outline-2">
 <h2 id="org516b883"> <a href="#org516b883">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org516b883">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-29 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-07-19 貴島</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org00489a2" class="outline-2">
 <h2 id="org00489a2"> <a href="#org00489a2">概要</a></h2>
 <div class="outline-text-2" id="text-org00489a2">
 <p>
大人や社会は「好きなことを仕事にしろ」と言った。しかし、「好きなこと」をどうやって見つけるのかには口をつぐんだ。本当は知らないと自白する代わりに、「色んなことをしてそれを探せ」と言った。
</p>

 <p>
受け取ったメッセージを思い返してみると、こういうことだ。
</p>

 <ul class="org-ul"> <li>自分が好きなものは広い世界のどこかに存在している</li>
 <li>いろんな体験をすれば発見できる。だからバイトしろ。海外に行け。勉強しろ。スポーツしろ</li>
 <li>ないならもっと探せ。でも時間制限があるから、22歳までに見つけろ</li>
 <li>好きなものかはやってみれば直感や感情で判定できる</li>
 <li>エゴや憧れも好きのうちだ。実際に体験してなくてもそれは好きに分類できる</li>
 <li>本当に好きならたくさん努力できるだろう。努力できないなら好きとはいえない</li>
</ul> <p>
「砂漠のどこかにダイヤが転がっているからそれを探せ」と言っているように聞こえた。このモデルの問題点は、ダイヤはどこにも転がっていないという点だ。自分探しに成功した人間が存在しないように、好きなことは未知の場所を探して見つけられるものではない。
</p>

 <hr></hr> <hr></hr> <p>
「物事に対する情熱はやり続けた後に生まれる」という考え方もある。
</p>

 <p>
行動が先にあって好きになっていくということだ。ダイヤを探すのではなく、手に持っている石を磨き続ければダイヤになる。現時点で情熱がないとしたらそれはまだ発見できていないということではなく、何も続けていないということだ。何でもいいからやり始めればいい。重要なのは  <b>「選ぶこと」</b> ではなく  <b>「磨き始めること」</b> だ。
</p>

 <p>
ありもしないものを探せというアドバイスより、何でもいいから続けてみろ、というアドバイスのほうが建設的に見える。
</p>
</div>
</div>
 <div id="outline-container-org5222e6d" class="outline-2">
 <h2 id="org5222e6d"> <a href="#org5222e6d">関連</a></h2>
 <div class="outline-text-2" id="text-org5222e6d">
 <ul class="org-ul"> <li> <a href="20221027T235104--kdoc-3-『ない仕事の作り方』__book.html#ID-20221027T235104">KDOC 3: 『ない仕事の作り方』</a>では、好きだから集めるのではなく、大量に集めるから好きになるのだ、と主張する</li>
 <li> <a href="20250611T180912--kdoc-385-『続ける思考』__book.html#ID-20250611T180912">KDOC 385: 『続ける思考』</a>では、意味など考えず時間をかけた結果として好きになる、と主張する</li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250629T110721--kdoc-410-物事に対する情熱は行動の後に生まれる__essay.html"/>
  <id>https://kijimad.github.io/roam/20250629T110721--kdoc-410-物事に対する情熱は行動の後に生まれる__essay.html</id>
  <updated>2025-08-06T17:47:47+09:00</updated>
</entry>
<entry>
  <title>KDOC 407: 1W5Hでユーザーストーリーを書く</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org706b61e" class="outline-2">
 <h2 id="org706b61e"> <a href="#org706b61e">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org706b61e">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-24 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-29 貴島</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-orgbedb88c" class="outline-2">
 <h2 id="orgbedb88c"> <a href="#orgbedb88c">概要</a></h2>
 <div class="outline-text-2" id="text-orgbedb88c">
 <p>
 <a href="https://speakerdeck.com/soudai/grow-one-day-each-day?slide=30">**強い**エンジニアのなり方 - フィードバックサイクルを勝ち取る / grow one day each day</a>で、問題設定の文脈において1W5H形式でユーザーストーリーに記載することが書かれていた。
</p>

 <p>
これらは当たり前に見える。しかしだからこそ、ズレが生まれる。それを明確にすることが大事なのだと考えた。
</p>

 <p>
メモ。
</p>

 <ul class="org-ul"> <li>Why
 <ul class="org-ul"> <li>なぜ必要なのか</li>
</ul></li>
 <li>What
 <ul class="org-ul"> <li>実現したいことは何か</li>
 <li>成果物は何か</li>
 <li>完了の定義</li>
</ul></li>
 <li>When
 <ul class="org-ul"> <li>タスクの期限</li>
</ul></li>
 <li>Where
 <ul class="org-ul"> <li>ビジョンやゴールはどこか</li>
 <li>どこで実行されるか</li>
</ul></li>
 <li>Who
 <ul class="org-ul"> <li>ステークホルダーは誰か</li>
 <li>利用者は誰か</li>
 <li>依頼者は誰か</li>
 <li>レビューは誰にお願いするか</li>
</ul></li>
 <li>How
 <ul class="org-ul"> <li>どのように実現するか</li>
 <li>実装のための制約や方針も含む</li>
</ul></li>
</ul> <p>
ユーザーストーリーの見直し。
</p>

 <ul class="org-ul"> <li>もっとも実現したいことにフォーカスする</li>
 <li>複数の方法に置き換え</li>
 <li>実現する場所、実装する場所を置き換える</li>
 <li>届けたいペルソナを絞る</li>
 <li>制約を減らす方法を検討する</li>
 <li>今やるべきか検討する</li>
</ul></div>
</div>
 <div id="outline-container-orgfdfb957" class="outline-2">
 <h2 id="orgfdfb957"> <a href="#orgfdfb957">関連</a></h2>
 <div class="outline-text-2" id="text-orgfdfb957">
 <p>
なし。
</p>
</div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250624T214442--kdoc-407-1w5hでユーザーストーリーを書く__essay.html"/>
  <id>https://kijimad.github.io/roam/20250624T214442--kdoc-407-1w5hでユーザーストーリーを書く__essay.html</id>
  <updated>2025-08-06T17:47:17+09:00</updated>
</entry>
<entry>
  <title>KDOC 422: 科学技術館を観察する</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org9d16660" class="outline-2">
 <h2 id="org9d16660"> <a href="#org9d16660">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org9d16660">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-07-27 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-orgb444ba8" class="outline-2">
 <h2 id="orgb444ba8"> <a href="#orgb444ba8">概要</a></h2>
 <div class="outline-text-2" id="text-orgb444ba8">
 <p>
 <a href="https://ja.wikipedia.org/wiki/%E7%A7%91%E5%AD%A6%E6%8A%80%E8%A1%93%E9%A4%A8">科学技術館</a>は、東京都千代田区にある科学博物館である。
</p>

 <iframe src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3907.053697938309!2d139.75048871198626!3d35.69158897246949!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x60188c12c576f675%3A0xfcf1facbfb12c41!2sScience%20and%20Technology%20Museum!5e1!3m2!1sen!2sjp!4v1753578898950!5m2!1sen!2sjp" width="600" height="450" style="border:0;" allowfullscreen="" loading="lazy" referrerpolicy="no-referrer-when-downgrade"></iframe>
</div>
</div>
 <div id="outline-container-org2cc2a72" class="outline-2">
 <h2 id="org2cc2a72"> <a href="#org2cc2a72">メモ</a></h2>
 <div class="outline-text-2" id="text-org2cc2a72">
 <ul class="org-ul"> <li>建物全体が、タイムカプセルで保存されたような昭和感がある。クリーム色の壁や床、低い天井。もう絶滅しかけている</li>
 <li>子供が興味を引かれるような、実体験できるアクティビティが多い。小さな子どもの家族が9割を占めていて、混雑している。ゆっくり見たり考えるのは難しい</li>
 <li>テーマごとにブースがある。自転車/災害/建築/薬/電気/音…</li>
 <li>自転車など特定の狭い工業製品にフォーカスしているものもあれば、ざっくり電気に注目している、というブースもある。科学というより工業の場所も多い。取り扱うテーマが広すぎるので、どうまとめるかが難しそうであった</li>
 <li>複数フロアあり面積は広いが、ブース1つはそこまで大きくない。浅く広く展示されている。熱量・熱意を感じるのは難しい。後から知ったが、青少年向けだという。たしかに子どもでも理解できそうだが、そこから本当の興味につながるだろうか、とは感じる。圧倒的な物量と解説がなければ、その分野の奥深さを感じることができないように見える。子どもに媚びている。子どもは、子ども向けということをわかっている</li>
 <li>企業名を掲げて主催しているブースも多い。広告・商売と絡めるのも手段の1つだ</li>
 <li>アクティビティ重視は、入館者数減少に対する施策だという。これまでさまざまな議論や改善があったようだ</li>
 <li>もちろん、そういう博物館もあっていい。しかし超一等地にある科学博物館としては残念な感じがする</li>
</ul></div>
</div>
 <div id="outline-container-org3ae03b9" class="outline-2">
 <h2 id="org3ae03b9"> <a href="#org3ae03b9">関連</a></h2>
 <div class="outline-text-2" id="text-org3ae03b9">
 <p>
なし。
</p>
</div>
</div>
 <div id="outline-container-org0aaa69d" class="outline-2">
 <h2 id="org0aaa69d"> <a href="#org0aaa69d">Backlinks</a></h2>
 <div class="outline-text-2" id="text-org0aaa69d">
 <ul class="org-ul"> <li> <a href="./20240908T180537--kdoc-238-他人の博物館を観察して参考にする__project.html">KDOC 238: 他人の博物館を観察して参考にする</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250720T174241--kdoc-422-科学技術館を観察する__draft_essay.html"/>
  <id>https://kijimad.github.io/roam/20250720T174241--kdoc-422-科学技術館を観察する__draft_essay.html</id>
  <updated>2025-08-06T17:47:15+09:00</updated>
</entry>
<entry>
  <title>KDOC 417: WASMでリクエスト実装を変えているのを見る</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org11d80da" class="outline-2">
 <h2 id="org11d80da"> <a href="#org11d80da">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org11d80da">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-07-24 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-07-26 貴島</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-orga650f6c" class="outline-2">
 <h2 id="orga650f6c"> <a href="#orga650f6c">概要</a></h2>
 <div class="outline-text-2" id="text-orga650f6c">
 <p>
WASMはセキュリティのために、ブラウザのサンドボックス化された環境で実行される。外部環境にアクセスするには、JavaScriptのAPIを経由しなければならない。OSからリクエストする方法とは異なる。
</p>

 <p>
なので、WASM上のリクエストの実装は変えられている。通常のGoの実装が、ソケット通信によってリクエストを送信するのとは異なる。実際に観察してみる。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 1: </span>ビルドタグを確認する</label> <pre class="src src-git-permalink">https://github.com/golang/go/blob/988a20c8c5e2c9eb49f8749e5ee94ce3c964fe59/src/net/http/roundtrip_js.go#L5
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-nil">//go:build js && wasm
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 2: </span>RoundTripメソッド内でJSを呼び出している</label> <pre class="src src-git-permalink">https://github.com/golang/go/blob/988a20c8c5e2c9eb49f8749e5ee94ce3c964fe59/src/net/http/roundtrip_js.go#L129
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-nil">fetchPromise := js.Global().Call("fetch", req.URL.String(), opt)
</pre>
</div>
</div>
</div>
 <div id="outline-container-org956dde4" class="outline-2">
 <h2 id="org956dde4"> <a href="#org956dde4">関連</a></h2>
 <div class="outline-text-2" id="text-org956dde4">
 <p>
なし。
</p>
</div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250702T234055--kdoc-417-wasmでリクエスト実装を変えているのを見る__permanent.html"/>
  <id>https://kijimad.github.io/roam/20250702T234055--kdoc-417-wasmでリクエスト実装を変えているのを見る__permanent.html</id>
  <updated>2025-08-06T17:47:14+09:00</updated>
</entry>
<entry>
  <title>KDOC 413: ローカル変数がヒープにエスケープされるのを見る</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orga4065cf" class="outline-2">
 <h2 id="orga4065cf"> <a href="#orga4065cf">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-orga4065cf">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-07-01 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-07-19 貴島</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org414baee" class="outline-2">
 <h2 id="org414baee"> <a href="#org414baee">概要</a></h2>
 <div class="outline-text-2" id="text-org414baee">
 <p>
関数を抜けた後も使うようなケースでは、関数呼び出し後に消されないようにスタックからヒープに移す必要がある。後も使うケースとしては、ポインタを返すなどがある。ローカル変数として宣言されていても、ヒープに移動させられる。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 1: </span>ローカル変数がヒープにエスケープされる様子を見る</label> <pre class="src src-shell"> <span class="org-variable-name">tmpfile</span>=$(mktemp /tmp/tmpgo.XXXXXX.go)

cat > $ <span class="org-variable-name">tmpfile</span> <<EOF <span class="org-sh-heredoc">
package main

func main() {}

func f() *int {
        x := 42
        return &x // ヒープへ
}

EOF
</span>
go build -gcflags= <span class="org-string">"-m"</span> -o bin $ <span class="org-variable-name">tmpfile</span> 2>&1
rm bin
rm $ <span class="org-variable-name">tmpfile</span>
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-nil">/tmp/tmpgo.G6OymE.go:3:6: can inline main
/tmp/tmpgo.G6OymE.go:5:6: can inline f
/tmp/tmpgo.G6OymE.go:6:9: moved to heap: x
</pre>
</div>
</div>
</div>
 <div id="outline-container-orge0c0199" class="outline-2">
 <h2 id="orge0c0199"> <a href="#orge0c0199">関連</a></h2>
 <div class="outline-text-2" id="text-orge0c0199">
 <ul class="org-ul"> <li> <a href="20250630T185540--kdoc-411-スタックは積み重ねて取り出して解放する。ではヒープは__permanent.html#ID-20250630T185540">KDOC 411: スタックは積み重ねて取り出して解放する。ではヒープは?</a>。ヒープを調べるきっかけになった</li>
</ul></div>
</div>
 <div id="outline-container-orgd61605b" class="outline-2">
 <h2 id="orgd61605b"> <a href="#orgd61605b">Backlinks</a></h2>
 <div class="outline-text-2" id="text-orgd61605b">
 <ul class="org-ul"> <li> <a href="./20250702T194815--kdoc-416-goのエスケープ解析における2つの不変条件を見る__permanent.html">KDOC 416: Goのエスケープ解析における2つの不変条件を見る</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250701T174437--kdoc-413-ローカル変数がヒープにエスケープされるのを見る__wiki.html"/>
  <id>https://kijimad.github.io/roam/20250701T174437--kdoc-413-ローカル変数がヒープにエスケープされるのを見る__wiki.html</id>
  <updated>2025-08-06T17:47:14+09:00</updated>
</entry>
<entry>
  <title>KDOC 409: 挫折し続けた運動を習慣化できたのは毎日やったから</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org330f2bc" class="outline-2">
 <h2 id="org330f2bc"> <a href="#org330f2bc">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org330f2bc">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-26 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-29 貴島</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org843fe3b" class="outline-2">
 <h2 id="org843fe3b"> <a href="#org843fe3b">概要</a></h2>
 <div class="outline-text-2" id="text-org843fe3b">
 <p>
運動を1年間継続してやっている。体の変化を実感し、自信になっている。肉体だけでない。自分がやると決めたことを続けられる人間なのだということを誇らしく感じる。
</p>

 <p>
 <a href="20240810T073930--kdoc-215-運動習慣を身につけるヒントを考える__essay.html#ID-20240810T073930">KDOC 215: 運動習慣を身につけるヒントを考える</a>では、継続1ヶ月時点で、なぜ続けられているのかを考えている。今は最大の要因について違う意見を持っている。もっとも重要な要因は、「毎日やっていたから」に見える。本で紹介していたトレーニングのスケジュールが曜日ごとに違う部位のトレーニングを1種類やる、というものだったのでそのとおりに毎日やっていた。
</p>

 <p>
意見を変えた理由は、ほかの習慣における再現性である。運動は習慣化できたが、ほかのことへの応用はうまくいっていなかった。
</p>

 <p>
最近、 <a href="20250624T222943--kdoc-408-続けるコツは週7日やることである__essay.html#ID-20250624T222943">KDOC 408: 続けるコツは週7日やることである</a>がよさそうに見えたので、毎日やるのを実践している。毎日5分本を読む、5分英語の動画を見る、といった習慣をはじめてしばらく期間が経過したのだが、じつに自然に継続している。
</p>

 <p>
重要なのは、毎日実行すること、毎日実行できるようにハードルを下げる、ということだったように見える。
</p>
</div>
</div>
 <div id="outline-container-orgac7aac4" class="outline-2">
 <h2 id="orgac7aac4"> <a href="#orgac7aac4">関連</a></h2>
 <div class="outline-text-2" id="text-orgac7aac4">
 <ul class="org-ul"> <li> <a href="20240708T214636--kdoc-197-『プリズナー・トレーニング』__book.html#ID-20240708T214636">KDOC 197: 『プリズナー・トレーニング』</a>。運動を習慣化できた本</li>
 <li> <a href="20250611T180912--kdoc-385-『続ける思考』__book.html#ID-20250611T180912">KDOC 385: 『続ける思考』</a>。習慣化するために誰でも再現可能な方法を解説する本</li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250626T085406--kdoc-409-挫折し続けた運動を習慣化できたのは毎日やったから__essay.html"/>
  <id>https://kijimad.github.io/roam/20250626T085406--kdoc-409-挫折し続けた運動を習慣化できたのは毎日やったから__essay.html</id>
  <updated>2025-08-06T17:47:12+09:00</updated>
</entry>
<entry>
  <title>KDOC 420: constが埋め込まれる様子を見る</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orgaf86ae3" class="outline-2">
 <h2 id="orgaf86ae3"> <a href="#orgaf86ae3">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-orgaf86ae3">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-07-17 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-orge68d607" class="outline-2">
 <h2 id="orge68d607"> <a href="#orge68d607">概要</a></h2>
 <div class="outline-text-2" id="text-orge68d607">
 <p>
Goでconstとvarの違いを見る。
</p>

 <iframe width="800px" height="200px" src="https://godbolt.org/e#g:!((g:!((g:!((h:codeEditor,i:(filename:'1',fontScale:14,fontUsePx:'0',j:1,lang:go,selection:(endColumn:2,endLineNumber:11,positionColumn:2,positionLineNumber:11,selectionStartColumn:2,selectionStartLineNumber:11,startColumn:2,startLineNumber:11),source:'//+Type+your+code+here,+or+load+an+example.%0A//+Your+function+name+should+start+with+a+capital+letter.%0Apackage+main%0A%0Avar+a+%3D+%22hello%22%0Aconst+b+%3D+%22world%22%0A%0Afunc+main()+%7B%0A++++print(a)%0A++++print(b)%0A%7D'),l:'5',n:'0',o:'Go+source+%231',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0'),(g:!((h:compiler,i:(compiler:gltip,filters:(b:'0',binary:'1',binaryObject:'1',commentOnly:'0',debugCalls:'1',demangle:'0',directives:'0',execute:'1',intel:'0',libraryCode:'0',trim:'1',verboseDemangling:'0'),flagsViewOpen:'1',fontScale:14,fontUsePx:'0',j:1,lang:go,libs:!(),options:'',overrides:!(),selection:(endColumn:1,endLineNumber:1,positionColumn:1,positionLineNumber:1,selectionStartColumn:1,selectionStartLineNumber:1,startColumn:1,startLineNumber:1),source:1),l:'5',n:'0',o:'+x86-64+gc+(tip)+(Editor+%231)',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0')),l:'2',n:'0',o:'',t:'0')),version:4"></iframe>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 1: </span>const。埋め込まれている</label> <pre class="src src-asm"> <span class="org-function-name">LEAQ</span>     <span class="org-keyword">go</span>:string. <span class="org-string">"world"</span>(SB), AX
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 2: </span>var。参照している</label> <pre class="src src-asm"> <span class="org-function-name">MOVQ</span>     <span class="org-keyword">main.a</span>(SB), AX
</pre>
</div>

 <p>
 <code>const</code> は  <code>var</code> に比べて制約が多いが、こうやってコンパイル時に埋め込まれるのが理由の1つに見える。
</p>
</div>
</div>
 <div id="outline-container-org3690330" class="outline-2">
 <h2 id="org3690330"> <a href="#org3690330">関連</a></h2>
 <div class="outline-text-2" id="text-org3690330">
 <p>
なし。
</p>
</div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250705T205631--kdoc-420-constが埋め込まれる様子を見る__draft_permanent.html"/>
  <id>https://kijimad.github.io/roam/20250705T205631--kdoc-420-constが埋め込まれる様子を見る__draft_permanent.html</id>
  <updated>2025-08-06T17:47:10+09:00</updated>
</entry>
<entry>
  <title>KDOC 412: ヒープ管理方法の変遷を見る</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org0e7e45d" class="outline-2">
 <h2 id="org0e7e45d"> <a href="#org0e7e45d">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org0e7e45d">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-30 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-07-19 貴島</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org779ff7b" class="outline-2">
 <h2 id="org779ff7b"> <a href="#org779ff7b">概要</a></h2>
 <div class="outline-text-2" id="text-org779ff7b">
 <p>
ヒープ管理方法の変遷を見る。柔軟性、安全性、パフォーマンスのトレードオフの歴史である。
</p>

 <ol class="org-ol"> <li>従来はプログラマーが  <code>malloc</code> や  <code>free</code> でヒープを確保・解放していた
 <ul class="org-ul"> <li>課題: メモリ解放忘れや解放済みのポインタへのアクセス。安全性に問題があった</li>
</ul></li>
 <li>処理系にガベージコレクションを組み込み、メモリ管理を自動で行うようにした
 <ul class="org-ul"> <li>課題: パフォーマンスへの影響、一時停止、管理の複雑さ</li>
</ul></li>
 <li>所有権に基づいてメモリを管理する。コンパイル時にメモリ管理の正しさを検証し、実行時のオーバーヘッドなく安全性を得る
 <ul class="org-ul"> <li>課題: リストなど特定のケースで実装が難しいことがあるという</li>
</ul></li>
</ol></div>
</div>
 <div id="outline-container-orge897444" class="outline-2">
 <h2 id="orge897444"> <a href="#orge897444">関連</a></h2>
 <div class="outline-text-2" id="text-orge897444">
 <ul class="org-ul"> <li> <a href="https://ja.wikipedia.org/wiki/%E3%82%AC%E3%83%99%E3%83%BC%E3%82%B8%E3%82%B3%E3%83%AC%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3">ガベージコレクション - Wikipedia</a></li>
 <li> <a href="20250630T185540--kdoc-411-スタックは積み重ねて取り出して解放する。ではヒープは__permanent.html#ID-20250630T185540">KDOC 411: スタックは積み重ねて解放する。ではヒープは?</a>。きっかけになった疑問</li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250630T192238--kdoc-412-ヒープ管理方法の変遷を見る__permanent.html"/>
  <id>https://kijimad.github.io/roam/20250630T192238--kdoc-412-ヒープ管理方法の変遷を見る__permanent.html</id>
  <updated>2025-08-06T17:47:10+09:00</updated>
</entry>
<entry>
  <title>KDOC 418: 実行時のオーバーヘッドなしで型のサイズを判定する</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org58517c5" class="outline-2">
 <h2 id="org58517c5"> <a href="#org58517c5">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org58517c5">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-07-24 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-07-30 貴島</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-orgcac1dba" class="outline-2">
 <h2 id="orgcac1dba"> <a href="#orgcac1dba">概要</a></h2>
 <div class="outline-text-2" id="text-orgcac1dba">
 <p>
CPUアーキテクチャによって、型のサイズは異なることがある。実行時のオーバーヘッドなしで判定しているのをGo言語自体のソースコードで見かけた。
</p>

 <p>
constなのでコンパイル時に、ビルド成果物へ値が埋め込まれる。実行時のオーバーヘッドがない。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 1: </span>uint型のビットサイズを判定する</label> <pre class="src src-git-permalink">https://github.com/golang/go/blob/0f8ab2db177baee7b04182f5641693df3b212aa9/src/math/bits/bits.go#L17
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-nil">const uintSize = 32 << (^uint(0) >> 63) // 32 or 64
</pre>
</div>

 <p>
ビット演算に慣れてないので、一瞬でわからない。確認する。
</p>

 <ul class="org-ul"> <li> <code>^</code> でビット反転する</li>
 <li>>> で右ビット演算する</li>
 <li><< で左ビット演算する</li>
</ul> <p>
中心になるアイデアは、すべてのビットに1が立つとビットサイズの違いが現れるということだ。分解して見る。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 2: </span>それぞれ見る(64bitアーキテクチャで実行した)</label> <pre class="src src-go">import "fmt"
func main() {
  fmt.Printf("%b\n", uint(0))
  fmt.Printf("%b\n", ^uint(0))

  // ^uint(0) >> 63 の結果、32bit環境では 0 に、64bit環境では 1 になる
  fmt.Printf("%d\n", 32 << 0) // 移動しないので32のまま
  fmt.Printf("%d\n", 32 << 1) // 1だけ左シフトする。つまり32(2の5乗)から64(2の6乗)になる
}
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-nil">0
1111111111111111111111111111111111111111111111111111111111111111
32
64
</pre>
</div>

 <p>
ビットシフト演算子の両辺どちらが移動量かわからなくなるので確認する。移動元、オペレータ、移動量の位置関係は同じで、矢印の向きがそのまま移動の向きになっている。
</p>

 <div class="org-src-container">
 <pre class="src src-go">import "fmt"
func main() {
  fmt.Printf("%b\n", 0b0010 << 1)
  fmt.Printf("%b\n", 0b0010 >> 1)
}
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-nil">100
1
</pre>
</div>
</div>
</div>
 <div id="outline-container-org3a8bbaa" class="outline-2">
 <h2 id="org3a8bbaa"> <a href="#org3a8bbaa">関連</a></h2>
 <div class="outline-text-2" id="text-org3a8bbaa">
 <p>
なし。
</p>
</div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250703T174843--kdoc-418-実行時のオーバーヘッドなしで型のサイズを判定する__wiki.html"/>
  <id>https://kijimad.github.io/roam/20250703T174843--kdoc-418-実行時のオーバーヘッドなしで型のサイズを判定する__wiki.html</id>
  <updated>2025-08-06T17:47:08+09:00</updated>
</entry>
<entry>
  <title>KDOC 424: 『具体と抽象』</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org064f59a" class="outline-2">
 <h2 id="org064f59a"> <a href="#org064f59a">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org064f59a">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul> <ul class="org-ul"> <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org0a6bc95" class="outline-2">
 <h2 id="org0a6bc95"> <a href="#org0a6bc95">概要</a></h2>
 <div class="outline-text-2" id="text-org0a6bc95">
 <p>
 <a href="https://amzn.to/4ffrMnt">『具体と抽象』</a>は、SNSや会社で議論が噛み合わないなどの身近な例を題材に、具体と抽象についてやさしく解説した本である。
</p>
</div>
</div>
 <div id="outline-container-org8589bde" class="outline-2">
 <h2 id="org8589bde"> <a href="#org8589bde">メモ</a></h2>
 <div class="outline-text-2" id="text-org8589bde">
 <p>
感想。
</p>

 <ul class="org-ul"> <li>この本自体が具体と抽象を往復する構成となっていて読みやすい</li>
 <li>社会を生きるにあたって、「具体レベルの世界にのみ生きる人だ」とみなすことによって楽になることは多そうである</li>
 <li>ちょくちょく具体のみに生きる人への恨み、軽蔑を感じる</li>
 <li>文化や会話は日本中どこでも同じで共有しているとみなされているが、そうではない。個人ごとに違う。同じと考えたときの違和感を言語化しているようだ</li>
</ul> <p>
箇所。
</p>

 <ul class="org-ul"> <li>「理学」と「工学」はある面で正反対である。理学は抽象化の方向で、工学は具体化の方向である(位置298)</li>
 <li>斬新な製品や革新的な仕組みを作るためには「多数の意見を聞く」ことはしない。多数の意見はそれぞれの具体レベルに引きずられて、どうしても「いまの延長」の議論しかできなくなる。逆に改善していく場面では、なるべく多数の人から意見を吸い上げることが重要になる(位置403)</li>
 <li>具体レベルのみで読んでいる人は書かれていることにはすべて「実在するモデル」がいる前提で解釈する。書いている側は体験を抽象化してから具体的にストーリーに落としている場合が多い(位置438)</li>
 <li>人に仕事を頼んだり頼まれたりするときに、その人の好む「自由度の大きさ」を考慮する必要がある。「適当にやっといて」で丸投げだと不快に考える人は具体レベルのみの世界に生きる「低い自由度を好む人」である(位置458)
 <ul class="org-ul"> <li>(感想)そうには見えない</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org1c17ff2" class="outline-2">
 <h2 id="org1c17ff2"> <a href="#org1c17ff2">関連</a></h2>
 <div class="outline-text-2" id="text-org1c17ff2">
 <p>
なし。
</p>
</div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250728T223330--kdoc-424-『具体と抽象』__draft_book.html"/>
  <id>https://kijimad.github.io/roam/20250728T223330--kdoc-424-『具体と抽象』__draft_book.html</id>
  <updated>2025-08-06T17:47:07+09:00</updated>
</entry>
<entry>
  <title>KDOC 421: 継続時間形式を見る</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org3f35a10" class="outline-2">
 <h2 id="org3f35a10"> <a href="#org3f35a10">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org3f35a10">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-07-17 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org83329c8" class="outline-2">
 <h2 id="org83329c8"> <a href="#org83329c8">概要</a></h2>
 <div class="outline-text-2" id="text-org83329c8">
 <p>
 <a href="https://github.com/golang/go/commit/11f11f2a00aa3149a6ea69a50e7b7b429cf368b7">encoding/json/v2: support ISO 8601 durations · golang/go@11f11f2</a>では、ISO 8601形式での継続時間を実装している。JSONのデフォルトの表示にはまだ議論があり、あくまでもオプションのサポートだという。JavaScriptに先例がある。
</p>

 <p>
 <a href="https://ja.wikipedia.org/wiki/ISO_8601">ISO 8601</a>は、日付や時刻が有名だが、「継続時間」も定義している。たとえば  <code>P3Y6M4DT12H30M5S</code> は、「3年、6か月、4日、12時間、30分、5秒」という継続時間を表現しているという。
</p>
</div>
</div>
 <div id="outline-container-org5418e9b" class="outline-2">
 <h2 id="org5418e9b"> <a href="#org5418e9b">関連</a></h2>
 <div class="outline-text-2" id="text-org5418e9b">
 <p>
なし。
</p>
</div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250713T090146--kdoc-421-継続時間形式を見る__draft_wiki.html"/>
  <id>https://kijimad.github.io/roam/20250713T090146--kdoc-421-継続時間形式を見る__draft_wiki.html</id>
  <updated>2025-08-06T17:47:07+09:00</updated>
</entry>
<entry>
  <title>KDOC 420: testdataディレクトリはコンパイル対象外になる</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orga3f7792" class="outline-2">
 <h2 id="orga3f7792"> <a href="#orga3f7792">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-orga3f7792">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-07-17 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-07-30 貴島</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org1f61537" class="outline-2">
 <h2 id="org1f61537"> <a href="#org1f61537">概要</a></h2>
 <div class="outline-text-2" id="text-org1f61537">
 <p>
Go言語で、コンパイル対象にならないディレクトリ名がある。Goファイルが含まれていても、無視される。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 1: </span>ヘルプコメントに記載されている</label> <pre class="src src-git-permalink">https://github.com/golang/go/blob/988a20c8c5e2c9eb49f8749e5ee94ce3c964fe59/src/cmd/go/internal/help/helpdoc.go#L124-L125
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-nil">Directory and file names that begin with "." or "_" are ignored
by the go tool, as are directories named "testdata".
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 2: </span>Import関数を見る</label> <pre class="src src-git-permalink">https://github.com/golang/go/blob/988a20c8c5e2c9eb49f8749e5ee94ce3c964fe59/src/cmd/go/internal/modindex/read.go#L404-L409
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-nil">// goroot and gopath
inTestdata := func(sub string) bool {
	return strings.Contains(sub, "/testdata/") || strings.HasSuffix(sub, "/testdata") || str.HasPathPrefix(sub, "testdata")
}
var pkga string
if !inTestdata(rp.dir) {
</pre>
</div>
</div>
</div>
 <div id="outline-container-orge3eaa1c" class="outline-2">
 <h2 id="orge3eaa1c"> <a href="#orge3eaa1c">関連</a></h2>
 <div class="outline-text-2" id="text-orge3eaa1c">
 <p>
なし。
</p>
</div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250710T073233--kdoc-420-testdataディレクトリはコンパイル対象外になる__wiki.html"/>
  <id>https://kijimad.github.io/roam/20250710T073233--kdoc-420-testdataディレクトリはコンパイル対象外になる__wiki.html</id>
  <updated>2025-08-06T17:47:05+09:00</updated>
</entry>
<entry>
  <title>KDOC 408: 続けるコツは週7日やることである</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org5800a7e" class="outline-2">
 <h2 id="org5800a7e"> <a href="#org5800a7e">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org5800a7e">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-24 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-29 貴島</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org964b0f1" class="outline-2">
 <h2 id="org964b0f1"> <a href="#org964b0f1">概要</a></h2>
 <div class="outline-text-2" id="text-org964b0f1">
 <p>
ラクに続けるコツは、週7日やることである(位置372)。
</p>

 <p>
今日はいいから明日やろう、となる余地があるとすぐにやらなくなるのを何度も経験してきた。毎朝5分、例外なく毎日やることで意思の力に関係なく続けやすい。そして、取り組み始めれば意外とノッてきて長くできるものである。
</p>
</div>
</div>
 <div id="outline-container-orga76f61b" class="outline-2">
 <h2 id="orga76f61b"> <a href="#orga76f61b">関連</a></h2>
 <div class="outline-text-2" id="text-orga76f61b">
 <ul class="org-ul"> <li> <a href="20250611T180912--kdoc-385-『続ける思考』__book.html#ID-20250611T180912">KDOC 385: 『続ける思考』</a>から</li>
</ul></div>
</div>
 <div id="outline-container-orgbdc393b" class="outline-2">
 <h2 id="orgbdc393b"> <a href="#orgbdc393b">Backlinks</a></h2>
 <div class="outline-text-2" id="text-orgbdc393b">
 <ul class="org-ul"> <li> <a href="./20250626T085406--kdoc-409-挫折し続けた運動を習慣化できたのは毎日やったから__essay.html">KDOC 409: 挫折し続けた運動を習慣化できたのは毎日やったから</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250624T222943--kdoc-408-続けるコツは週7日やることである__essay.html"/>
  <id>https://kijimad.github.io/roam/20250624T222943--kdoc-408-続けるコツは週7日やることである__essay.html</id>
  <updated>2025-08-06T17:47:04+09:00</updated>
</entry>
<entry>
  <title>KDOC 414: インターフェースがヒープにエスケープされるのを見る</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orgc62c3d1" class="outline-2">
 <h2 id="orgc62c3d1"> <a href="#orgc62c3d1">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-orgc62c3d1">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-07-01 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-07-19 貴島</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-orgfab38cb" class="outline-2">
 <h2 id="orgfab38cb"> <a href="#orgfab38cb">概要</a></h2>
 <div class="outline-text-2" id="text-orgfab38cb">
 <p>
関数を抜けた後も使うようなケースでは、消されないようにスタックからヒープに移す必要がある。インターフェースを返すと、実体を関数から抜けた後も保持しておく必要があるため、ヒープにエスケープされる。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 1: </span>最初スタックにあったローカル変数がヒープにエスケープされる様子を見る</label> <pre class="src src-shell"> <span class="org-variable-name">tmpfile</span>=$(mktemp /tmp/tmpgo.XXXXXX.go)

cat > $ <span class="org-variable-name">tmpfile</span> <<EOF <span class="org-sh-heredoc">
package main

func main() {}

func f() any {
  x := "hello"
  return x // ヒープへ
}

EOF
</span>
go build -gcflags= <span class="org-string">"-m"</span> -o bin $ <span class="org-variable-name">tmpfile</span> 2>&1
rm bin
rm $ <span class="org-variable-name">tmpfile</span>
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-nil">/tmp/tmpgo.wTCwGe.go:3:6: can inline main
/tmp/tmpgo.wTCwGe.go:5:6: can inline f
/tmp/tmpgo.wTCwGe.go:7:10: x escapes to heap
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgbc7a335" class="outline-2">
 <h2 id="orgbc7a335"> <a href="#orgbc7a335">関連</a></h2>
 <div class="outline-text-2" id="text-orgbc7a335">
 <ul class="org-ul"> <li> <a href="20250630T185540--kdoc-411-スタックは積み重ねて取り出して解放する。ではヒープは__permanent.html#ID-20250630T185540">KDOC 411: スタックは積み重ねて取り出して解放する。ではヒープは?</a>。ヒープを調べるきっかけになった</li>
</ul></div>
</div>
 <div id="outline-container-org8d6d611" class="outline-2">
 <h2 id="org8d6d611"> <a href="#org8d6d611">Backlinks</a></h2>
 <div class="outline-text-2" id="text-org8d6d611">
 <ul class="org-ul"> <li> <a href="./20250701T213624--kdoc-415-ioreaderのシグネチャはヒープエスケープを避けられる設計になっている__permanent.html">KDOC 415: io.Readerのシグネチャはヒープエスケープを避けられる設計になっている</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250701T193212--kdoc-414-インターフェースがヒープにエスケープされるのを見る__wiki.html"/>
  <id>https://kijimad.github.io/roam/20250701T193212--kdoc-414-インターフェースがヒープにエスケープされるのを見る__wiki.html</id>
  <updated>2025-08-06T17:46:59+09:00</updated>
</entry>
<entry>
  <title>KDOC 423: big.Ratのゼロ値を見る</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orgfc69b01" class="outline-2">
 <h2 id="orgfc69b01"> <a href="#orgfc69b01">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-orgfc69b01">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-07-27 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-orga6ce3b3" class="outline-2">
 <h2 id="orga6ce3b3"> <a href="#orga6ce3b3">概要</a></h2>
 <div class="outline-text-2" id="text-orga6ce3b3">
 <p>
Go言語の  <code>big.Rat</code> 型は分数を表すための型である。ゼロ値でのゼロ除算を避けるため、分母は1として扱われている。
</p>

 <div class="org-src-container">
 <pre class="src src-go">import (
  "math/big"
  "fmt"
)

func main() {
  var zero big.Rat
  fmt.Printf("%#v\n", zero.Num()) // 分子
  fmt.Printf("%#v\n", zero.Denom()) // 分母

  fmt.Printf("%#v\n", zero)
  // aは分子、bは分母
}
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-nil">0
1
big.Rat{a:big.Int{neg:false, abs:big.nat(nil)}, b:big.Int{neg:false, abs:big.nat(nil)}}
</pre>
</div>
</div>
</div>
 <div id="outline-container-orga2b514a" class="outline-2">
 <h2 id="orga2b514a"> <a href="#orga2b514a">関連</a></h2>
 <div class="outline-text-2" id="text-orga2b514a">
 <p>
なし。
</p>
</div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250721T101356--kdoc-423-bigratのゼロ値を見る__draft_permanent.html"/>
  <id>https://kijimad.github.io/roam/20250721T101356--kdoc-423-bigratのゼロ値を見る__draft_permanent.html</id>
  <updated>2025-08-06T17:46:48+09:00</updated>
</entry>
<entry>
  <title>KDOC 411: スタックは積み重ねて取り出して解放する。ではヒープは?</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org1db6fd2" class="outline-2">
 <h2 id="org1db6fd2"> <a href="#org1db6fd2">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org1db6fd2">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-30 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-07-19 貴島</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org31f4f24" class="outline-2">
 <h2 id="org31f4f24"> <a href="#org31f4f24">概要</a></h2>
 <div class="outline-text-2" id="text-org31f4f24">
 <p>
スタックとヒープについて聞かれた。
</p>

 <p>
スタック領域は関数呼び出しとともに積み重ねてローカル変数を保存していき、抜けるとともに解放できる明確なイメージがあった。しかし、ヒープはどう使われているかを答えられなくて凹んだ。
</p>

 <hr></hr> <hr></hr> <p>
逆になぜ、スタックの使用方法は明確なイメージがあったのだろうか。それはよくコードとアセンブリを比較していたからだ。スタックベースの操作が頻繁に登場し、関数呼び出し時にメモリを確保し、抜けるときに破棄する流れをよく見た。
</p>

 <p>
多くのCPUの命令セットアーキテクチャは  <code>push</code> /  <code>pop</code> /  <code>ret</code> などのスタック操作をサポートしている。これらの命令は「一番上に積む」「一番上から取る」という制限された動きしかできず柔軟性はない。だからコンパイル時にサイズを決めて機械的に変換でき、どの領域が使われているかは明確である。スタックは、CPUレベルで使っていると言える。
</p>

 <p>
いっぽう、アセンブリでヒープ確保は、  <code>malloc</code> のようなライブラリ関数の呼び出し( <code>call</code>)として現れる。そのさきで何が行われているかは、OSや言語処理系レベルの話だ。スタックより柔軟に使えるが複雑なために、上のレイヤーに任せているといえる。
</p>

 <p>
スタックとヒープはまとめて扱われるが、異なる特性を持っている。処理するレイヤーは異なるのを認識するのが重要に見える。
</p>
</div>
</div>
 <div id="outline-container-org36b0afd" class="outline-2">
 <h2 id="org36b0afd"> <a href="#org36b0afd">関連</a></h2>
 <div class="outline-text-2" id="text-org36b0afd">
 <ul class="org-ul"> <li> <a href="https://ja.wikipedia.org/wiki/%E3%83%92%E3%83%BC%E3%83%97%E9%A0%98%E5%9F%9F">ヒープ領域 - Wikipedia</a></li>
 <li> <a href="20240427T120833--kdoc-141-cのポインタ操作をアセンブリで見る__wiki.html#ID-20240427T120833">KDOC 141: Cのポインタ操作をアセンブリで見る</a>。アセンブラを見ていた例</li>
</ul></div>
</div>
 <div id="outline-container-orga0f6d02" class="outline-2">
 <h2 id="orga0f6d02"> <a href="#orga0f6d02">Backlinks</a></h2>
 <div class="outline-text-2" id="text-orga0f6d02">
 <ul class="org-ul"> <li> <a href="./20250630T192238--kdoc-412-ヒープ管理方法の変遷を見る__permanent.html">KDOC 412: ヒープ管理方法の変遷を見る</a></li>
 <li> <a href="./20250701T174437--kdoc-413-ローカル変数がヒープにエスケープされるのを見る__wiki.html">KDOC 413: ローカル変数がヒープにエスケープされるのを見る</a></li>
 <li> <a href="./20250701T193212--kdoc-414-インターフェースがヒープにエスケープされるのを見る__wiki.html">KDOC 414: インターフェースがヒープにエスケープされるのを見る</a></li>
 <li> <a href="./20250702T194815--kdoc-416-goのエスケープ解析における2つの不変条件を見る__permanent.html">KDOC 416: Goのエスケープ解析における2つの不変条件を見る</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250630T185540--kdoc-411-スタックは積み重ねて取り出して解放する。ではヒープは__permanent.html"/>
  <id>https://kijimad.github.io/roam/20250630T185540--kdoc-411-スタックは積み重ねて取り出して解放する。ではヒープは__permanent.html</id>
  <updated>2025-08-06T17:46:46+09:00</updated>
</entry>
<entry>
  <title>KDOC 406: TCP/IPでは1つのIPアドレスでネットワークとノードをまとめて表す</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orgf199bd3" class="outline-2">
 <h2 id="orgf199bd3"> <a href="#orgf199bd3">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-orgf199bd3">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-24 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-29 貴島</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-orgfcc3b8c" class="outline-2">
 <h2 id="orgfcc3b8c"> <a href="#orgfcc3b8c">概要</a></h2>
 <div class="outline-text-2" id="text-orgfcc3b8c">
 <p>
TCP/IPの特徴の1つに、1つのIPアドレスでネットワークとノードをまとめて表すという点がある(位置400)。
</p>
</div>
</div>
 <div id="outline-container-org9397a68" class="outline-2">
 <h2 id="org9397a68"> <a href="#org9397a68">関連</a></h2>
 <div class="outline-text-2" id="text-org9397a68">
 <ul class="org-ul"> <li> <a href="20250506T120102--kdoc-377-『一日で読めてわかるtcpipのエッセンス』__book.html#ID-20250506T120102">KDOC 377: 『一日で読めてわかるTCP/IPのエッセンス』</a>から</li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250624T085212--kdoc-406-tcpipでは1つのipアドレスでネットワークとノードをまとめて表す__book.html"/>
  <id>https://kijimad.github.io/roam/20250624T085212--kdoc-406-tcpipでは1つのipアドレスでネットワークとノードをまとめて表す__book.html</id>
  <updated>2025-08-06T17:46:44+09:00</updated>
</entry>
<entry>
  <title>KDOC 419: トキワ荘マンガミュージアムを観察する</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orgc3f0ceb" class="outline-2">
 <h2 id="orgc3f0ceb"> <a href="#orgc3f0ceb">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-orgc3f0ceb">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-07-17 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-orgd066812" class="outline-2">
 <h2 id="orgd066812"> <a href="#orgd066812">概要</a></h2>
 <div class="outline-text-2" id="text-orgd066812">
 <p>
 <a href="https://ja.wikipedia.org/wiki/%E3%83%88%E3%82%AD%E3%83%AF%E8%8D%98%E3%83%9E%E3%83%B3%E3%82%AC%E3%83%9F%E3%83%A5%E3%83%BC%E3%82%B8%E3%82%A2%E3%83%A0">トキワ荘マンガミュージアム</a>は、東京都豊島区にある漫画に関する博物館である。
</p>

 <iframe src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d4142.42527168324!2d139.68947191122666!3d35.72335060977725!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x6018f35913eafb9f%3A0x932250aec9d5b534!2sTokiwaso%20Manga%20Museum!5e1!3m2!1sen!2sjp!4v1751777420035!5m2!1sen!2sjp" width="600" height="450" style="border:0;" allowfullscreen="" loading="lazy" referrerpolicy="no-referrer-when-downgrade"></iframe>

 <ul class="org-ul"> <li>若手漫画家になったつもりで観覧した。ネタ探しのついでに先輩の偉業を見学する、という感じ。が、彼らの想像ができずなりきれていなかった。生態を知らない</li>
 <li>マンガミュージアムといっても、特定の時期(1950~60年代)・場所(椎名町)のマンガ家を解説した博物館で、解説内容は一部に限られている</li>
 <li>実は漫画家たちの入居時期がかぶってた時期はそんなに長くない</li>
 <li>靴を脱いで部屋に入っていく体験が新鮮に感じる</li>
 <li>現在博物館になっている建物は復元されたものである。漫画家たちが居住したアパートは取り壊し後、しばらく忘れ去られていた(Wikipediaから)が、近年の活動によって形となった。自然にできたものではない。複数の関係者が別の意図をもって、掘り起こしたものである。地域振興や公共サービスと絡めて、復活したように見える</li>
 <li>『Dr.コトー診療所』で知られる山田貴敏の展示は興味深かった。これまでの彼の作品が実際のコマ付きの解説で多数紹介されていた。甑島での取材写真と対応する漫画のコマが一致する箇所が面白く感じた。リアリティを支える部分に触れた感じがした</li>
 <li>取材写真はなんでもない店や小道、日常風景が写されていて印象的だった。その場所が見たいと感じた。郷土資料づくりには必要な観点だろう。なんでもない、日常写真にこそ価値がある</li>
 <li>部屋として復元されているわけだが、やはりいまいち彼らになりきれてない感じがある。ほんとうに住んでいたのをイメージできてない。歴史の違いとか、個人に焦点をあてたエピソードの違いとか、いろいろあるだろう</li>
 <li>生活視点から見た昭和史が掲載されていた。物価、近くの街、店、駅。面白い</li>
 <li>60代以上に見える年配者が観覧車の多くを占めていた。特に老夫婦を多く見た。次に小学生低学年くらいの子と若い夫婦の家族が多い。子よりも親のほうが興奮していたようだ。</li>
 <li>想像するとおりの昭和、という感じの玄関、廊下、和室が郷愁を感じさせた。自分は体験してないにも関わらず</li>
 <li>本当に当時の彼らの気持ちになりきれてるかというとそうではない。彼らの生活や仕事ぶりをあまり想像できなかった。正確に言うと彼らの仕事している様子を見たいのであって、部屋そのものではないように見える</li>
 <li>当時の漫画家は、2025年現在でいうと何に相当するか、と考えた。偏見を受けながら、業界自体を切り開いている先駆者たちだ。いまでいうとYouTuberなどだろうか。子どものなりたい職業ランキングに入っているときに嘲笑のニュアンスがある</li>
 <li>建物の復元には意味があるが、物足りなく感じた。単純に展示面積が少なく見える。パッションを感じるためには、もっと圧倒的な物量が必要に見える。トキワ荘にフォーカスするならスケールアップして小人になったつもりで観覧、はどうだろうか。狭さまで等倍で再現する必要はないように見える。…</li>
</ul></div>
</div>
 <div id="outline-container-org24821eb" class="outline-2">
 <h2 id="org24821eb"> <a href="#org24821eb">関連</a></h2>
 <div class="outline-text-2" id="text-org24821eb">
 <p>
なし。
</p>
</div>
</div>
 <div id="outline-container-org73d7cb4" class="outline-2">
 <h2 id="org73d7cb4"> <a href="#org73d7cb4">Backlinks</a></h2>
 <div class="outline-text-2" id="text-org73d7cb4">
 <ul class="org-ul"> <li> <a href="./20240908T180537--kdoc-238-他人の博物館を観察して参考にする__project.html">KDOC 238: 他人の博物館を観察して参考にする</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250706T135040--kdoc-419-トキワ荘マンガミュージアムを観察する__draft_essay.html"/>
  <id>https://kijimad.github.io/roam/20250706T135040--kdoc-419-トキワ荘マンガミュージアムを観察する__draft_essay.html</id>
  <updated>2025-08-06T17:46:43+09:00</updated>
</entry>
</feed>
