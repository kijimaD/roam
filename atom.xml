<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><author><name>Kijima Daigo</name></author>
<title>Insomnia</title>
<generator>Emacs webfeeder.el</generator>
<link href="https://kijimad.github.io/roam"/>
<link href="https://kijimad.github.io/roam/atom.xml" rel="self"/>
<id>https://kijimad.github.io/roam/atom.xml</id>
<updated>2025-06-19T08:54:40+09:00</updated>
<entry>
  <title>KDOC 386: IPはデータを機器に届けられるが、目的のプログラムを示せない</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org0821959" class="outline-2">
 <h2 id="org0821959"> <a href="#org0821959">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org0821959">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-16 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-16 貴島</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org56c6af2" class="outline-2">
 <h2 id="org56c6af2"> <a href="#org56c6af2">概要</a></h2>
 <div class="outline-text-2" id="text-org56c6af2">
 <p>
IPはデータを別のネットワークの機器に届けられるが、目的のプログラムを示せない。機器間の伝送までしかできない。この識別を行いプログラム間でのデータ転送を実現するのが伝送プロトコルのUDPとTCPの役割である(位置151)。
</p>
</div>
</div>
 <div id="outline-container-org253dc77" class="outline-2">
 <h2 id="org253dc77"> <a href="#org253dc77">関連</a></h2>
 <div class="outline-text-2" id="text-org253dc77">
 <ul class="org-ul"> <li> <a href="20250506T120102--kdoc-377-『一日で読めてわかるtcpipのエッセンス』__draft_book.html#ID-20250506T120102">KDOC 377: 『一日で読めてわかるTCP/IPのエッセンス』</a>から</li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250611T184309--kdoc-386-ipはデータを機器に届けられるが、目的のプログラムを示せない__book.html"/>
  <id>https://kijimad.github.io/roam/20250611T184309--kdoc-386-ipはデータを機器に届けられるが、目的のプログラムを示せない__book.html</id>
  <updated>2025-06-19T17:54:38+09:00</updated>
</entry>
<entry>
  <title>KDOC 389: GORM + MySQLでカラムの順番が変動するのはなぜか?</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orgcc951d6" class="outline-2">
 <h2 id="orgcc951d6"> <a href="#orgcc951d6">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-orgcc951d6">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-16 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-16 貴島</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org7929ba6" class="outline-2">
 <h2 id="org7929ba6"> <a href="#org7929ba6">概要</a></h2>
 <div class="outline-text-2" id="text-org7929ba6">
 <p>
MySQL + gormでマイグレーションすると、カラムの順序が毎回微妙に変動してしまう。そうなると <a href="https://github.com/k1LoW/tbls">tbls</a>でDBスキーマを出力すると毎回差分が出て、自動チェックができなくて困る。
</p>

 <p>
Postgresでは発生しない。原因はDBなのか、ORMなのか。なぜなのだろうか。
</p>
</div>
</div>
 <div id="outline-container-orga9678a3" class="outline-2">
 <h2 id="orga9678a3"> <a href="#orga9678a3">関連</a></h2>
 <div class="outline-text-2" id="text-orga9678a3">
 <p>
なし。
</p>
</div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250612T234932--kdoc-389-gorm-mysqlでカラムの順番が変動するのはなぜか__permanent.html"/>
  <id>https://kijimad.github.io/roam/20250612T234932--kdoc-389-gorm-mysqlでカラムの順番が変動するのはなぜか__permanent.html</id>
  <updated>2025-06-19T17:54:36+09:00</updated>
</entry>
<entry>
  <title>KDOC 396: 優れた技術ブログは思考プロセスを含む</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orgb91c007" class="outline-2">
 <h2 id="orgb91c007"> <a href="#orgb91c007">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-orgb91c007">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul> <ul class="org-ul"> <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org5b6085e" class="outline-2">
 <h2 id="org5b6085e"> <a href="#org5b6085e">概要</a></h2>
 <div class="outline-text-2" id="text-org5b6085e">
 <p>
優れた技術ブログは、どう実装したかだけでなく、「なぜそうしたのか」「他にどんな選択肢を検討したのか」という思考プロセスを含む、という。
</p>

 <ul class="org-ul"> <li> <a href="https://syu-m-5151.hatenablog.com/entry/2025/04/07/181150">エンジニアブログは技術的であるべきで登壇は衒学的であると思う理由 - じゃあ、おうちで学べる</a>から。</li>
</ul></div>
</div>
 <div id="outline-container-org828855a" class="outline-2">
 <h2 id="org828855a"> <a href="#org828855a">関連</a></h2>
 <div class="outline-text-2" id="text-org828855a">
 <p>
なし。
</p>
</div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250616T220141--kdoc-396-優れた技術ブログは思考プロセスを含む__draft_essay.html"/>
  <id>https://kijimad.github.io/roam/20250616T220141--kdoc-396-優れた技術ブログは思考プロセスを含む__draft_essay.html</id>
  <updated>2025-06-19T17:54:34+09:00</updated>
</entry>
<entry>
  <title>KDOC 384: 『syntactic support for error handling』</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orgde59513" class="outline-2">
 <h2 id="orgde59513"> <a href="#orgde59513">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-orgde59513">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-11 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-16 貴島</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org8f72331" class="outline-2">
 <h2 id="org8f72331"> <a href="#org8f72331">概要</a></h2>
 <div class="outline-text-2" id="text-org8f72331">
 <p>
Go公式ブログの <a href="https://go.dev/blog/error-syntax">[ On | No ] syntactic support for error handling</a>を読んだメモ。
</p>
</div>
</div>
 <div id="outline-container-org06e7b18" class="outline-2">
 <h2 id="org06e7b18"> <a href="#org06e7b18">メモ</a></h2>
 <div class="outline-text-2" id="text-org06e7b18">
 <ul class="org-ul"> <li>エラーハンドリングの書き方  <code>if err != nil</code> に関しては、今までたくさんのプロポーザルが送られてきた</li>
 <li>多くの場合は個人の好みに基づいた調整の提案が溢れかえった</li>
 <li>エラーのシンタックスと、エラーハンドリングは別の問題である</li>
 <li>定型文を覆い隠すと、明快さが失われる</li>
 <li>ワンラインの、追加文法は受け入れない。1つのことは1つの書き方に反するから
 <ul class="org-ul"> <li> <code>:=</code> の、再宣言する機能は例外である。エラーハンドリングのため追加された機能</li>
</ul></li>
 <li> <code>Cmp.Or</code> を使って複数のエラーを一気にチェックできる。値であるから、自由度がある</li>
 <li>当面の間、Goチームはエラーハンドリングに関するシンタックスの問題を解決しようとするのをやめる。変更提案を却下する</li>
</ul></div>
</div>
 <div id="outline-container-org6fec2b1" class="outline-2">
 <h2 id="org6fec2b1"> <a href="#org6fec2b1">関連</a></h2>
 <div class="outline-text-2" id="text-org6fec2b1">
 <p>
なし。
</p>
</div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250610T175039--kdoc-384-『syntactic-support-for-error-handling』__book.html"/>
  <id>https://kijimad.github.io/roam/20250610T175039--kdoc-384-『syntactic-support-for-error-handling』__book.html</id>
  <updated>2025-06-19T17:54:34+09:00</updated>
</entry>
<entry>
  <title>KDOC 392: 絞ってからJOINすることでパフォーマンスを改善する</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orgc05fe54" class="outline-2">
 <h2 id="orgc05fe54"> <a href="#orgc05fe54">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-orgc05fe54">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul> <ul class="org-ul"> <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-orgedc117f" class="outline-2">
 <h2 id="orgedc117f"> <a href="#orgedc117f">概要</a></h2>
 <div class="outline-text-2" id="text-orgedc117f">
</div>
</div>
 <div id="outline-container-org2cd1f5b" class="outline-2">
 <h2 id="org2cd1f5b"> <a href="#org2cd1f5b">関連</a></h2>
 <div class="outline-text-2" id="text-org2cd1f5b">
 <p>
なし。
</p>
</div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250614T103239--kdoc-392-絞ってからjoinすることでパフォーマンスを改善する__draft_wiki.html"/>
  <id>https://kijimad.github.io/roam/20250614T103239--kdoc-392-絞ってからjoinすることでパフォーマンスを改善する__draft_wiki.html</id>
  <updated>2025-06-19T17:54:32+09:00</updated>
</entry>
<entry>
  <title>KDOC 387: イーサネットによる通信はMACアドレスを使う</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org9441fdf" class="outline-2">
 <h2 id="org9441fdf"> <a href="#org9441fdf">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org9441fdf">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-12 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-16 貴島</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org13d0a4a" class="outline-2">
 <h2 id="org13d0a4a"> <a href="#org13d0a4a">概要</a></h2>
 <div class="outline-text-2" id="text-org13d0a4a">
 <p>
イーサネットによる通信は、MACアドレスを使い、各機器のインターフェース間で行われる。イーサネットの通信は1つのイーサネットネットワークの内部でしかできない(位置274)
</p>
</div>
</div>
 <div id="outline-container-org7359b24" class="outline-2">
 <h2 id="org7359b24"> <a href="#org7359b24">関連</a></h2>
 <div class="outline-text-2" id="text-org7359b24">
 <ul class="org-ul"> <li> <a href="20250506T120102--kdoc-377-『一日で読めてわかるtcpipのエッセンス』__draft_book.html#ID-20250506T120102">KDOC 377: 『一日で読めてわかるTCP/IPのエッセンス』</a>から</li>
</ul></div>
</div>
 <div id="outline-container-org04c8977" class="outline-2">
 <h2 id="org04c8977"> <a href="#org04c8977">Backlinks</a></h2>
 <div class="outline-text-2" id="text-org04c8977">
 <ul class="org-ul"> <li> <a href="./20250613T090351--kdoc-390-イーサネットや無線lanは1つのネットワーク内での通信を行える__draft_book.html">KDOC 390: イーサネットや無線LANは1つのネットワーク内での通信を行える</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250612T204735--kdoc-387-イーサネットによる通信はmacアドレスを使う__book.html"/>
  <id>https://kijimad.github.io/roam/20250612T204735--kdoc-387-イーサネットによる通信はmacアドレスを使う__book.html</id>
  <updated>2025-06-19T17:54:30+09:00</updated>
</entry>
<entry>
  <title>KDOC 398: GORMフックはレシーバーがnilになる可能性がある</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org481b84d" class="outline-2">
 <h2 id="org481b84d"> <a href="#org481b84d">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org481b84d">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-19 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org8fb9fbc" class="outline-2">
 <h2 id="org8fb9fbc"> <a href="#org8fb9fbc">概要</a></h2>
 <div class="outline-text-2" id="text-org8fb9fbc">
 <p>
GORMでは <a href="https://gorm.io/ja_JP/docs/hooks.html">Hooks</a>を使用できる。これによってCRUD操作の前後の処理を挿入できる。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 1: </span>Userを削除する前に実行される</label> <pre class="src src-go">func (u *User) BeforeDelete(tx *gorm.DB) (err error) {
  return
}
</pre>
</div>

 <p>
もし  <code>Delete()</code> にスライスのUserを渡し一括で削除しようとすると、フックは1度だけ実行され、レシーバはnilになる。
</p>

 <p>
直感的ではないが、こうなっていなければ1件1件削除するたびにモデル情報を取得する必要があり、パフォーマンスの問題になるだろう。
</p>
</div>
</div>
 <div id="outline-container-org1c54f98" class="outline-2">
 <h2 id="org1c54f98"> <a href="#org1c54f98">関連</a></h2>
 <div class="outline-text-2" id="text-org1c54f98">
 <p>
なし。
</p>
</div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250618T232434--kdoc-398-gormフックはレシーバーがnilになる可能性がある__draft_wiki.html"/>
  <id>https://kijimad.github.io/roam/20250618T232434--kdoc-398-gormフックはレシーバーがnilになる可能性がある__draft_wiki.html</id>
  <updated>2025-06-19T17:54:09+09:00</updated>
</entry>
<entry>
  <title>KDOC 397: 技術力とは、技術選択の理由を説明できること</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orgd21db2a" class="outline-2">
 <h2 id="orgd21db2a"> <a href="#orgd21db2a">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-orgd21db2a">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul> <ul class="org-ul"> <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org172e09a" class="outline-2">
 <h2 id="org172e09a"> <a href="#org172e09a">概要</a></h2>
 <div class="outline-text-2" id="text-org172e09a">
 <p>
技術力とは、技術選択の理由を説明できること、長期的な影響を予測できること、そしてプロジェクト全体における個々の実装の位置づけを理解できることである、という。
</p>

 <p>
どの選択肢の中から何を選んだかのプロセスが技術力である。それをやるには、なぜ必要かどの文脈で有用かなどの本質的な理解が必要になる。
</p>

 <ul class="org-ul"> <li> <a href="https://syu-m-5151.hatenablog.com/entry/2025/02/04/203205">滅びゆく「なぜ？」と「どうして？」の学びをどう受け止めればよいのか？新人エンジニアの指導で感じる生成AI時代の指導の難しさ - じゃあ、おうちで学べる</a>から。</li>
</ul></div>
</div>
 <div id="outline-container-org12520fc" class="outline-2">
 <h2 id="org12520fc"> <a href="#org12520fc">関連</a></h2>
 <div class="outline-text-2" id="text-org12520fc">
 <p>
なし。
</p>
</div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250617T082740--kdoc-397-技術力とは、技術選択の理由を説明できること__draft_essay.html"/>
  <id>https://kijimad.github.io/roam/20250617T082740--kdoc-397-技術力とは、技術選択の理由を説明できること__draft_essay.html</id>
  <updated>2025-06-19T17:54:05+09:00</updated>
</entry>
<entry>
  <title>KDOC 382: JavaScriptにトランスパイルするのはなぜか?</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orgddb55c6" class="outline-2">
 <h2 id="orgddb55c6"> <a href="#orgddb55c6">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-orgddb55c6">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-11 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-16 貴島</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org3660999" class="outline-2">
 <h2 id="org3660999"> <a href="#org3660999">概要</a></h2>
 <div class="outline-text-2" id="text-org3660999">
 <p>
TypeScriptにせよ、CoffeeScriptなど、JavaScriptにトランスパイルするプログラミング言語がある。ほかの言語では見ない特徴に見える。なぜだろうか。
</p>
</div>
</div>
 <div id="outline-container-org20944ad" class="outline-2">
 <h2 id="org20944ad"> <a href="#org20944ad">関連</a></h2>
 <div class="outline-text-2" id="text-org20944ad">
 <p>
なし。
</p>
</div>
</div>
 <div id="outline-container-org85aa0bd" class="outline-2">
 <h2 id="org85aa0bd"> <a href="#org85aa0bd">Backlinks</a></h2>
 <div class="outline-text-2" id="text-org85aa0bd">
 <ul class="org-ul"> <li> <a href="./20250603T215644--kdoc-383-javascriptはブラウザの組み込み言語でありランタイムの更新は難しい__permanent.html">KDOC 383: JavaScriptはブラウザの組み込み言語でありランタイムの更新は難しい</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250603T215521--kdoc-382-javascriptにトランスパイルするのはなぜか__permanent.html"/>
  <id>https://kijimad.github.io/roam/20250603T215521--kdoc-382-javascriptにトランスパイルするのはなぜか__permanent.html</id>
  <updated>2025-06-19T17:54:05+09:00</updated>
</entry>
<entry>
  <title>KDOC 391: 1対1のテーブルを維持する</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org488e10c" class="outline-2">
 <h2 id="org488e10c"> <a href="#org488e10c">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org488e10c">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-19 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org2809e35" class="outline-2">
 <h2 id="org2809e35"> <a href="#org2809e35">概要</a></h2>
 <div class="outline-text-2" id="text-org2809e35">
 <p>
親テーブルと子テーブルのレコードが1対1の対応であることを保ちたい場面がある。親だけ、あるいは子だけが消された状態はデータ不整合である。防ぎたい。
</p>

 <p>
たとえばこのような、必ず「ユーザ」は「個人ユーザ」か「会社ユーザ」である、ようなケース。
</p>

 <p>
users。
</p>

 <table> <colgroup> <col class="org-left"></col></colgroup> <thead> <tr> <th scope="col" class="org-left">フィールド</th>
</tr></thead> <tbody> <tr> <td class="org-left">id</td>
</tr></tbody></table> <p>
user_individuals。
</p>

 <table> <colgroup> <col class="org-left"></col></colgroup> <thead> <tr> <th scope="col" class="org-left">フィールド</th>
</tr></thead> <tbody> <tr> <td class="org-left">id</td>
</tr> <tr> <td class="org-left">user_id</td>
</tr></tbody></table> <p>
user_companies。
</p>

 <table> <colgroup> <col class="org-left"></col></colgroup> <thead> <tr> <th scope="col" class="org-left">フィールド</th>
</tr></thead> <tbody> <tr> <td class="org-left">id</td>
</tr> <tr> <td class="org-left">user_id</td>
</tr></tbody></table> <p>
データベース制約によって、親が消されたら子を削除する、は簡単にできる。いっぽう、親子が1対1で子だけの削除を禁止する、というのはデータベース上では表現できないように見える。
</p>

 <p>
この場合、アプリケーション側でガードする、しか方法を知らない。いまのところの方法で、ベストではないと考えている。
</p>

 <ul class="org-ul"> <li>消すときは親テーブルを消し、関連削除によって子を削除するルールにする</li>
 <li>ORMのフックで、子テーブルの直接削除は禁止する</li>
 <li>アプリケーションに整合チェックを入れて確認する</li>
</ul></div>
</div>
 <div id="outline-container-org2503712" class="outline-2">
 <h2 id="org2503712"> <a href="#org2503712">関連</a></h2>
 <div class="outline-text-2" id="text-org2503712">
 <p>
なし。
</p>
</div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250614T012819--kdoc-391-1対1のテーブルを維持する__draft_wiki.html"/>
  <id>https://kijimad.github.io/roam/20250614T012819--kdoc-391-1対1のテーブルを維持する__draft_wiki.html</id>
  <updated>2025-06-19T17:54:04+09:00</updated>
</entry>
<entry>
  <title>KDOC 388: 『仕事ですぐに使えるTypeScript』</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org790c9db" class="outline-2">
 <h2 id="org790c9db"> <a href="#org790c9db">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org790c9db">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul> <ul class="org-ul"> <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org9234c1a" class="outline-2">
 <h2 id="org9234c1a"> <a href="#org9234c1a">概要</a></h2>
 <div class="outline-text-2" id="text-org9234c1a">
 <p>
 <a href="https://future-architect.github.io/typescript-guide/typescript-guide.pdf">仕事ですぐに使えるTypeScript</a>は、TypeScriptの入門本。
</p>

 <ul class="org-ul"> <li>76</li>
</ul></div>
</div>
 <div id="outline-container-org286ecb1" class="outline-2">
 <h2 id="org286ecb1"> <a href="#org286ecb1">メモ</a></h2>
 <div class="outline-text-2" id="text-org286ecb1">
 <ul class="org-ul"> <li>TypeScriptのソースコードはあくまでもJavaScriptに変換されてから実行される。TypeScriptのコンパイラが持つインターフェースやtypeなど固有の型情報はランタイムには存在しない。そのため「このオブジェクトがこのインターフェースを持つとき」という実行文はほかの言語のようにそのまま実行できない(p68)</li>
 <li>TypeScriptはそれを解決するために型ガードという機能が実装されている。実行時の文脈を解析し、型の選択肢を適切に絞り込んでいく。コンパイラはtypeofやinstanceofなどを見て型ガードと判定する、という(p68)</li>
 <li>(感想)なぜtypeofは文字列で返すのだろうか。型ガードがある理由と同じようにランタイムにまつわるものだろうか。TypeScriptの層で吸収できそうにも見える</li>
 <li>型ガードではTypeScriptのコンパイラだけが知っている情報は扱えない。JavaScriptとして実行時にアクセスできる情報を使って、booleanを返す必要がある(p70)</li>
 <li>型アサーションは実行文ではなく、あくまでコンパイラの持つ型情報を上書きするものである。型ガードと異なり、実行時には一切参照しない(p70)</li>
 <li>従来のJavaScriptは関数の使い勝手がよかったいっぽうで、言語の他の機能は少なかった。関数を多用したテクニックが多くあった(p75)</li>
</ul></div>
</div>
 <div id="outline-container-org068cf75" class="outline-2">
 <h2 id="org068cf75"> <a href="#org068cf75">関連</a></h2>
 <div class="outline-text-2" id="text-org068cf75">
 <p>
なし。
</p>
</div>
</div>
 <div id="outline-container-org4d7282c" class="outline-2">
 <h2 id="org4d7282c"> <a href="#org4d7282c">Backlinks</a></h2>
 <div class="outline-text-2" id="text-org4d7282c">
 <ul class="org-ul"> <li> <a href="./20250603T215644--kdoc-383-javascriptはブラウザの組み込み言語でありランタイムの更新は難しい__permanent.html">KDOC 383: JavaScriptはブラウザの組み込み言語でありランタイムの更新は難しい</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250612T231654--kdoc-388-『仕事ですぐに使えるtypescript』__draft_book.html"/>
  <id>https://kijimad.github.io/roam/20250612T231654--kdoc-388-『仕事ですぐに使えるtypescript』__draft_book.html</id>
  <updated>2025-06-19T17:54:03+09:00</updated>
</entry>
<entry>
  <title>KDOC 399: 『PostgreSQL 17.0』</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org0cfae32" class="outline-2">
 <h2 id="org0cfae32"> <a href="#org0cfae32">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org0cfae32">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul> <ul class="org-ul"> <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org6c94af8" class="outline-2">
 <h2 id="org6c94af8"> <a href="#org6c94af8">概要</a></h2>
 <div class="outline-text-2" id="text-org6c94af8">
 <p>
 <a href="https://pgsql-jp.github.io/jpug-doc/17.0/postgresql-17.0-A4.pdf">PostgreSQL 17.0文書</a>は、PostgreSQLのマニュアル。
</p>
</div>
</div>
 <div id="outline-container-orgfa7ef24" class="outline-2">
 <h2 id="orgfa7ef24"> <a href="#orgfa7ef24">メモ</a></h2>
 <div class="outline-text-2" id="text-orgfa7ef24">
 <ul class="org-ul"> <li>PostgreSQLはクライアント/サーバモデルを採用している。クライアントとサーバのホストが異なる場合、TCP/IPネットワーク経由で通信する(p4)
 <ul class="org-ul"> <li>(感想)ホストが同じ場合はソケット接続という理解で合っているか</li>
</ul></li>
 <li>サーバは接続ごとに新しいプロセスを開始(fork)する。これによってクライアントからの複数同時接続を取り扱える(p4)</li>
 <li>左外部結合というのは、結合演算子の左側に指定したテーブルの各行が最低でも1度出力されるから。いっぽう右側では左側のテーブルの行に一致するもののみが出力される(p14)</li>
</ul></div>
</div>
 <div id="outline-container-org8bd888d" class="outline-2">
 <h2 id="org8bd888d"> <a href="#org8bd888d">関連</a></h2>
 <div class="outline-text-2" id="text-org8bd888d">
 <p>
なし。
</p>
</div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250618T233353--kdoc-399-『postgresql-170』__draft_book.html"/>
  <id>https://kijimad.github.io/roam/20250618T233353--kdoc-399-『postgresql-170』__draft_book.html</id>
  <updated>2025-06-19T17:54:02+09:00</updated>
</entry>
<entry>
  <title>KDOC 395: IPの役割は複数ネットワークにおいて任意の相手にデータを送れるようにすること</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orge3fdde4" class="outline-2">
 <h2 id="orge3fdde4"> <a href="#orge3fdde4">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-orge3fdde4">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul> <ul class="org-ul"> <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org7b1d726" class="outline-2">
 <h2 id="org7b1d726"> <a href="#org7b1d726">概要</a></h2>
 <div class="outline-text-2" id="text-org7b1d726">
 <p>
IPの役割は複雑に接続されたインターネット(ネットワークが相互に接続されたもの)において、接続されている個々の機器が任意の相手にデータを送れるようにすることである(位置119)。
</p>
</div>
</div>
 <div id="outline-container-orgadca91d" class="outline-2">
 <h2 id="orgadca91d"> <a href="#orgadca91d">関連</a></h2>
 <div class="outline-text-2" id="text-orgadca91d">
 <ul class="org-ul"> <li> <a href="20250506T120102--kdoc-377-『一日で読めてわかるtcpipのエッセンス』__draft_book.html#ID-20250506T120102">KDOC 377: 『一日で読めてわかるTCP/IPのエッセンス』</a>から</li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250616T202053--kdoc-395-ipの役割は複数ネットワークにおいて任意の相手にデータを送れるようにすること__draft_book.html"/>
  <id>https://kijimad.github.io/roam/20250616T202053--kdoc-395-ipの役割は複数ネットワークにおいて任意の相手にデータを送れるようにすること__draft_book.html</id>
  <updated>2025-06-19T17:53:59+09:00</updated>
</entry>
<entry>
  <title>KDOC 381: 識別子の先頭に数値が使えないのは区別がつかなくなるから</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orgca86cea" class="outline-2">
 <h2 id="orgca86cea"> <a href="#orgca86cea">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-orgca86cea">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-11 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-16 貴島</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org51b4972" class="outline-2">
 <h2 id="org51b4972"> <a href="#org51b4972">概要</a></h2>
 <div class="outline-text-2" id="text-org51b4972">
 <p>
 <a href="https://jsprimer.net/basic/variables/">変数と宣言 · JavaScript Primer</a>で、変数名の先頭に数字が使えない理由は、変数名と数値が区別できなくなってしまうためである、と書かれていた。
</p>

 <p>
そういった識別子への制限があるプログラミング言語は多い。同じ理由でそうなっているように見える。
</p>
</div>
</div>
 <div id="outline-container-org337113c" class="outline-2">
 <h2 id="org337113c"> <a href="#org337113c">関連</a></h2>
 <div class="outline-text-2" id="text-org337113c">
 <p>
なし。
</p>
</div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250603T215002--kdoc-381-識別子の先頭に数値が使えないのは区別がつかなくなるから__permanent.html"/>
  <id>https://kijimad.github.io/roam/20250603T215002--kdoc-381-識別子の先頭に数値が使えないのは区別がつかなくなるから__permanent.html</id>
  <updated>2025-06-19T17:53:57+09:00</updated>
</entry>
<entry>
  <title>KDOC 383: JavaScriptはブラウザの組み込み言語でありランタイムの更新は難しい</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orga0eb32f" class="outline-2">
 <h2 id="orga0eb32f"> <a href="#orga0eb32f">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-orga0eb32f">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-11 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-16 貴島</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-orgc762c0e" class="outline-2">
 <h2 id="orgc762c0e"> <a href="#orgc762c0e">概要</a></h2>
 <div class="outline-text-2" id="text-orgc762c0e">
 <p>
JavaScriptはブラウザの組み込み言語であるため、サーバーアプリケーションのようにランタイムをアプリケーションに合わせて維持したり更新できない。そのため、拡張した機能や文法を使いつつJavaScriptに変換することでランタイムを変更することなく追加機能の恩恵を受けるということをしている。
</p>
</div>
</div>
 <div id="outline-container-org6b57d8c" class="outline-2">
 <h2 id="org6b57d8c"> <a href="#org6b57d8c">関連</a></h2>
 <div class="outline-text-2" id="text-org6b57d8c">
 <ul class="org-ul"> <li> <a href="20250612T231654--kdoc-388-『仕事ですぐに使えるtypescript』__draft_book.html#ID-20250612T231654">KDOC 388: 『仕事ですぐに使えるTypeScript』</a>4ページの内容から</li>
 <li> <a href="20250603T215521--kdoc-382-javascriptにトランスパイルするのはなぜか__permanent.html#ID-20250603T215521">KDOC 382: JavaScriptにトランスパイルするのはなぜか?</a>。疑問に対する答え</li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250603T215644--kdoc-383-javascriptはブラウザの組み込み言語でありランタイムの更新は難しい__permanent.html"/>
  <id>https://kijimad.github.io/roam/20250603T215644--kdoc-383-javascriptはブラウザの組み込み言語でありランタイムの更新は難しい__permanent.html</id>
  <updated>2025-06-19T17:53:55+09:00</updated>
</entry>
<entry>
  <title>KDOC 380: 『すごい面接の技術 転職活動で「選ばれる人」になる唯一の方法』</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orge1f8c89" class="outline-2">
 <h2 id="orge1f8c89"> <a href="#orge1f8c89">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-orge1f8c89">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-09 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-11 貴島</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org50108ec" class="outline-2">
 <h2 id="org50108ec"> <a href="#org50108ec">概要</a></h2>
 <div class="outline-text-2" id="text-org50108ec">
 <p>
『すごい面接の技術 転職活動で「選ばれる人」になる唯一の方法』は、転職活動の面接についての本。
</p>
</div>
</div>
 <div id="outline-container-orgf5195b9" class="outline-2">
 <h2 id="orgf5195b9"> <a href="#orgf5195b9">メモ</a></h2>
 <div class="outline-text-2" id="text-orgf5195b9">
 <p>
面接官の立場になって考えること。
</p>

 <ul class="org-ul"> <li> <p>
視点
</p>

 <p>
面接官の立場で考えて、「相手が欲しい答え」が何か見つけ出す。
</p></li>

 <li> <p>
わかりやすさ
</p>

 <p>
「答え」をわかりやすく伝える。
</p></li>

 <li>ストーリー

 <ul class="org-ul"> <li>キャリアの過去と未来をつなげるストーリーを使って、「だから御社で活躍できる」を伝える</li>
</ul></li>
</ul> <p>
メモ。
</p>

 <ul class="org-ul"> <li>転職活動は能力やスキル、経験だけで結果が決まらない。決まるなら、面接する必要はないから。だから、チャンスであるともいえる。不利な状況を覆せる可能性がある(p6)</li>
 <li>中途採用は単に優秀な人材というより、マッチングが重要である。「仕事の進め方や環境に合う人材」、「募集中の特定のポジションのニーズを満たす人材」。求人のニーズを満たせるかの一点が重要(p16)</li>
 <li>中途採用における書類選考では、主に応募者の在籍業界、企業名と役職、経験年数の基本情報をチェックして職務経歴書の最初の要約を読んだらほぼ合否は決まる(p35)</li>
 <li>職務経歴書は企業が雇いたくなる理由として有効なものだけに情報を絞って、できるだけ短く1~2ページにまとめるのが鉄則(p35)</li>
 <li>転職活動とは自分という人材を企業に売り込むための「営業」の場である。経歴がなぜ相手企業にとって魅力的だと言えるのかを相手目線で説明できるのが重要である(p36)</li>
 <li>自分のキャリアのハッシュタグで考える。求人票の内容に沿ってどのようなアピールが評価されそうか考え、ハッシュタグとなる言葉を選ぶ(p41)</li>
 <li>職務経歴書は1社1社調整する。求人票の内容が違うのだから、それに合わせて変えるのは当然のことである(p42)</li>
 <li>同じ業界・同じ職種だと、専門性やコネクションがない限り、長期的に待遇や役職を上げていくことはできない。転職を機にキャリアアップを目指すのであれば、過去のキャリアを「軸」にしつつ、自分の人材としての可能性が広がるような未知を選ぶのが理想的である(p47)</li>
 <li>現職と転職先との何らかの共通点となる軸、「キャリアのつながり」を作れない限り、雇うべき必然性を認識してもらえない。つながりのあるストーリーがあると、必然性を認識しやすい(p48)</li>
 <li>転職活動とは、単純に「市場価値」で勝敗が決まるものではない。そうならば、面接は不要である。「市場価値」とは別に、「その企業にとっての価値」という指標がある(p50)</li>
 <li>「自己評価」と「面接官の評価」は一致しない。暗記したことを言っている人に多い。聞いた内容からややズレた回答をしてしまい、上手くコミュニケーションを取れない、という印象を受ける(p52)</li>
 <li>面接は「対話」であり、コミュニケーション能力を評価する場である。面接官の表情や声の調子から、自分が伝えたいことがきちんと伝わっているかを敏感に察知し、臨機応変に補足説明をしたり、相手の理解度を確認したりする工夫が必要である。柔軟な対応ができない人は面接で高く評価されることはない。相手の質問に正確に答えることが最優先である(p53)</li>
 <li>専門用語を使わない。予備知識がなくても誰にでもわかるように「平易で一般的な言葉」に言い換える(p54)</li>
 <li>面接の結果は、大部分が面接官個人のフィーリングで決まる。だからこそ、気遣いや柔軟な対応が重要である(p55)</li>
 <li>事前の準備さえできていれば、当日は心配ない。回答例をたくさん用意しておく必要がある(p55)</li>
 <li>企業が自分を雇うべき絶対的な理由が必要であり、「過去の仕事を頑張ったかどうか」ではない。また「自分が伝えたいこと」を語るのではなく、「相手が欲しがっていること」を語るのが重要である(p58)</li>
 <li>面接では「等身大の自分」なんて見せてはいけない。ビジネスの延長線上であって、本音と建前がある。重要なのは回答内容で面接官に「採用したい」と考えてもらえるかである。何をどう言えば相手が自分を採用したくなるかだけを考える(p59)</li>
 <li>面接後は振り返りを行う。一次面接の傾向は、最終面接でも共通している。質問、受け答え、相手の反応や反省点をメモしておく(p62)</li>
 <li>中途採用面接はこれから一緒に働く仲間として頼りになる人物かどうかを見ているため、即戦力となるための能力や経験以上に、「真剣さ」「真面目さ」「熱意」を厳しく見ている(p65)</li>
</ul> <p>
研究内容。
</p>

 <ul class="org-ul"> <li>業界について
 <ul class="org-ul"> <li>業界全体の市場規模</li>
 <li>自社のマーケットシェア</li>
 <li>業界内でのポジショニング</li>
</ul></li>
 <li>企業について
 <ul class="org-ul"> <li>近年の業績の推移</li>
 <li>看板となる事業</li>
 <li>現在抱えている課題</li>
 <li>将来3~5年のビジネスの展望</li>
</ul></li>
 <li>募集中の求人について
 <ul class="org-ul"> <li>今回の応募ポジションの社内での位置づけ</li>
 <li>入社後の役割、達成すべきゴール</li>
 <li>求めている人物像と条件</li>
</ul></li>
</ul> <p>
メモ。
</p>

 <ul class="org-ul"> <li>企業が求めるのは「具体的な仕事の経験と実績」である。このとき役立つのが「STAR」の考え方である(p68)
 <ul class="org-ul"> <li>Situation(状況)。市場の概況、自社が置かれた状況を説明する。基本的な前提を共有できていないと自分が達成したことの「難易度」や「意義」が伝わらない</li>
 <li>Task(課題)。自分が何を解決したか。何が難しいのか。取り組んだ課題やハードルについて相手に理解してもらう</li>
 <li>Action(行動)。課題解決のために何をしたかだけでなく、なぜそうするに至ったか、他の選択肢があるなかで何が決め手だったか、意思決定プロセスにどう貢献したか。チームとしてやったことと自分個人が成し遂げたことを明確に区別して伝えるのが重要である</li>
 <li>Result(結果)。仕事の結果として何が得られたか、客観的な成果、数字の実績など</li>
 <li>Learning(学び)。その一連のプロジェクトから経験として学んだこと、失敗したと感じていること、やり直すなら何を改善するか</li>
</ul></li>
 <li>当時どのような「状況」下にあって、いかなる「課題」を解決する必要があったのか、そのためにどのような「行動」をとり、最終的に「結果」はどうなったのか、というポイントを押さえる。さらにLearning(学び)を追加で語るとよい(p68)</li>
 <li>声に出して、話す練習をする。自分が話す姿を客観的に見ておくことが重要(p76)</li>
 <li>オンラインでは話がどれくらい通じているか、相手の反応がよいかを測りにくい。相手も同じである。相手の反応を注意深く見つつ、ここまでの話が伝わっているかを都度確認する(p82)</li>
 <li>面接官も緊張している。四苦八苦しながら面接をしている。決して敵ではなく、一緒に働くことになる仲間である。自分という人材の良いところを仲間である面接官に教えるくらいの気持ちがよい(p86)</li>
 <li>志望理由に「本当の理由」はいらない。志望理由で転職エージェントに紹介されたから、と答えるのは典型的な失敗例である(p92)</li>
 <li>自分の過去の経験がこの会社でどう生きるのか、この会社で何を目指しているのか、というキャリアのストーリーを志望理由に組み込むとベストである。また企業や業界研究をきちんとしていないと答えられない深い内容は明確な差別化になる。また、企業や業界について調べるほど興味が出てきて「志望理由」は自然と湧いてくる(p94)</li>
 <li>ストーリーの考え方のヒント。この面接に自分が呼ばれた理由を考える。「自分に期待されていること」を考える。過去のキャリアと転職先のポジションをつなげるストーリーは相手のニーズから必然性を持って作り上げるものである(p95)</li>
 <li>「現職に不満はない」は嘘くさい。明確な理由がなければならない(p96)</li>
 <li>面接のほかの要素と同じく、「逆質問」も正直に自分が聞きたいことを聞く機会ではなく、「逆質問」という形式で評価を下す試練の1つである(p117)</li>
 <li>残業や転勤に対してなんでも正直従う、という態度も本当なのかと疑われることになる。自分の事情や背景を説明したうえで、条件付きで承諾するとよい</li>
 <li>「5年後・10年後のキャリア」は文字通りに受け取れば自分個人のキャリアの話だが、相手が欲しいのは「5年後、10年後の長期でどのように会社に貢献できるか」ということである(p132)</li>
 <li>どんな質問が来ても自分のスキルや過去の業務経験のPRにつながる形で回答するのが理想(p132)</li>
 <li>「会社の課題は何か」という質問は会社の悪いところを聞きたいわけではない。「課題」は見方を変えれば「改善のチャンス」であり、現職の会社でどのように課題を特定しそれを解決しようと努力したかを聞いている(p143)</li>
 <li>「休日の過ごし方」の質問にも意味がある。正直な答えは必要ない(p146)</li>
 <li>面接はアピールの場であり、納得させるにはストーリーが重要である。簡潔に回答できるケースは少ない(p158)</li>
</ul></div>
</div>
 <div id="outline-container-orgad0f981" class="outline-2">
 <h2 id="orgad0f981"> <a href="#orgad0f981">関連</a></h2>
 <div class="outline-text-2" id="text-orgad0f981">
 <p>
なし。
</p>
</div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250602T184338--kdoc-380-『すごい面接の技術-転職活動で「選ばれる人」になる唯一の方法』__book.html"/>
  <id>https://kijimad.github.io/roam/20250602T184338--kdoc-380-『すごい面接の技術-転職活動で「選ばれる人」になる唯一の方法』__book.html</id>
  <updated>2025-06-19T17:53:51+09:00</updated>
</entry>
<entry>
  <title>KDOC 385: 『続ける思考』</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orgfffa9b7" class="outline-2">
 <h2 id="orgfffa9b7"> <a href="#orgfffa9b7">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-orgfffa9b7">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-16 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org55b6ce0" class="outline-2">
 <h2 id="org55b6ce0"> <a href="#org55b6ce0">概要</a></h2>
 <div class="outline-text-2" id="text-org55b6ce0">
 <p>
 <a href="https://amzn.to/3SQiCn6">『続ける思考』</a>はどうやってものごとを続けるか、についての本である。「習慣家」である筆者がその方法を解説する。
</p>
</div>
</div>
 <div id="outline-container-org13bc3ef" class="outline-2">
 <h2 id="org13bc3ef"> <a href="#org13bc3ef">メモ</a></h2>
 <div class="outline-text-2" id="text-org13bc3ef">
 <ul class="org-ul"> <li>(感想)アイデアを説明するために映画や漫画の引用を多用する。わかりやすい。映画や漫画を見て記録したことが生かされている</li>
 <li>ただ「成果」を先に求めてしまうとそれがすべてになる。はじめた瞬間から「修練」や「修行」になってしまう。つらい(位置227)</li>
 <li>最初は上達を感じてたのしい。でもそのうち尻すぼみしていく。なかなかうまくならない。自分ってこんなものかと考える。つまらなく感じる(位置238)
 <ul class="org-ul"> <li>(感想)非常によくわかる。その繰り返しだ</li>
</ul></li>
 <li>別に最初に想像するようにうまくならなくてもいい。続けていけば必ず何かの「変化」が起こる。そのことを信じて何かを続けてみる。「正しい努力」という考え方を捨てて、「ただ続ける」ことをまずは意識すればよい、という(位置238)</li>
 <li>気持ちいいやり方を自分で見つけるために重要なことは、じぶんで解き方を発見することだ。そのためには最初から効率を求めすぎないことである。攻略法を見ずにやりながら考えることが、気持ちいい継続を生む秘訣である、という(位置253)</li>
 <li>最短の攻略法ですぐうまくなると、すぐに飽きる。それが「続かない」につながる(位置275)</li>
 <li>ラクに続けるコツは、週7日やることだ(位置372)</li>
 <li>どうしてもやりたくない日はやったフリだけする。ジョギングだったら着替えるだけとか、掃除なら掃除機を手に取るとか。さわりだけやれば意外にそのあとのことはできてしまう(位置830)</li>
 <li>自分を動かすエンジンは「小さな達成」だ。すべてのことに「小さなゴール」を設定し、「クリア」したらすぐ次のステージに移ることが重要である(位置987)</li>
 <li>自分で1人で漫画を書き続けヒットさせた人の話。不定期アップになると、読んでくれる人が離れる。その恐怖が背中を押してくれた。毎週同じ日に1話アップするというのは重要で、読んでくれる人に覚えてもらえる、という(位置1088)</li>
 <li>結果だけ見るとネットでバズった漫画が売れてアニメ化されて、と簡単に進んだだけに見える。しかしそこに行き着くまでには誰にも注目されずに2年間コツコツ描き続けた孤独なひとりきりの時間がある(位置1101)</li>
 <li>「うまくなる」「何か得する」「いいことが起きる」続けた先に待っていると考えることをやめてみる。目指すべきゴールを考えるのをやめてみる。上達しなくても別にいい。なんの役に立たなくても別にいい。楽しくなくてもいい。「こうなりたい」と考えずにはじめれば、壁にぶつかることもない(位置1124)</li>
 <li>楽しむためには「ラク」にやりすぎないことである。取り組むこと自体は「ラク」にすまさないのが長く続けていくポイントである(位置1190)</li>
 <li>誰にもでもできる大したことないことを、誰もやらないくらいに積み重ねる(位置1343)</li>
 <li>継続を阻む最大の敵は「大きな達成」である。目標の達成をゴールだと考えるとそこで終わる(位置1356)</li>
 <li>「誰でもできることを、誰もやらないくらい長くやる」ことには価値がある(位置1494)</li>
 <li>記録することで観察力が高まる。変化は記録してないと気づかない。最初は余計なことを考えずただ記録するだけでよい。半年、1年も毎日続けると、自然とメモする内容に変化が起こる(位置1667)</li>
 <li>雑談を盛り上げるには3番目にハマっていることの話をするといい。熱く語りすぎないから(位置1680)</li>
 <li>はじめは意味を考える必要はない。あとでその意味に気づくくらいでちょうどいい(位置1937)</li>
 <li>すぐ手に入る、すぐ結果がわかる、すぐ答えが出る。そんな時代であるから「好き」か遠のく。便利になることで人は好きを失っているのではないか、という。好きになることの裏には、たくさんの時間とただ楽しいだけではない大変さが必要である。AIでさらにすぐに答えが出るようになるだろう。「時間をかける」ということが難しくなる可能性がある(位置2205)</li>
 <li>(感想)好きは行動の後に生まれるという点で、 <a href="20221027T235104--kdoc-3-『ない仕事の作り方』__book.html#ID-20221027T235104">KDOC 3: 『ない仕事の作り方』</a>と通じる考え方である。より具体的に実行するためにどうすればいいか、にフォーカスしている。</li>
</ul></div>
</div>
 <div id="outline-container-org32f5205" class="outline-2">
 <h2 id="org32f5205"> <a href="#org32f5205">関連</a></h2>
 <div class="outline-text-2" id="text-org32f5205">
 <p>
なし。
</p>
</div>
</div>
 <div id="outline-container-org612cf30" class="outline-2">
 <h2 id="org612cf30"> <a href="#org612cf30">Backlinks</a></h2>
 <div class="outline-text-2" id="text-org612cf30">
 <ul class="org-ul"> <li> <a href="./20210904124352-workflow.html">workflow</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250611T180912--kdoc-385-『続ける思考』__draft_book.html"/>
  <id>https://kijimad.github.io/roam/20250611T180912--kdoc-385-『続ける思考』__draft_book.html</id>
  <updated>2025-06-19T17:53:50+09:00</updated>
</entry>
<entry>
  <title>KDOC 394: manのシステムコールセクションはインストールされてないことがある</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org9d5c49f" class="outline-2">
 <h2 id="org9d5c49f"> <a href="#org9d5c49f">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org9d5c49f">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul> <ul class="org-ul"> <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org088135c" class="outline-2">
 <h2 id="org088135c"> <a href="#org088135c">概要</a></h2>
 <div class="outline-text-2" id="text-org088135c">
 <p>
Linux Mint 22.1では、manのシステムコールのセクションが見つからない。ディストリビュージョンによっては、省略されていることがあるという。
</p>

 <p>
インストールする。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 1: </span>manpages-devをインストールする</label> <pre class="src src-shell">sudo apt update
sudo apt install manpages-dev
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-shell">man 2 fork | head -n10
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-nil">fork(2)                       System Calls Manual                      fork(2)

NAME
       fork - create a child process

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <unistd.h>
</pre>
</div>
</div>
</div>
 <div id="outline-container-org56116b0" class="outline-2">
 <h2 id="org56116b0"> <a href="#org56116b0">関連</a></h2>
 <div class="outline-text-2" id="text-org56116b0">
 <p>
なし。
</p>
</div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250614T125259--kdoc-394-manのシステムコールセクションはインストールされてないことがある__draft_wiki.html"/>
  <id>https://kijimad.github.io/roam/20250614T125259--kdoc-394-manのシステムコールセクションはインストールされてないことがある__draft_wiki.html</id>
  <updated>2025-06-19T17:53:42+09:00</updated>
</entry>
<entry>
  <title>KDOC 390: イーサネットや無線LANは1つのネットワーク内での通信を行える</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org8f8631c" class="outline-2">
 <h2 id="org8f8631c"> <a href="#org8f8631c">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org8f8631c">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-16 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-orga4afb41" class="outline-2">
 <h2 id="orga4afb41"> <a href="#orga4afb41">概要</a></h2>
 <div class="outline-text-2" id="text-orga4afb41">
 <p>
イーサネットや無線LANは1つのネットワーク内での通信を行えるが、そのままでは多数のネットワークを相互に接続できない(位置119)。
</p>
</div>
</div>
 <div id="outline-container-org9097bc6" class="outline-2">
 <h2 id="org9097bc6"> <a href="#org9097bc6">関連</a></h2>
 <div class="outline-text-2" id="text-org9097bc6">
 <ul class="org-ul"> <li> <a href="20250506T120102--kdoc-377-『一日で読めてわかるtcpipのエッセンス』__draft_book.html#ID-20250506T120102">KDOC 377: 『一日で読めてわかるTCP/IPのエッセンス』</a>から</li>
 <li> <a href="20250612T204735--kdoc-387-イーサネットによる通信はmacアドレスを使う__book.html#ID-20250612T204735">KDOC 387: イーサネットによる通信はMACアドレスを使う</a>を、言い換えたもの。層ごとに役割があり、できないことを考えると理解がしやすく見える</li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250613T090351--kdoc-390-イーサネットや無線lanは1つのネットワーク内での通信を行える__draft_book.html"/>
  <id>https://kijimad.github.io/roam/20250613T090351--kdoc-390-イーサネットや無線lanは1つのネットワーク内での通信を行える__draft_book.html</id>
  <updated>2025-06-19T17:53:42+09:00</updated>
</entry>
<entry>
  <title>KDOC 393: データとコードを同時に変更してはいけない</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orgd6312fa" class="outline-2">
 <h2 id="orgd6312fa"> <a href="#orgd6312fa">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-orgd6312fa">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-16 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org9a44cd3" class="outline-2">
 <h2 id="org9a44cd3"> <a href="#org9a44cd3">概要</a></h2>
 <div class="outline-text-2" id="text-org9a44cd3">
 <p>
社会人1年目のときに、「データ変更とコード変更を同時にやってはいけない」と教わった。データ変更 → デプロイ → コード変更 → デプロイというように片方ずつ変更せよ、というようなことだ。カラム変更、インデックス追加、レコード変更といった操作に長時間費やす可能性がある。その間はデータとコードが一致しなくなる。リクエストが来た場合、動かない可能性がある。最悪の場合、不整合レコードになる。
</p>

 <p>
教わった内容は単なる習慣になり、意識することはあまりなくなっていた。あるとき、誇張した形でそれが現れた。デプロイが3ヶ月ごとにしかできないような <sup> <a id="fnr.1" class="footref" href="#fn.1" role="doc-backlink">1</a></sup>Webのシステムにおいては、常にデプロイ可能なシステムよりシビアに、データとコードについて考える必要があった。
</p>

 <p>
問題なくデプロイするには、2つの方法があるように見える。
</p>

 <ul class="org-ul"> <li>ダウンタイムを受け入れて、バックエンドサーバを止めるか遮断する。ブロックしないと、データ変更中にリクエストが来て不整合になってしまう。フロントエンドを止めるだけでは不十分である。リロードしてない人はアクセスを飛ばせてしまう
 <ul class="org-ul"> <li>❌ ダウンタイムの発生</li>
 <li>❌ 停止させるための方法確立が必要</li>
 <li>❌ 何か起こった場合に原因が切り分けにくい</li>
 <li>⭕ 手順が単純、少ない</li>
</ul></li>
 <li>チェックポイントとなるコミットで、数回繰り返してデプロイする
 <ul class="org-ul"> <li>⭕ ダウンタイムが発生しない</li>
 <li>❌ 数回デプロイする分時間がかかる</li>
 <li>⭕ 何か起こった時点で把握しやすく、原因を切り分けやすい</li>
 <li>❌ 手順が複雑、多い</li>
</ul></li>
</ul> <p>
ダウンタイムの許容ポリシーにもよるが、規模が大きくなるほど段階的に進めてデプロイしたほうがよさそうに見える。
</p>
</div>
</div>
 <div id="outline-container-org1e2a7b7" class="outline-2">
 <h2 id="org1e2a7b7"> <a href="#org1e2a7b7">関連</a></h2>
 <div class="outline-text-2" id="text-org1e2a7b7">
 <p>
なし。
</p>
</div>
</div>
 <div id="footnotes">
 <h2 class="footnotes">Footnotes: </h2>
 <div id="text-footnotes">

 <div class="footdef"> <sup> <a id="fn.1" class="footnum" href="#fnr.1" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"> <p class="footpara">
令和でもそういうことがあるのである…。
</p></div></div>


</div>
</div></div>]]></content>
  <link href="https://kijimad.github.io/roam/20250614T104010--kdoc-393-データとコードを同時に変更してはいけない__draft_wiki.html"/>
  <id>https://kijimad.github.io/roam/20250614T104010--kdoc-393-データとコードを同時に変更してはいけない__draft_wiki.html</id>
  <updated>2025-06-19T17:53:40+09:00</updated>
</entry>
</feed>
