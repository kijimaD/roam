<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><author><name>Kijima Daigo</name></author>
<title>Insomnia</title>
<generator>Emacs webfeeder.el</generator>
<link href="https://kijimad.github.io/roam"/>
<link href="https://kijimad.github.io/roam/atom.xml" rel="self"/>
<id>https://kijimad.github.io/roam/atom.xml</id>
<updated>2025-07-10T23:13:46+09:00</updated>
<entry>
  <title>KDOC 416: Goのエスケープ解析における2つの不変条件を見る</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org918de77" class="outline-2">
 <h2 id="org918de77"> <a href="#org918de77">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org918de77">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul> <ul class="org-ul"> <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-orgd99460d" class="outline-2">
 <h2 id="orgd99460d"> <a href="#orgd99460d">概要</a></h2>
 <div class="outline-text-2" id="text-orgd99460d">
 <p>
Goのドキュメントにヒープエスケープの「不変条件」が書かれていたので、見る。
</p>

 <div class="org-src-container">
 <pre class="src src-git-permalink">https://github.com/golang/go/blob/988a20c8c5e2c9eb49f8749e5ee94ce3c964fe59/src/cmd/compile/internal/escape/escape.go#L20-L29
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-nil">// Escape analysis.
//
// Here we analyze functions to determine which Go variables
// (including implicit allocations such as calls to "new" or "make",
// composite literals, etc.) can be allocated on the stack. The two
// key invariants we have to ensure are: (1) pointers to stack objects
// cannot be stored in the heap, and (2) pointers to a stack object
// cannot outlive that object (e.g., because the declaring function
// returned and destroyed the object's stack frame, or its space is
// reused across loop iterations for logically distinct variables).
</pre>
</div>

 <p>
2つの不変条件。
</p>

 <ul class="org-ul"> <li>(1)スタックオブジェクトへのポインタはヒープに保存できない</li>
 <li>(2)スタックオブジェクトへのポインタはそのオブジェクトより長生きできない
 <ul class="org-ul"> <li>関数を抜けるとオブジェクトのスタックフレームは解放される。もしくは解放されたスペースがループ内で論理的に異なる変数として再利用される</li>
</ul></li>
</ul> <p>
つまり、保存場所とポインタ先の関係、スタックオブジェクトとスタックオブジェクトのライフタイムの関係、に関する原則と解釈した。
</p>

 <ul class="org-ul"> <li>(1) 保存場所とポインタ先の問題(空間)
 <ul class="org-ul"> <li>ルール: スタックオブジェクトへのポインタは、ヒープ領域に保存してはならない。</li>
 <li>理由: ヒープにあるデータは、関数呼び出しを超えて長生きする可能性がある。しかし、それが指し示す先のスタックオブジェクトは、関数を抜けると解放される。結果、ヒープ上には実体のないポインタ（ダングリングポインタ）が残る</li>
 <li>解決策: コンパイラは、ヒープに保存されるポインタが指す先のオブジェクトもヒープにエスケープさせる。これによってヒープからヒープを指す状態にする</li>
</ul></li>
 <li>(2) ポインタ「寿命」の問題(時間)
 <ul class="org-ul"> <li>ルール: スタックオブジェクトへのポインタは、そのオブジェクトのライフタイムを超えて存在してはならない</li>
 <li>理由: 関数を抜けるとスタックオブジェクトは消える。そのポインタが残るとダングリングポインタとなる</li>
 <li>解決策: コンパイラは、ポインタがオブジェクトのライフタイムを超えて使われる可能性を検知したら、そのオブジェクト自体を最初からヒープに確保する</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-orgba1a6e8" class="outline-2">
 <h2 id="orgba1a6e8"> <a href="#orgba1a6e8">関連</a></h2>
 <div class="outline-text-2" id="text-orgba1a6e8">
 <ul class="org-ul"> <li> <a href="20250630T185540--kdoc-411-スタックは積み重ねて取り出して解放する。ではヒープは__draft_permanent.html#ID-20250630T185540">KDOC 411: スタックは積み重ねて取り出して解放する。ではヒープは?</a>。調べるきっかけになった</li>
 <li> <a href="20250701T174437--kdoc-413-ローカル変数がヒープにエスケープされるのを見る__draft_wiki.html#ID-20250701T174437">KDOC 413: ローカル変数がヒープにエスケープされるのを見る</a>。エスケープする具体例</li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250702T194815--kdoc-416-goのエスケープ解析における2つの不変条件を見る__draft_permanent.html"/>
  <id>https://kijimad.github.io/roam/20250702T194815--kdoc-416-goのエスケープ解析における2つの不変条件を見る__draft_permanent.html</id>
  <updated>2025-07-11T08:13:43+09:00</updated>
</entry>
<entry>
  <title>KDOC 415: io.Readerのシグネチャはヒープエスケープを避ける設計になっている</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org8680d16" class="outline-2">
 <h2 id="org8680d16"> <a href="#org8680d16">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org8680d16">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-07-01 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-orgb3a77c0" class="outline-2">
 <h2 id="orgb3a77c0"> <a href="#orgb3a77c0">概要</a></h2>
 <div class="outline-text-2" id="text-orgb3a77c0">
 <p>
io.Reader, io.Writerのインターフェース設計には、ヒープのエスケープも関係しているという。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 1: </span>io.Readerのシグネチャ</label> <pre class="src src-go">type Reader interface {
        Read(p []byte) (n int, err error)
}
</pre>
</div>

 <p>
 <code>[]byte</code> の初期化は呼び出し側の責務になっている。これによって呼び出し側がメモリ管理できるようになる。スタックに留まり、スタックにエスケープするのを抑えられる。Readを何度呼んでも新しいヒープ確保が発生しない。
</p>

 <p>
実際に試してみる。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 2: </span>Read1だけがヒープのエスケープが発生する</label> <pre class="src src-shell"> <span class="org-variable-name">tmpfile</span>=$(mktemp /tmp/tmpgo.XXXXXX.go)

cat > $ <span class="org-variable-name">tmpfile</span> <<EOF <span class="org-sh-heredoc">
package main

func main() {
  // スタックに置いたまま
  buf := make([]byte, 2)
  Read2(buf)
}

// Read側で初期化して返すと、ヒープにエスケープしなければならない
func Read1() []byte {
  return make([]byte, 1)
}

// 呼び出し側で初期化してもらうようにすると、ヒープにエスケープする必要がない
func Read2([]byte) {}

EOF
</span>
go build -gcflags= <span class="org-string">"-m"</span> -o bin $ <span class="org-variable-name">tmpfile</span> 2>&1
rm bin
rm $ <span class="org-variable-name">tmpfile</span>
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-nil"># command-line-arguments
/tmp/tmpgo.Q5eDch.go:12:6: can inline Read2
/tmp/tmpgo.Q5eDch.go:3:6: can inline main
/tmp/tmpgo.Q5eDch.go:8:6: can inline Read1
/tmp/tmpgo.Q5eDch.go:5:8: inlining call to Read2
/tmp/tmpgo.Q5eDch.go:4:14: make([]byte, 2) does not escape
/tmp/tmpgo.Q5eDch.go:9:14: make([]byte, 1) escapes to heap
</pre>
</div>
</div>
</div>
 <div id="outline-container-org8697f0a" class="outline-2">
 <h2 id="org8697f0a"> <a href="#org8697f0a">関連</a></h2>
 <div class="outline-text-2" id="text-org8697f0a">
 <ul class="org-ul"> <li> <a href="https://syntactic-sugar.dev/blog/nested-route/go-escape-analysis">Stack or Heap? Going Deeper with Escape Analysis in Go for Better Performance</a>。調べている中でio.Readerとio.Writerインターフェースの設計について言及していたのを見つけた</li>
 <li> <a href="20250701T193212--kdoc-414-インターフェースがヒープにエスケープされるのを見る__draft_wiki.html#ID-20250701T193212">KDOC 414: インターフェースがヒープにエスケープされるのを見る</a>。調べるきっかけになった</li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250701T213624--kdoc-415-ioreaderのシグネチャはヒープエスケープを避ける設計になっている__draft_permanent.html"/>
  <id>https://kijimad.github.io/roam/20250701T213624--kdoc-415-ioreaderのシグネチャはヒープエスケープを避ける設計になっている__draft_permanent.html</id>
  <updated>2025-07-11T08:13:42+09:00</updated>
</entry>
<entry>
  <title>KDOC 420: constが埋め込まれる様子を見る</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orga1c058e" class="outline-2">
 <h2 id="orga1c058e"> <a href="#orga1c058e">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-orga1c058e">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul> <ul class="org-ul"> <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org8ee3690" class="outline-2">
 <h2 id="org8ee3690"> <a href="#org8ee3690">概要</a></h2>
 <div class="outline-text-2" id="text-org8ee3690">
 <p>
Goでconstとvarの違いを見る。
</p>

 <iframe width="800px" height="200px" src="https://godbolt.org/e#g:!((g:!((g:!((h:codeEditor,i:(filename:'1',fontScale:14,fontUsePx:'0',j:1,lang:go,selection:(endColumn:2,endLineNumber:11,positionColumn:2,positionLineNumber:11,selectionStartColumn:2,selectionStartLineNumber:11,startColumn:2,startLineNumber:11),source:'//+Type+your+code+here,+or+load+an+example.%0A//+Your+function+name+should+start+with+a+capital+letter.%0Apackage+main%0A%0Avar+a+%3D+%22hello%22%0Aconst+b+%3D+%22world%22%0A%0Afunc+main()+%7B%0A++++print(a)%0A++++print(b)%0A%7D'),l:'5',n:'0',o:'Go+source+%231',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0'),(g:!((h:compiler,i:(compiler:gltip,filters:(b:'0',binary:'1',binaryObject:'1',commentOnly:'0',debugCalls:'1',demangle:'0',directives:'0',execute:'1',intel:'0',libraryCode:'0',trim:'1',verboseDemangling:'0'),flagsViewOpen:'1',fontScale:14,fontUsePx:'0',j:1,lang:go,libs:!(),options:'',overrides:!(),selection:(endColumn:1,endLineNumber:1,positionColumn:1,positionLineNumber:1,selectionStartColumn:1,selectionStartLineNumber:1,startColumn:1,startLineNumber:1),source:1),l:'5',n:'0',o:'+x86-64+gc+(tip)+(Editor+%231)',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0')),l:'2',n:'0',o:'',t:'0')),version:4"></iframe>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 1: </span>const。埋め込まれている</label> <pre class="src src-asm"> <span class="org-function-name">LEAQ</span>     <span class="org-keyword">go</span>:string. <span class="org-string">"world"</span>(SB), AX
</pre>
</div>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 2: </span>var。参照している</label> <pre class="src src-asm"> <span class="org-function-name">MOVQ</span>     <span class="org-keyword">main.a</span>(SB), AX
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgab86706" class="outline-2">
 <h2 id="orgab86706"> <a href="#orgab86706">関連</a></h2>
 <div class="outline-text-2" id="text-orgab86706">
 <p>
なし。
</p>
</div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250705T205631--kdoc-420-constが埋め込まれる様子を見る__draft_permanent.html"/>
  <id>https://kijimad.github.io/roam/20250705T205631--kdoc-420-constが埋め込まれる様子を見る__draft_permanent.html</id>
  <updated>2025-07-11T08:13:41+09:00</updated>
</entry>
<entry>
  <title>KDOC 406: TCP/IPでは1つのIPアドレスでネットワークとノードをまとめて表す</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org7c35170" class="outline-2">
 <h2 id="org7c35170"> <a href="#org7c35170">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org7c35170">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-24 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-29 貴島</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org3aafd1d" class="outline-2">
 <h2 id="org3aafd1d"> <a href="#org3aafd1d">概要</a></h2>
 <div class="outline-text-2" id="text-org3aafd1d">
 <p>
TCP/IPの特徴の1つに、1つのIPアドレスでネットワークとノードをまとめて表すという点がある(位置400)。
</p>
</div>
</div>
 <div id="outline-container-org83402d4" class="outline-2">
 <h2 id="org83402d4"> <a href="#org83402d4">関連</a></h2>
 <div class="outline-text-2" id="text-org83402d4">
 <ul class="org-ul"> <li> <a href="20250506T120102--kdoc-377-『一日で読めてわかるtcpipのエッセンス』__book.html#ID-20250506T120102">KDOC 377: 『一日で読めてわかるTCP/IPのエッセンス』</a>から</li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250624T085212--kdoc-406-tcpipでは1つのipアドレスでネットワークとノードをまとめて表す__book.html"/>
  <id>https://kijimad.github.io/roam/20250624T085212--kdoc-406-tcpipでは1つのipアドレスでネットワークとノードをまとめて表す__book.html</id>
  <updated>2025-07-11T08:13:39+09:00</updated>
</entry>
<entry>
  <title>KDOC 405: IPアドレスは論理アドレスで、MACアドレスは物理アドレスである</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org1498ca4" class="outline-2">
 <h2 id="org1498ca4"> <a href="#org1498ca4">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org1498ca4">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-24 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-29 貴島</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org1f2e2ff" class="outline-2">
 <h2 id="org1f2e2ff"> <a href="#org1f2e2ff">概要</a></h2>
 <div class="outline-text-2" id="text-org1f2e2ff">
 <p>
IPアドレスは論理アドレスであり、MACアドレスは物理アドレスである(位置569)。
</p>

 <p>
物理的な実態に紐付けられた概念の上に、抽象された論理的な層が構成される。メモリなど、コンピュータではよくみるパターン。
</p>
</div>
</div>
 <div id="outline-container-orga58c80b" class="outline-2">
 <h2 id="orga58c80b"> <a href="#orga58c80b">関連</a></h2>
 <div class="outline-text-2" id="text-orga58c80b">
 <ul class="org-ul"> <li> <a href="20250506T120102--kdoc-377-『一日で読めてわかるtcpipのエッセンス』__book.html#ID-20250506T120102">KDOC 377: 『一日で読めてわかるTCP/IPのエッセンス』</a>から</li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250624T002111--kdoc-405-ipアドレスは論理アドレスで、macアドレスは物理アドレスである__book.html"/>
  <id>https://kijimad.github.io/roam/20250624T002111--kdoc-405-ipアドレスは論理アドレスで、macアドレスは物理アドレスである__book.html</id>
  <updated>2025-07-11T08:13:38+09:00</updated>
</entry>
<entry>
  <title>KDOC 418: 実行時のオーバーヘッドなしで型のサイズを判定する</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org297cb8c" class="outline-2">
 <h2 id="org297cb8c"> <a href="#org297cb8c">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org297cb8c">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul> <ul class="org-ul"> <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-orgcae00c3" class="outline-2">
 <h2 id="orgcae00c3"> <a href="#orgcae00c3">概要</a></h2>
 <div class="outline-text-2" id="text-orgcae00c3">
 <p>
CPUアーキテクチャによって、型のサイズは異なることがある。実行時のオーバーヘッドなしで判定しているのをGo言語自体のソースコードで見かけた。
</p>

 <p>
constなのでコンパイル時に、ビルド成果物へ値が埋め込まれる。実行時のオーバーヘッドがない。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 1: </span>uint型のビットサイズを判定する</label> <pre class="src src-git-permalink">https://github.com/golang/go/blob/0f8ab2db177baee7b04182f5641693df3b212aa9/src/math/bits/bits.go#L17
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-nil">const uintSize = 32 << (^uint(0) >> 63) // 32 or 64
</pre>
</div>

 <p>
ビット演算に慣れてないので、一瞬でわからない。確認する。
</p>

 <ul class="org-ul"> <li> <code>^</code> でビット反転する</li>
 <li>>> で右ビット演算する</li>
 <li><< で左ビット演算する</li>
</ul> <p>
中心になるアイデアは、すべてのビットに1が立つとビットサイズの違いが現れるということだ。分解して見る。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 2: </span>それぞれ見る(64bitアーキテクチャで実行した)</label> <pre class="src src-go">import "fmt"
func main() {
  fmt.Printf("%b\n", uint(0))
  fmt.Printf("%b\n", ^uint(0))

  // ^uint(0) >> 63 の結果、32bit環境では 0 に、64bit環境では 1 になる
  fmt.Printf("%d\n", 32 << 0) // 移動しないので32のまま
  fmt.Printf("%d\n", 32 << 1) // 1だけ左シフトする。つまり32(2の5乗)から64(2の6乗)になる
}
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-nil">0
1111111111111111111111111111111111111111111111111111111111111111
32
64
</pre>
</div>

 <p>
ビットシフト演算子の両辺どちらが移動量かわからなくなるので確認する。移動元と移動量の位置は同じで、向きでシフトの向きが異なると覚える。
</p>

 <div class="org-src-container">
 <pre class="src src-go">import "fmt"
func main() {
  fmt.Printf("%b\n", 0b0010 << 1)
  fmt.Printf("%b\n", 0b0010 >> 1)
}
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-nil">100
1
</pre>
</div>
</div>
</div>
 <div id="outline-container-org9b08d71" class="outline-2">
 <h2 id="org9b08d71"> <a href="#org9b08d71">関連</a></h2>
 <div class="outline-text-2" id="text-org9b08d71">
 <p>
なし。
</p>
</div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250703T174843--kdoc-418-実行時のオーバーヘッドなしで型のサイズを判定する__draft_wiki.html"/>
  <id>https://kijimad.github.io/roam/20250703T174843--kdoc-418-実行時のオーバーヘッドなしで型のサイズを判定する__draft_wiki.html</id>
  <updated>2025-07-11T08:13:36+09:00</updated>
</entry>
<entry>
  <title>KDOC 401: 起動中のプロセスをstraceで観察する</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org6478560" class="outline-2">
 <h2 id="org6478560"> <a href="#org6478560">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org6478560">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-21 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-26 貴島</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-orgbfc7246" class="outline-2">
 <h2 id="orgbfc7246"> <a href="#orgbfc7246">概要</a></h2>
 <div class="outline-text-2" id="text-orgbfc7246">
 <p>
 <code>strace</code> ですでに起動しているプロセスを見てみると気軽に発行システムコールを眺められる。コマンドをメモしておく。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 1: </span>viteの開発サーバに対してアタッチする。ホットリロードのためにポーリングがされているのがわかる</label> <pre class="src src-shell">sudo strace -p $(pgrep node | head -n1)
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-nil">strace: Process 1550973 attached
epoll_pwait(15, [{events=EPOLLIN, data={u32=22, u64=22}}], 1024, 638, NULL, 8) = 1
read(22, "\35\0\0\0H\253\0\0\6\1\0\0\0\7\0\0\0command\3\4\0\0\0pin"..., 65536) = 33
write(20, "\t\0\0\0I\253\0\0\6\0\0\0\0", 13) = 13
epoll_pwait(15, [], 1024, 0, NULL, 8)   = 0
(略)
</pre>
</div>
</div>
</div>
 <div id="outline-container-org0a1fe06" class="outline-2">
 <h2 id="org0a1fe06"> <a href="#org0a1fe06">関連</a></h2>
 <div class="outline-text-2" id="text-org0a1fe06">
 <p>
なし。
</p>
</div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250621T094036--kdoc-401-起動中のプロセスをstraceで観察する__wiki.html"/>
  <id>https://kijimad.github.io/roam/20250621T094036--kdoc-401-起動中のプロセスをstraceで観察する__wiki.html</id>
  <updated>2025-07-11T08:13:36+09:00</updated>
</entry>
<entry>
  <title>KDOC 413: ローカル変数がヒープにエスケープされるのを見る</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org93753bb" class="outline-2">
 <h2 id="org93753bb"> <a href="#org93753bb">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org93753bb">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-07-01 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-orgc52583e" class="outline-2">
 <h2 id="orgc52583e"> <a href="#orgc52583e">概要</a></h2>
 <div class="outline-text-2" id="text-orgc52583e">
 <p>
関数を抜けた後も使うようなケースでは、消されないようにスタックからヒープに移す必要がある。後も使うケースとしては、ポインタを返すなどがある。ローカル変数として宣言されていても、ヒープに移動させられる。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 1: </span>ローカル変数がヒープにエスケープされる様子を見る</label> <pre class="src src-shell"> <span class="org-variable-name">tmpfile</span>=$(mktemp /tmp/tmpgo.XXXXXX.go)

cat > $ <span class="org-variable-name">tmpfile</span> <<EOF <span class="org-sh-heredoc">
package main

func main() {}

func f() *int {
        x := 42
        return &x // ヒープへ
}

EOF
</span>
go build -gcflags= <span class="org-string">"-m"</span> -o bin $ <span class="org-variable-name">tmpfile</span> 2>&1
rm bin
rm $ <span class="org-variable-name">tmpfile</span>
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-nil"># command-line-arguments
/tmp/tmpgo.G6OymE.go:3:6: can inline main
/tmp/tmpgo.G6OymE.go:5:6: can inline f
/tmp/tmpgo.G6OymE.go:6:9: moved to heap: x
</pre>
</div>
</div>
</div>
 <div id="outline-container-org6c82ee2" class="outline-2">
 <h2 id="org6c82ee2"> <a href="#org6c82ee2">関連</a></h2>
 <div class="outline-text-2" id="text-org6c82ee2">
 <ul class="org-ul"> <li> <a href="20250630T185540--kdoc-411-スタックは積み重ねて取り出して解放する。ではヒープは__draft_permanent.html#ID-20250630T185540">KDOC 411: スタックは積み重ねて取り出して解放する。ではヒープは?</a>。ヒープを調べるきっかけになった</li>
</ul></div>
</div>
 <div id="outline-container-org2de5cc0" class="outline-2">
 <h2 id="org2de5cc0"> <a href="#org2de5cc0">Backlinks</a></h2>
 <div class="outline-text-2" id="text-org2de5cc0">
 <ul class="org-ul"> <li> <a href="./20250702T194815--kdoc-416-goのエスケープ解析における2つの不変条件を見る__draft_permanent.html">KDOC 416: Goのエスケープ解析における2つの不変条件を見る</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250701T174437--kdoc-413-ローカル変数がヒープにエスケープされるのを見る__draft_wiki.html"/>
  <id>https://kijimad.github.io/roam/20250701T174437--kdoc-413-ローカル変数がヒープにエスケープされるのを見る__draft_wiki.html</id>
  <updated>2025-07-11T08:13:31+09:00</updated>
</entry>
<entry>
  <title>KDOC 410: 物事に対する情熱は行動の後に生まれる</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org80e39a9" class="outline-2">
 <h2 id="org80e39a9"> <a href="#org80e39a9">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org80e39a9">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-29 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-orge002e60" class="outline-2">
 <h2 id="orge002e60"> <a href="#orge002e60">概要</a></h2>
 <div class="outline-text-2" id="text-orge002e60">
 <p>
大人や社会は「好きなことを仕事にしろ」と言った。しかし、「好きなこと」をどうやって見つけるのかには口をつぐんだ。本当は知らないと自白する代わりに、「色んなことをしてそれを探せ」と言った。
</p>

 <p>
受け取ったメッセージを思い返してみると、こういうことだ。
</p>

 <ul class="org-ul"> <li>自分が好きなものは広い世界のどこかに存在している</li>
 <li>いろんな体験をすれば発見できる。だからバイトしろ。海外に行け。勉強しろ。スポーツしろ</li>
 <li>ないならもっと探せ。でも時間制限があるから、22歳までに見つけろ</li>
 <li>好きなものかはやってみれば直感や感情で判定できる</li>
 <li>エゴや憧れも好きのうちだ。実際に体験してなくてもそれは好きに分類できる</li>
 <li>本当に好きならたくさん努力できるだろう。努力できないなら好きとはいえない</li>
</ul> <p>
「砂漠のどこかにダイヤが転がっているからそれを探せ」と言っているように聞こえた。このモデルの問題点は、ダイヤはどこにも転がっていないという点だ。自分探しに成功した人間が存在しないように、好きなことは未知の場所を探して見つけられるものではない。
</p>

 <hr></hr> <hr></hr> <p>
「物事に対する情熱はやり続けた後に生まれる」という考え方もある。
</p>

 <p>
行動が先にあって好きになっていくということだ。ダイヤを探すのではなく、手に持っている石を磨き続ければダイヤになる。現時点で情熱がないとしたらそれはまだ発見できていないということではなく、何も続けていないということだ。何でもいいからやり始めればいい。重要なのは  <b>「選ぶこと」</b> ではなく  <b>「磨き始めること」</b> だ。
</p>

 <p>
ありもしないものを探せというアドバイスより、何でもいいから続けてみろ、というアドバイスのほうが建設的に見える。
</p>
</div>
</div>
 <div id="outline-container-org844ffd5" class="outline-2">
 <h2 id="org844ffd5"> <a href="#org844ffd5">関連</a></h2>
 <div class="outline-text-2" id="text-org844ffd5">
 <ul class="org-ul"> <li> <a href="20221027T235104--kdoc-3-『ない仕事の作り方』__book.html#ID-20221027T235104">KDOC 3: 『ない仕事の作り方』</a>では、好きだから集めるのではなく、大量に集めるから好きになるのだ、と主張する</li>
 <li> <a href="20250611T180912--kdoc-385-『続ける思考』__book.html#ID-20250611T180912">KDOC 385: 『続ける思考』</a>では、意味など考えず時間をかけた結果として好きになる、と主張する</li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250629T110721--kdoc-410-物事に対する情熱は行動の後に生まれる__draft_essay.html"/>
  <id>https://kijimad.github.io/roam/20250629T110721--kdoc-410-物事に対する情熱は行動の後に生まれる__draft_essay.html</id>
  <updated>2025-07-11T08:13:31+09:00</updated>
</entry>
<entry>
  <title>KDOC 409: 挫折し続けた運動を習慣化できたのは毎日やったから</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org6d98baa" class="outline-2">
 <h2 id="org6d98baa"> <a href="#org6d98baa">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org6d98baa">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-26 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-29 貴島</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-orgf86591e" class="outline-2">
 <h2 id="orgf86591e"> <a href="#orgf86591e">概要</a></h2>
 <div class="outline-text-2" id="text-orgf86591e">
 <p>
運動を1年間継続してやっている。体の変化を実感し、自信になっている。肉体だけでない。自分がやると決めたことを続けられる人間なのだということを誇らしく感じる。
</p>

 <p>
 <a href="20240810T073930--kdoc-215-運動習慣を身につけるヒントを考える__essay.html#ID-20240810T073930">KDOC 215: 運動習慣を身につけるヒントを考える</a>では、継続1ヶ月時点で、なぜ続けられているのかを考えている。今は最大の要因について違う意見を持っている。もっとも重要な要因は、「毎日やっていたから」に見える。本で紹介していたトレーニングのスケジュールが曜日ごとに違う部位のトレーニングを1種類やる、というものだったのでそのとおりに毎日やっていた。
</p>

 <p>
意見を変えた理由は、ほかの習慣における再現性である。運動は習慣化できたが、ほかのことへの応用はうまくいっていなかった。
</p>

 <p>
最近、 <a href="20250624T222943--kdoc-408-続けるコツは週7日やることである__essay.html#ID-20250624T222943">KDOC 408: 続けるコツは週7日やることである</a>がよさそうに見えたので、毎日やるのを実践している。毎日5分本を読む、5分英語の動画を見る、といった習慣をはじめてしばらく期間が経過したのだが、じつに自然に継続している。
</p>

 <p>
重要なのは、毎日実行すること、毎日実行できるようにハードルを下げる、ということだったように見える。
</p>
</div>
</div>
 <div id="outline-container-org4955df4" class="outline-2">
 <h2 id="org4955df4"> <a href="#org4955df4">関連</a></h2>
 <div class="outline-text-2" id="text-org4955df4">
 <ul class="org-ul"> <li> <a href="20240708T214636--kdoc-197-『プリズナー・トレーニング』__book.html#ID-20240708T214636">KDOC 197: 『プリズナー・トレーニング』</a>。運動を習慣化できた本</li>
 <li> <a href="20250611T180912--kdoc-385-『続ける思考』__book.html#ID-20250611T180912">KDOC 385: 『続ける思考』</a>。習慣化するために誰でも再現可能な方法を解説する本</li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250626T085406--kdoc-409-挫折し続けた運動を習慣化できたのは毎日やったから__essay.html"/>
  <id>https://kijimad.github.io/roam/20250626T085406--kdoc-409-挫折し続けた運動を習慣化できたのは毎日やったから__essay.html</id>
  <updated>2025-07-11T08:13:30+09:00</updated>
</entry>
<entry>
  <title>KDOC 412: ヒープ管理方法の変遷を見る</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org4fb8edf" class="outline-2">
 <h2 id="org4fb8edf"> <a href="#org4fb8edf">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org4fb8edf">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-30 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org41b63c9" class="outline-2">
 <h2 id="org41b63c9"> <a href="#org41b63c9">概要</a></h2>
 <div class="outline-text-2" id="text-org41b63c9">
 <p>
ヒープ管理方法の変遷を見る。柔軟性、安全性、パフォーマンスのトレードオフの歴史である。
</p>

 <ol class="org-ol"> <li>従来はプログラマーが  <code>malloc</code> や  <code>free</code> でヒープを確保・解放していた
 <ul class="org-ul"> <li>課題: メモリ解放忘れや解放済みのポインタへのアクセス。安全性に問題があった</li>
</ul></li>
 <li>処理系にガベージコレクションを組み込み、メモリ管理を自動で行うようにした
 <ul class="org-ul"> <li>課題: パフォーマンスへの影響、一時停止、管理の複雑さ</li>
</ul></li>
 <li>所有権に基づいてメモリを管理する。コンパイル時にメモリ管理の正しさを検証し、実行時のオーバーヘッドなく安全性を得る
 <ul class="org-ul"> <li>課題: リストなど特定のケースで実装が難しいことがあるという</li>
</ul></li>
</ol></div>
</div>
 <div id="outline-container-orgc6a6ba8" class="outline-2">
 <h2 id="orgc6a6ba8"> <a href="#orgc6a6ba8">関連</a></h2>
 <div class="outline-text-2" id="text-orgc6a6ba8">
 <ul class="org-ul"> <li> <a href="https://ja.wikipedia.org/wiki/%E3%82%AC%E3%83%99%E3%83%BC%E3%82%B8%E3%82%B3%E3%83%AC%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3">ガベージコレクション - Wikipedia</a></li>
 <li> <a href="20250630T185540--kdoc-411-スタックは積み重ねて取り出して解放する。ではヒープは__draft_permanent.html#ID-20250630T185540">KDOC 411: スタックは積み重ねて解放する。ではヒープは?</a>。きっかけになった疑問</li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250630T192238--kdoc-412-ヒープ管理方法の変遷を見る__draft_permanent.html"/>
  <id>https://kijimad.github.io/roam/20250630T192238--kdoc-412-ヒープ管理方法の変遷を見る__draft_permanent.html</id>
  <updated>2025-07-11T08:13:12+09:00</updated>
</entry>
<entry>
  <title>KDOC 403: 六義園を観察する</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org98aa757" class="outline-2">
 <h2 id="org98aa757"> <a href="#org98aa757">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org98aa757">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-21 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-29 貴島</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-orgc2ae813" class="outline-2">
 <h2 id="orgc2ae813"> <a href="#orgc2ae813">概要</a></h2>
 <div class="outline-text-2" id="text-orgc2ae813">
 <p>
六義園は、東京都文京区にある庭園である。博物館かどうかは微妙だが、来歴や解説の展示も割とあるので博物館観察シリーズに入れる。
</p>

 <iframe src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3905.019232201816!2d139.74315321198782!3d35.733100472456165!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x60188dbdf73e4461%3A0x7648774313f66fe5!2sRikugien%20Gardens!5e1!3m2!1sen!2sjp!4v1750636306703!5m2!1sen!2sjp" width="600" height="450" style="border:0;" allowfullscreen="" loading="lazy" referrerpolicy="no-referrer-when-downgrade"></iframe>
</div>
</div>
 <div id="outline-container-org00959a2" class="outline-2">
 <h2 id="org00959a2"> <a href="#org00959a2">メモ</a></h2>
 <div class="outline-text-2" id="text-org00959a2">
 <ul class="org-ul"> <li>公園ではなく、庭園である。代々木公園とは違う。広い庭園だが順路以外は入れない。座れる場所もそう多くない。ゆっくりするというより、庭園の設計どおりに観覧客が視点を移動させ風景を味わうものであるという意図を感じた。この点、博物館に近い
 <ul class="org-ul"> <li>人が留まらないので、静かである</li>
</ul></li>
 <li>太神楽(だいかぐら)という、大道芸的な伝統芸能があるのを知った。あじさいの美しい庭園の入り口部分で、和装の芸人2人が観覧席を前に技芸を披露していた。芸人なのでおひねりを要求するのだが、やはり場所によるプレミア感なのか、額面の入りがよかったように見えた。小銭を入れている人はいなかった(自分も札を出した)。これが仮に錦糸町駅前のパフォーマンスだったとすると、同じ額になってはいなかったように見える</li>
 <li>外国人の比率が多かったように見える。客層を反映しているのか、園内は英語が付記されたものが多かった。太神楽の芸人もブロークンな英語を交えてトークしていた</li>
 <li>園内のいたるところに解説板がある。場所の名前についての解説、意匠の解説などがある</li>
</ul></div>
</div>
 <div id="outline-container-org658b995" class="outline-2">
 <h2 id="org658b995"> <a href="#org658b995">関連</a></h2>
 <div class="outline-text-2" id="text-org658b995">
 <p>
なし。
</p>
</div>
</div>
 <div id="outline-container-orge5ebf8e" class="outline-2">
 <h2 id="orge5ebf8e"> <a href="#orge5ebf8e">Backlinks</a></h2>
 <div class="outline-text-2" id="text-orge5ebf8e">
 <ul class="org-ul"> <li> <a href="./20240908T180537--kdoc-238-他人の博物館を観察して参考にする__project.html">KDOC 238: 他人の博物館を観察して参考にする</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250621T205407--kdoc-403-六義園を観察する__essay.html"/>
  <id>https://kijimad.github.io/roam/20250621T205407--kdoc-403-六義園を観察する__essay.html</id>
  <updated>2025-07-11T08:13:06+09:00</updated>
</entry>
<entry>
  <title>KDOC 404: ネットワークは階層化によってネットワークやアプリケーションの自由度を高くしている</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orgb58df67" class="outline-2">
 <h2 id="orgb58df67"> <a href="#orgb58df67">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-orgb58df67">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-22 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-29 貴島</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org8772a8b" class="outline-2">
 <h2 id="org8772a8b"> <a href="#org8772a8b">概要</a></h2>
 <div class="outline-text-2" id="text-org8772a8b">
 <p>
ネットワークシステムは何段階にも機能を分け、組み合わせた形で構築されている。実際のネットワーク方式(Wi-Fi、有線…)、伝送の制御、アプリケーション…。このようにすることでネットワーク方式やアプリケーションの自由度が高くなる(位置206)
</p>
</div>
</div>
 <div id="outline-container-org3219df3" class="outline-2">
 <h2 id="org3219df3"> <a href="#org3219df3">関連</a></h2>
 <div class="outline-text-2" id="text-org3219df3">
 <ul class="org-ul"> <li> <a href="20250506T120102--kdoc-377-『一日で読めてわかるtcpipのエッセンス』__book.html#ID-20250506T120102">KDOC 377: 『一日で読めてわかるTCP/IPのエッセンス』</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250622T091856--kdoc-404-ネットワークは階層化によってネットワークやアプリケーションの自由度を高くしている__book.html"/>
  <id>https://kijimad.github.io/roam/20250622T091856--kdoc-404-ネットワークは階層化によってネットワークやアプリケーションの自由度を高くしている__book.html</id>
  <updated>2025-07-11T08:13:01+09:00</updated>
</entry>
<entry>
  <title>KDOC 408: 続けるコツは週7日やることである</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orgf048ef8" class="outline-2">
 <h2 id="orgf048ef8"> <a href="#orgf048ef8">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-orgf048ef8">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-24 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-29 貴島</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org9cc2adb" class="outline-2">
 <h2 id="org9cc2adb"> <a href="#org9cc2adb">概要</a></h2>
 <div class="outline-text-2" id="text-org9cc2adb">
 <p>
ラクに続けるコツは、週7日やることである(位置372)。
</p>

 <p>
今日はいいから明日やろう、となる余地があるとすぐにやらなくなるのを何度も経験してきた。毎朝5分、例外なく毎日やることで意思の力に関係なく続けやすい。そして、取り組み始めれば意外とノッてきて長くできるものである。
</p>
</div>
</div>
 <div id="outline-container-org5e2b0df" class="outline-2">
 <h2 id="org5e2b0df"> <a href="#org5e2b0df">関連</a></h2>
 <div class="outline-text-2" id="text-org5e2b0df">
 <ul class="org-ul"> <li> <a href="20250611T180912--kdoc-385-『続ける思考』__book.html#ID-20250611T180912">KDOC 385: 『続ける思考』</a>から</li>
</ul></div>
</div>
 <div id="outline-container-orge0fe536" class="outline-2">
 <h2 id="orge0fe536"> <a href="#orge0fe536">Backlinks</a></h2>
 <div class="outline-text-2" id="text-orge0fe536">
 <ul class="org-ul"> <li> <a href="./20250626T085406--kdoc-409-挫折し続けた運動を習慣化できたのは毎日やったから__essay.html">KDOC 409: 挫折し続けた運動を習慣化できたのは毎日やったから</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250624T222943--kdoc-408-続けるコツは週7日やることである__essay.html"/>
  <id>https://kijimad.github.io/roam/20250624T222943--kdoc-408-続けるコツは週7日やることである__essay.html</id>
  <updated>2025-07-11T08:12:54+09:00</updated>
</entry>
<entry>
  <title>KDOC 402: Goの識別子の境界を探る</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orgc67819a" class="outline-2">
 <h2 id="orgc67819a"> <a href="#orgc67819a">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-orgc67819a">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-21 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-29 貴島</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org70f3e05" class="outline-2">
 <h2 id="org70f3e05"> <a href="#org70f3e05">概要</a></h2>
 <div class="outline-text-2" id="text-org70f3e05">
 <p>
多くの現代的なプログラミング言語では識別子にUnicodeの文字(コードポイント)を使えるということを知っていたが、ちゃんとGoの仕様を調べたことはなかった。確認する。
</p>

 <p>
最初に、何も調べずに実行してみて確かめてみる。違和感がすごいが、英語ネイティブが見ているのはこういう景色なのだろう。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 1: </span>すべて正しいシンタックス。ビルド、実行できる</label> <pre class="src src-go">import "fmt"
func main() {
        // 変数名に日本語が使える
        あ := "a"
        fmt.Println(あ)

        // 関数名に日本語が使える
        漢字()

        // 型名に日本語が使える
        type 地名 struct {}
        var 江戸川橋 地名
        fmt.Println(江戸川橋)
}

func 漢字() {}
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-nil">a
{}
</pre>
</div>

 <p>
調べてみる。
</p>

 <p>
 <a href="https://go.dev/ref/spec#letter">言語仕様書</a>によると、識別子( <code>identifier</code>)の定義はこうだ。出てきた  <code>letter</code>,  <code>unicode_letter</code> も辿って調べた。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 2: </span>identifierの定義</label> <pre class="src src-code">identifier = letter { letter | unicode_digit } .
letter     = unicode_letter | "_" .
unicode_letter = /* a Unicode code point categorized as "Letter" */ .
</pre>
</div>

 <p>
ここからわかること、考察。
</p>

 <ul class="org-ul"> <li>Unicodeにはカテゴリという概念がある。letter(文字), mark(結合記号), number(数字), punctuation(句読点), …
 <ul class="org-ul"> <li>結合記号はアクセント記号のように、ほかの文字と組み合わせて使う記号のことである</li>
 <li>たとえば漢字はletterのサブカテゴリotherに属する</li>
</ul></li>
 <li>識別子の先頭にletterカテゴリの文字があれば、あとはなんでもいい。逆にいえば、結合記号、数字、句読点、…から開始できない</li>
 <li>アンダースコア  <code>_</code> は句読点カテゴリの文字である。例外的にletterとして許容されている
 <ul class="org-ul"> <li>自然に使っていて、全く意識してなかった</li>
</ul></li>
</ul> <p>
以上から、無効なパターンを試した <sup> <a id="fnr.1" class="footref" href="#fn.1" role="doc-backlink">1</a></sup>。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 3: </span>結合記号、数字、句読点、…から開始できない</label> <pre class="src src-shell"> <span class="org-variable-name">tmpfile</span>=$(mktemp /tmp/tmpgo.XXXXXX.go)

cat > $ <span class="org-variable-name">tmpfile</span> <<EOF <span class="org-sh-heredoc">
package main

func main() {
  // 先頭のアクセント記号は不可
  ◌̀ := "あ"
  print(◌̀)

  // 先頭の数字は不可
  ９ := "あ"
  print(９)

  // 先頭の漢数字はletter扱いなので問題ない
  九 := "あ"
  print(九)

  // 先頭の句読点は不可
  、 := "あ"
  print(、)

  // 先頭のシンボルは不可
  👍 := "あ"
  print(👍)
}
EOF
</span>
go run $ <span class="org-variable-name">tmpfile</span> 2>&1
rm $ <span class="org-variable-name">tmpfile</span>
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-nil">/tmp/tmpgo.FO1KQz.go:5:3: invalid character U+25CC '◌' in identifier
/tmp/tmpgo.FO1KQz.go:5:6: invalid character U+0300 '̀' in identifier
/tmp/tmpgo.FO1KQz.go:6:9: invalid character U+25CC '◌' in identifier
/tmp/tmpgo.FO1KQz.go:6:12: invalid character U+0300 '̀' in identifier
/tmp/tmpgo.FO1KQz.go:9:3: identifier cannot begin with digit U+FF19 '９'
/tmp/tmpgo.FO1KQz.go:10:9: identifier cannot begin with digit U+FF19 '９'
/tmp/tmpgo.FO1KQz.go:17:3: invalid character U+3001 '、' in identifier
/tmp/tmpgo.FO1KQz.go:18:9: invalid character U+3001 '、' in identifier
/tmp/tmpgo.FO1KQz.go:21:3: invalid character U+1F44D '👍' in identifier
/tmp/tmpgo.FO1KQz.go:22:9: invalid character U+1F44D '👍' in identifier
/tmp/tmpgo.FO1KQz.go:22:9: too many errors
</pre>
</div>

 <p>
調べる前の認識は、正確ではなかったのがわかった。
</p>
</div>
</div>
 <div id="outline-container-orge874e40" class="outline-2">
 <h2 id="orge874e40"> <a href="#orge874e40">関連</a></h2>
 <div class="outline-text-2" id="text-orge874e40">
 <ul class="org-ul"> <li> <a href="https://en.wikipedia.org/wiki/Unicode_character_property">Unicode character property - Wikipedia</a>。カテゴリ表を参考にした</li>
 <li> <a href="https://go.dev/ref/spec#letter">The Go Programming Language Specification</a>。Goの言語仕様書</li>
</ul></div>
</div>
 <div id="footnotes">
 <h2 class="footnotes">Footnotes: </h2>
 <div id="text-footnotes">

 <div class="footdef"> <sup> <a id="fn.1" class="footnum" href="#fnr.1" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"> <p class="footpara">
org-babelで標準エラーを出すためシェルスクリプトから実行している。
</p></div></div>


</div>
</div></div>]]></content>
  <link href="https://kijimad.github.io/roam/20250621T183743--kdoc-402-goの識別子の境界を探る__wiki.html"/>
  <id>https://kijimad.github.io/roam/20250621T183743--kdoc-402-goの識別子の境界を探る__wiki.html</id>
  <updated>2025-07-11T08:12:53+09:00</updated>
</entry>
<entry>
  <title>KDOC 411: スタックは積み重ねて取り出して解放する。ではヒープは?</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-orgb762ea0" class="outline-2">
 <h2 id="orgb762ea0"> <a href="#orgb762ea0">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-orgb762ea0">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-30 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-orge26ffd6" class="outline-2">
 <h2 id="orge26ffd6"> <a href="#orge26ffd6">概要</a></h2>
 <div class="outline-text-2" id="text-orge26ffd6">
 <p>
スタックとヒープについて聞かれた。
</p>

 <p>
スタック領域は関数呼び出しとともに積み重ねてローカル変数を保存していき、抜けるとともに解放できる明確なイメージがあった。しかし、ヒープはどう使われているかを答えられなくて凹んだ。
</p>

 <hr></hr> <hr></hr> <p>
逆になぜ、スタックの使用方法は明確なイメージがあったのだろうか。それはよくコードとアセンブリを比較していたからだ。スタックベースの操作が頻繁に登場し、関数呼び出し時にメモリを確保し、抜けるときに破棄する流れをよく見た。
</p>

 <p>
多くのCPUの命令セットアーキテクチャは  <code>push</code> /  <code>pop</code> /  <code>ret</code> などのスタック操作をサポートしている。これらの命令は「一番上に積む」「一番上から取る」という制限された動きしかできず柔軟性はない。だからコンパイル時にサイズを決めて機械的に変換でき、どの領域が使われているかは明確である。スタックは、CPUレベルで使っていると言える。
</p>

 <p>
いっぽう、アセンブリでヒープ確保は、  <code>malloc</code> のようなライブラリ関数の呼び出し( <code>call</code>)として現れる。そのさきで何が行われているかは、OSや言語処理系レベルの話だ。スタックより柔軟に使えるが複雑なために、上のレイヤーに任せているといえる。
</p>
</div>
</div>
 <div id="outline-container-org5cd5fe7" class="outline-2">
 <h2 id="org5cd5fe7"> <a href="#org5cd5fe7">関連</a></h2>
 <div class="outline-text-2" id="text-org5cd5fe7">
 <ul class="org-ul"> <li> <a href="https://ja.wikipedia.org/wiki/%E3%83%92%E3%83%BC%E3%83%97%E9%A0%98%E5%9F%9F">ヒープ領域 - Wikipedia</a></li>
 <li> <a href="20240427T120833--kdoc-141-cのポインタ操作をアセンブリで見る__wiki.html#ID-20240427T120833">KDOC 141: Cのポインタ操作をアセンブリで見る</a>。アセンブラを見ていた例</li>
</ul></div>
</div>
 <div id="outline-container-orgb961c0b" class="outline-2">
 <h2 id="orgb961c0b"> <a href="#orgb961c0b">Backlinks</a></h2>
 <div class="outline-text-2" id="text-orgb961c0b">
 <ul class="org-ul"> <li> <a href="./20250630T192238--kdoc-412-ヒープ管理方法の変遷を見る__draft_permanent.html">KDOC 412: ヒープ管理方法の変遷を見る</a></li>
 <li> <a href="./20250701T174437--kdoc-413-ローカル変数がヒープにエスケープされるのを見る__draft_wiki.html">KDOC 413: ローカル変数がヒープにエスケープされるのを見る</a></li>
 <li> <a href="./20250701T193212--kdoc-414-インターフェースがヒープにエスケープされるのを見る__draft_wiki.html">KDOC 414: インターフェースがヒープにエスケープされるのを見る</a></li>
 <li> <a href="./20250702T194815--kdoc-416-goのエスケープ解析における2つの不変条件を見る__draft_permanent.html">KDOC 416: Goのエスケープ解析における2つの不変条件を見る</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250630T185540--kdoc-411-スタックは積み重ねて取り出して解放する。ではヒープは__draft_permanent.html"/>
  <id>https://kijimad.github.io/roam/20250630T185540--kdoc-411-スタックは積み重ねて取り出して解放する。ではヒープは__draft_permanent.html</id>
  <updated>2025-07-11T08:12:45+09:00</updated>
</entry>
<entry>
  <title>KDOC 407: 1W5Hでユーザーストーリーを書く</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org37ac394" class="outline-2">
 <h2 id="org37ac394"> <a href="#org37ac394">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org37ac394">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-24 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-06-29 貴島</li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org6bad0f4" class="outline-2">
 <h2 id="org6bad0f4"> <a href="#org6bad0f4">概要</a></h2>
 <div class="outline-text-2" id="text-org6bad0f4">
 <p>
 <a href="https://speakerdeck.com/soudai/grow-one-day-each-day?slide=30">**強い**エンジニアのなり方 - フィードバックサイクルを勝ち取る / grow one day each day</a>で、問題設定の文脈において1W5H形式でユーザーストーリーに記載することが書かれていた。
</p>

 <p>
これらは当たり前に見える。しかしだからこそ、ズレが生まれる。それを明確にすることが大事なのだと考えた。
</p>

 <p>
メモ。
</p>

 <ul class="org-ul"> <li>Why
 <ul class="org-ul"> <li>なぜ必要なのか</li>
</ul></li>
 <li>What
 <ul class="org-ul"> <li>実現したいことは何か</li>
 <li>成果物は何か</li>
 <li>完了の定義</li>
</ul></li>
 <li>When
 <ul class="org-ul"> <li>タスクの期限</li>
</ul></li>
 <li>Where
 <ul class="org-ul"> <li>ビジョンやゴールはどこか</li>
 <li>どこで実行されるか</li>
</ul></li>
 <li>Who
 <ul class="org-ul"> <li>ステークホルダーは誰か</li>
 <li>利用者は誰か</li>
 <li>依頼者は誰か</li>
 <li>レビューは誰にお願いするか</li>
</ul></li>
 <li>How
 <ul class="org-ul"> <li>どのように実現するか</li>
 <li>実装のための制約や方針も含む</li>
</ul></li>
</ul> <p>
ユーザーストーリーの見直し。
</p>

 <ul class="org-ul"> <li>もっとも実現したいことにフォーカスする</li>
 <li>複数の方法に置き換え</li>
 <li>実現する場所、実装する場所を置き換える</li>
 <li>届けたいペルソナを絞る</li>
 <li>制約を減らす方法を検討する</li>
 <li>今やるべきか検討する</li>
</ul></div>
</div>
 <div id="outline-container-org8f77c47" class="outline-2">
 <h2 id="org8f77c47"> <a href="#org8f77c47">関連</a></h2>
 <div class="outline-text-2" id="text-org8f77c47">
 <p>
なし。
</p>
</div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250624T214442--kdoc-407-1w5hでユーザーストーリーを書く__essay.html"/>
  <id>https://kijimad.github.io/roam/20250624T214442--kdoc-407-1w5hでユーザーストーリーを書く__essay.html</id>
  <updated>2025-07-11T08:12:45+09:00</updated>
</entry>
<entry>
  <title>KDOC 419: トキワ荘マンガミュージアムを観察する</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org85a878c" class="outline-2">
 <h2 id="org85a878c"> <a href="#org85a878c">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org85a878c">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul> <ul class="org-ul"> <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org9c9a8f9" class="outline-2">
 <h2 id="org9c9a8f9"> <a href="#org9c9a8f9">概要</a></h2>
 <div class="outline-text-2" id="text-org9c9a8f9">
 <p>
 <a href="https://ja.wikipedia.org/wiki/%E3%83%88%E3%82%AD%E3%83%AF%E8%8D%98%E3%83%9E%E3%83%B3%E3%82%AC%E3%83%9F%E3%83%A5%E3%83%BC%E3%82%B8%E3%82%A2%E3%83%A0">トキワ荘マンガミュージアム</a>は、東京都豊島区にある漫画に関する博物館である。
</p>

 <iframe src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d4142.42527168324!2d139.68947191122666!3d35.72335060977725!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x6018f35913eafb9f%3A0x932250aec9d5b534!2sTokiwaso%20Manga%20Museum!5e1!3m2!1sen!2sjp!4v1751777420035!5m2!1sen!2sjp" width="600" height="450" style="border:0;" allowfullscreen="" loading="lazy" referrerpolicy="no-referrer-when-downgrade"></iframe>

 <ul class="org-ul"> <li>マンガミュージアムといっても、特定の時期(1950~60年代)・場所(椎名町)のマンガ家を解説した博物館で、スコープが限られている</li>
 <li>実は入居時期がかぶってた時期はそんなに長くない</li>
 <li>靴を脱いで部屋に入っていく体験が良い</li>
 <li>元の建物は取り壊し後しばらくは忘れ去られていた(Wikipediaから)が、近年の活動によって形となった。自然発生的にできたものではない。意図をもって、掘り起こしたものである。地域振興の意図と絡めて、復活したように見える</li>
</ul></div>
</div>
 <div id="outline-container-orgbd7941c" class="outline-2">
 <h2 id="orgbd7941c"> <a href="#orgbd7941c">関連</a></h2>
 <div class="outline-text-2" id="text-orgbd7941c">
 <p>
なし。
</p>
</div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250706T135040--kdoc-419-トキワ荘マンガミュージアムを観察する__draft_essay.html"/>
  <id>https://kijimad.github.io/roam/20250706T135040--kdoc-419-トキワ荘マンガミュージアムを観察する__draft_essay.html</id>
  <updated>2025-07-11T08:12:44+09:00</updated>
</entry>
<entry>
  <title>KDOC 417: WASMでリクエスト実装を変えているのを見る</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org315f9ec" class="outline-2">
 <h2 id="org315f9ec"> <a href="#org315f9ec">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org315f9ec">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul> <ul class="org-ul"> <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org824cd5e" class="outline-2">
 <h2 id="org824cd5e"> <a href="#org824cd5e">概要</a></h2>
 <div class="outline-text-2" id="text-org824cd5e">
 <p>
WASMはブラウザのサンドボックス化された環境で実行される。外部機能にアクセスするには、JavaScriptのAPIを経由する。
</p>

 <div class="org-src-container">
 <pre class="src src-git-permalink">https://github.com/golang/go/blob/988a20c8c5e2c9eb49f8749e5ee94ce3c964fe59/src/net/http/roundtrip_js.go#L129
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-nil">fetchPromise := js.Global().Call("fetch", req.URL.String(), opt)
</pre>
</div>
</div>
</div>
 <div id="outline-container-org2453bae" class="outline-2">
 <h2 id="org2453bae"> <a href="#org2453bae">関連</a></h2>
 <div class="outline-text-2" id="text-org2453bae">
 <p>
なし。
</p>
</div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250702T234055--kdoc-417-wasmでリクエスト実装を変えているのを見る__draft_permanent.html"/>
  <id>https://kijimad.github.io/roam/20250702T234055--kdoc-417-wasmでリクエスト実装を変えているのを見る__draft_permanent.html</id>
  <updated>2025-07-11T08:12:44+09:00</updated>
</entry>
<entry>
  <title>KDOC 414: インターフェースがヒープにエスケープされるのを見る</title>
  <author><name>kijimaD</name></author>
  <content type="html"><![CDATA[<div id="content" class="content">

 <div id="outline-container-org1c9f193" class="outline-2">
 <h2 id="org1c9f193"> <a href="#org1c9f193">この文書のステータス</a></h2>
 <div class="outline-text-2" id="text-org1c9f193">
 <ul class="org-ul"> <li>作成
 <ul class="org-ul"> <li class="on"> <input type="checkbox" checked="checked"></input> 2025-07-01 貴島</li>
</ul></li>
 <li>レビュー
 <ul class="org-ul"> <li class="off"> <input type="checkbox"></input> <署名></li>
</ul></li>
</ul></div>
</div>
 <div id="outline-container-org4c19d80" class="outline-2">
 <h2 id="org4c19d80"> <a href="#org4c19d80">概要</a></h2>
 <div class="outline-text-2" id="text-org4c19d80">
 <p>
関数を抜けた後も使うようなケースでは、消されないようにスタックからヒープに移す必要がある。インターフェースを返すと、実体を関数から抜けた後も保持しておく必要があるため、ヒープにエスケープされる。
</p>

 <div class="org-src-container">
 <label class="org-src-name"> <span class="listing-number">Listing 1: </span>最初スタックにあったローカル変数がヒープにエスケープされる様子を見る</label> <pre class="src src-shell"> <span class="org-variable-name">tmpfile</span>=$(mktemp /tmp/tmpgo.XXXXXX.go)

cat > $ <span class="org-variable-name">tmpfile</span> <<EOF <span class="org-sh-heredoc">
package main

func main() {}

func f() any {
  x := "hello"
  return x // ヒープへ
}

EOF
</span>
go build -gcflags= <span class="org-string">"-m"</span> -o bin $ <span class="org-variable-name">tmpfile</span> 2>&1
rm bin
rm $ <span class="org-variable-name">tmpfile</span>
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-nil"># command-line-arguments
/tmp/tmpgo.wTCwGe.go:3:6: can inline main
/tmp/tmpgo.wTCwGe.go:5:6: can inline f
/tmp/tmpgo.wTCwGe.go:7:10: x escapes to heap
</pre>
</div>
</div>
</div>
 <div id="outline-container-org97723dd" class="outline-2">
 <h2 id="org97723dd"> <a href="#org97723dd">関連</a></h2>
 <div class="outline-text-2" id="text-org97723dd">
 <ul class="org-ul"> <li> <a href="20250630T185540--kdoc-411-スタックは積み重ねて取り出して解放する。ではヒープは__draft_permanent.html#ID-20250630T185540">KDOC 411: スタックは積み重ねて取り出して解放する。ではヒープは?</a>。ヒープを調べるきっかけになった</li>
</ul></div>
</div>
 <div id="outline-container-orgbcc41b3" class="outline-2">
 <h2 id="orgbcc41b3"> <a href="#orgbcc41b3">Backlinks</a></h2>
 <div class="outline-text-2" id="text-orgbcc41b3">
 <ul class="org-ul"> <li> <a href="./20250701T213624--kdoc-415-ioreaderのシグネチャはヒープエスケープを避ける設計になっている__draft_permanent.html">KDOC 415: io.Readerのシグネチャはヒープエスケープを避ける設計になっている</a></li>
</ul></div>
</div>
</div>]]></content>
  <link href="https://kijimad.github.io/roam/20250701T193212--kdoc-414-インターフェースがヒープにエスケープされるのを見る__draft_wiki.html"/>
  <id>https://kijimad.github.io/roam/20250701T193212--kdoc-414-インターフェースがヒープにエスケープされるのを見る__draft_wiki.html</id>
  <updated>2025-07-11T08:12:43+09:00</updated>
</entry>
</feed>
