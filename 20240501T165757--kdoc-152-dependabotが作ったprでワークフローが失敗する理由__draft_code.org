:properties:
:ID: 20240501T165757
:end:
#+title:      KDOC 152: Dependabotが作ったPRでワークフローが失敗する理由
#+date:       [2024-05-01 Wed 16:57]
#+filetags:   :draft:code:
#+identifier: 20240501T165757

# (denote-rename-file-using-front-matter (buffer-file-name) 0)
# (save-excursion (while (re-search-backward ":draft" nil t) (replace-match "")))
# (flush-lines "^\\#\s.+?")

# ====ポリシー。
# 1ファイル1アイデア。
# 1ファイルで内容を完結させる。
# 常にほかのエントリとリンクする。
# 自分の言葉を使う。
# 参考文献を残しておく。
# 自分の考えを加える。
# 構造を気にしない。
# エントリ間の接続を発見したら、接続エントリを追加する。カード間にあるリンクの関係を説明するカード。
# アイデアがまとまったらアウトラインエントリを作成する。リンクをまとめたエントリ。
# エントリを削除しない。古いカードのどこが悪いかを説明する新しいカードへのリンクを追加する。
# 恐れずにカードを追加する。無意味の可能性があっても追加しておくことが重要。

* この文書のステータス
- 作成
  - [X] 2024-05-09 貴島
- レビュー
  - [ ] <署名>
# (progn (kill-line -1) (insert (format "  - [X] %s 貴島" (format-time-string "%Y-%m-%d"))))

# 関連をつけた。
# タイトルがフォーマット通りにつけられている。
# 内容をブラウザに表示して読んだ(作成とレビューのチェックは同時にしない)。
# 文脈なく読めるのを確認した。
# おばあちゃんに説明できる。
# いらない見出しを削除した。
# タグを適切にした。
# すべてのコメントを削除した。
* 概要
Dependabotは、[[id:6b889822-21f1-4a3e-9755-e3ca52fa0bc4][GitHub]]で、自動で依存ライブラリを更新する機能である。Dependabotによって作られるPull Requestで常にテストが失敗しているのを認識し、理由がわかったのでメモする。
* 理由

結論からいうと、ドキュメントにある。

#+begin_quote
Dependabot pull request によってトリガーされるワークフロー実行は、フォークされたリポジトリからのものであるかのように実行されるため、読み取り専用の GITHUB_TOKEN を使用します。 それらのワークフローの実行は、シークレットにはアクセスできません。 これらのワークフローをセキュリティで保護するための戦略については、「GitHub Actions のセキュリティ強化」を参照してください。
- [[https://docs.github.com/ja/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token][自動トークン認証 - GitHub Docs]]
#+end_quote

Dependabotが作るPull Requestで実行失敗していたのは、Dockerイメージレジストラにイメージをpushするタスクだった。このタスクでは、レジストラにイメージをpushするのに強い権限のトークンが必要なため、シークレットにトークンを登録していた。Dependabotが作るPull Requestではこのシークレットにアクセスできず、ログインジョブで失敗して終了していた。

意識したことはなかったが、この挙動になっていることで、Publicリポジトリでも安全を保てるようになっている。

* 関連
- [[id:20240430T183500][KDOC 147: GITHUB_TOKENはトリガー権限を持っていない]]。GitHub Actionsのデフォルトトークンの権限まわりの話
