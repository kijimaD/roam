:PROPERTIES:
:ID:       bb71747d-8599-4aee-b747-13cb44c05773
:mtime:    20241102180400 20241028101410
:ctime:    20210926150327
:END:
#+title: OSS
* 概要
OSS(Open Source Software)はオープンなライセンスのもとで自由に開発されるソフトウェアのこと。

[[id:cfd092c4-1bb2-43d3-88b1-9f647809e546][Ruby]]、[[id:a6c9c9ad-d9b1-4e13-8992-75d8590e464c][Python]]、[[id:ddc21510-6693-4c1e-9070-db0dd2a8160b][Rust]]、[[id:ad1527ee-63b3-4a9b-a553-10899f57c234][TypeScript]]…メジャーなプログラミング言語のほとんど(すべてか)はOSSである。
* Memo
* Tasks
* Reference
** [[https://docs.fedoraproject.org/en-US/commops/contribute/successful-contributor/][How to be a successful contributor :: Fedora Docs]]
fedoraプロジェクトに貢献する方法。
** [[https://opensource.guide/ja/how-to-contribute/][オープンソースにコントリビュートする方法 | Open Source Guides]]
** [[https://github.com/oss-gate/first-feedback-guidebook][oss-gate/first-feedback-guidebook: OSS Gateワークショップ参加者の方からよく寄せられる疑問への回答を元にした、初めてのフィードバックの手引き]]
** TODO [[https://www.slideshare.net/yukihiro_matz/ruby-everywhere/60-Fulltime_core_committer_aka_Patch][Ruby everywhere]]
Matzのスライド。Rubyの導入例について。
** [[https://www.slideshare.net/yukihiro_matz/ruby-9183142][Ruby開発が教えてくれたこと]]
Matzのスライド。
** [[https://www.slideshare.net/yukihiro_matz/feeding-the-sharks?next_slideshow=1][Feeding the sharks]]
Matzのスライド。OSSとしてのRubyについて。
** [[https://knqyf263.hatenablog.com/entry/2021/07/29/143500][趣味で作ったソフトウェアが海外企業に買われ分野世界一になるまでの話 - knqyf263's blog]]
面白い、わかりやすい。
** [[https://knqyf263.hatenablog.com/entry/2020/08/28/074749][OSSエンジニアを1年やってみた所感 - knqyf263's blog]]
謎に包まれたOSSメンテナーの生態。
文章が読みやすい。
** [[https://junkyard.song.mu/slides/jtf2021w/#0][OSS活動を細く長く続ける技術]]
* Archives
** DONE [[https://tatsu-zine.com/books/code-reading][Code Reading プレミアムブックス版 オープンソースから学ぶソフトウェア開発技法]] :Read:
CLOSED: [2022-07-02 Sat 16:30]
:LOGBOOK:
CLOCK: [2022-07-02 Sat 16:11]--[2022-07-02 Sat 16:30] =>  0:19
CLOCK: [2022-07-02 Sat 15:41]--[2022-07-02 Sat 16:06] =>  0:25
CLOCK: [2022-07-02 Sat 14:48]--[2022-07-02 Sat 15:13] =>  0:25
CLOCK: [2022-07-02 Sat 11:39]--[2022-07-02 Sat 12:04] =>  0:25
CLOCK: [2022-07-02 Sat 11:13]--[2022-07-02 Sat 11:38] =>  0:25
CLOCK: [2022-07-02 Sat 10:46]--[2022-07-02 Sat 11:11] =>  0:25
CLOCK: [2022-07-02 Sat 10:20]--[2022-07-02 Sat 10:45] =>  0:25
CLOCK: [2022-07-01 Fri 09:33]--[2022-07-01 Fri 09:58] =>  0:25
CLOCK: [2022-07-01 Fri 09:04]--[2022-07-01 Fri 09:29] =>  0:25
CLOCK: [2022-07-01 Fri 00:00]--[2022-07-01 Fri 00:25] =>  0:25
CLOCK: [2022-06-30 Thu 23:31]--[2022-06-30 Thu 23:56] =>  0:25
CLOCK: [2022-06-30 Thu 20:32]--[2022-06-30 Thu 20:57] =>  0:25
CLOCK: [2022-06-30 Thu 09:42]--[2022-06-30 Thu 10:07] =>  0:25
CLOCK: [2022-06-29 Wed 22:58]--[2022-06-29 Wed 23:23] =>  0:25
CLOCK: [2022-06-29 Wed 22:31]--[2022-06-29 Wed 22:56] =>  0:25
CLOCK: [2022-06-29 Wed 10:32]--[2022-06-29 Wed 10:57] =>  0:25
CLOCK: [2022-06-29 Wed 09:46]--[2022-06-29 Wed 10:11] =>  0:25
CLOCK: [2022-06-29 Wed 00:41]--[2022-06-29 Wed 01:06] =>  0:25
CLOCK: [2022-06-28 Tue 00:09]--[2022-06-28 Tue 00:34] =>  0:25
CLOCK: [2022-06-27 Mon 10:27]--[2022-06-27 Mon 10:52] =>  0:25
CLOCK: [2022-06-26 Sun 23:28]--[2022-06-26 Sun 23:53] =>  0:25
CLOCK: [2022-06-26 Sun 23:01]--[2022-06-26 Sun 23:26] =>  0:25
CLOCK: [2022-06-26 Sun 21:27]--[2022-06-26 Sun 21:52] =>  0:25
CLOCK: [2022-06-26 Sun 20:57]--[2022-06-26 Sun 21:22] =>  0:25
CLOCK: [2022-06-26 Sun 18:26]--[2022-06-26 Sun 18:51] =>  0:25
CLOCK: [2022-06-26 Sun 16:40]--[2022-06-26 Sun 17:05] =>  0:25
CLOCK: [2022-06-26 Sun 16:03]--[2022-06-26 Sun 16:28] =>  0:25
CLOCK: [2022-06-26 Sun 15:00]--[2022-06-26 Sun 15:25] =>  0:25
CLOCK: [2022-06-26 Sun 14:22]--[2022-06-26 Sun 14:47] =>  0:25
CLOCK: [2022-06-26 Sun 13:52]--[2022-06-26 Sun 14:17] =>  0:25
CLOCK: [2022-06-26 Sun 11:26]--[2022-06-26 Sun 11:51] =>  0:25
CLOCK: [2022-06-26 Sun 10:46]--[2022-06-26 Sun 11:11] =>  0:25
CLOCK: [2022-06-26 Sun 00:02]--[2022-06-26 Sun 00:27] =>  0:25
CLOCK: [2022-06-25 Sat 23:37]--[2022-06-26 Sun 00:02] =>  0:25
:END:

プログラムの読み解き方の本。

- 読む目的を明確にする
- ドキュメントから読む
- 動かして試せるように環境構築する
- 小さく簡単なものから理解する
- 些事でなくアーキテクチャを理解する
- 制御構造をブラックボックスに見立てて検証する。たとえばトップレベルのwhileだけ見る、とか

- コードを読む目的をはっきりさせる、フォーカスする

- 他人の書いた良質なコードを読むことを習慣化する
- コードを読むときは、目標を決めて重点的に読む。新しいパターンやコーディングスタイルを学ぶのか。何かの要件を満たす方法を知りたいのか。
- システムに新しい機能を追加するときに最初にすべきことは、類似した機能の実装を見付け、それをこれから実装する機能のテンプレートとして利用することです
- ソフトウェアシステムのレビューを行うときは、実行可能ステートメント以外にも確認すべき要素があることを忘れないでください。ファイルおよびディレクトリ構造、ビルドと設定のプロセス、ユーザーインターフェイス、システムドキュメントなども調査しなければなりません。
- プログラムのある種の機能については、ソースコードを読むよりも現実にプログラムを実行したほうが理解しやすい場合がある。
- 本格的なプログラムを調査するときは、プログラムの主な構成要素を確認することから始めるとよい
- ライブラリ関数に出会ったときにオンラインドキュメントを読むことを習慣化すれば、コードを読むスキルと、コードを書くスキルの両方が向上します。
- コードを読むときは、ボトムアップとトップダウンからの調査、発見的な問題解決、コメントや外部ドキュメントの見直しなど、問題に即して可能な戦略は何でも試してみることが大切
- コメントを付ける、空白を挿入する、変数、関数、クラスの名前をうまく決めるなど、プログラムの動作に直接影響しない項目を変更して可読性を改善できる可能性がある
- ループの性質に関して推論を考えるとき、バリアントとインバリアントという概念を中心に抽象化を行うと有効な場合がある
- 意味を残しつつ変形してコードを再編成することで、コードの理論を簡単にする
- 言語の構成要素の働きがわかれば、それを使用しているコードについての理解がより深まる
- ポインタにどんな使い方があるかを分類できるようになれば共通のコーディングパターンが見えてくる
- Cプログラムのポインタには次の用法がある
  - リンクデータ構造を作る
  - 動的に割り当てられたデータ構造を参照する
  - 参照呼び出しを実装する
  - 一連のデータ要素にアクセスする
  - 配列を引数として渡す
  - 関数を参照する
  - 別名で参照する
  - 文字列を表現する
  - システムメモリに直接アクセスする
- 構造体と共用体の両方で使われている背後の理由を理解し、分類する
- Cプログラムの構造体には次の用法がある
  - まとめて操作されるデータ要素をグループ化する
  - 関数から複数のデータ要素を返す
  - リンクデータ構造を作る
  - 各種の装置やネットワークリンク
  - 記憶媒体などのデータ構造をマッピングする
  - 抽象データ型を実装する
  - プログラムをオブジェクト指向のスタイルで作成する
- Cプログラムの共用体には次の用法がある
  - 記憶域を効率的に使用する
  - 多態を実装する
  - データをさまざまな内部表現で操作する
- 配列はプログラム内で実装された抽象マシン、仮想マシンで使われるデータやコードを格納することにより、プログラムの動作を制御できる
- 自身へのnextおよびprevのポインタを持つ構造体は、たいていダブル連結リストのノード
- アプリケーションのソースコードツリーは、たいていそのアプリケーションの展開構造を反映している
- 巨大なソースコード集合にひるまない。こうしたコードはその場限りのものよりうまく編成されていることが多い
- 大きなプロジェクトに取り組むのがはじめてなら、そのディレクトリツリー構造がどうなっているか、少し時間をかけて眺める
- プロジェクトのソースツリーには、仕様書、エンドユーザや開発者のドキュメント、テストスクリプト、マルチメディアリソース、ビルドツール、例、ローカリゼーションファイル、改定履歴、インストール手順、ライセンス情報なども含まれる
- 大きなプロジェクトでは、設定ステップのあとでMakefileが動的に生成されることがよくある
- Cプリプロセッサを使う
- コンパイラがあるコードをどう扱うかを完全に理解するには、生成されたアセンブラコードを見る
- 関連するオブジェクトファイルのシンボルを調べることで、ソースファイルのインポートとエクスポートのリストがはっきりわかる
