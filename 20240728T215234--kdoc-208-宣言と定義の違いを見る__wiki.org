:properties:
:ID: 20240728T215234
:mtime:    20250626233425
:ctime:    20241028101410
:end:
#+title:      KDOC 208: 宣言と定義の違いを見る
#+date:       [2024-07-28 Sun 21:52]
#+filetags:   :wiki:
#+identifier: 20240728T215234

* この文書のステータス
- 作成
  - [X] 2024-08-03 貴島
- レビュー
  - [X] 2024-08-10 貴島

* 概要
宣言と定義の違いってなんだろうか。
* コンパイラが使うか、リンカが使うか

[[https://stackoverflow.com/questions/1410563/what-is-the-difference-between-a-definition-and-a-declaration][c++ - What is the difference between a definition and a declaration? - Stack Overflow]]の解説は興味深い。

宣言(declaration)。

#+begin_quote
A declaration introduces an identifier and describes its type, be it a type, object, or function. A declaration is what the compiler needs to accept references to that identifier.

宣言は識別子を導入し、その型（型、オブジェクト、関数など）を記述する。宣言は、コンパイラがその識別子への参照を受け入れるために必要なものだ。
#+end_quote

定義(definition)。

#+begin_quote
A definition actually instantiates/implements this identifier. It's what the linker needs in order to link references to those entities.

定義は、実際にこの識別子をインスタンス化／実装する。これは、リンカがこれらのエンティティへの参照をリンクするために必要なものだ。
#+end_quote

コンパイラが使うのか、リンカが使うのか、という視点は新鮮だ。
* コンパイラに型を伝えるか、メモリを確保するか
[[https://so-zou.jp/software/tech/programming/cpp/grammar/data-type/declaration/definition.htm][宣言と定義の違い | C++ プログラミング解説]]も見てみる。

#+begin_quote
名前 (識別子) の型をコンパイラに伝えるのが宣言で、その名前が参照している実体 (メモリ) を確保するのが定義です。
#+end_quote

文章は異なるが、これは先に紹介した考え方と整合しているように見える。

* 確かめる

考え方を、アセンブラで確かめてみる。

#+begin_export html
<iframe width="800px" height="200px" src="https://godbolt.org/e#g:!((g:!((g:!((h:codeEditor,i:(filename:'1',fontScale:14,fontUsePx:'0',j:1,lang:___c,selection:(endColumn:1,endLineNumber:1,positionColumn:1,positionLineNumber:1,selectionStartColumn:1,selectionStartLineNumber:1,startColumn:1,startLineNumber:1),source:'extern+int+this_is_decl%3B%0A%0Aint+this_is_define%3B'),l:'5',n:'1',o:'C+source+%231',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0'),(g:!((h:compiler,i:(compiler:cg141,filters:(b:'0',binary:'1',binaryObject:'1',commentOnly:'0',debugCalls:'1',demangle:'0',directives:'0',execute:'1',intel:'1',libraryCode:'0',trim:'0',verboseDemangling:'0'),flagsViewOpen:'1',fontScale:14,fontUsePx:'0',j:1,lang:___c,libs:!(),options:'',overrides:!(),selection:(endColumn:1,endLineNumber:1,positionColumn:1,positionLineNumber:1,selectionStartColumn:1,selectionStartLineNumber:1,startColumn:1,startLineNumber:1),source:1),l:'5',n:'0',o:'+x86-64+gcc+14.1+(Editor+%231)',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0')),l:'2',n:'0',o:'',t:'0')),version:4"></iframe>
#+end_export

↑アセンブル結果に ~this_is_declaration~ は残らず、 ~this_is_define~ だけが残る。「宣言」の内容はコンパイラがコンパイル時にデータ型によってメモリサイズを決定するために使うもので、実行時に必要な情報ではない。なのでアセンブリには現れないといえる。いっぽうで「定義」の内容はメモリに実際の値を保持する。実行時に必要な情報であるのでアセンブリに現れる。

↓関数型でも同じ考え方が成り立つのを確認する。

#+begin_export html
<iframe width="800px" height="200px" src="https://godbolt.org/e#g:!((g:!((g:!((h:codeEditor,i:(filename:'1',fontScale:14,fontUsePx:'0',j:1,lang:___c,selection:(endColumn:1,endLineNumber:2,positionColumn:1,positionLineNumber:2,selectionStartColumn:1,selectionStartLineNumber:2,startColumn:1,startLineNumber:2),source:'extern+void+f_decl()%3B%0A%0Avoid+f_def()+%7B%7D%3B'),l:'5',n:'1',o:'C+source+%231',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0'),(g:!((h:compiler,i:(compiler:cg141,filters:(b:'0',binary:'1',binaryObject:'1',commentOnly:'0',debugCalls:'1',demangle:'0',directives:'0',execute:'1',intel:'1',libraryCode:'0',trim:'0',verboseDemangling:'0'),flagsViewOpen:'1',fontScale:14,fontUsePx:'0',j:1,lang:___c,libs:!(),options:'',overrides:!(),selection:(endColumn:1,endLineNumber:1,positionColumn:1,positionLineNumber:1,selectionStartColumn:1,selectionStartLineNumber:1,startColumn:1,startLineNumber:1),source:1),l:'5',n:'0',o:'+x86-64+gcc+14.1+(Editor+%231)',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0')),l:'2',n:'0',o:'',t:'0')),version:4"></iframe>
#+end_export

また、宣言と定義のユースケースの違いに由来する些細な挙動の違いを見る。

↓「宣言」は同じ識別子で複数存在できる(型が違うとtype conflict errorになる)。

#+begin_export html
<iframe width="800px" height="200px" src="https://godbolt.org/e#g:!((g:!((g:!((h:codeEditor,i:(filename:'1',fontScale:14,fontUsePx:'0',j:1,lang:___c,selection:(endColumn:12,endLineNumber:3,positionColumn:12,positionLineNumber:3,selectionStartColumn:12,selectionStartLineNumber:3,startColumn:12,startLineNumber:3),source:'/*+Type+your+code+here,+or+load+an+example.+*/%0Avoid+test()%3B%0Avoid+test()%3B'),l:'5',n:'1',o:'C+source+%231',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0'),(g:!((h:compiler,i:(compiler:cg141,filters:(b:'0',binary:'1',binaryObject:'1',commentOnly:'0',debugCalls:'1',demangle:'0',directives:'0',execute:'1',intel:'1',libraryCode:'0',trim:'0',verboseDemangling:'0'),flagsViewOpen:'1',fontScale:14,fontUsePx:'0',j:1,lang:___c,libs:!(),options:'',overrides:!(),selection:(endColumn:1,endLineNumber:1,positionColumn:1,positionLineNumber:1,selectionStartColumn:1,selectionStartLineNumber:1,startColumn:1,startLineNumber:1),source:1),l:'5',n:'0',o:'+x86-64+gcc+14.1+(Editor+%231)',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0')),l:'2',n:'0',o:'',t:'0')),version:4"></iframe>
#+end_export

↓「定義」は識別子に対してユニークでなければならない。 ~error: redefinition of 'test'~ 。

#+begin_export html
<iframe width="800px" height="200px" src="https://godbolt.org/e#g:!((g:!((g:!((h:codeEditor,i:(filename:'1',fontScale:14,fontUsePx:'0',j:1,lang:___c,selection:(endColumn:14,endLineNumber:2,positionColumn:14,positionLineNumber:2,selectionStartColumn:14,selectionStartLineNumber:2,startColumn:14,startLineNumber:2),source:'/*+Type+your+code+here,+or+load+an+example.+*/%0Avoid+test()%7B%7D%3B%0Avoid+test()%7B%7D%3B'),l:'5',n:'1',o:'C+source+%231',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0'),(g:!((h:compiler,i:(compiler:cg141,filters:(b:'0',binary:'1',binaryObject:'1',commentOnly:'0',debugCalls:'1',demangle:'0',directives:'0',execute:'1',intel:'1',libraryCode:'0',trim:'0',verboseDemangling:'0'),flagsViewOpen:'1',fontScale:14,fontUsePx:'0',j:1,lang:___c,libs:!(),options:'',overrides:!(),selection:(endColumn:1,endLineNumber:1,positionColumn:1,positionLineNumber:1,selectionStartColumn:1,selectionStartLineNumber:1,startColumn:1,startLineNumber:1),source:1),l:'5',n:'0',o:'+x86-64+gcc+14.1+(Editor+%231)',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0')),l:'2',n:'0',o:'',t:'0')),version:4"></iframe>
#+end_export

宣言と定義の表記はわずかな違いだが、異なる意味であることを理解できた。

* 関連
- [[id:20231014T171444][KDOC 46: Goの宣言構文がCと異なる理由]]。宣言つながり
- [[id:20240427T120833][KDOC 141: Cのポインタ操作をアセンブリで見る]]。アセンブリで確認するシリーズ
- [[id:20240720T210830][KDOC 205: エラーと例外の違い]]。使い分けが曖昧なまま使っているコンピュータ用語について考える部分が共通しているため
