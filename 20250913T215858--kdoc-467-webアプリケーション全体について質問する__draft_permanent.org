:properties:
:ID: 20250913T215858
:mtime:    20250914082441
:ctime:    20250913215908
:end:
#+title:      KDOC 467: Webアプリケーション全体について質問する
#+date:       [2025-09-13 Sat 21:58]
#+filetags:   :draft:permanent:
#+identifier: 20250913T215858

#+begin_comment
(kd/denote-kdoc-rename)
(kd/denote-format)

====ポリシー。
1ファイル1アイデア。
1ファイルで内容を完結させる。
常にほかのエントリとリンクする。
自分の言葉を使う。
参考文献を残しておく。
文献メモの場合は、感想と混ぜないこと。1つのアイデアに反する
ツェッテルカステンの議論に寄与するか。それで本を書けと言われて書けるか
頭のなかやツェッテルカステンにある問いとどのようにかかわっているか
エントリ間の接続を発見したら、接続エントリを追加する。カード間にあるリンクの関係を説明するカード。
アイデアがまとまったらアウトラインエントリを作成する。リンクをまとめたエントリ。
エントリを削除しない。古いカードのどこが悪いかを説明する新しいカードへのリンクを追加する。
恐れずにカードを追加する。無意味の可能性があっても追加しておくことが重要。
個人の感想・意思表明ではない。事実や書籍情報に基づいている

====永久保存メモのルール。
自分の言葉で書く。
後から読み返して理解できる。
他のメモと関連付ける。
ひとつのメモにひとつのことだけを書く。
メモの内容は1枚で完結させる。
論文の中に組み込み、公表できるレベルである。

====水準を満たす価値があるか。
その情報がどういった文脈で使えるか。
どの程度重要な情報か。
そのページのどこが本当に必要な部分なのか。
公表できるレベルの洞察を得られるか

====フロー。
1. 「走り書きメモ」「文献メモ」を書く
2. 1日1回既存のメモを見て、自分自身の研究、思考、興味にどのように関係してくるかを見る
3. 追加すべきものだけ追加する

#+end_comment

* この文書のステータス
- 作成
  - [X] 2025-09-14 貴島
- レビュー
  - [ ] <署名>
# (progn (kill-line -1) (insert (format "  - [X] %s 貴島" (format-time-string "%Y-%m-%d"))))

# チェックリスト ================
# 関連をつけた。
# タイトルがフォーマット通りにつけられている。
# 内容をブラウザに表示して読んだ(作成とレビューのチェックは同時にしない)。
# 文脈なく読めるのを確認した。
# おばあちゃんに説明できる。
# いらない見出しを削除した。
# タグを適切にした。
# すべてのコメントを削除した。
* 概要
# 本文(見出しも設定する)

生成AIに調べさせてWebアプリケーション全体を把握したいことがある。観点をまとめる。

- UX
  - アプリケーションの目的
  - ドメイン知識
  - 使用フロー
  - 関係者の種別(顧客、社内担当者、社内承認者、システム管理者 ...)
- 認証・認可
  - 認証の仕組み
  - 認証を維持する仕組み
  - 認可の仕組み
  - 使用するトークンの種類/目的/保存場所/発行/更新/無効
- 通信の流れ
  - クライアントがサーバーにリクエストしてからレスポンスが返るまでの流れ
  - 経路でのプロトコル
  - 経路でのインフラ(リバースプロキシ / API Gateway / CDN ...)
  - キャッシュ(ブラウザキャッシュ / CDNキャッシュ / サーバーサイドキャッシュ ...)
- フロントエンド
  - アーキテクチャ
  - フロントエンド配信の方法(署名付きURLやキャッシュ制御)
  - ページ描画の種別(SPA, SSR, ...)と方法
  - 認証情報の保存場所(Cookie, LocalStorage, Memory, ...)
- バックエンド
  - アーキテクチャ
  - API の役割とエンドポイントの設計
  - データベースとのやりとり(ORM, クエリ, トランザクション)
  - セッション管理・状態管理(ステートフル / ステートレス)
- データ
  - 永続化データ種別(RDBMS, NoSQL, 静的ファイル)
  - テーブル構造
  - マイグレーション方法
  - シーディング方法(開発環境)
  - 静的ファイルアップロード方法
- インフラ
  - アーキテクチャ
  - 使用するクラウドサービス(AWS Lambda, ECS, Kubernetes, RDS, S3…)
  - 各サービスの目的(ストレージ、計算、ネットワーク)
  - インフラとアプリケーションの連携方法(環境変数、Secrets Manager、VPC内通信)
- セキュリティ
  - 通信の暗号化(TLS)
  - 秘密情報の管理(APIキー、DBパスワード)
  - 脆弱性対策(XSS, CSRF, SQL Injection)
- 運用・監視
  - ログの収集と可視化の方法(アプリログ、アクセスログ、監査ログ)
  - メトリクス収集(リクエスト数、エラーレート、レスポンスタイム)
  - アラート設計と対応フロー
  - デプロイ戦略(Blue/Green, Canary, Rolling Update)
  - メンテナンスSQLを実行する方法
  - スケーリング手法
- 開発プロセス
  - CI/CD の流れ
  - テスト手法、粒度(ユニットテスト、統合テスト、E2Eテスト)
  - IaC(Terraform, CloudFormation)によるインフラ管理方法

* 関連
# 関連するエントリ。なぜ関連させたか理由を書く。意味のあるつながりを意識的につくる。
# - この事実は自分のこのアイデアとどう整合するか。
# - この現象はあの理論でどう説明できるか。
# - ふたつのアイデアは互いに矛盾するか、互いを補っているか。
# - いま聞いた内容は以前に聞いたことがなかったか。
# - メモ y についてメモ x はどういう意味か。
# - 対立する
# - 修正する
# - 補足する
# - 付け加えるもの
# - アイデア同士を組み合わせて新しいものを生み出せないか
# - どんな疑問が浮かんだか
なし。
