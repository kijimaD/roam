#+title: JS

* JavaScript
JavaScriptの難しいところ:
- 膨大な関連パッケージ
- 多くの方言
であると思います。
** 配列

- 配列を処理するときはやりたいことに応じて関数を選択します。するとやりたいことが明確になるのでわかりやすくもなります。除去したときは`filter()`、新しい配列を作るときは`map()`という感じです。
** コールバック関数

 - コールバック関数: 他の関数に引数として渡す関数のことです。
[[https://sbfl.net/blog/2019/02/08/javascript-callback-func/][JavaScriptの「コールバック関数」とは一体なんなのか]]
** Eslint無視の方法

#+begin_src javascript
 "rules": {
     "comma-dangle": "error",
     "require-yield": "error",
     "no-unused-vars": "off",
     "no-undef": "off",
 },
#+end_src

などと書きます。
** クラスを使わずにモジュール分割する

#+begin_src javascript
  var Msg = (function() {
    function test() {
    }
  }
  Msg.test()
#+end_src
** 命名の意味
 - `_`で始まるのはプライベートメソッドです。言語によっては未使用変数ということもあります。
** NodeList
 - NodeList - https://developer.mozilla.org/ja/docs/Web/API/NodeList
 - text node: タグに囲まれたもの。`<p>これ</p>。`
 - element node: `<p>や、</p>`
 - DOMツリー: ブラウザがアクセスしてHTMLを解析すると文書の内容を表すオブジェクトのツリー構造が構築されます。これがDOMツリーです。DOMツリーを形成する1つ1つのオブジェクトがノードです。さらに子のオブジェクトを持っている可能性があります。
 https://qiita.com/KDE_SPACE/items/e21bb31dd4d9c162c4a6
** package.json
パッケージを理解するために不可欠です。
*** scripts
makeのようなもの。npm run <タスク名>で実行できる。

#+begin_src javascript
  "scripts": {
      "build": "NODE_ENV=production babel src --out-dir lib --source-maps",
      "watch": "babel src --out-dir lib --watch --source-maps",
      "prepublish": "npm run --if-present build",
      "test": "mocha --require @babel/register test/*test.js"
  }
#+end_src
*** files
npm installされたときに展開されるファイル、実行されるファイルを指定する。

#+begin_src javascript
  "main": "lib/index.js",
  "files": [
      "lib",
      "src"
  ],
#+end_src

srcをコンパイルしてlibに格納、パッケージとしてはこちらを使用する、みたいなことを指定する。はず。
*** GitHubから読み込むとき

#+begin_src shell
  npm install git@github.com:kijimaD/textlint-plugin-org#develop
#+end_src
** .babelrc
babelの設定。presetは使うbabelと合わせる必要がある。
#+begin_src javascript
{
  "presets": [
      "@babel/preset-env"
  ],
  "env": {
    "development": {
      "presets": [
          "jsdoc-to-assert",
          "power-assert"
      ]
    }
  }
}
#+end_src
** パッケージ関連の言葉
ややこしい。
*** npm パッケージマネージャ

package.jsonに書かれた設定でいろいろ実行。
パッケージインストール、アップデート、タスク実行、などいろいろ。
パッケージをインストールするときには、これが実行されてコンパイルされて使える状態になってたりする。

#+begin_src shell
  npm i
#+end_src

ジョブを実行。

#+begin_src shell
  npx run test
#+end_src

npx…同じようなやつ。
*** node 実行環境

#+begin_src shell
  node # repl起動
#+end_src

#+begin_src shell
  node -v
#+end_src
