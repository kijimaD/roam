:PROPERTIES:
:ID:       007116d4-5023-4070-95ee-0a463b4bd983
:END:
#+title: Inbox
* 概要
とりあえず入れておくページ。
* Memo
* Tasks
* Reference
* Inbox
** [[https://ja.cooltext.com/][ロゴ及び画像ジェネレーター]]
ロゴを簡単に生成できるサイト。
** [[https://azu.github.io/slide/jser200/javascript-2014.html][世界のJavaScriptを読もう @ 2014]]
キャッチアップする意義や方法。
** [[http://www.ayqy.net/blog/%E6%89%93%E7%A0%B4iframe%E5%AE%89%E5%85%A8%E9%99%90%E5%88%B6%E7%9A%843%E7%A7%8D%E6%96%B9%E6%A1%88/][打破iframe安全限制的3种方案 | 黯羽轻扬]]
iframeの制限を回避するいくつかの方法。
** [[https://programmingpercy.tech/blog/mastering-websockets-with-go/][ProgrammingPercy]]
WebSocketのわかりやすい説明。
** [[https://developers.google.com/speed/webp/docs/riff_container?hl=ja][WebP コンテナ仕様  |  Google for Developers]]
WebPの仕様書。
** [[https://zenn.dev/sryoya/articles/b0e8e8d83032b0][sync.Onceの内部実装から学ぶ実装アイデア]]
読む。
** [[https://icons.getbootstrap.jp/][Bootstrap Icons · Bootstrap 向けのオープンソース SVG アイコンライブラリ]]
Bootstrapで使えるアイコン。
** [[https://go-review.googlesource.com/c/go/+/101457][doc: remove non-prime from list of primes in spec (101457) · Gerrit Code Review]]
素数に9が含まれているのはタイポではなく、そういうジョークとのこと。
** [[https://go.dev/ref/mem][The Go Memory Model - The Go Programming Language]]
Goのメモリモデル。
** [[https://qiita.com/ruiu/items/54f0dbdec0d48082a5b1][Goでスレッド（goroutine）セーフなプログラムを書くために必ず注意しなければいけない点 - Qiita]]
並列実行の注意点。
** [[https://zenn.dev/mjhd/articles/a09cb5905b7848][Go 1.20: Profile-Guided Optimization]]
#+begin_quote
Profile-Guided Optimizationは、コンパイル時最適化のヒントとして、ランタイムのプロファイル情報を使うことでより効率よく最適化する手法です。
#+end_quote
** [[https://knowledge.sakura.ad.jp/23899/][Docker Compose入門 (3) ～ネットワークの理解を深める～ | さくらのナレッジ]]
docker networkの解説。
** [[https://docs.google.com/document/d/1CxgUBPlx9iJzkz9JWkb6tIpTe5q32QDmz8l0BouG0Cw/preview][Go Escape Analysis Flaws - Google Docs]]
Goエスケープの説明。
** [[https://github.com/golang/go/wiki/CompilerOptimizations#function-inlining][CompilerOptimizations · golang/go Wiki]]
コンパイラの最適化。
** [[http://localhost:8081/golang/go/issues/51317#top][proposal: arena: new package providing memory arenas · Issue #51317 · golang/go · GitHub]]
arenaのproposal。
** [[https://go.dev/doc/comment][Go Doc Comments - The Go Programming Language]]
Go Docのコメントの仕様。
** [[https://github.com/golang/go/issues/45624][proposal: expression to create pointer to simple types · Issue #45624 · golang/go]]
気になる提案。
** [[https://github.com/compose-spec/compose-go/pull/416][introduce require to load sub-compose projects as dependencies by ndeloof · Pull Request #416 · compose-spec/compose-go]]
良い機能。-fオプションの上書きは、わかりづらい。
** [[https://www.oreilly.co.jp/books/9784873114712/][O'Reilly Japan - 言語設計者たちが考えること]]
言語設計者へのインタビュー集。
** [[https://github.com/golang/go/issues/38017][time: add time/tzdata package and timetzdata tag to embed tzdata in program · Issue #38017 · golang/go]]
タイムゾーン情報をシステム依存でなく、プログラム内にもたせる変更。
** [[https://jsprimer.net/basic/ecmascript/][ECMAScript · JavaScript Primer #jsprimer]]
ECMAScriptの仕様策定プロセス。
** [[https://ja.wikipedia.org/wiki/%E3%82%AD%E3%83%AD%E3%83%90%E3%82%A4%E3%83%88][キロバイト - Wikipedia]]
kbとKBの違い。
** [[https://ja.wikipedia.org/wiki/%E3%82%B9%E3%83%86%E3%82%A3%E3%82%B0%E3%83%A9%E3%83%BC%E3%81%AE%E6%B3%95%E5%89%87][スティグラーの法則 - Wikipedia]]
科学的発見に第一発見者の名前が付くことはない、という法則。
** [[https://ja.wikipedia.org/wiki/90%E5%AF%BE90%E3%81%AE%E6%B3%95%E5%89%87][90対90の法則 - Wikipedia]]
ソフトウェア開発のプロジェクトが、スケジュールを大幅にオーバーするのが恒例化していることを皮肉ったもの。
** [[https://github.com/golang/go/issues/17860][net/url: optimize unescape and escape · Issue #17860 · golang/go]]
URLに関係する関数での高速化の方法。
