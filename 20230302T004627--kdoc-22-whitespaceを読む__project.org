:properties:
:ID: 20230302T004627
:mtime:    20241102180224 20241028101410
:ctime:    20241028101410
:end:
#+title:      KDOC 22: whitespaceを読む
#+date:       [2023-03-02 Thu 00:46]
#+filetags:   :project:
#+identifier: 20230302T004627

whitespaceは、無意味な空白を検知する[[id:7cacbaa3-3995-41cf-8b72-58d6e07468b1][Go]]のLinterである。

* tasks
** DONE どうやって空行を検知しているか
CLOSED: [2023-03-04 Sat 21:24]
仕組み。

- 関数定義一覧をとる
- visitorを作成
- walkの引数にvisitorを渡す
  - ast.Walkは探索アルゴリズムを切り替えるときに使う
  - visitorインターフェースがアルゴリズム
- messagesをスライスに貯める
- ループを抜けてmessagesを返却

#+caption: if文や、関数定義であればチェックを実行して、フラグをつける。フラグは後の本筋の処理で使う。
#+begin_src git-permalink
https://github.com/ultraware/whitespace/blob/a14a2923c0f916b3fc7dbd0238ef85b88f85ef8a/main.go#L63-L73
#+end_src

#+RESULTS:
#+begin_example go
	if stmt, ok := node.(*ast.IfStmt); ok && v.settings.MultiIf {
		checkMultiLine(v, stmt.Body, stmt.Cond)
	}

	if stmt, ok := node.(*ast.FuncLit); ok && v.settings.MultiFunc {
		checkMultiLine(v, stmt.Body, stmt.Type)
	}

	if stmt, ok := node.(*ast.FuncDecl); ok && v.settings.MultiFunc {
		checkMultiLine(v, stmt.Body, stmt.Type)
	}
#+end_example

#+caption: 本筋の処理
#+begin_src git-permalink
https://github.com/ultraware/whitespace/blob/a14a2923c0f916b3fc7dbd0238ef85b88f85ef8a/main.go#L75-L95
#+end_src

#+RESULTS:
#+begin_example go
	if stmt, ok := node.(*ast.BlockStmt); ok {
		wantNewline := v.wantNewline[stmt]

		comments := v.comments
		if wantNewline {
			comments = nil // Comments also count as a newline if we want a newline
		}
		first, last := firstAndLast(comments, v.fset, stmt.Pos(), stmt.End(), stmt.List)

		startMsg := checkStart(v.fset, stmt.Lbrace, first)

		if wantNewline && startMsg == nil {
			v.messages = append(v.messages, Message{v.fset.Position(stmt.Pos()), MessageTypeAddAfter, `multi-line statement should be followed by a newline`})
		} else if !wantNewline && startMsg != nil {
			v.messages = append(v.messages, *startMsg)
		}

		if msg := checkEnd(v.fset, stmt.Rbrace, last); msg != nil {
			v.messages = append(v.messages, *msg)
		}
	}
#+end_example

- check系関数を使って、警告メッセージを格納する

** DONE オプションはどうやって指定しているか
CLOSED: [2023-03-04 Sat 21:29]

オプションを指定しているようだが、どうやっているか。

Settings構造体を初期化している箇所はない。呼び出し元の設定で、このコードからはわからない。

** DONE checkMultilineは何をしているか
CLOSED: [2023-03-04 Sat 21:24]

#+caption: 複数行かをチェックして、フィールドのフラグを立てる
#+begin_src git-permalink
https://github.com/ultraware/whitespace/blob/a14a2923c0f916b3fc7dbd0238ef85b88f85ef8a/main.go#L100-L106
#+end_src

** DONE 警告部分
CLOSED: [2023-03-04 Sat 21:29]
:LOGBOOK:
CLOCK: [2023-03-04 Sat 21:09]--[2023-03-04 Sat 21:29] =>  0:20
CLOCK: [2023-03-04 Sat 20:41]--[2023-03-04 Sat 21:06] =>  0:25
:END:

#+begin_src git-permalink
https://github.com/ultraware/whitespace/blob/a14a2923c0f916b3fc7dbd0238ef85b88f85ef8a/main.go#L138-L149
#+end_src

#+RESULTS:
#+begin_example go
func checkStart(fset *token.FileSet, start token.Pos, first ast.Node) *Message {
	if first == nil {
		return nil
	}

	if posLine(fset, start)+1 < posLine(fset, first.Pos()) {
		pos := fset.Position(start)
		return &Message{pos, MessageTypeLeading, `unnecessary leading newline`}
	}

	return nil
}
#+end_example

- どうして、posLineの比較でわかるのか
  - 実際のコードの位置と、ASTから生成したコードの位置を比較しているぽい
  - 適切であればposは変わらない。余計なwhitespaceがあると、元の位置が大きくなる

* memo

- ast.FuncDeclは関数定義
- linterじゃないが、キーワードの出現回数とかの統計情報を出せるわけか
- 関数の一覧
  - 長さ
  - 行数
  - 並び替え
