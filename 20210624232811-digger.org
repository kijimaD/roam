:PROPERTIES:
:ID:       70f249a8-f8c8-4a7e-978c-8ff04ffd09c0
:END:
#+title: digger
#+filetags: :Project:
* 概要
https://github.com/kijimaD/digger
diggerはシンボルエンカウント/ローグライクな要素を持った[[id:8b79aef9-1073-4788-9e81-68cc63e4f997][game]]である。[[id:cfd092c4-1bb2-43d3-88b1-9f647809e546][Ruby]]バージョンは開発途中でやめた。[[id:ddc21510-6693-4c1e-9070-db0dd2a8160b][Rust]]で別のコードをベースに再開した。ゲーム開発は静的型付けでないと厳しそう。

- 反省
  - 機能追加が大変で挫折した
  - データがオブジェクトの入った配列で管理が大変だった。バケツリレーが発生
  - UIと機能が一体化
  - 参考になるコードがなかった
  - 自動テストで検知できない
* Goal
- ゲーム投稿サイト or Steamでリリースすること。
* Design Doc
** Characters
- 主人公
- パーティメンバー
- モンスター
  - シンボルが種族を示す。ロボット、戦車、珠、ドラゴン、ライム
  - 種族・レベルごとの敵
  - ダンジョンのボス
- NPC
  - アイテム屋、装備屋、市民、合成屋
** Story
- 街を拠点に、遺跡の3つの珠を手に入れる
** Story progression
- ゲームは街からスタートする。街では売買でき、会話からヒントを得られる
- 遺跡のボスを倒すと珠を手に入れ、次の遺跡が選択できるようになる
- 3つ手に入れるとラスボスと戦い終了
** Gameplay
- ローグライク
- シンボルエンカウント
- RPG的戦闘
- 合成
** Goals
- 全体: 3つの珠を集める
- 短期: 敵を倒して先に進む、出口を探す
- 落ちているアイテムを拾ったり合成することでより強くする
- キャラを成長させる
** User Skills
- 種類の異なるダンジョンを進む
- 戦略的な動き。AIの挙動や地形を理解して、生存可能性を高める
- 数値を管理する。装備品や行動のボーナスをうまく使って生存可能性を高める
- 資源を管理する。重さ、装備品の制約があるなかで、生存可能性を高める
** Items and Power-Ups
ゲームは様々なアイテムを含む。

- 防具。アーマー、服、帽子、靴
- 装飾品。指輪、お守り
- 盾
- 近接武器
- 銃器
- 消耗品。回復薬、栄養剤、ロケット弾
- 素材、売却物
- 食料
- キーアイテム。珠、鍵

アイテムには重さがある。
アイテムはテーブルにより決定する。
** Progression and challenge
- 敵を倒すと経験値を得てレベルアップする
- レベルアップして能力が上がったり、生存に役立つより強力な方法を使えるようになる
- 階を降りるごとにレベルと難易度が上がる。たまにレベルより強い敵に出会うことがある
- 理不尽な偶然でプレイヤーを殺さない
** Losing
- ゲームオーバーになった場合、得たアイテムやキャラクターを失う
** Art Style
- ASCII
** Music and Sound
- 一切ない
** Technical Description
- [[id:ddc21510-6693-4c1e-9070-db0dd2a8160b][Rust]], rltk
- OpenGL, Web Assemblyに変換しブラウザでプレイできる
- ローカルでの実行形式もサポートする
** Marketing and Funding
- 無料で公開する
** Localization
- プレイは英語
- ソースコードや開発用ドキュメントに日本語を含む
* 仕様
- プレイヤーの目的: 3つのダンジョンをクリアすること。
- メッセージシーン、フィールド、戦闘で構成
  - フィールド上はローグライク
- 空腹度が存在し、ゼロになるとダメージを受ける
- 4人パーティ構成
  - 4つのスロットで武器・防具を選択できる
  - キャラはスキル、レベルを持つ
- 3つのダンジョン
  - 5階ごとの脱出機能を使う・遺跡のボスを倒すと帰れ、アイテムを持ち帰れる
  - ダンジョンによって敵・アイテム・マップのセットが変わる
  - 後半のダンジョンは敵が強くなる
- ダンジョンは20階で構成される。最下層にはボスがいて、倒すとクリア
- アイテム
  - 通貨によってアイテムを購入できる
  - 素材によってアイテムを作成できる
  - アイテムを入手できるタイミング: マップで拾う、購入、戦闘に勝利
- シンボルエンカウントの戦闘
* ロードマップ
** 2022
*** 7月
- すべてのチュートリアルを終了
- hands-on Rustから持ってくる
*** 8月
- タイル画像の変更
- スキルシステム、パーティシステム
- クリアまでいけるようにする
- ストーリー実装
*** 9月
*** 10月
*** 11月
*** 12月
** 2023
*** 1月
- リリース
* 開発記録
- チュートリアルから持ってきてる時間が長すぎて辛いな。自作パートに入らないと理解できてる感じがしないし、実際できてない
- 自分で修正できるようになるのか、使いこなせるようになるのか、という不安。実際ほとんどの場合は、見るだけでは理解できてない。何も見ずに考える状況にしないと、身につかないことが多かった
- コーディングで役立つ重要な概念
  - モジュールを組み合わせてオブジェクトの性質を決める方法
  - 継承を一切使わず、独立性高くゲームを組み立てていく方法
  - with関数で組み合わせて、一気にbuildする方法。とくにマップエンジン
  - フィルター。フィルターで複数のビルダーを組み合わせることができる
  - enumによる安全な分岐
  - jsonでデータを定義してビルドする方法
- 読むときに明確にこれを理解する、と決めて読むとよさそうだ。これで洞窟を生成できる、これで最も大きい建物を求めることができる,とか。
- 理解できることが増えたが、何も見ずに新しい機能追加できるとは到底言えない。どこか似たような箇所を探しながら、書いていくことしかできない。悲しいことに。
* memo
** なぜfetchでplayer_entityが取れるのか
わからない。特定できないように見える。

#+begin_src rust
let player_entity = ecs.fetch::<Entity>();
#+end_src
** component取得
getで特定のpoolを取得できる。

#+begin_src rust
let target_pools = pools.get(wants_melee.target).unwrap(); # targetにはEntityが入ってる
#+end_src
** entity削除の方法
#+begin_src rust
  ecs.delete_entity(entity).expect("Unable to delete");;
#+end_src

#+begin_src rust
  entities.delete(entity).expect("Delete failed")
#+end_src

#+begin_src rust
  let entity = ecs.fetch::<Entity>();
  combatants.remove(*entity);
#+end_src

#+begin_src rust
  let mut battle = ecs.write_storage::<Battle>();
  battle.clear();
#+end_src
** entityを取得する2つの方法
fetchを使って取得すると、個別に取るのでイテレーションできない。entitiesだとイテレーションできる。
#+begin_src rust
  let entity = ecs.fetch::<Entity>();

  let entities = ecs.entities();
#+end_src
** entityをアイテム化
position componentをremove + InBackPackをinsertで、落ちているアイテムをインベントリへ入れた扱いにする。自由にcomponentを付け外せる。

#+begin_src rust
  for pickup in wants_pickup.join() {
      positions.remove(pickup.item);
      backpack
          .insert(pickup.item, InBackpack { owner: pickup.collected_by })
          .expect("Unable to insert backpack entry");

      if pickup.collected_by == *player_entity {
          gamelog
              .entries
              .push(format!("You pick up the {}.", names.get(pickup.item).unwrap().name));
      }
  }
#+end_src
** 組み合わせる
モジュールを組み合わせる方式でプログラムを設計する。

例えば、あまりよくないのは、敵という属性があってエンカウント可能にしたり、移動方法を決めることだ。それを、敵という属性、エンカウント可能という属性、移動方法の属性を作り、組み合わせて生成できるようにする。各機構は独立していて、変更しやすい。さらに、組み合わせることで新しい動きができる。
* todo
** TODO アイテム追加(チュートリアル)
:LOGBOOK:
CLOCK: [2022-07-23 Sat 23:32]--[2022-07-23 Sat 23:57] =>  0:25
CLOCK: [2022-07-23 Sat 23:07]--[2022-07-23 Sat 23:32] =>  0:25
CLOCK: [2022-07-23 Sat 18:08]--[2022-07-23 Sat 18:33] =>  0:25
CLOCK: [2022-07-23 Sat 17:29]--[2022-07-23 Sat 17:54] =>  0:25
:END:
** TODO 深い洞窟(チュートリアル)
** TODO 洞窟からDwarf Fortress(チュートリアル)
** TODO タウンポータル(チュートリアル)
** TODO 魔法のアイテムと鑑定(チュートリアル)
** TODO 効果(チュートリアル)
** TODO 呪われたアイテムと緩和(チュートリアル)
** TODO ステータスに効果を与えるアイテム(チュートリアル)
** TODO 魔法追加(チュートリアル)
** TODO ドラゴンに入る(チュートリアル)
** TODO マッシュルームの森(チュートリアル)
** TODO 深いマッシュルームの森(チュートリアル)
** TODO ミサイルと範囲攻撃(チュートリアル)
** TODO ログと実績カウント(チュートリアル)
** TODO テキストレイヤー(チュートリアル)
** TODO システムスキャン(チュートリアル)
** TODO 街に泊まる(チュートリアル)
** TODO 攻撃方法実装                                                     :8:
モンスターとプレイヤーの両方が攻撃方法を選べるようにする。
** TODO エンカウント時のモンスター決定                                   :8:
現在は固定している。

- 階層
- mapエンティティ
- ダンジョン種別
- レベル

から、エンカウントモンスターを決定する。2体出るときもある。mapの配置選択と似たような感じでいけそう。
** TODO 敵を倒した後に情報を取れるようにする                             :5:
現在はHPが0になったら削除してるので、例えば戦闘後に経験値を入れるといったことができない。
もっとも、battle自体に取得予定の経験値を保存しておけばいいので、モンスター自体を保持しておくのは不要か。
** TODO パーティシステム                                                         :8:
現在のプレイヤーは、マップオブジェクト=戦闘オブジェクトになっている。モンスターと同様に、エンティティを分割する。戦闘中のコマンドをどうするか決める。
** TODO HUD改良                                                          :5:
メッセージボックスと重なって見にくいので。新たに追加する余地もない。
** TODO 逃走コード分離                                                   :5:
全体的に分離されてないので、分離。
** TODO 戦闘系コード整理                                                 :5:
:LOGBOOK:
CLOCK: [2022-04-12 Tue 22:20]--[2022-04-12 Tue 22:45] =>  0:25
CLOCK: [2022-04-12 Tue 21:50]--[2022-04-12 Tue 22:15] =>  0:25
CLOCK: [2022-04-12 Tue 09:14]--[2022-04-12 Tue 09:39] =>  0:25
CLOCK: [2022-04-11 Mon 23:08]--[2022-04-11 Mon 23:33] =>  0:25
CLOCK: [2022-04-11 Mon 22:37]--[2022-04-11 Mon 23:02] =>  0:25
:END:
生死判定、勝利判定でごちゃついていて、どこにあるかわからない。
** TODO メッセージシステム                                               :13:
** TODO アイテム合成                                                    :13:
*** TODO 素材アイテムを追加                                             :5:
*** TODO UI作成
** TODO 戦闘システム                                                    :21:
*** TODO モンスターや仲間の攻撃方法の反映(かぎづめ、剣、パンチ)
*** TODO 装備武器
*** TODO コマンド…行動を選べる
*** TODO SP…武器やスキルの使用にはスタミナが必要
** TODO スキル                                                          :13:
戦闘や行動によってスキルが上がり、生存に有利な補正がかかる。
** TODO スロット・部位ごとの装備                                        :13:
4つのスロットがあり自由に装備できる。同じ部位の装備はできない。
** TODO 戦闘終了後1ターン経過しないと敵シンボルが消えないバグ
1ターン離れないと、もう一度エンカウントしておかしくなる。
** TODO 日本語を表示できるようにする
フォントをどうやって変えるのかがわからない。
** TODO マップのシード値を取れるようにする
:LOGBOOK:
CLOCK: [2022-05-22 Sun 00:47]--[2022-05-22 Sun 01:12] =>  0:25
:END:
シードを指定すると同じマップを生成できる。デバッグで便利。
** TODO 中立の敵
自分から接触しようとしてこないが、こっちから接触すると戦闘に入れる敵を追加する。動物とか。
** TODO エンカウント時のアニメーション
* References
#+begin_quote
- http://www.roguebasin.com/index.php/Articles :: ローグライクに関する情報が集約されている。
- http://www.roguebasin.com/index.php?title=How_to_Write_a_Roguelike_in_15_Steps :: ローグライクの作り方のヒント。
- https://countable.hatenablog.com/entry/20120717/1342505647 :: ↑ページの和訳
- https://techblog.sega.jp/entry/2018/08/27/100000 :: ゲームのテスト
- https://www.amazon.co.jp/Programming-Patterns-%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA%E3%81%AE%E5%95%8F%E9%A1%8C%E8%A7%A3%E6%B1%BA%E3%83%A1%E3%83%8B%E3%83%A5%E3%83%BC-impress-gear%E3%82%B7%E3%83%AA%E3%83%BC%E3%82%BA-ebook/dp/B015R0M8W0/ref=sr_1_1?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&dchild=1&keywords=%E3%82%B2%E3%83%BC%E3%83%A0+%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3&qid=1627347211&sr=8-1 :: ゲームデザインパターン
- https://www.amazon.co.jp/Hands-Rust-English-Herbert-Wolverson-ebook/dp/B09BK8Q6GY/ref=sr_1_1?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&crid=26DQRMWP5RQIE&keywords=hands-on+rust&qid=1651655347&sprefix=hands-on+ru%2Caps%2C196&sr=8-1 :: 2Dゲームのハンズオン
#+end_quote
* Archives
** DONE 移動システム
CLOSED: [2021-06-26 Sat 21:31]
- 地形判定
** DONE マップをtxtファイルから読み込む
CLOSED: [2021-06-26 Sat 10:19]
** DONE mainファイル分割
CLOSED: [2021-06-24 Thu 23:45]
同じ形にした。
** DONE テスト追加
CLOSED: [2021-06-24 Thu 23:46]
** DONE テスト環境構築
CLOSED: [2021-06-24 Thu 23:46]
- 単独RSpec
- カバレッジ
** DONE 複数ウィンドウエリア
CLOSED: [2021-06-28 Mon 10:23]
メッセージエリア、ステータスエリアなどウィンドウにエリアを追加する。
** DONE component追加
CLOSED: [2021-06-29 Tue 10:05]
game_objectを構成するもの。直に起動されることはなく、object_poolにもaddされない。
** DONE inputに分割
CLOSED: [2021-07-03 Sat 12:45]
今はすべてfield_stateでやっているが、characterのcomponentでやるようにする。
** DONE 別入力
CLOSED: [2021-07-03 Sat 12:45]
とりあえず敵をランダム移動できるようにする。
** DONE message_displayとmessageの分割
CLOSED: [2021-07-03 Sat 00:09]
statsを作ってそこにmessageを入れることで対応した。
** DONE テストrequireを自動化する
CLOSED: [2021-07-03 Sat 12:46]
めんどいので。
** DONE RSpec lintを追加した
CLOSED: [2021-07-04 Sun 00:10]
その日の気分で書きがちなところに基準ができた。必須だな。
** DONE object_poolオブジェクト間の接触判定
CLOSED: [2021-07-04 Sun 16:50]
地形判定とは異なる。オブジェクト層で起こる反応。
game_objectとmapではやり方が異なる。
** DONE boxつけるとずれる問題
CLOSED: [2021-07-04 Sun 16:50]
範囲がわかりづらいのでつけたいが、横方向がずれてる。
最初の一行だけ正しくて、改行以降はインデントがセットされてない、みたいな状況か。
#+begin_src
 aaa
aaa
aaa
#+end_src
かな。

一行ずつ出力することで解決した。
** DONE 基地メニュー
CLOSED: [2021-07-04 Sun 21:24]
2つ目state。
まだ内容はない。
** DONE ウィンドウ分割
CLOSED: [2021-07-04 Sun 21:24]
対応の必要なし。

メインウィンドウにすべて表示してたが、分割したほうがやりやすそうなので分割する。
マップウィンドウ、メッセージウィンドウとか。

その場合、ウィンドウ構成がモードによって変わる。どうやって表現すればよいだろう。
うーん、やっぱり面倒なのでメインウィンドウに座標挿入でよさそう。

stateによって使い回せるしな。
** DONE ゲームのおおまかな計画をやる
CLOSED: [2021-07-07 Wed 21:18]
バトルディッガーにしようとうっすら考えてたが、さすがに丸パクはできないので、混ぜよう。
そろそろどういう仕様にするか決めないといけない段階。

合成システムはカンタンに実装できて奥深そうなんだよな。
なのでシステム的にはディッガーよりハタ人間。

- アイテム合成
** DONE フォント
CLOSED: [2021-07-07 Wed 21:18]
- Press Start 2p :: 横幅的には一番
- misaki font :: 日本語対応
** DONE AIキャラが消える問題
CLOSED: [2021-07-07 Wed 21:18]
updateはAIキャラが動かない。
drawは全員消える。

game_objectにupdate, drawメソッドがあると、componentのdraw, updateが上書きされるため起こる。
ai_inputはcomponentでupdateを使って入力を生成してるが、player_inputはbutton_downのため、問題が起きたり起きなかったりする。

drawでは機能しないのはなぜだ。処理の順番か。field_stateの処理の順番を並べ替えるとできた。
object_pool.draw
map.draw
の順番にしないといけない。
** DONE カメラ追加
CLOSED: [2021-07-07 Wed 21:19]
** DONE アイテム追加する
CLOSED: [2021-07-08 Thu 10:12]
game_objectのアイテムと、所持品としてのアイテムをどう分ければよいだろう。
少なくとも単語を分けることが必要そう。

pickupはいいセンいってるが、動作っぽい。
まあいいか。後からどうするか明確になってからで。
** DONE プレイヤーキャラ以外を追加する
CLOSED: [2021-07-10 Sat 19:51]
表示文字をキャラによって変える必要がある。
inputによって分岐するようにした。
** DONE メニュー追加する
CLOSED: [2021-07-10 Sat 19:54]
画面追加だけできした。あとはカーソル移動とかか。
** DONE 設定のファイル化
CLOSED: [2021-07-10 Sat 19:55]
CDDAみたいに、設定類はすべてjsonかymlにする。
キャラクターは完了。とはいえシルエットだけなのでそんなにパラメータはない。
一応はできたが、これがtype objectと自信がもてない。characterはマップのシルエットとして使うくらいだからあまり必要性ないんだよな。
** DONE ターン実装
CLOSED: [2021-07-11 Sun 16:58]
getchでなんとなくターンぽくなっているが、移動以外でもターンが進んでしまう。
ターンが進むのは移動だけでよさそう。ローグライクだったら攻撃でも進むが、このゲームにはない。

player_inputかつ、移動ができたときだけexecuteフラグをオンにする。
** DONE characterをphysicsに分割する
CLOSED: [2021-07-11 Sun 16:58]
** DONE メニュー画面でカーソル移動できるようにする
CLOSED: [2021-07-12 Mon 21:16]
カーソル移動はメンドイのでしない。
** DONE Terrainクラスを作る(flyweightパターン)
CLOSED: [2021-07-12 Mon 21:16]
コードで直に地形判定をしているため。
地形用のクラスに切り分ける。
Terrainオブジェクトは状況非依存。つまり草地タイルはすべて同一。
なので、Terrainオブジェクトの格子にするのではなく、Terrainオブジェクトへのポインタにする。

- 地形情報にアクセスするために、worldから取る必要がなくなる。
- タイルから直にアクセスできるように。

まず文字列のマップをオブジェクトのマップにする。
どうやってやればいいんだ。
** DONE item_type
CLOSED: [2021-07-12 Mon 23:08]
作ろうと思ったがどうしよう。どういったプロパティを持つか。
- アイテムの中身

とりあえずイメージしやすいように名前を取り出せるようにする。
フィールドオブジェクトしては名前くらいしか必要でない。
** DONE インベントリ
CLOSED: [2021-07-14 Wed 00:58]
アイテムを拾ったとき、インベントリに追加する。
フィールドのはアイテムだが、それから別のオブジェクトにするか。

消費物、素材は単なる数値だが、装備はさまざまなパラメータを持った別オブジェクトだ。

単にオブジェクトを配列に追加するだけだが、仮で完了。
** DONE 衝突テスト
CLOSED: [2021-07-15 Thu 10:54]
衝突関係がややこしくなってきたのでテストで確かめることにする。
アイテム、キャラクタ(Ai, Player)
** DONE 自動操作テスト
CLOSED: [2021-07-16 Fri 10:37]
オートプレイさせたい。
system spec的な。
実際のキーボード入力をシミュレートする。

今はgetchで止まるのでできない。直にbutton_downを受け付けるようにするとかできないか。
そもそもgetchがよくない説もある。アニメーションは一切できないからな。
入力は任意でよくしたい。入力しなくてもゲームループは進む。
ターンベースだろうと、ゲームループは回すほうが表現豊か。

テストのときはゲームループを手動で進めればよいのでは。
キーボード入力はできないが、直に入力すればいい。一応できた。
** DONE utilsのload_jsonをデフォルト拡張子jsonにする
CLOSED: [2021-07-16 Fri 22:57]
** DONE コンパイル(断念)
CLOSED: [2021-07-16 Fri 22:59]
プレイヤーがいちいちbundle installとかしなくていいようにexeとか実行形式にしたいが、どうすればいいんだろう。
ruby-packerというのがあるらしい。
これで各環境用にコンパイルするようにすればいい。

大変そうなので断念。
** DONE インベントリに入れた時の挙動を変える
CLOSED: [2021-07-17 Sat 19:54]
素材系のときは、オブジェクトは保持せず単にカウントアップするだけにする。
武器とか消費アイテムはオブジェクトとして保持する。

item_typeにcountを保持することにした。やや不自然だが、itemから直に数を増やす操作ができたり、問い合わせがカンタンだ。いちいち初期化しておく必要もない。
** DONE アイテムをflyweightにする → item_typeを共通にする
CLOSED: [2021-07-17 Sat 19:57]
今はそれぞれ別のオブジェクトになっているので、共通オブジェクトにする。
jsonで読んでそれを各自インスタンス変数に入れるみたいなことってできるのかな。一気に全インスタンスを配列に入れ、配列をインスタンス変数にするとできる。

正確にいうと、item_typeが共通である。itemオブジェクト自体はユニークである。取得して消えたり座標を持ってるから。
** DONE 各state共通のinputを継承元に書く
CLOSED: [2021-07-18 Sun 15:02]
たとえば'c'はどのstateでも終了にしたい。

抽象クラスに移動した。
** DONE 移動AI
CLOSED: [2021-07-23 Fri 23:27]
経路選択をどうすればよいのだろう。斜めにターゲットがあるときどうやってジグザグを判定するか。
** DONE エンカウント追加
CLOSED: [2021-07-26 Mon 09:26]
戦闘モードへ遷移する。
** DONE パーティ状況を表示する
CLOSED: [2021-07-26 Mon 09:26]
まず戦闘のまえにこっちからやろう。
連れてる仲間、HP,SPを表示する。
** CLOSE Todo
CLOSED: [2022-04-07 Thu 10:35]
*** 戦闘後の移動
AIとは移動が競合するので、移動前のものになっている。
戦闘になった瞬間ゲームオブジェクトを消すので、移動できてもよさそう。あーでもそうすると逃げることができないのか。逃げたときは前の位置に移動したいところ。
勝利: 自分が動こうとしていた場所へ移動する。
逃走: 自分が動く前の場所へ移動する。
*** 非同期キーボードイベント
Gosuのキーボードだけ拝借できるかなと思ったが、Gosuのウィンドウにフォーカスが当たらないと検知できない。そりゃそうか。なのでncurses部分を書き換える必要がある。

現状ncurseの問題点。
- アニメーションが一切できない。
- フォントが変えられない。
- 描画単位が1マス。

CLIでも表現力が上がる。

テスト関係を変えないといけなそう。CIでgosu実行するとどうなるんだろう。
単体テストはOKそうだが、結合はどうなるんだろう。ゲームループ内で操作できるのか。
魅力的だが、別にあとでもよさそう。
*** 地図ファイルから敵やアイテム生成する
ランダムに加えて固定でも配置できるようにする。
地図と思ったが、移動パターンとか指定したいので結局テキストでやらないといけないか。
*** mapとcameraを分離
すべてのベースはmapの配列。
- character,itemを埋め込む。
- cameraのメソッドで配列を切り取って、描画している。
- 毎ターンリセット
よくないのは、すべてmapの配列操作で密結合していることだ。

書き換えるので、キャラがいると地形データが取れなくなる。別レイヤで処理したい。
banbandonではどうしてるのだろう。カメラとマップは分離しているように見える。

bbdではマップ上に描画しているのに対して、diggerでは画面のピクセルを指定して描画しないといけない違い。

結局地形判定はflyweightのworld配列でやってるので、関係なくなった。描画だけに使われる文字列配列。
*** 戦闘モード追加する
とりあえずstate切り替えだけ追加した。
戦闘のためにはいくつかのクラス、パラメータを用意してやる必要がある。

- party
- member
- enemy

#+begin_quote
http://www.lancarse.co.jp/blog/?p=194
#+end_quote
actorからパラメータをコピーして、1ターン分の結果を先に計算。
して、演出用メッセージを生成する。
コードの見通しがよくなる。
*** singletonを減らす
inventoryとかは似たような状況で、singletonになっている。
乱立するのが嫌なので1つのsingletonに、inventoryとかpartyとかを含むようにしたいな。
メッセージなどもそっちに保持させる。characterごとでなく。
*** 永続値をどこで持つか
ステートを切り替えても持ってないといけないものがある。
仲間のHPとか装備とか。そういうのをどこで保持すればいいんだろう。

とりあえずsignletonにしておけば良いかな。
*** 戦闘の方はmemberにする
エンカウント型にすると、map上のシンボルが複数のキャラクターを持つことがありうる。
現状のCharacterと合わなくなるような気がする。
map上とbattle上のcharacterは別物だ。

=>マップの方はpartyにする。
戦闘の方をcharacterに。
あまり直感的ではないな。

戦闘の方はmemberにするとか。属してるニュアンスは出る。

いろいろ違うので敵と仲間は別にしよう。かなり共通しているところもあるので組み合わせながら。
*** スキルはmemberで共通
敵もスキルを持ってる。
*** コマンドパターンについて考える
今の状況は、キーボードイべントとメソッドが直に結びついてる。
*** 達成バッジ
オブザーバパターン。
統計情報…移動した回数、経過ターン、倒した敵の数。
動機づけになる。
*** 不可視にする
視界が難しそう。AIにできるならプレイヤーにも追加すると面白そう。cataclysmみたいに、壁の向こう側は不可視にする。

気づくまでは、固定の動きをする。T字で左折する法則。
** CLOSE Todo(リファクタ)
*** カーソル系画面表示をリファクタリングする
カーソル、タブがだるい。
何かユーティリティを作ってもいい。
*** Inventoryシングルトンをやめる
inventoryをシングルトンにするのはやめよう。テストがだるい。
とはいえ、stateを限定しないデータなので、それなりの理由はある。
*** メッセージシステム
statsが持ってるのはおかしい気がする。
プレイヤーだけが知っていればいいことなので。
いちいちcharacterから辿るのはメンドイし、直感的でない。
** CLOSE 設計
*** 戦闘モード
#+begin_src

  oo`'._..---.___..-   oo`'._..---.___..-
 (_,-.        ,..'`  (_,-.        ,..'`
      `'.    ;            `'.    ;
         : :`                : :`
        _;_;                _;_;
ティラノ              ティラノ

ティラノ> 体当たりした
白瀬> 10のダメージを受けた
椿> 対物ライフル → ティラノに30のダメージ
石原> 木刀 → ティラノに5のダメージ

--------------------------------
→戦う　　|白瀬 HP: 55/20 SP: 40/30 **--- ****-
 逃げる　|椿　 HP: 90/84 SP: 50/20 ****- ***--
 アイテム|石原 HP: 80/80 SP: 50/24 ***** **---
 　　　　|
#+end_src
*** 拠点メニューモード
拠点。
#+begin_src
→休憩
 合成
 アイテム
 仲間
 装備
 セーブ
 ロード
#+end_src

フィールドではメニューにはアクセスしない。
ステータスやアイテムへのショートカットキーを用意する。
*** フィールドモード
- ターンベース
- イベントオブジェクトに接触して、別モードに遷移する

ステータス、アイテム、装備へのショートカットキーを用意する。
** DONE 戦闘モード追加
CLOSED: [2022-04-07 Thu 10:33]
:LOGBOOK:
CLOCK: [2022-04-06 Wed 22:41]--[2022-04-06 Wed 23:06] =>  0:25
CLOCK: [2022-04-06 Wed 22:16]--[2022-04-06 Wed 22:41] =>  0:25
CLOCK: [2022-04-06 Wed 21:42]--[2022-04-06 Wed 22:07] =>  0:25
CLOCK: [2022-04-06 Wed 09:45]--[2022-04-06 Wed 10:10] =>  0:25
CLOCK: [2022-04-06 Wed 00:19]--[2022-04-06 Wed 00:44] =>  0:25
CLOCK: [2022-04-05 Tue 23:34]--[2022-04-05 Tue 23:59] =>  0:25
CLOCK: [2022-04-05 Tue 09:15]--[2022-04-05 Tue 09:40] =>  0:25
CLOCK: [2022-04-05 Tue 00:21]--[2022-04-05 Tue 00:46] =>  0:25
CLOCK: [2022-04-04 Mon 23:56]--[2022-04-05 Tue 00:21] =>  0:25
CLOCK: [2022-04-04 Mon 23:13]--[2022-04-04 Mon 23:38] =>  0:25
CLOCK: [2022-04-04 Mon 22:48]--[2022-04-04 Mon 23:13] =>  0:25
CLOCK: [2022-04-04 Mon 22:07]--[2022-04-04 Mon 22:32] =>  0:25
CLOCK: [2022-04-04 Mon 21:42]--[2022-04-04 Mon 22:07] =>  0:25
CLOCK: [2022-04-04 Mon 21:16]--[2022-04-04 Mon 21:16] =>  0:00
CLOCK: [2022-04-04 Mon 20:51]--[2022-04-04 Mon 21:16] =>  0:25
CLOCK: [2022-04-03 Sun 22:32]--[2022-04-03 Sun 22:57] =>  0:25
CLOCK: [2022-04-03 Sun 22:07]--[2022-04-03 Sun 22:32] =>  0:25
CLOCK: [2022-04-03 Sun 21:42]--[2022-04-03 Sun 22:07] =>  0:25
CLOCK: [2022-04-03 Sun 21:04]--[2022-04-03 Sun 21:29] =>  0:25
CLOCK: [2022-04-03 Sun 20:25]--[2022-04-03 Sun 20:50] =>  0:25
CLOCK: [2022-04-03 Sun 20:00]--[2022-04-03 Sun 20:25] =>  0:25
CLOCK: [2022-04-03 Sun 19:35]--[2022-04-03 Sun 20:00] =>  0:25
CLOCK: [2022-04-03 Sun 19:10]--[2022-04-03 Sun 19:35] =>  0:25
CLOCK: [2022-04-03 Sun 16:30]--[2022-04-03 Sun 16:55] =>  0:25
CLOCK: [2022-04-03 Sun 15:37]--[2022-04-03 Sun 16:02] =>  0:25
CLOCK: [2022-04-03 Sun 15:06]--[2022-04-03 Sun 15:31] =>  0:25
CLOCK: [2022-04-03 Sun 14:41]--[2022-04-03 Sun 15:06] =>  0:25
CLOCK: [2022-04-03 Sun 14:00]--[2022-04-03 Sun 14:25] =>  0:25
CLOCK: [2022-04-03 Sun 13:35]--[2022-04-03 Sun 14:00] =>  0:25
CLOCK: [2022-04-03 Sun 12:08]--[2022-04-03 Sun 12:33] =>  0:25
CLOCK: [2022-04-03 Sun 11:30]--[2022-04-03 Sun 11:55] =>  0:25
:END:
接触したときにフラグを立てて、stateに入る。
wants_to_{}系か。
直にstateを変更するというより、フラグを使ってstateを間接的に移動する。
wants_to_meleeの個別要素にアクセスできない。

wants_to_attackを入れておいて、systemを一度回せばいいかな。
一度実行するたびにメッセージを表示して、enterの入力待ちにする。
** DONE GitHub Pagesにデプロイ
CLOSED: [2022-04-07 Thu 10:33]
** DONE 遭遇中の敵の情報を出す
CLOSED: [2022-04-09 Sat 09:56]
:LOGBOOK:
CLOCK: [2022-04-09 Sat 10:22]--[2022-04-09 Sat 10:47] =>  0:25
:END:
** DONE 1エンカウント対複数の敵に対応する
CLOSED: [2022-04-10 Sun 00:45]
:LOGBOOK:
CLOCK: [2022-04-10 Sun 10:44]--[2022-04-10 Sun 11:09] =>  0:25
CLOCK: [2022-04-10 Sun 00:26]--[2022-04-10 Sun 00:45] =>  0:19
CLOCK: [2022-04-09 Sat 23:11]--[2022-04-09 Sat 23:36] =>  0:25
CLOCK: [2022-04-09 Sat 22:39]--[2022-04-09 Sat 23:04] =>  0:25
CLOCK: [2022-04-09 Sat 22:14]--[2022-04-09 Sat 22:39] =>  0:25
CLOCK: [2022-04-09 Sat 21:49]--[2022-04-09 Sat 22:14] =>  0:25
CLOCK: [2022-04-09 Sat 20:14]--[2022-04-09 Sat 20:39] =>  0:25
CLOCK: [2022-04-09 Sat 19:49]--[2022-04-09 Sat 20:14] =>  0:25
CLOCK: [2022-04-09 Sat 19:24]--[2022-04-09 Sat 19:49] =>  0:25
CLOCK: [2022-04-09 Sat 18:59]--[2022-04-09 Sat 19:24] =>  0:25
CLOCK: [2022-04-09 Sat 17:51]--[2022-04-09 Sat 18:16] =>  0:25
CLOCK: [2022-04-09 Sat 17:26]--[2022-04-09 Sat 17:51] =>  0:25
CLOCK: [2022-04-09 Sat 17:01]--[2022-04-09 Sat 17:26] =>  0:25
CLOCK: [2022-04-09 Sat 16:36]--[2022-04-09 Sat 17:01] =>  0:25
CLOCK: [2022-04-09 Sat 11:35]--[2022-04-09 Sat 12:00] =>  0:25
CLOCK: [2022-04-09 Sat 11:02]--[2022-04-09 Sat 11:27] =>  0:25
CLOCK: [2022-04-09 Sat 09:56]--[2022-04-09 Sat 10:21] =>  0:25
CLOCK: [2022-04-08 Fri 23:09]--[2022-04-08 Fri 23:34] =>  0:25
CLOCK: [2022-04-08 Fri 21:39]--[2022-04-08 Fri 22:04] =>  0:25
:END:
今はエンカウントシンボルと敵が1対1なので、自由度が低い。
battle_entityを作って戦闘は完全にそっちに移す。
** DONE 戦闘終了後にマップentityを削除する
CLOSED: [2022-04-10 Sun 00:45]
wants_to_encounterで元entityを保持してるので、そこから削除できないか。
** DONE 使わない部分を消す
CLOSED: [2022-04-10 Sun 00:45]
:LOGBOOK:
CLOCK: [2022-04-08 Fri 21:13]--[2022-04-08 Fri 21:38] =>  0:25
CLOCK: [2022-04-07 Thu 23:48]--[2022-04-08 Fri 00:13] =>  0:25
:END:
- 既存の戦闘部分は使わないので消す
- 遠距離アイテムは消す
** DONE 勝利したときに戦闘結果を表示する
CLOSED: [2022-04-10 Sun 16:03]
:LOGBOOK:
CLOCK: [2022-04-10 Sun 11:15]--[2022-04-10 Sun 11:40] =>  0:25
CLOCK: [2022-04-10 Sun 10:07]--[2022-04-10 Sun 10:32] =>  0:25
:END:
** DONE 逃げるときの確率分岐
CLOSED: [2022-04-10 Sun 16:54]
:LOGBOOK:
CLOCK: [2022-04-10 Sun 16:34]--[2022-04-10 Sun 16:54] =>  0:20
CLOCK: [2022-04-10 Sun 16:06]--[2022-04-10 Sun 16:31] =>  0:25
:END:
今は100％なので、確率で失敗してターンを進行させる。
** DONE 敵一覧を真ん中寄せにする
CLOSED: [2022-04-10 Sun 23:34]
:LOGBOOK:
CLOCK: [2022-04-10 Sun 23:26]--[2022-04-10 Sun 23:34] =>  0:08
CLOCK: [2022-04-10 Sun 22:54]--[2022-04-10 Sun 23:19] =>  0:25
CLOCK: [2022-04-10 Sun 22:29]--[2022-04-10 Sun 22:54] =>  0:25
CLOCK: [2022-04-10 Sun 22:04]--[2022-04-10 Sun 22:29] =>  0:25
CLOCK: [2022-04-10 Sun 20:42]--[2022-04-10 Sun 21:07] =>  0:25
:END:
2体いるときは2体で真ん中に、倒して1体になったら1体で真ん中寄せにする。
** DONE 1体倒してから逃げるとエラー
CLOSED: [2022-04-11 Mon 21:09]
wants_to_meleeが残っていて、おかしくなっていたよう。
ターン毎に、リセットするようにした。
確実に前の状態を残さないようにするとバグになりにくそう。
** DONE 戦闘用エンティティであることを明示する
CLOSED: [2022-04-11 Mon 22:31]
:LOGBOOK:
CLOCK: [2022-04-11 Mon 22:03]--[2022-04-11 Mon 22:28] =>  0:25
:END:
現在は、combat_stats, monsterコンポーネントを持つものを敵の戦闘エンティティとしている…みたいな感じ。
わかりにくいので直したい。

combat_stats を持つ=戦闘エンティティで問題ない。monster, playerがあるのは区別が必要なので仕方ない。
なのでOK。
** DONE パーティクル追加
CLOSED: [2022-04-16 Sat 11:33]
:LOGBOOK:
CLOCK: [2022-04-16 Sat 11:28]--[2022-04-16 Sat 11:33] =>  0:05
CLOCK: [2022-04-16 Sat 10:51]--[2022-04-16 Sat 11:16] =>  0:25
CLOCK: [2022-04-16 Sat 10:26]--[2022-04-16 Sat 10:51] =>  0:25
CLOCK: [2022-04-16 Sat 09:51]--[2022-04-16 Sat 10:16] =>  0:25
CLOCK: [2022-04-15 Fri 23:12]--[2022-04-15 Fri 23:37] =>  0:25
CLOCK: [2022-04-15 Fri 22:36]--[2022-04-15 Fri 23:01] =>  0:25
:END:

チュートリアルのパーティクルはマップ用。
positionにライフタイムのあるentityを配置して、擬似的にアニメーションにしている。
entityにすることで、map描画システムを使い、map上を上書きする形で表示できる。
戦闘ではprintしてるので、そのまま使うことはできない。printごとに座標計算して指定してるので、重ねるためにはロジックをコピペしないといけない。

builderの実装方法は参考になりそうなので、とりあえずコピペ追加。
** DONE フィールドでHPがリアルタイムに反映されてない
CLOSED: [2022-04-16 Sat 17:29]
戦闘に入るとダメージが反映される。
field_stateでdamage_systemが動いてないためだった。
** DONE 食料追加
CLOSED: [2022-04-16 Sat 17:29]
:LOGBOOK:
CLOCK: [2022-04-16 Sat 17:01]--[2022-04-16 Sat 17:26] =>  0:25
CLOCK: [2022-04-16 Sat 16:31]--[2022-04-16 Sat 16:56] =>  0:25
CLOCK: [2022-04-16 Sat 16:06]--[2022-04-16 Sat 16:31] =>  0:25
CLOCK: [2022-04-16 Sat 15:18]--[2022-04-16 Sat 15:43] =>  0:25
CLOCK: [2022-04-15 Fri 21:33]--[2022-04-15 Fri 21:58] =>  0:25
:END:
** CLOSE 画像背景
CLOSED: [2022-04-16 Sat 22:58]
:LOGBOOK:
CLOCK: [2022-04-16 Sat 22:21]--[2022-04-16 Sat 22:46] =>  0:25
CLOCK: [2022-04-16 Sat 21:14]--[2022-04-16 Sat 21:39] =>  0:25
CLOCK: [2022-04-16 Sat 20:46]--[2022-04-16 Sat 21:11] =>  0:25
CLOCK: [2022-04-16 Sat 20:21]--[2022-04-16 Sat 20:46] =>  0:25
CLOCK: [2022-04-16 Sat 19:49]--[2022-04-16 Sat 20:14] =>  0:25
:END:
チュートリアルの内容。
LEX paintがWINEでうまく実行できない。
変換ツールもうまく機能してないので、一旦チュートリアルのを流用して後回しか。システムだけ入れてコメントアウト。
** DONE プレイヤーと戦闘エンティティを分離する
CLOSED: [2022-04-17 Sun 19:51]
:LOGBOOK:
CLOCK: [2022-04-17 Sun 19:19]--[2022-04-17 Sun 19:44] =>  0:25
CLOCK: [2022-04-17 Sun 17:21]--[2022-04-17 Sun 17:46] =>  0:25
CLOCK: [2022-04-17 Sun 16:50]--[2022-04-17 Sun 17:15] =>  0:25
CLOCK: [2022-04-17 Sun 16:16]--[2022-04-17 Sun 16:41] =>  0:25
CLOCK: [2022-04-17 Sun 15:23]--[2022-04-17 Sun 15:48] =>  0:25
CLOCK: [2022-04-17 Sun 14:58]--[2022-04-17 Sun 15:23] =>  0:25
CLOCK: [2022-04-17 Sun 14:30]--[2022-04-17 Sun 14:55] =>  0:25
CLOCK: [2022-04-17 Sun 14:02]--[2022-04-17 Sun 14:27] =>  0:25
CLOCK: [2022-04-17 Sun 11:34]--[2022-04-17 Sun 11:59] =>  0:25
CLOCK: [2022-04-17 Sun 11:02]--[2022-04-17 Sun 11:27] =>  0:25
CLOCK: [2022-04-17 Sun 10:37]--[2022-04-17 Sun 11:02] =>  0:25
CLOCK: [2022-04-17 Sun 10:11]--[2022-04-17 Sun 10:36] =>  0:25
CLOCK: [2022-04-16 Sat 23:27]--[2022-04-16 Sat 23:52] =>  0:25
CLOCK: [2022-04-16 Sat 23:00]--[2022-04-16 Sat 23:25] =>  0:25
:END:

分離した。影響範囲が広い。
** DONE 再装備するとアイテムが消える
CLOSED: [2022-04-17 Sun 20:06]
装備品のownerがキャラになっていたため、インベントリに表示されてないというものだった。
装備中のものはownerが各戦闘用entityになり、装備してないとownerはplayer_entityになる。
party_entityとかにしたほうがいいかもな。
ややこしい。
** DONE Design Doc
CLOSED: [2022-04-18 Mon 00:47]
:LOGBOOK:
CLOCK: [2022-04-18 Mon 00:25]--[2022-04-18 Mon 00:47] =>  0:22
CLOCK: [2022-04-17 Sun 22:20]--[2022-04-17 Sun 22:45] =>  0:25
CLOCK: [2022-04-17 Sun 21:12]--[2022-04-17 Sun 21:37] =>  0:25
CLOCK: [2022-04-17 Sun 20:39]--[2022-04-17 Sun 21:04] =>  0:25
CLOCK: [2022-04-17 Sun 20:11]--[2022-04-17 Sun 20:36] =>  0:25
CLOCK: [2022-04-15 Fri 22:05]--[2022-04-15 Fri 22:30] =>  0:25
:END:
** DONE mapをリファクタ(チュートリアル)
CLOSED: [2022-05-14 Sat 22:03] DEADLINE: <2022-05-31 Tue>
:LOGBOOK:
CLOCK: [2022-05-14 Sat 20:40]--[2022-05-14 Sat 21:05] =>  0:25
CLOCK: [2022-05-14 Sat 20:05]--[2022-05-14 Sat 20:30] =>  0:25
CLOCK: [2022-05-14 Sat 17:51]--[2022-05-14 Sat 18:16] =>  0:25
CLOCK: [2022-05-14 Sat 11:22]--[2022-05-14 Sat 11:47] =>  0:25
CLOCK: [2022-05-14 Sat 00:33]--[2022-05-14 Sat 00:58] =>  0:25
CLOCK: [2022-05-13 Fri 23:48]--[2022-05-14 Sat 00:13] =>  0:25
CLOCK: [2022-05-13 Fri 23:12]--[2022-05-13 Fri 23:37] =>  0:25
CLOCK: [2022-05-13 Fri 10:39]--[2022-05-13 Fri 11:04] =>  0:25
CLOCK: [2022-05-13 Fri 10:09]--[2022-05-13 Fri 10:34] =>  0:25
CLOCK: [2022-05-13 Fri 09:43]--[2022-05-13 Fri 10:08] =>  0:25
CLOCK: [2022-05-13 Fri 00:08]--[2022-05-13 Fri 00:33] =>  0:25
CLOCK: [2022-05-12 Thu 10:26]--[2022-05-12 Thu 10:51] =>  0:25
CLOCK: [2022-05-12 Thu 09:56]--[2022-05-12 Thu 10:21] =>  0:25
CLOCK: [2022-05-12 Thu 00:30]--[2022-05-12 Thu 00:55] =>  0:25
CLOCK: [2022-05-12 Thu 00:01]--[2022-05-12 Thu 00:26] =>  0:25
CLOCK: [2022-05-11 Wed 10:26]--[2022-05-11 Wed 10:51] =>  0:25
CLOCK: [2022-05-09 Mon 10:30]--[2022-05-09 Mon 10:55] =>  0:25
CLOCK: [2022-05-08 Sun 10:58]--[2022-05-08 Sun 11:23] =>  0:25
CLOCK: [2022-05-08 Sun 00:35]--[2022-05-08 Sun 01:00] =>  0:25
CLOCK: [2022-05-07 Sat 22:50]--[2022-05-07 Sat 23:15] =>  0:25
CLOCK: [2022-05-07 Sat 20:42]--[2022-05-07 Sat 21:07] =>  0:25
CLOCK: [2022-05-07 Sat 20:09]--[2022-05-07 Sat 20:34] =>  0:25
CLOCK: [2022-05-07 Sat 19:34]--[2022-05-07 Sat 19:59] =>  0:25
CLOCK: [2022-05-07 Sat 19:08]--[2022-05-07 Sat 19:33] =>  0:25
CLOCK: [2022-05-07 Sat 17:18]--[2022-05-07 Sat 17:43] =>  0:25
CLOCK: [2022-05-07 Sat 16:50]--[2022-05-07 Sat 17:15] =>  0:25
CLOCK: [2022-05-07 Sat 14:20]--[2022-05-07 Sat 14:45] =>  0:25
CLOCK: [2022-05-07 Sat 13:49]--[2022-05-07 Sat 14:14] =>  0:25
CLOCK: [2022-05-07 Sat 13:13]--[2022-05-07 Sat 13:38] =>  0:25
CLOCK: [2022-05-07 Sat 11:13]--[2022-05-07 Sat 11:39] =>  0:26
CLOCK: [2022-05-07 Sat 10:33]--[2022-05-07 Sat 10:58] =>  0:25
CLOCK: [2022-05-06 Fri 23:14]--[2022-05-06 Fri 23:39] =>  0:25
CLOCK: [2022-05-06 Fri 09:41]--[2022-05-06 Fri 10:06] =>  0:25
CLOCK: [2022-05-05 Thu 22:39]--[2022-05-05 Thu 23:04] =>  0:25
CLOCK: [2022-05-05 Thu 22:05]--[2022-05-05 Thu 22:30] =>  0:25
CLOCK: [2022-05-05 Thu 21:37]--[2022-05-05 Thu 22:02] =>  0:25
CLOCK: [2022-05-05 Thu 20:20]--[2022-05-05 Thu 20:45] =>  0:25
CLOCK: [2022-05-05 Thu 17:52]--[2022-05-05 Thu 18:17] =>  0:25
CLOCK: [2022-05-05 Thu 16:00]--[2022-05-05 Thu 16:25] =>  0:25
CLOCK: [2022-05-05 Thu 15:28]--[2022-05-05 Thu 15:53] =>  0:25
CLOCK: [2022-05-05 Thu 14:42]--[2022-05-05 Thu 15:07] =>  0:25
CLOCK: [2022-05-05 Thu 12:03]--[2022-05-05 Thu 12:28] =>  0:25
CLOCK: [2022-05-05 Thu 11:34]--[2022-05-05 Thu 11:59] =>  0:25
CLOCK: [2022-05-05 Thu 10:44]--[2022-05-05 Thu 11:09] =>  0:25
CLOCK: [2022-05-05 Thu 10:16]--[2022-05-05 Thu 10:41] =>  0:25
CLOCK: [2022-05-04 Wed 23:19]--[2022-05-04 Wed 23:44] =>  0:25
CLOCK: [2022-05-04 Wed 22:54]--[2022-05-04 Wed 23:19] =>  0:25
CLOCK: [2022-05-04 Wed 20:07]--[2022-05-04 Wed 20:32] =>  0:25
CLOCK: [2022-05-04 Wed 18:11]--[2022-05-04 Wed 18:36] =>  0:25
CLOCK: [2022-05-04 Wed 17:32]--[2022-05-04 Wed 17:57] =>  0:25
CLOCK: [2022-05-03 Tue 09:51]--[2022-05-03 Tue 10:16] =>  0:25
CLOCK: [2022-04-29 Fri 09:31]--[2022-04-29 Fri 09:56] =>  0:25
CLOCK: [2022-04-29 Fri 08:26]--[2022-04-29 Fri 08:51] =>  0:25
CLOCK: [2022-04-24 Sun 23:31]--[2022-04-24 Sun 23:56] =>  0:25
CLOCK: [2022-04-24 Sun 22:13]--[2022-04-24 Sun 22:38] =>  0:25
CLOCK: [2022-04-24 Sun 21:44]--[2022-04-24 Sun 22:09] =>  0:25
CLOCK: [2022-04-24 Sun 20:17]--[2022-04-24 Sun 20:42] =>  0:25
CLOCK: [2022-04-23 Sat 17:20]--[2022-04-23 Sat 17:45] =>  0:25
CLOCK: [2022-04-23 Sat 16:41]--[2022-04-23 Sat 17:06] =>  0:25
CLOCK: [2022-04-21 Thu 22:43]--[2022-04-21 Thu 23:08] =>  0:25
CLOCK: [2022-04-21 Thu 10:38]--[2022-04-21 Thu 11:03] =>  0:25
CLOCK: [2022-04-21 Thu 10:12]--[2022-04-21 Thu 10:37] =>  0:25
CLOCK: [2022-04-20 Wed 23:30]--[2022-04-20 Wed 23:55] =>  0:25
:END:
** DONE mapフィルタ
CLOSED: [2022-05-16 Mon 00:42]
:LOGBOOK:
CLOCK: [2022-05-15 Sun 22:13]--[2022-05-15 Sun 22:38] =>  0:25
CLOCK: [2022-05-15 Sun 21:40]--[2022-05-15 Sun 22:05] =>  0:25
CLOCK: [2022-05-15 Sun 20:57]--[2022-05-15 Sun 21:22] =>  0:25
CLOCK: [2022-05-15 Sun 20:30]--[2022-05-15 Sun 20:55] =>  0:25
CLOCK: [2022-05-15 Sun 19:59]--[2022-05-15 Sun 20:24] =>  0:25
CLOCK: [2022-05-15 Sun 19:30]--[2022-05-15 Sun 19:55] =>  0:25
CLOCK: [2022-05-15 Sun 17:48]--[2022-05-15 Sun 18:13] =>  0:25
CLOCK: [2022-05-15 Sun 14:56]--[2022-05-15 Sun 15:21] =>  0:25
CLOCK: [2022-05-15 Sun 14:31]--[2022-05-15 Sun 14:56] =>  0:25
CLOCK: [2022-05-15 Sun 13:53]--[2022-05-15 Sun 14:18] =>  0:25
CLOCK: [2022-05-15 Sun 11:26]--[2022-05-15 Sun 11:51] =>  0:25
CLOCK: [2022-05-15 Sun 10:46]--[2022-05-15 Sun 11:11] =>  0:25
CLOCK: [2022-05-14 Sat 22:33]--[2022-05-14 Sat 22:58] =>  0:25
CLOCK: [2022-05-14 Sat 22:06]--[2022-05-14 Sat 22:31] =>  0:25
:END:
** DONE ドア追加(チュートリアル)
CLOSED: [2022-05-18 Wed 09:24]
:LOGBOOK:
CLOCK: [2022-05-18 Wed 00:17]--[2022-05-18 Wed 00:42] =>  0:25
CLOCK: [2022-05-17 Tue 23:34]--[2022-05-17 Tue 23:59] =>  0:25
CLOCK: [2022-05-16 Mon 23:37]--[2022-05-17 Tue 00:02] =>  0:25
CLOCK: [2022-05-16 Mon 10:34]--[2022-05-16 Mon 10:59] =>  0:25
CLOCK: [2022-05-16 Mon 10:04]--[2022-05-16 Mon 10:29] =>  0:25
CLOCK: [2022-05-16 Mon 09:28]--[2022-05-16 Mon 09:53] =>  0:25
CLOCK: [2022-05-16 Mon 00:42]--[2022-05-16 Mon 01:07] =>  0:25
:END:
** DONE Warningつぶし
CLOSED: [2022-05-18 Wed 09:55]
:LOGBOOK:
CLOCK: [2022-05-18 Wed 09:25]--[2022-05-18 Wed 09:50] =>  0:25
:END:
** DONE builder理解
CLOSED: [2022-05-18 Wed 10:30]
:LOGBOOK:
CLOCK: [2022-05-18 Wed 09:55]--[2022-05-18 Wed 10:20] =>  0:25
:END:
** DONE カメラ導入(チュートリアル)
CLOSED: [2022-05-20 Fri 10:48]
:LOGBOOK:
CLOCK: [2022-05-20 Fri 10:39]--[2022-05-20 Fri 10:48] =>  0:09
CLOCK: [2022-05-20 Fri 00:42]--[2022-05-20 Fri 01:07] =>  0:25
CLOCK: [2022-05-19 Thu 22:49]--[2022-05-19 Thu 23:14] =>  0:25
CLOCK: [2022-05-19 Thu 21:43]--[2022-05-19 Thu 22:08] =>  0:25
CLOCK: [2022-05-19 Thu 10:29]--[2022-05-19 Thu 10:54] =>  0:25
CLOCK: [2022-05-19 Thu 10:04]--[2022-05-19 Thu 10:29] =>  0:25
CLOCK: [2022-05-19 Thu 09:38]--[2022-05-19 Thu 10:03] =>  0:25
CLOCK: [2022-05-18 Wed 23:27]--[2022-05-18 Wed 23:52] =>  0:25
CLOCK: [2022-05-18 Wed 10:30]--[2022-05-18 Wed 10:55] =>  0:25
:END:
** DONE getで取れるところのリファクタ
CLOSED: [2022-05-28 Sat 21:59]
#+begin_src rust
hc = hunger_clock.get(entity);
#+end_src
のように、entityさえわかっていればgetで属性をコンポーネントを取得できる。いちいちforに長く書く必要がない。
** DONE データのjsonファイル化(チュートリアル)                           :8:
CLOSED: [2022-05-28 Sat 22:03]
:LOGBOOK:
CLOCK: [2022-05-28 Sat 21:49]--[2022-05-28 Sat 22:03] =>  0:14
CLOCK: [2022-05-28 Sat 21:19]--[2022-05-28 Sat 21:44] =>  0:25
CLOCK: [2022-05-28 Sat 20:39]--[2022-05-28 Sat 21:04] =>  0:25
CLOCK: [2022-05-28 Sat 16:53]--[2022-05-28 Sat 17:18] =>  0:25
CLOCK: [2022-05-28 Sat 16:18]--[2022-05-28 Sat 16:43] =>  0:25
CLOCK: [2022-05-28 Sat 15:52]--[2022-05-28 Sat 16:17] =>  0:25
CLOCK: [2022-05-28 Sat 15:16]--[2022-05-28 Sat 15:41] =>  0:25
CLOCK: [2022-05-28 Sat 14:37]--[2022-05-28 Sat 15:02] =>  0:25
CLOCK: [2022-05-28 Sat 11:34]--[2022-05-28 Sat 11:59] =>  0:25
CLOCK: [2022-05-27 Fri 10:37]--[2022-05-27 Fri 11:02] =>  0:25
CLOCK: [2022-05-22 Sun 19:47]--[2022-05-22 Sun 20:12] =>  0:25
CLOCK: [2022-05-22 Sun 19:21]--[2022-05-22 Sun 19:46] =>  0:25
CLOCK: [2022-05-22 Sun 18:41]--[2022-05-22 Sun 19:06] =>  0:25
CLOCK: [2022-05-22 Sun 18:16]--[2022-05-22 Sun 18:41] =>  0:25
CLOCK: [2022-05-22 Sun 16:54]--[2022-05-22 Sun 17:19] =>  0:25
CLOCK: [2022-05-22 Sun 16:17]--[2022-05-22 Sun 16:42] =>  0:25
CLOCK: [2022-05-22 Sun 12:32]--[2022-05-22 Sun 12:57] =>  0:25
CLOCK: [2022-05-22 Sun 11:27]--[2022-05-22 Sun 11:52] =>  0:25
CLOCK: [2022-05-22 Sun 11:01]--[2022-05-22 Sun 11:26] =>  0:25
CLOCK: [2022-05-21 Sat 23:30]--[2022-05-21 Sat 23:55] =>  0:25
CLOCK: [2022-05-21 Sat 22:46]--[2022-05-21 Sat 23:11] =>  0:25
CLOCK: [2022-05-21 Sat 21:38]--[2022-05-21 Sat 22:03] =>  0:25
CLOCK: [2022-05-21 Sat 20:50]--[2022-05-21 Sat 21:15] =>  0:25
CLOCK: [2022-05-21 Sat 18:47]--[2022-05-21 Sat 19:12] =>  0:25
CLOCK: [2022-05-21 Sat 18:22]--[2022-05-21 Sat 18:47] =>  0:25
CLOCK: [2022-05-21 Sat 17:43]--[2022-05-21 Sat 18:08] =>  0:25
CLOCK: [2022-05-21 Sat 16:35]--[2022-05-21 Sat 17:00] =>  0:25
CLOCK: [2022-05-21 Sat 16:08]--[2022-05-21 Sat 16:33] =>  0:25
CLOCK: [2022-05-21 Sat 11:20]--[2022-05-21 Sat 11:45] =>  0:25
CLOCK: [2022-04-18 Mon 22:17]--[2022-04-18 Mon 22:42] =>  0:25
CLOCK: [2022-04-18 Mon 21:40]--[2022-04-18 Mon 22:05] =>  0:25
CLOCK: [2022-04-18 Mon 10:04]--[2022-04-18 Mon 10:29] =>  0:25
:END:
** DONE 街追加(チュートリアル)                                          :13:
CLOSED: [2022-06-04 Sat 16:28]
:LOGBOOK:
CLOCK: [2022-06-04 Sat 16:10]--[2022-06-04 Sat 16:28] =>  0:18
CLOCK: [2022-06-04 Sat 12:46]--[2022-06-04 Sat 13:11] =>  0:25
CLOCK: [2022-06-03 Fri 23:38]--[2022-06-04 Sat 00:03] =>  0:25
CLOCK: [2022-06-03 Fri 10:21]--[2022-06-03 Fri 10:46] =>  0:25
CLOCK: [2022-06-03 Fri 09:53]--[2022-06-03 Fri 10:18] =>  0:25
CLOCK: [2022-06-03 Fri 01:05]--[2022-06-03 Fri 01:30] =>  0:25
CLOCK: [2022-06-02 Thu 10:06]--[2022-06-02 Thu 10:31] =>  0:25
CLOCK: [2022-06-02 Thu 00:36]--[2022-06-02 Thu 01:01] =>  0:25
CLOCK: [2022-06-02 Thu 00:06]--[2022-06-02 Thu 00:31] =>  0:25
CLOCK: [2022-06-01 Wed 09:57]--[2022-06-01 Wed 10:22] =>  0:25
CLOCK: [2022-06-01 Wed 09:21]--[2022-06-01 Wed 09:46] =>  0:25
CLOCK: [2022-06-01 Wed 00:00]--[2022-06-01 Wed 00:25] =>  0:25
CLOCK: [2022-05-31 Tue 23:04]--[2022-05-31 Tue 23:29] =>  0:25
CLOCK: [2022-05-31 Tue 22:29]--[2022-05-31 Tue 22:54] =>  0:25
CLOCK: [2022-05-31 Tue 22:04]--[2022-05-31 Tue 22:29] =>  0:25
CLOCK: [2022-05-31 Tue 00:19]--[2022-05-31 Tue 00:44] =>  0:25
CLOCK: [2022-05-30 Mon 23:53]--[2022-05-31 Tue 00:18] =>  0:25
CLOCK: [2022-05-30 Mon 10:18]--[2022-05-30 Mon 10:43] =>  0:25
CLOCK: [2022-05-29 Sun 23:23]--[2022-05-29 Sun 23:48] =>  0:25
CLOCK: [2022-05-29 Sun 22:58]--[2022-05-29 Sun 23:23] =>  0:25
CLOCK: [2022-05-29 Sun 22:19]--[2022-05-29 Sun 22:44] =>  0:25
CLOCK: [2022-05-29 Sun 21:47]--[2022-05-29 Sun 22:12] =>  0:25
CLOCK: [2022-05-29 Sun 21:12]--[2022-05-29 Sun 21:37] =>  0:25
CLOCK: [2022-05-29 Sun 17:42]--[2022-05-29 Sun 18:07] =>  0:25
CLOCK: [2022-05-29 Sun 17:00]--[2022-05-29 Sun 17:25] =>  0:25
CLOCK: [2022-05-29 Sun 16:28]--[2022-05-29 Sun 16:53] =>  0:25
CLOCK: [2022-05-29 Sun 15:59]--[2022-05-29 Sun 16:24] =>  0:25
CLOCK: [2022-05-29 Sun 12:07]--[2022-05-29 Sun 12:32] =>  0:25
CLOCK: [2022-05-28 Sat 23:22]--[2022-05-28 Sat 23:47] =>  0:25
CLOCK: [2022-05-28 Sat 22:56]--[2022-05-28 Sat 23:21] =>  0:25
CLOCK: [2022-05-28 Sat 22:29]--[2022-05-28 Sat 22:54] =>  0:25
:END:
** DONE 戦闘が終了しないバグ
CLOSED: [2022-06-08 Wed 09:51]
:LOGBOOK:
CLOCK: [2022-06-08 Wed 09:44]--[2022-06-08 Wed 09:51] =>  0:07
CLOCK: [2022-06-07 Tue 23:52]--[2022-06-08 Wed 00:17] =>  0:25
CLOCK: [2022-06-07 Tue 23:27]--[2022-06-07 Tue 23:52] =>  0:25
CLOCK: [2022-06-07 Tue 22:45]--[2022-06-07 Tue 23:10] =>  0:25
CLOCK: [2022-06-07 Tue 22:20]--[2022-06-07 Tue 22:45] =>  0:25
CLOCK: [2022-06-07 Tue 21:54]--[2022-06-07 Tue 22:19] =>  0:25
:END:
戦闘関連のリファクタをした。あまりよくないな…。
** DONE 複数の能力(チュートリアル)                                       :5:
CLOSED: [2022-06-08 Wed 21:51]
:LOGBOOK:
CLOCK: [2022-06-08 Wed 10:10]--[2022-06-08 Wed 10:35] =>  0:25
CLOCK: [2022-06-08 Wed 00:17]--[2022-06-08 Wed 00:42] =>  0:25
CLOCK: [2022-06-07 Tue 21:26]--[2022-06-07 Tue 21:51] =>  0:25
CLOCK: [2022-06-05 Sun 14:34]--[2022-06-05 Sun 14:59] =>  0:25
CLOCK: [2022-06-05 Sun 11:39]--[2022-06-05 Sun 12:04] =>  0:25
CLOCK: [2022-06-05 Sun 11:08]--[2022-06-05 Sun 11:33] =>  0:25
CLOCK: [2022-06-05 Sun 10:43]--[2022-06-05 Sun 11:08] =>  0:25
CLOCK: [2022-06-05 Sun 00:43]--[2022-06-05 Sun 01:08] =>  0:25
CLOCK: [2022-06-05 Sun 00:08]--[2022-06-05 Sun 00:33] =>  0:25
CLOCK: [2022-06-04 Sat 23:21]--[2022-06-04 Sat 23:46] =>  0:25
CLOCK: [2022-06-04 Sat 22:56]--[2022-06-04 Sat 23:21] =>  0:25
CLOCK: [2022-06-04 Sat 22:30]--[2022-06-04 Sat 22:55] =>  0:25
CLOCK: [2022-06-04 Sat 20:11]--[2022-06-04 Sat 20:36] =>  0:25
CLOCK: [2022-06-04 Sat 19:41]--[2022-06-04 Sat 20:06] =>  0:25
CLOCK: [2022-06-04 Sat 17:01]--[2022-06-04 Sat 17:26] =>  0:25
CLOCK: [2022-06-04 Sat 16:29]--[2022-06-04 Sat 16:54] =>  0:25
:END:
** DONE 画面サイズを大きくする
CLOSED: [2022-06-08 Wed 21:52]
:LOGBOOK:
CLOCK: [2022-06-08 Wed 21:35]--[2022-06-08 Wed 21:52] =>  0:17
CLOCK: [2022-06-08 Wed 21:01]--[2022-06-08 Wed 21:26] =>  0:25
:END:
コンパイル後のブラウザ表示。何回か試したが、うまくいってない。
** DONE Battleリファクタ
CLOSED: [2022-06-11 Sat 15:21]
:LOGBOOK:
CLOCK: [2022-06-06 Mon 00:29]--[2022-06-06 Mon 00:54] =>  0:25
CLOCK: [2022-06-06 Mon 00:03]--[2022-06-06 Mon 00:28] =>  0:25
CLOCK: [2022-06-05 Sun 23:30]--[2022-06-05 Sun 23:55] =>  0:25
CLOCK: [2022-06-05 Sun 22:23]--[2022-06-05 Sun 22:48] =>  0:25
CLOCK: [2022-06-05 Sun 20:20]--[2022-06-05 Sun 20:45] =>  0:25
CLOCK: [2022-06-05 Sun 19:54]--[2022-06-05 Sun 20:19] =>  0:25
CLOCK: [2022-06-05 Sun 18:10]--[2022-06-05 Sun 18:35] =>  0:25
CLOCK: [2022-06-05 Sun 17:42]--[2022-06-05 Sun 18:07] =>  0:25
CLOCK: [2022-06-05 Sun 17:00]--[2022-06-05 Sun 17:25] =>  0:25
:END:
** DONE ECS(Entity Component System)入門
CLOSED: [2022-06-11 Sat 15:21]
:LOGBOOK:
CLOCK: [2022-06-05 Sun 21:02]--[2022-06-05 Sun 21:27] =>  0:25
CLOCK: [2022-06-05 Sun 15:53]--[2022-06-05 Sun 16:18] =>  0:25
CLOCK: [2022-06-05 Sun 15:28]--[2022-06-05 Sun 15:53] =>  0:25
CLOCK: [2022-06-05 Sun 15:02]--[2022-06-05 Sun 15:27] =>  0:25
:END:
ゲームライブラリについての理解がないので、本で学ぶ。

Entity Component System、MVCのようなものである。
- Entityはゲーム内のオブジェクトの識別子。Entityは単体では具体的な機能は持たず、Componentと紐付ける。自キャラクター、敵キャラクター、ステージの障害物
- Componentは機能を分解したデータ。ゲーム内の機能を構成するデータ。位置やスケールを定義する機能、画像などの描画機能。Componentは配列的に管理される
- Systemは、Componentへの作用を行う。ゲーム内のロジックをComponent単位で考え、Componentを入出力する処理として実装する。Component配列に対して一括で処理を行ってロジックを実現する

Resourceはオブジェクトに紐付かないゲーム中の機能の役割を果たす要素。
Resourceは(Read+Write)、(ReadExpect+WriteExpect)を利用し、Componentは(ReadStorage+WriteStorage)を利用する。Resoource作成はinsert、取得はtry_fetch::<Hoge>{}, try_fetch_mut::<Hoge>{}。
** DONE 装備品追加(チュートリアル)
CLOSED: [2022-06-11 Sat 15:21]
:LOGBOOK:
CLOCK: [2022-06-11 Sat 15:11]--[2022-06-11 Sat 15:21] =>  0:10
CLOCK: [2022-06-11 Sat 11:58]--[2022-06-11 Sat 12:23] =>  0:25
CLOCK: [2022-06-11 Sat 11:30]--[2022-06-11 Sat 11:55] =>  0:25
CLOCK: [2022-06-11 Sat 11:01]--[2022-06-11 Sat 11:26] =>  0:25
CLOCK: [2022-06-10 Fri 23:12]--[2022-06-10 Fri 23:37] =>  0:25
CLOCK: [2022-06-10 Fri 09:44]--[2022-06-10 Fri 10:09] =>  0:25
CLOCK: [2022-06-09 Thu 23:45]--[2022-06-10 Fri 00:10] =>  0:25
CLOCK: [2022-06-09 Thu 23:02]--[2022-06-09 Thu 23:27] =>  0:25
CLOCK: [2022-06-09 Thu 21:51]--[2022-06-09 Thu 22:16] =>  0:25
CLOCK: [2022-06-09 Thu 21:22]--[2022-06-09 Thu 21:47] =>  0:25
CLOCK: [2022-06-09 Thu 09:46]--[2022-06-09 Thu 10:11] =>  0:25
CLOCK: [2022-06-08 Wed 23:17]--[2022-06-08 Wed 23:42] =>  0:25
:END:
** DONE UI(チュートリアル)
CLOSED: [2022-06-12 Sun 14:10]
:LOGBOOK:
CLOCK: [2022-06-12 Sun 11:28]--[2022-06-12 Sun 11:53] =>  0:25
CLOCK: [2022-06-12 Sun 11:03]--[2022-06-12 Sun 11:28] =>  0:25
CLOCK: [2022-06-12 Sun 10:22]--[2022-06-12 Sun 10:47] =>  0:25
CLOCK: [2022-06-12 Sun 00:51]--[2022-06-12 Sun 01:16] =>  0:25
CLOCK: [2022-06-11 Sat 23:32]--[2022-06-11 Sat 23:57] =>  0:25
CLOCK: [2022-06-11 Sat 22:03]--[2022-06-11 Sat 22:28] =>  0:25
CLOCK: [2022-06-11 Sat 20:54]--[2022-06-11 Sat 21:19] =>  0:25
CLOCK: [2022-06-11 Sat 19:54]--[2022-06-11 Sat 20:19] =>  0:25
CLOCK: [2022-06-11 Sat 19:18]--[2022-06-11 Sat 19:43] =>  0:25
CLOCK: [2022-06-11 Sat 17:01]--[2022-06-11 Sat 17:26] =>  0:25
:END:
** DONE ゲームオーバーになったあと再開するとHP表示がUIから消える
CLOSED: [2022-06-12 Sun 14:10]
** DONE 森をつくる(チュートリアル)
** DONE 経験値とレベル(チュートリアル)
** DONE 家に戻る(チュートリアル)
CLOSED: [2022-07-16 Sat 19:33]
:LOGBOOK:
CLOCK: [2022-07-16 Sat 17:06]--[2022-07-16 Sat 17:31] =>  0:25
CLOCK: [2022-07-16 Sat 16:25]--[2022-07-16 Sat 16:50] =>  0:25
CLOCK: [2022-07-16 Sat 15:51]--[2022-07-16 Sat 16:16] =>  0:25
CLOCK: [2022-07-16 Sat 15:25]--[2022-07-16 Sat 15:50] =>  0:25
CLOCK: [2022-07-16 Sat 14:45]--[2022-07-16 Sat 15:10] =>  0:25
CLOCK: [2022-07-16 Sat 11:32]--[2022-07-16 Sat 11:57] =>  0:25
CLOCK: [2022-07-16 Sat 11:06]--[2022-07-16 Sat 11:31] =>  0:25
CLOCK: [2022-07-16 Sat 10:41]--[2022-07-16 Sat 11:06] =>  0:25
CLOCK: [2022-07-14 Thu 23:15]--[2022-07-14 Thu 23:40] =>  0:25
CLOCK: [2022-07-14 Thu 22:40]--[2022-07-14 Thu 23:05] =>  0:25
CLOCK: [2022-07-14 Thu 09:52]--[2022-07-14 Thu 10:17] =>  0:25
CLOCK: [2022-07-14 Thu 00:29]--[2022-07-14 Thu 00:54] =>  0:25
CLOCK: [2022-07-10 Sun 00:43]--[2022-07-10 Sun 01:08] =>  0:25
CLOCK: [2022-07-07 Thu 10:36]--[2022-07-07 Thu 11:01] =>  0:25
CLOCK: [2022-07-06 Wed 10:35]--[2022-07-06 Wed 11:00] =>  0:25
CLOCK: [2022-07-05 Tue 00:02]--[2022-07-05 Tue 00:27] =>  0:25
CLOCK: [2022-07-04 Mon 23:15]--[2022-07-04 Mon 23:40] =>  0:25
CLOCK: [2022-07-04 Mon 22:49]--[2022-07-04 Mon 23:14] =>  0:25
CLOCK: [2022-07-02 Sat 21:09]--[2022-07-02 Sat 21:34] =>  0:25
CLOCK: [2022-07-02 Sat 20:39]--[2022-07-02 Sat 21:04] =>  0:25
CLOCK: [2022-07-02 Sat 19:54]--[2022-07-02 Sat 20:19] =>  0:25
CLOCK: [2022-07-02 Sat 19:19]--[2022-07-02 Sat 19:44] =>  0:25
CLOCK: [2022-07-02 Sat 16:37]--[2022-07-02 Sat 17:02] =>  0:25
:END:
** DONE 石灰岩の洞窟(チュートリアル)
CLOSED: [2022-07-16 Sat 22:40]
:LOGBOOK:
CLOCK: [2022-07-16 Sat 20:49]--[2022-07-16 Sat 21:14] =>  0:25
CLOCK: [2022-07-16 Sat 20:24]--[2022-07-16 Sat 20:49] =>  0:25
CLOCK: [2022-07-16 Sat 19:59]--[2022-07-16 Sat 20:24] =>  0:25
CLOCK: [2022-07-16 Sat 19:34]--[2022-07-16 Sat 19:59] =>  0:25
:END:
** DONE AIモジュール化(チュートリアル)
CLOSED: [2022-07-18 Mon 22:22]
:LOGBOOK:
CLOCK: [2022-07-18 Mon 21:47]--[2022-07-18 Mon 22:12] =>  0:25
CLOCK: [2022-07-18 Mon 20:47]--[2022-07-18 Mon 21:12] =>  0:25
CLOCK: [2022-07-18 Mon 20:11]--[2022-07-18 Mon 20:36] =>  0:25
CLOCK: [2022-07-18 Mon 19:44]--[2022-07-18 Mon 20:09] =>  0:25
CLOCK: [2022-07-18 Mon 17:49]--[2022-07-18 Mon 18:14] =>  0:25
CLOCK: [2022-07-18 Mon 17:17]--[2022-07-18 Mon 17:42] =>  0:25
CLOCK: [2022-07-18 Mon 16:43]--[2022-07-18 Mon 17:08] =>  0:25
CLOCK: [2022-07-18 Mon 16:07]--[2022-07-18 Mon 16:32] =>  0:25
CLOCK: [2022-07-18 Mon 12:17]--[2022-07-18 Mon 12:42] =>  0:25
CLOCK: [2022-07-18 Mon 11:35]--[2022-07-18 Mon 12:00] =>  0:25
CLOCK: [2022-07-18 Mon 11:10]--[2022-07-18 Mon 11:35] =>  0:25
CLOCK: [2022-07-18 Mon 10:42]--[2022-07-18 Mon 11:07] =>  0:25
CLOCK: [2022-07-17 Sun 22:22]--[2022-07-17 Sun 22:47] =>  0:25
CLOCK: [2022-07-17 Sun 20:44]--[2022-07-17 Sun 21:09] =>  0:25
CLOCK: [2022-07-17 Sun 20:19]--[2022-07-17 Sun 20:44] =>  0:25
CLOCK: [2022-07-17 Sun 19:54]--[2022-07-17 Sun 20:19] =>  0:25
CLOCK: [2022-07-17 Sun 17:26]--[2022-07-17 Sun 17:51] =>  0:25
CLOCK: [2022-07-17 Sun 16:40]--[2022-07-17 Sun 17:05] =>  0:25
CLOCK: [2022-07-17 Sun 16:10]--[2022-07-17 Sun 16:35] =>  0:25
CLOCK: [2022-07-17 Sun 15:16]--[2022-07-17 Sun 15:42] =>  0:26
CLOCK: [2022-07-17 Sun 12:33]--[2022-07-17 Sun 12:58] =>  0:25
CLOCK: [2022-07-17 Sun 11:53]--[2022-07-17 Sun 12:18] =>  0:25
CLOCK: [2022-07-17 Sun 11:19]--[2022-07-17 Sun 11:44] =>  0:25
CLOCK: [2022-07-17 Sun 10:54]--[2022-07-17 Sun 11:19] =>  0:25
CLOCK: [2022-07-16 Sat 23:18]--[2022-07-16 Sat 23:43] =>  0:25
CLOCK: [2022-07-16 Sat 22:44]--[2022-07-16 Sat 23:09] =>  0:25
:END:
** DONE spatial mapping(チュートリアル)
CLOSED: [2022-07-22 Fri 10:17]
:LOGBOOK:
CLOCK: [2022-07-21 Thu 10:38]--[2022-07-21 Thu 11:03] =>  0:25
CLOCK: [2022-07-21 Thu 10:11]--[2022-07-21 Thu 10:36] =>  0:25
CLOCK: [2022-07-20 Wed 23:43]--[2022-07-21 Thu 00:08] =>  0:25
CLOCK: [2022-07-20 Wed 10:20]--[2022-07-20 Wed 10:45] =>  0:25
CLOCK: [2022-07-20 Wed 00:42]--[2022-07-20 Wed 01:07] =>  0:25
CLOCK: [2022-07-18 Mon 22:54]--[2022-07-18 Mon 23:19] =>  0:25
CLOCK: [2022-07-18 Mon 22:22]--[2022-07-18 Mon 22:47] =>  0:25
:END:
