:properties:
:ID: 20240427T113714
:end:
#+title:      KDOC 140: 『自作エミュレータで学ぶx86アーキテクチャ』
#+date:       [2024-04-27 Sat 11:37]
#+filetags:   :draft:book:
#+identifier: 20240427T113714

# (denote-rename-file-using-front-matter (buffer-file-name) 0)
# (save-excursion (while (re-search-backward ":draft" nil t) (replace-match "")))
# (flush-lines "^\\#\s.+?")

# ====ポリシー。
# 1ファイル1アイデア。
# 1ファイルで内容を完結させる。
# 常にほかのエントリとリンクする。
# 自分の言葉を使う。
# 参考文献を残しておく。
# 自分の考えを加える。
# 構造を気にしない。
# エントリ間の接続を発見したら、接続エントリを追加する。カード間にあるリンクの関係を説明するカード。
# アイデアがまとまったらアウトラインエントリを作成する。リンクをまとめたエントリ。
# エントリを削除しない。古いカードのどこが悪いかを説明する新しいカードへのリンクを追加する。
# 恐れずにカードを追加する。無意味の可能性があっても追加しておくことが重要。

* この文書のステータス
:PROPERTIES:
:Effort:   30:00
:END:
:LOGBOOK:
CLOCK: [2024-05-12 Sun 11:04]--[2024-05-12 Sun 11:29] =>  0:25
CLOCK: [2024-05-12 Sun 09:13]--[2024-05-12 Sun 09:38] =>  0:25
CLOCK: [2024-05-12 Sun 08:48]--[2024-05-12 Sun 09:13] =>  0:25
CLOCK: [2024-05-12 Sun 00:33]--[2024-05-12 Sun 00:58] =>  0:25
CLOCK: [2024-05-11 Sat 19:44]--[2024-05-11 Sat 20:09] =>  0:25
CLOCK: [2024-05-11 Sat 18:57]--[2024-05-11 Sat 19:22] =>  0:25
CLOCK: [2024-05-11 Sat 18:23]--[2024-05-11 Sat 18:48] =>  0:25
CLOCK: [2024-05-11 Sat 17:57]--[2024-05-11 Sat 18:22] =>  0:25
CLOCK: [2024-05-11 Sat 14:57]--[2024-05-11 Sat 15:22] =>  0:25
CLOCK: [2024-05-09 Thu 22:48]--[2024-05-09 Thu 23:13] =>  0:25
CLOCK: [2024-05-09 Thu 19:35]--[2024-05-09 Thu 20:00] =>  0:25
CLOCK: [2024-05-07 Tue 00:36]--[2024-05-07 Tue 01:01] =>  0:25
CLOCK: [2024-05-04 Sat 16:01]--[2024-05-04 Sat 16:26] =>  0:25
CLOCK: [2024-05-04 Sat 15:35]--[2024-05-04 Sat 16:00] =>  0:25
CLOCK: [2024-04-29 Mon 17:36]--[2024-04-29 Mon 18:01] =>  0:25
CLOCK: [2024-04-29 Mon 12:53]--[2024-04-29 Mon 13:18] =>  0:25
CLOCK: [2024-04-27 Sat 18:46]--[2024-04-27 Sat 19:11] =>  0:25
CLOCK: [2024-04-27 Sat 18:20]--[2024-04-27 Sat 18:45] =>  0:25
CLOCK: [2024-04-27 Sat 16:24]--[2024-04-27 Sat 16:49] =>  0:25
CLOCK: [2024-04-27 Sat 12:59]--[2024-04-27 Sat 13:24] =>  0:25
CLOCK: [2024-04-27 Sat 11:55]--[2024-04-27 Sat 12:20] =>  0:25
CLOCK: [2024-04-27 Sat 11:28]--[2024-04-27 Sat 11:53] =>  0:25
CLOCK: [2024-03-26 Tue 00:38]--[2024-03-26 Tue 01:03] =>  0:25
CLOCK: [2024-03-25 Mon 00:47]--[2024-03-25 Mon 01:12] =>  0:25
:END:

- 作成
  - [X] 2024-05-12 貴島
- レビュー
  - [ ] <署名>
# (progn (kill-line -1) (insert (format "  - [X] %s 貴島" (format-time-string "%Y-%m-%d"))))

# 関連をつけた。
# タイトルがフォーマット通りにつけられている。
# 内容をブラウザに表示して読んだ(作成とレビューのチェックは同時にしない)。
# 文脈なく読めるのを確認した。
# おばあちゃんに説明できる。
# いらない見出しを削除した。
# タグを適切にした。
# すべてのコメントを削除した。
* 概要
[[https://tatsu-zine.com/books/my-emulator-x86-architecture][自作エミュレータで学ぶx86アーキテクチャ コンピュータが動く仕組みを徹底理解]]は、エミュレータを作りながらCPUまわりを詳しく易しく説明する本。

* メモ

- プログラマの視点では変数はレジスタではなくメモリに置かれることになっているが、コンパイラからするとどちらもある。最適化のためにレジスタに置くこともある
- カウンタ変数をレジスタに置くことでカウンタの更新が早くなり、ループの実行速度が改善する
- ポインタ変数に範囲外の値を書き込む実験がおもしろい(57ページ)

添字は加算の糖衣構文にすぎない。加算は入れ替えられる。

#+caption:
#+begin_src C
  // 2つの記法は等しい
  // arr[0]
  // *(0 + arr)
#+end_src

#+begin_src C
  int arr[2];
  0[arr] = 1;
  1[arr] = 2;
  /* arr : {1, 2} */
#+end_src

- ローカル変数のポインタを返せてしまう。関数を抜けたときに破棄されるので、「宙に浮いたポインタ」となる(59ページ)
- ~X->Y~ は ~(*X).Y~ の糖衣構文
- ある型の変数を定義するときは、その型の大きさをわかっている必要がある。大きさがわからないと、コンパイラがどれくらいのメモリを割り当てるか判断できないから
- サイズがわからない型のことを不完全型という
  - void型も不完全型の一種
- 何らかの型へのポインタ型とvoidへのポインタ型は相互に変換できるとCの規格で保証されている
- 関数ポインタの箇所がよくわからなかった(68ページ)
- CPUが機械語プログラムを実行するためにはそのプログラムをメインメモリに配置する必要がある
- 80ページの汎用レジスタの表。

| 名前 | 別名                       | 主な役割                       |
| --- |                           |                              |
| eax | アキュムレータ               | 値を累積する                   |
| ebx | ベース                     | メモリ番地を記憶する             |
| ecx | カウンタ                    | 文字列の添字やループの回数を数える |
| edx | データ                     | I/O装置の番地を記憶する          |
| esi | ソースインデックス           | 入力データの添字を記憶する        |
| edi | デスティネーションインデックス | 出力データの添字を記憶する        |
| esp | スタックポインタ             | スタックの先頭を指す             |
| ebp | ベースポインタ               | スタック上の何らかのデータを指す                               |

- レジスタの由来が面白い(p82)
- CPUが命令を実行する流れ(p86)
- ModR/Mがよくわからない(p96)
- push,popのおさらい(p105)
- eipが関わる命令は専用の命令になっている場合が多い
- 関数呼び出しの図(p109)
- ebpを基準にしてスタック上での変数の位置をさす(p121)
- スタックフレームを16バイトの倍数で確保しようとする。コンパイラはなるべくアラインメントを揃えるように調整した機械語を作り出そうとする。一気に読み込めて高速だから(p122)
- leave命令(p122)
  - 1. mov esp, ebp ... espにebpを書き込む。スタックの先頭がスタックフレームの先頭まで巻き戻される
  - 2. pop ebp      ... 先頭に古いebpの値が積んである状態になる。ebpの値を復元する
- cmpはsubと同じ計算し、同じようにフラグを設定するが、オペランドを変更しない点がsubと違う。cmp条件分岐命令のためにオペランドの大小関係を比較する専用命令といえる(p124)
- for文をアセンブリで見る(p133)。まず条件式の処理にジャンプするのはコンパイラが繰り返しをアセンブリに変換するときによく使う。
- ifとgotoで書き直した例。ほぼ同じになる(p135)
- I/Oポートの読み書きで1文字の入出力をする周辺機器を作る(p145)
- io/out命令だけで、紙と鉛筆で文字が書けるように、すべての周辺機器を制御できる(p148)
- ~\x1b~ は ~0x1b~ という1バイトを表す。これはC言語の機能で、 ~\xYY~ と書くと文字コードがYYであると1文字を表せる(p155)
  - なので、 ~\x1b[32m~ はデータ的には5文字で、それ以降の文字を緑にする
  - 戻すのは ~\x1b[0m~
  - ~\x1b[輝度;色番号m文字コード\x1b[0m~
- 割り込み時に呼び出すサブルーチンの先頭番地を登録しておくための特別なメモリ領域、割り込みベクタテーブルがある(p160)
- int命令では割り込み番号さえわかればハンドラを呼び出せる。サブルーチンの名前や番地がわからなくてよい(p160)
- int命令の割り込み番号3はブレークポイントを設定するのに適した機能。デバッグ対象のプログラムを任意の場所で中断し、各レジスタの値やスタックを確認できる。割り込みで実現している(p162)

* 関連
- [[id:20240324T214548][KDOC 129: 『ポインタ理解のためのアセンブリ入門』]]。同じくアセンブリにふれる本
