:PROPERTIES:
:ID:       a6980e15-ecee-466e-9ea7-2c0210243c0d
:END:
#+title: JavaScript

* JavaScript
JavaScriptはブラウザ上で動作するのを特徴とする[[id:868ac56a-2d42-48d7-ab7f-7047c85a8f39][Programming Language]]。
WEB開発に多用される。多くの実装、フレームワーク、パッケージが存在する。

進歩が早いため、古い本だと書き方が古くなってたり最悪動かなかったりする。
最新のコードを読んでもよくわからない、ということも多い。
書籍を買うときは発行年度を確かめることが必要。

以前JSやってたので[[id:dc50d818-d7d1-48a8-ad76-62ead617c670][React]],[[id:ad1527ee-63b3-4a9b-a553-10899f57c234][TypeScript]]にいって大丈夫だろう、は罠。
学ぶ前に最新のJSをキャッチアップしておかないと、理解しにくい。
* Memo
新しく追加された構文などもあって、ややこしい。
** 関数の合成
関数型プログラミングでは小さい関数を定義する。
それらを合成して、目的を達成する。

- 返り値を工夫してメソッドチェーンにする。

~replace~ は引数、返り値が文字列なので…。
#+begin_src javascript
  const template = "hh:mm:ss tt";
  const clockTime = template
        .replace("hh", "03")
        .replace("mm", "33")
        .replace("ss", "33")
        .replace("tt", "PM");
  console.log(clockTime);
#+end_src
といったことができる。

- 高階関数を利用する([[https://www.oreilly.co.jp/books/9784873119380/][O'Reilly Japan - Reactハンズオンラーニング 第2版]] p.62)
関数を集約させるところに注目。
~compose~ で非破壊の関数をまとめて順番に評価している。
#+begin_src javascript
  const oneSecond = () => 1000;
  const getCurrentTime = () => new Date();
  const clear = () => console.clear();
  const log = message => console.log(message);

  const serializeClockTime = date => ({
      hours: date.getHours(),
      minutes: date.getMinutes(),
      seconds: date.getSeconds()
  });

  const civilianHours = clockTime => ({
      ...clockTime,
      hours: clockTime.hours > 12 ? clockTime.hours - 12 : clockTime.hours
  });

  const appendAMPM = clockTime => ({
      ...clockTime,
      ampm: clockTime.hours >= 12 ? "PM" : "AM"
  })

  const display = target => time => target(time);

  const formatClock = format => time =>
        format
        .replace("hh", time.hours)
        .replace("mm", time.minutes)
        .replace("ss", time.seconds)
        .replace("tt", time.ampm);

  const prependZero = key => clockTime => ({
      ...clockTime,
      [key]: clockTime[key] < 10 ? "0" + clockTime[key] : "" + clockTime[key]
  });

  const compose = (...fns) => arg =>
        fns.reduce((conposed, f) => f(composed), arg);
  // reduceの第一引数はコールバック関数、第二引数は初期値。
  // 配列内の最初の関数は引数argで呼び出され、それ以降は前の関数の戻り値が次の関数の引数として渡される。
  // 配列内の関数は順に呼び出され、最後の関数の戻り値が最終的に戻り値として返される。

  const convertToCivilianTime = clockTime =>
        compose(
            appendAMPM,
            civilianHours
        )(clockTime);

  const doubleDigits = civilianTime =>
        compose(
            prependZero("hours"),
            prependZero("minutes"),
            prependZero("seconds")
        )(civilianTime);

  const startTicking = () =>
        setInterval(
            compose(
                clear,
                getCurrentTime,
                serializeClockTime,
                convertToCivilianTime,
                doubleDigits,
                formatClock("hh:mm:ss tt"),
                display(log)
            ),
            oneSecond()
        );

  startTicking();
#+end_src
** 再帰
自身を呼び出す。非同期処理と組み合わさったときに真価を発揮する。
また、データ構造の探索に用いられる。
#+begin_src javascript
  const countdown = (value, fn) => {
      fn(value);
      return value > 0 ? countdown(value - 1, fn) : value;
  };

  countdown(10, value => console.log(value));
#+end_src
** 高階関数/カリー化
- ~userLogs~ 関数を定義。
- ~userLogs~ に引数を渡して ~logs~ 関数を定義。
- ~logs~ 関数に値を渡す。すべてのコンソールの先頭に"grandpa23"が出る。
#+begin_src javascript
  const userLogs = userName => message =>
        console.log(`${userName} -> ${message}`);
  const log = userLogs("grandpa23");
  log("attempted to load 20 fake members");
  getFakeMembers(20).then(
      members => log(`successfully loaded ${members.length} members`)
  ).catch(
      error => log("encountered an error loading members")
  );
  // grandpa23 -> attempted to load 20 fake members
  // grandpa23 -> successfully loaded 20 members
  // grandpa23 -> attempted to load 20 fake members
  // grandpa23 -> encountered an error loading members
#+end_src
** reduce
配列を単一の値へ変換する。

#+begin_src javascript
  const ages = [21, 18, 42, 40, 64, 63, 34];
  const maxAge = ages.reduce((max, age) => {
      console.log(`${age} > ${max} = ${age > max}`);
      if (age > max) {
          return age;
      } else {
          return max;
      }
  }, 0);

  console.log("maxAge", maxAge);

  // 21 > 0 = true
  // 18 > 21 = false
  // 42 > 21 = true
  // 40 > 42 = false
  // 64 > 42 = true
  // 63 > 64 = false
  // 34 > 64 = false
  // maxAge 64
#+end_src
** 命令形 vs. 宣言型
- [[https://www.oreilly.co.jp/books/9784873119380/][O'Reilly Japan - Reactハンズオンラーニング 第2版]] p39
#+begin_quote
関数型プログラミングは、宣言型プログラミングというより大きなプログラミングパラダイムの
一部です。宣言型プログラミングにおいては、「何をするのか」（what）が重要で、「どのようにす
るのか」（how）は重要ではありません。ひたすらwhat を記述することでアプリケーションを構築
するプログラミングのスタイルを宣言型と呼びます。
一方で、従来のプログラミング言語は、結果を得るための手順（how）を記述します。これを命
令型プログラミングと呼びます。
#+end_quote
** export
単一のオブジェクトをエクスポートする場合は、 ~export default~ と記述する。
#+begin_src javascript
  export default new Expedition("Mt. Freel", 2, ["water", "snack"]);
#+end_src

インポート側。
#+begin_src javascript
  import freel from "./mt-freel"
#+end_src

エクスポートするときの ~default~ キーワードによって、インポートの記述が変わる。

commonJSでは ~require~ 関数を使う。
** async
~async~ 関数は、非同期関数を同期関数のように呼び出せる。

エラー処理。
#+begin_src javascript
  const getFakePerson = async () => {
      try {
          const res = await fetch("https://api.randomuser.me/?nat=US&results=1");
          const { results } = await res.json();
          console.log(results);
      } catch (error) {
          console.error(error);
      }
  };
#+end_src
単に関数呼び出しを囲うだけでいい。
** promise method
非同期のアクセス処理を行う関数。
アクセスに時間がかかる間待ってるのは無駄なので、平行処理させる。
#+begin_src javascript
  fetch("https://google.com") // promiseオブジェクトが返ってくるだけ

  fetch("https://google.com").then(res =>
      res.json() // 非同期処理した結果が返ってくる
  )
#+end_src

#+begin_src javascript
  fetch("https://google.com")
    .then(res => res.json())
    .then(json => json.results)
    .then(console.log)
    .catch(console.error);
#+end_src
** spread syntax
~...~ : スプレッド構文。いくつかの用途がある。

- 配列の連結に使用される。
#+begin_src javascript
  const peaks = ["Tallac", "Ralston", "Rose"];
  const canyons = ["Ward", "Blackwood"];
  const tahoe = [...peaks, ...canyons];

  console.log(tahoe.join(", ")); // Tallac, Ralston, Rose, Ward, Blackwood
#+end_src

- 配列のコピー作成(イミュータブル)
#+begin_src javascript
  const peaks = ["Tallac", "Ralton", "Rose"];
  const [last] = [...peaks].reverse(); // peaksがreverse()で破壊するのを防ぐため、コピーを作成する。そして配列の最初の要素をlastに代入する。

  console.log(last); // Rose
  console.log(peaks.join(", ")); // Tallac, Ralston, Rose => 破壊してない
#+end_src

- 配列の「残り全部」を表現する
#+begin_src javascript
  const num = [1, 2, 3]
  const [first, ...others] = nums;
  console.log(others.join(", ")); // 2, 3
#+end_src

- 関数の引数を配列として受け取る
#+begin_src javascript
  funciton directions(...args) {
      let [start, ...remaining] = args;
      let [finish, ...stops] = remaining.reverse();

      args.length
      start
      finish
      stops.length
  }

  directions("Truckee", "Tahoe City", "Sunnyside") // 任意の引数を受け取れる
#+end_src

- オブジェクトの連結
  #+begin_src javascript
    const morning = {
      breakfast: "oatmeal",
      lunch: "peanut butter and jelly"
    };

    const dinner = "mac and cheese";
    const backpackingMeals = {
      ...morning,
      dinner
    };

    console.log(backpackingMeals);

    // {
    //     breakfast: "oatmeals",
    //     lunch: "peanut butter and jelly",
    //     dinner: "mac and cheese"
    // }
  #+end_src
** object literal
変数をオブジェクトのプロパティ名として記述する場合、プロパティ名を省略できる。
#+begin_src javascript
  const name = "Alice";
  const age = 9;

  const person = { name, age };
  console.log(person); // { name: "Alice", age: 9 }
#+end_src

関数もオブジェクトリテラル内に記述することが可能。
#+begin_src javascript
  const name = "Alice";
  const age = 9;
  const print = function() {
    console.log(`${this.name}` is `${this.age} years old.`)
  }

  const person = { name, age, print };
  person.print(); // "Alice is 9 years old."
#+end_src

オブジェクトリテラル内に関数を記述する際に、functionキーワードを省略できる。
#+begin_src javascript
  const skier = {
      name,
      sound,
      powderYell() {
          let yell = this.sound.toUpperCase();
          console.log(`${yell} ${yell} ${yell}`);
      },
      speed(mph) {
          this.speed = mph;
          console.log("speed:", mph);
      }
  }
#+end_src
** destructuring
必要なプロパティのみを取捨選択して、代入できる機能。
#+begin_src javascript
  const aaa = {
      bread: "aaa",
      meat: "bbb",
      cheese: "ccc"
  };

  const { bread, meat } = sandwitch // オブジェクトから必要なプロパティのみを取捨選択する
  sandwitch // => aaa, bbb
#+end_src

読み飛ばすことも可能。必要な要素のみを取得することをリストマッチングという。
#+begin_src javascript
  const [, , thirdAnimal] = ["Horse", "Mouse", "Cat"];

  console.log(thirdAnimal); // Cat
#+end_src
** arrow function
#+begin_src javascript
  const aaa = (arg) => `return_value: ${arg}`;
#+end_src

戻り値のオブジェクトを括弧で囲む必要がある。
#+begin_src javascript
  const aaa = (firstName) => ({
      first: firstName,
      last: lastName
  })
#+end_src

アロー関数は独自のスコープを持たないので、アロー関数の外側と内側でスコープが保持される。
** 巻き上げ
関数式は変数宣言の前で呼び出せない。
#+begin_src javascript
  aaa() // これは呼び出せない

  const = aaa = function() {
    "aaa"
  }
#+end_src

関数宣言は宣言の前で呼び出すことができる。(巻き上げ)
#+begin_src javascript
  bbb() // これは呼び出せる

  function bbb() {
    "bbb"
    }
#+end_src
** node
フルスタックアプリケーションを構築するために設計されたJavaScript実行環境。
** npm
Node.jsのパッケージ管理システム。
** yarn
Node.jsのパッケージ管理システム。
当時npmではできなかった依存パッケージのバージョン固定化のために実装された。
** バージョンを無視してインストール
#+begin_src shell
  yarn install --ignore-engines
#+end_src
** スプレッド演算子
~...state~ といった記法。中身を展開するスプレッド演算子。
[[https://stackoverflow.com/questions/31048953/what-does-the-three-dots-notation-do-in-javascript][reactjs - What does the three dots notation do in Javascript? - Stack Overflow]]

↓2つは同じ意味。
#+begin_src javascript
<Modal {...this.props} title='Modal heading' animation={false}>
<Modal a={this.props.a} b={this.props.b} title='Modal heading' animation={false}>
#+end_src
** 特徴
[[https://book.yyts.org/revisiting-javascript/objects-and-classes][JavaScriptのオブジェクトとクラス - サバイバルTypeScript-TypeScript入門]]

#+begin_quote
JavaScriptの特徴はオブジェクトリテラル{}という記法を用いて、簡単にオブジェクトを生成できる点です。

JavaやPHPなどの言語では、オブジェクトを生成するにはまずクラスを定義し、そのクラスを元にインスタンスを作るのが普通ですが、JavaScriptはクラス定義がなくてもこのようにオブジェクトリテラルを書くと、オブジェクトをインラインで作れます。
オブジェクトリテラルがあるおかげで、JavaScriptでは自由度の高いコードが書けるようになっています。
#+end_quote

#+begin_src javascript
// 空っぽのオブジェクトを生成
const object = {};

// プロパティを指定しながらオブジェクトを生成
const person = { name: "Bob", age: 25 };
#+end_src

- メソッド :: オブジェクトに関連づいた関数のことです。

#+begin_src javascript
const object = {
  // キーと値に分けて書いたメソッド定義
  printHello1: function () {
    console.log("Hello");
  },
  // 短い構文を用いたメソッド定義
  printHello2() {
    console.log("Hello");
  },
};
#+end_src

#+begin_quote
JavaやPHPでは、オブジェクトのフィールドとメソッドははっきり区別されます。
一方、JavaScriptではその区別はきっちりしていません。Javaで言うところの
メソッドとフィールドは、JavaScriptでは同じように扱われます。たとえば、
メソッドにnullを代入することで、フィールドに変えてしまうこともできます。
#+end_quote

#+begin_quote
このようにclassでクラスを定義し、newでインスタンスを生成するスタイルは、
JavaやPHP、Rubyなどと使用感がよく似ています。

JavaScriptのクラスの特徴は、クラスもオブジェクトの一種というところです。
オブジェクトとは、プロパティの集合体だと前述しましたが、クラスもオブジェ
クトなのでプロパティの集合体としての性質を持ちます。したがって、定義し
たクラスはプロパティを追加したり、変更したりできます。
#+end_quote

#+begin_src javascript
const myObject = {};
myObject.key = "value"; // プロパティを追加
​class MyClass {}
MyClass.key = "value"; // プロパティを追加
#+end_src

ほかの言語ではクラスを後から変更できない。
#+begin_src typescript
  interface Person {
    name: string;
    age: number;
  }
#+end_src

インターフェースでの型ガードを自前で実装する必要がある。
#+begin_src typescript
  type UnKnownObject<T extends object> = {
    [P in keyof T]: unknown;
  };

  function isStudent(obj: unknown): obj is Student {
    if (typeof obj !== 'object') {
      return false;
    }
    if (obj === null) {
      return false;
    }
    const {
      name,
      age,
      grade
    } = obj as UnKnownObject<Student>;
    if (typeof name !== 'string') {
      return false;
    }
    if (typeof age !== 'number') {
      return false;
    }
    if (typeof grade !== 'number') {
      return false;
    }
    return true;
  }
#+end_src
** 配列
- 配列を処理するときはやりたいことに応じて関数を選択します。するとやりたいことが明確になるのでわかりやすくもなります。除去したときは`filter()`、新しい配列を作るときは`map()`という感じです。
** コールバック関数
- コールバック関数: 他の関数に引数として渡す関数のことです。
[[https://sbfl.net/blog/2019/02/08/javascript-callback-func/][JavaScriptの「コールバック関数」とは一体なんなのか]]
** Eslint無視の方法
#+begin_src json
 "rules": {
     "comma-dangle": "error",
     "require-yield": "error",
     "no-unused-vars": "off",
     "no-undef": "off",
 },
#+end_src

などと書きます。
** クラスを使わずにモジュール分割する
#+begin_src javascript
  var Msg = (function() {
    function test() {
    }
  }
  Msg.test()
#+end_src
** 命名の意味
 - ~_~ で始まるのはプライベートメソッドです。言語によっては未使用変数ということもあります。
** 関数宣言と関数式
2つの関数宣言の方法があります。

#+begin_src javascript
// 関数宣言
function hello() {
  return "hello";
}
#+end_src

#+begin_src javascript
// 関数式で関数を定義
let hello = function () {
    return "hello";
}; //←セミコロン
#+end_src
** 2つの関数式の書き方
関数式には2つの書き方があります。

#+begin_src javascript
// function式を用いた関数式
const hello = function (name) {
  return `Hello, ${name}!`;
};

// アロー関数の関数式
const hello = (name) => {
  return `Hello, ${name}!`;
};
#+end_src

短く書けるのでアロー関数が好まれます。
** NodeList
 - NodeList - https://developer.mozilla.org/ja/docs/Web/API/NodeList
 - text node: タグに囲まれたもの。 ~<p>これ</p>。~
 - element node: ~<p>や、</p>~
 - DOMツリー: ブラウザがアクセスしてHTMLを解析すると文書の内容を表すオブジェクトのツリー構造が構築されます。これがDOMツリーです。DOMツリーを形成する1つ1つのオブジェクトがノードです。さらに子のオブジェクトを持っている可能性があります。
https://qiita.com/KDE_SPACE/items/e21bb31dd4d9c162c4a6
** package.json
パッケージを理解するために不可欠です。
*** scripts
makeのようなもの。
#+begin_src shell
npm run <タスク名>
#+end_src
で実行できる。

#+begin_src json
  "scripts": {
      "build": "NODE_ENV=production babel src --out-dir lib --source-maps",
      "watch": "babel src --out-dir lib --watch --source-maps",
      "prepublish": "npm run --if-present build",
      "test": "mocha --require @babel/register test/*test.js"
  }
#+end_src
*** files
npm installされたときに展開されるファイル、実行されるファイルを指定する。

#+begin_src json
  "main": "lib/index.js",
  "files": [
      "lib",
      "src"
  ],
#+end_src

srcをコンパイルしてlibに格納、パッケージとしてはこちらを使用する、みたいなことを指定する。はず。
*** GitHubリポジトリから読み込むとき
#+begin_src shell
  npm install git@github.com:kijimaD/textlint-plugin-org#develop
#+end_src
** .babelrc
babelの設定。presetは使うbabelと合わせる必要がある。
#+begin_src json
{
  "presets": [
      "@babel/preset-env"
  ],
  "env": {
    "development": {
      "presets": [
          "jsdoc-to-assert",
          "power-assert"
      ]
    }
  }
}
#+end_src
** .eslintrc
*** extends

事前にnode i airbnb-baseしておいて
.eslintrcに追加するとルールセットを追加できる。
#+begin_src json
"extends": "airbnb-base",
#+end_src
** パッケージ関連の言葉
ややこしい。
*** npm パッケージマネージャ

package.jsonに書かれた設定でいろいろ実行。
パッケージインストール、アップデート、タスク実行、などいろいろ。
パッケージをインストールするときには、これが実行されてコンパイルされて使える状態になってたりする。

#+begin_src shell
  npm i
#+end_src

パッケージ内のコマンドを実行する。おそらくbundle execとかと同じ。

#+begin_src shell
  npx lint
#+end_src
*** node 実行環境

#+begin_src shell
  node # repl起動
#+end_src

#+begin_src shell
  node -v
#+end_src

本体をバージョンアップしても反映されないときは実行場所を確認する。
nでバージョンしても、読んでるのはnvmだったりする。.bash_profileなどを確認。
** 便利コマンド
ファイルに更新があったらテスト実行する。超便利。
#+begin_src shell
npm test -- --watch
#+end_src
** npm publishのやりかた
- npm publishはローカルのファイルをアップロードして公開するので、ブランチ、 ~git status~ に気をつける。

#+begin_src javascript
  # タグ付けとコミットを行う。package.jsonも更新される。
  npm version [ major | minor | patch ]
  npm publish
  git push --follow-tags
#+end_src

- [[https://qiita.com/akameco/items/de7718c6e10dc22be5b0][npm publishの流れとそれを1コマンド行うnp - Qiita]]
- [[https://ja.wikipedia.org/wiki/%E3%82%BB%E3%83%9E%E3%83%B3%E3%83%86%E3%82%A3%E3%83%83%E3%82%AF%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%8B%E3%83%B3%E3%82%B0][セマンティックバージョニング - Wikipedia]]
- [[https://semver.org/lang/ja/][セマンティック バージョニング 2.0.0 | Semantic Versioning]]
- [[https://github.com/semver/semver][semver/semver: Semantic Versioning Specification]]
** DOM操作
- [[https://qiita.com/uhyo/items/1c565b61d934cbb88c2e#rangesurroundcontents][全部言えたらDOMマスター！　HTML+DOMでノードを挿入する方法大全 - Qiita]]
* Tasks
** TODO ネストしたコードの解消方法
やたらネストして大きな関数になりがち。
どうやって解消すればよいのだろう。
** TODO 実際にinstallしてCIで確かめる
プラグイン本体でテストしてるが、実際にnpm installするわけではないので依存パッケージ検知できないことがある。
ローカルでクリーンインストールでもglobalにインストールしてたりしてるので検知できないのだろう。
* References
** [[https://azu.github.io/JavaScript-Plugin-Architecture/][この書籍について · JavaScript Plugin Architecture]]
プラグインのアーキテクチャに関する本。
** [[https://www.oreilly.co.jp/books/9784873119380/][O'Reilly Japan - Reactハンズオンラーニング 第2版]]
** [[https://jsprimer.net/][JavaScript Primer - 迷わないための入門書 #jsprimer]]
** https://book.yyts.org/
** https://future-architect.github.io/typescript-guide/index.html
** [[http://wiki.c2.com/?DeclarativeProgramming][Declarative Programming]]
