:PROPERTIES:
:ID:       dc50d818-d7d1-48a8-ad76-62ead617c670
:END:
#+title: React
* 概要
Reactは、Web開発に使われる[[id:a6980e15-ecee-466e-9ea7-2c0210243c0d][JavaScript]]ライブラリ。
変更があった画面の一部だけを更新することで、リロードが必要のない、高速なサイトをサイトを構築できる。
* Memo
** プロジェクトを新規作成するコマンド
React+[[id:ad1527ee-63b3-4a9b-a553-10899f57c234][TypeScript]]、chapter03というディレクトリ名で作成する場合。
#+begin_src shell
  npx create-react-app chapter03 --template typescript
  npm install -D tslint # tslint導入
  npx tslint --init # tslint設定ファイル
#+end_src
** Context
contextはコンポーネント間で情報をやりとりしやすくするための関数。
コンポーネント間でグローバルに値を共有できる。
が、好き放題に値を変えられると安全性や可読性が下がるので、アクションを通してしか値を変化させられないようになっている。
** Reducer
状態とアクションを元に、行うことを振り分ける関数。
** Hook
~use~~ はReact hooksにつくプレフィクス。
- 参考 :: [[https://qiita.com/seira/items/e62890f11e91f6b9653f][React hooksを基礎から理解する (useEffect編) - Qiita]]

hookという名の通り、実行タイミングに関係している。
たとえば、 ~useEffect~ に渡された関数はレンダーの結果が画面に反映された後で動作する。
** {} は何なのか
よく見る。
#+begin_src typescript
const { state, dispatch } = useAppState()
#+end_src
は、通常のオブジェクトを作る{}と同じ。
つまり、↓と同じ。
#+begin_src typescript
{
  state,
  dispatch
}
#+end_src

これらに関数の返り値が代入される、とそれだけのこと。
* Tasks
* Reference
* Archives
