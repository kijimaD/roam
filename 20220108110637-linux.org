:PROPERTIES:
:ID:       7a81eb7c-8e2b-400a-b01a-8fa597ea527a
:header-args+: :wrap
:END:
#+title: Linux
* 概要
GNU LinuxはオープンソースのOS。
もっとも成功した[[id:bb71747d-8599-4aee-b747-13cb44c05773][OSS]]プロジェクトの1つで、世界中の開発者によって開発が進められている。
* Memo
** tzdataとは
tzdataは、タイムゾーン（時刻帯）のデータベースであり、主にオペレーティングシステムやプログラミング言語で使用される。タイムゾーンデータは、世界中の異なる地域と時間帯の間の変換や日付・時刻の計算を可能にする。

tzdataには、地域ごとの時差や夏時間の情報が含まれている。このデータベースは、世界各地の政府機関や国際的な規格に基づいて維持され、定期的に更新される。タイムゾーンデータは、UTC(協定世界時)を基準として、地域ごとの時差を正確に表現する。

プログラミング言語やオペレーティングシステムでは、tzdataを使用して、タイムゾーンに関連する情報を取得し、日付や時刻の変換、タイムゾーンの切り替え、夏時間…を処理する。一般的に、タイムゾーンデータはデータベースファイルやライブラリとして提供され、プログラム内で利用される。

タイムゾーンデータは、日々の時間管理や国際的な日付やイベントの処理において重要な役割を果たす。正確な時刻の取得や表示、イベントのスケジュール管理、タイムゾーンに関連する問題の処理において、tzdataは欠かせない要素となっている。
** AF_VSOCK(Virtual Socket Family)とは
AF_VSOCKは、Linuxカーネルで利用されるソケットファミリーの1つ。AF_VSOCKは、仮想マシンやコンテナなどの異なるホスト間での通信を可能にするため設計されている。ホストと仮想マシンまたはコンテナ間での高速で効率的な通信ができる。ソケットを介して異なる仮想マシン/コンテナ間でデータを送受信できる。
** プロセスとスレッドの違い
- [[https://webpia.jp/thread_process/][プロセスとスレッドの違いとは？超わかりやすく解説！【図解とプログラム付き】 | Webpia]]

構造。プロセス・スレッドというが、別階層の話。

- OS
  - プロセス
    - スレッド

- プロセス :: 実行中のプログラム。OSによってプロセスは管理される。プロセス間では別のメモリ空間が割り当てられるので影響を及ぼすことはない。プロセス間でメモリを共有しない
- スレッド :: プロセスによってスレッドは管理される。プロセス内の同じメモリ領域を共有する。スレッドは、スレッド同士で同じメモリ領域を使う。マルチスレッドにすることで並列処理ができるのがメリット
  - プログラムから見たスレッドは、メモリにロードされたプログラムの現在の実行状態を持つ仮想CPU
  - 仮想CPUのそれぞれに、スタックメモリが割り当てられている
  - OSやCPUから見たスレッドは、時間が凍結されたプログラムの実行状態
  - OSの仕事は、凍結状態のプログラムの実行状態を復元して、各スレッドを順番に短時間ずつ処理を再開させること
  - 複数のプログラムは、時間分割されてCPUコアにマッピングされて実行される

- シングルスレッドのプロセス: 1つしかスレッドを持たない
- マルチスレッドのプロセス: 複数スレッドを持つプロセス

** 特殊なディレクトリ
慣例的に使われる特別なディレクトリがある。

たとえば ~/etc/skel/~ は、ユーザが作成されたときのホームディレクトリのベースになる。前もってここに配置しておくと、ユーザが作られたあとホームディレクトリにコピーされ、ユーザが扱える。

~/etc/default/useradd~ に書いてあり、useraddを経由した変更もできる。

** インストールディスク作成

Linux環境でブータブルUSBを作成するとき、よくわからない要因によって失敗することが何度かあった。たいていはブートできないというもの。

- [[https://help.ubuntu.com/community/LiveCDCustomization][LiveCDCustomization - Community Help Wiki]]
  - ライブCDのカスタマイズ方法の詳しいドキュメント。GitHub Actionsでも実行できる

既存のベースとなるisoを持ってくる。isoを展開する。展開したシステムディレクトリをマウントする。この時点で、システムはiso内にあるものが使われ、変更もiso内に反映される。

- unetbootinを使う
  - [[https://unetbootin.github.io/linux_download.html][UNetbootin - Linux Downloads]]
- 焼く前に、USBドライブをext4でフォーマットする。それ以外だとbootに失敗することがある
- 仮想マシンで素早くテストできる
  - ~sudo apt install qemu-kvm~
  - ~qemu-system-x86_64 -boot d -cdrom ubuntu.iso -enable-kvm -m 4096~

** lsのソースコード
#+caption: getoptで引数を取り出し、switchで処理する
#+begin_src git-permalink
https://github.com/kd-collective/NetBSD/blob/89341ae2e1875e7f91cefa9b1dcc0e4549edcde0/bin/ls/ls.c#L154-L169
#+end_src

#+RESULTS:
#+begin_results
	while ((ch = getopt(argc, argv, "1AaBbCcdFfghikLlMmnOoPpqRrSsTtuWwXx"))
	    != -1) {
		switch (ch) {
		/*
		 * The -1, -C, -l, -m and -x options all override each other so
		 * shell aliasing works correctly.
		 */
		case '1':
			f_singlecol = 1;
			f_column = f_columnacross = f_longform = f_stream = 0;
			break;
		case 'C':
			f_column = 1;
			f_columnacross = f_longform = f_singlecol = f_stream =
			    0;
			break;
#+end_results

** cdのソースコード
#+begin_src git-permalink
https://github.com/kd-collective/NetBSD/blob/89341ae2e1875e7f91cefa9b1dcc0e4549edcde0/bin/sh/cd.c#L52-L54
#+end_src

#+RESULTS:
#+begin_results
/*
 * The cd and pwd commands.
 */
#+end_results

** echoのソースコード
#+caption: netBSDのechoのソースコード。本質的にprintf
#+begin_src git-permalink
https://github.com/kd-collective/NetBSD/blob/89341ae2e1875e7f91cefa9b1dcc0e4549edcde0/bin/echo/echo.c#L1
#+end_src

#+RESULTS:
#+begin_results
/* $NetBSD: echo.c,v 1.23 2021/11/16 21:38:29 rillig Exp $	*/
#+end_results

#+caption: nflagには0か1が入る
#+begin_src git-permalink
https://github.com/kd-collective/NetBSD/blob/89341ae2e1875e7f91cefa9b1dcc0e4549edcde0/bin/echo/echo.c#L60
#+end_src

#+RESULTS:
#+begin_results
	nflag = *++argv != NULL && strcmp(*argv, "-n") == 0;
#+end_results

- getopt関数を使っていない
** ctrl+shiftが機能しない
インプットメソッドによって、入力方法の変更ショートカットが奪われる。
https://superuser.com/questions/358749/how-to-disable-ctrlshiftu

fcitxを使っている場合、 ~fcitx-configtool~ で設定できる。
全体の設定 → 入力メソッドの切り替えで、別のキーボードの組み合わせを選択する。
** ディスプレイマネージャーを再起動
壊れたときにシステム再起動よりはやく復帰できる。
#+begin_src shell
  systemctl restart display-manager
#+end_src
** linux mintでsnapをインストールする
#+begin_src shell
  sudo rm /etc/apt/preferences.d/nosnap.pref
#+end_src
** bluetoothが動かないとき
新しくクリーンインストールしたところ、Bluetooth接続ができなかった。
インストール前はできていたから、ハードウェアに問題はない。

前はデフォルトでできてたはずだが、bluetooth周辺ライブラリをインストールしてサービスを再起動する。
どれが効いたのかはさだかではないが、接続できるようになった。

#+begin_src shell
  sudo apt-get install bluetooth bluez bluez-tools rfkill blueman

  # 強制的に全てのブロックを解除
  sudo rfkill unblock all
  # Bluetoothを再起動
  sudo systemctl restart bluetooth.service
#+end_src

- [[https://blog.hanhans.net/2019/03/18/ubuntu-enable-bluetooth/][強制的に全てのブロックを解除 1 $ sudo rfkill unblock all Bluetoothを再起動 1 $ sudo systemctl restart bluetooth.service]]
** caps_lockをコマンドで切り替える
Caps LockをControlに入れ替えていると、xmodmapをいじったときに大文字のまま元に戻せなくなることがある。
代替のキーはないので困る。コマンドでできる。
#+begin_src shell
sudo apt-get install xdotool
xdotool key Caps_Lock
#+end_src
* Tasks
** TODO [[https://tatsu-zine.com/books/linux-bootprocess][新装改訂版 Linuxのブートプロセスをみる【委託】 - 達人出版会]]
ブートプロセスを追う本。
** TODO [[https://tatsu-zine.com/books/naruhounix][なるほどUnixプロセス ― Rubyで学ぶUnixの基礎 - 達人出版会]]
プロセスの解説。
** WIP [[https://www.seshop.com/product/detail/20694][詳解UNIXプログラミング［第3版］【PDF版】 ｜ SEshop｜ 翔泳社の本・電子書籍通販サイト]] :Read:
:PROPERTIES:
:Effort:   20:00
:END:
:LOGBOOK:
CLOCK: [2023-07-23 Sun 18:08]--[2023-07-23 Sun 18:33] =>  0:25
CLOCK: [2023-07-23 Sun 17:18]--[2023-07-23 Sun 17:43] =>  0:25
CLOCK: [2023-07-20 Thu 23:07]--[2023-07-20 Thu 23:32] =>  0:25
CLOCK: [2023-07-19 Wed 21:55]--[2023-07-19 Wed 22:20] =>  0:25
CLOCK: [2023-07-17 Mon 19:03]--[2023-07-17 Mon 19:28] =>  0:25
CLOCK: [2023-07-17 Mon 18:38]--[2023-07-17 Mon 19:03] =>  0:25
CLOCK: [2023-07-17 Mon 18:08]--[2023-07-17 Mon 18:33] =>  0:25
CLOCK: [2023-07-17 Mon 17:43]--[2023-07-17 Mon 18:08] =>  0:25
CLOCK: [2023-07-17 Mon 11:39]--[2023-07-17 Mon 12:04] =>  0:25
CLOCK: [2023-07-17 Mon 11:14]--[2023-07-17 Mon 11:39] =>  0:25
CLOCK: [2023-07-16 Sun 22:59]--[2023-07-16 Sun 23:24] =>  0:25
CLOCK: [2023-07-02 Sun 11:22]--[2023-07-02 Sun 11:47] =>  0:25
CLOCK: [2023-06-28 Wed 00:53]--[2023-06-28 Wed 01:18] =>  0:25
CLOCK: [2023-06-19 Mon 00:50]--[2023-06-19 Mon 01:15] =>  0:25
CLOCK: [2023-06-18 Sun 22:47]--[2023-06-18 Sun 23:12] =>  0:25
:END:

- 29, 32, 41, 44, 46, 53, 65

UNIXプログラミングの解説本。

- エラーが発生するとほとんどのシステム関数は-1を返す
- プログラムは、ディレクトリ内のディスクにある実行可能なファイル
- プログラムの実行中の実体をプロセスという
- ctrl + D はファイル末尾文字を送る
- プロセス内のすべてのスレッドは、同一のアドレス空間、ファイル記述子、スタック、プロセス関連の属性を共有する
  - スレッドは同一のメモリを参照できるので、共有データへの参照は矛盾を避けるために同期する必要がある
  - スレッドIDはプロセスに固有である
- シェル上では特殊な働きをするキーが存在する。どのキーがどの働きをするのかは、 ~stty -a~ コマンドで確認できる
- シェルがパイプでつながれたプロセス群を起動するたびに「この端末ではいま、このプロセスが動いています」と端末に教えている
- 環境変数とは、プロセスの親子関係を通じて伝播する環境変数のようなもの
- POSIX(Portable Operating System Interface) は、IEEE が作成しはじめた一連の規格
  - 本に関係するのは1003.1オペレーティングシステムインターフェース規格
  - 1003.1規格は実装ではなくインターフェースを規定する

** TODO [[https://qiita.com/ueokande/items/c75de7c9df2bcceda7a9][シェルとファイルデスクリプタのお話 - Qiita]]
ファイルディスクリプタをシェルで扱う。
** TODO [[https://milestone-of-se.nesuke.com/sv-basic/linux-basic/fd-stdinout-pipe-redirect/][【図解】file descriptorと標準入力/出力とパイプ,リダイレクト | SEの道標]]
ファイルディスクリプタ。
** TODO [[https://book.mynavi.jp/ec/products/detail/id=121220][ゼロからのOS自作入門 | マイナビブックス]]
:LOGBOOK:
CLOCK: [2022-11-19 Sat 09:48]--[2022-11-19 Sat 10:13] =>  0:25
:END:
ゼロからOSを自作する本。
** TODO [[https://www.shuwasystem.co.jp/book/9784798044781.html][ハロー“Hello, World” OSと標準ライブラリのシゴトとしくみ]]
printを実行するとき何が起こっているかの解説。
** TODO [[https://linuxjf.osdn.jp/JFdocs/The-Linux-Kernel.html#toc14][The Linux Kernel]]
:LOGBOOK:
CLOCK: [2022-05-15 Sun 18:20]--[2022-05-15 Sun 18:45] =>  0:25
:END:
Linuxカーネルの解説。
** TODO [[https://0xax.gitbooks.io/linux-insides/content/][Introduction · Linux Inside]]
Linuxカーネルの解説。
** TODO [[https://www.oreilly.co.jp/books/9784873113623/][O'Reilly Japan - Linuxシステムプログラミング]]
システムプログラミングの本。
** TODO [[https://www.oreilly.co.jp/books/9784873115856/][O'Reilly Japan - Linuxプログラミングインタフェース]]
Linuxのリファレンス。
** TODO [[https://www.oreilly.co.jp/books/9784873113135/][O'Reilly Japan - 詳解 Linuxカーネル 第3版]]
:LOGBOOK:
CLOCK: [2022-06-01 Wed 00:42]--[2022-06-01 Wed 01:07] =>  0:25
:END:
- 15
カーネルのソースコードを読む本。
* Reference
** [[https://qiita.com/stc1988/items/41d9da92ea02fc3d15a3][SquashFSをマウントするまで - Qiita]]
システムをファイルに圧縮するとき使う。
** [[https://www.express.nec.co.jp/linux/distributions/knowledge/system/useradd.html][新規ユーザ作成時のデフォルト値の設定]]
ユーザの設定方法。ここでデフォルトディレクトリに ~/etc/skel~ 指定している。
** [[https://tech.unifa-e.com/entry/2019/05/23/172424][sudo実行時のカレントディレクトリや環境変数などの挙動について - ユニファ開発者ブログ]]
sudoの解説。
** [[https://linuxjm.osdn.jp/html/sudo/man8/sudo.8.html][Man page of SUDO]]
sudoの解説。特にプロセスモデルに関する詳しい解説。
** [[https://gihyo.jp/assets/files/event/2008/24svr/report/2-24svr-TechMTG-ito.pdf][Linuxカーネルの読み方]]
Linuxカーネルのソースコードを読むコツと参考文献がある。
** [[https://ja.wikipedia.org/wiki/Linux][Linux - Wikipedia]]
** [[https://www.geekpage.jp/blog/?id=2007/3/1][UNIX哲学の基本原則:Geekなぺーじ]]
UNIX哲学の一覧。
* Archives
** DONE [[https://www.amazon.co.jp/%E3%81%B5%E3%81%A4%E3%81%86%E3%81%AELinux%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0-%E7%AC%AC2%E7%89%88-Linux%E3%81%AE%E4%BB%95%E7%B5%84%E3%81%BF%E3%81%8B%E3%82%89%E5%AD%A6%E3%81%B9%E3%82%8Bgcc%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%81%AE%E7%8E%8B%E9%81%93-%E9%9D%92%E6%9C%A8-%E5%B3%B0%E9%83%8E/dp/4797386479][ふつうのLinuxプログラミング 第2版 Linuxの仕組みから学べるgccプログラミングの王道 Amazon]]
CLOSED: [2023-07-09 Sun 16:04]
:PROPERTIES:
:Effort:   10:00
:END:
:LOGBOOK:
CLOCK: [2023-07-09 Sun 11:46]--[2023-07-09 Sun 12:12] =>  0:26
CLOCK: [2023-07-09 Sun 01:28]--[2023-07-09 Sun 01:53] =>  0:25
CLOCK: [2023-07-09 Sun 00:54]--[2023-07-09 Sun 01:19] =>  0:25
CLOCK: [2023-07-09 Sun 00:23]--[2023-07-09 Sun 00:48] =>  0:25
CLOCK: [2023-07-08 Sat 21:18]--[2023-07-08 Sat 21:43] =>  0:25
CLOCK: [2023-07-08 Sat 20:49]--[2023-07-08 Sat 21:14] =>  0:25
CLOCK: [2023-07-08 Sat 20:18]--[2023-07-08 Sat 20:43] =>  0:25
CLOCK: [2023-07-08 Sat 11:41]--[2023-07-08 Sat 12:06] =>  0:25
CLOCK: [2023-07-04 Tue 22:03]--[2023-07-04 Tue 22:28] =>  0:25
CLOCK: [2023-07-04 Tue 21:37]--[2023-07-04 Tue 22:02] =>  0:25
CLOCK: [2023-07-04 Tue 00:44]--[2023-07-04 Tue 01:09] =>  0:25
CLOCK: [2023-07-02 Sun 23:08]--[2023-07-02 Sun 23:33] =>  0:25
CLOCK: [2023-07-02 Sun 22:35]--[2023-07-02 Sun 23:00] =>  0:25
CLOCK: [2023-07-02 Sun 18:55]--[2023-07-02 Sun 19:20] =>  0:25
CLOCK: [2023-07-02 Sun 18:26]--[2023-07-02 Sun 18:51] =>  0:25
CLOCK: [2023-07-02 Sun 14:30]--[2023-07-02 Sun 14:55] =>  0:25
CLOCK: [2023-07-02 Sun 14:00]--[2023-07-02 Sun 14:25] =>  0:25
CLOCK: [2023-07-02 Sun 13:30]--[2023-07-02 Sun 13:55] =>  0:25
CLOCK: [2023-07-02 Sun 13:00]--[2023-07-02 Sun 13:25] =>  0:25
CLOCK: [2023-07-02 Sun 10:51]--[2023-07-02 Sun 11:16] =>  0:25
CLOCK: [2023-07-02 Sun 01:33]--[2023-07-02 Sun 01:58] =>  0:25
CLOCK: [2023-07-01 Sat 20:21]--[2023-07-01 Sat 20:47] =>  0:26
CLOCK: [2023-07-01 Sat 18:33]--[2023-07-01 Sat 18:58] =>  0:25
CLOCK: [2023-07-01 Sat 18:07]--[2023-07-01 Sat 18:32] =>  0:25
CLOCK: [2023-07-01 Sat 15:31]--[2023-07-01 Sat 15:56] =>  0:25
:END:

Linuxの仕組みから学べるシステムプログラミング。

- Linuxはファイルシステムとプロセスとストリームでできている
- Linux上において、活動する主体はユーザではなく、プロセス
- ログイン時にクレデンシャルが作られ、プロセスに渡している
- シェルと端末は異なる
  - 端末はユーザとのインターフェースになる部分。現代では仮想化されていて無数にある。端末に対応するデバイスファイル ~/dev/tty0~ などがある
  - シェルはユーザからの命令を解釈し実行するプログラムのこと。ストリームからコマンドを読み込んで実行するプログラムにすぎない
- ttyの語源はテレタイプ。ディスプレイがなかったので長い紙に結果を出力していた
- tabの語源はtable
- キーボード → 端末ドライバ → ストリーム → プロセス → ストリーム → 端末ドライバ → ディスプレイ
- Linuxの入出力の主な4つのシステムコール
  - ストリームからバイト列を読み込むread
  - ストリームにバイト列を書き込むwrite
  - ストリームを作るopen
  - 用済みのストリームを始末するclose
- ファイルディスクリプタは整数値にすぎない
- 固定のファイルディスクリプタ
  - 0: 標準入力
  - 1: 標準出力
  - 2: 標準エラー出力
- 標準エラー出力がある理由。標準出力は次のプログラムの標準入力につながれている場合が多いので、ここでエラーを出しても気づかない可能性が高いから
- ストリームはファイルディスクリプタで表現され、read()またはwrite()で操作できるもののこと
- システムコールは遅いので、バッファに溜まってからシステムコールするとよい
- gets()はバッファオーバーフローを起こす可能性があり、使ってはいけない。世界初のインターネットワームはバッファオーバーフローの脆弱性を利用した
- ビルド
  - プリプロセス
    - 純粋なC言語のソースコードを出力する
  - コンパイル
    - C言語のソースコードをアセンブリ言語のソースコードに変換する
  - アセンブル
    - アセンブリ言語のソースコードを機械語を含むオブジェクトファイルに変換する
  - リンク
    - オブジェクトファイルから実行ファイルを生成する
- /proc にはプロセスの情報がファイルに格納されている
- ダイナミックロードは、すべてのリンク作業を実行時に行う手法
- 0は成功、1はエラーというのはLinuxに特有の決まりごと
- プロセスの親子関係を調べる ~pstree~
- ログインシェルを調べる ~w~, ~last~
- HTTPの仕組みとファイルシステムはよく似ている
- HTTPで公開されるのはファイルシステムの一部だけ。これをドキュメントツリーという。ドキュメントツリーのルートディレクトリをドキュメントルートという。デフォルト設定のWebサーバでいうところの ~/var/www/html~ のことか
- HTTPサーバのしごと: HTTPリクエストをドキュメントルート以下のファイルにマップし、レスポンスとして送り返すこと
