:PROPERTIES:
:ID:       7a81eb7c-8e2b-400a-b01a-8fa597ea527a
:header-args+: :wrap :results raw
:END:
#+title: Linux
* 概要
GNU LinuxはオープンソースのOS。
もっとも成功した[[id:bb71747d-8599-4aee-b747-13cb44c05773][OSS]]プロジェクトの1つで、世界中の開発者によって開発が進められている。
* Memo
** ユーザリソースを確認する方法

#+begin_src shell
ulimit -a
#+end_src

#+RESULTS:
#+begin_results
real-time non-blocking time  (microseconds, -R) unlimited
core file size              (blocks, -c) 0
data seg size               (kbytes, -d) unlimited
scheduling priority                 (-e) 0
file size                   (blocks, -f) unlimited
pending signals                     (-i) 126771
max locked memory           (kbytes, -l) 4072104
max memory size             (kbytes, -m) unlimited
open files                          (-n) 1024
pipe size                (512 bytes, -p) 8
POSIX message queues         (bytes, -q) 819200
real-time priority                  (-r) 0
stack size                  (kbytes, -s) 9788
cpu time                   (seconds, -t) unlimited
max user processes                  (-u) 126771
virtual memory              (kbytes, -v) unlimited
file locks                          (-x) unlimited
#+end_results

** tzdataとは
tzdataは、タイムゾーン（時刻帯）のデータベースであり、主にオペレーティングシステムやプログラミング言語で使用される。タイムゾーンデータは、世界中の異なる地域と時間帯の間の変換や日付・時刻の計算を可能にする。

tzdataには、地域ごとの時差や夏時間の情報が含まれている。このデータベースは、世界各地の政府機関や国際的な規格に基づいて維持され、定期的に更新される。タイムゾーンデータは、UTC(協定世界時)を基準として、地域ごとの時差を正確に表現する。

プログラミング言語やオペレーティングシステムでは、tzdataを使用して、タイムゾーンに関連する情報を取得し、日付や時刻の変換、タイムゾーンの切り替え、夏時間…を処理する。一般的に、タイムゾーンデータはデータベースファイルやライブラリとして提供され、プログラム内で利用される。

タイムゾーンデータは、日々の時間管理や国際的な日付やイベントの処理において重要な役割を果たす。正確な時刻の取得や表示、イベントのスケジュール管理、タイムゾーンに関連する問題の処理において、tzdataは欠かせない要素となっている。
** AF_VSOCK(Virtual Socket Family)とは
AF_VSOCKは、Linuxカーネルで利用されるソケットファミリーの1つ。AF_VSOCKは、仮想マシンやコンテナなどの異なるホスト間での通信を可能にするため設計されている。ホストと仮想マシンまたはコンテナ間での高速で効率的な通信ができる。ソケットを介して異なる仮想マシン/コンテナ間でデータを送受信できる。
** プロセスとスレッドの違い
- [[https://webpia.jp/thread_process/][プロセスとスレッドの違いとは？超わかりやすく解説！【図解とプログラム付き】 | Webpia]]

構造。プロセス・スレッドというが、別階層の話。

- OS
  - プロセス
    - スレッド

- プロセス :: 実行中のプログラム。OSによってプロセスは管理される。プロセス間では別のメモリ空間が割り当てられるので影響を及ぼすことはない。プロセス間でメモリを共有しない
- スレッド :: プロセスによってスレッドは管理される。プロセス内の同じメモリ領域を共有する。スレッドは、スレッド同士で同じメモリ領域を使う。マルチスレッドにすることで並列処理ができるのがメリット
  - プログラムから見たスレッドは、メモリにロードされたプログラムの現在の実行状態を持つ仮想CPU
  - 仮想CPUのそれぞれに、スタックメモリが割り当てられている
  - OSやCPUから見たスレッドは、時間が凍結されたプログラムの実行状態
  - OSの仕事は、凍結状態のプログラムの実行状態を復元して、各スレッドを順番に短時間ずつ処理を再開させること
  - 複数のプログラムは、時間分割されてCPUコアにマッピングされて実行される

- シングルスレッドのプロセス: 1つしかスレッドを持たない
- マルチスレッドのプロセス: 複数スレッドを持つプロセス

** 特殊なディレクトリ
慣例的に使われる特別なディレクトリがある。

たとえば ~/etc/skel/~ は、ユーザが作成されたときのホームディレクトリのベースになる。前もってここに配置しておくと、ユーザが作られたあとホームディレクトリにコピーされ、ユーザが扱える。

~/etc/default/useradd~ に書いてあり、useraddを経由した変更もできる。

** インストールディスク作成

Linux環境でブータブルUSBを作成するとき、よくわからない要因によって失敗することが何度かあった。たいていはブートできないというもの。

- [[https://help.ubuntu.com/community/LiveCDCustomization][LiveCDCustomization - Community Help Wiki]]
  - ライブCDのカスタマイズ方法の詳しいドキュメント。GitHub Actionsでも実行できる

既存のベースとなるisoを持ってくる。isoを展開する。展開したシステムディレクトリをマウントする。この時点で、システムはiso内にあるものが使われ、変更もiso内に反映される。

- unetbootinを使う
  - [[https://unetbootin.github.io/linux_download.html][UNetbootin - Linux Downloads]]
- 焼く前に、USBドライブをext4でフォーマットする。それ以外だとbootに失敗することがある
- 仮想マシンで素早くテストできる
  - ~sudo apt install qemu-kvm~
  - ~qemu-system-x86_64 -boot d -cdrom ubuntu.iso -enable-kvm -m 4096~

** lsのソースコード
#+caption: getoptで引数を取り出し、switchで処理する
#+begin_src git-permalink
https://github.com/kd-collective/NetBSD/blob/89341ae2e1875e7f91cefa9b1dcc0e4549edcde0/bin/ls/ls.c#L154-L169
#+end_src

#+RESULTS:
#+begin_results
	while ((ch = getopt(argc, argv, "1AaBbCcdFfghikLlMmnOoPpqRrSsTtuWwXx"))
	    != -1) {
		switch (ch) {
		/*
		 * The -1, -C, -l, -m and -x options all override each other so
		 * shell aliasing works correctly.
		 */
		case '1':
			f_singlecol = 1;
			f_column = f_columnacross = f_longform = f_stream = 0;
			break;
		case 'C':
			f_column = 1;
			f_columnacross = f_longform = f_singlecol = f_stream =
			    0;
			break;
#+end_results

** cdのソースコード
#+begin_src git-permalink
https://github.com/kd-collective/NetBSD/blob/89341ae2e1875e7f91cefa9b1dcc0e4549edcde0/bin/sh/cd.c#L52-L54
#+end_src

#+RESULTS:
#+begin_results
/*
 * The cd and pwd commands.
 */
#+end_results

** echoのソースコード
#+caption: netBSDのechoのソースコード。本質的にprintf
#+begin_src git-permalink
https://github.com/kd-collective/NetBSD/blob/89341ae2e1875e7f91cefa9b1dcc0e4549edcde0/bin/echo/echo.c#L1
#+end_src

#+RESULTS:
#+begin_results
/* $NetBSD: echo.c,v 1.23 2021/11/16 21:38:29 rillig Exp $	*/
#+end_results

#+caption: nflagには0か1が入る
#+begin_src git-permalink
https://github.com/kd-collective/NetBSD/blob/89341ae2e1875e7f91cefa9b1dcc0e4549edcde0/bin/echo/echo.c#L60
#+end_src

#+RESULTS:
#+begin_results
	nflag = *++argv != NULL && strcmp(*argv, "-n") == 0;
#+end_results

- getopt関数を使っていない
** ctrl+shiftが機能しない
インプットメソッドによって、入力方法の変更ショートカットが奪われる。
https://superuser.com/questions/358749/how-to-disable-ctrlshiftu

fcitxを使っている場合、 ~fcitx-configtool~ で設定できる。
全体の設定 → 入力メソッドの切り替えで、別のキーボードの組み合わせを選択する。
** ディスプレイマネージャーを再起動
壊れたときにシステム再起動よりはやく復帰できる。
#+begin_src shell
  systemctl restart display-manager
#+end_src
** linux mintでsnapをインストールする
#+begin_src shell
  sudo rm /etc/apt/preferences.d/nosnap.pref
#+end_src
** bluetoothが動かないとき
新しくクリーンインストールしたところ、Bluetooth接続ができなかった。
インストール前はできていたから、ハードウェアに問題はない。

前はデフォルトでできてたはずだが、bluetooth周辺ライブラリをインストールしてサービスを再起動する。
どれが効いたのかはさだかではないが、接続できるようになった。

#+begin_src shell
  sudo apt-get install bluetooth bluez bluez-tools rfkill blueman

  # 強制的に全てのブロックを解除
  sudo rfkill unblock all
  # Bluetoothを再起動
  sudo systemctl restart bluetooth.service
#+end_src

- [[https://blog.hanhans.net/2019/03/18/ubuntu-enable-bluetooth/][強制的に全てのブロックを解除 1 $ sudo rfkill unblock all Bluetoothを再起動 1 $ sudo systemctl restart bluetooth.service]]
** caps_lockをコマンドで切り替える
Caps LockをControlに入れ替えていると、xmodmapをいじったときに大文字のまま元に戻せなくなることがある。
代替のキーはないので困る。コマンドでできる。
#+begin_src shell
sudo apt-get install xdotool
xdotool key Caps_Lock
#+end_src
* Tasks
** TODO [[https://amzn.to/3TilxVn][オペレーティングシステム 構成と設計第3版]]
:LOGBOOK:
CLOCK: [2024-03-20 Wed 19:30]--[2024-03-20 Wed 19:55] =>  0:25
CLOCK: [2024-03-18 Mon 19:35]--[2024-03-18 Mon 20:00] =>  0:25
CLOCK: [2024-03-18 Mon 18:40]--[2024-03-18 Mon 19:05] =>  0:25
CLOCK: [2024-03-17 Sun 14:21]--[2024-03-17 Sun 14:46] =>  0:25
:END:
古典的名著。
** TODO [[https://www.youtube.com/watch?v=n34LCB7Iwig][その47 日常ソースコードリーディング pgrepの使い方を間違えたのをきっかけにLinuxカーネルのコードを読む - YouTube]]
:LOGBOOK:
CLOCK: [2024-03-17 Sun 10:55]--[2024-03-17 Sun 11:20] =>  0:25
CLOCK: [2024-03-17 Sun 10:28]--[2024-03-17 Sun 10:53] =>  0:25
:END:
読む様子の動画。勉強になる。

- 構造体の固定長配列フィールドが16バイトで、ヌル終端だから15バイト分しか入らない
  - 文字数制限は脆弱性対策のよう
- psの検索結果として出てくるのはコマンド名かと思いきや、basenameで切り取られた結果。パスは含まれない
- basenameはシェルコマンドにもある
- 15バイト制限を回避する ~f~ オプションがある。情報源を/proc/[pid]/cmdlineに変えているが、このファイルでのパスはbasenameを取ってなかったり引数も含まれたりといろいろ不都合がある。行頭マッチは使えない

#+caption: cmdlineを見る。ディレクトリから始まっているのと、orange/guix-profile -> orange.guix-profileになってしまっている
#+begin_src shell
  cat /proc/177525/cmdline
#+end_src

#+RESULTS:
#+begin_results
/home/orange/.guix-profile/bin/emacs
#+end_results

** WIP [[https://gihyo.jp/dp/ebook/2013/978-4-7741-5517-3][はじめてのOSコードリーディング　――UNIX V6で学ぶカーネルのしくみ | Gihyo Digital Publishing … 技術評論社の電子書籍]]
:PROPERTIES:
:Effort:   30:00
:END:
:LOGBOOK:
CLOCK: [2024-03-29 Fri 00:28]--[2024-03-29 Fri 00:53] =>  0:25
CLOCK: [2024-03-29 Fri 00:02]--[2024-03-29 Fri 00:27] =>  0:25
CLOCK: [2024-03-28 Thu 22:52]--[2024-03-28 Thu 23:17] =>  0:25
CLOCK: [2024-03-28 Thu 22:27]--[2024-03-28 Thu 22:52] =>  0:25
CLOCK: [2024-03-27 Wed 19:56]--[2024-03-27 Wed 20:21] =>  0:25
CLOCK: [2024-03-27 Wed 00:44]--[2024-03-27 Wed 01:09] =>  0:25
CLOCK: [2024-03-27 Wed 00:18]--[2024-03-27 Wed 00:43] =>  0:25
CLOCK: [2024-03-26 Tue 00:12]--[2024-03-26 Tue 00:37] =>  0:25
CLOCK: [2024-03-25 Mon 21:58]--[2024-03-25 Mon 22:23] =>  0:25
CLOCK: [2024-03-25 Mon 21:33]--[2024-03-25 Mon 21:58] =>  0:25
CLOCK: [2024-03-25 Mon 20:31]--[2024-03-25 Mon 20:56] =>  0:25
CLOCK: [2024-03-25 Mon 13:23]--[2024-03-25 Mon 13:48] =>  0:25
CLOCK: [2024-03-23 Sat 19:45]--[2024-03-23 Sat 20:10] =>  0:25
CLOCK: [2024-03-23 Sat 17:59]--[2024-03-23 Sat 18:24] =>  0:25
CLOCK: [2024-03-23 Sat 15:51]--[2024-03-23 Sat 16:16] =>  0:25
CLOCK: [2024-03-23 Sat 14:54]--[2024-03-23 Sat 15:19] =>  0:25
CLOCK: [2024-03-23 Sat 14:29]--[2024-03-23 Sat 14:54] =>  0:25
CLOCK: [2024-03-23 Sat 10:36]--[2024-03-23 Sat 11:01] =>  0:25
CLOCK: [2024-03-23 Sat 09:55]--[2024-03-23 Sat 10:20] =>  0:25
CLOCK: [2024-03-17 Sun 14:47]--[2024-03-17 Sun 15:12] =>  0:25
CLOCK: [2024-03-16 Sat 13:48]--[2024-03-16 Sat 14:13] =>  0:25
CLOCK: [2024-03-16 Sat 13:16]--[2024-03-16 Sat 13:41] =>  0:25
CLOCK: [2024-03-16 Sat 09:48]--[2024-03-16 Sat 10:13] =>  0:25
CLOCK: [2024-03-16 Sat 09:18]--[2024-03-16 Sat 09:43] =>  0:25
CLOCK: [2024-03-16 Sat 08:44]--[2024-03-16 Sat 09:09] =>  0:25
CLOCK: [2024-03-16 Sat 01:41]--[2024-03-16 Sat 02:06] =>  0:25
CLOCK: [2024-03-16 Sat 00:50]--[2024-03-16 Sat 01:15] =>  0:25
:END:

- 99, 136

Unixコードリーディングの本。

コツ。

- まずは最後まで読んで全体像を把握する
- 仕様書やユーザーズマニュアルを読む
  本書と併せて仕様書やユーザプログラマーズマニュアルを読むと理解が早まる。ソースコードから仕様を理解するのではなく、仕様を理解してからソースコードを読む。

- 構造体をよく見る

  プログラムはあるデータをいかに操作するか、というもの。処理対象の構造体やフラグを見ているだけでどのような処理が行われるのか想像がつくことは多い。

準備方法。

#+begin_src shell
  # https://www.utam0k.jp/blog/2019/03/05/xv6_intro/ から
  sudo apt install git nasm build-essential qemu gdb
  git clone git@github.com:mit-pdos/xv6-public.git
  make qemu     # GUIありの起動
  make qemu-nox # GUIなしの起動
  make qemu-nox-gdb # Booting with gdbserver

  cd <path to xv6>
  gdb
  (gdb) source .gdbinit
#+end_src

** TODO [[https://www.amazon.co.jp/-/en/%E9%AB%98%E6%9E%97-%E5%93%B2/dp/4873112885][Amazon.co.jp: Binary Hacks ―ハッカー秘伝のテクニック100選 : 高林 哲, 鵜飼 文敏, 佐藤 祐介, 浜地 慎一郎, 首藤 一幸: 本]]
:PROPERTIES:
:Effort:   20:00
:END:
:LOGBOOK:
CLOCK: [2024-03-14 Thu 22:32]--[2024-03-14 Thu 22:57] =>  0:25
CLOCK: [2024-03-14 Thu 22:03]--[2024-03-14 Thu 22:28] =>  0:25
CLOCK: [2024-03-14 Thu 21:37]--[2024-03-14 Thu 22:02] =>  0:25
:END:
バイナリ本。

#+caption: ELFヘッダを調べる
#+begin_src shell
readelf -h /bin/ls
#+end_src

#+RESULTS:
#+begin_results
ELF Header:
  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00
  Class:                             ELF64
  Data:                              2's complement, little endian
  Version:                           1 (current)
  OS/ABI:                            UNIX - System V
  ABI Version:                       0
  Type:                              DYN (Position-Independent Executable file)
  Machine:                           Advanced Micro Devices X86-64
  Version:                           0x1
  Entry point address:               0x6ab0
  Start of program headers:          64 (bytes into file)
  Start of section headers:          136224 (bytes into file)
  Flags:                             0x0
  Size of this header:               64 (bytes)
  Size of program headers:           56 (bytes)
  Number of program headers:         13
  Size of section headers:           64 (bytes)
  Number of section headers:         31
  Section header string table index: 30
#+end_results

#+caption: プログラムヘッダを表示する
#+begin_src shell
  readelf -l /bin/ls
#+end_src

#+RESULTS:
#+begin_results

Elf file type is DYN (Position-Independent Executable file)
Entry point 0x6ab0
There are 13 program headers, starting at offset 64

Program Headers:
  Type           Offset             VirtAddr           PhysAddr
                 FileSiz            MemSiz              Flags  Align
  PHDR           0x0000000000000040 0x0000000000000040 0x0000000000000040
                 0x00000000000002d8 0x00000000000002d8  R      0x8
  INTERP         0x0000000000000318 0x0000000000000318 0x0000000000000318
                 0x000000000000001c 0x000000000000001c  R      0x1
      [Requesting program interpreter: /lib64/ld-linux-x86-64.so.2]
  LOAD           0x0000000000000000 0x0000000000000000 0x0000000000000000
                 0x0000000000003428 0x0000000000003428  R      0x1000
  LOAD           0x0000000000004000 0x0000000000004000 0x0000000000004000
                 0x0000000000013146 0x0000000000013146  R E    0x1000
  LOAD           0x0000000000018000 0x0000000000018000 0x0000000000018000
                 0x0000000000007458 0x0000000000007458  R      0x1000
  LOAD           0x0000000000020000 0x0000000000021000 0x0000000000021000
                 0x0000000000001278 0x0000000000002540  RW     0x1000
  DYNAMIC        0x0000000000020a98 0x0000000000021a98 0x0000000000021a98
                 0x00000000000001c0 0x00000000000001c0  RW     0x8
  NOTE           0x0000000000000338 0x0000000000000338 0x0000000000000338
                 0x0000000000000030 0x0000000000000030  R      0x8
  NOTE           0x0000000000000368 0x0000000000000368 0x0000000000000368
                 0x0000000000000044 0x0000000000000044  R      0x4
  GNU_PROPERTY   0x0000000000000338 0x0000000000000338 0x0000000000000338
                 0x0000000000000030 0x0000000000000030  R      0x8
  GNU_EH_FRAME   0x000000000001cdcc 0x000000000001cdcc 0x000000000001cdcc
                 0x000000000000056c 0x000000000000056c  R      0x4
  GNU_STACK      0x0000000000000000 0x0000000000000000 0x0000000000000000
                 0x0000000000000000 0x0000000000000000  RW     0x10
  GNU_RELRO      0x0000000000020000 0x0000000000021000 0x0000000000021000
                 0x0000000000001000 0x0000000000001000  R      0x1

 Section to Segment mapping:
  Segment Sections...
   00
   01     .interp
   02     .interp .note.gnu.property .note.gnu.build-id .note.ABI-tag .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rela.dyn .rela.plt
   03     .init .plt .plt.got .plt.sec .text .fini
   04     .rodata .eh_frame_hdr .eh_frame
   05     .ctors .dtors .data.rel.ro .dynamic .got .data .bss
   06     .dynamic
   07     .note.gnu.property
   08     .note.gnu.build-id .note.ABI-tag
   09     .note.gnu.property
   10     .eh_frame_hdr
   11
   12     .ctors .dtors .data.rel.ro .dynamic .got
#+end_results

#+caption: セクションヘッダを見る
#+begin_src shell
  readelf -S /bin/ls
#+end_src

#+RESULTS:
#+begin_results
There are 31 section headers, starting at offset 0x21420:

Section Headers:
  [Nr] Name              Type             Address           Offset
       Size              EntSize          Flags  Link  Info  Align
  [ 0]                   NULL             0000000000000000  00000000
       0000000000000000  0000000000000000           0     0     0
  [ 1] .interp           PROGBITS         0000000000000318  00000318
       000000000000001c  0000000000000000   A       0     0     1
  [ 2] .note.gnu.pr[...] NOTE             0000000000000338  00000338
       0000000000000030  0000000000000000   A       0     0     8
  [ 3] .note.gnu.bu[...] NOTE             0000000000000368  00000368
       0000000000000024  0000000000000000   A       0     0     4
  [ 4] .note.ABI-tag     NOTE             000000000000038c  0000038c
       0000000000000020  0000000000000000   A       0     0     4
  [ 5] .gnu.hash         GNU_HASH         00000000000003b0  000003b0
       000000000000004c  0000000000000000   A       6     0     8
  [ 6] .dynsym           DYNSYM           0000000000000400  00000400
       0000000000000b88  0000000000000018   A       7     1     8
  [ 7] .dynstr           STRTAB           0000000000000f88  00000f88
       00000000000005a6  0000000000000000   A       0     0     1
  [ 8] .gnu.version      VERSYM           000000000000152e  0000152e
       00000000000000f6  0000000000000002   A       6     0     2
  [ 9] .gnu.version_r    VERNEED          0000000000001628  00001628
       00000000000000c0  0000000000000000   A       7     2     8
  [10] .rela.dyn         RELA             00000000000016e8  000016e8
       00000000000013e0  0000000000000018   A       6     0     8
  [11] .rela.plt         RELA             0000000000002ac8  00002ac8
       0000000000000960  0000000000000018  AI       6    25     8
  [12] .init             PROGBITS         0000000000004000  00004000
       0000000000000025  0000000000000000  AX       0     0     4
  [13] .plt              PROGBITS         0000000000004030  00004030
       0000000000000650  0000000000000010  AX       0     0     16
  [14] .plt.got          PROGBITS         0000000000004680  00004680
       0000000000000030  0000000000000010  AX       0     0     16
  [15] .plt.sec          PROGBITS         00000000000046b0  000046b0
       0000000000000640  0000000000000010  AX       0     0     16
  [16] .text             PROGBITS         0000000000004cf0  00004cf0
       0000000000012441  0000000000000000  AX       0     0     16
  [17] .fini             PROGBITS         0000000000017134  00017134
       0000000000000012  0000000000000000  AX       0     0     4
  [18] .rodata           PROGBITS         0000000000018000  00018000
       0000000000004dcc  0000000000000000   A       0     0     32
  [19] .eh_frame_hdr     PROGBITS         000000000001cdcc  0001cdcc
       000000000000056c  0000000000000000   A       0     0     4
  [20] .eh_frame         PROGBITS         000000000001d338  0001d338
       0000000000002120  0000000000000000   A       0     0     8
  [21] .ctors            PROGBITS         0000000000021000  00020000
       0000000000000010  0000000000000000  WA       0     0     8
  [22] .dtors            PROGBITS         0000000000021010  00020010
       0000000000000010  0000000000000000  WA       0     0     8
  [23] .data.rel.ro      PROGBITS         0000000000021020  00020020
       0000000000000a78  0000000000000000  WA       0     0     32
  [24] .dynamic          DYNAMIC          0000000000021a98  00020a98
       00000000000001c0  0000000000000010  WA       7     0     8
  [25] .got              PROGBITS         0000000000021c58  00020c58
       00000000000003a0  0000000000000008  WA       0     0     8
  [26] .data             PROGBITS         0000000000022000  00021000
       0000000000000278  0000000000000000  WA       0     0     32
  [27] .bss              NOBITS           0000000000022280  00021278
       00000000000012c0  0000000000000000  WA       0     0     32
  [28] .gnu_debugaltlink PROGBITS         0000000000000000  00021278
       0000000000000049  0000000000000000           0     0     1
  [29] .gnu_debuglink    PROGBITS         0000000000000000  000212c4
       0000000000000034  0000000000000000           0     0     4
  [30] .shstrtab         STRTAB           0000000000000000  000212f8
       0000000000000125  0000000000000000           0     0     1
Key to Flags:
  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),
  L (link order), O (extra OS processing required), G (group), T (TLS),
  C (compressed), x (unknown), o (OS specific), E (exclude),
  D (mbind), l (large), p (processor specific)
#+end_results

#+caption: 共有ライブラリが何かはELF動的セクションのNEEDEDに記録されている
#+begin_src shell
objdump -p /bin/ls
#+end_src

#+RESULTS:
#+begin_results

/bin/ls:     file format elf64-x86-64

Program Header:
    PHDR off    0x0000000000000040 vaddr 0x0000000000000040 paddr 0x0000000000000040 align 2**3
         filesz 0x00000000000002d8 memsz 0x00000000000002d8 flags r--
  INTERP off    0x0000000000000318 vaddr 0x0000000000000318 paddr 0x0000000000000318 align 2**0
         filesz 0x000000000000001c memsz 0x000000000000001c flags r--
    LOAD off    0x0000000000000000 vaddr 0x0000000000000000 paddr 0x0000000000000000 align 2**12
         filesz 0x0000000000003428 memsz 0x0000000000003428 flags r--
    LOAD off    0x0000000000004000 vaddr 0x0000000000004000 paddr 0x0000000000004000 align 2**12
         filesz 0x0000000000013146 memsz 0x0000000000013146 flags r-x
    LOAD off    0x0000000000018000 vaddr 0x0000000000018000 paddr 0x0000000000018000 align 2**12
         filesz 0x0000000000007458 memsz 0x0000000000007458 flags r--
    LOAD off    0x0000000000020000 vaddr 0x0000000000021000 paddr 0x0000000000021000 align 2**12
         filesz 0x0000000000001278 memsz 0x0000000000002540 flags rw-
 DYNAMIC off    0x0000000000020a98 vaddr 0x0000000000021a98 paddr 0x0000000000021a98 align 2**3
         filesz 0x00000000000001c0 memsz 0x00000000000001c0 flags rw-
    NOTE off    0x0000000000000338 vaddr 0x0000000000000338 paddr 0x0000000000000338 align 2**3
         filesz 0x0000000000000030 memsz 0x0000000000000030 flags r--
    NOTE off    0x0000000000000368 vaddr 0x0000000000000368 paddr 0x0000000000000368 align 2**2
         filesz 0x0000000000000044 memsz 0x0000000000000044 flags r--
0x6474e553 off    0x0000000000000338 vaddr 0x0000000000000338 paddr 0x0000000000000338 align 2**3
         filesz 0x0000000000000030 memsz 0x0000000000000030 flags r--
EH_FRAME off    0x000000000001cdcc vaddr 0x000000000001cdcc paddr 0x000000000001cdcc align 2**2
         filesz 0x000000000000056c memsz 0x000000000000056c flags r--
   STACK off    0x0000000000000000 vaddr 0x0000000000000000 paddr 0x0000000000000000 align 2**4
         filesz 0x0000000000000000 memsz 0x0000000000000000 flags rw-
   RELRO off    0x0000000000020000 vaddr 0x0000000000021000 paddr 0x0000000000021000 align 2**0
         filesz 0x0000000000001000 memsz 0x0000000000001000 flags r--

Dynamic Section:
  NEEDED               libselinux.so.1
  NEEDED               libc.so.6
  INIT                 0x0000000000004000
  FINI                 0x0000000000017134
  GNU_HASH             0x00000000000003b0
  STRTAB               0x0000000000000f88
  SYMTAB               0x0000000000000400
  STRSZ                0x00000000000005a6
  SYMENT               0x0000000000000018
  DEBUG                0x0000000000000000
  PLTGOT               0x0000000000021c58
  PLTRELSZ             0x0000000000000960
  PLTREL               0x0000000000000007
  JMPREL               0x0000000000002ac8
  RELA                 0x00000000000016e8
  RELASZ               0x00000000000013e0
  RELAENT              0x0000000000000018
  FLAGS                0x0000000000000008
  FLAGS_1              0x0000000008000001
  VERNEED              0x0000000000001628
  VERNEEDNUM           0x0000000000000002
  VERSYM               0x000000000000152e
  RELACOUNT            0x00000000000000c7

Version References:
  required from libselinux.so.1:
    0x0edb87f0 0x00 08 LIBSELINUX_1.0
  required from libc.so.6:
    0x06969188 0x00 11 GLIBC_2.28
    0x06969194 0x00 10 GLIBC_2.14
    0x069691b3 0x00 09 GLIBC_2.33
    0x06969197 0x00 07 GLIBC_2.17
    0x0d696914 0x00 06 GLIBC_2.4
    0x069691b4 0x00 05 GLIBC_2.34
    0x09691974 0x00 04 GLIBC_2.3.4
    0x09691a75 0x00 03 GLIBC_2.2.5
    0x0d696913 0x00 02 GLIBC_2.3

#+end_results

** WIP [[https://gihyo.jp/dp/ebook/2022/978-4-297-13149-4][Linuxのしくみ ―実験と図解で学ぶOS、仮想マシン、コンテナの基礎知識【増補改訂版】 | Gihyo Digital Publishing … 技術評論社の電子書籍]]
:PROPERTIES:
:Effort:   20:00
:END:
:LOGBOOK:
CLOCK: [2024-03-27 Wed 23:00]--[2024-03-27 Wed 23:25] =>  0:25
CLOCK: [2024-03-27 Wed 22:34]--[2024-03-27 Wed 22:59] =>  0:25
CLOCK: [2024-03-27 Wed 21:58]--[2024-03-27 Wed 22:23] =>  0:25
CLOCK: [2024-03-27 Wed 21:20]--[2024-03-27 Wed 21:45] =>  0:25
CLOCK: [2024-03-27 Wed 20:54]--[2024-03-27 Wed 21:19] =>  0:25
CLOCK: [2024-03-23 Sat 20:34]--[2024-03-23 Sat 20:59] =>  0:25
CLOCK: [2024-03-23 Sat 18:25]--[2024-03-23 Sat 18:50] =>  0:25
CLOCK: [2024-03-23 Sat 17:34]--[2024-03-23 Sat 17:59] =>  0:25
CLOCK: [2024-03-23 Sat 15:20]--[2024-03-23 Sat 15:45] =>  0:25
CLOCK: [2024-03-23 Sat 11:28]--[2024-03-23 Sat 11:53] =>  0:25
CLOCK: [2024-03-23 Sat 11:03]--[2024-03-23 Sat 11:28] =>  0:25
CLOCK: [2024-03-18 Mon 00:41]--[2024-03-18 Mon 01:06] =>  0:25
CLOCK: [2024-03-03 Sun 15:01]--[2024-03-03 Sun 15:26] =>  0:25
CLOCK: [2024-03-03 Sun 14:30]--[2024-03-03 Sun 14:55] =>  0:25
CLOCK: [2024-03-02 Sat 13:47]--[2024-03-02 Sat 14:12] =>  0:25
CLOCK: [2024-03-02 Sat 11:49]--[2024-03-02 Sat 12:14] =>  0:25
CLOCK: [2024-01-08 Mon 10:21]--[2024-01-08 Mon 10:46] =>  0:25
CLOCK: [2024-01-07 Sun 19:37]--[2024-01-07 Sun 20:02] =>  0:25
CLOCK: [2024-01-07 Sun 19:04]--[2024-01-07 Sun 19:29] =>  0:25
CLOCK: [2024-01-07 Sun 18:10]--[2024-01-07 Sun 18:35] =>  0:25
CLOCK: [2024-01-06 Sat 08:59]--[2024-01-06 Sat 09:24] =>  0:25
CLOCK: [2024-01-06 Sat 08:34]--[2024-01-06 Sat 08:59] =>  0:25
CLOCK: [2024-01-05 Fri 22:48]--[2024-01-05 Fri 23:13] =>  0:25
CLOCK: [2024-01-05 Fri 22:23]--[2024-01-05 Fri 22:48] =>  0:25
:END:

- 42, 147

動かして学ぶ本。

- 論理CPUが実行している命令の割合は ~sar~ コマンドを使う

#+caption: 論理CPU0の実行状況
#+begin_src shell
sar -P 0 1 1
#+end_src

#+RESULTS:
#+begin_results
Linux 5.15.0-41-generic (orange-ThinkPad-X1-Carbon-Gen-10) 	01/05/2024 	_x86_64_	(16 CPU)

10:35:45 PM     CPU     %user     %nice   %system   %iowait    %steal     %idle
10:35:46 PM       0     15.31      0.00      1.02      0.00      0.00     83.67
Average:          0     15.31      0.00      1.02      0.00      0.00     83.67
#+end_results

- tasksetコマンドで、論理CPUを指定してタスクを実行できる

#+caption: プログラムがどのようなライブラリをリンクしているかはlddコマンドで確かめられる
#+begin_src shell
ldd /bin/echo
#+end_src

#+RESULTS:
#+begin_results
	linux-vdso.so.1 (0x00007ffd65ef3000)
	libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007fc6a02a6000)
	/lib64/ld-linux-x86-64.so.2 (0x00007fc6a04ef000)
#+end_results

#+caption: catコマンドも見る
#+begin_src shell
ldd /bin/echo
#+end_src

#+RESULTS:
#+begin_results
	linux-vdso.so.1 (0x00007ffccff55000)
	libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f308c86a000)
	/lib64/ld-linux-x86-64.so.2 (0x00007f308cab3000)
#+end_results

#+caption: python3を見る
#+begin_src shell
ldd /usr/bin/python3
#+end_src

#+RESULTS:
#+begin_results
	linux-vdso.so.1 (0x00007fffc69f0000)
	libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007f754c0a9000)
	libexpat.so.1 => /lib/x86_64-linux-gnu/libexpat.so.1 (0x00007f754c078000)
	libz.so.1 => /lib/x86_64-linux-gnu/libz.so.1 (0x00007f754c05c000)
	libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f754be34000)
	/lib64/ld-linux-x86-64.so.2 (0x00007f754c791000)
#+end_results

#+caption: プロセスの数を調べる
#+begin_src shell
ps aux --no-header | wc -l
#+end_src

#+RESULTS:
#+begin_results
451
#+end_results

- プロセスのメモリマップは `cat /proc/{{pid}}/maps` で調べられる

#+caption: プロセスの木構造を表示する
#+begin_src shell
pstree -p
#+end_src

- 多くのプロセスで、CPUを使った時間は1秒に満たない
  - 各プロセスは起動してから、CPUを使わずに何らかのイベントが発生するのを待つ、スリープ状態になっていた
  - STATフィールドの1文字目がSであるプロセスはスリープ状態にあることを示す
  - プロセスがCPUを使いたいというプロセスは実行可能状態であるという。このときSTATフィールドの1文字目はRになる
  - 実際にCPUを使っている状態は実行状態
  - プロセスが終了するとゾンビ状態(STATフィールドはZ)になり、その後消滅する

#+caption: プロセスの状態を表示する
#+begin_src shell
ps aux
#+end_src

#+caption: wait組み込みコマンドによって終了状態を得る
#+begin_src shell
  false &
  wait $! # falseプロセスの終了を待ち合わせる。falseコマンドのpidは$!変数から得られる
  echo "falseコマンドが終了しました: $?" # wait後にfalseプロセスの戻り値は$?変数から得られる
#+end_src

#+RESULTS:
#+begin_results
falseコマンドが終了しました: 1
#+end_results

- 親プロセスは子プロセスの終了状況を適宜回収して、リソースをカーネルに解放する

#+caption: シグナルの一覧
#+begin_src shell
man 7 signal | head -n 10
#+end_src

#+RESULTS:
#+begin_results
SIGNAL(7)                  Linux Programmer's Manual                 SIGNAL(7)

NAME
       signal - overview of signals

DESCRIPTION
       Linux  supports both POSIX reliable signals (hereinafter "standard sig‐
       nals") and POSIX real-time signals.

   Signal dispositions
#+end_results

#+caption: セッションについての情報
#+begin_src shell
ps ajx | head -n 10
#+end_src

#+RESULTS:
#+begin_results
   PPID     PID    PGID     SID TTY        TPGID STAT   UID   TIME COMMAND
      0       1       1       1 ?             -1 Ss       0   1:16 /sbin/init splash
      0       2       0       0 ?             -1 S        0   0:04 [kthreadd]
      2       3       0       0 ?             -1 I<       0   0:00 [rcu_gp]
      2       4       0       0 ?             -1 I<       0   0:00 [rcu_par_gp]
      2       5       0       0 ?             -1 I<       0   0:00 [netns]
      2      10       0       0 ?             -1 I<       0   0:00 [mm_percpu_wq]
      2      11       0       0 ?             -1 S        0   0:00 [rcu_tasks_rude_]
      2      12       0       0 ?             -1 S        0   0:00 [rcu_tasks_trace]
      2      13       0       0 ?             -1 S        0   0:41 [ksoftirqd/0]
#+end_results

- プロセスグループを使うと、当該プロセスグループに所属する全プロセスに対してシグナルを投げられる

#+caption: プロセスの階層をたどる
#+begin_src shell
  sleep 1 &
  ps ajx | egrep "$PPID|$!"
#+end_src

#+RESULTS:
#+begin_results
      1  148772  148310  148310 ?             -1 Sl    1000 409:32 /home/orange/.guix-profile/bin/emacs
 148772  148817  148817  148817 ?             -1 Ss    1000   0:10 /usr/bin/cmigemo -q --emacs -d /usr/share/cmigemo/utf-8/migemo-dict
 148772  153047  153047  153047 pts/11    153047 SLsl+ 1000 1347:41 /opt/google/chrome/chrome
 148772  153626  153626  153626 pts/6     153626 Ss+   1000   0:00 /bin/bash
 148772  153657  153657  153657 pts/3     153657 Ss+   1000   0:00 /bin/bash
 148772  153776  153776  153776 pts/4     153776 Ss+   1000   0:00 /bin/bash
 148772  153837  153837  153837 pts/0     153837 Ss+   1000   0:00 /bin/bash
 148772  156827  156827  156827 ?             -1 Ss    1000   0:44 /usr/bin/mozc_emacs_helper --suppress_stderr
 148772  449717  449717  449717 ?             -1 Ssl   1000   0:09 /home/orange/.emacs.d/.cask/.cache/lsp/rust/rust-analyzer
 148772  956786  956786  956786 pts/2     956786 Ss+   1000   0:00 /bin/bash
 148772 1030938 1030938 1030938 pts/7    1030938 Ss+   1000   1:40 /usr/bin/python3 -m http.server 8000
 148772 1052415 1052415 1052415 pts/8    1052415 Ss+   1000   0:00 /bin/bash
 148772 1203772 1203772 1203772 pts/9    1203772 Ss+   1000   0:00 /bin/bash
 148772 1215308 1215308 1215308 ?             -1 Ssl   1000   0:50 /home/orange/go/bin/gopls -remote=auto
 148772 1224161 1224161 1224161 ?             -1 Ssl   1000   0:29 /home/orange/go/bin/gopls -remote=auto
 148772 1260197 1260197 1260197 ?             -1 Ssl   1000   0:27 /home/orange/go/bin/gopls -remote=auto
 148772 1260667 1260667 1260667 pts/10   1260667 Ss+   1000   0:00 /bin/bash
 148772 1278406 1278406 1278406 ?             -1 Ssl   1000   1:35 /home/orange/go/bin/gopls -remote=auto
 148772 1386122 1386122 1386122 ?             -1 Ssl   1000   0:36 /home/orange/go/bin/gopls -remote=auto
 148772 1633877 1633877 1633877 pts/12   1633877 Ss+   1000   0:00 /bin/bash
 148772 2345920 2345920 2345920 ?             -1 Ssl   1000   0:12 /home/orange/go/bin/gopls -remote=auto
 148772 2463164 2463164 2463164 pts/13   2463164 Ss+   1000   0:00 /bin/bash
 148772 2791028 2791028 2791028 pts/14   2791028 Ss+   1000   0:00 /bin/bash
 148772 2798220 2798220 2798220 ?             -1 Ssl   1000   0:06 /home/orange/go/bin/gopls -remote=auto
 148772 2798497 2798497 2798497 pts/15   2798497 Ss+   1000   0:00 /bin/bash
 148772 3126717 3126717 3126717 ?             -1 Ss    1000   0:00 /bin/bash
3126717 3126718 3126717 3126717 ?             -1 S     1000   0:00 sleep 1
3126717 3126720 3126717 3126717 ?             -1 S     1000   0:00 grep -E 148772|3126718
#+end_results

- 親 ppid: 1, pid: 148772 ~//home/orange/.guix-profile/bin/emacs~
- 子 ppid: 148772, pid: 3126717 ~/bin/bash~
- 子 ppid: 3126717, pid: 3126718 ~sleep 1~
- ~/bin/bash~, ~sleep 1~, ~grep -E 148772|3126718~ はPGID(プロセスグループID)が同じである

デーモンの特徴。

- 端末から入出力する必要がないので、端末が割り当てられていない
- あらゆるログインセッションが終了しても影響を受けないように、独自のセッションを持つ
- デーモンを生成したプロセスがデーモンの終了を気にしなくていいように、initが親になっている

#+caption: デーモンの場合
#+begin_src shell
  ps ajx | grep dockerd
#+end_src

#+RESULTS:
#+begin_results
   PPID     PID    PGID     SID TTY        TPGID STAT   UID   TIME COMMAND
      1 2952095 2952095 2952095 ?             -1 Ssl      0  23:14 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock
3130365 3130367 3130365 3130365 ?             -1 S     1000   0:00 grep dockerd
#+end_results

- 親プロセスはinit(PPIDが1)
- TTYは割り当てられていない
- セッションIDがPIDと同じ

#+caption: 経過時間の実験
#+begin_src shell
  time sleep 1
  # real	0m1.002s
  # user	0m0.002s
  # sys	0m0.001s
#+end_src

- realはほぼ1秒。開始直後にCPUを手放しスリープ状態になり、1秒後にCPUをまた使いはじめても終了処理をするだけなので、userとsysはほぼ0
- カーネルに「コンテナ」という名前の機能があるわけではない。namespace機能をうまく活用して実現している

** TODO [[https://www.kanzennirikaisita.com/posts/linux-learning-roadmap][Linux について学ぶおすすめの流れ【書籍を中心に紹介】 - 完全に理解した.com]]
おすすめの本の紹介記事。
** TODO [[https://tatsu-zine.com/books/linux-bootprocess][新装改訂版 Linuxのブートプロセスをみる【委託】 - 達人出版会]]
ブートプロセスを追う本。
** TODO [[https://tatsu-zine.com/books/naruhounix][なるほどUnixプロセス ― Rubyで学ぶUnixの基礎 - 達人出版会]]
プロセスの解説。
** TODO [[https://qiita.com/ueokande/items/c75de7c9df2bcceda7a9][シェルとファイルデスクリプタのお話 - Qiita]]
ファイルディスクリプタをシェルで扱う。
** TODO [[https://milestone-of-se.nesuke.com/sv-basic/linux-basic/fd-stdinout-pipe-redirect/][【図解】file descriptorと標準入力/出力とパイプ,リダイレクト | SEの道標]]
ファイルディスクリプタ。
** TODO [[https://book.mynavi.jp/ec/products/detail/id=121220][ゼロからのOS自作入門 | マイナビブックス]]
:LOGBOOK:
CLOCK: [2022-11-19 Sat 09:48]--[2022-11-19 Sat 10:13] =>  0:25
:END:
ゼロからOSを自作する本。
** TODO [[https://www.shuwasystem.co.jp/book/9784798044781.html][ハロー“Hello, World” OSと標準ライブラリのシゴトとしくみ]]
printを実行するとき何が起こっているかの解説。
** TODO [[https://linuxjf.osdn.jp/JFdocs/The-Linux-Kernel.html#toc14][The Linux Kernel]]
:LOGBOOK:
CLOCK: [2022-05-15 Sun 18:20]--[2022-05-15 Sun 18:45] =>  0:25
:END:
Linuxカーネルの解説。
** TODO [[https://0xax.gitbooks.io/linux-insides/content/][Introduction · Linux Inside]]
Linuxカーネルの解説。
** TODO [[https://www.oreilly.co.jp/books/9784873113623/][O'Reilly Japan - Linuxシステムプログラミング]]
システムプログラミングの本。
** TODO [[https://www.oreilly.co.jp/books/9784873115856/][O'Reilly Japan - Linuxプログラミングインタフェース]]
Linuxのリファレンス。
** TODO [[https://www.oreilly.co.jp/books/9784873113135/][O'Reilly Japan - 詳解 Linuxカーネル 第3版]]
:LOGBOOK:
CLOCK: [2022-06-01 Wed 00:42]--[2022-06-01 Wed 01:07] =>  0:25
:END:
- 15
カーネルのソースコードを読む本。
* Reference
** [[https://pubs.opengroup.org/onlinepubs/9699919799/][The Open Group Base Specifications Issue 7, 2018 edition]]
POSIXの最新の仕様。
** [[https://people.freebsd.org/~lstewart/articles/cpumemory.pdf][What Every Programmer Should Know About Memory]]
ハードウェアとしてのメモリを解説した本。
** [[https://warsus.github.io/lions-/][A COMMENTARY ON THESIXTH EDITIONUNIX OPERATING SYSTEM]]
UNIX V6のガイドブック。
** [[https://www.youtube.com/watch?v=XXtZy6OhjUI][OSカーネルに興味がある人におすすめの参考資料 - YouTube]]
おすすめ本詳解。
** [[https://sadservers.com/][SadServers - Troubleshooting Linux Servers]]
壊れたLinuxサーバを解くサイト。
** [[https://www.amazon.co.jp/Performance-Tools-Addison-Wesley-Professional-Computing/dp/0136554822][Amazon | BPF Performance Tools (Addison-Wesley Professional Computing Series) | Gregg, Brendan | Performance Optimization]]
Linuxのチューニングの本。
** [[https://www.oreilly.co.jp/books/9784814400072/][O'Reilly Japan - 詳解 システム・パフォーマンス 第2版]]
Linuxのチューニングの本。
** [[https://linuc.org/study/knowledge/541/][カーネル再構築 - Linux技術者認定 LinuC | LPI-Japan]]
やってみないとな。
** [[https://www.pathname.com/fhs/][Filesystem Hierarchy Standard]]
パス名の標準仕様。
** [[https://linuc.org/study/knowledge/506/][「/etc/hosts」ファイル - Linux技術者認定 LinuC | LPI-Japan]]
DNSの歴史。
** [[https://linuc.org/study/knowledge/332/][i386って何？ - Linux技術者認定 LinuC | LPI-Japan]]
#+begin_quote
今ではCPUの名前というと「Core 2 Duo」とか「Athlon」、あるいは「Xeon」や「Opteron」といったかっこいい名前で呼ばれるように なりましたが、Linuxが産声を上げた頃はCPUは重要なパーツではありますが一部品でしかなく、型番で呼ばれるものでした。
#+end_quote

なぜあの無機質な名前なのか不思議だった。
** [[https://janitor.kernelnewbies.org/][imladris.surriel.com]]
Linuxまわりのリンク集。
** [[https://kernelnewbies.org/][Linux_Kernel_Newbies - Linux Kernel Newbies]]
新米カーネル開発者が見るページ。
** [[https://linuc.org/study/knowledge/331/][Linuxカーネルの開発者になるには - Linux技術者認定 LinuC | LPI-Japan]]
:LOGBOOK:
CLOCK: [2024-02-29 Thu 22:42]--[2024-02-29 Thu 23:07] =>  0:25
CLOCK: [2024-02-29 Thu 22:17]--[2024-02-29 Thu 22:42] =>  0:25
CLOCK: [2024-02-29 Thu 19:57]--[2024-02-29 Thu 20:22] =>  0:25
:END:
Linux関連のコラム集。
** [[https://qiita.com/stc1988/items/41d9da92ea02fc3d15a3][SquashFSをマウントするまで - Qiita]]
システムをファイルに圧縮するとき使う。
** [[https://www.express.nec.co.jp/linux/distributions/knowledge/system/useradd.html][新規ユーザ作成時のデフォルト値の設定]]
ユーザの設定方法。ここでデフォルトディレクトリに ~/etc/skel~ 指定している。
** [[https://tech.unifa-e.com/entry/2019/05/23/172424][sudo実行時のカレントディレクトリや環境変数などの挙動について - ユニファ開発者ブログ]]
sudoの解説。
** [[https://linuxjm.osdn.jp/html/sudo/man8/sudo.8.html][Man page of SUDO]]
sudoの解説。特にプロセスモデルに関する詳しい解説。
** [[https://gihyo.jp/assets/files/event/2008/24svr/report/2-24svr-TechMTG-ito.pdf][Linuxカーネルの読み方]]
Linuxカーネルのソースコードを読むコツと参考文献がある。
** [[https://ja.wikipedia.org/wiki/Linux][Linux - Wikipedia]]
** [[https://www.geekpage.jp/blog/?id=2007/3/1][UNIX哲学の基本原則:Geekなぺーじ]]
UNIX哲学の一覧。
* Archives
** DONE [[https://www.amazon.co.jp/%E3%81%B5%E3%81%A4%E3%81%86%E3%81%AELinux%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0-%E7%AC%AC2%E7%89%88-Linux%E3%81%AE%E4%BB%95%E7%B5%84%E3%81%BF%E3%81%8B%E3%82%89%E5%AD%A6%E3%81%B9%E3%82%8Bgcc%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%81%AE%E7%8E%8B%E9%81%93-%E9%9D%92%E6%9C%A8-%E5%B3%B0%E9%83%8E/dp/4797386479][ふつうのLinuxプログラミング 第2版 Linuxの仕組みから学べるgccプログラミングの王道 Amazon]]
CLOSED: [2023-07-09 Sun 16:04]
:PROPERTIES:
:Effort:   10:00
:END:
:LOGBOOK:
CLOCK: [2023-07-09 Sun 11:46]--[2023-07-09 Sun 12:12] =>  0:26
CLOCK: [2023-07-09 Sun 01:28]--[2023-07-09 Sun 01:53] =>  0:25
CLOCK: [2023-07-09 Sun 00:54]--[2023-07-09 Sun 01:19] =>  0:25
CLOCK: [2023-07-09 Sun 00:23]--[2023-07-09 Sun 00:48] =>  0:25
CLOCK: [2023-07-08 Sat 21:18]--[2023-07-08 Sat 21:43] =>  0:25
CLOCK: [2023-07-08 Sat 20:49]--[2023-07-08 Sat 21:14] =>  0:25
CLOCK: [2023-07-08 Sat 20:18]--[2023-07-08 Sat 20:43] =>  0:25
CLOCK: [2023-07-08 Sat 11:41]--[2023-07-08 Sat 12:06] =>  0:25
CLOCK: [2023-07-04 Tue 22:03]--[2023-07-04 Tue 22:28] =>  0:25
CLOCK: [2023-07-04 Tue 21:37]--[2023-07-04 Tue 22:02] =>  0:25
CLOCK: [2023-07-04 Tue 00:44]--[2023-07-04 Tue 01:09] =>  0:25
CLOCK: [2023-07-02 Sun 23:08]--[2023-07-02 Sun 23:33] =>  0:25
CLOCK: [2023-07-02 Sun 22:35]--[2023-07-02 Sun 23:00] =>  0:25
CLOCK: [2023-07-02 Sun 18:55]--[2023-07-02 Sun 19:20] =>  0:25
CLOCK: [2023-07-02 Sun 18:26]--[2023-07-02 Sun 18:51] =>  0:25
CLOCK: [2023-07-02 Sun 14:30]--[2023-07-02 Sun 14:55] =>  0:25
CLOCK: [2023-07-02 Sun 14:00]--[2023-07-02 Sun 14:25] =>  0:25
CLOCK: [2023-07-02 Sun 13:30]--[2023-07-02 Sun 13:55] =>  0:25
CLOCK: [2023-07-02 Sun 13:00]--[2023-07-02 Sun 13:25] =>  0:25
CLOCK: [2023-07-02 Sun 10:51]--[2023-07-02 Sun 11:16] =>  0:25
CLOCK: [2023-07-02 Sun 01:33]--[2023-07-02 Sun 01:58] =>  0:25
CLOCK: [2023-07-01 Sat 20:21]--[2023-07-01 Sat 20:47] =>  0:26
CLOCK: [2023-07-01 Sat 18:33]--[2023-07-01 Sat 18:58] =>  0:25
CLOCK: [2023-07-01 Sat 18:07]--[2023-07-01 Sat 18:32] =>  0:25
CLOCK: [2023-07-01 Sat 15:31]--[2023-07-01 Sat 15:56] =>  0:25
:END:

Linuxの仕組みから学べるシステムプログラミング。

- Linuxはファイルシステムとプロセスとストリームでできている
- Linux上において、活動する主体はユーザではなく、プロセス
- ログイン時にクレデンシャルが作られ、プロセスに渡している
- シェルと端末は異なる
  - 端末はユーザとのインターフェースになる部分。現代では仮想化されていて無数にある。端末に対応するデバイスファイル ~/dev/tty0~ などがある
  - シェルはユーザからの命令を解釈し実行するプログラムのこと。ストリームからコマンドを読み込んで実行するプログラムにすぎない
- ttyの語源はテレタイプ。ディスプレイがなかったので長い紙に結果を出力していた
- tabの語源はtable
- キーボード → 端末ドライバ → ストリーム → プロセス → ストリーム → 端末ドライバ → ディスプレイ
- Linuxの入出力の主な4つのシステムコール
  - ストリームからバイト列を読み込むread
  - ストリームにバイト列を書き込むwrite
  - ストリームを作るopen
  - 用済みのストリームを始末するclose
- ファイルディスクリプタは整数値にすぎない
- 固定のファイルディスクリプタ
  - 0: 標準入力
  - 1: 標準出力
  - 2: 標準エラー出力
- 標準エラー出力がある理由。標準出力は次のプログラムの標準入力につながれている場合が多いので、ここでエラーを出しても気づかない可能性が高いから
- ストリームはファイルディスクリプタで表現され、read()またはwrite()で操作できるもののこと
- システムコールは遅いので、バッファに溜まってからシステムコールするとよい
- gets()はバッファオーバーフローを起こす可能性があり、使ってはいけない。世界初のインターネットワームはバッファオーバーフローの脆弱性を利用した
- ビルド
  - プリプロセス
    - 純粋なC言語のソースコードを出力する
  - コンパイル
    - C言語のソースコードをアセンブリ言語のソースコードに変換する
  - アセンブル
    - アセンブリ言語のソースコードを機械語を含むオブジェクトファイルに変換する
  - リンク
    - オブジェクトファイルから実行ファイルを生成する
- /proc にはプロセスの情報がファイルに格納されている
- ダイナミックロードは、すべてのリンク作業を実行時に行う手法
- 0は成功、1はエラーというのはLinuxに特有の決まりごと
- プロセスの親子関係を調べる ~pstree~
- ログインシェルを調べる ~w~, ~last~
- HTTPの仕組みとファイルシステムはよく似ている
- HTTPで公開されるのはファイルシステムの一部だけ。これをドキュメントツリーという。ドキュメントツリーのルートディレクトリをドキュメントルートという。デフォルト設定のWebサーバでいうところの ~/var/www/html~ のことか
- HTTPサーバのしごと: HTTPリクエストをドキュメントルート以下のファイルにマップし、レスポンスとして送り返すこと
** DONE [[https://www.amazon.co.jp/%E7%A7%81%E3%81%AF%E3%81%A9%E3%81%AE%E3%82%88%E3%81%86%E3%81%AB%E3%81%97%E3%81%A6Linux%E3%82%AB%E3%83%BC%E3%83%8D%E3%83%AB%E3%82%92%E5%AD%A6%E3%82%93%E3%81%A0%E3%81%8B-Device-Tree%E7%B7%A8%E3%82%86%E3%81%9F%E3%81%8B%E3%81%95%E3%82%93%E3%81%AE%E6%8A%80%E8%A1%93%E6%9B%B8-%E5%B9%B3%E7%94%B0%E8%B1%8A-ebook/dp/B08P2ST2DG/ref=sr_1_2?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&crid=2YLIYL7A4S8SB&keywords=%E7%A7%81%E3%81%AF%E3%81%A9%E3%81%AE%E3%82%88%E3%81%86%E3%81%AB%E3%81%97%E3%81%A6&qid=1704440282&sprefix=%E7%A7%81%E3%81%AF%E3%81%A9%E3%81%AE%E3%82%88%E3%81%86%E3%81%AB%E3%81%97%E3%81%A6%2Caps%2C161&sr=8-2][私はどのようにしてLinuxカーネルを学んだか]]
CLOSED: [2024-01-05 Fri 21:57]
:LOGBOOK:
CLOCK: [2024-01-05 Fri 21:26]--[2024-01-05 Fri 21:51] =>  0:25
CLOCK: [2024-01-05 Fri 19:18]--[2024-01-05 Fri 19:43] =>  0:25
CLOCK: [2024-01-05 Fri 17:04]--[2024-01-05 Fri 17:29] =>  0:25
CLOCK: [2024-01-05 Fri 16:38]--[2024-01-05 Fri 17:03] =>  0:25
:END:
Linuxカーネルの学び方についての本。

- 動かしながら読む
- マクロが多用されているので、あらかじめ展開して読む
- 図を書く
