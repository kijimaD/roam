:properties:
:ID: 20240513T142542
:end:
#+title:      KDOC 173: 『ガベージコレクションのアルゴリズムと実装』
#+date:       [2024-05-13 Mon 14:25]
#+filetags:   :draft:book:
#+identifier: 20240513T142542

#+caption: 最大値を求めるやつ。C-c C-cして出てくるS式を実行する
#+begin_src shell :results raw
  result=`ls | grep -oE 'kdoc-[0-9]+' | sed 's/kdoc-//' | sort -nr | head -n 1`
  succ=$((result + 1))

  echo $(cat <<EOF
  (save-excursion
    (while (re-search-backward "KDOC 173" nil t)
      (replace-match "KDOC $succ")))
  EOF
  )
#+end_src

#+RESULTS:
#+begin_src
(save-excursion (while (re-search-backward "KDOC 173" nil t) (replace-match "KDOC 173")))
#+end_src

# (denote-rename-file-using-front-matter (buffer-file-name) 0)
# (save-excursion (while (re-search-backward ":draft" nil t) (replace-match "")))
# (flush-lines "^\\#\s.+?")

# ====ポリシー。
# 1ファイル1アイデア。
# 1ファイルで内容を完結させる。
# 常にほかのエントリとリンクする。
# 自分の言葉を使う。
# 参考文献を残しておく。
# 文献メモの場合は、感想と混ぜないこと。1つのアイデアに反する
# ツェッテルカステンの議論に寄与するか
# 頭のなかやツェッテルカステンにある問いとどのようにかかわっているか
# エントリ間の接続を発見したら、接続エントリを追加する。カード間にあるリンクの関係を説明するカード。
# アイデアがまとまったらアウトラインエントリを作成する。リンクをまとめたエントリ。
# エントリを削除しない。古いカードのどこが悪いかを説明する新しいカードへのリンクを追加する。
# 恐れずにカードを追加する。無意味の可能性があっても追加しておくことが重要。

# ====永久保存メモのルール。
# 自分の言葉で書く。
# 後から読み返して理解できる。
# 他のメモと関連付ける。
# ひとつのメモにひとつのことだけを書く。
# メモの内容は1枚で完結させる。
# 論文の中に組み込み、公表できるレベルである。

# ====価値があるか。
# その情報がどういった文脈で使えるか。
# どの程度重要な情報か。
# そのページのどこが本当に必要な部分なのか。

* この文書のステータス
:LOGBOOK:
CLOCK: [2024-05-13 Mon 19:38]--[2024-05-13 Mon 20:03] =>  0:25
:END:
- 作成
  - [ ] <署名>
# (progn (kill-line -1) (insert (format "  - [X] %s 貴島" (format-time-string "%Y-%m-%d"))))
- レビュー
  - [ ] <署名>
# (progn (kill-line -1) (insert (format "  - [X] %s 貴島" (format-time-string "%Y-%m-%d"))))

# 関連をつけた。
# タイトルがフォーマット通りにつけられている。
# 内容をブラウザに表示して読んだ(作成とレビューのチェックは同時にしない)。
# 文脈なく読めるのを確認した。
# おばあちゃんに説明できる。
# いらない見出しを削除した。
# タグを適切にした。
# すべてのコメントを削除した。
* 概要
# 本文(タイトルをつける)。
* メモ
- GCを読むと、「言語処理系の理解が深まる」という副作用を得られる。言語処理系は数万行のコード群からなる巨大なプログラムだが、このように巨大なプログラムを読むときには明確な目標が1つなければ読み進めるのは難しい。穴を深く掘ろうとすれば自然とその穴の直径が広がっていくように、何か1点を深く理解していこうとすることが、全体を理解することにつながる、という(vi)
- GCにおけるオブジェクトの意味は、「アプリケーションによって利用されるデータのかたまり」、だという(p2)
- GCでは、ポインタが重要だという。オブジェクトが持つポインタをたどって別のオブジェクトを探すため。非ポインタに対して何もしない(p5)
- アロケーションとは、メモリ領域上にオブジェクトを配置すること。ミューテータは新たなオブジェクトが必要になった場合、オブジェクトとして必要なサイズをアロケータに要求する。アロケータはヒープ領域上の空き領域から要求を満たすものを探し、ミューテータに返す(p8)
- GCの世界におけるルートとは、オブジェクトのポインタをたどる際の起点となる場所、だという(p10)
- グローバル変数領域から直接、あるいは間接的に参照されているオブジェクトを、GCは生きていると考える、という(p11)
- GCにおいて、幅優先探索より深さ優先探索のほうがメモリ消費量を少なく抑えられる傾向があるので、マークフェーズで深さ優先探索がよく使われる(p214)

* 関連
# 関連するエントリ。なぜ関連させたか理由を書く。意味のあるつながりを意識的につくる。
# この事実は自分のこのアイデアとどう整合するか。
# この現象はあの理論でどう説明できるか。
# ふたつのアイデアは互いに矛盾するか、互いを補っているか。
# いま聞いた内容は以前に聞いたことがなかったか。
# メモ y についてメモ x はどういう意味か。
