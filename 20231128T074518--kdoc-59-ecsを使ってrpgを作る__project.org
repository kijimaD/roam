:properties:
:ID: 20231128T074518
:mtime:    20250921180744
:ctime:    20241028174234
:end:
#+title:      KDOC 59: ECSを使ってRPGを作る
#+date:       [2023-11-28 Tue 07:45]
#+filetags:   :project:
#+identifier: 20231128T074518

* この文書のステータス
:LOGBOOK:
CLOCK: [2024-11-16 Sat 09:22]--[2024-11-16 Sat 09:47] =>  0:25
:END:
- 作成
  - [X] 2024-11-10 貴島
- レビュー
  - [X] 2024-11-11 貴島

* WIP プロジェクトのステータス

プロジェクトは進行中である。

* 概要

[[id:dc45bd7d-b8c4-47ef-ae84-c548f81c50bb][Entity Component System]]を使って、サンプルゲームを作る。

#+caption: ゲーム
#+BEGIN_EXPORT html
<iframe width="560" height="315" src="https://kijimad.github.io/ruins/"></iframe>
#+END_EXPORT

↑実際のゲーム画面。ウィンドウにフォーカスして方向キーで操作できる。

- リポジトリ。[[https://github.com/kijimaD/ruins][kijimaD/ruins]]

#+caption: ノベルエンジンのサンプル
#+begin_export html
<iframe width="720" height="720" src="https://kijimad.github.io/nova/"></iframe>
#+end_export

↑実際のゲーム画面。クリックもしくはエンターでページ送り。

- リポジトリ。[[https://github.com/kijimaD/nova][kijimaD/nova]]

* 方針
まずストーリー抜きで、RPGとしてゲームが成立するようにする。

最低限の要素。

1. クリア画面
2. 階層移動
3. 敵とのエンカウント
4. バトル

* 素材
よさげな素材をリンクしておく。

- https://www.pixilart.com/art/mayon-sr21881399e91aws3
  - 火山の背景
* Tasks
** TODO メッセージページ表示を追加する
:LOGBOOK:
CLOCK: [2025-09-23 Tue 21:17]--[2025-09-23 Tue 21:42] =>  0:25
CLOCK: [2025-09-23 Tue 20:52]--[2025-09-23 Tue 21:17] =>  0:25
CLOCK: [2025-09-23 Tue 19:21]--[2025-09-23 Tue 19:46] =>  0:25
CLOCK: [2025-09-23 Tue 18:56]--[2025-09-23 Tue 19:21] =>  0:25
CLOCK: [2025-09-23 Tue 18:29]--[2025-09-23 Tue 18:54] =>  0:25
CLOCK: [2025-09-23 Tue 17:49]--[2025-09-23 Tue 18:14] =>  0:25
CLOCK: [2025-09-23 Tue 17:00]--[2025-09-23 Tue 17:25] =>  0:25
CLOCK: [2025-09-23 Tue 16:33]--[2025-09-23 Tue 16:58] =>  0:25
CLOCK: [2025-09-23 Tue 10:07]--[2025-09-23 Tue 10:32] =>  0:25
CLOCK: [2025-09-07 Sun 15:49]--[2025-09-07 Sun 16:14] =>  0:25
CLOCK: [2025-09-07 Sun 15:09]--[2025-09-07 Sun 15:34] =>  0:25
CLOCK: [2025-09-07 Sun 12:21]--[2025-09-07 Sun 12:46] =>  0:25
CLOCK: [2025-09-07 Sun 11:46]--[2025-09-07 Sun 12:12] =>  0:26
CLOCK: [2025-09-07 Sun 10:03]--[2025-09-07 Sun 10:28] =>  0:25
CLOCK: [2025-09-07 Sun 09:38]--[2025-09-07 Sun 10:03] =>  0:25
:END:

- ストーリーメッセージはスキップ可能なメッセージページに表示する(Elona風)
  - 専用ウィンドウにメッセージを表示する
  - 「閉じる」のアクションを表示する
  - 基本的に1ページだけ
  - 将来的に取る選択肢を選べるようにする

#+begin_src go
new := msgBuilder()
new.Message("この中から選べ。").Choice(a, b, c) # aに選択肢文字、適用結果、適用後のメッセージが入る
#+end_src

- typewriterは削除する
  - 無駄にややこしいし、ローグライクにそぐわない
  - 表示アニメーションはあってもいいが、主要機能のenter待ちはいらない
  - SafeSliceの文字列版は消す

** TODO effectsの立ち位置を明確にする
:LOGBOOK:
CLOCK: [2025-09-21 Sun 10:03]--[2025-09-21 Sun 10:28] =>  0:25
:END:

- 現状のattack activityでは直接ダメージ計算して、ログを出している
- いろいろな共通化など考えるとeffectを発行するべきにも思える
- イベントシステムとの使い分けはどうするか
** TODO 共通のエラーハンドリング方式を定める

- ゲームなのでpanicさせたくない。が、検知はしたい
- 終了させるのは微妙
- デバッグ情報を収集してファイル出力などさせるとよさそう
- テスト可能にするために、スライスで保持しておく。関数を実行したときだけ書き込む

** TODO コンテキスト移動する

同じ方向キーでも、コンテキストによってじっさいの実行イベントは変化する。こうすることで直感的に操作できる。

- *隣接タイルが空* → 移動
- *隣接タイルに敵* → 攻撃
- *隣接タイルにドア* → ドア開閉
- *隣接タイルが採掘可能* → 自動採掘
- *隣接タイルが水域* → 水泳開始

#+caption: CDDAの参考
#+begin_src C
bool avatar_action::move(avatar &you, map &m, const tripoint &d) {
    const tripoint dest_loc = you.pos() + d;

    // 1. プレイヤー状態確認
    if (you.has_effect(effect_stunned)) {
        // スタン状態での移動制限
        return false;
    }

    // 2. 敵・NPC検出
    creature_tracker &creatures = get_creature_tracker();
    if (Creature *critter = creatures.creature_at(dest_loc)) {
        // 攻撃処理
        you.melee_attack(*critter, true);
        return true;
    }

    // 3. 特殊地形処理
    if (m.has_flag(ter_furn_flag::TFLAG_MINEABLE, dest_loc)) {
        // 自動採掘処理
        return try_auto_mining(you, m, dest_loc);
    }

    // 4. ドア処理
    if (m.open_door(you, dest_loc, !m.is_outside(you.pos()))) {
        // ドア開閉処理
        return true;
    }

    // 5. 通常移動
    return g->walk_move(dest_loc);
}
#+end_src

** TODO セーブデータの互換性を考える

- 今の仕組みだと、値を変えたりしたときに既存セーブデータに反映されない
- セーブデータにバージョンを保存しておいて弾く、警告を出すだけでよいかも

** TODO 徘徊AIを強化する
:LOGBOOK:
CLOCK: [2025-08-12 Tue 20:51]--[2025-08-12 Tue 21:16] =>  0:25
CLOCK: [2025-08-12 Tue 20:14]--[2025-08-12 Tue 20:39] =>  0:25
CLOCK: [2025-08-12 Tue 18:44]--[2025-08-12 Tue 19:09] =>  0:25
:END:

- 追跡モード追加する
- デバッグ用にステート、索敵範囲、方向を表示する
- 徘徊モードの移動を自然にする
- 徘徊モードの向きが合ってない

** TODO 戦闘ステートをテスタブルにする
:LOGBOOK:
CLOCK: [2025-07-31 Thu 23:09]--[2025-07-31 Thu 23:34] =>  0:25
CLOCK: [2025-07-30 Wed 22:07]--[2025-07-30 Wed 22:32] =>  0:25
CLOCK: [2025-07-30 Wed 21:42]--[2025-07-30 Wed 22:07] =>  0:25
CLOCK: [2025-07-30 Wed 21:17]--[2025-07-30 Wed 21:42] =>  0:25
CLOCK: [2025-07-30 Wed 20:46]--[2025-07-30 Wed 21:11] =>  0:25
CLOCK: [2025-07-29 Tue 22:46]--[2025-07-29 Tue 23:11] =>  0:25
CLOCK: [2025-07-29 Tue 22:09]--[2025-07-29 Tue 22:34] =>  0:25
CLOCK: [2025-07-27 Sun 21:54]--[2025-07-27 Sun 22:19] =>  0:25
CLOCK: [2025-07-27 Sun 21:24]--[2025-07-27 Sun 21:49] =>  0:25
CLOCK: [2025-07-27 Sun 20:51]--[2025-07-27 Sun 21:16] =>  0:25
CLOCK: [2025-07-27 Sun 20:23]--[2025-07-27 Sun 20:48] =>  0:25
CLOCK: [2025-07-27 Sun 17:43]--[2025-07-27 Sun 18:08] =>  0:25
CLOCK: [2025-07-27 Sun 16:25]--[2025-07-27 Sun 16:50] =>  0:25
CLOCK: [2025-07-27 Sun 14:15]--[2025-07-27 Sun 14:40] =>  0:25
CLOCK: [2025-07-27 Sun 13:47]--[2025-07-27 Sun 14:12] =>  0:25
CLOCK: [2025-07-27 Sun 11:54]--[2025-07-27 Sun 12:19] =>  0:25
CLOCK: [2025-07-27 Sun 11:21]--[2025-07-27 Sun 11:46] =>  0:25
CLOCK: [2025-07-21 Mon 18:04]--[2025-07-21 Mon 18:29] =>  0:25
CLOCK: [2025-07-21 Mon 17:26]--[2025-07-21 Mon 17:51] =>  0:25
CLOCK: [2025-07-21 Mon 16:52]--[2025-07-21 Mon 17:17] =>  0:25
CLOCK: [2025-07-21 Mon 16:27]--[2025-07-21 Mon 16:52] =>  0:25
CLOCK: [2025-07-21 Mon 14:49]--[2025-07-21 Mon 15:14] =>  0:25
CLOCK: [2025-07-21 Mon 13:54]--[2025-07-21 Mon 14:19] =>  0:25
CLOCK: [2025-07-21 Mon 12:10]--[2025-07-21 Mon 12:35] =>  0:25
CLOCK: [2025-07-21 Mon 11:44]--[2025-07-21 Mon 12:09] =>  0:25
CLOCK: [2025-07-21 Mon 11:09]--[2025-07-21 Mon 11:34] =>  0:25
CLOCK: [2025-07-21 Mon 10:43]--[2025-07-21 Mon 11:08] =>  0:25
CLOCK: [2025-07-21 Mon 10:18]--[2025-07-21 Mon 10:43] =>  0:25
CLOCK: [2025-07-21 Mon 09:53]--[2025-07-21 Mon 10:18] =>  0:25
CLOCK: [2025-07-21 Mon 09:28]--[2025-07-21 Mon 09:53] =>  0:25
CLOCK: [2025-07-20 Sun 22:36]--[2025-07-20 Sun 23:01] =>  0:25
CLOCK: [2025-07-20 Sun 22:11]--[2025-07-20 Sun 22:36] =>  0:25
CLOCK: [2025-07-20 Sun 21:06]--[2025-07-20 Sun 21:31] =>  0:25
CLOCK: [2025-07-20 Sun 20:39]--[2025-07-20 Sun 21:04] =>  0:25
CLOCK: [2025-07-20 Sun 19:21]--[2025-07-20 Sun 19:46] =>  0:25
CLOCK: [2025-07-20 Sun 18:55]--[2025-07-20 Sun 19:20] =>  0:25
CLOCK: [2025-07-20 Sun 18:30]--[2025-07-20 Sun 18:55] =>  0:25
CLOCK: [2025-07-20 Sun 18:05]--[2025-07-20 Sun 18:30] =>  0:25
CLOCK: [2025-07-20 Sun 17:39]--[2025-07-20 Sun 18:04] =>  0:25
CLOCK: [2025-07-20 Sun 12:50]--[2025-07-20 Sun 13:15] =>  0:25
CLOCK: [2025-07-20 Sun 12:18]--[2025-07-20 Sun 12:43] =>  0:25
CLOCK: [2025-07-20 Sun 11:50]--[2025-07-20 Sun 12:15] =>  0:25
CLOCK: [2025-07-20 Sun 11:24]--[2025-07-20 Sun 11:49] =>  0:25
CLOCK: [2025-07-20 Sun 10:06]--[2025-07-20 Sun 10:31] =>  0:25
CLOCK: [2025-07-19 Sat 22:51]--[2025-07-19 Sat 23:16] =>  0:25
CLOCK: [2025-07-19 Sat 21:44]--[2025-07-19 Sat 22:09] =>  0:25
CLOCK: [2025-07-19 Sat 21:11]--[2025-07-19 Sat 21:36] =>  0:25
CLOCK: [2025-07-19 Sat 19:35]--[2025-07-19 Sat 20:00] =>  0:25
CLOCK: [2025-07-19 Sat 19:08]--[2025-07-19 Sat 19:33] =>  0:25
CLOCK: [2025-07-19 Sat 18:39]--[2025-07-19 Sat 19:04] =>  0:25
CLOCK: [2025-07-19 Sat 18:14]--[2025-07-19 Sat 18:39] =>  0:25
CLOCK: [2025-07-19 Sat 17:40]--[2025-07-19 Sat 18:05] =>  0:25
CLOCK: [2025-07-19 Sat 17:14]--[2025-07-19 Sat 17:39] =>  0:25
CLOCK: [2025-07-19 Sat 16:49]--[2025-07-19 Sat 17:14] =>  0:25
CLOCK: [2025-07-19 Sat 16:24]--[2025-07-19 Sat 16:49] =>  0:25
CLOCK: [2025-07-19 Sat 15:59]--[2025-07-19 Sat 16:24] =>  0:25
:END:

- テストカバー率が低い
- ステップが多く手動での検証が面倒である
- 複雑である

かなりの時間をかけているが、進んでない。うまく組み込めない。

** TODO 全体的にテストヘルパーは専用のファイルにまとめる

重複が多いように見える。わかりやすいようにまとめておく。

** TODO VRTを強化する
:LOGBOOK:
CLOCK: [2025-07-17 Thu 22:11]--[2025-07-17 Thu 22:36] =>  0:25
CLOCK: [2025-07-17 Thu 21:35]--[2025-07-17 Thu 22:00] =>  0:25
:END:

強化する。

** TODO アイテム等をソートする
:LOGBOOK:
CLOCK: [2025-08-27 Wed 19:18]--[2025-08-27 Wed 19:43] =>  0:25
CLOCK: [2025-08-27 Wed 23:09]--[2025-08-27 Wed 23:34] =>  0:25
CLOCK: [2025-08-27 Wed 21:32]--[2025-08-27 Wed 21:57] =>  0:25
CLOCK: [2025-08-27 Wed 21:06]--[2025-08-27 Wed 21:31] =>  0:25
CLOCK: [2025-08-27 Wed 20:33]--[2025-08-27 Wed 20:58] =>  0:25
:END:

まだアイテムは固定の並びになるが、レシピなど一括生成系はmapを経由するため生成順序がずれてVRTが失敗している。

** TODO フィールドにアイテムを生成する

- アイテムを生成する
- 拾える

** TODO Stackable Itemにする

Material componentのなかで数量を持っているが、仕様として読み取りにくいのと、ほかにもスタッキングしたいものはあるので別コンポーネントにする。

- 換金用アイテムなどはスタッキングできていい
- 装備など独自ステータスを持つものだけ、スタック不可にする
- フィールド上にある時点では1つのエンティティで、インベントリ追加したタイミングでそのエンティティは削除、すでにあるエンティティの個数に加算する

** TODO イベントのテーブルをどうするか考える

いくつかの入力によって、たとえばイベントの戦闘がどうなるかは異なる。あるいはアイテムの取得テーブル。

- 味方のレベル
- 階層

を参考にして、以下のような要素が変動する。

- 戦闘モンスター
  - レベル
  - 種別
  - パーティ構成
- 入手アイテム

モンスターを直接指定したい場合もあるだろう。
** TODO デバッグ設定を調整する
:LOGBOOK:
CLOCK: [2025-08-21 Thu 22:32]--[2025-08-21 Thu 22:57] =>  0:25
CLOCK: [2025-08-21 Thu 21:47]--[2025-08-21 Thu 22:12] =>  0:25
:END:

- 戦闘時のHP表示
- フィールド上でのエンカウント無視

** TODO 死亡を状態化する
:LOGBOOK:
CLOCK: [2025-08-31 Sun 17:22]--[2025-08-31 Sun 17:47] =>  0:25
CLOCK: [2025-08-31 Sun 15:55]--[2025-08-31 Sun 16:20] =>  0:25
CLOCK: [2025-08-21 Thu 21:16]--[2025-08-21 Thu 21:41] =>  0:25
:END:
今はHP0で判定している。しかし、死亡状態は特殊で、回復薬で回復させられなかったり、行動できるかのフラグとして使ったりする。なので、コンポーネント化したほうがよい。
** TODO 合成のレアリティスコア
性能にスコアをつけ、結果的に出来上がったものに対してレアリティランクをつけるとよさそう。
** TODO 生成をランダム化する
ある程度ランダム化したい。プレイヤー、モンスター、ワープゲートの出る位置をバラけさせる。

** TODO 光源を追加する
光源がある部分は色が変わる。

タイルごとに色のフィルタを設定できればよいのだろうな。

** TODO タイルの種類を増やす
:LOGBOOK:
CLOCK: [2023-12-03 Sun 18:19]--[2023-12-03 Sun 18:44] =>  0:25
:END:
見た目がよくないので、2種類の通常フロアを用意する。

ステージ作成が少し面倒になるか。2種類のタイルの違いをファイルに書き出したくないな。勝手に判断して入れてくれるのが一番良い。壁が隣接してたら〜とか。

** TODO ゲームループカウントをグローバル化する
カウントしてメッセージをアニメーションさせる用。汎用的なのでグローバルでやってよさそう。アニメーションのためのもっとよい方法がある可能性はある。ちゃんと調べないとな…。

** TODO アニメーションのやり方を考える
どうやっているのだろう。

- 最後にアニメーションした時刻を取っておいて、それから経過した時間で決定すればよい
- しかし、アニメーションのたびにそれをあちこちに保存しておきたくない感じはする
** TODO 本を読めるようにする

ランダムに拾えるアイテムによって世界観を知っていく。アイテムコレクション要素。

* 考察
- 作った
- しかし、発表に値するような事柄はない
- 技術的な挑戦的な部分は一切ない。新しいことをやっているわけでもない
- 参考にして面白かったことはある
  - ECS - コンポーネントで考える
  - ゲームにはさまざなデータがあるが、確実にファイル化する。ソースコードに入れない
- ひとつある
- 個人のゲーム開発の99%は途中で挫折する(自分比)
- 工夫
  - 意図的にやらないことを選択した
  - グラフィック、アニメーション、音楽は捨てた
  - 常にプレイできる状態を保った
  - とりあえずクリアできるようにして、人に見せた

工夫。

- データを別にしている。ファイルからパラメータを調整できる
- ECS(Entity Component System)

* Archives
** DONE メッセージ表示できるようにする
CLOSED: [2023-11-28 Tue 07:55]
:PROPERTIES:
:Effort:   20:00
:END:
:LOGBOOK:
CLOCK: [2023-11-28 Tue 07:29]--[2023-11-28 Tue 07:54] =>  0:25
CLOCK: [2023-11-28 Tue 00:12]--[2023-11-28 Tue 00:37] =>  0:25
CLOCK: [2023-11-27 Mon 23:17]--[2023-11-27 Mon 23:42] =>  0:25
CLOCK: [2023-11-27 Mon 22:52]--[2023-11-27 Mon 23:17] =>  0:25
CLOCK: [2023-11-27 Mon 22:27]--[2023-11-27 Mon 22:52] =>  0:25
CLOCK: [2023-11-27 Mon 21:47]--[2023-11-27 Mon 22:12] =>  0:25
CLOCK: [2023-11-27 Mon 21:15]--[2023-11-27 Mon 21:40] =>  0:25
CLOCK: [2023-11-27 Mon 20:41]--[2023-11-27 Mon 21:06] =>  0:25
CLOCK: [2023-11-27 Mon 20:16]--[2023-11-27 Mon 20:41] =>  0:25
CLOCK: [2023-11-27 Mon 19:51]--[2023-11-27 Mon 20:16] =>  0:25
CLOCK: [2023-11-27 Mon 00:18]--[2023-11-27 Mon 00:43] =>  0:25
CLOCK: [2023-11-26 Sun 23:15]--[2023-11-26 Sun 23:40] =>  0:25
CLOCK: [2023-11-26 Sun 21:57]--[2023-11-26 Sun 22:22] =>  0:25
CLOCK: [2023-11-26 Sun 21:32]--[2023-11-26 Sun 21:57] =>  0:25
CLOCK: [2023-11-26 Sun 21:02]--[2023-11-26 Sun 21:27] =>  0:25
CLOCK: [2023-11-26 Sun 20:37]--[2023-11-26 Sun 21:02] =>  0:25
CLOCK: [2023-11-26 Sun 20:01]--[2023-11-26 Sun 20:26] =>  0:25
CLOCK: [2023-11-26 Sun 19:36]--[2023-11-26 Sun 20:01] =>  0:25
CLOCK: [2023-11-26 Sun 18:27]--[2023-11-26 Sun 18:52] =>  0:25
CLOCK: [2023-11-26 Sun 17:08]--[2023-11-26 Sun 17:33] =>  0:25
CLOCK: [2023-11-26 Sun 16:33]--[2023-11-26 Sun 16:58] =>  0:25
CLOCK: [2023-11-26 Sun 15:05]--[2023-11-26 Sun 15:30] =>  0:25
CLOCK: [2023-11-26 Sun 14:40]--[2023-11-26 Sun 15:05] =>  0:25
CLOCK: [2023-11-26 Sun 14:14]--[2023-11-26 Sun 14:39] =>  0:25
CLOCK: [2023-11-26 Sun 13:46]--[2023-11-26 Sun 14:11] =>  0:25
CLOCK: [2023-11-26 Sun 13:19]--[2023-11-26 Sun 13:44] =>  0:25
CLOCK: [2023-11-26 Sun 12:54]--[2023-11-26 Sun 13:19] =>  0:25
CLOCK: [2023-11-26 Sun 12:28]--[2023-11-26 Sun 12:53] =>  0:25
CLOCK: [2023-11-26 Sun 11:53]--[2023-11-26 Sun 12:18] =>  0:25
CLOCK: [2023-11-26 Sun 11:27]--[2023-11-26 Sun 11:52] =>  0:25
CLOCK: [2023-11-26 Sun 10:57]--[2023-11-26 Sun 11:22] =>  0:25
CLOCK: [2023-11-26 Sun 10:32]--[2023-11-26 Sun 10:57] =>  0:25
CLOCK: [2023-11-26 Sun 01:00]--[2023-11-26 Sun 01:25] =>  0:25
CLOCK: [2023-11-26 Sun 00:24]--[2023-11-26 Sun 00:49] =>  0:25
CLOCK: [2023-11-25 Sat 23:04]--[2023-11-25 Sat 23:29] =>  0:25
CLOCK: [2023-11-25 Sat 22:39]--[2023-11-25 Sat 23:04] =>  0:25
CLOCK: [2023-11-25 Sat 22:03]--[2023-11-25 Sat 22:28] =>  0:25
CLOCK: [2023-11-25 Sat 21:38]--[2023-11-25 Sat 22:03] =>  0:25
CLOCK: [2023-11-25 Sat 21:13]--[2023-11-25 Sat 21:38] =>  0:25
CLOCK: [2023-11-25 Sat 20:48]--[2023-11-25 Sat 21:13] =>  0:25
CLOCK: [2023-11-25 Sat 20:22]--[2023-11-25 Sat 20:47] =>  0:25
CLOCK: [2023-11-25 Sat 19:57]--[2023-11-25 Sat 20:22] =>  0:25
CLOCK: [2023-11-25 Sat 18:38]--[2023-11-25 Sat 19:03] =>  0:25
CLOCK: [2023-11-25 Sat 17:48]--[2023-11-25 Sat 18:13] =>  0:25
CLOCK: [2023-11-25 Sat 17:13]--[2023-11-25 Sat 17:38] =>  0:25
CLOCK: [2023-11-25 Sat 16:47]--[2023-11-25 Sat 17:12] =>  0:25
CLOCK: [2023-11-25 Sat 16:22]--[2023-11-25 Sat 16:47] =>  0:25
CLOCK: [2023-11-25 Sat 15:56]--[2023-11-25 Sat 16:21] =>  0:25
CLOCK: [2023-11-25 Sat 15:31]--[2023-11-25 Sat 15:56] =>  0:25
CLOCK: [2023-11-25 Sat 14:54]--[2023-11-25 Sat 15:19] =>  0:25
CLOCK: [2023-11-25 Sat 14:29]--[2023-11-25 Sat 14:54] =>  0:25
CLOCK: [2023-11-25 Sat 13:58]--[2023-11-25 Sat 14:23] =>  0:25
CLOCK: [2023-11-25 Sat 13:32]--[2023-11-25 Sat 13:57] =>  0:25
CLOCK: [2023-11-25 Sat 13:07]--[2023-11-25 Sat 13:32] =>  0:25
CLOCK: [2023-11-25 Sat 12:42]--[2023-11-25 Sat 13:07] =>  0:25
CLOCK: [2023-11-25 Sat 12:17]--[2023-11-25 Sat 12:42] =>  0:25
CLOCK: [2023-11-21 Tue 00:20]--[2023-11-21 Tue 00:45] =>  0:25
CLOCK: [2023-11-20 Mon 23:45]--[2023-11-21 Tue 00:10] =>  0:25
CLOCK: [2023-11-20 Mon 23:11]--[2023-11-20 Mon 23:36] =>  0:25
:END:
[[https://github.com/x-hgg-x/sokoban-go][x-hgg-x/sokoban-go]]を使って小さいサンプルを作る。
** DONE メッセージシステムのリファクタ
CLOSED: [2023-11-28 Tue 08:50]
:LOGBOOK:
CLOCK: [2023-11-28 Tue 08:21]--[2023-11-28 Tue 08:46] =>  0:25
CLOCK: [2023-11-28 Tue 07:56]--[2023-11-28 Tue 08:21] =>  0:25
:END:
使いにくいので直す。
** DONE メッセージシステムに自動改行を入れる
CLOSED: [2023-11-28 Tue 08:50]
飛び出すのを防ぐ。
** DONE ファイルを埋め込む
CLOSED: [2023-11-29 Wed 21:48]
:PROPERTIES:
:Effort:   3:00
:END:
:LOGBOOK:
CLOCK: [2023-11-29 Wed 21:14]--[2023-11-29 Wed 21:39] =>  0:25
CLOCK: [2023-11-29 Wed 20:46]--[2023-11-29 Wed 21:11] =>  0:25
CLOCK: [2023-11-29 Wed 20:21]--[2023-11-29 Wed 20:46] =>  0:25
CLOCK: [2023-11-29 Wed 19:46]--[2023-11-29 Wed 20:11] =>  0:25
:END:
デプロイで扱いやすいように。

** DONE CI設定
CLOSED: [2023-11-29 Wed 21:48]
:LOGBOOK:
CLOCK: [2023-11-29 Wed 00:19]--[2023-11-29 Wed 00:44] =>  0:25
CLOCK: [2023-11-28 Tue 23:44]--[2023-11-29 Wed 00:09] =>  0:25
CLOCK: [2023-11-28 Tue 23:19]--[2023-11-28 Tue 23:44] =>  0:25
CLOCK: [2023-11-28 Tue 08:50]--[2023-11-28 Tue 08:52] =>  0:02
:END:
テストとビルドとデプロイする。

デプロイしたけど、ブラウザで表示できてないな。
** DONE フィールドで動けるようにする
CLOSED: [2023-12-03 Sun 10:40]
:PROPERTIES:
:Effort:   30:00
:END:
:LOGBOOK:
CLOCK: [2023-12-02 Sat 19:45]--[2023-12-02 Sat 20:10] =>  0:25
CLOCK: [2023-12-02 Sat 18:55]--[2023-12-02 Sat 19:20] =>  0:25
CLOCK: [2023-12-02 Sat 16:08]--[2023-12-02 Sat 16:33] =>  0:25
CLOCK: [2023-12-02 Sat 15:42]--[2023-12-02 Sat 16:07] =>  0:25
CLOCK: [2023-12-02 Sat 15:17]--[2023-12-02 Sat 15:42] =>  0:25
CLOCK: [2023-12-02 Sat 14:49]--[2023-12-02 Sat 15:14] =>  0:25
CLOCK: [2023-12-02 Sat 14:24]--[2023-12-02 Sat 14:49] =>  0:25
CLOCK: [2023-12-02 Sat 13:45]--[2023-12-02 Sat 14:11] =>  0:26
CLOCK: [2023-12-02 Sat 13:20]--[2023-12-02 Sat 13:45] =>  0:25
CLOCK: [2023-12-02 Sat 12:55]--[2023-12-02 Sat 13:20] =>  0:25
CLOCK: [2023-12-02 Sat 12:30]--[2023-12-02 Sat 12:55] =>  0:25
CLOCK: [2023-12-01 Fri 08:56]--[2023-12-01 Fri 09:21] =>  0:25
CLOCK: [2023-12-01 Fri 00:42]--[2023-12-01 Fri 01:07] =>  0:25
CLOCK: [2023-12-01 Fri 00:15]--[2023-12-01 Fri 00:40] =>  0:25
CLOCK: [2023-11-30 Thu 23:50]--[2023-12-01 Fri 00:15] =>  0:25
CLOCK: [2023-11-30 Thu 23:14]--[2023-11-30 Thu 23:39] =>  0:25
CLOCK: [2023-11-30 Thu 22:48]--[2023-11-30 Thu 23:13] =>  0:25
CLOCK: [2023-11-30 Thu 00:35]--[2023-11-30 Thu 01:00] =>  0:25
CLOCK: [2023-11-30 Thu 00:06]--[2023-11-30 Thu 00:32] =>  0:26
CLOCK: [2023-11-29 Wed 23:41]--[2023-11-30 Thu 00:06] =>  0:25
CLOCK: [2023-11-29 Wed 22:10]--[2023-11-29 Wed 22:35] =>  0:25
CLOCK: [2023-11-29 Wed 21:44]--[2023-11-29 Wed 22:09] =>  0:25
CLOCK: [2023-11-28 Tue 08:52]--[2023-11-28 Tue 09:17] =>  0:25
:END:

- テキストで地図を読み込む
- コンポーネントを作る
- 地図を表示する
- 移動できるようにする

実行時エラーになる。表示できない。インターフェースが取り出せないよう。

- コンポーネントの初期化を忘れていた
- LoadLevel()によって読み込んだComponentListをAddEntities()->AddEntityComponent()に渡す。が、AddEntitiesで失敗する。テキストで読み込んだ内容をreflectでオブジェクト化するときに、新しく作成したコンポーネントを初期化するのに失敗している
- ecsComponentListを調べてみよう
  - ecvでGameが入ってない
  - world.Components.Game
- sokoban-go では main.goのw.InitWorld(&gc.Components{})の時点でworld.Components.Gameがセットされている
** DONE マップを表示できるようにする
CLOSED: [2023-12-03 Sun 10:41]
表示する。
** DONE 階数を移動できるようにする
CLOSED: [2023-12-03 Sun 14:41]
:LOGBOOK:
CLOCK: [2023-12-03 Sun 14:13]--[2023-12-03 Sun 14:38] =>  0:25
CLOCK: [2023-12-03 Sun 13:35]--[2023-12-03 Sun 14:00] =>  0:25
CLOCK: [2023-12-03 Sun 12:19]--[2023-12-03 Sun 12:44] =>  0:25
CLOCK: [2023-12-03 Sun 11:33]--[2023-12-03 Sun 11:58] =>  0:25
CLOCK: [2023-12-03 Sun 11:08]--[2023-12-03 Sun 11:33] =>  0:25
CLOCK: [2023-12-03 Sun 10:43]--[2023-12-03 Sun 11:08] =>  0:25
:END:
1階からはじまって、次の階層に移動する。

ワープホール。
** DONE クロスコンパイルする
CLOSED: [2023-12-03 Sun 15:45]
:LOGBOOK:
CLOCK: [2023-12-03 Sun 15:19]--[2023-12-03 Sun 15:44] =>  0:25
:END:
一応CIに設定して保証しておく。
** DONE メッセージが飛び出すのを直す
CLOSED: [2023-12-03 Sun 17:50]
ステート遷移イベントを作る。
** DONE 次の階をランダムに選択する
CLOSED: [2023-12-03 Sun 18:14]
:LOGBOOK:
CLOCK: [2023-12-03 Sun 16:57]--[2023-12-03 Sun 17:22] =>  0:25
CLOCK: [2023-12-03 Sun 16:26]--[2023-12-03 Sun 16:51] =>  0:25
CLOCK: [2023-12-03 Sun 15:51]--[2023-12-03 Sun 16:16] =>  0:25
CLOCK: [2023-12-03 Sun 14:41]--[2023-12-03 Sun 15:06] =>  0:25
:END:
一覧からランダムに選択する。
** DONE HomeStateを作成する
CLOSED: [2023-12-04 Mon 20:44]
:LOGBOOK:
CLOCK: [2023-12-04 Mon 08:48]--[2023-12-04 Mon 09:13] =>  0:25
CLOCK: [2023-12-04 Mon 00:44]--[2023-12-04 Mon 01:09] =>  0:25
CLOCK: [2023-12-03 Sun 19:51]--[2023-12-03 Sun 20:16] =>  0:25
:END:
ゲームプレイの基軸になるメニュー。
** DONE 脱出できるようにする
CLOSED: [2023-12-04 Mon 20:45]
:LOGBOOK:
CLOCK: [2023-12-03 Sun 17:51]--[2023-12-03 Sun 18:16] =>  0:25
:END:
脱出階層で脱出できるようにする。
** DONE 背景を設定する
CLOSED: [2023-12-05 Tue 00:46]
:LOGBOOK:
CLOCK: [2023-12-04 Mon 22:24]--[2023-12-04 Mon 22:49] =>  0:25
CLOCK: [2023-12-04 Mon 21:59]--[2023-12-04 Mon 22:24] =>  0:25
CLOCK: [2023-12-04 Mon 21:34]--[2023-12-04 Mon 21:59] =>  0:25
:END:
背景を追加する。スプライトはあるけど、同じでいいのか。いや、スプライトは1枚の画像を分割するものだから、同じ感じでは扱えないな。変えるとsystemも変えないといけない。面倒なのでとりあえずいいか。
** DONE サブメニュー追加
CLOSED: [2023-12-07 Thu 00:31]
:LOGBOOK:
CLOCK: [2023-12-07 Thu 00:05]--[2023-12-07 Thu 00:30] =>  0:25
CLOCK: [2023-12-06 Wed 23:25]--[2023-12-06 Wed 23:50] =>  0:25
CLOCK: [2023-12-06 Wed 22:32]--[2023-12-06 Wed 22:57] =>  0:25
CLOCK: [2023-12-06 Wed 22:07]--[2023-12-06 Wed 22:32] =>  0:25
CLOCK: [2023-12-06 Wed 00:38]--[2023-12-06 Wed 01:03] =>  0:25
CLOCK: [2023-12-05 Tue 00:47]--[2023-12-05 Tue 01:12] =>  0:25
CLOCK: [2023-12-04 Mon 20:46]--[2023-12-04 Mon 21:11] =>  0:25
:END:
拠点メニューにはサブメニューがある。どうやるか考える。

- 別stateでやる
  - 大量にstateができるのどうなのという感じ。背景コンポーネントとかも同じ感じで準備しないといけない
- リファレンスではどうやっているのだろう。ポーズでは、後ろを透明に表示しつつ、メニューを表示している。あれと同じようなことができないか
  - ポーズメニューでは、OnStopでポーズメニューのエンティティのみを削除しているようだ。ほかのstateでは、すべてのエンティティを削除することが異なる
** DONE pauseステート作成
CLOSED: [2023-12-07 Thu 08:30]
:LOGBOOK:
CLOCK: [2023-12-07 Thu 08:05]--[2023-12-07 Thu 08:30] =>  0:25
CLOCK: [2023-12-07 Thu 00:31]--[2023-12-07 Thu 00:56] =>  0:25
:END:

デバッグで便利なので。
** DONE アイテムを生成する
CLOSED: [2023-12-10 Sun 11:16]
:LOGBOOK:
CLOCK: [2023-12-10 Sun 00:44]--[2023-12-10 Sun 01:09] =>  0:25
CLOCK: [2023-12-10 Sun 00:11]--[2023-12-10 Sun 00:36] =>  0:25
CLOCK: [2023-12-09 Sat 23:40]--[2023-12-10 Sun 00:05] =>  0:25
CLOCK: [2023-12-09 Sat 22:34]--[2023-12-09 Sat 22:59] =>  0:25
CLOCK: [2023-12-09 Sat 22:08]--[2023-12-09 Sat 22:33] =>  0:25
CLOCK: [2023-12-09 Sat 21:20]--[2023-12-09 Sat 21:45] =>  0:25
CLOCK: [2023-12-09 Sat 20:54]--[2023-12-09 Sat 21:19] =>  0:25
CLOCK: [2023-12-09 Sat 17:34]--[2023-12-09 Sat 17:59] =>  0:25
CLOCK: [2023-12-09 Sat 17:09]--[2023-12-09 Sat 17:34] =>  0:25
CLOCK: [2023-12-09 Sat 16:44]--[2023-12-09 Sat 17:09] =>  0:25
CLOCK: [2023-12-09 Sat 12:08]--[2023-12-09 Sat 12:33] =>  0:25
CLOCK: [2023-12-09 Sat 11:39]--[2023-12-09 Sat 12:04] =>  0:25
CLOCK: [2023-12-09 Sat 10:56]--[2023-12-09 Sat 11:21] =>  0:25
CLOCK: [2023-12-09 Sat 10:28]--[2023-12-09 Sat 10:53] =>  0:25
CLOCK: [2023-12-09 Sat 09:58]--[2023-12-09 Sat 10:23] =>  0:25
CLOCK: [2023-12-08 Fri 00:54]--[2023-12-08 Fri 01:19] =>  0:25
CLOCK: [2023-12-08 Fri 00:09]--[2023-12-08 Fri 00:34] =>  0:25
CLOCK: [2023-12-07 Thu 23:16]--[2023-12-07 Thu 23:41] =>  0:25
CLOCK: [2023-12-07 Thu 22:44]--[2023-12-07 Thu 23:09] =>  0:25
CLOCK: [2023-12-07 Thu 22:13]--[2023-12-07 Thu 22:38] =>  0:25
CLOCK: [2023-12-07 Thu 21:37]--[2023-12-07 Thu 22:02] =>  0:25
CLOCK: [2023-12-07 Thu 21:09]--[2023-12-07 Thu 21:34] =>  0:25
CLOCK: [2023-12-07 Thu 20:44]--[2023-12-07 Thu 21:09] =>  0:25
CLOCK: [2023-12-07 Thu 20:16]--[2023-12-07 Thu 20:41] =>  0:25
CLOCK: [2023-12-07 Thu 19:51]--[2023-12-07 Thu 20:16] =>  0:25
CLOCK: [2023-12-07 Thu 08:31]--[2023-12-07 Thu 08:56] =>  0:25
:END:
アイテムを追加する。

- item
  - consumable
  - name
  - description

まずそれぞれのコンポーネントの雛形をファイルで作成する。

- items
  - entityA
    - componentA(consumable)
    - componentB(weight)
  - entityB
    - componentA(consumable)
    - componentB(weight)

で、そのデータを読み込んでエンティティとコンポーネントを生成する関数を作る。

#+caption: engineも作らないといけない
#+begin_src go
	componentList := loader.EntityComponentList{}
	// engineとgameは同数でなければならない。分割されているのが面倒だな…
	componentList.Engine = append(componentList.Engine, loader.EngineComponentList{})
	componentList.Game = append(componentList.Game, gloader.GameComponentList{
		Item: &gc.Item{},
	})
	loader.AddEntities(world, componentList)
#+end_src

#+caption: 元ネタ
#+begin_src rust
pub fn spawn_named_item(
#+end_src
** DONE UI設計
CLOSED: [2023-12-10 Sun 12:55]
:LOGBOOK:
CLOCK: [2023-12-10 Sun 01:09]--[2023-12-10 Sun 01:34] =>  0:25
:END:
いちいちゲーム画面見るのもアレなので、書いておく。
** DONE UIエンティティだけを消す
CLOSED: [2023-12-10 Sun 12:55]
:LOGBOOK:
CLOCK: [2023-12-10 Sun 12:30]--[2023-12-10 Sun 12:55] =>  0:25
CLOCK: [2023-12-10 Sun 11:54]--[2023-12-10 Sun 12:19] =>  0:25
CLOCK: [2023-12-10 Sun 11:17]--[2023-12-10 Sun 11:42] =>  0:25
:END:
DeleteAllEntitiesでステート切り替え時のUIリセットをしている。entitiesが全部消えるので、困る。ほとんどの場合、UIだけをリセットすればよさそう。

UIコンポーネントと、UIコンポーネントを消す関数を作ればよさそう。
** DONE 各メニューを作成する
CLOSED: [2023-12-10 Sun 14:52]
:LOGBOOK:
CLOCK: [2023-12-10 Sun 14:22]--[2023-12-10 Sun 14:47] =>  0:25
CLOCK: [2023-12-10 Sun 13:53]--[2023-12-10 Sun 14:18] =>  0:25
CLOCK: [2023-12-10 Sun 13:12]--[2023-12-10 Sun 13:37] =>  0:25
:END:
仮の内容で全部作る。
** DONE アイテムを使う
CLOSED: [2023-12-24 Sun 08:38]
:PROPERTIES:
:Effort:   10:00
:END:
:LOGBOOK:
CLOCK: [2023-12-23 Sat 23:49]--[2023-12-24 Sun 00:14] =>  0:25
CLOCK: [2023-12-23 Sat 23:22]--[2023-12-23 Sat 23:47] =>  0:25
CLOCK: [2023-12-23 Sat 22:45]--[2023-12-23 Sat 23:10] =>  0:25
CLOCK: [2023-12-23 Sat 17:41]--[2023-12-23 Sat 18:06] =>  0:25
CLOCK: [2023-12-23 Sat 17:13]--[2023-12-23 Sat 17:38] =>  0:25
CLOCK: [2023-12-23 Sat 15:52]--[2023-12-23 Sat 16:17] =>  0:25
CLOCK: [2023-12-23 Sat 15:11]--[2023-12-23 Sat 15:36] =>  0:25
CLOCK: [2023-12-23 Sat 14:09]--[2023-12-23 Sat 14:34] =>  0:25
CLOCK: [2023-12-23 Sat 12:53]--[2023-12-23 Sat 13:18] =>  0:25
CLOCK: [2023-12-23 Sat 12:16]--[2023-12-23 Sat 12:41] =>  0:25
CLOCK: [2023-12-23 Sat 11:51]--[2023-12-23 Sat 12:16] =>  0:25
CLOCK: [2023-12-23 Sat 11:25]--[2023-12-23 Sat 11:50] =>  0:25
CLOCK: [2023-12-23 Sat 10:56]--[2023-12-23 Sat 11:21] =>  0:25
CLOCK: [2023-12-23 Sat 02:07]--[2023-12-23 Sat 02:32] =>  0:25
CLOCK: [2023-12-23 Sat 01:27]--[2023-12-23 Sat 01:52] =>  0:25
CLOCK: [2023-12-23 Sat 00:53]--[2023-12-23 Sat 01:18] =>  0:25
CLOCK: [2023-12-23 Sat 00:22]--[2023-12-23 Sat 00:47] =>  0:25
CLOCK: [2023-12-22 Fri 00:49]--[2023-12-22 Fri 01:14] =>  0:25
CLOCK: [2023-12-22 Fri 00:08]--[2023-12-22 Fri 00:33] =>  0:25
CLOCK: [2023-12-21 Thu 23:27]--[2023-12-21 Thu 23:52] =>  0:25
CLOCK: [2023-12-21 Thu 22:25]--[2023-12-21 Thu 22:50] =>  0:25
CLOCK: [2023-12-21 Thu 22:00]--[2023-12-21 Thu 22:25] =>  0:25
CLOCK: [2023-12-21 Thu 09:01]--[2023-12-21 Thu 09:26] =>  0:25
CLOCK: [2023-12-21 Thu 08:36]--[2023-12-21 Thu 09:01] =>  0:25
CLOCK: [2023-12-21 Thu 00:53]--[2023-12-21 Thu 01:18] =>  0:25
CLOCK: [2023-12-21 Thu 00:25]--[2023-12-21 Thu 00:50] =>  0:25
CLOCK: [2023-12-21 Thu 00:00]--[2023-12-21 Thu 00:25] =>  0:25
CLOCK: [2023-12-20 Wed 23:27]--[2023-12-20 Wed 23:52] =>  0:25
CLOCK: [2023-12-20 Wed 23:02]--[2023-12-20 Wed 23:27] =>  0:25
:END:

- キャラクタを作る
- ステータスを作る
- 影響を与えられるようにする
- memo
  - 可変のアイテムリストについて、選択中の印をつける必要がある
  - 選択中の座標をとってきて、選択印の位置を変化させればいいのかな

- ゲーム
  - 戦車にしたいけど、戦闘システムがややこしくなる
  - 合成とかで各自の装備メインにしたいんだよな
** DONE アイテムを選択して使えるようにする
CLOSED: [2023-12-24 Sun 10:19]
:PROPERTIES:
:Effort:   3:00
:END:
:LOGBOOK:
CLOCK: [2023-12-24 Sun 09:35]--[2023-12-24 Sun 10:00] =>  0:25
CLOCK: [2023-12-24 Sun 09:10]--[2023-12-24 Sun 09:35] =>  0:25
CLOCK: [2023-12-24 Sun 08:40]--[2023-12-24 Sun 09:05] =>  0:25
:END:
今は固定にしている。
** DONE アイテムリストをebitenUIで作る
CLOSED: [2023-12-30 Sat 17:04]
:LOGBOOK:
CLOCK: [2023-12-30 Sat 16:21]--[2023-12-30 Sat 16:46] =>  0:25
CLOCK: [2023-12-30 Sat 15:50]--[2023-12-30 Sat 16:15] =>  0:25
CLOCK: [2023-12-30 Sat 15:10]--[2023-12-30 Sat 15:35] =>  0:25
:END:
いい感じに、スクロールできるようにする。
** DONE サイドメニューを表示する
CLOSED: [2023-12-30 Sat 22:17]
:LOGBOOK:
CLOCK: [2023-12-30 Sat 18:21]--[2023-12-30 Sat 19:08] =>  0:47
:END:

性能を表示するサイドパネル。

- [X] メニューバーが太いのを直す
** DONE UIをリロードせずに反映できるようにする
CLOSED: [2024-01-03 Wed 17:33]
アイテムを使用したときにUIをリロードしているが、スクロール位置が元へ戻ってしまうのでリロードしないようにする。

また、表示ジャンルの切替もあるので、リロードすると保持しなくて困る。
** DONE ebitenUIを使う
CLOSED: [2024-01-03 Wed 17:54]
:PROPERTIES:
:Effort:   5:00
:END:
:LOGBOOK:
CLOCK: [2023-12-30 Sat 16:46]--[2023-12-30 Sat 17:11] =>  0:25
CLOCK: [2023-12-30 Sat 10:57]--[2023-12-30 Sat 10:58] =>  0:01
CLOCK: [2023-12-29 Fri 22:25]--[2023-12-29 Fri 22:50] =>  0:25
CLOCK: [2023-12-29 Fri 21:59]--[2023-12-29 Fri 22:24] =>  0:25
CLOCK: [2023-12-27 Wed 17:57]--[2023-12-27 Wed 18:10] =>  0:13
CLOCK: [2023-12-27 Wed 15:31]--[2023-12-27 Wed 16:12] =>  0:41
CLOCK: [2023-12-27 Wed 00:52]--[2023-12-27 Wed 01:17] =>  0:25
CLOCK: [2023-12-27 Wed 00:27]--[2023-12-27 Wed 00:52] =>  0:25
CLOCK: [2023-12-25 Mon 23:46]--[2023-12-26 Tue 00:11] =>  0:25
CLOCK: [2023-12-25 Mon 23:11]--[2023-12-25 Mon 23:36] =>  0:25
CLOCK: [2023-12-25 Mon 22:46]--[2023-12-25 Mon 23:11] =>  0:25
CLOCK: [2023-12-25 Mon 22:02]--[2023-12-25 Mon 22:27] =>  0:25
CLOCK: [2023-12-25 Mon 21:36]--[2023-12-25 Mon 22:01] =>  0:25
CLOCK: [2023-12-24 Sun 23:19]--[2023-12-24 Sun 23:44] =>  0:25
CLOCK: [2023-12-24 Sun 22:52]--[2023-12-24 Sun 23:17] =>  0:25
CLOCK: [2023-12-24 Sun 22:27]--[2023-12-24 Sun 22:52] =>  0:25
CLOCK: [2023-12-24 Sun 20:37]--[2023-12-24 Sun 21:02] =>  0:25
CLOCK: [2023-12-24 Sun 19:26]--[2023-12-24 Sun 19:51] =>  0:25
CLOCK: [2023-12-24 Sun 18:57]--[2023-12-24 Sun 19:22] =>  0:25
CLOCK: [2023-12-24 Sun 18:28]--[2023-12-24 Sun 18:53] =>  0:25
CLOCK: [2023-12-24 Sun 18:02]--[2023-12-24 Sun 18:27] =>  0:25
CLOCK: [2023-12-24 Sun 17:25]--[2023-12-24 Sun 17:50] =>  0:25
CLOCK: [2023-12-24 Sun 15:58]--[2023-12-24 Sun 16:23] =>  0:25
CLOCK: [2023-12-24 Sun 15:32]--[2023-12-24 Sun 15:57] =>  0:25
CLOCK: [2023-12-24 Sun 15:07]--[2023-12-24 Sun 15:32] =>  0:25
:END:
使う。
** DONE アイテムに対するアクションを選べるようにする
CLOSED: [2024-01-03 Wed 18:19]
:LOGBOOK:
CLOCK: [2024-01-03 Wed 17:54]--[2024-01-03 Wed 18:19] =>  0:25
CLOCK: [2023-12-24 Sun 14:31]--[2023-12-24 Sun 14:56] =>  0:25
CLOCK: [2023-12-24 Sun 14:06]--[2023-12-24 Sun 14:31] =>  0:25
CLOCK: [2023-12-24 Sun 12:36]--[2023-12-24 Sun 13:01] =>  0:25
CLOCK: [2023-12-24 Sun 12:10]--[2023-12-24 Sun 12:35] =>  0:25
CLOCK: [2023-12-24 Sun 11:39]--[2023-12-24 Sun 12:04] =>  0:25
CLOCK: [2023-12-24 Sun 11:10]--[2023-12-24 Sun 11:35] =>  0:25
CLOCK: [2023-12-24 Sun 10:44]--[2023-12-24 Sun 11:09] =>  0:25
CLOCK: [2023-12-24 Sun 10:19]--[2023-12-24 Sun 10:44] =>  0:25
:END:
- [X] 使う
- [X] 捨てる
- [X] キャンセル

- ebitenUIを組み込もうとしている
  - うまくUpdateできてないからか、windowが開けない
  - 今の構造だと、作成したuiをDrawとUpdateの2つができない
    - UIもコンポーネント
- ebitenUIだとキーボード志向にしにくそう
  - いや対応できるか
** DONE メッセージシステムの命令追加
CLOSED: [2024-01-16 Tue 08:23]
:PROPERTIES:
:Effort:   5:00
:END:
:LOGBOOK:
CLOCK: [2024-01-15 Mon 23:34]--[2024-01-15 Mon 23:59] =>  0:25
CLOCK: [2024-01-15 Mon 22:57]--[2024-01-15 Mon 23:22] =>  0:25
CLOCK: [2024-01-15 Mon 22:15]--[2024-01-15 Mon 22:40] =>  0:25
CLOCK: [2024-01-15 Mon 21:50]--[2024-01-15 Mon 22:15] =>  0:25
CLOCK: [2024-01-15 Mon 00:32]--[2024-01-15 Mon 00:57] =>  0:25
CLOCK: [2024-01-14 Sun 22:29]--[2024-01-14 Sun 22:54] =>  0:25
CLOCK: [2024-01-14 Sun 22:02]--[2024-01-14 Sun 22:27] =>  0:25
CLOCK: [2024-01-14 Sun 21:27]--[2024-01-14 Sun 21:52] =>  0:25
CLOCK: [2024-01-14 Sun 20:44]--[2024-01-14 Sun 21:09] =>  0:25
CLOCK: [2024-01-14 Sun 20:19]--[2024-01-14 Sun 20:44] =>  0:25
CLOCK: [2024-01-14 Sun 19:52]--[2024-01-14 Sun 20:17] =>  0:25
CLOCK: [2024-01-14 Sun 16:41]--[2024-01-14 Sun 17:06] =>  0:25
CLOCK: [2024-01-14 Sun 16:14]--[2024-01-14 Sun 16:39] =>  0:25
CLOCK: [2024-01-14 Sun 15:44]--[2024-01-14 Sun 16:09] =>  0:25
CLOCK: [2024-01-14 Sun 15:16]--[2024-01-14 Sun 15:41] =>  0:25
CLOCK: [2024-01-14 Sun 15:01]--[2024-01-14 Sun 15:16] =>  0:15
CLOCK: [2024-01-14 Sun 14:30]--[2024-01-14 Sun 14:55] =>  0:25
CLOCK: [2024-01-14 Sun 14:02]--[2024-01-14 Sun 14:27] =>  0:25
CLOCK: [2024-01-14 Sun 13:36]--[2024-01-14 Sun 14:01] =>  0:25
CLOCK: [2024-01-14 Sun 13:10]--[2024-01-14 Sun 13:35] =>  0:25
CLOCK: [2024-01-14 Sun 12:42]--[2024-01-14 Sun 13:07] =>  0:25
CLOCK: [2024-01-14 Sun 12:14]--[2024-01-14 Sun 12:39] =>  0:25
CLOCK: [2024-01-14 Sun 11:37]--[2024-01-14 Sun 12:02] =>  0:25
CLOCK: [2024-01-14 Sun 11:11]--[2024-01-14 Sun 11:36] =>  0:25
CLOCK: [2024-01-14 Sun 10:39]--[2024-01-14 Sun 11:04] =>  0:25
CLOCK: [2024-01-14 Sun 10:14]--[2024-01-14 Sun 10:39] =>  0:25
:END:

背景とか。

- 文字列に開始の合図がないから、識別子との判断ができてないみたい
- 画像を重ねる順番を指定できない
- 倉庫番のポーズではできてるからできそう
  - ただポーズは表示順が後なので...。明らかにポーズ画面は後だ。メッセージシステムの場合は背景が後で変わる可能性がある。
** DONE インベントリメニューでpanicになる
CLOSED: [2024-01-19 Fri 00:24]
別のステートに遷移したあと、再び戻ってクリックするとエラーになる。

- アイテム選択
- 「使う」クリックでpanic
- partyContainerの数が2つずつ増えているようだ
- 1度しか付与されないようにしたら解決した
** DONE アイテムを使う対象を選べるようにする
CLOSED: [2024-01-20 Sat 11:58]
:PROPERTIES:
:Effort:   5:00
:END:
:LOGBOOK:
CLOCK: [2024-01-17 Wed 22:39]--[2024-01-17 Wed 23:04] =>  0:25
CLOCK: [2024-01-17 Wed 21:48]--[2024-01-17 Wed 22:13] =>  0:25
CLOCK: [2024-01-17 Wed 08:25]--[2024-01-17 Wed 08:51] =>  0:26
CLOCK: [2024-01-17 Wed 07:36]--[2024-01-17 Wed 08:01] =>  0:25
CLOCK: [2024-01-17 Wed 07:11]--[2024-01-17 Wed 07:36] =>  0:25
CLOCK: [2024-01-17 Wed 06:46]--[2024-01-17 Wed 07:11] =>  0:25
CLOCK: [2024-01-16 Tue 23:46]--[2024-01-17 Wed 00:11] =>  0:25
CLOCK: [2024-01-16 Tue 23:17]--[2024-01-16 Tue 23:42] =>  0:25
CLOCK: [2024-01-16 Tue 08:37]--[2024-01-16 Tue 09:02] =>  0:25
CLOCK: [2024-01-04 Thu 12:37]--[2024-01-04 Thu 13:02] =>  0:25
CLOCK: [2024-01-04 Thu 11:11]--[2024-01-04 Thu 11:36] =>  0:25
CLOCK: [2024-01-04 Thu 10:46]--[2024-01-04 Thu 11:11] =>  0:25
CLOCK: [2024-01-04 Thu 10:21]--[2024-01-04 Thu 10:46] =>  0:25
:END:
- 回復薬の場合は1人の味方を選ぶ
- 回復スプレーの場合は全員を選択している画面になる
- ロケット弾の場合は1人の敵を選ぶ
- 決めること
  - 使う対象
    - 敵
    - 味方
    - なし
  - 対象数
    - 単数
    - 複数
  - 使う場面
    - 戦闘中のみと制限されるものがある
    - 戦闘中
    - フィールド / 拠点

- パーティ一覧を表示する
- 選択したときに適用する
- ProvidesHealingがあるものは自動で仲間対象でも良い、が
** DONE ゲーム設計
CLOSED: [2024-01-20 Sat 11:55]
:LOGBOOK:
CLOCK: [2024-01-13 Sat 23:10]--[2024-01-13 Sat 23:35] =>  0:25
CLOCK: [2024-01-13 Sat 22:45]--[2024-01-13 Sat 23:10] =>  0:25
CLOCK: [2024-01-13 Sat 22:19]--[2024-01-13 Sat 22:44] =>  0:25
CLOCK: [2024-01-12 Fri 00:18]--[2024-01-12 Fri 00:43] =>  0:25
CLOCK: [2024-01-11 Thu 23:10]--[2024-01-11 Thu 23:35] =>  0:25
CLOCK: [2024-01-10 Wed 21:10]--[2024-01-10 Wed 21:35] =>  0:25
CLOCK: [2024-01-07 Sun 22:18]--[2024-01-07 Sun 22:43] =>  0:25
CLOCK: [2024-01-07 Sun 16:34]--[2024-01-07 Sun 16:59] =>  0:25
CLOCK: [2024-01-06 Sat 18:52]--[2024-01-06 Sat 19:17] =>  0:25
:END:
どうするか。
** DONE UIのリファクタ
CLOSED: [2024-02-18 Sun 16:58]
:LOGBOOK:
CLOCK: [2024-02-18 Sun 16:33]--[2024-02-18 Sun 16:58] =>  0:25
CLOCK: [2024-02-18 Sun 14:01]--[2024-02-18 Sun 14:26] =>  0:25
CLOCK: [2024-02-18 Sun 12:18]--[2024-02-18 Sun 12:43] =>  0:25
CLOCK: [2024-02-18 Sun 11:50]--[2024-02-18 Sun 12:15] =>  0:25
CLOCK: [2024-02-18 Sun 11:25]--[2024-02-18 Sun 11:50] =>  0:25
CLOCK: [2024-02-18 Sun 11:00]--[2024-02-18 Sun 11:25] =>  0:25
CLOCK: [2024-02-18 Sun 01:15]--[2024-02-18 Sun 01:40] =>  0:25
CLOCK: [2024-02-18 Sun 00:34]--[2024-02-18 Sun 00:59] =>  0:25
CLOCK: [2024-02-17 Sat 22:49]--[2024-02-17 Sat 23:14] =>  0:25
CLOCK: [2024-02-17 Sat 22:20]--[2024-02-17 Sat 22:45] =>  0:25
CLOCK: [2024-02-17 Sat 21:54]--[2024-02-17 Sat 22:19] =>  0:25
CLOCK: [2024-02-17 Sat 21:17]--[2024-02-17 Sat 21:42] =>  0:25
CLOCK: [2024-02-17 Sat 20:49]--[2024-02-17 Sat 21:14] =>  0:25
CLOCK: [2024-02-17 Sat 20:23]--[2024-02-17 Sat 20:48] =>  0:25
CLOCK: [2024-02-17 Sat 16:57]--[2024-02-17 Sat 17:22] =>  0:25
CLOCK: [2024-01-01 Mon 20:26]--[2024-01-01 Mon 20:51] =>  0:25
CLOCK: [2024-01-01 Mon 20:01]--[2024-01-01 Mon 20:26] =>  0:25
CLOCK: [2023-12-31 Sun 09:21]--[2023-12-31 Sun 09:46] =>  0:25
CLOCK: [2023-12-30 Sat 22:23]--[2023-12-30 Sat 22:48] =>  0:25
:END:

- [X] 統一感をもって扱えるようにする
- [X] 説明文とメニューの間隔を空ける
- resourceに各UI(idle, hover, pressed)を初期化しておく
- 参考コードを見てどうやっているかを調べる
- 完璧でなくてよい。やっても成果が見えなくて辛いので、次をやるか
- UI間に依存があって、思ったよりきれいに書けなかった感
- まあ、アイテム画面と同じスタイルで別のメニューを表示したくなったら考えればいい
** DONE 武器を追加する
CLOSED: [2024-02-18 Sun 22:56]
:LOGBOOK:
CLOCK: [2024-02-18 Sun 21:19]--[2024-02-18 Sun 21:44] =>  0:25
CLOCK: [2024-02-18 Sun 20:53]--[2024-02-18 Sun 21:18] =>  0:25
CLOCK: [2024-02-18 Sun 20:27]--[2024-02-18 Sun 20:52] =>  0:25
CLOCK: [2024-02-18 Sun 19:56]--[2024-02-18 Sun 20:21] =>  0:25
CLOCK: [2024-02-18 Sun 18:23]--[2024-02-18 Sun 18:48] =>  0:25
CLOCK: [2024-02-18 Sun 17:57]--[2024-02-18 Sun 18:22] =>  0:25
CLOCK: [2024-02-18 Sun 17:26]--[2024-02-18 Sun 17:51] =>  0:25
CLOCK: [2024-02-18 Sun 16:59]--[2024-02-18 Sun 17:24] =>  0:25
:END:
使うアイテムとは別枠で表示できる。

- 武器名
- 元となった武器名
- 攻撃力
- 命中
- 攻撃回数
- 属性
  - 拳銃
  - 小銃
  - 刀剣

武器の性能にはばらつきがある。種類によってベースがある。ばらつきやすさが違う。

メニューをトグルさせるためにどうするか。既存のchildを削除して、再度追加すればいいか。
** DONE 素材を追加する
CLOSED: [2024-02-21 Wed 00:20]
:LOGBOOK:
CLOCK: [2024-02-21 Wed 19:25]--[2024-02-21 Wed 19:50] =>  0:25
:END:
- 素材は表示が違う。個数を表示することになっている。どうするか
- 素材はグローバルに個数カウントできればよい。そのへんはほかのエンティティと事情が違う
- 表示方法を変えないといけないがどうするか
  - しょせん中のテキストが違うだけ
- [ ] 素材を追加する
  - 素材は個数カウント。エンティティを追加する必要はあるか。単なるmapでもよい
  - ただ、同じtomlで生成できるほうがわかりやすい。nameとdescriptionあるし

インターフェースから考える。

#+begin_src go
  // tomlにあるものはカウント0で初期化される

  material.GetCount("ガラクタ") // => 3
  material.IncCount("ガラクタ", 1)
  material.DeclCount("小さな花", 1)
#+end_src
** DONE 合成画面を作る
CLOSED: [2024-02-23 Fri 01:49]
:LOGBOOK:
CLOCK: [2024-02-22 Thu 23:29]--[2024-02-22 Thu 23:54] =>  0:25
CLOCK: [2024-02-22 Thu 23:02]--[2024-02-22 Thu 23:27] =>  0:25
CLOCK: [2024-02-22 Thu 22:05]--[2024-02-22 Thu 22:30] =>  0:25
CLOCK: [2024-02-22 Thu 21:33]--[2024-02-22 Thu 21:58] =>  0:25
CLOCK: [2024-02-22 Thu 20:50]--[2024-02-22 Thu 21:15] =>  0:25
CLOCK: [2024-02-22 Thu 20:23]--[2024-02-22 Thu 20:48] =>  0:25
CLOCK: [2024-02-22 Thu 18:49]--[2024-02-22 Thu 19:14] =>  0:25
CLOCK: [2024-02-22 Thu 18:18]--[2024-02-22 Thu 18:43] =>  0:25
CLOCK: [2024-02-22 Thu 15:48]--[2024-02-22 Thu 16:13] =>  0:25
CLOCK: [2024-02-22 Thu 15:23]--[2024-02-22 Thu 15:48] =>  0:25
CLOCK: [2024-02-22 Thu 00:16]--[2024-02-22 Thu 00:41] =>  0:25
CLOCK: [2024-02-21 Wed 23:46]--[2024-02-22 Thu 00:11] =>  0:25
CLOCK: [2024-02-21 Wed 22:33]--[2024-02-21 Wed 22:58] =>  0:25
CLOCK: [2024-02-21 Wed 22:02]--[2024-02-21 Wed 22:27] =>  0:25
CLOCK: [2024-02-21 Wed 21:32]--[2024-02-21 Wed 21:57] =>  0:25
CLOCK: [2024-02-21 Wed 20:16]--[2024-02-21 Wed 20:41] =>  0:25
CLOCK: [2024-02-21 Wed 19:51]--[2024-02-21 Wed 20:16] =>  0:25
CLOCK: [2024-02-21 Wed 19:00]--[2024-02-21 Wed 19:25] =>  0:25
CLOCK: [2024-02-21 Wed 00:45]--[2024-02-21 Wed 01:10] =>  0:25
CLOCK: [2024-02-21 Wed 00:20]--[2024-02-21 Wed 00:45] =>  0:25
CLOCK: [2024-02-20 Tue 23:17]--[2024-02-20 Tue 23:42] =>  0:25
CLOCK: [2024-02-20 Tue 22:31]--[2024-02-20 Tue 22:56] =>  0:25
CLOCK: [2024-02-20 Tue 21:49]--[2024-02-20 Tue 22:14] =>  0:25
CLOCK: [2024-02-20 Tue 21:22]--[2024-02-20 Tue 21:47] =>  0:25
CLOCK: [2024-02-20 Tue 20:57]--[2024-02-20 Tue 21:22] =>  0:25
CLOCK: [2024-02-20 Tue 00:36]--[2024-02-20 Tue 01:01] =>  0:25
CLOCK: [2024-02-20 Tue 00:05]--[2024-02-20 Tue 00:30] =>  0:25
CLOCK: [2024-02-19 Mon 22:49]--[2024-02-19 Mon 23:14] =>  0:25
CLOCK: [2024-02-19 Mon 21:32]--[2024-02-19 Mon 21:57] =>  0:25
CLOCK: [2024-02-19 Mon 20:50]--[2024-02-19 Mon 21:16] =>  0:26
CLOCK: [2024-02-19 Mon 20:14]--[2024-02-19 Mon 20:39] =>  0:25
CLOCK: [2024-02-19 Mon 19:24]--[2024-02-19 Mon 19:49] =>  0:25
:END:
まず画面を作って、そこから共通化していけばいいか。

- 装備画面
- 合成画面
- 使用画面

これらは似たようなUIを持つ。

- カテゴリ選択
- アイテムメニュー(左)
  - 中身の取得ロジックは異なる
  - 中に入るデータの種類が違うということ
- 性能メニュー(右)

あたりは共通。ボタンのアクションが違うくらいか。

合成に必要なもの。

- レシピ
  - 素材の種類と個数
  - 鉄の剣 = ~[{鉄くず,2}, {木の棒,1}]~
- [X] レシピを表示する
- [X] 合成する関数を作成する
  - アイテム名からベースアイテムを作成する
  - 加工する
- [ ] レシピをもとに作成できるようにする
  - 所持数量とレシピを比較して満たしていると合成が選択できる
  - 合成を選択すると、所持数量を減らし該当アイテムを追加する

#+begin_src go
  gc := Craft("ハンドガン", 4) ecs.Entity // 品名、合成オプション
  Spawn(gc, spawntype.OnBackpack)
#+end_src
** DONE アイテムUIまわりをリファクタする
CLOSED: [2024-02-23 Fri 01:49]
:LOGBOOK:
CLOCK: [2024-02-18 Sun 23:40]--[2024-02-19 Mon 00:05] =>  0:25
CLOCK: [2024-02-18 Sun 23:01]--[2024-02-18 Sun 23:26] =>  0:25
:END:
- [X] グローバル変数を構造体のフィールドに移す

合成とか装備品変更とか、よく似たUIで別画面を作ることになる。別で作ってたら大変なことになる。再利用するためにはどうすればよいか。
** DONE 乗り物をどうするか
CLOSED: [2024-02-23 Fri 01:49]

結論、小さなSFチックな機械を導入する。戦闘には参加しないがサポートする。知能は持たない。

パーティ全体を強化できるようなのがあると面白そうに思える。乗り物はそういう強化が自然にできて面白い。人だけだとつけ外し要素がない。ただし、戦車だとシステムが複雑になる可能性がある。アイテム合成が生きないような。

- ドローンやタレットとか、自律的な何か
- 戦闘で交じるのはややこしくて困る
- 非戦闘な乗り物ってないな
- 歩数制限のもっともな理由がほしい
  - 燃料とか食べ物の類
- 小さなSFチックな機械を導入する。それがないと遺跡に入れない的な。いろいろ効果をつけられる
- 戦車は逆に敵が強くなるとかの理由をつけて遺跡に入らない。戦闘が面倒になるので
** DONE タイル移動でなくするか
CLOSED: [2024-02-23 Fri 01:57]
いやでもアニメーションやリアルタイムとなると大変そうだから、タイル移動のままがよさそう。

あまりローグライクさせる意味はなさそう。敵を避けにくい。banbandonを参考にして自由移動にするか。
** DONE 一貫させるためインターフェースを定義する
CLOSED: [2024-02-23 Fri 17:15]
stateごとにコードがバラバラで、直していくのが辛い。

一部共通部分もあるが、違う部分も多いので、しょうがないところではある。

インターフェース化して、ある程度同じにするか。とはいえ、アイテム画面がそこまで種類多いかと言われるとそうでもない。3、4個だからあまり神経質にならなくてもいい。
** DONE 武器コンポーネントに属性を追加する
CLOSED: [2024-02-23 Fri 21:30]
:LOGBOOK:
CLOCK: [2024-02-23 Fri 21:04]--[2024-02-23 Fri 21:30] =>  0:26
CLOCK: [2024-02-23 Fri 20:33]--[2024-02-23 Fri 20:58] =>  0:25
CLOCK: [2024-02-23 Fri 19:51]--[2024-02-23 Fri 20:16] =>  0:25
CLOCK: [2024-02-23 Fri 19:15]--[2024-02-23 Fri 19:40] =>  0:25
CLOCK: [2024-02-23 Fri 18:50]--[2024-02-23 Fri 19:15] =>  0:25
CLOCK: [2024-02-23 Fri 18:25]--[2024-02-23 Fri 18:50] =>  0:25
CLOCK: [2024-02-23 Fri 17:42]--[2024-02-23 Fri 18:07] =>  0:25
:END:
- 火炎(耐火)
- 電気(耐電)
- 光力(耐光)

だとそのまますぎるか。光は異色だが、SFらしさを出すのに良い。ややこしいのであまり属性を増やしたくない。冷気(耐冷)を追加した。

時代背景的に、SFではない。でも合成するとSFになるよな。SFよりの現代、でよいか。
** DONE アイテム種別に防具を追加する
CLOSED: [2024-02-24 Sat 17:57]
:LOGBOOK:
CLOCK: [2024-02-24 Sat 01:05]--[2024-02-24 Sat 01:30] =>  0:25
CLOCK: [2024-02-24 Sat 00:40]--[2024-02-24 Sat 01:05] =>  0:25
CLOCK: [2024-02-23 Fri 22:59]--[2024-02-23 Fri 23:24] =>  0:25
CLOCK: [2024-02-23 Fri 22:24]--[2024-02-23 Fri 22:49] =>  0:25
:END:
- 消耗品
- 武器
- 防具
- 素材

で、種別が揃う。
** DONE 武器種別を追加する
CLOSED: [2024-02-24 Sat 19:39]
:LOGBOOK:
CLOCK: [2024-02-24 Sat 19:07]--[2024-02-24 Sat 19:32] =>  0:25
CLOCK: [2024-02-24 Sat 18:07]--[2024-02-24 Sat 18:32] =>  0:25
:END:
剣とか銃とか。
** DONE 合成画面をリファクタする
CLOSED: [2024-02-24 Sat 19:33]
:LOGBOOK:
CLOCK: [2024-02-23 Fri 16:36]--[2024-02-23 Fri 17:01] =>  0:25
CLOCK: [2024-02-23 Fri 15:22]--[2024-02-23 Fri 15:47] =>  0:25
CLOCK: [2024-02-23 Fri 14:49]--[2024-02-23 Fri 15:14] =>  0:25
CLOCK: [2024-02-23 Fri 14:08]--[2024-02-23 Fri 14:33] =>  0:25
CLOCK: [2024-02-23 Fri 13:43]--[2024-02-23 Fri 14:08] =>  0:25
CLOCK: [2024-02-23 Fri 13:13]--[2024-02-23 Fri 13:38] =>  0:25
CLOCK: [2024-02-23 Fri 12:48]--[2024-02-23 Fri 13:13] =>  0:25
CLOCK: [2024-02-23 Fri 12:14]--[2024-02-23 Fri 12:39] =>  0:25
CLOCK: [2024-02-23 Fri 11:23]--[2024-02-23 Fri 11:48] =>  0:25
CLOCK: [2024-02-23 Fri 10:58]--[2024-02-23 Fri 11:23] =>  0:25
CLOCK: [2024-02-23 Fri 10:33]--[2024-02-23 Fri 10:58] =>  0:25
CLOCK: [2024-02-23 Fri 10:07]--[2024-02-23 Fri 10:32] =>  0:25
CLOCK: [2024-02-23 Fri 02:04]--[2024-02-23 Fri 02:29] =>  0:25
:END:
書き直す。
** DONE 装備画面を作る
CLOSED: [2024-02-26 Mon 23:01]
:LOGBOOK:
CLOCK: [2024-02-25 Sun 15:09]--[2024-02-25 Sun 15:34] =>  0:25
CLOCK: [2024-02-25 Sun 14:40]--[2024-02-25 Sun 15:05] =>  0:25
CLOCK: [2024-02-25 Sun 14:12]--[2024-02-25 Sun 14:37] =>  0:25
CLOCK: [2024-02-25 Sun 13:45]--[2024-02-25 Sun 14:10] =>  0:25
CLOCK: [2024-02-25 Sun 13:07]--[2024-02-25 Sun 13:32] =>  0:25
CLOCK: [2024-02-25 Sun 12:41]--[2024-02-25 Sun 13:06] =>  0:25
CLOCK: [2024-02-25 Sun 12:16]--[2024-02-25 Sun 12:41] =>  0:25
CLOCK: [2024-02-25 Sun 11:51]--[2024-02-25 Sun 12:16] =>  0:25
CLOCK: [2024-02-25 Sun 11:16]--[2024-02-25 Sun 11:41] =>  0:25
CLOCK: [2024-02-25 Sun 10:50]--[2024-02-25 Sun 11:15] =>  0:25
CLOCK: [2024-02-25 Sun 10:24]--[2024-02-25 Sun 10:49] =>  0:25
CLOCK: [2024-02-25 Sun 09:59]--[2024-02-25 Sun 10:24] =>  0:25
CLOCK: [2024-02-25 Sun 01:47]--[2024-02-25 Sun 02:12] =>  0:25
CLOCK: [2024-02-25 Sun 01:22]--[2024-02-25 Sun 01:47] =>  0:25
CLOCK: [2024-02-25 Sun 00:47]--[2024-02-25 Sun 01:12] =>  0:25
CLOCK: [2024-02-24 Sat 22:58]--[2024-02-24 Sat 23:23] =>  0:25
CLOCK: [2024-02-24 Sat 20:30]--[2024-02-24 Sat 20:55] =>  0:25
CLOCK: [2024-02-24 Sat 19:54]--[2024-02-24 Sat 20:19] =>  0:25
:END:
- [X] スロットを作成する
  - コードから装備させる
- [X] 装備画面を作成する
  - スロット表示画面。各キャラごと
- [X] 選択画面を作成する
  - ここで選択したものが前で選択したスロットに装備される
  - モードをどう表現するか。これをstateとしてやるのはやりすぎな気もする
  - 選択モードとだけしとけばいいか
  - 選択モードだと、左側を武器リストにする。スライダーがあるから、全く同じにならなそうだな
** DONE enumのバリデーション
CLOSED: [2024-03-01 Fri 22:19]
:LOGBOOK:
CLOCK: [2024-03-01 Fri 21:43]--[2024-03-01 Fri 22:08] =>  0:25
CLOCK: [2024-03-01 Fri 21:18]--[2024-03-01 Fri 21:43] =>  0:25
CLOCK: [2024-03-01 Fri 20:46]--[2024-03-01 Fri 21:11] =>  0:25
:END:
楽にバリデーションできる書き方にする。
** DONE カメラ追加
CLOSED: [2024-04-08 Mon 21:11]
:LOGBOOK:
CLOCK: [2024-04-11 Thu 00:26]--[2024-04-11 Thu 00:51] =>  0:25
CLOCK: [2024-04-08 Mon 20:27]--[2024-04-08 Mon 20:52] =>  0:25
CLOCK: [2024-04-08 Mon 20:02]--[2024-04-08 Mon 20:27] =>  0:25
CLOCK: [2024-04-08 Mon 19:31]--[2024-04-08 Mon 19:56] =>  0:25
CLOCK: [2024-04-08 Mon 18:33]--[2024-04-08 Mon 18:58] =>  0:25
:END:
今はそのまま表示してる。プレイヤーの位置に追従してステージの一部だけを表示したい。

とりあえず、仮で追加した。
** CLOSE UIと分離したい
CLOSED: [2024-04-08 Mon 01:38]
:LOGBOOK:
CLOCK: [2024-04-08 Mon 00:48]--[2024-04-08 Mon 01:13] =>  0:25
CLOCK: [2024-04-07 Sun 23:30]--[2024-04-07 Sun 23:55] =>  0:25
CLOCK: [2024-04-07 Sun 22:37]--[2024-04-07 Sun 23:02] =>  0:25
CLOCK: [2024-04-07 Sun 22:11]--[2024-04-07 Sun 22:36] =>  0:25
CLOCK: [2024-04-07 Sun 21:45]--[2024-04-07 Sun 22:10] =>  0:25
CLOCK: [2024-04-07 Sun 20:07]--[2024-04-07 Sun 20:32] =>  0:25
:END:
完全にUIと一体化しているのでよくわからなくなる。

- UIを保持する構造体
- UIで表示されているボタンに設定されたイベントがトリガーされて、ECSクエリを実行して表示を切り替えたり追加したりする
- stateはviewだと考えてよさそうな感じがする
- データストアと直にやりとりしてるわけじゃないからいいのか。UIの変更だけだな
** DONE 装備画面のリファクタ
CLOSED: [2024-04-13 Sat 12:59]
:LOGBOOK:
CLOCK: [2024-04-13 Sat 12:03]--[2024-04-13 Sat 12:28] =>  0:25
CLOCK: [2024-04-13 Sat 11:33]--[2024-04-13 Sat 11:58] =>  0:25
CLOCK: [2024-04-12 Fri 00:47]--[2024-04-12 Fri 01:12] =>  0:25
CLOCK: [2024-04-11 Thu 22:37]--[2024-04-11 Thu 23:02] =>  0:25
CLOCK: [2024-04-11 Thu 22:12]--[2024-04-11 Thu 22:37] =>  0:25
CLOCK: [2024-04-11 Thu 21:45]--[2024-04-11 Thu 22:10] =>  0:25
CLOCK: [2024-04-11 Thu 21:19]--[2024-04-11 Thu 21:44] =>  0:25
CLOCK: [2024-02-29 Thu 23:32]--[2024-02-29 Thu 23:57] =>  0:25
CLOCK: [2024-02-29 Thu 23:07]--[2024-02-29 Thu 23:32] =>  0:25
CLOCK: [2024-02-26 Mon 23:03]--[2024-02-26 Mon 23:29] =>  0:26
:END:
汚いので直す。

どこから直せばいいのかよくわからないな。
** DONE ステータスを追加する
CLOSED: [2024-04-13 Sat 14:14]
:LOGBOOK:
CLOCK: [2024-04-13 Sat 13:25]--[2024-04-13 Sat 13:50] =>  0:25
CLOCK: [2024-04-13 Sat 12:59]--[2024-04-13 Sat 13:24] =>  0:25
:END:
生命力とか、力とか。
** DONE 装備でステータスを変更する
CLOSED: [2024-04-14 Sun 10:24]
:LOGBOOK:
CLOCK: [2024-04-13 Sat 23:37]--[2024-04-14 Sun 00:02] =>  0:25
CLOCK: [2024-04-13 Sat 22:40]--[2024-04-13 Sat 23:05] =>  0:25
CLOCK: [2024-04-13 Sat 22:09]--[2024-04-13 Sat 22:34] =>  0:25
CLOCK: [2024-04-13 Sat 21:40]--[2024-04-13 Sat 22:05] =>  0:25
CLOCK: [2024-04-13 Sat 21:02]--[2024-04-13 Sat 21:27] =>  0:25
CLOCK: [2024-04-13 Sat 20:36]--[2024-04-13 Sat 21:01] =>  0:25
CLOCK: [2024-04-13 Sat 20:11]--[2024-04-13 Sat 20:36] =>  0:25
CLOCK: [2024-04-13 Sat 19:46]--[2024-04-13 Sat 20:11] =>  0:25
CLOCK: [2024-04-13 Sat 18:14]--[2024-04-13 Sat 18:39] =>  0:25
CLOCK: [2024-04-13 Sat 17:37]--[2024-04-13 Sat 18:02] =>  0:25
CLOCK: [2024-04-13 Sat 17:11]--[2024-04-13 Sat 17:36] =>  0:25
CLOCK: [2024-04-13 Sat 16:38]--[2024-04-13 Sat 17:03] =>  0:25
CLOCK: [2024-04-13 Sat 16:06]--[2024-04-13 Sat 16:31] =>  0:25
CLOCK: [2024-04-13 Sat 15:33]--[2024-04-13 Sat 15:58] =>  0:25
CLOCK: [2024-04-13 Sat 15:07]--[2024-04-13 Sat 15:32] =>  0:25
CLOCK: [2024-04-13 Sat 14:40]--[2024-04-13 Sat 15:05] =>  0:25
CLOCK: [2024-04-13 Sat 14:15]--[2024-04-13 Sat 14:40] =>  0:25
:END:
防具を装備すると防御力が上がるなど。

- キャラ固有のステータスは、Attributes
  - キャラごとに固有の値をもつ
  - 装備によって上がることがある
- 防御力はどうするか
  - キャラごとに固有の値をもたない。装備がなければみんな0となる
- 防御力以外が上がることもある。武器、防具どちらでも。
  - 器用さ+1などのステータス値
  - 火耐性+20%などの属性耐性
  - 頑丈+1、貫通+2などのスキル
  - 「救護」「乱射」などの行動追加
** DONE 説明図を書く
CLOSED: [2024-04-14 Sun 19:48]
:LOGBOOK:
CLOCK: [2024-04-14 Sun 19:19]--[2024-04-14 Sun 19:44] =>  0:25
:END:

見返してみるとけっこういい図がある。概念整理する。
** DONE 回復薬を割合回復にする
CLOSED: [2024-04-14 Sun 19:48]
:LOGBOOK:
CLOCK: [2024-04-14 Sun 18:53]--[2024-04-14 Sun 19:18] =>  0:25
CLOCK: [2024-04-14 Sun 16:33]--[2024-04-14 Sun 16:58] =>  0:25
CLOCK: [2024-04-14 Sun 14:58]--[2024-04-14 Sun 15:23] =>  0:25
CLOCK: [2024-04-14 Sun 14:23]--[2024-04-14 Sun 14:48] =>  0:25
CLOCK: [2024-04-14 Sun 13:43]--[2024-04-14 Sun 14:08] =>  0:25
CLOCK: [2024-04-14 Sun 13:17]--[2024-04-14 Sun 13:42] =>  0:25
CLOCK: [2024-04-14 Sun 12:52]--[2024-04-14 Sun 13:17] =>  0:25
CLOCK: [2024-04-14 Sun 12:27]--[2024-04-14 Sun 12:52] =>  0:25
CLOCK: [2024-04-14 Sun 11:40]--[2024-04-14 Sun 12:05] =>  0:25
CLOCK: [2024-04-14 Sun 11:15]--[2024-04-14 Sun 11:40] =>  0:25
CLOCK: [2024-04-14 Sun 10:49]--[2024-04-14 Sun 11:14] =>  0:25
CLOCK: [2024-04-14 Sun 10:24]--[2024-04-14 Sun 10:49] =>  0:25
:END:

- 固定値ではないようにする
- 割合回復の仕組みは作ったので、回復薬に適用する
- components, raw, effect をいい感じにしていく作業。大体同じ構造体になる
- 直にeffectを追加するのはよくないかもな。アイテムと共通に、いったんcomponentsを渡してeffectに変換させるようにする
** DONE 戦闘部分の設計
CLOSED: [2024-04-20 Sat 00:00]
:LOGBOOK:
CLOCK: [2024-04-17 Wed 21:55]--[2024-04-17 Wed 22:20] =>  0:25
CLOCK: [2024-04-17 Wed 21:26]--[2024-04-17 Wed 21:51] =>  0:25
CLOCK: [2024-04-17 Wed 20:46]--[2024-04-17 Wed 21:11] =>  0:25
CLOCK: [2024-04-17 Wed 20:15]--[2024-04-17 Wed 20:40] =>  0:25
CLOCK: [2024-04-17 Wed 19:35]--[2024-04-17 Wed 20:00] =>  0:25
CLOCK: [2024-04-17 Wed 19:10]--[2024-04-17 Wed 19:35] =>  0:25
CLOCK: [2024-04-17 Wed 00:25]--[2024-04-17 Wed 00:50] =>  0:25
CLOCK: [2024-04-17 Wed 00:00]--[2024-04-17 Wed 00:25] =>  0:25
CLOCK: [2024-04-16 Tue 00:16]--[2024-04-16 Tue 00:41] =>  0:25
CLOCK: [2024-04-15 Mon 21:38]--[2024-04-15 Mon 22:03] =>  0:25
CLOCK: [2024-04-15 Mon 21:03]--[2024-04-15 Mon 21:28] =>  0:25
CLOCK: [2024-04-15 Mon 00:20]--[2024-04-15 Mon 00:45] =>  0:25
CLOCK: [2024-04-14 Sun 23:41]--[2024-04-15 Mon 00:06] =>  0:25
CLOCK: [2024-04-14 Sun 21:09]--[2024-04-14 Sun 21:34] =>  0:25
CLOCK: [2024-04-14 Sun 20:36]--[2024-04-14 Sun 21:01] =>  0:25
:END:
未知の部分。どうするか。

- デッキ型にすると面白そうだなあ
  - 取れる行動が毎回異なる
  - マイナス行動は手札を圧迫する
  - カードには消費コストが設定されているから、強いものを選べばいいというわけでもない
  - ターンに行動カードは1枚選ぶ
  - デッキに1枚しか設定されてないと、それしか出なくないか。10枚登録固定にすればいいか

- 白瀬
  - 行動カード
    - マシンガン(sp2) by 装備武器
    - 防御(シールド装備, sp1)
    - 回復(体力回復, アイテム消費) by 所持スキル
    - 乱射(攻撃回数1.5倍, sp1) by 装備
    - 狙撃(待ち時間1.5倍+攻撃力2倍, sp2) by 所持スキル
  - パッシブスキル
    - 連携LV2(連携率1.4倍) by 所持スキル
    - 射撃LV1(命中率1.1倍, 射撃武器の攻撃力1.1倍) by 所持スキル
- ピエロ
  - 行動カード
    - レーザーブレード(装備武器, sp2)
    - 高出力(炎属性, sp2) by 装備
    - 応援 by 固有行動
- 選択
  - 基本攻撃(白瀬)
  - 基本攻撃(ピエロ)

デッキ。

参考。

- デッキは共通のことが多いようだ
  - 特定の人ばかり攻撃することにならないのだろうか
  - チームとは別に、人ごとの行動力もある
  - 同じターンで複数行動はコスト増加する
  - コスト増加しないものもある
  - ドローしなくても使えるものがある
- ターンごとに行動力が回復する。戦闘ごとにリセット
- カードのストックはできない
  - 毎回同じにならない
- カードの入手はランダム
- 装備が2枠ある
- 戦闘と関係ないサポートキャラが1人いる

それをふまえて。

- 調整が難しいので、もっとシンプルなルールがよさそう
- ランダム制はそこまでなくてよい
- 頭脳や運というよりはRPG的な、レベル上げて準備すれば勝てる要素強めにしたい
- カスタム性を高めたい
- アイテムのアップグレード要素はなし
- 特殊攻撃がついたカードはどう扱うか。あるなしどっちもほしい
  - 2枚生成させるか
  - 合成結果は複数になることがある
  - アイテム取得全般が、複数あるのを考慮しておく
  - ある武器に対して、アクションが複数選べるというのが自然だ
  - アクションは、他のカードを強化するカードでよさそう
- カードとアクションは変えたいんだよな
- 防具とかどうする
  - 基本パラメータは変わらないでいいのか
  - デッキに含めるとパラメータUPでよさそう
- カードは直に入手できるのか、合成で入手するのか
  - ダンジョン内で入手したやつを試せたほうがよさそう
  - 制限ともいえるが...
  - 入手は完全ランダム。1度入手すると合成で複数手に入れやすい

実装。

- じつはEffectと同じように、組み合わせてエンティティにしておけばいいだけか
  - アクションカードは攻撃を与える性質や、回復する性質がついていればよい。あと対象が敵か味方か、単数か
  - ブーストカードは、変化させる内容を保持していればよい。あと対象が敵か味方か、単数か
** DONE UpdateSpecに渡すComponentsの更新を忘れる
CLOSED: [2024-04-19 Fri 00:59]
:LOGBOOK:
CLOCK: [2024-04-19 Fri 00:33]--[2024-04-19 Fri 00:58] =>  0:25
:END:
オートで全コンポーネントを対象にすればよさそう。

componentListに渡せばよい。

** DONE 防具ジャンルを消す
CLOSED: [2024-04-19 Fri 00:59]
:LOGBOOK:
CLOCK: [2024-04-18 Thu 22:22]--[2024-04-18 Thu 22:47] =>  0:25
CLOCK: [2024-04-18 Thu 21:54]--[2024-04-18 Thu 22:19] =>  0:25
CLOCK: [2024-04-18 Thu 21:27]--[2024-04-18 Thu 21:52] =>  0:25
CLOCK: [2024-04-18 Thu 21:02]--[2024-04-18 Thu 21:27] =>  0:25
CLOCK: [2024-04-18 Thu 00:29]--[2024-04-18 Thu 00:54] =>  0:25
CLOCK: [2024-04-18 Thu 00:04]--[2024-04-18 Thu 00:29] =>  0:25
:END:
あまり区分けする必要はなさそうか。あの正方形のUIにすれば、混ざって入っていてもあまり違和感はない。

ただ、合成のときは分けたい感じも。

- アイテム
  - 消耗品
  - 売却アイテム
  - 防具
- 手札
  - アクションカード
  - サポートカード

メモ。

- なぜかInBackpackの条件で、結果に入らない
  - 装備してるせいだった...
** CLOSE アイテム以外でeffectをトリガーする方法
CLOSED: [2024-04-20 Sat 00:07]

今はまだ、アイテムトリガーしかない。AddItemで、コンポーネントに分解されてそれぞれEffectのキューに入り、実行される。

ただ、今後全回復とか、アイテム以外で何かしたいときが増える。そのときはどうするか。
** DONE メインメニューを開いているとCPU使用率が爆増する
CLOSED: [2024-04-21 Sun 01:13]
:LOGBOOK:
CLOCK: [2024-04-20 Sat 21:59]--[2024-04-20 Sat 22:24] =>  0:25
CLOCK: [2024-04-20 Sat 21:23]--[2024-04-20 Sat 21:48] =>  0:25
CLOCK: [2024-04-20 Sat 20:49]--[2024-04-20 Sat 21:14] =>  0:25
CLOCK: [2024-04-20 Sat 20:22]--[2024-04-20 Sat 20:47] =>  0:25
CLOCK: [2024-04-20 Sat 19:47]--[2024-04-20 Sat 20:12] =>  0:25
CLOCK: [2024-04-20 Sat 18:50]--[2024-04-20 Sat 19:15] =>  0:25
CLOCK: [2024-04-20 Sat 17:13]--[2024-04-20 Sat 17:38] =>  0:25
:END:
リークしている。

- フィールド画面でも起こるな
- ほかの画面では起こらない。どうもメニューの仕組みを使っているところで起きてそう

#+begin_src shell
  ps aux | head -n 1
#+end_src

#+RESULTS:
#+begin_src
USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
#+end_src

- ほかの画面でも、タブを切り替えたときなどに発生する。生成した画面を生成できてないんだろうな
- RemoveChildren()で、表示されなくはなっているけど、それがガベージコレクションされてない
- プロファイラの設定した
- LoadFont()設定があると、残り続けるな。ないと、残らない
- ずっとコンテナの親子関係に問題があると考えていた(RemoveChildrenまわり)けど、そうではなかった
- Faceまわりを毎回初期化してたのを、リソース構造体に保存して、それを使うようにしたら解決した
- なんだかよくわからないな
- 相変わらず微妙に増えてるように見えるが、freeされてるようにも見える
** DONE 画像回帰テスト
CLOSED: [2024-04-21 Sun 20:41]
:LOGBOOK:
CLOCK: [2024-04-21 Sun 18:34]--[2024-04-21 Sun 18:59] =>  0:25
CLOCK: [2024-04-21 Sun 17:54]--[2024-04-21 Sun 18:19] =>  0:25
CLOCK: [2024-04-21 Sun 17:29]--[2024-04-21 Sun 17:54] =>  0:25
CLOCK: [2024-04-21 Sun 16:59]--[2024-04-21 Sun 17:24] =>  0:25
CLOCK: [2024-04-21 Sun 16:33]--[2024-04-21 Sun 16:58] =>  0:25
CLOCK: [2024-04-21 Sun 12:02]--[2024-04-21 Sun 12:27] =>  0:25
CLOCK: [2024-04-21 Sun 11:35]--[2024-04-21 Sun 12:00] =>  0:25
CLOCK: [2024-04-21 Sun 11:10]--[2024-04-21 Sun 11:35] =>  0:25
CLOCK: [2024-04-21 Sun 10:45]--[2024-04-21 Sun 11:10] =>  0:25
CLOCK: [2024-04-21 Sun 10:20]--[2024-04-21 Sun 10:45] =>  0:25
:END:
コマンドで各ステートの画像を取れるようにする。
** DONE メモリリークをCIで検知したい
CLOSED: [2024-04-21 Sun 21:03]
:LOGBOOK:
CLOCK: [2024-04-21 Sun 01:13]--[2024-04-21 Sun 01:38] =>  0:25
:END:

まあパフォーマンスを画面表示してるし、わかるだろう。

一定期間起動して、一定になるか確かめるとよさそう。
** DONE ホーム画面をクリック対応する
CLOSED: [2024-04-22 Mon 01:01]
:LOGBOOK:
CLOCK: [2024-04-21 Sun 22:42]--[2024-04-21 Sun 23:07] =>  0:25
CLOCK: [2024-04-21 Sun 21:47]--[2024-04-21 Sun 22:12] =>  0:25
:END:
キーボードはとりあえずなくした。

今はキーボードでしか移動できない。

でもキーボード移動も残したい。
** DONE Ray Castingを参考にしてフィールドの原型を作る
CLOSED: [2024-05-01 Wed 18:27]
:LOGBOOK:
CLOCK: [2024-04-29 Mon 15:43]--[2024-04-29 Mon 16:08] =>  0:25
CLOCK: [2024-04-29 Mon 15:16]--[2024-04-29 Mon 15:41] =>  0:25
CLOCK: [2024-04-29 Mon 14:51]--[2024-04-29 Mon 15:16] =>  0:25
CLOCK: [2024-04-29 Mon 14:26]--[2024-04-29 Mon 14:51] =>  0:25
CLOCK: [2024-04-29 Mon 13:44]--[2024-04-29 Mon 14:09] =>  0:25
CLOCK: [2024-04-29 Mon 13:18]--[2024-04-29 Mon 13:43] =>  0:25
CLOCK: [2024-04-25 Thu 22:11]--[2024-04-25 Thu 22:36] =>  0:25
CLOCK: [2024-04-25 Thu 21:45]--[2024-04-25 Thu 22:10] =>  0:25
CLOCK: [2024-04-25 Thu 20:46]--[2024-04-25 Thu 21:11] =>  0:25
CLOCK: [2024-04-25 Thu 20:11]--[2024-04-25 Thu 20:36] =>  0:25
CLOCK: [2024-04-25 Thu 19:46]--[2024-04-25 Thu 20:11] =>  0:25
CLOCK: [2024-04-25 Thu 18:51]--[2024-04-25 Thu 19:16] =>  0:25
CLOCK: [2024-04-25 Thu 18:26]--[2024-04-25 Thu 18:51] =>  0:25
CLOCK: [2024-04-24 Wed 22:58]--[2024-04-24 Wed 23:23] =>  0:25
CLOCK: [2024-04-24 Wed 21:46]--[2024-04-24 Wed 22:11] =>  0:25
CLOCK: [2024-04-24 Wed 21:03]--[2024-04-24 Wed 21:28] =>  0:25
CLOCK: [2024-04-24 Wed 20:38]--[2024-04-24 Wed 21:03] =>  0:25
CLOCK: [2024-04-24 Wed 00:10]--[2024-04-24 Wed 00:35] =>  0:25
:END:

- Ray Castingを原型に動くものを作る
- やりたいことに近い。[[https://al-ro.github.io/projects/raycasting/][2D Ray Casting]]
- ban-ban-donを参考にして各システムを実装する
- 特に目新しいことはなく、移動に関しては完全に参考にして作成できるように見える

ゲーム的。

- 動かしてみて、難易度的に難しい割に、そんなに移動にゲーム性生まれなくないかと感じた
- 不可視の範囲を作るのがそこまで面白いかと言われるとビミョー
- ほかのサンプルでは興味深く見えた。距離をつけてないから、明るすぎるためか
- シューティング要素はないからな。単なる追いかけっこが面白いかというと…ミンサガとかのイメージが近い。避けるためのスキルを使う
- お宝探し感は楽しい
- リアルタイムだと、シューティングの劣化版にしかならない。自分が動くと相手も動く形式であればよさそう。じっくり考えて駆け引きにする

実装。

- 三角形をグラデーションにすればよさそう
- jsの方ではどうやってるか
  - 単にfillをグラデーションで設定してるだけに見える
- 画像
  - 背景
  - 影
  - 三角

ECSとの兼ね合い。

- システムにしていきたいが、描画とかは厳しそうに見える。少なくとも1タイルごとに1エンティティとかにはできない
- 描画以外はECSにしていく
- なんだか難しすぎるように見えるけど、どうなのだろう
- たくさんの構造体をstateに書くのは違う。が、いじりたい状態フィールドがある
** DONE フィールドの背景を全体に設定する
CLOSED: [2024-05-01 Wed 21:52]
:LOGBOOK:
CLOCK: [2024-05-01 Wed 21:17]--[2024-05-01 Wed 21:42] =>  0:25
CLOCK: [2024-05-01 Wed 18:56]--[2024-05-01 Wed 19:21] =>  0:25
CLOCK: [2024-05-01 Wed 18:30]--[2024-05-01 Wed 18:55] =>  0:25
:END:
敷き詰めたい。

- やっぱりVRTで失敗するな
- 手元で動かすと発生しないのはなぜなんだろうな
** DONE コンポーネントを移動する
CLOSED: [2024-05-04 Sat 11:32]
:PROPERTIES:
:Effort:   3:00
:END:
:LOGBOOK:
CLOCK: [2024-05-04 Sat 11:07]--[2024-05-04 Sat 11:32] =>  0:25
CLOCK: [2024-05-04 Sat 10:42]--[2024-05-04 Sat 11:07] =>  0:25
CLOCK: [2024-05-04 Sat 10:17]--[2024-05-04 Sat 10:42] =>  0:25
CLOCK: [2024-05-04 Sat 01:12]--[2024-05-04 Sat 01:37] =>  0:25
CLOCK: [2024-05-04 Sat 00:44]--[2024-05-04 Sat 01:09] =>  0:25
CLOCK: [2024-05-03 Fri 23:59]--[2024-05-04 Sat 00:24] =>  0:25
CLOCK: [2024-05-03 Fri 21:43]--[2024-05-03 Fri 22:08] =>  0:25
CLOCK: [2024-05-03 Fri 21:15]--[2024-05-03 Fri 21:40] =>  0:25
CLOCK: [2024-05-03 Fri 20:30]--[2024-05-03 Fri 20:55] =>  0:25
CLOCK: [2024-05-03 Fri 15:39]--[2024-05-03 Fri 16:04] =>  0:25
CLOCK: [2024-05-03 Fri 15:14]--[2024-05-03 Fri 15:39] =>  0:25
CLOCK: [2024-05-03 Fri 14:38]--[2024-05-03 Fri 15:03] =>  0:25
CLOCK: [2024-05-03 Fri 13:14]--[2024-05-03 Fri 13:39] =>  0:25
:END:
移動する。

- メニューを透過できないな。真っ暗になる。fieldだとできるのはなぜだろう
- スプライトを表示できない。何も表示されない
  - geoMで位置を指定してないせいだった
** DONE 影描画をsystemでやる
CLOSED: [2024-05-05 Sun 11:31]
:PROPERTIES:
:Effort:   3:00
:END:
:LOGBOOK:
CLOCK: [2024-05-04 Sat 14:44]--[2024-05-04 Sat 15:09] =>  0:25
CLOCK: [2024-05-04 Sat 12:59]--[2024-05-04 Sat 13:24] =>  0:25
CLOCK: [2024-05-04 Sat 12:34]--[2024-05-04 Sat 12:59] =>  0:25
CLOCK: [2024-05-04 Sat 11:38]--[2024-05-04 Sat 12:03] =>  0:25
:END:
元の仕組みとは異なるため、調整が必要。

- 真っ黒になるな
- レイも見えないので、間違ってるようだ
- 視点と同じ位置にあるために、全部真っ暗になっている説
- 外すと、いくつかのrayがおかしくなっていて失敗する
  - 特定の点がおかしいようだ
- 外周の壁がなくて、交点がないrayがあったせいだった
** DONE フィールド描画をECS化する
CLOSED: [2024-05-05 Sun 11:31]
:PROPERTIES:
:Effort:   5:00
:END:
:LOGBOOK:
CLOCK: [2024-05-03 Fri 11:41]--[2024-05-03 Fri 12:06] =>  0:25
CLOCK: [2024-05-03 Fri 11:08]--[2024-05-03 Fri 11:33] =>  0:25
CLOCK: [2024-05-03 Fri 10:43]--[2024-05-03 Fri 11:08] =>  0:25
CLOCK: [2024-05-03 Fri 10:18]--[2024-05-03 Fri 10:43] =>  0:25
:END:

- まず影は置いておく
- プレイヤー部分を色塗りできた
- スプライトを表示するにはどうすればいいのだろう

#+caption: https://github.com/kijimaD/ruins/blob/aa3088cfd9b52885ee6c5cd71cc7d2bed8495027/lib/loader/level.go#L358-L367 ワープホールのsprite
#+begin_src go
func createWarpNextEntity(componentList *loader.EntityComponentList, gameSpriteSheet *ec.SpriteSheet, line, col int) {
	componentList.Engine = append(componentList.Engine, loader.EngineComponentList{
		SpriteRender: &ec.SpriteRender{SpriteSheet: gameSpriteSheet, SpriteNumber: warpNextSpriteNumber},
		Transform:    &ec.Transform{},
	})
	componentList.Game = append(componentList.Game, GameComponentList{
		Warp:        &gc.Warp{Mode: gc.WarpModeNext},
		GridElement: &gc.GridElement{Line: line, Col: col},
	})
}
#+end_src

- スプライトシートは、起動時にtomlがロードされResourceの構造体に入れられる。ステート名をキーにして別々になっている
  - フィールドは "field" に、まとめて入っている
** DONE とりあえずの背景を設定する
CLOSED: [2024-05-06 Mon 01:51]
Menuをなくしたとき、非表示にしてた。戻す。
** DONE 壁を通過できないようにする
CLOSED: [2024-05-05 Sun 17:01]
:PROPERTIES:
:Effort:   5:00
:END:
:LOGBOOK:
CLOCK: [2024-05-05 Sun 16:33]--[2024-05-05 Sun 16:58] =>  0:25
CLOCK: [2024-05-05 Sun 16:06]--[2024-05-05 Sun 16:31] =>  0:25
CLOCK: [2024-05-05 Sun 11:31]--[2024-05-05 Sun 11:56] =>  0:25
CLOCK: [2024-05-03 Fri 01:22]--[2024-05-03 Fri 01:47] =>  0:25
CLOCK: [2024-05-03 Fri 00:43]--[2024-05-03 Fri 01:08] =>  0:25
CLOCK: [2024-05-02 Thu 23:22]--[2024-05-02 Thu 23:47] =>  0:25
CLOCK: [2024-05-02 Thu 22:54]--[2024-05-02 Thu 23:19] =>  0:25
CLOCK: [2024-05-02 Thu 22:29]--[2024-05-02 Thu 22:54] =>  0:25
CLOCK: [2024-05-02 Thu 21:47]--[2024-05-02 Thu 22:12] =>  0:25
CLOCK: [2024-05-02 Thu 21:17]--[2024-05-02 Thu 21:42] =>  0:25
CLOCK: [2024-05-02 Thu 20:49]--[2024-05-02 Thu 21:14] =>  0:25
CLOCK: [2024-05-02 Thu 01:01]--[2024-05-02 Thu 01:26] =>  0:25
CLOCK: [2024-05-02 Thu 00:32]--[2024-05-02 Thu 00:57] =>  0:25
:END:
- rectの中に入れないようにする。
- 線として持っておく必要はなくて、点4つだけを持っていればいい
- ただそれだとステージの壁を自動生成しづらくなるのだが...
- 範囲内のオブジェクトに対して衝突判定する
- すべてのフィールド上オブジェクトは、中心のx, yをもつ。その中心と合わせてスプライトを配置し、4つの点を衝突判定に使う
  - この方式はキャラクターや敵、飾りオブジェクトには良いが、壁を配置するときには不適当だ。1点ではなくて、4点を指定したいだろう
  - ピクセル単位で配置できなくてもよくて、50ピクセルごととかでよさそう。こうするとテキストファイルでマップを作成できる。壁は50ピクセル正方形で囲って表現する
  - オブジェクト数が大変なことになりそうな懸念。視界をもつキャラごとにあるわけで。とはいえ、視界を限ればそんなでもなさそうな気も。オブジェクト数は多くなるが、そういうもんだろう。
  - 2次元配列の問題に落とし込めることは重要に見える
  - 壁は近傍8タイルで座標を変化させればいい。縦に並んでいれば横は細くするみたいな

#+begin_src
  spawnWall(1, 1) // (1, 1)に壁を生成
  spawnPlayer(2, 2)
  spawnObject("岩", 20, 20)
  spawnObject("花", 30, 30)
  spawnWarp(40, 50)
#+end_src

#+begin_src
  ############
  #          #
  #          #
  /          #
  ############
#+end_src

- 現状のraycastの構造を、1点だけ保持するように修正しようとしているが、よくわからない
- プレイヤーや壁の描画を先にやればよいのでは。影は一度忘れる
** DONE 壁テクスチャが影で隠れないようにする
CLOSED: [2024-05-06 Mon 10:02]
:PROPERTIES:
:Effort:   2:00
:END:
:LOGBOOK:
CLOCK: [2024-05-06 Mon 01:29]--[2024-05-06 Mon 01:54] =>  0:25
CLOCK: [2024-05-06 Mon 00:50]--[2024-05-06 Mon 01:15] =>  0:25
CLOCK: [2024-05-06 Mon 00:19]--[2024-05-06 Mon 00:44] =>  0:25
CLOCK: [2024-05-05 Sun 23:53]--[2024-05-06 Mon 00:18] =>  0:25
CLOCK: [2024-05-05 Sun 23:22]--[2024-05-05 Sun 23:47] =>  0:25
CLOCK: [2024-05-05 Sun 20:36]--[2024-05-05 Sun 21:01] =>  0:25
CLOCK: [2024-05-05 Sun 20:10]--[2024-05-05 Sun 20:35] =>  0:25
CLOCK: [2024-05-05 Sun 19:45]--[2024-05-05 Sun 20:10] =>  0:25
CLOCK: [2024-05-05 Sun 19:20]--[2024-05-05 Sun 19:45] =>  0:25
CLOCK: [2024-05-05 Sun 18:55]--[2024-05-05 Sun 19:20] =>  0:25
CLOCK: [2024-05-05 Sun 18:29]--[2024-05-05 Sun 18:54] =>  0:25
CLOCK: [2024-05-05 Sun 18:04]--[2024-05-05 Sun 18:29] =>  0:25
CLOCK: [2024-05-05 Sun 17:29]--[2024-05-05 Sun 17:54] =>  0:25
CLOCK: [2024-05-05 Sun 17:01]--[2024-05-05 Sun 17:26] =>  0:25
:END:
今は影に隠されている。影側で表示しようとすると、影の中にあるときもテクスチャが表示されてしまって微妙。

- 視界側でブレンドするとよさそう。いやでも、視界に入れば影になっていても見えてしまうのは同じか
- テクスチャ 影 ほかのテクスチャ 影
- テクスチャの描画優先度が距離によって変わればいいのかな。大変そうだ
- rayブレンド時に、スプライトも追加してやればいいかな
- ぐちゃぐちゃになったのでいったんもどす

#+caption: memo(できてない)
#+begin_src go
		// rayが命中しているかで、分岐させないといけない
		// raysのindex 2,3をrectに含んでいれば命中しているということになる
		world.Manager.Join(
			gameComponents.Position,
			gameComponents.SpriteRender,
			gameComponents.BlockView,
		).Visit(ecs.Visit(func(entity ecs.Entity) {
			oPos := gameComponents.Position.Get(entity).(*gc.Position)
			oSprite := gameComponents.SpriteRender.Get(entity).(*ec.SpriteRender)
			spriteWidth := oSprite.SpriteSheet.Sprites[oSprite.SpriteNumber].Width
			spriteHeight := oSprite.SpriteSheet.Sprites[oSprite.SpriteNumber].Height

			if !entity.HasComponent(gameComponents.Player) {
				x1 := float64(oPos.X - spriteWidth/2)
				x2 := float64(oPos.X + spriteWidth/2)
				y1 := float64(oPos.Y - spriteHeight/2)
				y2 := float64(oPos.Y + spriteHeight/2)
				for _, r := range rays {
					// x1 == r.X2
					if (x1 < r.X2 && x2 < r.X2) || (y1 < r.Y2 && y2 < r.Y2) {
						drawRect(shadowImage, blackImage, float32(oPos.X-16), float32(oPos.Y-16), 32, 32, opt)
					}

					// if x1 < r.X2 || x2 == r.X2 || y1 == r.Y2 || y2 == r.Y2 {
					// drawRect(shadowImage, blackImage, float32(oPos.X-16), float32(oPos.Y-16), 32, 32, opt)
					// }
				}
			}
		}))
#+end_src

- rayを飛ばして判定しているところで、エンティティにフラグを立てればよさそう
  - とすると、エンティティ単位でしか影を切り替えられなくなるな。ちょっと見えていてもテクスチャを全部表示するか、全部視界に入れないと表示しなくなる。微妙
- 近づいた影を消せばよさそう
** DONE 旧フィールドまわりを消す
CLOSED: [2024-05-06 Mon 15:46]
:LOGBOOK:
CLOCK: [2024-05-06 Mon 11:24]--[2024-05-06 Mon 11:49] =>  0:25
:END:

- componentsもいらないものがある
- prefabもいらなくなる
- levelまわりうつすのは、新しいものができてからでよさそう。参考になるからな
** DONE state名のフィールドという名前をリネームする
CLOSED: [2024-05-06 Mon 17:08]
:LOGBOOK:
CLOCK: [2024-05-06 Mon 15:46]--[2024-05-06 Mon 16:11] =>  0:25
CLOCK: [2024-05-06 Mon 12:05]--[2024-05-06 Mon 12:30] =>  0:25
:END:
構造体のフィールドとかと同じになるので、あまりよくない命名に思えてきた。dungeonとかだろうか。
** DONE カメラ移動を追加する
CLOSED: [2024-05-08 Wed 00:29]
:LOGBOOK:
CLOCK: [2024-05-08 Wed 00:04]--[2024-05-08 Wed 00:29] =>  0:25
CLOCK: [2024-05-07 Tue 23:39]--[2024-05-08 Wed 00:04] =>  0:25
CLOCK: [2024-05-06 Mon 23:59]--[2024-05-07 Tue 00:24] =>  0:25
CLOCK: [2024-05-06 Mon 22:45]--[2024-05-06 Mon 23:10] =>  0:25
CLOCK: [2024-05-06 Mon 22:12]--[2024-05-06 Mon 22:37] =>  0:25
CLOCK: [2024-05-06 Mon 20:37]--[2024-05-06 Mon 21:02] =>  0:25
CLOCK: [2024-05-06 Mon 20:12]--[2024-05-06 Mon 20:37] =>  0:25
CLOCK: [2024-05-06 Mon 19:38]--[2024-05-06 Mon 20:03] =>  0:25
CLOCK: [2024-05-06 Mon 19:17]--[2024-05-06 Mon 19:18] =>  0:01
:END:
後からやると大変そうなので今のうちにやっておく。

- 置物はgrid elementにしたほうが楽そうな感じがしてきた。いちいち座標で持っているのが扱いにくい。また別の問題は起きそうだが...
- グリッドの方が生成もしやすいしな
- でもグリッドだと、グリッドごとでしか配置できない。壁とかはそれでいいが、プレイヤーや敵はそうではない。描画で2つ必要になるのは微妙そうな
- カメラはコンポーネント化したほうがいいのだろうか。リソースでよさそうな感じもするが
  - 1つしかない想定なのでコンポーネント化はおおげさな感じ
  - 頻繁に変わる値だが、リソースだと不適当な感じ
  - Playerと同一でよさそうな。いやでも今たまたま同じというだけで、効果によっては変えたいこともありそう。カメラを自分以外に動かしたいこともあるだろ。分けたほうがよさそう
  - ズーム率とかも持ちたいから、そこは別にしたい
- cameraはutilsでなくresourcesにあるべきなのでは
** DONE ズームを追加する
CLOSED: [2024-05-08 Wed 18:09]
:PROPERTIES:
:Effort:   1:00
:END:
:LOGBOOK:
CLOCK: [2024-05-08 Wed 00:29]--[2024-05-08 Wed 00:54] =>  0:25
:END:
追加する。
** DONE 方向を追加する
CLOSED: [2024-05-09 Thu 00:36]
:LOGBOOK:
CLOCK: [2024-05-08 Wed 23:01]--[2024-05-08 Wed 23:26] =>  0:25
CLOCK: [2024-05-08 Wed 22:30]--[2024-05-08 Wed 22:55] =>  0:25
CLOCK: [2024-05-08 Wed 21:39]--[2024-05-08 Wed 22:04] =>  0:25
CLOCK: [2024-05-08 Wed 21:06]--[2024-05-08 Wed 21:31] =>  0:25
CLOCK: [2024-05-08 Wed 20:19]--[2024-05-08 Wed 20:44] =>  0:25
CLOCK: [2024-05-08 Wed 18:09]--[2024-05-08 Wed 18:34] =>  0:25
:END:

追加する。

- 方向による回転描画
- 方向転換
** DONE 描画の優先順を指定できるようにする
CLOSED: [2024-05-11 Sat 17:43]
:LOGBOOK:
CLOCK: [2024-05-11 Sat 17:11]--[2024-05-11 Sat 17:36] =>  0:25
CLOCK: [2024-05-11 Sat 16:46]--[2024-05-11 Sat 17:11] =>  0:25
CLOCK: [2024-05-09 Thu 00:37]--[2024-05-09 Thu 01:02] =>  0:25
CLOCK: [2024-05-06 Mon 10:32]--[2024-05-06 Mon 10:57] =>  0:25
:END:
ワープパッドとキャラでは、キャラを上に表示する。

- キャラクター
  - キャラクター同士は重ならない
- ワープパッド
  - 同士は重ならない
- フィールドのアイテム
  - 同士は重ならない
- これは、SpriteRenderに設定してよさそうか。タイルの種別ごとに設定できれば問題ないよな
- SpriteRenderはengineにあるので、移動させてからいじるか...
- Positionに置くのもよさそう。描画の優先順位なので、単なる描画に使う要素なのだが、まあいいのかな
- depthはあまり種類は多くない。重なる組み合わせは少ない
** DONE フィードバックをもらうためにどうするか
CLOSED: [2024-05-11 Sat 17:43]
いったん最低限で完成させて、フィードバックをもらうのを優先する。
** DONE 視界範囲外を描画しない
CLOSED: [2024-05-16 Thu 21:30]

カメラ外も描画して重くなっている。と考えて描画しないようにしたら、逆に重くなった。キャッシュされているのだろうか。まだ別に必要ではなさそうなので、必要なときにやる。
** DONE 階層を追加する
CLOSED: [2024-05-16 Thu 01:01]
:LOGBOOK:
CLOCK: [2024-05-16 Thu 00:43]--[2024-05-16 Thu 01:01] =>  0:18
CLOCK: [2024-05-15 Wed 22:38]--[2024-05-15 Wed 23:03] =>  0:25
CLOCK: [2024-05-12 Sun 10:23]--[2024-05-12 Sun 10:48] =>  0:25
CLOCK: [2024-05-12 Sun 09:47]--[2024-05-12 Sun 10:12] =>  0:25
CLOCK: [2024-05-11 Sat 23:06]--[2024-05-11 Sat 23:31] =>  0:25
CLOCK: [2024-05-11 Sat 22:36]--[2024-05-11 Sat 23:01] =>  0:25
CLOCK: [2024-05-11 Sat 22:08]--[2024-05-11 Sat 22:33] =>  0:25
CLOCK: [2024-05-06 Mon 17:53]--[2024-05-06 Mon 18:18] =>  0:25
CLOCK: [2024-05-06 Mon 17:09]--[2024-05-06 Mon 17:34] =>  0:25
:END:
ステージの初期化と、階層移動できるようにする。

- 現状はフロアの概念がない。ステートに入ったときに1フロア分初期化してるだけ
- https://ebitengine.org/ja/examples/isometric.html が参考になりそう
- 階を移動するごとにフロアを生成する
- 今の仕組みだと、オブジェクトが莫大な数になる
  - 影描画はしなくてよさそう
  - 見えてる部分のオブジェクトとタイルにフラグをもたせて、そこだけ表示すればいい
  - 衝突判定が多いのは同じなのでは
  - 衝突判定範囲を限れば、そう問題にはならないか
- マップ構造物がオブジェクトだと、マップ生成がしにくい
- 絵の描画と、座標がどのタイルにあたるかがわかればいい。わざわざオブジェクトにしなくてもいい
- 視界の衝突判定はどうするか
  - diggerではfield_of_viewという便利関数があった
- 壁はオブジェクトではなく、タイルにする。変わることはないのと、数が多くて大変だから
  - タイルも、見えてる部分しか描画しない
- 現状は、見える部分をすべてポリゴンで表示する必要がある。このポリゴンを作るために、周囲を囲ってrayが命中しなければならない

#+begin_src
##############
###        @ #
###o ##      #
##############
#+end_src
** DONE タイル位置と座標位置の変換が煩雑
CLOSED: [2024-05-16 Thu 21:29]
:LOGBOOK:
CLOCK: [2024-05-16 Thu 21:01]--[2024-05-16 Thu 21:26] =>  0:25
CLOCK: [2024-05-16 Thu 20:13]--[2024-05-16 Thu 20:38] =>  0:25
CLOCK: [2024-05-16 Thu 19:48]--[2024-05-16 Thu 20:13] =>  0:25
CLOCK: [2024-05-16 Thu 19:22]--[2024-05-16 Thu 19:47] =>  0:25
CLOCK: [2024-05-16 Thu 18:51]--[2024-05-16 Thu 19:16] =>  0:25
:END:
これが全部コンポーネントであれば楽なのだが。まあ、タイルだと衝突判定とかは楽になるから...。

- タイルコンポーネントにするのはありか
- タイルに沿わせたいものと、そうでないものがある
- 壁とかワープホールはタイルに沿わせたい
- 移動体はタイルに沿わせたくない
- 配置方法は共通化したい
- 衝突判定は別でよさそう。タイルに沿わないのは計算が多く必要で、タイルに沿うのは計算が簡単
- resources と GridElement の使い分けがわからない。どちらもタイルを保持しているように見える
  - resourcesのほうはタイルの幅と高さか
** DONE levelを消す
CLOSED: [2024-05-16 Thu 21:31]
普通のgameComponent(engineではないほう)でlevelを実装してから、消す感じでいいか。参考になりそうだから消してない。
** DONE レイキャスト範囲を狭くする
CLOSED: [2024-05-16 Thu 21:32]
今後オブジェクトを増やすたびに重くなるので。

ある程度狭い範囲に、範囲を制限する矩形を置くようにした。

- NPCを追加したときに、競合しないか。つまりほかの視界をもつオブジェクトとの兼ね合いをどうするかの問題はある
  - それぞれのエンティティごとに競合しない形であれば、よさそうか
** DONE 階層設計
CLOSED: [2024-05-16 Thu 21:32]
:LOGBOOK:
CLOCK: [2024-05-01 Wed 22:47]--[2024-05-01 Wed 23:12] =>  0:25
CLOCK: [2024-05-01 Wed 22:18]--[2024-05-01 Wed 22:43] =>  0:25
CLOCK: [2024-05-01 Wed 21:53]--[2024-05-01 Wed 22:18] =>  0:25
:END:

ランダムだと難しそうなのでとりあえずは手動か。

どうやって内外を判定すればいいのだろう。
** DONE タイルを追加する
CLOSED: [2024-05-16 Thu 22:02]
:PROPERTIES:
:Effort:   8:00
:END:
:LOGBOOK:
CLOCK: [2024-05-15 Wed 21:06]--[2024-05-15 Wed 21:31] =>  0:25
CLOCK: [2024-05-15 Wed 00:49]--[2024-05-15 Wed 01:14] =>  0:25
CLOCK: [2024-05-14 Tue 00:33]--[2024-05-14 Tue 00:58] =>  0:25
CLOCK: [2024-05-13 Mon 23:07]--[2024-05-13 Mon 23:32] =>  0:25
CLOCK: [2024-05-13 Mon 22:21]--[2024-05-13 Mon 22:46] =>  0:25
CLOCK: [2024-05-12 Sun 23:48]--[2024-05-13 Mon 00:13] =>  0:25
CLOCK: [2024-05-12 Sun 16:46]--[2024-05-12 Sun 17:12] =>  0:26
CLOCK: [2024-05-12 Sun 16:09]--[2024-05-12 Sun 16:34] =>  0:25
CLOCK: [2024-05-12 Sun 15:34]--[2024-05-12 Sun 15:59] =>  0:25
:END:
- まだタイルがない。壁はタイルにしたい
- タイルで視界判定をするには
- タイルは、正方形に沿うもの。オブジェクトは沿わないもの
  - 今はオブジェクトだけで、タイルベースでなく扱いにくい。タイルは大量に生成するものなので
- タイル保持の方法をどうするか。メリットデメリットがあまりよくわからない
  - ban-ban-don
  - digger
  - sokoban
- いったんdigger方式でやるか。生成とかしやすそうだし
- 影はややこしいので、とりあえず忘れる
** CLOSE engine コンポーネントを移す
CLOSED: [2024-05-16 Thu 22:03]
:LOGBOOK:
CLOCK: [2024-05-06 Mon 10:57]--[2024-05-06 Mon 11:22] =>  0:25
:END:

分かれてるのがやりづらい。分け方が利用側からすると不明瞭。ただloaderまわりが大変そう。

- うむむ、共通のものはengine部分にあったほうがよい感じもしてきた
- 依存しないためにinterfaceになるが
- SpriteSheet componentsは移せない。engineのResourceで定義されているから。依存してしまう
  - resourceごと移動するか...
** CLOSE いったんクリアできるようにする
CLOSED: [2024-05-16 Thu 22:03]
戦闘抜きで、全体を作る。

- ステージ移動
  - ステージは手動で作っておき、それをランダムに選ぶ
  - 将来的に複数のステージ生成手法から選べるようにしておく
- クリアイベント
  - 20階でクリアできるようにする(仮)
- 戦闘を作成する
- エンカウントする
** CLOSE キャラクタを生成する
CLOSED: [2024-05-16 Thu 22:04]
味方/敵を生成する。
** CLOSE 階の生成方法を考える
CLOSED: [2024-05-16 Thu 22:04]
:LOGBOOK:
CLOCK: [2023-12-03 Sun 12:52]--[2023-12-03 Sun 13:17] =>  0:25
:END:

- ランダム選択の一般階層
  - ダンジョンによって選ばれやすさに偏りがある
  - 5の倍数の場合は帰還ワープも出す
  - すべてのマップに帰還ワープを設定しておく
- ボスの階層
  - 特殊マップ
  - 固定
** DONE 書き換え
CLOSED: [2024-05-18 Sat 10:19]
~gameComponents != nil~ で検索して、HasComponentで書き換える。
** DONE 階層移動できるようにする
CLOSED: [2024-05-18 Sat 17:37]
:PROPERTIES:
:Effort:   4:00
:END:
:LOGBOOK:
CLOCK: [2024-05-18 Sat 17:10]--[2024-05-18 Sat 17:35] =>  0:25
CLOCK: [2024-05-18 Sat 16:16]--[2024-05-18 Sat 16:41] =>  0:25
CLOCK: [2024-05-18 Sat 15:35]--[2024-05-18 Sat 16:00] =>  0:25
CLOCK: [2024-05-18 Sat 15:10]--[2024-05-18 Sat 15:35] =>  0:25
CLOCK: [2024-05-18 Sat 14:40]--[2024-05-18 Sat 15:05] =>  0:25
CLOCK: [2024-05-18 Sat 13:31]--[2024-05-18 Sat 13:56] =>  0:25
CLOCK: [2024-05-18 Sat 13:04]--[2024-05-18 Sat 13:29] =>  0:25
CLOCK: [2024-05-18 Sat 12:24]--[2024-05-18 Sat 12:49] =>  0:25
CLOCK: [2024-05-18 Sat 11:52]--[2024-05-18 Sat 12:17] =>  0:25
CLOCK: [2024-05-18 Sat 11:13]--[2024-05-18 Sat 11:38] =>  0:25
CLOCK: [2024-05-18 Sat 10:48]--[2024-05-18 Sat 11:13] =>  0:25
CLOCK: [2024-05-18 Sat 10:23]--[2024-05-18 Sat 10:48] =>  0:25
CLOCK: [2024-05-18 Sat 09:57]--[2024-05-18 Sat 10:22] =>  0:25
CLOCK: [2024-05-17 Fri 00:30]--[2024-05-17 Fri 00:55] =>  0:25
CLOCK: [2024-05-17 Fri 00:05]--[2024-05-17 Fri 00:30] =>  0:25
CLOCK: [2024-05-16 Thu 22:54]--[2024-05-16 Thu 23:19] =>  0:25
CLOCK: [2024-05-16 Thu 22:28]--[2024-05-16 Thu 22:53] =>  0:25
CLOCK: [2024-05-06 Mon 10:06]--[2024-05-06 Mon 10:31] =>  0:25
:END:
- 触れた判定できるようにする
- 触れたときにイベントを発火する
  - とりあえずタイル。どのタイルにいるか取得する
  - オブジェクトでイベントが発生する場合もある(エンカウント)

#+begin_src git-permalink
https://github.com/kijimaD/ruins/blob/c633001385e79d4ecb783f7fd89ba306730fc3c4/lib/resources/move.go#L70-L74
#+end_src

#+RESULTS:
#+begin_src
		if oneFrontTile.Contains(TileWarpEscape) {
			gameResources := world.Resources.Game.(*Game)
			gameResources.StateEvent = StateEventWarpEscape
			return
		}
#+end_src

field stateの Updateにて。

#+begin_src git-permalink
https://github.com/kijimaD/ruins/blob/c633001385e79d4ecb783f7fd89ba306730fc3c4/lib/states/field.go#L45-L50
#+end_src

#+RESULTS:
#+begin_src
	gameResources := world.Resources.Game.(*resources.Game)
	switch gameResources.StateEvent {
	case resources.StateEventWarpEscape:
		gameResources.StateEvent = resources.StateEventNone
		return states.Transition{Type: states.TransSwitch, NewStates: []states.State{&MainMenuState{}}}
	}
#+end_src

- ワープタイルが表示されない
  - 座標を正しく指定してなかった。タイル座標を指定する
- Componentに保存するだけだと、1つだけその座標のタイルを取れない。全部ループして探す必要がある
- Tileは複数階層が存在しうるので、タイル座標だけでは一意に定まるわけではない

#+begin_src git-permalink
https://github.com/x-hgg-x/sokoban-go/blob/e9d204aeebe393d730fb4bdcb060d249f1470485/lib/resources/game.go#L157
#+end_src

#+RESULTS:
#+begin_src
	grid, levelComponentList := utils.Try2(gloader.LoadLevel(gameResources.Package, levelNum, gridLayout.Width, gridLayout.Height, &gameSpriteSheet))
#+end_src

- gridスライスとコンポーネントを返している。gridはResourceに加えられる
- GridElementのままだと、座標で1つだけ取り出して、ということがしづらい。全体にクエリをかけなければいけない。あらかじめスライスで座標順に並んでいれば、一発で取れるのに
- 階層を生成するときに、Resourceに保存しておけばよさそう

#+begin_src shell
  ####
  #..#
  ....
#+end_src

#+caption: gridの初期化
#+begin_src git-permalink
https://github.com/x-hgg-x/sokoban-go/blob/e9d204aeebe393d730fb4bdcb060d249f1470485/lib/loader/level.go#L315
#+end_src

#+RESULTS:
#+begin_src
	gameGrid := utils.Try(gutils.NewVec2d(gridHeight, gridWidth, tiles))
#+end_src

- ComponentとResourceの2重管理にならないか
  - 2つあっても、初回に生成するだけなら問題ない
  - タイル判定必要なのだろうか
  - ワープパッドはタイルに沿うので、判定のために必要
  - タイルの状態が変わった場合はどうするか。ドアとか、罠とか、スイッチとかはタイルだろうが、状態がある
  - 状態によってスプライトを切り替え、複数回起動しないようにする必要がある。このへんはコンポーネントがやりやすい
- Component: 全ループする処理用。描画とか
- Resource: 位置を指定して特定のタイルを処理する用。現在タイルの確認とか
- タイルが情報を持たないのが原因なのでは。entityを入れればよいのでは

階層移動したとき、ワープホールが消えない。

- 既存のワープホールが消えない
- 新しいワープホールに乗っても機能しない
  - 描画はされている
  - 生成時、座標の縦と横を逆にしていた
** DONE 階数をどこに保持するか
CLOSED: [2024-05-18 Sat 21:57]
:LOGBOOK:
CLOCK: [2024-05-18 Sat 21:31]--[2024-05-18 Sat 21:56] =>  0:25
CLOCK: [2024-05-18 Sat 21:01]--[2024-05-18 Sat 21:26] =>  0:25
CLOCK: [2024-05-18 Sat 18:03]--[2024-05-18 Sat 18:28] =>  0:25
CLOCK: [2024-05-18 Sat 17:37]--[2024-05-18 Sat 18:02] =>  0:25
:END:
- 階層移動したときに、階数までリセットされてしまう
- 便利なのでResourceに保存しておきたい
- いつ階数を初期化するか
  - 現状はstateのonstartで実行してるが、これだと移動したときに毎回リセットがかかる
** DONE WASMローディング表示がほしい
CLOSED: [2024-05-19 Sun 22:31]
:LOGBOOK:
CLOCK: [2024-05-19 Sun 21:51]--[2024-05-19 Sun 22:16] =>  0:25
:END:
3秒くらい真っ白画面になるのがよくない。
** DONE ランダムに部屋を生成する
CLOSED: [2024-05-19 Sun 20:31]
:PROPERTIES:
:Effort:   6:00
:END:
:LOGBOOK:
CLOCK: [2024-05-19 Sun 17:56]--[2024-05-19 Sun 18:21] =>  0:25
CLOCK: [2024-05-19 Sun 17:24]--[2024-05-19 Sun 17:49] =>  0:25
CLOCK: [2024-05-19 Sun 16:54]--[2024-05-19 Sun 17:19] =>  0:25
CLOCK: [2024-05-19 Sun 14:50]--[2024-05-19 Sun 15:15] =>  0:25
CLOCK: [2024-05-19 Sun 14:25]--[2024-05-19 Sun 14:50] =>  0:25
CLOCK: [2024-05-19 Sun 12:50]--[2024-05-19 Sun 13:15] =>  0:25
CLOCK: [2024-05-19 Sun 12:24]--[2024-05-19 Sun 12:49] =>  0:25
:END:
#+begin_src git-permalink
https://github.com/kijimaD/digger_rs/blob/5804eb99182f3f21b733a7d0d0e34ca610b286c6/src/rect.rs#L4-L9
#+end_src

#+RESULTS:
#+begin_src
pub struct Rect {
    pub x1: i32,
    pub x2: i32,
    pub y1: i32,
    pub y2: i32,
}
#+end_src

#+begin_src git-permalink
https://github.com/x-hgg-x/sokoban-go/blob/e9d204aeebe393d730fb4bdcb060d249f1470485/lib/utils/vec2d.go#L5-L9
#+end_src

#+RESULTS:
#+begin_src
type Vec2d[T any] struct {
	NRows int
	NCols int
	Data  []T
}
#+end_src

#+begin_src git-permalink
https://github.com/kijimaD/digger_rs/blob/5804eb99182f3f21b733a7d0d0e34ca610b286c6/src/map/mod.rs#L14-L26
#+end_src

#+RESULTS:
#+begin_src
pub struct Map {
    pub tiles: Vec<TileType>,
    pub width: i32,
    pub height: i32,
    pub revealed_tiles: Vec<bool>,
    pub visible_tiles: Vec<bool>,
    pub depth: i32,
    pub bloodstains: HashSet<usize>,
    pub view_blocked: HashSet<usize>,
    pub name: String,
    pub outdoors: bool,
    pub light: Vec<rltk::RGB>,
}
#+end_src

#+begin_src git-permalink
https://github.com/kijimaD/digger_rs/blob/5804eb99182f3f21b733a7d0d0e34ca610b286c6/src/map_builders/mod.rs#L66-L75
#+end_src

#+RESULTS:
#+begin_src
pub struct BuilderMap {
    pub spawn_list: Vec<(usize, String)>,
    pub map: Map,
    pub starting_position: Option<Position>,
    pub rooms: Option<Vec<Rect>>,
    pub corridors: Option<Vec<Vec<usize>>>,
    pub history: Vec<Map>,
    pub width: i32,
    pub height: i32,
}
#+end_src

- マップ生成時はタイルのスライスを保持する。したがってマップ生成は単にスライスをいじくる処理となる
- 生成したタイルマップは、配置するときエンティティ化する
  - 例: 壁タイルは BlockPass, SpriteRender, GridElement コンポーネントを持つEntityとなる

#+begin_src git-permalink
https://github.com/kijimaD/digger_rs/blob/5804eb99182f3f21b733a7d0d0e34ca610b286c6/src/map_builders/mod.rs#L89-L93
#+end_src

#+RESULTS:
#+begin_src
pub struct BuilderChain {
    starter: Option<Box<dyn InitialMapBuilder>>,
    builders: Vec<Box<dyn MetaMapBuilder>>,
    pub build_data: BuilderMap,
}
#+end_src

- tileをエンティティ化しなくてもいいような気もしてきた
- tileとして、まとめて判定したいのか、〜の性質、で部分で判定したいのかとちらか。タイル判定だとわかりにくいと感じるけどな
** DONE 生成を部屋化する
CLOSED: [2024-05-29 Wed 00:11]
:PROPERTIES:
:Effort:   5:00
:END:
:LOGBOOK:
CLOCK: [2024-05-28 Tue 21:26]--[2024-05-28 Tue 21:51] =>  0:25
CLOCK: [2024-05-28 Tue 20:41]--[2024-05-28 Tue 21:06] =>  0:25
CLOCK: [2024-05-28 Tue 20:05]--[2024-05-28 Tue 20:30] =>  0:25
CLOCK: [2024-05-28 Tue 00:30]--[2024-05-28 Tue 00:56] =>  0:26
CLOCK: [2024-05-27 Mon 22:38]--[2024-05-27 Mon 23:03] =>  0:25
CLOCK: [2024-05-22 Wed 22:42]--[2024-05-22 Wed 23:07] =>  0:25
CLOCK: [2024-05-22 Wed 00:22]--[2024-05-22 Wed 00:47] =>  0:25
CLOCK: [2024-05-21 Tue 23:05]--[2024-05-21 Tue 23:30] =>  0:25
CLOCK: [2024-05-21 Tue 22:29]--[2024-05-21 Tue 22:54] =>  0:25
CLOCK: [2024-05-21 Tue 22:04]--[2024-05-21 Tue 22:29] =>  0:25
CLOCK: [2024-05-21 Tue 21:38]--[2024-05-21 Tue 22:03] =>  0:25
CLOCK: [2024-05-21 Tue 08:29]--[2024-05-21 Tue 08:54] =>  0:25
CLOCK: [2024-05-21 Tue 08:04]--[2024-05-21 Tue 08:29] =>  0:25
CLOCK: [2024-05-21 Tue 00:32]--[2024-05-21 Tue 00:57] =>  0:25
CLOCK: [2024-05-20 Mon 23:48]--[2024-05-21 Tue 00:13] =>  0:25
CLOCK: [2024-05-20 Mon 22:59]--[2024-05-20 Mon 23:24] =>  0:25
CLOCK: [2024-05-20 Mon 22:34]--[2024-05-20 Mon 22:59] =>  0:25
CLOCK: [2024-05-20 Mon 22:08]--[2024-05-20 Mon 22:33] =>  0:25
CLOCK: [2024-05-20 Mon 21:02]--[2024-05-20 Mon 21:27] =>  0:25
CLOCK: [2024-05-20 Mon 19:27]--[2024-05-20 Mon 19:52] =>  0:25
CLOCK: [2024-05-20 Mon 19:02]--[2024-05-20 Mon 19:27] =>  0:25
CLOCK: [2024-05-20 Mon 00:09]--[2024-05-20 Mon 00:34] =>  0:25
CLOCK: [2024-05-19 Sun 22:31]--[2024-05-19 Sun 22:56] =>  0:25
CLOCK: [2024-05-19 Sun 21:26]--[2024-05-19 Sun 21:51] =>  0:25
CLOCK: [2024-05-19 Sun 20:59]--[2024-05-19 Sun 21:24] =>  0:25
CLOCK: [2024-05-19 Sun 20:31]--[2024-05-19 Sun 20:57] =>  0:26
:END:

廊下、道に分けて作る。

- 参考実装がどういう流れで使っているかよくわからないな

#+caption: level_builderで階層によって使うbuilderを決めている
#+begin_src git-permalink
https://github.com/kijimaD/digger_rs/blob/5804eb99182f3f21b733a7d0d0e34ca610b286c6/src/map_builders/mod.rs#L290
#+end_src

#+RESULTS:
#+begin_src go
pub fn level_builder(
#+end_src

#+caption: 決定したbuilderを呼び出している箇所
#+begin_src git-permalink
https://github.com/kijimaD/digger_rs/blob/5804eb99182f3f21b733a7d0d0e34ca610b286c6/src/map/dungeon.rs#L33-L36
#+end_src

#+RESULTS:
#+begin_src go
fn transition_to_new_map(ecs: &mut World, new_depth: i32) -> Vec<Map> {
    let mut rng = ecs.write_resource::<rltk::RandomNumberGenerator>();
    let mut builder = level_builder(new_depth, &mut rng, 80, 50);
    builder.build_map(&mut rng);
#+end_src

- rooms とか corridor をどうやってタイルにしているか

#+caption: draw系でやっている
#+begin_src git-permalink
https://github.com/kijimaD/digger_rs/blob/5804eb99182f3f21b733a7d0d0e34ca610b286c6/src/map_builders/common.rs#L105
#+end_src

#+RESULTS:
#+begin_src
pub fn draw_corridor(map: &mut Map, x1: i32, y1: i32, x2: i32, y2: i32) -> Vec<usize> {
#+end_src

- ↑引数のmapのtileを変更しつつ、corridor(tile indexのスライス)を返す
- NewLevel を消して、 builderに置き換えればいいのかな

#+caption: 部屋ビルダー
#+begin_src git-permalink
https://github.com/kijimaD/digger_rs/blob/5804eb99182f3f21b733a7d0d0e34ca610b286c6/src/map_builders/room_draw.rs#L11
#+end_src

#+RESULTS:
#+begin_src
impl RoomDrawer {
#+end_src

- 廊下がけっこう大変な件
  - 部屋ごとの距離を求めて、最短距離を結ぶ

#+begin_src git-permalink
https://github.com/kijimaD/digger_rs/blob/5804eb99182f3f21b733a7d0d0e34ca610b286c6/src/map_builders/rooms_corridors_lines.rs#L20
#+end_src

#+RESULTS:
#+begin_src
    fn corridors(&mut self, _rng: &mut RandomNumberGenerator, build_data: &mut BuilderMap) {
#+end_src
** DONE 廊下を追加する
CLOSED: [2024-05-30 Thu 00:55]
:PROPERTIES:
:Effort:   5:00
:END:
:LOGBOOK:
CLOCK: [2024-05-29 Wed 21:54]--[2024-05-29 Wed 22:19] =>  0:25
CLOCK: [2024-05-29 Wed 21:21]--[2024-05-29 Wed 21:46] =>  0:25
CLOCK: [2024-05-29 Wed 20:50]--[2024-05-29 Wed 21:15] =>  0:25
:END:

廊下をつなぐ。
** DONE 衝突判定を軽量化する
CLOSED: [2024-06-01 Sat 17:57]
:LOGBOOK:
CLOCK: [2024-05-31 Fri 23:42]--[2024-06-01 Sat 00:07] =>  0:25
CLOCK: [2024-05-30 Thu 22:37]--[2024-05-30 Thu 23:02] =>  0:25
:END:

- 中心距離の近いものだけを接触判定するようにするとよさそう
- フロアを50x50にすると、激しく重くなった
- フロアと接触している壁だけを、影や視線判定の対象にするとよさそう
** DONE 脱出ワープホールを配置する
CLOSED: [2024-06-01 Sat 19:49]
:LOGBOOK:
CLOCK: [2024-06-01 Sat 18:32]--[2024-06-01 Sat 18:57] =>  0:25
CLOCK: [2024-06-01 Sat 17:58]--[2024-06-01 Sat 18:23] =>  0:25
:END:
今は次の階層しかない。
** DONE 壁の影を軽量化する
CLOSED: [2024-06-02 Sun 10:56]
:LOGBOOK:
CLOCK: [2024-06-02 Sun 01:16]--[2024-06-02 Sun 01:41] =>  0:25
:END:
先に影画像を生成しておいて、軽くする。
** DONE シナリオジャンプを実装する
CLOSED: [2024-09-26 Thu 08:02]
:PROPERTIES:
:Effort:   4:00
:END:
:LOGBOOK:
CLOCK: [2024-09-25 Wed 23:47]--[2024-09-26 Thu 00:12] =>  0:25
CLOCK: [2024-09-25 Wed 22:57]--[2024-09-25 Wed 23:22] =>  0:25
CLOCK: [2024-09-25 Wed 21:42]--[2024-09-25 Wed 22:07] =>  0:25
CLOCK: [2024-09-25 Wed 21:13]--[2024-09-25 Wed 21:38] =>  0:25
CLOCK: [2024-09-25 Wed 20:25]--[2024-09-25 Wed 20:50] =>  0:25
CLOCK: [2024-09-25 Wed 19:22]--[2024-09-25 Wed 19:47] =>  0:25
CLOCK: [2024-09-25 Wed 18:56]--[2024-09-25 Wed 19:21] =>  0:25
CLOCK: [2024-09-25 Wed 18:31]--[2024-09-25 Wed 18:56] =>  0:25
CLOCK: [2024-09-25 Wed 18:06]--[2024-09-25 Wed 18:31] =>  0:25
CLOCK: [2024-09-25 Wed 00:09]--[2024-09-25 Wed 00:34] =>  0:25
CLOCK: [2024-09-24 Tue 23:27]--[2024-09-24 Tue 23:52] =>  0:25
CLOCK: [2024-09-24 Tue 22:05]--[2024-09-24 Tue 22:30] =>  0:25
CLOCK: [2024-09-24 Tue 21:29]--[2024-09-24 Tue 21:54] =>  0:25
CLOCK: [2024-09-24 Tue 20:14]--[2024-09-24 Tue 20:39] =>  0:25
CLOCK: [2024-09-24 Tue 19:34]--[2024-09-24 Tue 19:59] =>  0:25
CLOCK: [2024-09-24 Tue 19:09]--[2024-09-24 Tue 19:34] =>  0:25
CLOCK: [2024-09-24 Tue 18:44]--[2024-09-24 Tue 19:09] =>  0:25
CLOCK: [2024-09-23 Mon 23:06]--[2024-09-23 Mon 23:31] =>  0:25
CLOCK: [2024-09-23 Mon 22:34]--[2024-09-23 Mon 22:59] =>  0:25
CLOCK: [2024-09-23 Mon 21:42]--[2024-09-23 Mon 22:07] =>  0:25
CLOCK: [2024-09-23 Mon 21:10]--[2024-09-23 Mon 21:35] =>  0:25
CLOCK: [2024-09-23 Mon 20:43]--[2024-09-23 Mon 21:08] =>  0:25
CLOCK: [2024-09-23 Mon 19:23]--[2024-09-23 Mon 19:48] =>  0:25
CLOCK: [2024-09-23 Mon 18:48]--[2024-09-23 Mon 19:13] =>  0:25
CLOCK: [2024-09-23 Mon 18:19]--[2024-09-23 Mon 18:44] =>  0:25
CLOCK: [2024-09-23 Mon 17:48]--[2024-09-23 Mon 18:13] =>  0:25
CLOCK: [2024-09-23 Mon 10:58]--[2024-09-23 Mon 11:23] =>  0:25
CLOCK: [2024-09-23 Mon 10:31]--[2024-09-23 Mon 10:56] =>  0:25
CLOCK: [2024-09-23 Mon 10:05]--[2024-09-23 Mon 10:30] =>  0:25
CLOCK: [2024-09-23 Mon 09:39]--[2024-09-23 Mon 10:04] =>  0:25
:END:

[[https://krkrz.github.io/krkr2doc/kag3doc/contents/Tags.html#jump][吉里吉里タグリファレンス]]を調べた。

- ファイルをまたぐ外部ジャンプ
- ファイル内の内部ジャンプ
- ファイルごとでメモリに読み込まれている雰囲気
- 外部ジャンプはとりあえずいらない
  - 外部ジャンプは、ファイルごとで名前空間が切れるとかの理由だろうか。整理されそう
- 関数みたいにパースすればよさそうな

#+begin_src
; ラベル定義
*extraflagend

; ジャンプ
[jump target=*sel02_loop]
#+end_src

#+begin_src
*label1
...
...
*label2
...
...
#+end_src

- ラベル1
  - 文字列
  - コマンド
  - 文字列
  - 文字列
- ラベル2
  - 文字列
  - コマンド
  - コマンド
  - 文字列

的な構造となる。

- ラベル
  - 文1
  - 文2

ラベルテーブルに登録する。

#+begin_src
*start
開始
[jmp dest="sample1"]
*sample1
終了
*sample2
#+end_src

- 一連のイベントが終了したらどうなるんだ。とりあえず今のように止まるでよい
- jmpしたあとは戻ってこないものとする
- ほかのステートとの連携とか考えると全然わからない。いったん忘れる
- サンプルでは、関数名の登録とかどうやっているか
  - ~変数 = fn(){}~ 形式だから、変数と同じ仕組みになっている
  - evalはオブジェクトを返す。オブジェクトは即値を返すメソッドを持っていて、計算もしくは表示に使える
- 先にlabel名を登録する必要があるような
  - jumpEvent{dest: "aaa"}
  - いや、別にやらなくてもいいのか。イベント実行時に解釈すればいい
- 投入した時点で、イベントオブジェクトが一意に定まる
  - label1: ...
  - label2: ...
  - label3: ...
  - 内部jumpだけでなく、どこから開始する、という命令も使える
  - start("label1")
  - 選択肢が実装できると、メニューも実装できるのか
- 通常のコードは、1つの値を返す。途中のコードはすべて評価される
- ノベルエンジンは、評価はない。途中も必要である

一連の流れ。

#+begin_src
  p := parse()
  e := Eval(p)
  events1 := e("sample1")
  events2 := e("sample2")
#+end_src
** DONE 改行とか直す
CLOSED: [2024-09-26 Thu 21:10]
:LOGBOOK:
CLOCK: [2024-09-26 Thu 19:33]--[2024-09-26 Thu 19:58] =>  0:25
CLOCK: [2024-09-26 Thu 17:57]--[2024-09-26 Thu 18:22] =>  0:25
:END:

- 現状、改行があるたびに別イベントとなっている。なのでクリックが必要である。これを1つにまとめてしまう
  - どこまでひとまとめとするか
- 見たままが改行となる
- 自動改行があれば問題ないような
- そんなに手動で改行入れたいことないしな

#+begin_src shell
  *start
  ああああ
  いいいい[p]
  かかかか
  きききき[p]
#+end_src

- [l]を実行した待ちにしたいときに、自動改行が無視されて飛び出す。待ったあとは強制改行でよいだろう

** DONE メッセージエンジンのサンプル実装を作る
CLOSED: [2024-09-26 Thu 21:10]
:LOGBOOK:
CLOCK: [2024-09-26 Thu 08:05]--[2024-09-26 Thu 08:30] =>  0:25
:END:
まだGUIで見られないのでよくわからないため。

** DONE メッセージシステムのパッケージを切り出す
CLOSED: [2024-09-26 Thu 21:11]
:LOGBOOK:
CLOCK: [2024-09-22 Sun 23:06]--[2024-09-22 Sun 23:31] =>  0:25
CLOCK: [2024-09-22 Sun 22:07]--[2024-09-22 Sun 22:32] =>  0:25
CLOCK: [2024-09-22 Sun 21:38]--[2024-09-22 Sun 22:03] =>  0:25
CLOCK: [2024-09-22 Sun 21:07]--[2024-09-22 Sun 21:32] =>  0:25
CLOCK: [2024-09-22 Sun 20:19]--[2024-09-22 Sun 20:44] =>  0:25
CLOCK: [2024-09-22 Sun 19:44]--[2024-09-22 Sun 20:09] =>  0:25
CLOCK: [2024-09-22 Sun 19:06]--[2024-09-22 Sun 19:31] =>  0:25
CLOCK: [2024-09-22 Sun 18:36]--[2024-09-22 Sun 19:01] =>  0:25
CLOCK: [2024-09-22 Sun 17:20]--[2024-09-22 Sun 17:45] =>  0:25
CLOCK: [2024-09-22 Sun 16:43]--[2024-09-22 Sun 17:08] =>  0:25
CLOCK: [2024-09-22 Sun 16:17]--[2024-09-22 Sun 16:42] =>  0:25
CLOCK: [2024-09-22 Sun 15:52]--[2024-09-22 Sun 16:17] =>  0:25
CLOCK: [2024-09-22 Sun 14:19]--[2024-09-22 Sun 14:44] =>  0:25
CLOCK: [2024-09-22 Sun 13:50]--[2024-09-22 Sun 14:15] =>  0:25
CLOCK: [2024-09-22 Sun 13:25]--[2024-09-22 Sun 13:50] =>  0:25
CLOCK: [2024-09-22 Sun 11:45]--[2024-09-22 Sun 12:10] =>  0:25
CLOCK: [2024-09-22 Sun 11:20]--[2024-09-22 Sun 11:45] =>  0:25
CLOCK: [2024-09-22 Sun 10:36]--[2024-09-22 Sun 11:01] =>  0:25
CLOCK: [2024-09-22 Sun 10:11]--[2024-09-22 Sun 10:36] =>  0:25
CLOCK: [2024-09-22 Sun 01:06]--[2024-09-22 Sun 01:31] =>  0:25
CLOCK: [2024-09-22 Sun 00:28]--[2024-09-22 Sun 00:53] =>  0:25
CLOCK: [2024-09-21 Sat 22:13]--[2024-09-21 Sat 22:38] =>  0:25
CLOCK: [2024-09-21 Sat 21:38]--[2024-09-21 Sat 22:03] =>  0:25
CLOCK: [2024-09-21 Sat 21:10]--[2024-09-21 Sat 21:35] =>  0:25
CLOCK: [2024-09-21 Sat 20:43]--[2024-09-21 Sat 21:08] =>  0:25
CLOCK: [2024-09-21 Sat 20:06]--[2024-09-21 Sat 20:31] =>  0:25
CLOCK: [2024-09-21 Sat 19:37]--[2024-09-21 Sat 20:02] =>  0:25
CLOCK: [2024-09-21 Sat 18:08]--[2024-09-21 Sat 18:33] =>  0:25
:END:

今は1パッケージに入っていてわかりにくい。

- テキストを解釈してイベントとし、キューに入れる
- 呼び出し側で解釈してイベントごとに処理していく
- Pop() キューからイベントを取り出す。呼び出し側から実行される。クリック時などを想定
  - イベントを通知する。呼び出し側での処理が必要なものもある
  - animText 現在表示中としたいテキスト。allとbufを持つ。bufはアニメーション用に1文字ずつ入っていく
    - 1文字ずつ送っていくのをどうするか。時間実行だとテストが面倒だからやりたくない。1文字ずつAPIを叩くか、一気に表示するAPIによって文字表示を再現できるようにしたい
    - 1文字ずつループにどうやって割り込めばいいのか。キューにskipフラグを持てばよいか
    - animTextは状態を持つ、ということになる
    - なのでPopしても次のイベントに進まないことがある
  - changeBG <呼び出し側での処理が必要>
  - clickWait クリック待ち
  - sleep <呼び出し側での処理が必要>
- 呼び出し側からエンジンに作用できないといけないのか
  - メッセージスキップとか
- Head()
- Popしたときに先頭のやつを実行するのか
  - キューを食うのが2つあることが混乱の原因になっている。テキストエンジンと呼び出し側
- queue.Pop()
  - 先頭のEventの状態が未完了であればSkip()するだけにする
- queue.Display()
  - 勝手に増えていく
  - 呼び出し側ではメッセージを表示する。メッセージはどのイベントでも常に表示するものだから
- もう1つキューを追加するのはどうだろう
  - 全体バッファと現在バッファがあって、追いつかせるように非同期実行する
- キューの終了もeventとする
- 実行中 -> (強制スキップ) -> 終了 -> 次のタスク
  - テキスト送り中にボタン押すと全部文章が表示されるような感じ
  - スキップ操作など用のキューも別で用意しておくとよさそう
- Pop()とSkip()を状況に合わせて使い分けたい
  - 現在のタスクが終わっていればPop()
  - 現在のタスクが終わってなければSkip()
** DONE クリック待ち状態を表示できるようにする
CLOSED: [2024-09-29 Sun 00:01]
:LOGBOOK:
CLOCK: [2024-09-26 Thu 21:33]--[2024-09-26 Thu 21:58] =>  0:25
:END:
- 待ち
** DONE 戻れるようにする
CLOSED: [2024-09-30 Mon 11:56]
popの逆を辿れるようにしたい。今消しちゃってるのをインデックスにすればよいだろう。

1つ戻るのは、意外に面倒だ。一気に最初に戻るだけにした。
** DONE イベント捕捉
CLOSED: [2024-09-30 Mon 20:45]
:LOGBOOK:
CLOCK: [2024-09-30 Mon 18:46]--[2024-09-30 Mon 19:11] =>  0:25
CLOCK: [2024-09-30 Mon 18:20]--[2024-09-30 Mon 18:45] =>  0:25
:END:

今のところテキストだけで、背景変更などを捕捉できていない。

- テキストまわりのインターフェースはbufでやっている。これによって、呼び出し側はそれを画面に表示すればいいだけになっている
- イベントは、チャネルなどに流すのがよさそうか
** DONE 『坊っちゃん』でサンプルを作る
CLOSED: [2024-10-03 Thu 01:24]
:LOGBOOK:
CLOCK: [2024-10-02 Wed 22:15]--[2024-10-02 Wed 22:40] =>  0:25
CLOCK: [2024-10-02 Wed 21:39]--[2024-10-02 Wed 22:04] =>  0:25
CLOCK: [2024-10-02 Wed 20:22]--[2024-10-02 Wed 20:47] =>  0:25
CLOCK: [2024-10-02 Wed 19:57]--[2024-10-02 Wed 20:22] =>  0:25
CLOCK: [2024-10-02 Wed 19:26]--[2024-10-02 Wed 19:51] =>  0:25
CLOCK: [2024-09-30 Mon 22:33]--[2024-09-30 Mon 22:58] =>  0:25
CLOCK: [2024-09-30 Mon 21:02]--[2024-09-30 Mon 21:27] =>  0:25
:END:

作る。

- 任意の場所での改行ができない

#+begin_src
「おい」
「おい」
「来たぜ」
「とうとう来た」
「これでようやく安心した」

これは1行ずつ表示したい
#+end_src

改行して、次の行に何もないと、自動改行のカウンタがリセットされてないので横に文字が表示されてしまう。

#+begin_src
 あいうえお
 かきくけこ
 たちつてと<なにぬねの>
#+end_src

この場合、「なにぬねの」を改行してほしい。
** DONE シナリオを一覧できるようにする
CLOSED: [2024-10-05 Sat 11:08]
:LOGBOOK:
CLOCK: [2024-10-05 Sat 10:21]--[2024-10-05 Sat 10:46] =>  0:25
CLOCK: [2024-10-05 Sat 09:47]--[2024-10-05 Sat 10:12] =>  0:25
CLOCK: [2024-10-04 Fri 23:59]--[2024-10-05 Sat 00:24] =>  0:25
:END:
- 一覧すれば、ジャンプは簡単にできる
** CLOSE 視覚影でスプライトが隠れているのを直す
CLOSED: [2024-10-05 Sat 22:56]
近くのライトで見られるようにしたが、微妙だ。

- 壁の向こう側が見える
  - 対策のため1マス分だけ照らすようにしたが、変だ
- やはり、直接視界が当たった部分はフラグをもたせて表示するのがよさそう
  - 個別のタイルごとにあるので、新しくコンポーネントを作ったほうがよさそう
  - ~IsHide~ とか
- ここに時間かけてもしょうがないから後回しか
** CLOSE raycastを高速化する
CLOSED: [2024-10-05 Sat 22:56]
- もっとも近い壁を記憶することで、高速化できるという
- https://www.redblobgames.com/articles/visibility/#wall-tracking
** DONE 移動時に画像を回転させる
CLOSED: [2024-10-05 Sat 23:09]
:LOGBOOK:
CLOCK: [2024-10-05 Sat 22:44]--[2024-10-05 Sat 23:09] =>  0:25
CLOCK: [2024-10-05 Sat 22:15]--[2024-10-05 Sat 22:40] =>  0:25
:END:
Angleを設定すればよい。
** DONE カードを装備できるようにする
CLOSED: [2024-10-06 Sun 20:14]
:LOGBOOK:
CLOCK: [2024-10-06 Sun 19:43]--[2024-10-06 Sun 20:09] =>  0:26
CLOCK: [2024-10-06 Sun 18:00]--[2024-10-06 Sun 18:25] =>  0:25
CLOCK: [2024-10-06 Sun 17:30]--[2024-10-06 Sun 17:55] =>  0:25
CLOCK: [2024-10-06 Sun 16:59]--[2024-10-06 Sun 17:24] =>  0:25
CLOCK: [2024-10-06 Sun 16:05]--[2024-10-06 Sun 16:30] =>  0:25
CLOCK: [2024-10-06 Sun 15:36]--[2024-10-06 Sun 16:01] =>  0:25
CLOCK: [2024-10-06 Sun 13:53]--[2024-10-06 Sun 14:18] =>  0:25
CLOCK: [2024-10-06 Sun 13:23]--[2024-10-06 Sun 13:48] =>  0:25
CLOCK: [2024-10-06 Sun 11:18]--[2024-10-06 Sun 11:43] =>  0:25
CLOCK: [2024-10-06 Sun 10:53]--[2024-10-06 Sun 11:18] =>  0:25
CLOCK: [2024-10-06 Sun 10:28]--[2024-10-06 Sun 10:53] =>  0:25
CLOCK: [2024-10-06 Sun 09:18]--[2024-10-06 Sun 09:43] =>  0:25
CLOCK: [2024-10-06 Sun 08:50]--[2024-10-06 Sun 09:15] =>  0:25
:END:

防具だけが対象なのを直す。
** CLOSE リアルタイムなローグライクがよさそう
CLOSED: [2024-10-13 Sun 00:28]
:LOGBOOK:
CLOCK: [2024-04-23 Tue 00:49]--[2024-04-23 Tue 01:14] =>  0:25
:END:
- フィールドは[[https://ebitengine.org/en/examples/raycasting.html][Ray Casting - Ebitengine]]という感じ
- タイルごとにターン制で動くという感じでない。細かく移動できる
- 自分が動いたら時間が進行する
- シンボルエンカウントで、回避する方法がある。煙幕的な
- 電力と燃料がある
  - 電力は短期的なスタミナ。フィールドでダッシュ、煙幕、掘削で減る。有利に進められるが、時間での制限がある
  - 燃料は、腹減り度。電力を使うと早く消費する。なくなるとゲームオーバーになる。移動で減る
** DONE 排反コンポーネントを作る
CLOSED: [2024-10-13 Sun 00:36]
:LOGBOOK:
CLOCK: [2024-10-13 Sun 00:06]--[2024-10-13 Sun 00:31] =>  0:25
CLOCK: [2024-10-12 Sat 22:47]--[2024-10-12 Sat 23:12] =>  0:25
CLOCK: [2024-10-12 Sat 22:12]--[2024-10-12 Sat 22:37] =>  0:25
CLOCK: [2024-10-12 Sat 21:27]--[2024-10-12 Sat 21:52] =>  0:25
CLOCK: [2024-10-12 Sat 21:00]--[2024-10-12 Sat 21:25] =>  0:25
CLOCK: [2024-10-12 Sat 20:34]--[2024-10-12 Sat 21:00] =>  0:26
CLOCK: [2024-10-12 Sat 19:45]--[2024-10-12 Sat 20:10] =>  0:25
CLOCK: [2024-10-12 Sat 16:59]--[2024-10-12 Sat 17:24] =>  0:25
CLOCK: [2024-10-12 Sat 15:37]--[2024-10-12 Sat 16:02] =>  0:25
CLOCK: [2024-10-12 Sat 15:10]--[2024-10-12 Sat 15:35] =>  0:25
CLOCK: [2024-10-12 Sat 14:45]--[2024-10-12 Sat 15:10] =>  0:25
CLOCK: [2024-10-12 Sat 14:00]--[2024-10-12 Sat 14:25] =>  0:25
CLOCK: [2024-10-12 Sat 13:08]--[2024-10-12 Sat 13:33] =>  0:25
CLOCK: [2024-10-12 Sat 12:33]--[2024-10-12 Sat 12:58] =>  0:25
CLOCK: [2024-10-12 Sat 12:08]--[2024-10-12 Sat 12:33] =>  0:25
CLOCK: [2024-10-12 Sat 11:40]--[2024-10-12 Sat 12:05] =>  0:25
CLOCK: [2024-10-12 Sat 11:10]--[2024-10-12 Sat 11:35] =>  0:25
CLOCK: [2024-10-12 Sat 10:32]--[2024-10-12 Sat 10:57] =>  0:25
CLOCK: [2024-10-12 Sat 09:53]--[2024-10-12 Sat 10:18] =>  0:25
CLOCK: [2024-10-12 Sat 09:28]--[2024-10-12 Sat 09:53] =>  0:25
CLOCK: [2024-10-12 Sat 09:03]--[2024-10-12 Sat 09:28] =>  0:25
CLOCK: [2024-10-12 Sat 03:03]--[2024-10-12 Sat 03:28] =>  0:25
:END:
排反を表現する。

Joinのときに指定するのはComponentsで、ecs.NullComponentなどの溜められているデータそのものである。なのでenumにできたりしない。

アイデア。

- エンティティを初期化するときに制約する

#+begin_src go
  world.Manager.Join(
          gameComponents.Name,
          gameComponents.Pools,
          gameComponents.FactionTypeEnemy, // みたいにしたいが、Componentは実際に保持してるデータなのでenumにはできない
  )
#+end_src

- Joinで、gameComponentsを直に渡すのではなく、関数をはさむとか

#+begin_src go
  group(aCompo, bCompo)
#+end_src

- myutilsを消す
** DONE 戦闘追加する
CLOSED: [2024-10-13 Sun 22:54]
:PROPERTIES:
:Effort:   5:00
:END:
:LOGBOOK:
CLOCK: [2024-10-10 Thu 22:08]--[2024-10-10 Thu 22:33] =>  0:25
CLOCK: [2024-10-10 Thu 20:22]--[2024-10-10 Thu 20:47] =>  0:25
CLOCK: [2024-10-10 Thu 19:48]--[2024-10-10 Thu 20:13] =>  0:25
CLOCK: [2024-10-10 Thu 00:31]--[2024-10-10 Thu 00:56] =>  0:25
CLOCK: [2024-10-09 Wed 22:17]--[2024-10-09 Wed 22:43] =>  0:26
CLOCK: [2024-10-09 Wed 21:52]--[2024-10-09 Wed 22:17] =>  0:25
CLOCK: [2024-10-08 Tue 20:29]--[2024-10-08 Tue 20:54] =>  0:25
CLOCK: [2024-10-08 Tue 19:31]--[2024-10-08 Tue 19:56] =>  0:25
CLOCK: [2024-10-08 Tue 18:29]--[2024-10-08 Tue 18:54] =>  0:25
CLOCK: [2024-10-07 Mon 22:31]--[2024-10-07 Mon 22:56] =>  0:25
CLOCK: [2024-10-07 Mon 22:04]--[2024-10-07 Mon 22:29] =>  0:25
CLOCK: [2024-10-07 Mon 20:52]--[2024-10-07 Mon 21:17] =>  0:25
CLOCK: [2024-10-07 Mon 20:14]--[2024-10-07 Mon 20:39] =>  0:25
CLOCK: [2024-10-07 Mon 19:42]--[2024-10-07 Mon 20:07] =>  0:25
CLOCK: [2024-10-07 Mon 19:13]--[2024-10-07 Mon 19:38] =>  0:25
CLOCK: [2024-10-06 Sun 21:49]--[2024-10-06 Sun 22:14] =>  0:25
CLOCK: [2024-10-06 Sun 21:24]--[2024-10-06 Sun 21:49] =>  0:25
:END:
#+begin_src go
   // デッキ
  type Deck struct {
          Owner Entity
          Cards []Card
  }

  // 戦闘中の手札
  type Hand struct {
          Card Card
  }

  // 戦闘ステート
  type BattleState struct {
          // 味方の行動値。ある値を超すと敵に行動が移る
          // 早く終了すると次のターンに持ち越せる
          FriendActVal int
          // 敵の行動値
          EnemyActVal int
  }

  type TurnSide int
  const (
          // 味方のターン
          FriendTurn TurnSide iota
          // 敵のターン
          EnemyTurn TurnSide
  )

  // 戦闘状態を初期化してステート遷移する
  func Trans(BattleState{enemies, level}) {}
  // カードを引く。デッキから選択される
  func Draw() {}
  // 選択カードの効果を適用させる
  func Apply(target) {}
  // 敵味方のターンを入れ替える
  func Toggle() {}
#+end_src

- 手札カードをキャラ各々にすると、よくわからなくなる
- 全体にするとややこしくなる雰囲気がある
- チームの行動ゲージが貯まると、敵が行動する。敵も手札を持っていて、それをランダムに選択する
- 戦闘中に死亡すると、死亡フラグが立ち行動できない
- 戦闘が終了すると敵エンティティによる経験値を得て、敵エンティティを削除する
- 味方チームのターンと敵チームのターンは完全に分かれている
- 持ち物としてのカードと、戦闘中に選択できるカードは明らかに概念が異なる
- キャラごとにデッキと装備を設定できる
  - 枚数は固定で、未選択の部分は「通常攻撃」で埋められる
- デッキ設定をするにはどうするか
  - Equippedを使うのでいいのかな。装備品と共用すると排除する必要がありビミョーか
  - まあ、Wearableと同時に使うから区別はできるか
  - Card + Equipped
  - Wearable + Equipped
- クリックごとに、文字を出し、状態を遷移させていく
- デッキは空にできない。「基本攻撃」とする
- 味方がそれぞれデッキを持つ方式は、やはりややこしい
- 1人で冒険するのがよい可能性がある
  - 1人でデッキ20枚のほうが戦略性とかも考えやすそうな
  - ロックマンとかそうだろ
- デッキと複数人はあまり相性がよくないような
  - 工数もかかるしな
- キャラは特殊効果をつけるための装置、ともできる。暗視とか
  - パーティーのスキルの合算が適用されるなど
  - 武器などの戦闘スキル、暗視などのフィールドスキル
  - カードとメンバーは直接は紐付かない
- でも敵キャラは、キャラと攻撃が紐付いてほしいよな
  - 「軽戦車は、50ミリ砲で攻撃した」
  - 味方と敵のカードは共通の仕組みとしたい。実装が楽だし、探索してる感が出る
  - 敵のデッキは、生きている敵の種類によって決定する、でよいか。なんだか面倒そうだな
- 石原
  - レイガン(2)
  - おたけび(1) -- 固有
  - 体当たり(0)
- 白瀬
  - ハンドガン(2)
  - 竹刀(2)
  - ハンドガン<援護射撃>(1)
  - ハンドガン<ワンショットキル>(2)
  - 体当たり(0)
- 軽戦車
  - 50ミリ砲(2)
  - 7.62mm機関銃(2)
  - 乱射 -- 機関銃(4)
  - 体当たり(0)
- 味方が1~4人、敵が1~4人の場合について考えなければならない
- カード風にするのはとりあえず諦めるのもよい
  - Cardって名前にしちゃったが
  - 普通に装備している手札から選ぶ形式にする。ドローとかはない
- テキストのクリック待ちについては、テキストキューが残っていたらクリックはキュー送り、とすればよい
- 攻撃コマンドの構造体
  - 最終的にこれらは分解されてeffect queueに入る
  - コマンドのテキスト生成にも使う
  - 「石原は50ミリ砲で攻撃」
  - 「装甲車に34のダメージ」
  - 「装甲車はチェーンガンで攻撃」
  - 「石原に14のダメージ」
  - 「白瀬に19のダメージ」

#+begin_src go
  command{
          // 攻撃する人(死んだらこの攻撃は実行されない}
          owner: ecs.Entity
          // 攻撃対象
          target: ecs.Entity
          // ターゲットタイプなどはここから取れる。全体攻撃か、味方対象とか
          way: components.Card
  }
#+end_src

- systemで、コマンドを処理していく
  - ダメージがあるたびにログを出し、クリック待ちにする
  - クリックするたびにsystemが実行され、ログが表示される
- Listだと、マウスオーバー時のハンドラが入れられない。前も陥った罠だ
  - マウスだと、スクロールが面倒である。どうにかならないか
  - マウスオーバー時の色は付けてるから、どうにか

** DONE メッセージログ追加
CLOSED: [2024-10-13 Sun 22:54]
:LOGBOOK:
CLOCK: [2024-10-13 Sun 22:26]--[2024-10-13 Sun 22:51] =>  0:25
CLOCK: [2024-10-13 Sun 22:01]--[2024-10-13 Sun 22:26] =>  0:25
CLOCK: [2024-10-13 Sun 21:35]--[2024-10-13 Sun 22:01] =>  0:26
CLOCK: [2024-10-13 Sun 11:43]--[2024-10-13 Sun 12:08] =>  0:25
CLOCK: [2024-10-13 Sun 11:08]--[2024-10-13 Sun 11:33] =>  0:25
CLOCK: [2024-10-13 Sun 10:21]--[2024-10-13 Sun 10:46] =>  0:25
CLOCK: [2024-10-13 Sun 09:45]--[2024-10-13 Sun 10:10] =>  0:25
CLOCK: [2024-10-13 Sun 09:20]--[2024-10-13 Sun 09:45] =>  0:25
CLOCK: [2024-10-13 Sun 08:55]--[2024-10-13 Sun 09:20] =>  0:25
CLOCK: [2024-10-13 Sun 00:36]--[2024-10-13 Sun 01:01] =>  0:25
:END:
汎用なメッセージを表示できるようにする。メッセージパートの仕組みとは別でよい。

戦闘、フィールドなどのイベントによってメッセージを発行して表示できるようにする。

#+begin_src go
  msglog.BattleLog.Append("イシハラは軽戦車を攻撃した")


  msglog.BattleLog.Get(10)
#+end_src

- [X] 残ってたらクリック待ちにしたい
- [X] クリック待ち状態のときは何か表示する
** DONE 汎用の選択コンテナを作成する
CLOSED: [2024-10-13 Sun 22:55]
:LOGBOOK:
CLOCK: [2024-04-21 Sun 23:10]--[2024-04-21 Sun 23:35] =>  0:25
CLOCK: [2024-04-21 Sun 21:20]--[2024-04-21 Sun 21:45] =>  0:25
CLOCK: [2024-04-20 Sat 16:44]--[2024-04-20 Sat 17:09] =>  0:25
CLOCK: [2024-04-20 Sat 15:41]--[2024-04-20 Sat 16:06] =>  0:25
CLOCK: [2024-04-20 Sat 15:15]--[2024-04-20 Sat 15:40] =>  0:25
CLOCK: [2024-04-20 Sat 14:50]--[2024-04-20 Sat 15:15] =>  0:25
CLOCK: [2024-04-20 Sat 14:25]--[2024-04-20 Sat 14:50] =>  0:25
CLOCK: [2024-04-20 Sat 12:46]--[2024-04-20 Sat 13:11] =>  0:25
CLOCK: [2024-04-20 Sat 11:30]--[2024-04-20 Sat 11:55] =>  0:25
:END:
メニューなど、なにかを一覧して選択するのは多く使うので、作っておきたい。

メニュー。

- 選択肢のリスト
- 現在選択中の番号を示す変数

ゲージ。

- HP
- レベル
- 名前

どうやればいいのだろうか。

- 構造体で作っておいて、後で代入できるようにしとくといいのでは。あとその構造体に親子関係を作るメソッドを作ると。

#+begin_src go
  type aa struct {
          root ui.Container
          desc ui.Container
          list ui.Container
  }

  func (aa *aa) assemble {
          aa.root.AddChild(aa.desc)
          aa.root.AddChild(aa.list)
  }
#+end_src
** DONE 似たようなUI関数を統合する
CLOSED: [2024-10-15 Tue 21:45]
:LOGBOOK:
CLOCK: [2024-10-14 Mon 00:53]--[2024-10-14 Mon 01:18] =>  0:25
CLOCK: [2024-10-14 Mon 00:27]--[2024-10-14 Mon 00:52] =>  0:25
:END:
オプションをちゃんと使ってないのを直す。
** DONE UIをまともにする
CLOSED: [2024-10-15 Tue 21:45]
:LOGBOOK:
CLOCK: [2024-10-15 Tue 20:38]--[2024-10-15 Tue 21:03] =>  0:25
CLOCK: [2024-10-15 Tue 19:58]--[2024-10-15 Tue 20:23] =>  0:25
CLOCK: [2024-10-15 Tue 19:33]--[2024-10-15 Tue 19:58] =>  0:25
CLOCK: [2024-10-15 Tue 00:24]--[2024-10-15 Tue 00:49] =>  0:25
CLOCK: [2024-10-14 Mon 22:45]--[2024-10-14 Mon 23:10] =>  0:25
CLOCK: [2024-10-14 Mon 22:20]--[2024-10-14 Mon 22:45] =>  0:25
CLOCK: [2024-10-14 Mon 21:55]--[2024-10-14 Mon 22:20] =>  0:25
CLOCK: [2024-10-14 Mon 21:03]--[2024-10-14 Mon 21:28] =>  0:25
CLOCK: [2024-10-14 Mon 20:20]--[2024-10-14 Mon 20:45] =>  0:25
CLOCK: [2024-10-14 Mon 19:22]--[2024-10-14 Mon 19:47] =>  0:25
CLOCK: [2024-10-14 Mon 18:41]--[2024-10-14 Mon 19:06] =>  0:25
CLOCK: [2024-10-14 Mon 18:15]--[2024-10-14 Mon 18:40] =>  0:25
CLOCK: [2024-10-14 Mon 16:44]--[2024-10-14 Mon 17:09] =>  0:25
CLOCK: [2024-10-14 Mon 16:17]--[2024-10-14 Mon 16:42] =>  0:25
CLOCK: [2024-10-14 Mon 15:48]--[2024-10-14 Mon 16:13] =>  0:25
CLOCK: [2024-10-14 Mon 14:57]--[2024-10-14 Mon 15:22] =>  0:25
CLOCK: [2024-10-14 Mon 13:43]--[2024-10-14 Mon 14:08] =>  0:25
CLOCK: [2024-10-14 Mon 13:10]--[2024-10-14 Mon 13:35] =>  0:25
CLOCK: [2024-10-14 Mon 12:29]--[2024-10-14 Mon 12:54] =>  0:25
CLOCK: [2024-10-14 Mon 12:04]--[2024-10-14 Mon 12:29] =>  0:25
CLOCK: [2024-10-14 Mon 11:37]--[2024-10-14 Mon 12:02] =>  0:25
CLOCK: [2024-10-14 Mon 11:07]--[2024-10-14 Mon 11:32] =>  0:25
CLOCK: [2024-10-14 Mon 10:42]--[2024-10-14 Mon 11:07] =>  0:25
CLOCK: [2024-10-14 Mon 10:17]--[2024-10-14 Mon 10:42] =>  0:25
CLOCK: [2024-10-14 Mon 01:39]--[2024-10-14 Mon 02:04] =>  0:25
CLOCK: [2024-10-13 Sun 22:56]--[2024-10-13 Sun 23:21] =>  0:25
:END:
凝る必要はないが、あまりにデバッグ感がある。

- verticalContainerを簡単にしたい
- 共通のパラメータをもたせたい
** DONE スクロールコンテナをListコンテナに置き換える
CLOSED: [2024-10-17 Thu 20:36]
:LOGBOOK:
CLOCK: [2024-10-16 Wed 22:55]--[2024-10-16 Wed 23:20] =>  0:25
CLOCK: [2024-10-16 Wed 22:28]--[2024-10-16 Wed 22:53] =>  0:25
CLOCK: [2024-10-16 Wed 21:49]--[2024-10-16 Wed 22:14] =>  0:25
CLOCK: [2024-10-16 Wed 19:41]--[2024-10-16 Wed 20:06] =>  0:25
CLOCK: [2024-10-16 Wed 00:25]--[2024-10-16 Wed 00:50] =>  0:25
CLOCK: [2024-10-15 Tue 23:09]--[2024-10-15 Tue 23:34] =>  0:25
CLOCK: [2024-10-15 Tue 22:44]--[2024-10-15 Tue 23:09] =>  0:25
CLOCK: [2024-10-15 Tue 21:45]--[2024-10-15 Tue 22:10] =>  0:25
:END:
わかりやすくなる。
** DONE スポーン時は自動で全回復する
CLOSED: [2024-10-17 Thu 22:35]
:LOGBOOK:
CLOCK: [2024-10-17 Thu 21:29]--[2024-10-17 Thu 21:54] =>  0:25
CLOCK: [2024-10-17 Thu 20:37]--[2024-10-17 Thu 21:02] =>  0:25
:END:
いちいち回復させないといけないのが面倒なので。
** DONE 戦闘できるようにする
CLOSED: [2024-10-19 Sat 19:36]
:LOGBOOK:
CLOCK: [2024-10-19 Sat 17:20]--[2024-10-19 Sat 17:45] =>  0:25
CLOCK: [2024-10-19 Sat 12:51]--[2024-10-19 Sat 13:16] =>  0:25
CLOCK: [2024-10-19 Sat 11:38]--[2024-10-19 Sat 12:03] =>  0:25
CLOCK: [2024-10-19 Sat 11:11]--[2024-10-19 Sat 11:37] =>  0:26
CLOCK: [2024-10-19 Sat 10:22]--[2024-10-19 Sat 10:47] =>  0:25
CLOCK: [2024-10-19 Sat 09:57]--[2024-10-19 Sat 10:22] =>  0:25
CLOCK: [2024-10-19 Sat 09:30]--[2024-10-19 Sat 09:55] =>  0:25
CLOCK: [2024-10-18 Fri 23:04]--[2024-10-18 Fri 23:29] =>  0:25
CLOCK: [2024-10-17 Thu 22:35]--[2024-10-17 Thu 23:00] =>  0:25
:END:

- 敵にもコマンドを選ばせる
- SPが足りない場合は不活性にする

カードの選択テーブル。敵の場合はSPの概念はない。

- 軽戦車
  - 50ミリ砲: 0.4
  - 7.62mm機関銃: 0.3
  - 体当たり: 0.3
- オロチ(複数回攻撃)
  - 火炎ブレス: 0.2
  - 電撃ブレス: 0.2
  - 凍結ブレス: 0.1
  - 鉤爪: 0.3
  - 咆哮: 0.2
** DONE フィールドに敵シンボルを作る
CLOSED: [2024-10-26 Sat 14:38]
:LOGBOOK:
CLOCK: [2024-09-03 Tue 21:51]--[2024-09-03 Tue 22:16] =>  0:25
CLOCK: [2024-09-03 Tue 21:12]--[2024-09-03 Tue 21:37] =>  0:25
CLOCK: [2024-09-03 Tue 00:25]--[2024-09-03 Tue 00:50] =>  0:25
CLOCK: [2024-09-02 Mon 23:46]--[2024-09-03 Tue 00:11] =>  0:25
CLOCK: [2024-09-02 Mon 23:12]--[2024-09-02 Mon 23:37] =>  0:25
CLOCK: [2024-09-02 Mon 22:46]--[2024-09-02 Mon 23:11] =>  0:25
CLOCK: [2024-09-01 Sun 23:33]--[2024-09-01 Sun 23:58] =>  0:25
CLOCK: [2024-09-01 Sun 22:39]--[2024-09-01 Sun 23:04] =>  0:25
CLOCK: [2024-09-01 Sun 21:14]--[2024-09-01 Sun 21:39] =>  0:25
CLOCK: [2024-09-01 Sun 20:49]--[2024-09-01 Sun 21:14] =>  0:25
CLOCK: [2024-09-01 Sun 20:19]--[2024-09-01 Sun 20:44] =>  0:25
:END:

- とりあえず動かないやつ
- ランダムに動くやつ
- 向きによる画像をどうするか
  - 自キャラは8方向にしか動かないが、敵キャラはそうではない
  - 角度の範囲にすればいいか
  - 今は回転だが、回転は見た目があまりよくない
  - 画像を5方向分用意して切り替えがよさそう(反転させて全方向にする)
  - とりあえず回転はなくしておく
- かぶる問題
  - positionを指定したはいいけど、重複検知がやりにくいな
  - tileだったら全体管理できていて楽だけど...
  - スポーンのとき限定で、スポーン済みタイル配列を持っておいてチェックするとか
  - スポーン時はタイルで判断できれば問題ない。スポーン時、すべてのエンティティがタイルに沿った位置にある
  - タイルを指定してスポーンするインターフェースにすればよいのでは

** DONE 敵や味方を倒せるようにする
CLOSED: [2024-10-26 Sat 14:09]
:LOGBOOK:
CLOCK: [2024-10-26 Sat 13:34]--[2024-10-26 Sat 13:59] =>  0:25
CLOCK: [2024-10-26 Sat 12:43]--[2024-10-26 Sat 13:08] =>  0:25
CLOCK: [2024-10-26 Sat 12:01]--[2024-10-26 Sat 12:26] =>  0:25
CLOCK: [2024-10-26 Sat 11:19]--[2024-10-26 Sat 11:44] =>  0:25
CLOCK: [2024-10-26 Sat 07:48]--[2024-10-26 Sat 08:13] =>  0:25
CLOCK: [2024-10-26 Sat 01:04]--[2024-10-26 Sat 01:29] =>  0:25
CLOCK: [2024-10-26 Sat 00:08]--[2024-10-26 Sat 00:33] =>  0:25
CLOCK: [2024-10-25 Fri 22:40]--[2024-10-25 Fri 23:05] =>  0:25
CLOCK: [2024-10-25 Fri 22:15]--[2024-10-25 Fri 22:40] =>  0:25
CLOCK: [2024-10-25 Fri 21:07]--[2024-10-25 Fri 21:32] =>  0:25
CLOCK: [2024-10-25 Fri 20:42]--[2024-10-25 Fri 21:07] =>  0:25
CLOCK: [2024-10-25 Fri 20:10]--[2024-10-25 Fri 20:35] =>  0:25
CLOCK: [2024-10-25 Fri 19:45]--[2024-10-25 Fri 20:10] =>  0:25
CLOCK: [2024-10-25 Fri 16:34]--[2024-10-25 Fri 16:59] =>  0:25
CLOCK: [2024-10-25 Fri 15:52]--[2024-10-25 Fri 16:17] =>  0:25
CLOCK: [2024-10-25 Fri 15:21]--[2024-10-25 Fri 15:46] =>  0:25
CLOCK: [2024-10-21 Mon 21:57]--[2024-10-21 Mon 22:22] =>  0:25
CLOCK: [2024-10-21 Mon 21:20]--[2024-10-21 Mon 21:45] =>  0:25
CLOCK: [2024-10-21 Mon 20:55]--[2024-10-21 Mon 21:20] =>  0:25
CLOCK: [2024-10-21 Mon 20:30]--[2024-10-21 Mon 20:55] =>  0:25
CLOCK: [2024-10-21 Mon 20:05]--[2024-10-21 Mon 20:30] =>  0:25
CLOCK: [2024-10-20 Sun 23:17]--[2024-10-20 Sun 23:42] =>  0:25
CLOCK: [2024-10-20 Sun 22:40]--[2024-10-20 Sun 23:05] =>  0:25
CLOCK: [2024-10-20 Sun 22:15]--[2024-10-20 Sun 22:40] =>  0:25
CLOCK: [2024-10-20 Sun 21:25]--[2024-10-20 Sun 21:50] =>  0:25
CLOCK: [2024-10-20 Sun 20:37]--[2024-10-20 Sun 21:02] =>  0:25
CLOCK: [2024-10-20 Sun 20:12]--[2024-10-20 Sun 20:37] =>  0:25
CLOCK: [2024-10-20 Sun 19:45]--[2024-10-20 Sun 20:10] =>  0:25
CLOCK: [2024-10-20 Sun 19:20]--[2024-10-20 Sun 19:45] =>  0:25
CLOCK: [2024-10-20 Sun 15:55]--[2024-10-20 Sun 16:20] =>  0:25
CLOCK: [2024-10-20 Sun 15:22]--[2024-10-20 Sun 15:47] =>  0:25
CLOCK: [2024-10-20 Sun 14:35]--[2024-10-20 Sun 15:00] =>  0:25
CLOCK: [2024-10-20 Sun 13:29]--[2024-10-20 Sun 13:54] =>  0:25
CLOCK: [2024-10-20 Sun 12:58]--[2024-10-20 Sun 13:23] =>  0:25
CLOCK: [2024-10-20 Sun 12:24]--[2024-10-20 Sun 12:49] =>  0:25
CLOCK: [2024-10-20 Sun 11:46]--[2024-10-20 Sun 12:11] =>  0:25
CLOCK: [2024-10-20 Sun 11:20]--[2024-10-20 Sun 11:45] =>  0:25
CLOCK: [2024-10-20 Sun 10:44]--[2024-10-20 Sun 11:09] =>  0:25
CLOCK: [2024-10-20 Sun 10:19]--[2024-10-20 Sun 10:44] =>  0:25
CLOCK: [2024-10-20 Sun 00:11]--[2024-10-20 Sun 00:36] =>  0:25
CLOCK: [2024-10-19 Sat 23:17]--[2024-10-19 Sat 23:42] =>  0:25
CLOCK: [2024-10-19 Sat 22:21]--[2024-10-19 Sat 22:46] =>  0:25
CLOCK: [2024-10-19 Sat 21:56]--[2024-10-19 Sat 22:21] =>  0:25
CLOCK: [2024-10-19 Sat 21:31]--[2024-10-19 Sat 21:56] =>  0:25
CLOCK: [2024-10-19 Sat 21:05]--[2024-10-19 Sat 21:30] =>  0:25
CLOCK: [2024-10-19 Sat 20:33]--[2024-10-19 Sat 20:58] =>  0:25
CLOCK: [2024-10-19 Sat 20:08]--[2024-10-19 Sat 20:33] =>  0:25
CLOCK: [2024-10-19 Sat 19:36]--[2024-10-19 Sat 20:01] =>  0:25
:END:

- 死んでいる判定をする
- 味方でも敵でもすぐに削除はしない。フラグを立てるだけ
- 味方が全員死ぬとゲームオーバー
- 敵が全員死ぬと勝利
- 戦闘終了時に敵エンティティを削除する

メモ。

- 死亡フラグをどうするか
- わざわざコンポーネントにしなくても、HP0で判定すればよさそう
- 死んだキャラは命令できない。ターゲットにならない
- 「倒した」は出して待ち状態にしたい
  - 「敵を全滅させた」
  - メッセージ待ちごとにクリック待ちにしたほうが楽でいいのではないか

パーティ。

- 味方の最後に行動するメンバーが死んだときに空のコマンド送りが発生する
  - ▼をクリアするクリックと、ターン終わりのクリックがある
  - 根本的に扱いにくい
** DONE 戦闘勝利時に獲得できるようにする
CLOSED: [2024-10-27 Sun 17:54]
:LOGBOOK:
CLOCK: [2024-10-27 Sun 17:08]--[2024-10-27 Sun 17:33] =>  0:25
CLOCK: [2024-10-27 Sun 16:30]--[2024-10-27 Sun 16:55] =>  0:25
CLOCK: [2024-10-27 Sun 16:03]--[2024-10-27 Sun 16:28] =>  0:25
CLOCK: [2024-10-27 Sun 15:38]--[2024-10-27 Sun 16:03] =>  0:25
CLOCK: [2024-10-27 Sun 13:08]--[2024-10-27 Sun 13:33] =>  0:25
CLOCK: [2024-10-27 Sun 12:39]--[2024-10-27 Sun 13:04] =>  0:25
CLOCK: [2024-10-27 Sun 12:12]--[2024-10-27 Sun 12:37] =>  0:25
CLOCK: [2024-10-27 Sun 11:34]--[2024-10-27 Sun 11:59] =>  0:25
CLOCK: [2024-10-27 Sun 10:08]--[2024-10-27 Sun 10:33] =>  0:25
CLOCK: [2024-10-27 Sun 09:36]--[2024-10-27 Sun 10:01] =>  0:25
CLOCK: [2024-10-27 Sun 08:58]--[2024-10-27 Sun 09:23] =>  0:25
CLOCK: [2024-10-27 Sun 08:32]--[2024-10-27 Sun 08:57] =>  0:25
CLOCK: [2024-10-27 Sun 01:09]--[2024-10-27 Sun 01:34] =>  0:25
CLOCK: [2024-10-26 Sat 23:50]--[2024-10-27 Sun 00:15] =>  0:25
CLOCK: [2024-10-26 Sat 22:51]--[2024-10-26 Sat 23:17] =>  0:26
CLOCK: [2024-10-26 Sat 21:55]--[2024-10-26 Sat 22:20] =>  0:25
CLOCK: [2024-10-26 Sat 21:29]--[2024-10-26 Sat 21:54] =>  0:25
:END:

- 経験値
- 素材

モンスターごとに経験点の倍率を変えればいいだろうか。

- 石原 45 -> 56
- 石原 45 -> 56 <UP>
- レベルアップ時にどういう表示にするか
- levelUp systemを作成する
- 100を超えてた場合レベルを上げて経験点を0にする
** DONE VRTを自動コミットさせる
CLOSED: [2024-11-16 Sat 21:28]
:LOGBOOK:
CLOCK: [2024-11-16 Sat 12:48]--[2024-11-16 Sat 13:13] =>  0:25
:END:
なぜか手元とCIで数バイトレベルの差分が出るようになっている。一度CIでダウンロードしてからコミットしている。面倒なのでコミットまでしてもらう。
** DONE 移動を回転方式にする
CLOSED: [2025-03-09 Sun 13:41]
:LOGBOOK:
CLOCK: [2025-03-09 Sun 11:45]--[2025-03-09 Sun 12:10] =>  0:25
:END:

- w,sでアクセル
- a,dで回転
- このほうが斜め移動が便利であるし、ゲーム性もリアルな感じがする
** DONE 敵を移動させる
CLOSED: [2025-03-13 Thu 01:07]
:LOGBOOK:
CLOCK: [2025-03-09 Sun 18:07]--[2025-03-09 Sun 18:32] =>  0:25
CLOCK: [2025-03-09 Sun 17:42]--[2025-03-09 Sun 18:07] =>  0:25
CLOCK: [2025-03-09 Sun 15:30]--[2025-03-09 Sun 15:55] =>  0:25
CLOCK: [2025-03-09 Sun 13:42]--[2025-03-09 Sun 14:07] =>  0:25
:END:

- 状態遷移させる
- chase
  - 視界を実装する
  - 敵をどう認識するか
  - 一定距離に入るとEntityを認識する
  - そのEntityの方向に向かって直進する
- roam
  - 壁を認識する
- シンボルのなかでも、移動パターンが違うものがある
  - 赤玉A: ランダム移動
  - 赤玉B: 規則移動(壁伝い)
  - 赤玉C: ランダム移動 + 追跡

#+begin_src go
  // Component
  type AIInput struct {
          FSM MotionFSM
          Vision AIVision
  }

  type MotionFSM struct {
          CurrentState AIMoveState
          Vision       AIVision
  }

  // AIInput ================
  func Update() {
          fsm.Update()
          vision.Update()
  }

  // fsm ================
  // fsm でパターン遷移を管理する

  // 初期化する
  // 最初にroam stateを設定する
  NewMover()
  // stateを選ぶ。全状態遷移を記載する
  mover.ChooseState()
  // moverから現在stateをUpdate
  mover.Update() // currentState.Update
  // 状態を設定する
  mover.SetState()

  // 移動パターンの実装 ================
  // 実際に実行される移動パターン
  movepattern.Update()
#+end_src

- 最初から複雑すぎることをやろうとしている。少しづつやろう
- ミニマルな実装が完了した
** DONE キーボード操作対応する
CLOSED: [2025-07-14 Mon 19:18]
:LOGBOOK:
CLOCK: [2025-07-13 Sun 21:27]--[2025-07-13 Sun 21:52] =>  0:25
CLOCK: [2025-07-13 Sun 21:02]--[2025-07-13 Sun 21:27] =>  0:25
CLOCK: [2025-07-13 Sun 20:36]--[2025-07-13 Sun 21:01] =>  0:25
CLOCK: [2025-07-13 Sun 19:40]--[2025-07-13 Sun 20:05] =>  0:25
CLOCK: [2025-07-13 Sun 19:01]--[2025-07-13 Sun 19:26] =>  0:25
CLOCK: [2025-07-13 Sun 18:14]--[2025-07-13 Sun 18:39] =>  0:25
CLOCK: [2025-07-13 Sun 17:37]--[2025-07-13 Sun 18:02] =>  0:25
CLOCK: [2025-07-13 Sun 17:05]--[2025-07-13 Sun 17:30] =>  0:25
CLOCK: [2025-07-13 Sun 16:39]--[2025-07-13 Sun 17:04] =>  0:25
CLOCK: [2025-07-13 Sun 16:02]--[2025-07-13 Sun 16:27] =>  0:25
CLOCK: [2025-07-13 Sun 15:37]--[2025-07-13 Sun 16:02] =>  0:25
CLOCK: [2025-07-13 Sun 15:12]--[2025-07-13 Sun 15:37] =>  0:25
CLOCK: [2025-07-13 Sun 14:47]--[2025-07-13 Sun 15:12] =>  0:25
CLOCK: [2025-07-13 Sun 12:48]--[2025-07-13 Sun 13:13] =>  0:25
CLOCK: [2025-07-13 Sun 12:19]--[2025-07-13 Sun 12:44] =>  0:25
CLOCK: [2025-07-13 Sun 11:37]--[2025-07-13 Sun 12:02] =>  0:25
CLOCK: [2025-07-13 Sun 10:57]--[2025-07-13 Sun 11:22] =>  0:25
CLOCK: [2025-07-13 Sun 10:30]--[2025-07-13 Sun 10:55] =>  0:25
CLOCK: [2025-07-13 Sun 09:55]--[2025-07-13 Sun 10:20] =>  0:25
CLOCK: [2025-07-12 Sat 21:46]--[2025-07-12 Sat 22:11] =>  0:25
CLOCK: [2025-07-12 Sat 21:20]--[2025-07-12 Sat 21:45] =>  0:25
CLOCK: [2025-07-12 Sat 19:55]--[2025-07-12 Sat 20:20] =>  0:25
CLOCK: [2025-07-12 Sat 19:24]--[2025-07-12 Sat 19:49] =>  0:25
CLOCK: [2025-07-12 Sat 18:59]--[2025-07-12 Sat 19:24] =>  0:25
CLOCK: [2025-07-12 Sat 18:18]--[2025-07-12 Sat 18:43] =>  0:25
CLOCK: [2025-07-12 Sat 17:53]--[2025-07-12 Sat 18:18] =>  0:25
CLOCK: [2025-07-12 Sat 17:24]--[2025-07-12 Sat 17:49] =>  0:25
CLOCK: [2025-07-12 Sat 16:52]--[2025-07-12 Sat 17:17] =>  0:25
CLOCK: [2025-07-12 Sat 16:27]--[2025-07-12 Sat 16:52] =>  0:25
CLOCK: [2025-07-12 Sat 16:01]--[2025-07-12 Sat 16:26] =>  0:25
CLOCK: [2025-07-12 Sat 14:41]--[2025-07-12 Sat 15:06] =>  0:25
CLOCK: [2025-07-12 Sat 14:14]--[2025-07-12 Sat 14:39] =>  0:25
CLOCK: [2025-07-12 Sat 12:02]--[2025-07-12 Sat 12:27] =>  0:25
CLOCK: [2025-07-12 Sat 11:11]--[2025-07-12 Sat 11:36] =>  0:25
CLOCK: [2025-07-12 Sat 10:36]--[2025-07-12 Sat 11:01] =>  0:25
CLOCK: [2025-07-12 Sat 09:53]--[2025-07-12 Sat 10:18] =>  0:25
CLOCK: [2025-07-12 Sat 08:58]--[2025-07-12 Sat 09:23] =>  0:25
CLOCK: [2025-07-12 Sat 08:33]--[2025-07-12 Sat 08:58] =>  0:25
CLOCK: [2025-07-12 Sat 08:08]--[2025-07-12 Sat 08:33] =>  0:25
CLOCK: [2025-07-12 Sat 07:36]--[2025-07-12 Sat 08:01] =>  0:25
CLOCK: [2025-07-10 Thu 23:15]--[2025-07-10 Thu 23:40] =>  0:25
CLOCK: [2025-07-10 Thu 22:20]--[2025-07-10 Thu 22:45] =>  0:25
CLOCK: [2025-07-10 Thu 20:34]--[2025-07-10 Thu 20:59] =>  0:25
CLOCK: [2025-07-10 Thu 19:53]--[2025-07-10 Thu 20:18] =>  0:25
CLOCK: [2025-07-10 Thu 19:28]--[2025-07-10 Thu 19:53] =>  0:25
CLOCK: [2025-07-10 Thu 19:03]--[2025-07-10 Thu 19:28] =>  0:25
CLOCK: [2025-07-10 Thu 18:12]--[2025-07-10 Thu 18:37] =>  0:25
CLOCK: [2025-07-10 Thu 08:38]--[2025-07-10 Thu 09:03] =>  0:25
CLOCK: [2025-07-09 Wed 23:14]--[2025-07-09 Wed 23:39] =>  0:25
CLOCK: [2025-07-09 Wed 22:49]--[2025-07-09 Wed 23:14] =>  0:25
CLOCK: [2025-07-09 Wed 22:24]--[2025-07-09 Wed 22:49] =>  0:25
CLOCK: [2025-07-09 Wed 21:46]--[2025-07-09 Wed 22:11] =>  0:25
CLOCK: [2025-07-09 Wed 21:21]--[2025-07-09 Wed 21:46] =>  0:25
CLOCK: [2025-07-09 Wed 20:18]--[2025-07-09 Wed 20:43] =>  0:25
CLOCK: [2025-07-09 Wed 19:36]--[2025-07-09 Wed 20:01] =>  0:25
CLOCK: [2025-07-09 Wed 19:04]--[2025-07-09 Wed 19:29] =>  0:25
CLOCK: [2025-07-09 Wed 18:38]--[2025-07-09 Wed 19:03] =>  0:25
:END:

する。
** DONE CIまわり強化する
CLOSED: [2025-07-15 Tue 21:34]
:LOGBOOK:
CLOCK: [2025-07-14 Mon 19:19]--[2025-07-14 Mon 19:44] =>  0:25
:END:

linterなども設定する。
** DONE componentsを型安全にする
CLOSED: [2025-07-16 Wed 18:31]
:LOGBOOK:
CLOCK: [2025-07-15 Tue 23:27]--[2025-07-15 Tue 23:52] =>  0:25
CLOCK: [2025-07-15 Tue 22:54]--[2025-07-15 Tue 23:19] =>  0:25
CLOCK: [2025-07-15 Tue 21:59]--[2025-07-15 Tue 22:24] =>  0:25
CLOCK: [2025-07-15 Tue 21:34]--[2025-07-15 Tue 21:59] =>  0:25
:END:
する。
** DONE 構造化ログを整備する
CLOSED: [2025-07-17 Thu 21:35]
:LOGBOOK:
CLOCK: [2025-07-17 Thu 21:10]--[2025-07-17 Thu 21:35] =>  0:25
CLOCK: [2025-07-17 Thu 20:45]--[2025-07-17 Thu 21:10] =>  0:25
CLOCK: [2025-07-16 Wed 22:37]--[2025-07-16 Wed 23:02] =>  0:25
CLOCK: [2025-07-16 Wed 22:12]--[2025-07-16 Wed 22:37] =>  0:25
CLOCK: [2025-07-16 Wed 21:46]--[2025-07-16 Wed 22:11] =>  0:25
CLOCK: [2025-07-16 Wed 19:29]--[2025-07-16 Wed 19:54] =>  0:25
CLOCK: [2025-07-16 Wed 18:31]--[2025-07-16 Wed 18:56] =>  0:25
:END:

デバッグしやすくする。
** DONE 企画書を書く
CLOSED: [2025-07-19 Sat 15:58]
:LOGBOOK:
CLOCK: [2025-07-19 Sat 14:11]--[2025-07-19 Sat 14:36] =>  0:25
CLOCK: [2025-07-19 Sat 13:41]--[2025-07-19 Sat 14:06] =>  0:25
CLOCK: [2025-07-19 Sat 13:09]--[2025-07-19 Sat 13:34] =>  0:25
CLOCK: [2025-07-19 Sat 11:51]--[2025-07-19 Sat 12:16] =>  0:25
CLOCK: [2025-07-19 Sat 11:16]--[2025-07-19 Sat 11:41] =>  0:25
CLOCK: [2025-07-19 Sat 10:51]--[2025-07-19 Sat 11:16] =>  0:25
CLOCK: [2025-07-19 Sat 10:26]--[2025-07-19 Sat 10:51] =>  0:25
CLOCK: [2025-07-19 Sat 09:52]--[2025-07-19 Sat 10:17] =>  0:25
CLOCK: [2025-07-19 Sat 09:24]--[2025-07-19 Sat 09:49] =>  0:25
CLOCK: [2025-07-19 Sat 09:17]--[2025-07-19 Sat 09:22] =>  0:05
CLOCK: [2025-07-18 Fri 23:08]--[2025-07-18 Fri 23:33] =>  0:25
:END:

曖昧なままやっているので、そろそろやる。
** DONE 参考になりそうな実装を調べる
CLOSED: [2025-07-26 Sat 18:56]
:LOGBOOK:
CLOCK: [2025-03-08 Sat 22:18]--[2025-03-08 Sat 22:43] =>  0:25
CLOCK: [2025-03-08 Sat 21:52]--[2025-03-08 Sat 22:18] =>  0:26
CLOCK: [2025-03-08 Sat 21:27]--[2025-03-08 Sat 21:52] =>  0:25
CLOCK: [2025-03-08 Sat 21:02]--[2025-03-08 Sat 21:27] =>  0:25
CLOCK: [2025-03-08 Sat 20:37]--[2025-03-08 Sat 21:02] =>  0:25
CLOCK: [2025-03-08 Sat 18:59]--[2025-03-08 Sat 19:24] =>  0:25
CLOCK: [2025-03-08 Sat 17:52]--[2025-03-08 Sat 18:17] =>  0:25
CLOCK: [2025-03-08 Sat 16:42]--[2025-03-08 Sat 17:07] =>  0:25
CLOCK: [2025-03-08 Sat 16:07]--[2025-03-08 Sat 16:32] =>  0:25
CLOCK: [2025-03-08 Sat 14:40]--[2025-03-08 Sat 15:05] =>  0:25
CLOCK: [2025-03-08 Sat 14:15]--[2025-03-08 Sat 14:40] =>  0:25
CLOCK: [2025-03-08 Sat 13:49]--[2025-03-08 Sat 14:14] =>  0:25
:END:
フィールドがパフォーマンスの問題があったり、これからどうすればいいのかがわからない。参考になりそうな実装を探す。

- アニメーションどうやってるんだ
  - https://github.com/divVerent/aaaaxy/blob/d505d271c4e45a80b61ad4cce7c3ab44b9d30e29/internal/game/player/player.go#L209
  - https://github.com/divVerent/aaaaxy/blob/d505d271c4e45a80b61ad4cce7c3ab44b9d30e29/internal/game/misc/movinganimation.go#L31-L32 移動・フェードをミックスインする
- タイルベースと自由座標移動が混じっているので、わかりづらくなっている
  - どちらかでいいのではないか
- 衝突判定が重い
  - https://github.com/DTLP/mini_tanks/blob/26fa1399ce63d28a383d280e36428ad10e3bd7d0/internal/actors/collision.go#L133
  - これだけでよい
- 画像生成が重い
  - 毎回生成しているっぽい
- 視界判定が重い
  - [[https://github.com/divVerent/aaaaxy][divVerent/aaaaxy: A nonlinear 2D puzzle platformer taking place in impossible spaces.]]視界判定の参考になりそう
  - どこに書いてあるのかわからない
  - https://github.com/divVerent/aaaaxy/blob/d505d271c4e45a80b61ad4cce7c3ab44b9d30e29/internal/engine/world.go#L644-L645 見えないタイルは非表示にする
- たまにワープゲートが到達不可能な場所にある
  - とりあえず自動生成はあとでにしたほうがよい
** DONE 味方一覧表示を共通化する
CLOSED: [2025-07-26 Sat 18:58]
:LOGBOOK:
CLOCK: [2024-04-20 Sat 11:02]--[2024-04-20 Sat 11:27] =>  0:25
CLOCK: [2024-04-20 Sat 10:37]--[2024-04-20 Sat 11:02] =>  0:25
CLOCK: [2024-04-20 Sat 00:34]--[2024-04-20 Sat 00:59] =>  0:25
CLOCK: [2024-04-20 Sat 00:09]--[2024-04-20 Sat 00:34] =>  0:25
CLOCK: [2024-02-11 Sun 01:13]--[2024-02-11 Sun 01:38] =>  0:25
:END:

いろんなところで使いそうかつ、複数のパーツで構成されているので作成が面倒なので。
** DONE ステート切り替えが怪しい部分がある
CLOSED: [2025-07-26 Sat 18:59]
特にpopしている部分。

- pushで、文字があると重なる
- popしたときにOnStartは走らないので、前の画面を削除するのはダメ
** DONE 図形 or 画像描画の方法を考える
CLOSED: [2025-07-26 Sat 18:59]

UIのために図形描画したい。どうするか。画像を用意すればよいが、いい感じにやるためにはどうすればいいか。
** DONE モジュール分けする
CLOSED: [2025-07-26 Sat 19:07]
:LOGBOOK:
CLOCK: [2024-09-21 Sat 17:33]--[2024-09-21 Sat 17:58] =>  0:25
CLOCK: [2024-09-21 Sat 17:08]--[2024-09-21 Sat 17:33] =>  0:25
:END:
名前がかぶってややこしいものは分ける。

- system
- app
- message engine
** DONE タイプライター表示する
CLOSED: [2025-07-26 Sat 19:26]
:PROPERTIES:
:Effort:   5:00
:END:
:LOGBOOK:
CLOCK: [2025-07-26 Sat 18:45]--[2025-07-26 Sat 19:10] =>  0:25
CLOCK: [2025-07-26 Sat 16:37]--[2025-07-26 Sat 17:02] =>  0:25
CLOCK: [2025-07-26 Sat 16:12]--[2025-07-26 Sat 16:37] =>  0:25
CLOCK: [2025-07-26 Sat 13:48]--[2025-07-26 Sat 14:13] =>  0:25
CLOCK: [2025-07-26 Sat 13:19]--[2025-07-26 Sat 13:44] =>  0:25
CLOCK: [2025-07-26 Sat 10:51]--[2025-07-26 Sat 11:16] =>  0:25
CLOCK: [2025-07-26 Sat 10:07]--[2025-07-26 Sat 10:32] =>  0:25
CLOCK: [2025-07-26 Sat 09:35]--[2025-07-26 Sat 10:00] =>  0:25
CLOCK: [2025-07-26 Sat 00:35]--[2025-07-26 Sat 01:00] =>  0:25
CLOCK: [2025-07-25 Fri 23:18]--[2025-07-25 Fri 23:43] =>  0:25
CLOCK: [2025-07-25 Fri 22:22]--[2025-07-25 Fri 22:47] =>  0:25
CLOCK: [2025-07-25 Fri 20:54]--[2025-07-25 Fri 21:19] =>  0:25
CLOCK: [2025-07-25 Fri 20:29]--[2025-07-25 Fri 20:54] =>  0:25
CLOCK: [2025-07-25 Fri 20:04]--[2025-07-25 Fri 20:29] =>  0:25
CLOCK: [2025-07-25 Fri 18:51]--[2025-07-25 Fri 19:16] =>  0:25
CLOCK: [2025-07-23 Wed 21:56]--[2025-07-23 Wed 22:21] =>  0:25
CLOCK: [2025-07-23 Wed 21:30]--[2025-07-23 Wed 21:55] =>  0:25
CLOCK: [2025-07-23 Wed 21:05]--[2025-07-23 Wed 21:30] =>  0:25
CLOCK: [2025-07-23 Wed 20:40]--[2025-07-23 Wed 21:05] =>  0:25
CLOCK: [2025-07-23 Wed 20:15]--[2025-07-23 Wed 20:40] =>  0:25
:END:

テキストはアニメーション表示したい。多くの場所で使えるので共通化する。
** DONE 敵とエンカウントする
CLOSED: [2025-08-10 Sun 16:55]
:LOGBOOK:
CLOCK: [2025-08-10 Sun 12:53]--[2025-08-10 Sun 13:18] =>  0:25
CLOCK: [2025-08-10 Sun 12:19]--[2025-08-10 Sun 12:44] =>  0:25
CLOCK: [2025-08-10 Sun 11:39]--[2025-08-10 Sun 12:04] =>  0:25
CLOCK: [2025-08-10 Sun 00:25]--[2025-08-10 Sun 00:50] =>  0:25
CLOCK: [2025-08-09 Sat 23:09]--[2025-08-09 Sat 23:34] =>  0:25
CLOCK: [2025-08-09 Sat 20:39]--[2025-08-09 Sat 21:04] =>  0:25
CLOCK: [2025-08-09 Sat 20:13]--[2025-08-09 Sat 20:38] =>  0:25
CLOCK: [2025-08-09 Sat 19:48]--[2025-08-09 Sat 20:13] =>  0:25
CLOCK: [2025-08-09 Sat 19:12]--[2025-08-09 Sat 19:37] =>  0:25
CLOCK: [2025-08-09 Sat 18:11]--[2025-08-09 Sat 18:36] =>  0:25
CLOCK: [2025-03-14 Fri 00:18]--[2025-03-14 Fri 00:43] =>  0:25
CLOCK: [2025-03-13 Thu 23:43]--[2025-03-14 Fri 00:08] =>  0:25
CLOCK: [2025-03-09 Sun 18:32]--[2025-03-09 Sun 18:57] =>  0:25
CLOCK: [2025-03-09 Sun 11:19]--[2025-03-09 Sun 11:45] =>  0:26
CLOCK: [2025-03-09 Sun 10:54]--[2025-03-09 Sun 11:19] =>  0:25
CLOCK: [2025-03-09 Sun 10:29]--[2025-03-09 Sun 10:54] =>  0:25
:END:

- 敵シンボルと接触すると、シンボルに応じて戦闘を開始する
- 敵を移動させるのが先か
- 基本的に既存のやつを流用できるように見える。移動はタイルベースでないので
- とりあえず、一定ロジックで巡回するやつだけでいい
  - 敵によって移動ロジックは変える
  - 巡回型
  - 追跡型
- characterMotionState は継承元で、その子として各stateがある
- 旋回が必要なやつと必要でないやつがある
  - 見た目上滑らかに回転させないと変なものと、変でないものがある
  - 2つあると面倒なので回転が必要に統一する
- 画像の回転ってどこでやってるんだ
  - Positionのangleフィールドが持っているので描画時に
** DONE stateEventとeffectの違いがわかりにくい
CLOSED: [2025-08-10 Sun 19:04]
:LOGBOOK:
CLOCK: [2025-08-10 Sun 18:34]--[2025-08-10 Sun 18:59] =>  0:25
CLOCK: [2025-08-10 Sun 17:59]--[2025-08-10 Sun 18:24] =>  0:25
CLOCK: [2025-08-10 Sun 17:32]--[2025-08-10 Sun 17:57] =>  0:25
CLOCK: [2025-08-10 Sun 16:55]--[2025-08-10 Sun 17:20] =>  0:25
CLOCK: [2025-08-10 Sun 16:27]--[2025-08-10 Sun 16:52] =>  0:25
CLOCK: [2025-08-10 Sun 15:06]--[2025-08-10 Sun 15:31] =>  0:25
CLOCK: [2025-08-10 Sun 14:41]--[2025-08-10 Sun 15:06] =>  0:25
:END:

- stateEventはそういうのとしてまとめたほうがいい説。今、battle stateでstateEventチェックしている
- systemでstate遷移は相互依存になるのでできない
- stateの共通処理でやってよさそう
** DONE メインメニューをきれいにする
CLOSED: [2025-08-10 Sun 23:57]
:LOGBOOK:
CLOCK: [2025-08-10 Sun 22:38]--[2025-08-10 Sun 23:03] =>  0:25
CLOCK: [2025-08-10 Sun 21:54]--[2025-08-10 Sun 22:19] =>  0:25
CLOCK: [2025-08-10 Sun 20:47]--[2025-08-10 Sun 21:12] =>  0:25
CLOCK: [2025-08-10 Sun 20:22]--[2025-08-10 Sun 20:47] =>  0:25
CLOCK: [2025-08-10 Sun 19:55]--[2025-08-10 Sun 20:20] =>  0:25
CLOCK: [2025-08-10 Sun 19:16]--[2025-08-10 Sun 19:41] =>  0:25
:END:

- 真ん中寄せする
- 横を広くする
** DONE 階層移動をEffectでやる
CLOSED: [2025-08-11 Mon 00:05]
:LOGBOOK:
CLOCK: [2024-06-02 Sun 22:09]--[2024-06-02 Sun 22:34] =>  0:25
CLOCK: [2024-06-02 Sun 21:44]--[2024-06-02 Sun 22:09] =>  0:25
CLOCK: [2024-06-02 Sun 16:14]--[2024-06-02 Sun 16:39] =>  0:25
CLOCK: [2024-06-02 Sun 13:44]--[2024-06-02 Sun 14:09] =>  0:25
:END:
階層移動をイベントとして、ほかの箇所で使いやすくする。

- 特定のenitityを対象としないeffectだけど、これでいいのかな。参考コードの状況とは異なる。特定のentityではなく、gameResourceを変更する。ただ、アイテムで階層移動とかもしたいので、effectでできればいいか
- 今の階層移動の仕組み、わかりづらいな
** DONE イベント部分の設計
CLOSED: [2025-08-11 Mon 00:05]
:LOGBOOK:
CLOCK: [2024-01-04 Thu 09:56]--[2024-01-04 Thu 10:21] =>  0:25
CLOCK: [2024-01-03 Wed 22:35]--[2024-01-03 Wed 23:00] =>  0:25
CLOCK: [2024-01-03 Wed 21:52]--[2024-01-03 Wed 22:17] =>  0:25
CLOCK: [2024-01-03 Wed 21:09]--[2024-01-03 Wed 21:34] =>  0:25
CLOCK: [2024-01-03 Wed 19:12]--[2024-01-03 Wed 19:37] =>  0:25
:END:
1章のうろつきをどうするか考える。

- ローグライト形式にすると物語に関してあまり考えなくてよい
  - 繰り返しのゲームプレイに変化をつけやすい
  - 設定とかが伝わりにくい可能性がある
  - Tipsという形式でオプショナルに読めればよさそう
  - Tipsだと自然に紹介できなさそうな感じもする
  - あまり物語性はない
  - 物語部分は背景やSEつきのメッセージ形式で良い
- 行けるところはランダムで選ばれた4つにする
  - 行った回数によってイベントが起こる
  - 背反なイベントがある
  - 回数を重ねることで仲間になったりアイテムがもらえたりする
    - 例
    - 市場 x 2 => 整備士が仲間になる
    - 広場 x 2 => 回復薬がもらえる
  - 単調な感じもする
- イベントによって仲間になったり、アイテムが増えたり、ステータスが変動したりする
** DONE アイテム使用・削除をsystem化する
CLOSED: [2025-08-11 Mon 00:06]
wantsToUseエンティティを生成して、そのエンティティをsystemでキャッチする。

直接削除すると共通処理が追加しにくかったりする。

共通の関数化するだけでよさそうな感じもする。実行順とかがややこしくなるのかな。メッセージを伝える用のエンティティをいちいち作るのが面倒なんだよな。コードも増える。ポリシーを考えなければ。
** DONE コメントアウト記法をサポートする
CLOSED: [2025-08-11 Mon 00:06]
無視する。
** DONE 固定敵を指定できるようにする
CLOSED: [2025-08-11 Mon 17:16]
:LOGBOOK:
CLOCK: [2025-08-11 Mon 16:39]--[2025-08-11 Mon 17:04] =>  0:25
CLOCK: [2025-08-11 Mon 16:14]--[2025-08-11 Mon 16:39] =>  0:25
CLOCK: [2025-08-11 Mon 14:42]--[2025-08-11 Mon 15:07] =>  0:25
CLOCK: [2025-08-11 Mon 13:39]--[2025-08-11 Mon 14:04] =>  0:25
CLOCK: [2025-08-11 Mon 12:54]--[2025-08-11 Mon 13:19] =>  0:25
CLOCK: [2025-08-11 Mon 12:23]--[2025-08-11 Mon 12:48] =>  0:25
:END:

仕様。

- 20階ごとでボス部屋になる。固定ステージ
- 100階ボスを倒したあとラスボス。倒すとクリア、エンディング
- とくに会話などなく、イベントパッドで戦闘になる
- 倒すと扉が開いてワープパッドの部屋にいける
- 勝つと拠点からショートカットが解禁される

メモ。

- [X] ボス戦闘イベント作成する
- [X] 戦闘内容を注入できるようにする
  - テーブルから選ぶ場合
  - 固定の敵と戦闘する場合
** DONE 設定を導入する
CLOSED: [2025-08-12 Tue 18:40]
:LOGBOOK:
CLOCK: [2025-08-11 Mon 22:21]--[2025-08-11 Mon 22:46] =>  0:25
CLOCK: [2025-08-11 Mon 21:56]--[2025-08-11 Mon 22:21] =>  0:25
CLOCK: [2025-08-11 Mon 21:31]--[2025-08-11 Mon 21:56] =>  0:25
CLOCK: [2025-08-11 Mon 21:06]--[2025-08-11 Mon 21:31] =>  0:25
CLOCK: [2025-08-11 Mon 20:40]--[2025-08-11 Mon 21:05] =>  0:25
CLOCK: [2025-08-11 Mon 20:03]--[2025-08-11 Mon 20:28] =>  0:25
CLOCK: [2025-08-11 Mon 19:38]--[2025-08-11 Mon 20:03] =>  0:25
CLOCK: [2025-08-11 Mon 19:13]--[2025-08-11 Mon 19:38] =>  0:25
CLOCK: [2025-08-11 Mon 18:47]--[2025-08-11 Mon 19:12] =>  0:25
CLOCK: [2025-08-11 Mon 18:04]--[2025-08-11 Mon 18:29] =>  0:25
CLOCK: [2025-08-11 Mon 17:27]--[2025-08-11 Mon 17:52] =>  0:25
:END:

- 開発用と本番用のデフォルト設定を分ける
- 環境変数で個別に変更できる
** DONE キーボード説明を追加する
CLOSED: [2025-08-12 Tue 18:43]

- 使用キーが散逸している
- 開発するうえでの管理ドキュメントになる
** DONE 未探索の暗闇を追加する
CLOSED: [2025-08-13 Wed 15:53]

結局、ミニマップを作成していけばいいかということになった。

未探検の部分は暗くなる。

レイキャストして、タイルごとに探索済みフラグを立てていけばよいだろう。
** DONE コミットフックを設定する
CLOSED: [2025-08-19 Tue 21:49]

- コミット前にフォーマットさせる
** DONE WASM版でもセーブできるようにする
CLOSED: [2025-08-19 Tue 21:59]

ローカルストレージに保存する。

** DONE セーブ&ロードできるようにする
CLOSED: [2025-08-19 Tue 21:59]
:LOGBOOK:
CLOCK: [2025-08-19 Tue 20:52]--[2025-08-19 Tue 21:17] =>  0:25
:END:

セーブする。
** DONE バージョン表示する
CLOSED: [2025-08-19 Tue 23:03]
:LOGBOOK:
CLOCK: [2025-08-19 Tue 22:18]--[2025-08-19 Tue 22:43] =>  0:25
CLOCK: [2025-08-19 Tue 21:53]--[2025-08-19 Tue 22:18] =>  0:25
:END:

ビルド時にバージョンを注入しているので、それをメインメニューに表示する。
** DONE 仲間入れ替え画面を追加する
CLOSED: [2025-08-21 Thu 21:09]
:LOGBOOK:
CLOCK: [2025-08-21 Thu 20:40]--[2025-08-21 Thu 21:05] =>  0:25
CLOCK: [2025-08-21 Thu 19:55]--[2025-08-21 Thu 20:20] =>  0:25
CLOCK: [2025-08-21 Thu 19:30]--[2025-08-21 Thu 19:55] =>  0:25
CLOCK: [2025-08-21 Thu 19:02]--[2025-08-21 Thu 19:27] =>  0:25
CLOCK: [2025-08-21 Thu 18:24]--[2025-08-21 Thu 18:49] =>  0:25
CLOCK: [2025-08-21 Thu 17:47]--[2025-08-21 Thu 18:12] =>  0:25
CLOCK: [2025-08-21 Thu 17:10]--[2025-08-21 Thu 17:35] =>  0:25
CLOCK: [2025-08-20 Wed 16:59]--[2025-08-20 Wed 17:24] =>  0:25
CLOCK: [2025-08-20 Wed 16:34]--[2025-08-20 Wed 16:59] =>  0:25
CLOCK: [2025-08-20 Wed 16:08]--[2025-08-20 Wed 16:33] =>  0:25
CLOCK: [2025-08-20 Wed 15:30]--[2025-08-20 Wed 15:55] =>  0:25
CLOCK: [2025-08-20 Wed 15:05]--[2025-08-20 Wed 15:30] =>  0:25
CLOCK: [2025-08-20 Wed 14:40]--[2025-08-20 Wed 15:05] =>  0:25
CLOCK: [2025-08-20 Wed 10:54]--[2025-08-20 Wed 11:19] =>  0:25
CLOCK: [2025-08-20 Wed 10:22]--[2025-08-20 Wed 10:47] =>  0:25
CLOCK: [2025-08-20 Wed 09:08]--[2025-08-20 Wed 09:33] =>  0:25
CLOCK: [2025-08-20 Wed 08:43]--[2025-08-20 Wed 09:08] =>  0:25
CLOCK: [2025-08-20 Wed 08:18]--[2025-08-20 Wed 08:43] =>  0:25
CLOCK: [2025-08-20 Wed 07:48]--[2025-08-20 Wed 08:14] =>  0:26
CLOCK: [2025-08-19 Tue 23:12]--[2025-08-19 Tue 23:37] =>  0:25
:END:

入れ替えられるようにする。

- 主人公は固定
- 最大4人
- 各職業で特色があるなかから入れ替える
- 冒険のしやすさと戦闘のしやすさのトレードオフ
- 「探求者イシハラ」みたいにしたいが、そうするとIDが変わるので面倒である。変えにくい
- Name はIDと表示名の両方の役割がある
- 人間系は変わりうる
** DONE 接触でイベント発火させる
CLOSED: [2025-08-21 Thu 21:15]
:LOGBOOK:
CLOCK: [2024-11-16 Sat 21:38]--[2024-11-16 Sat 22:03] =>  0:25
CLOCK: [2024-11-16 Sat 11:38]--[2024-11-16 Sat 12:03] =>  0:25
CLOCK: [2024-11-16 Sat 11:11]--[2024-11-16 Sat 11:36] =>  0:25
CLOCK: [2024-11-16 Sat 10:28]--[2024-11-16 Sat 10:53] =>  0:25
CLOCK: [2024-11-16 Sat 10:02]--[2024-11-16 Sat 10:27] =>  0:25
CLOCK: [2024-11-11 Mon 19:55]--[2024-11-11 Mon 20:20] =>  0:25
CLOCK: [2024-11-11 Mon 00:38]--[2024-11-11 Mon 01:03] =>  0:25
CLOCK: [2024-11-11 Mon 00:12]--[2024-11-11 Mon 00:37] =>  0:25
CLOCK: [2024-11-10 Sun 23:16]--[2024-11-10 Sun 23:42] =>  0:26
CLOCK: [2024-11-10 Sun 22:49]--[2024-11-10 Sun 23:14] =>  0:25
CLOCK: [2024-11-10 Sun 22:16]--[2024-11-10 Sun 22:41] =>  0:25
CLOCK: [2024-11-10 Sun 21:45]--[2024-11-10 Sun 22:10] =>  0:25
CLOCK: [2024-11-10 Sun 20:48]--[2024-11-10 Sun 21:13] =>  0:25
CLOCK: [2024-11-10 Sun 20:23]--[2024-11-10 Sun 20:48] =>  0:25
CLOCK: [2024-11-10 Sun 19:48]--[2024-11-10 Sun 20:13] =>  0:25
CLOCK: [2024-11-10 Sun 19:23]--[2024-11-10 Sun 19:48] =>  0:25
CLOCK: [2024-11-10 Sun 14:48]--[2024-11-10 Sun 15:13] =>  0:25
CLOCK: [2024-11-10 Sun 11:47]--[2024-11-10 Sun 12:12] =>  0:25
CLOCK: [2024-11-10 Sun 11:02]--[2024-11-10 Sun 11:27] =>  0:25
CLOCK: [2024-11-10 Sun 10:34]--[2024-11-10 Sun 10:59] =>  0:25
CLOCK: [2024-11-10 Sun 10:00]--[2024-11-10 Sun 10:25] =>  0:25
CLOCK: [2024-10-27 Sun 19:27]--[2024-10-27 Sun 19:52] =>  0:25
CLOCK: [2024-10-27 Sun 18:40]--[2024-10-27 Sun 19:05] =>  0:25
CLOCK: [2024-10-27 Sun 17:57]--[2024-10-27 Sun 18:22] =>  0:25
CLOCK: [2024-06-02 Sun 21:17]--[2024-06-02 Sun 21:42] =>  0:25
CLOCK: [2024-06-02 Sun 17:56]--[2024-06-02 Sun 18:21] =>  0:25
CLOCK: [2024-06-02 Sun 17:28]--[2024-06-02 Sun 17:53] =>  0:25
CLOCK: [2024-06-02 Sun 16:56]--[2024-06-02 Sun 17:21] =>  0:25
:END:

敵シンボルとのエンカウントとは異なる。

- 接触したときに、テキストをいくつか表示したあとに、クリアにして、メインメニューに戻す
- テキスト表示と、ステート遷移

#+caption: 疑似コード
#+begin_src go
  // ボスとの戦闘
  func bossEvent() {
          msg(`美しい庭園が広がっている。襲いかかってきた`)
          battle('Elder Witch') // 敵グループを選び、戦闘ステートに遷移
          msg('宝を入手した') // 戦闘勝利後、戻ってくる
          get('黒い珠')
          flag(TowerFinish)
          // 拠点ステートに遷移
          state(HomeState)
  }

  // フィールドでの汎用イベント
  func itemFieldEvent() {
          // 後で戻れるように現在ステートを保存しておく
          push()
          // 本文を表示するステートに遷移する。ラベル名指定で使用できる
          addEvent(msgByLabel("アイテム入手汎用"))
          // (クリック待ち) クリックされたら
          // プリセットのテーブルから選ぶ。取得した結果も表示したいな
          getRandomItemByTable("field forest")
          // ログを表示するステートに遷移する。文字列を引数に渡す
          addEvent(msgByRawText(showEventLog()))
          // (クリック待ち)
          // 元のステートに戻る
          pop()
  }

  // ================
  // 実行ループ
  // スタックの先頭を実行する
  e := events.Pop()
  // イベント遷移があれば遷移
  if e.(trans) {
          return TransPop{}
  }
  // 実行。パラメータ変動やアイテム入手など
  e()
#+end_src

#+RESULTS:
#+begin_src
#+end_src

あるいは。

#+begin_src shell
  event := func() {
      // テキスト表示
      msgByLabel("アイテム入手汎用")
      getRandomItemByTable("field forest")
  }
  State{event}
#+end_src

#+RESULTS:
#+begin_src
#+end_src

というようにしたいが、無名関数の中でstateにアクセスしたりができないのではないか。

- フィールドでの戦闘勝利後はフィールドに戻ってほしい
- イベントでの戦闘勝利後は後続のイベントを開始してほしい
- イベント進行ステートを作ればいいかな。会話終了時や戦闘終了時はpopしてもらってイベント進行ステートに戻る。前の続きから開始する
- フラグ管理とかアイテム入手とかあるから、コード形式なのが望ましい
- どうやって戻ってきて再開するか。キューをポップしてから実行してやればいいのかな。実行したものは消えて、戻ると新しいイベントを実行して遷移する、という
- 遷移先がわからないといけない
  - 基本、イベントが終わったらpopしてくる、でいいのか
  - イベントのスタックを用意する、って感じでよさそう
- 各イベント間の遷移をどう指定するか
- フラグやアイテム追加などのコマンドがあるいっぽうで、メッセージ表示などクリック待ちで次に進めるものもある
  - クリックしたあとのアクションをどうするか。場合によって違いそうだが
- 現在のStateは、各ステートで状態遷移を記述している。それを、全体から遷移できるようにする
  - 基本的に、メッセージ表示イベントは終了後popすればいい
- 戻る必要のあるものだけ、スタックに保存しておけばいい
- イベント名指定で表示する場合と、直接文字列を指定できるものがある
- 基本的に、終了後ポップするタイプのステートしかない
  - テキスト表示
  - 戦闘
- 要するにステート遷移系と途中で挟む系ができればいい(アイテム入手など)
- ステートスタック
  - イベントステートの中でさらにスタックを保持する
  - 共通のステートスタックを使う
- 本質的に、複数のステートをまとめて扱いたいということだ。組み合わせたい

#+begin_src
- eventName: "塔の遺跡 最深部イントロ"
- eventName: "塔の遺跡 ボス"
- eventName: "森の遺跡 最深部イントロ"
- eventName: "森の遺跡 ボス"
#+end_src

- とりあえずステータス変化はなしでやってみるか
- 接触でどうやってステートを変化させればいいのか
  - 通知用entityを発行する
  - steteで通知コンポーネントを検知する
** DONE ダンジョンステートが重い
CLOSED: [2025-08-23 Sat 10:14]
:LOGBOOK:
CLOCK: [2025-08-23 Sat 09:45]--[2025-08-23 Sat 10:10] =>  0:25
CLOCK: [2025-08-23 Sat 00:50]--[2025-08-23 Sat 01:15] =>  0:25
CLOCK: [2025-08-22 Fri 23:53]--[2025-08-23 Sat 00:18] =>  0:25
CLOCK: [2025-08-22 Fri 23:11]--[2025-08-22 Fri 23:36] =>  0:25
:END:

いつのまにかWASM版でFPSが10くらいしか出ないことに気づいた。
** DONE 角の壁がないとレイが抜ける
CLOSED: [2025-08-23 Sat 14:30]
:LOGBOOK:
CLOCK: [2025-08-23 Sat 12:22]--[2025-08-23 Sat 12:47] =>  0:25
CLOCK: [2025-08-23 Sat 11:40]--[2025-08-23 Sat 12:05] =>  0:25
CLOCK: [2025-08-23 Sat 11:07]--[2025-08-23 Sat 11:32] =>  0:25
CLOCK: [2025-08-23 Sat 10:39]--[2025-08-23 Sat 11:04] =>  0:25
CLOCK: [2025-08-23 Sat 10:14]--[2025-08-23 Sat 10:39] =>  0:25
:END:

角も埋めるようにする。
** DONE フロアの枠をどうするか考える
CLOSED: [2025-08-23 Sat 18:06]
:LOGBOOK:
CLOCK: [2025-08-23 Sat 17:18]--[2025-08-23 Sat 17:43] =>  0:25
CLOCK: [2025-08-23 Sat 16:42]--[2025-08-23 Sat 17:07] =>  0:25
CLOCK: [2025-08-23 Sat 14:31]--[2025-08-23 Sat 14:56] =>  0:25
:END:

端が真っ黒なので、わかりづらい。壁で囲うか、色を変えてわかりやすくする。
** DONE ステージをシード指定で生成できるようにする
CLOSED: [2025-08-23 Sat 21:17]
:LOGBOOK:
CLOCK: [2025-08-23 Sat 20:52]--[2025-08-23 Sat 21:17] =>  0:25
CLOCK: [2025-08-23 Sat 20:20]--[2025-08-23 Sat 20:45] =>  0:25
CLOCK: [2025-08-23 Sat 18:31]--[2025-08-23 Sat 18:56] =>  0:25
CLOCK: [2025-08-23 Sat 18:06]--[2025-08-23 Sat 18:31] =>  0:25
:END:

現在はダンジョンステートでのVRTは毎回差分が出るのでオフにしている。
** DONE 部屋ビルダーのバリエーションを増やす
CLOSED: [2025-08-24 Sun 12:44]
:LOGBOOK:
CLOCK: [2025-08-24 Sun 12:13]--[2025-08-24 Sun 12:38] =>  0:25
CLOCK: [2025-08-24 Sun 11:44]--[2025-08-24 Sun 12:09] =>  0:25
CLOCK: [2025-08-23 Sat 23:13]--[2025-08-23 Sat 23:38] =>  0:25
CLOCK: [2025-08-23 Sat 22:48]--[2025-08-23 Sat 23:13] =>  0:25
CLOCK: [2025-08-23 Sat 22:12]--[2025-08-23 Sat 22:37] =>  0:25
CLOCK: [2025-08-23 Sat 21:17]--[2025-08-23 Sat 21:42] =>  0:25
:END:

大部屋を作る。
** DONE 戦闘でのミスを直す
CLOSED: [2025-08-27 Wed 19:18]

パーティにいないメンバーもコマンドが出るので直す。

** DONE デバッグ用のステージデバッグメニュー項目を追加する
CLOSED: [2025-08-27 Wed 19:18]
:LOGBOOK:
CLOCK: [2025-08-26 Tue 21:21]--[2025-08-26 Tue 21:46] =>  0:25
CLOCK: [2025-08-26 Tue 20:56]--[2025-08-26 Tue 21:21] =>  0:25
CLOCK: [2025-08-26 Tue 20:21]--[2025-08-26 Tue 20:46] =>  0:25
CLOCK: [2025-08-26 Tue 19:55]--[2025-08-26 Tue 20:20] =>  0:25
CLOCK: [2025-08-25 Mon 20:48]--[2025-08-25 Mon 21:13] =>  0:25
CLOCK: [2025-08-25 Mon 20:17]--[2025-08-25 Mon 20:42] =>  0:25
CLOCK: [2025-08-24 Sun 23:30]--[2025-08-24 Sun 23:55] =>  0:25
CLOCK: [2025-08-24 Sun 23:03]--[2025-08-24 Sun 23:28] =>  0:25
CLOCK: [2025-08-24 Sun 22:38]--[2025-08-24 Sun 23:03] =>  0:25
CLOCK: [2025-08-24 Sun 22:12]--[2025-08-24 Sun 22:37] =>  0:25
CLOCK: [2025-08-24 Sun 20:40]--[2025-08-24 Sun 21:05] =>  0:25
CLOCK: [2025-08-24 Sun 20:15]--[2025-08-24 Sun 20:40] =>  0:25
CLOCK: [2025-08-24 Sun 19:44]--[2025-08-24 Sun 20:09] =>  0:25
CLOCK: [2025-08-24 Sun 19:19]--[2025-08-24 Sun 19:44] =>  0:25
CLOCK: [2025-08-24 Sun 17:28]--[2025-08-24 Sun 17:53] =>  0:25
CLOCK: [2025-08-24 Sun 17:01]--[2025-08-24 Sun 17:26] =>  0:25
CLOCK: [2025-08-24 Sun 16:30]--[2025-08-24 Sun 16:55] =>  0:25
CLOCK: [2025-08-24 Sun 16:01]--[2025-08-24 Sun 16:26] =>  0:25
CLOCK: [2025-08-24 Sun 13:44]--[2025-08-24 Sun 14:09] =>  0:25
CLOCK: [2025-08-24 Sun 12:44]--[2025-08-24 Sun 13:09] =>  0:25
:END:

すぐ生成できるようにする。項目が多いから、スクロールできないといけないだろうな。

- Columns は未使用なのでは
** DONE アイテムを配置する
CLOSED: [2025-09-06 Sat 18:32]
:LOGBOOK:
CLOCK: [2025-09-06 Sat 18:06]--[2025-09-06 Sat 18:31] =>  0:25
CLOCK: [2025-09-06 Sat 17:29]--[2025-09-06 Sat 17:54] =>  0:25
CLOCK: [2025-09-06 Sat 17:01]--[2025-09-06 Sat 17:26] =>  0:25
:END:
ステージ初期化時にアイテムを配置する。
** DONE フィールドログを表示する
CLOSED: [2025-09-07 Sun 09:38]
:LOGBOOK:
CLOCK: [2025-09-07 Sun 08:37]--[2025-09-07 Sun 09:02] =>  0:25
CLOCK: [2025-09-06 Sat 23:12]--[2025-09-06 Sat 23:37] =>  0:25
CLOCK: [2025-09-06 Sat 22:47]--[2025-09-06 Sat 23:12] =>  0:25
CLOCK: [2025-09-06 Sat 22:22]--[2025-09-06 Sat 22:47] =>  0:25
CLOCK: [2025-09-06 Sat 21:43]--[2025-09-06 Sat 22:08] =>  0:25
CLOCK: [2025-09-06 Sat 20:33]--[2025-09-06 Sat 20:58] =>  0:25
CLOCK: [2025-09-06 Sat 19:20]--[2025-09-06 Sat 19:45] =>  0:25
CLOCK: [2025-09-06 Sat 18:34]--[2025-09-06 Sat 18:59] =>  0:25
:END:

- 文字を表示する
** DONE systemのUI関数を移動する
CLOSED: [2025-09-07 Sun 20:49]
:LOGBOOK:
CLOCK: [2025-09-07 Sun 18:32]--[2025-09-07 Sun 18:57] =>  0:25
CLOCK: [2025-09-07 Sun 17:55]--[2025-09-07 Sun 18:20] =>  0:25
CLOCK: [2025-09-07 Sun 17:20]--[2025-09-07 Sun 17:45] =>  0:25
CLOCK: [2025-09-07 Sun 16:54]--[2025-09-07 Sun 17:19] =>  0:25
CLOCK: [2025-09-07 Sun 16:15]--[2025-09-07 Sun 16:40] =>  0:25
CLOCK: [2025-09-07 Sun 14:43]--[2025-09-07 Sun 15:08] =>  0:25
CLOCK: [2025-09-07 Sun 12:48]--[2025-09-07 Sun 13:13] =>  0:25
:END:

UIを別のpackageに移動する。
** DONE ローグライクで必要なくなった箇所を削除する
CLOSED: [2025-09-14 Sun 10:44]
:LOGBOOK:
CLOCK: [2025-09-13 Sat 18:15]--[2025-09-13 Sat 18:40] =>  0:25
CLOCK: [2025-09-13 Sat 17:47]--[2025-09-13 Sat 18:12] =>  0:25
CLOCK: [2025-09-13 Sat 17:17]--[2025-09-13 Sat 17:42] =>  0:25
CLOCK: [2025-09-13 Sat 16:31]--[2025-09-13 Sat 16:56] =>  0:25
CLOCK: [2025-09-08 Mon 22:02]--[2025-09-08 Mon 22:27] =>  0:25
CLOCK: [2025-09-08 Mon 20:31]--[2025-09-08 Mon 20:56] =>  0:25
CLOCK: [2025-09-07 Sun 22:29]--[2025-09-07 Sun 22:54] =>  0:25
:END:

- [X] 既存の戦闘を削除する
- [X] Positionを削除する
- [X] 仲間を削除する
  - InPartyを削除する
  - AliveやDeadも削除
  - TargetAlivePartyを削除する
  - HP/SPバーが消えてしまっている
** DONE HPゼロでゲームオーバー画面に遷移する
CLOSED: [2025-09-21 Sun 10:01]
:LOGBOOK:
CLOCK: [2025-09-20 Sat 21:49]--[2025-09-20 Sat 22:14] =>  0:25
CLOCK: [2025-09-20 Sat 21:23]--[2025-09-20 Sat 21:48] =>  0:25
CLOCK: [2025-09-20 Sat 20:37]--[2025-09-20 Sat 21:02] =>  0:25
CLOCK: [2025-09-20 Sat 20:06]--[2025-09-20 Sat 20:31] =>  0:25
CLOCK: [2025-09-20 Sat 19:13]--[2025-09-20 Sat 19:38] =>  0:25
CLOCK: [2025-09-20 Sat 18:07]--[2025-09-20 Sat 18:32] =>  0:25
CLOCK: [2025-09-20 Sat 17:32]--[2025-09-20 Sat 17:57] =>  0:25
CLOCK: [2025-09-20 Sat 17:05]--[2025-09-20 Sat 17:30] =>  0:25
:END:

止まっているので。

keyboardInputはグローバルに保持したほうがよくないか。
** DONE ターン世界を導入する
CLOSED: [2025-09-21 Sun 11:10]
:LOGBOOK:
CLOCK: [2025-09-18 Thu 08:17]--[2025-09-18 Thu 08:42] =>  0:25
CLOCK: [2025-09-15 Mon 15:59]--[2025-09-15 Mon 16:24] =>  0:25
CLOCK: [2025-09-15 Mon 15:33]--[2025-09-15 Mon 15:58] =>  0:25
CLOCK: [2025-09-15 Mon 13:58]--[2025-09-15 Mon 14:23] =>  0:25
CLOCK: [2025-09-15 Mon 13:27]--[2025-09-15 Mon 13:52] =>  0:25
CLOCK: [2025-09-15 Mon 12:44]--[2025-09-15 Mon 13:09] =>  0:25
CLOCK: [2025-09-15 Mon 12:19]--[2025-09-15 Mon 12:44] =>  0:25
CLOCK: [2025-09-15 Mon 10:52]--[2025-09-15 Mon 11:17] =>  0:25
CLOCK: [2025-09-15 Mon 10:27]--[2025-09-15 Mon 10:52] =>  0:25
CLOCK: [2025-09-14 Sun 20:35]--[2025-09-14 Sun 21:00] =>  0:25
CLOCK: [2025-09-14 Sun 20:09]--[2025-09-14 Sun 20:34] =>  0:25
CLOCK: [2025-09-14 Sun 19:44]--[2025-09-14 Sun 20:09] =>  0:25
CLOCK: [2025-09-14 Sun 19:19]--[2025-09-14 Sun 19:44] =>  0:25
CLOCK: [2025-09-14 Sun 18:53]--[2025-09-14 Sun 19:18] =>  0:25
CLOCK: [2025-09-14 Sun 18:23]--[2025-09-14 Sun 18:48] =>  0:25
CLOCK: [2025-09-14 Sun 17:35]--[2025-09-14 Sun 18:00] =>  0:25
CLOCK: [2025-09-14 Sun 14:48]--[2025-09-14 Sun 15:13] =>  0:25
CLOCK: [2025-09-14 Sun 14:01]--[2025-09-14 Sun 14:26] =>  0:25
CLOCK: [2025-09-14 Sun 13:31]--[2025-09-14 Sun 13:56] =>  0:25
CLOCK: [2025-09-14 Sun 13:06]--[2025-09-14 Sun 13:31] =>  0:25
CLOCK: [2025-09-14 Sun 11:39]--[2025-09-14 Sun 12:04] =>  0:25
CLOCK: [2025-09-14 Sun 11:14]--[2025-09-14 Sun 11:39] =>  0:25
CLOCK: [2025-09-14 Sun 10:44]--[2025-09-14 Sun 11:09] =>  0:25
:END:
- [X] ターンベースシステムを導入する
- [X] 移動などを対応させる
- [X] ローグライク式に戦闘できるようにする
- [X] action points を TurnBasedにする
- [X] 足踏みできるようにする

メモ。

- [X] キャラクターAP100を仮定せず、実際の値を取得して
- [X] depguardを使ってv1をガードして
** DONE パラメータ設計
CLOSED: [2025-09-21 Sun 11:10]
:LOGBOOK:
CLOCK: [2025-09-20 Sat 13:15]--[2025-09-20 Sat 13:40] =>  0:25
CLOCK: [2025-09-20 Sat 11:13]--[2025-09-20 Sat 11:38] =>  0:25
:END:

- HP(体力)
- EP(電気) -- 特殊行動。装備によって回復方法が異なる
- SP(スタミナ) -- ダッシュなど。空腹度を消費して短時間に回復する
- 空腹度。速度・スタミナペナルティが出る。さまざまな回復アイテムがある
** DONE engineの再設計・リファクタリング
CLOSED: [2025-09-23 Tue 09:56]
:LOGBOOK:
CLOCK: [2025-09-22 Mon 21:43]--[2025-09-22 Mon 22:08] =>  0:25
CLOCK: [2025-09-22 Mon 20:56]--[2025-09-22 Mon 21:21] =>  0:25
CLOCK: [2025-09-21 Sun 22:15]--[2025-09-21 Sun 22:40] =>  0:25
CLOCK: [2025-09-21 Sun 21:47]--[2025-09-21 Sun 22:12] =>  0:25
CLOCK: [2025-09-21 Sun 21:21]--[2025-09-21 Sun 21:46] =>  0:25
CLOCK: [2025-09-21 Sun 20:54]--[2025-09-21 Sun 21:19] =>  0:25
CLOCK: [2025-09-21 Sun 20:19]--[2025-09-21 Sun 20:44] =>  0:25
CLOCK: [2025-09-21 Sun 19:18]--[2025-09-21 Sun 19:43] =>  0:25
CLOCK: [2025-09-21 Sun 18:43]--[2025-09-21 Sun 19:08] =>  0:25
CLOCK: [2025-09-21 Sun 17:42]--[2025-09-21 Sun 18:07] =>  0:25
CLOCK: [2025-09-21 Sun 17:17]--[2025-09-21 Sun 17:42] =>  0:25
CLOCK: [2025-09-21 Sun 12:54]--[2025-09-21 Sun 13:19] =>  0:25
CLOCK: [2025-09-21 Sun 12:17]--[2025-09-21 Sun 12:42] =>  0:25
CLOCK: [2025-09-21 Sun 11:38]--[2025-09-21 Sun 12:03] =>  0:25
:END:

- 使いにくい
- 使い分けが不明瞭
- interface{}が多い
- 静的ファイルは一箇所にまとめたいので、embed packageを作ってそれを呼び出すようにしたい
- それをパースするパッケージ

構造。

- assets/assets.go (ファイルembed)
- engine
  - resources
** DONE セーブデータJSONをソートする
CLOSED: [2025-09-23 Tue 16:33]
:LOGBOOK:
CLOCK: [2025-09-23 Tue 14:59]--[2025-09-23 Tue 15:24] =>  0:25
CLOCK: [2025-09-23 Tue 11:05]--[2025-09-23 Tue 11:30] =>  0:25
CLOCK: [2025-08-21 Thu 16:33]--[2025-08-21 Thu 16:58] =>  0:25
CLOCK: [2025-08-21 Thu 16:04]--[2025-08-21 Thu 16:29] =>  0:25
:END:

毎回差分が出て何が変わったかわかりにくいのでソートして保存する。
** DONE タイプライターを使うように置き換える
CLOSED: [2025-09-23 Tue 16:33]
:LOGBOOK:
CLOCK: [2025-08-05 Tue 19:10]--[2025-08-05 Tue 19:35] =>  0:25
CLOCK: [2025-07-26 Sat 22:19]--[2025-07-26 Sat 22:44] =>  0:25
CLOCK: [2025-07-26 Sat 21:54]--[2025-07-26 Sat 22:19] =>  0:25
CLOCK: [2025-07-26 Sat 21:24]--[2025-07-26 Sat 21:49] =>  0:25
CLOCK: [2025-07-26 Sat 20:59]--[2025-07-26 Sat 21:24] =>  0:25
CLOCK: [2025-07-26 Sat 20:34]--[2025-07-26 Sat 20:59] =>  0:25
CLOCK: [2025-07-26 Sat 20:01]--[2025-07-26 Sat 20:26] =>  0:25
CLOCK: [2025-07-26 Sat 19:31]--[2025-07-26 Sat 19:56] =>  0:25
:END:

- [X] intro
- battle
