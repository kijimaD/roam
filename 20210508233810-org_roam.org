:PROPERTIES:
:ID:       815a2c31-7ddb-40ad-bae0-f84e1cfd8de1
:header-args+: :wrap
:END:
#+title: Org-roam

* 概要
Org-roamはRoam Research[fn:1]の非公式な[[id:1ad8c3d5-97ba-4905-be11-e6f2626127ad][Emacs]]版。
[[id:7e85e3f3-a6b9-447e-9826-307a3618dac8][org-mode]]をベースに、目的ファイルへのアクセスしやすさ、リンク、グラフ化の機能を強化する。
文書のトップページ[[id:2709c815-cd38-4679-86e8-ff2d3b8817e4][Insomnia]]のグラフは、org-roamが生成するsqliteレコードを加工して作成している。

- GitHubリポジトリ :: https://github.com/org-roam/org-roam
- 公式サイト :: https://www.orgroam.com/
- マニュアル :: https://www.orgroam.com/manual.html
* Memo
** db関連がおかしくなったとき
dbへ書き込みできませんエラーが出たとき。

- ~(org-roam-db-location)~ でDBが保存されているパスを調べる。
- .dbファイルを削除。
- ~(org-roam-db-clear-all)~ でキャッシュ削除。
- ~(org-roam-db-sync)~ によってdbファイルを再作成。

~Selecting deleted buffer~ が出るとき。

- ライブラリをすべて削除してインストールし直す
- emacsql-sqliteを保存しているディレクトリに行く。sqliteディレクトリ下でmakeしなおす
  - make clean && make emacsql-sqlite
** バックエンドの違いを吸収する関数
いわゆるコネクターパターン。接続に使用する関数を返す関数。

#+begin_src git-permalink
https://github.com/kd-collective/org-roam/blob/abe63b436035049923ae96639b9b856697047779/org-roam-db.el#L123-L137
#+end_src

#+RESULTS:
#+begin_results emacs-lisp
(defun org-roam-db--conn-fn ()
  "Return the function for creating the database connection."
  (cl-case org-roam-database-connector
    (sqlite
     (progn
       (require 'emacsql-sqlite)
       #'emacsql-sqlite))
    (libsqlite3
     (progn
       (require 'emacsql-libsqlite3)
       #'emacsql-libsqlite3))
    (sqlite3
     (progn
       (require 'emacsql-sqlite3)
       #'emacsql-sqlite3))))
#+end_results
* Tasks
* References
** [[https://futurismo.biz/using-org-roam-one-year-2022/][🖊知的生産のキラーアプリOrg-roamを１年使い倒し学ぶとはなにか考えたポエム(2022) | Futurismo]]
:LOGBOOK:
CLOCK: [2023-10-08 Sun 20:17]--[2023-10-08 Sun 20:42] =>  0:25
:END:
ZettelkastenやOrg-roamの解説。
** [[https://www.orgroam.com/manual.html][Org-roam User Manual]]
マニュアル。
** [[https://www.youtube.com/watch?v=AyhPmypHDEw][Getting Started with Org Roam - Build a Second Brain in Emacs - YouTube]]
[[id:fa497359-ae3f-494a-b24a-9822eefe67ad][System Crafters]]のOrg Roam紹介。
** [[https://www.mhatta.org/wp/2021/02/20/org-mode-101-9/#org125e180][Org mode 教室 その9: org-roam でアイデアをひねり出す]]
具体的なワークフローがわかりやすい。
** https://blog.jethro.dev/posts/introducing_org_roam/
作者サイトのマニュアル。
** https://blog.jethro.dev/posts/org_mode_workflow_preview/
org-modeのワークフロー。
* Archives
** CLOSE Unify workflow management with roam
CLOSED: [2021-09-04 Sat 12:42]
https://d12frosted.io/posts/2021-01-16-task-management-with-roam-vol5.html
** CLOSE CI, sqliteを入れて試してみる
CLOSED: [2021-09-04 Sat 12:07]
- search emacsql
Default install sqlite on ubuntu, so does not matter.
** DONE 基本的キーバインド
CLOSED: [2021-08-29 Sun 21:18]
 - find(C-c n f)
 - バックリンク(C-c n l)
 - Roamリンク挿入(C-c n i)補完を有効にすることであまり使わなくなる。
** DONE idリンクをpublishできない問題
CLOSED: [2021-08-29 Sun 19:53]
roamのidがhtmlに変換できないよう。
#+begin_quote
Unable to resolve link
#+end_quote
になる。

#+begin_src emacs-lisp
  (setq org-hugo-base-dir ".")
  (setq org-export-with-broken-links t)
#+end_src
するとできるが、idリンクを辿れない。
ほかのサイトではidがあってもできてるように見える。
https://hugocisneros.com/blog/my-org-roam-notes-workflow/
orgのバージョンを最新にしたが変わらず。

公式で言及。
https://github.com/org-roam/org-roam/wiki/Hitchhiker's-Rough-Guide-to-Org-roam-V2#export

#+begin_src emacs-lisp
(setq org-id-link-to-org-use-id t)
(setq org-id-extra-files (org-roam--list-files org-roam-directory))
#+end_src
↓で設定していた。これを設定すると成功した。
https://hugocisneros.com/org-config/#configuration

https://gist.github.com/hugcis/1f2d2ad4b98b07ee543f10232ba1b025
#+begin_src emacs-lisp
  (require 'find-lisp)
  (defun hugcis/publish-note (file)
    "Publish a note in FILE."
    (interactive)
    (with-current-buffer (find-file-noselect file)
      (projectile-mode -1)
      (setq org-hugo-section "notes"
            org-hugo-base-dir "."
            citeproc-org-org-bib-header "* Bibliography\n<ol class=\"biblio-list\">"
            citeproc-org-org-bib-footer "</ol>")
      (let ((org-id-extra-files (find-lisp-find-files org-roam-directory "\.org$")))
          (org-hugo-export-wim-to-md))))
#+end_src

#+begin_src shell
  find . -name '*.org' | emacs --batch -l ./publish.el --funcall kd/publish
#+end_src
** DONE 初期設定
CLOSED: [2021-08-29 Sun 21:17]
⚠バージョンが上がって設定が変わった。この内容は古い。
roamのデフォルトディレクトリを作成して、そこでファイルが作成されたり、検索対象になる。

#+begin_src emacs-lisp
  (require 'org-roam)
  (add-hook 'after-init-hook 'org-roam-mode)
  (make-directory "~/roam" t)
  (setq org-roam-directory "~/roam")
#+end_src

#+begin_src emacs-lisp
  (setq org-roam-completion-everywhere t)
  (define-key org-mode-map (kbd "C-M-i") 'completion-at-point)
#+end_src
リンク補完が有効になります。非常に便利。

#+begin_src emacs-lisp
  (define-key org-roam-mode-map (kbd "C-c n l") 'org-roam)
  (define-key org-roam-mode-map (kbd "C-c n f") 'org-roam-find-file)
  (define-key org-roam-mode-map (kbd "C-c n g") 'org-roam-graph)
  (define-key org-mode-map (kbd "C-c n i") 'org-roam-insert)
  (define-key org-mode-map (kbd "C-c n I") 'org-roam-insert-immediate)
#+end_src
** DONE 外部リンクをグラフに表示したくない
CLOSED: [2021-09-02 Thu 10:30]

~org-roam-graph~ でファイルリンクだけのつながりを表示したい。
v1ではファイルリンクだけで、外部リンクは出てなくてわかりやすかった。

[[https://github.com/org-roam/org-roam-ui][org-roam-ui]]を使ってみた。めちゃかっこいい。

org-roam-graph-link-hidden-types でhttp, httpsを指定すると消せた。
これでCIでも出力できるはず。
#+begin_src emacs-lisp
(setq org-roam-graph-link-hidden-types '("https" "http" "file"))
#+end_src
** DONE d3でのグラフ出力
CLOSED: [2021-12-25 Sat 16:36]
:LOGBOOK:
CLOCK: [2021-12-25 Sat 15:34]--[2021-12-25 Sat 16:36] =>  1:02
:END:

1. org-roam-db-syncでdbファイルを生成する
2. dbファイルをグラフとしてjsonに変換する
3. [[id:a6980e15-ecee-466e-9ea7-2c0210243c0d][JavaScript]]のd3ライブラリでjsonを読み込む
4. ブラウザ描画
** CLOSE Selecting deleted bufferエラー
CLOSED: [2022-05-15 Sun 19:05]
新しく構築した環境にて、 ~(org-roam-db-sync)~ をやると ~Selecting deleted buffer~ がエラーが出る。
依存しているemacs-sqlite関係でなにかおかしくなっているよう。同じくemacs-sqliteに依存しているmagit-forgeも動かない。

メインマシン、[[id:2d35ac9e-554a-4142-bba7-3c614cbfe4c4][GitHub Actions]]環境ではうまくいっているので、sqlite関係か、.emacs.dで何か起きている。
うまくいくようになった。関連ライブラリが修正されたよう。
** DONE dbを使って何をしているのか                               :DontKnow:
CLOSED: [2022-08-12 Fri 22:13]
:LOGBOOK:
CLOCK: [2022-08-12 Fri 21:32]--[2022-08-12 Fri 21:57] =>  0:25
CLOCK: [2022-08-12 Fri 20:56]--[2022-08-12 Fri 21:21] =>  0:25
CLOCK: [2022-08-12 Fri 20:25]--[2022-08-12 Fri 20:50] =>  0:25
CLOCK: [2022-08-12 Fri 11:00]--[2022-08-12 Fri 11:25] =>  0:25
CLOCK: [2022-08-12 Fri 10:27]--[2022-08-12 Fri 10:52] =>  0:25
CLOCK: [2022-08-11 Thu 22:33]--[2022-08-11 Thu 22:58] =>  0:25
CLOCK: [2022-08-11 Thu 16:50]--[2022-08-11 Thu 17:53] =>  1:03
CLOCK: [2022-08-11 Thu 16:01]--[2022-08-11 Thu 16:26] =>  0:25
CLOCK: [2022-08-11 Thu 15:11]--[2022-08-11 Thu 15:36] =>  0:25
CLOCK: [2022-08-11 Thu 14:39]--[2022-08-11 Thu 15:04] =>  0:25
CLOCK: [2022-08-11 Thu 14:12]--[2022-08-11 Thu 14:37] =>  0:25
:END:
デフォルトではsqliteを利用しているのは知っているが、実際何をしているのだろうか。結論: ファイルの変更をdbに同期し、再利用しやすいようにしている。

まずorg-roam-db.elを見てみる。

#+caption: Database APIの箇所に、クエリを実行する関数がある。削除関数...dbのバイナリファイルを見て、存在していればテーブルを消す
#+begin_src git-permalink
https://github.com/kd-collective/org-roam/blob/abe63b436035049923ae96639b9b856697047779/org-roam-db.el#L279-L288
#+end_src

#+RESULTS:
#+begin_results emacs-lisp
;;; Database API
;;;; Clearing
(defun org-roam-db-clear-all ()
  "Clears all entries in the Org-roam cache."
  (interactive)
  (when (file-exists-p org-roam-db-location)
    (dolist (table (mapcar #'car org-roam-db--table-schemata))
      (org-roam-db-query `[:delete :from ,table]))))

(defun org-roam-db-clear-file (&optional file)
#+end_results

#+caption: ファイル情報をinsertする。syncしたときに呼び出す
#+begin_src git-permalink
https://github.com/kd-collective/org-roam/blob/abe63b436035049923ae96639b9b856697047779/org-roam-db.el#L309-L323
#+end_src

#+RESULTS:
#+begin_results emacs-lisp
(defun org-roam-db-insert-file ()
  "Update the files table for the current buffer.
If UPDATE-P is non-nil, first remove the file in the database."
  (let* ((file (buffer-file-name))
         (file-title (org-roam-db--file-title))
         (attr (file-attributes file))
         (atime (file-attribute-access-time attr))
         (mtime (file-attribute-modification-time attr))
         (hash (org-roam-db--file-hash)))
    (org-roam-db-query
     [:insert :into files
      :values $v1]
     (list (vector file file-title hash atime mtime)))))

(defun org-roam-db-get-scheduled-time ()
#+end_results

org-roam-db-insert-fileが呼ばれることによって、orgファイルの追加をdbと同期する。こういった感じで1ファイルの追加、削除、変更に対応する同期関数がある。

↑のみでは1ファイルのみなので、org-roamファイル全体に大して同期をかける関数がある。org-roam-db-sync。変更のタイプを判定して、各関数で処理し、orgファイルとdbの内容を同期する。なるほど。

#+caption: 全org-roamファイルに対して、差分があればdb同期をかける
#+begin_src git-permalink
https://github.com/kd-collective/org-roam/blob/abe63b436035049923ae96639b9b856697047779/org-roam-db.el#L611-L643
#+end_src

#+RESULTS:
#+begin_results emacs-lisp
(defun org-roam-db-sync (&optional force)
  "Synchronize the cache state with the current Org files on-disk.
If FORCE, force a rebuild of the cache from scratch."
  (interactive "P")
  (org-roam-db--close) ;; Force a reconnect
  (when force (delete-file org-roam-db-location))
  (org-roam-db) ;; To initialize the database, no-op if already initialized
  (org-roam-require '(org-ref oc))
  (let* ((gc-cons-threshold org-roam-db-gc-threshold)
         (org-agenda-files nil)
         (org-roam-files (org-roam-list-files))
         (current-files (org-roam-db--get-current-files))
         (modified-files nil))
    (dolist (file org-roam-files)
      (let ((contents-hash (org-roam-db--file-hash file)))
        (unless (string= (gethash file current-files)
                         contents-hash)
          (push file modified-files)))
      (remhash file current-files))
    (emacsql-with-transaction (org-roam-db)
      (org-roam-dolist-with-progress (file (hash-table-keys current-files))
          "Clearing removed files..."
        (org-roam-db-clear-file file))
      (org-roam-dolist-with-progress (file modified-files)
          "Processing modified files..."
        (condition-case err
            (org-roam-db-update-file file 'no-require)
          (error
           (org-roam-db-clear-file file)
           (lwarn 'org-roam :error "Failed to process %s with error %s, skipping..."
                  file (error-message-string err))))))))

;;;###autoload
#+end_results

直にdbに追加する関数を呼ぶことはなく、ファイルの変更をもとに同期関数経由でdbに追加されるようだ。ファイルの方が先に存在していて、後でdbと同期する。

#+caption: 取得関数
#+begin_src git-permalink
https://github.com/kd-collective/org-roam/blob/abe63b436035049923ae96639b9b856697047779/org-roam-node.el#L461-L477
#+end_src

#+RESULTS:
#+begin_results emacs-lisp
;;;###autoload
(cl-defun org-roam-node-find (&optional other-window initial-input filter-fn &key templates)
  "Find and open an Org-roam node by its title or alias.
INITIAL-INPUT is the initial input for the prompt.
FILTER-FN is a function to filter out nodes: it takes an `org-roam-node',
and when nil is returned the node will be filtered out.
If OTHER-WINDOW, visit the NODE in another window.
The TEMPLATES, if provided, override the list of capture templates (see
`org-roam-capture-'.)"
  (interactive current-prefix-arg)
  (let ((node (org-roam-node-read initial-input filter-fn)))
    (if (org-roam-node-file node)
        (org-roam-node-visit node other-window)
      (org-roam-capture-
       :node node
       :templates templates
       :props '(:finalize find-file)))))
#+end_results

- ファイルがあれば、visitを呼び出す
- ファイルがなければ、作成するためにcaptureを呼び出す。dbと関係することは同期時にやるので、ここでは一切考えなくてよく、責務分離できている

dbへの同期をみた。利用はどうしているのだろうか。

探す系は、org-roam-node.elに含まれている。

#+begin_src git-permalink
https://github.com/kd-collective/org-roam/blob/abe63b436035049923ae96639b9b856697047779/org-roam-node.el#L461-L477
#+end_src

#+RESULTS:
#+begin_results emacs-lisp
;;;###autoload
(cl-defun org-roam-node-find (&optional other-window initial-input filter-fn &key templates)
  "Find and open an Org-roam node by its title or alias.
INITIAL-INPUT is the initial input for the prompt.
FILTER-FN is a function to filter out nodes: it takes an `org-roam-node',
and when nil is returned the node will be filtered out.
If OTHER-WINDOW, visit the NODE in another window.
The TEMPLATES, if provided, override the list of capture templates (see
`org-roam-capture-'.)"
  (interactive current-prefix-arg)
  (let ((node (org-roam-node-read initial-input filter-fn)))
    (if (org-roam-node-file node)
        (org-roam-node-visit node other-window)
      (org-roam-capture-
       :node node
       :templates templates
       :props '(:finalize find-file)))))
#+end_results

- nodeが存在していればファイルを開く。そうでなければorg-roam-captureでテンプレート画面を開く
- 開くときもdbに接続して情報を取ってくるはずだが、コードのどの箇所かわからなかった

** DONE メモのとり方について再考
CLOSED: [2023-10-08 Sun 10:20]
:PROPERTIES:
:Effort:   2:00
:END:
:LOGBOOK:
CLOCK: [2023-10-07 Sat 20:08]--[2023-10-07 Sat 20:33] =>  0:25
CLOCK: [2023-10-07 Sat 19:30]--[2023-10-07 Sat 19:55] =>  0:25
CLOCK: [2023-10-07 Sat 18:53]--[2023-10-07 Sat 19:18] =>  0:25
CLOCK: [2023-10-07 Sat 17:41]--[2023-10-07 Sat 18:06] =>  0:25
CLOCK: [2023-10-07 Sat 17:08]--[2023-10-07 Sat 17:33] =>  0:25
CLOCK: [2023-10-07 Sat 16:51]--[2023-10-07 Sat 17:08] =>  0:17
:END:

- denoteとroamの使い分けが微妙
- 1つの見出しが1つのファイルに属するとは限らない
- 文章としてあまり読みやすいものではない

** DONE [[https://www.amazon.co.jp/TAKE-NOTES-%E2%80%95%E2%80%95%E3%83%A1%E3%83%A2%E3%81%A7%E3%80%81%E3%81%82%E3%81%AA%E3%81%9F%E3%81%A0%E3%81%91%E3%81%AE%E3%82%A2%E3%82%A6%E3%83%88%E3%83%97%E3%83%83%E3%83%88%E3%81%8C%E8%87%AA%E7%84%B6%E3%81%AB%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%AA%E3%82%8B-%E3%82%BA%E3%83%B3%E3%82%AF%E3%83%BB%E3%82%A2%E3%83%BC%E3%83%AC%E3%83%B3%E3%82%B9-ebook/dp/B09HZ38SFZ/ref=sr_1_1?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&crid=4MF6SE54C9DJ&keywords=take+notes&qid=1696764621&sprefix=take+note%2Caps%2C196&sr=8-1][Amazon.co.jp: TAKE NOTES!――メモで、あなただけのアウトプットが自然にできるようになる eBook : ズンク・アーレンス, 二木 夢子: Kindleストア]]
CLOSED: [2023-10-09 Mon 13:20]
:PROPERTIES:
:Effort:   4:00
:END:
:LOGBOOK:
CLOCK: [2023-10-09 Mon 12:45]--[2023-10-09 Mon 13:10] =>  0:25
CLOCK: [2023-10-09 Mon 12:07]--[2023-10-09 Mon 12:32] =>  0:25
CLOCK: [2023-10-09 Mon 11:35]--[2023-10-09 Mon 12:00] =>  0:25
CLOCK: [2023-10-09 Mon 11:09]--[2023-10-09 Mon 11:34] =>  0:25
CLOCK: [2023-10-09 Mon 10:43]--[2023-10-09 Mon 11:09] =>  0:26
CLOCK: [2023-10-09 Mon 01:50]--[2023-10-09 Mon 02:15] =>  0:25
CLOCK: [2023-10-08 Sun 23:24]--[2023-10-08 Sun 23:49] =>  0:25
CLOCK: [2023-10-08 Sun 22:48]--[2023-10-08 Sun 23:13] =>  0:25
CLOCK: [2023-10-08 Sun 22:23]--[2023-10-08 Sun 22:48] =>  0:25
CLOCK: [2023-10-08 Sun 21:27]--[2023-10-08 Sun 21:31] =>  0:04
CLOCK: [2023-10-08 Sun 20:46]--[2023-10-08 Sun 21:11] =>  0:25
:END:
Zettelkastenの解説本。
* 脚注
[fn:1] https://roamresearch.com/ Webでのアウトラインツール。
