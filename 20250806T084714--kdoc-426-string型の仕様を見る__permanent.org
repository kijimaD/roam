:properties:
:ID: 20250806T084714
:mtime:    20250904204140
:ctime:    20250806084722
:end:
#+title:      KDOC 426: string型の仕様を見る
#+date:       [2025-08-06 Wed 08:47]
#+filetags:   :permanent:
#+identifier: 20250806T084714

* この文書のステータス
- 作成
  - [X] 2025-08-08 貴島
- レビュー
  - [X] 2025-09-04 貴島

* 概要

Go言語には組み込みでstring型がある。言語仕様書を見ると、シンプルに書かれている。

↓string型はバイト列の並びにすぎない。ここでの言外の着目は、単に「バイト列」にだけ言及しているという点だ。並べ方(エンコーディング。UTF-8など)については一切言及していない。入れる中身に制約はない。

#+begin_quote
A string value is a (possibly empty) sequence of bytes.

--- [[https://go.dev/ref/spec#String_types][string type]]から抜粋
#+end_quote

#+begin_src go
  import "fmt"
  func main() {
          abc := string([]byte{0x41, 0x42, 0x43})
          fmt.Printf("%#v, ", abc)
          あ := string([]byte{0xe3, 0x81, 0x82})
          fmt.Printf("%#v, ", あ)

          // UTF-8として無効
          invalid := string([]byte{0xe3})
          fmt.Printf("%#v, ", invalid)
  }
#+end_src

#+RESULTS:
#+begin_src
"ABC", "あ", "\xe3",
#+end_src

len()にstring型を引数にして実行するとバイト数が返ってくる(シーケンスが表現する「文字」数でなく)。string型は単なるバイト列だということを認識すると、一貫性のある挙動に見える。

↓いっぽうで、文字列リテラルは、「暗黙的にUTF-8エンコードである」と明記されている。

#+begin_quote
The value of a raw string literal is the string composed of the uninterpreted (implicitly UTF-8-encoded) characters between the quotes;

--- [[https://go.dev/ref/spec#String_literals][string literal]]から抜粋
#+end_quote

であるから、一般的なstring型を初期化する方法である文字列リテラル ~""~ でstring型の変数を初期化するとUTF-8の並びのバイト列になるのだが、string型にシーケンスに対する制限があるわけではない。

* 関連
なし。
