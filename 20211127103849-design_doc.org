:PROPERTIES:
:ID:       d26cecee-48f4-466f-853c-8b65bdb2580a
:END:
#+title: Design doc
* 概要
Design doc はエンジニアの書く仕様書である。
コードを書く前に書き、明確化したりチームのメンバーにプロジェクトの全体像を共有するために使う。

利点。
- プロジェクト初期で何も形になっていないときはコミュニケーションの齟齬が起きやすいので防ぐことができる。
- コード実装より前にテストケースの追加、またマーケティングといった他部署も同時に動くことが可能になる。
* Memo
* Tasks
** TODO [[https://www.shoeisha.co.jp/book/detail/9784798166834][ライティングソフトウェア（Juval Löwy 株式会社ロングテール　長尾高弘）｜翔泳社の本]]
:LOGBOOK:
CLOCK: [2024-04-03 Wed 22:37]--[2024-04-03 Wed 23:02] =>  0:25
CLOCK: [2024-04-03 Wed 21:14]--[2024-04-03 Wed 21:39] =>  0:25
CLOCK: [2024-04-03 Wed 20:42]--[2024-04-03 Wed 21:07] =>  0:25
CLOCK: [2024-04-03 Wed 20:01]--[2024-04-03 Wed 20:26] =>  0:25
:END:

ソフトウェア、プロジェクトの設計本。

- 機能別分解をしてはいけない。変更への対応が難しいから
- 変動性に基づいて分解せよ
  - 変更される可能性がある領域を明らかにし、その部分をサービスやシステムの部品としてカプセル化する
- 分解の重要な基準、機能ではなく変化を探す
- 要件分析の目的は、変動領域を見つけること
- 変動性と可変性の違い
- 変動性の軸が見つからないようなものはカプセル化してはならない。システム内とのコンポーネントとの関連を質問してはならない
- 1人のユーザが同じコンポーネントを永遠に使っていられるだろうか。答えがノーなら、それはなぜか
  - 時間の経過とともにその顧客が何かを変えたくなることがわかっている場合が多い。そして変えたくなる何かをカプセル化する
  - すべての顧客が、↑で作ったシステムを使えるかどうかを自問自答する。答えがノーなら、顧客によって変えたくなる部分がどれかをはっきりさせ、それをカプセル化してさらにシステムを作る
  - 変動性の軸にひっかかるすべてのものがカプセル化されるまで、このような形でデザインを切り分けていく
- 軸はほとんど必ず独立していなければならない。時間とともに1人のユーザで変わることは現時点のすべてのユーザで違っていることはないはずであり、逆も当てはまる
- 自分の家を見て、時間とともに何が変わったかを観察する。家具のアレンジは変わり、一部は新しいものに置き換わっている。家具は家の中の変動領域だという結論が得られる。電化製品、家の住人は変動領域だ
- ほとんどの要求仕様には要件を装うソリューションが溢れかえっている。機能別分解は苦痛を最大限まで拡大する
- 変動領域の可能性があるもののリストを作る

トレーディングシステムの例。

- フロント
  - Webポータル
  - トレーダーアプリA
  - トレーダーアプリB
- トレードワークフロー(ロケール)
  - 取引の細部は変わりうる
  - ワークフローの収納というオペレーションコンセプト
  - 取引対象ごとに別々の取引ワークフローを持てる
  - ロケールごとに異なるワークフローを持てる
  - 複数のマシンとセッションにまたがって長時間実行されるワークフローをサポートできる
  - 接続されたシングルセッションの取引と長期に渡って実行される分散トレードが同じように扱われる。対象性と一貫性は望ましい性質である
- 分析ワークフロー(ロケール)
  - 市場データの形式上や値の変動性
- 通知
- フィード受信
  - 社内
  - 社外
    - A, B, C,...
- トレードアクセス
- ワークフローアクセス
- 顧客アクセス
- フィードアクセス
- トレードストレージ
- ワークフローストレージ
- 顧客ストレージ

ビジネスの本質は変動しない。ビジネスの本質が変わるなら、古いシステムを壊して最初からやり直すことが許容される。

- 日常的によく使っているソフトウェアシステムで練習する
- 自分が携わった過去のシステムを再検証する
- ユースケースの図による表現としてはアクティビティ図を推奨する
- アクティビティ図とユースケース図を混同しない
  - アクティビティ図は時間をシーケンスを表現できる
  - ユースケース図はユーザ中心で時間やシーケンスを表現できない

* Reference
** [[https://note.com/simplearchitect/n/n931fc8020eca][Up front design の復権｜牛尾 剛｜note]]
できるプログラマはDesign documentを先に書くらしい。
あとで書くのはつまらないし、頭の中が整理される。
** [[https://cataclysmdda.org/design-doc/][CDDA Design Document]]
実際のOSSのゲームの例。
** [[http://www.chromium.org/developers/design-documents][Design Documents - The Chromium Projects]]
** [[https://www.flywheel.jp/topics/design-doc-of-design-doc/][デザインドックで学ぶデザインドック | フライウィール]]
* Archives
