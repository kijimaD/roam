:properties:
:ID: 20240221T210823
:end:
#+title:      KDOC 101: 先にインターフェースを文書化するとやりやすい
#+date:       [2024-02-21 Wed 21:08]
#+filetags:   :draft:essay:
#+identifier: 20240221T210823

# (denote-rename-file-using-front-matter (buffer-file-name) 0)
# (org-roam-tag-remove)
# (org-roam-tag-add)

# ====ポリシー。
# 1ファイル1アイデア。
# 1ファイルで内容を完結させる。
# 常にほかのエントリとリンクする。
# 自分の言葉を使う。
# 参考文献を残しておく。
# 自分の考えを加える。
# 構造を気にしない。
# エントリ間の接続を発見したら、接続エントリを追加する。カード間にあるリンクの関係を説明するカード。
# アイデアがまとまったらアウトラインエントリを作成する。リンクをまとめたエントリ。
# エントリを削除しない。古いカードのどこが悪いかを説明する新しいカードへのリンクを追加する。
# 恐れずにカードを追加する。無意味の可能性があっても追加しておくことが重要。

* この文書のステータス
- 作成
  - [X] 2024-02-21 貴島
- レビュー
  - [ ] <署名>
# (progn (kill-line -1) (insert (format "  - [X] %s 貴島" (format-time-string "%Y-%m-%d"))))

# 関連をつけた。
# タイトルがフォーマット通りにつけられている。
# 内容をブラウザに表示して読んだ(作成とレビューのチェックは同時にしない)。
# 文脈なく読めるのを確認した。
# おばあちゃんに説明できる。
# いらない見出しを削除した。
# タグを適切にした。
# すべてのコメントを削除した。
* インターフェースを書く
全くのゼロからあまり知らない機能を作るとき、コードを書き出すまでが遅い。そういうときテキストでブレークダウンして書き出したりはするが、コードに踏み出す最初の一歩は重い。

そういうとき、疑似コードでインターフェースを先に書くと早く進むことに気づいた。直近の、趣味のゲーム開発ではコードを書き始める前に、こんな感じのを書いた↓。「アイテム合成」に使う「素材」をどう設計するかだ(「素材」というデータ構造はまだできていない)。インターフェースを書く。

#+caption: 例
#+begin_src go
  material.GetCount("ガラクタ") // => 3
  material.IncCount("ガラクタ", 1) // (3 + 1) => 4
  material.DeclCount("小さな花", 1) // (2 - 1) => 1
#+end_src

ここからわかるのは、「素材」にはデータ構造としては名前と数量しか必要ないということだ。あとは数量を変化させるインターフェースがあれば事足りる。

ユースケースをコードにすることで必要なデータ構造を決めやすくなった。データ構造ができてしまえばインターフェース通りに作ると出来上がる。頭の中では今までもなんとなくやっていたのだが、テキスト化すると効果が大きいように見える。

* 関連
- [[id:20231128T074518][KDOC 59: ECSを使ってサンプルゲームを作る]]。で、慣れてないゲームのコードを実装しているときに考えた
