:properties:
:ID: 20250806T084714
:mtime:    20250904002424
:ctime:    20250806084722
:end:
#+title:      KDOC 426: string型の仕様を見る
#+date:       [2025-08-06 Wed 08:47]
#+filetags:   :draft:permanent:
#+identifier: 20250806T084714

# (kd/denote-kdoc-rename)
# (denote-rename-file-using-front-matter (buffer-file-name) 0)
# (save-excursion (while (re-search-backward ":draft" nil t) (replace-match "")))
# (flush-lines "^\\#\s.+?")

# ====ポリシー。
# 1ファイル1アイデア。
# 1ファイルで内容を完結させる。
# 常にほかのエントリとリンクする。
# 自分の言葉を使う。
# 参考文献を残しておく。
# 文献メモの場合は、感想と混ぜないこと。1つのアイデアに反する
# ツェッテルカステンの議論に寄与するか。それで本を書けと言われて書けるか
# 頭のなかやツェッテルカステンにある問いとどのようにかかわっているか
# エントリ間の接続を発見したら、接続エントリを追加する。カード間にあるリンクの関係を説明するカード。
# アイデアがまとまったらアウトラインエントリを作成する。リンクをまとめたエントリ。
# エントリを削除しない。古いカードのどこが悪いかを説明する新しいカードへのリンクを追加する。
# 恐れずにカードを追加する。無意味の可能性があっても追加しておくことが重要。
# 個人の感想・意思表明ではない。事実や書籍情報に基づいている

# ====永久保存メモのルール。
# 自分の言葉で書く。
# 後から読み返して理解できる。
# 他のメモと関連付ける。
# ひとつのメモにひとつのことだけを書く。
# メモの内容は1枚で完結させる。
# 論文の中に組み込み、公表できるレベルである。

# ====水準を満たす価値があるか。
# その情報がどういった文脈で使えるか。
# どの程度重要な情報か。
# そのページのどこが本当に必要な部分なのか。
# 公表できるレベルの洞察を得られるか

# ====フロー。
# 1. 「走り書きメモ」「文献メモ」を書く
# 2. 1日1回既存のメモを見て、自分自身の研究、思考、興味にどのように関係してくるかを見る
# 3. 追加すべきものだけ追加する

* この文書のステータス
- 作成
  - [X] 2025-08-08 貴島
- レビュー
  - [ ] <署名>
# (progn (kill-line -1) (insert (format "  - [X] %s 貴島" (format-time-string "%Y-%m-%d"))))

# チェックリスト ================
# 関連をつけた。
# タイトルがフォーマット通りにつけられている。
# 内容をブラウザに表示して読んだ(作成とレビューのチェックは同時にしない)。
# 文脈なく読めるのを確認した。
# おばあちゃんに説明できる。
# いらない見出しを削除した。
# タグを適切にした。
# すべてのコメントを削除した。
* 概要
# 本文(見出しも設定する)

Go言語には組み込みでstring型がある。言語仕様書を見ると、シンプルに書かれている。

↓string型はバイト列の並びにすぎない。ここでの言外の着目は、単に「バイト列」にだけ言及しているという点だ。並べ方(エンコーディング。UTF-8など)については一切言及していない。入れる中身に制約はない。

#+begin_quote
A string value is a (possibly empty) sequence of bytes.

--- [[https://go.dev/ref/spec#String_types][string type]]から抜粋
#+end_quote

#+begin_src go
  import "fmt"
  func main() {
          abc := string([]byte{0x41, 0x42, 0x43})
          fmt.Printf("%#v, ", abc)
          あ := string([]byte{0xe3, 0x81, 0x82})
          fmt.Printf("%#v, ", あ)

          // UTF-8として無効
          invalid := string([]byte{0xe3})
          fmt.Printf("%#v, ", invalid)
  }
#+end_src

#+RESULTS:
#+begin_src
"ABC", "あ", "\xe3",
#+end_src

len()にstring型を引数にして実行するとバイト数が返ってくる(シーケンスが表現する「文字」数でなく)。string型は単なるバイト列だということを認識すると、一貫性のある挙動に見える。

↓いっぽうで、文字列リテラルは、「暗黙的にUTF-8エンコードである」と明記されている。

#+begin_quote
The value of a raw string literal is the string composed of the uninterpreted (implicitly UTF-8-encoded) characters between the quotes;

--- [[https://go.dev/ref/spec#String_literals][string literal]]から抜粋
#+end_quote

であるから、通常の方法(文字列リテラル)でstring型の変数を初期化するとUTF-8のバイト列になるのだが、string型にシーケンスに対する制限があるわけではない。

* 関連
# 関連するエントリ。なぜ関連させたか理由を書く。意味のあるつながりを意識的につくる。
# - この事実は自分のこのアイデアとどう整合するか。
# - この現象はあの理論でどう説明できるか。
# - ふたつのアイデアは互いに矛盾するか、互いを補っているか。
# - いま聞いた内容は以前に聞いたことがなかったか。
# - メモ y についてメモ x はどういう意味か。
# - 対立する
# - 修正する
# - 補足する
# - 付け加えるもの
# - アイデア同士を組み合わせて新しいものを生み出せないか
# - どんな疑問が浮かんだか
なし。
