:PROPERTIES:
:ID:       7b14035e-cd37-424d-96c3-ab2988d1c377
:END:
#+title: development
* 概要
現代的なソフトウェア開発についてまとめる。
チームやプロダクト全体の生産性を上げるために、いくつかの分野がある。

- [[id:eaf6ed04-7927-4a16-ba94-fbb9f6e76166][CI]]
- [[id:2c4cb3a7-7a8a-4a3b-88c2-2c5e69515764][CD]]
- [[id:0ed2422b-c69d-4acd-8516-e57815233364][Surveillance]]
- [[id:5f669fae-12c2-4562-a037-a67f58a0dc72][deploy]]
- [[id:120300fc-27c2-428e-9fbc-49e14172f6df][Testing]]
- [[id:d26cecee-48f4-466f-853c-8b65bdb2580a][Design doc]]
- [[id:79178e63-a446-4f47-b832-82128cdf854a][documentation]]
- [[id:d68263db-a8c5-478e-b456-8a753eb34416][communication]]
* Memo
** 設計画像を作る良い方法: ローカルのdrawio
設計において、画像の作成はやっかいな仕事の1つだ。1度きりの作成ならいいが、あとで手直しすることを考えると、専用のソフトウェアを使うことにいきつく。drawioのVSCode拡張を使って、ローカルで書くのが最高。

ファイルの拡張子にdrawio.svgをつけると、画像をそのまま開いて編集できる。

- [[id:90c6b715-9324-46ce-a354-63d09403b066][Git]]管理できる
- [[id:6b889822-21f1-4a3e-9755-e3ca52fa0bc4][GitHub]]では画像のdiffが表示できる
- 保存と編集が同じファイルで、編集のハードルが低い
- 単なるSVGなので、閲覧や配信がしやすい

** 開発の流れ

- 開発体制確認
  - 担当範囲
  - 反映フロー
  - チームの調整フロー
    - ある機能を反映するために調整する必要がある範囲
- 要件定義
  - 疑問は必ずメモって片っ端から聞く
  - 会議を入れまくる
  - 目標期限とどこまでやるか決める
  - 共通のサーバ環境をどうするか決める
  - 不明瞭なところは聞いて確認してドキュメントに残す
  - 権限
- API設計
  - 先にレビューしてもらう日付を決める
  - エンドポイント決定
  - レスポンス設計
  - ここで[[id:a833c386-3cca-49eb-969a-5af58991250d][OpenAPI]]で作ってモックを返せるようにするとフロントエンドの開発をブロックしない
- DB設計
  - 先にレビューしてもらう日付を決める
  - リソース・アクションを洗い出し
  - ライフサイクル考慮
  - 暗号化
  - スキーマドキュメント作成
  - ER図を見て確認
- 開発環境準備
  - デプロイ
  - 依存サービスのモック
  - 環境変数
  - テストアカウント
- 本番環境考慮
  - デプロイ
  - ログ
  - 環境変数

** 便利ツール

開発で役に立つツール群。

- 各言語の[[id:e5663529-8095-4fc8-8fb5-500dd4471a73][Linter]]
- 各言語のフォーマッタ
- DBドキュメント生成ツール(tblsなど)
  - 生成したMarkdownはmdbook+[[https://github.com/dvogt23/book-summary][book-summary]]でビルドする
- 設計書出力ツール(mdbookなど)
- 画像出力ツール([[id:5e514773-5808-4a6c-a271-e4de4cfe6f1a][Mermaid]]など)
- [[id:a833c386-3cca-49eb-969a-5af58991250d][OpenAPI]]
  - バリデーション(openapi-validatorなど)
  - ドキュメント生成ツール(redocなど)
  - モックサーバ(prismなど)
  - 実装チェックツール(kin-openapiなど)

** コンテナ運用の課題

- Nodeの管理
- コンテナのスケジューリング
- ローリングアップデート
- スケーリング / オートスケーリング
- コンテナの死活監視
- 障害児のセルフヒーリング
- サービスディスカバリ
- ロードバランシング
- データの管理
- ワークロードの管理
- ログの管理
- Infrastructure as Code
- エコシステムとの連携や拡張

** 個人開発でのゲームの作り方
[[https://www.youtube.com/watch?v=NsMHicoZTzQ&list=LLINB8QZLRld5MRw0HFemiVQ&index=2][How To PLAN your Game as a Solo Developer - YouTube]]

- プロトタイプと本番用を分ける
- プロトタイプではゲームの機能、コードに集中する
- 本番用ではゲームのコンテンツ、データに集中する
- プレイできるゲームからフィードバックを得ることが重要
** devopsの4つの柱
- 文化
- 自動化
- 測定
- 共有
* Tasks
** TODO [[https://knooto.info/software-design-access-control/][システムのアクセス制御 (操作権限管理) 設計 | knooto]]
管理権限で参考になる。
* Reference
** [[https://betterprogramming.pub/chaos-engineering-and-open-sourcing-of-netflix-chaos-generator-chaos-monkey-a68873f46269][Chaos Engineering. Open-sourcing Netflix’s chaos… | by Cloud_Freak | Better Programming]] :Read:
カオスエンジニアリング。
** [[https://sneak.berlin/20200220/discord-is-not-an-acceptable-choice-for-free-software-projects/][Jeffrey Paul: Discord Is Not An Acceptable Choice For Free Software Projects]]
** [[https://www.oreilly.co.jp/books/9784873117966/][O'Reilly Japan - Infrastructure as Code]]
読もう。
** [[https://www.buildinsider.net/enterprise/devops/01][DevOpsとは何か？ そのツールと組織文化、アジャイルとの違い - Build Insider]]
devopsのわかりやすい概要。
** [[https://aws.amazon.com/jp/devops/what-is-devops/][DevOps とは? - DevOps と AWS | AWS]]
DevOpsの説明。
** [[https://rastam.hatenablog.com/entry/questions-to-ask-in-code-reviews][コードレビューで聞く質問集 - rastam on rails]]
コードレビューでの確認テンプレート。
** [[https://www.oreilly.co.jp/books/9784873116303/][O'Reilly Japan - Team Geek]]
Googleのギークたちはいかにしてチームを作るのか。
** [[https://developers.google.com/style][About this guide | Google developer documentation style guide | Google Developers]]
Googleのドキュメンテーションのスタイルガイド。
** [[https://www.atlassian.com/ja/agile][アジャイルについて | Atlassian]]
アジャイルの詳しい解説。
* Archives
