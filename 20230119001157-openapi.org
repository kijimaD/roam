:PROPERTIES:
:ID:       a833c386-3cca-49eb-969a-5af58991250d
:END:
#+title: OpenAPI
* 概要
OpenAPIはREST APIのインターフェースを記述するための仕様。
* Memo
* Tasks
** TODO [[https://tech.buysell-technologies.com/entry/2021/09/21/095238#openapi-validator-%E3%81%AE%E5%B0%8E%E5%85%A5][治安のいいOpenAPIの開発環境を作る - バイセル Tech Blog]]
[[id:eaf6ed04-7927-4a16-ba94-fbb9f6e76166][CI]]でメンテしやすさを保証する。
** DONE my_openapi整理
CLOSED: [2023-01-29 Sun 12:32]
:PROPERTIES:
:Effort:   0:30
:END:
:LOGBOOK:
CLOCK: [2023-01-27 Fri 22:45]--[2023-01-27 Fri 23:10] =>  0:25
CLOCK: [2023-01-27 Fri 22:19]--[2023-01-27 Fri 22:44] =>  0:25
:END:
- [[https://github.com/kijimaD/my_openapi][kijimaD/my_openapi]]

- 例を整理した。
- Lintを[[id:2d35ac9e-554a-4142-bba7-3c614cbfe4c4][GitHub Actions]]で実行させた
- ビルドを[[id:2d35ac9e-554a-4142-bba7-3c614cbfe4c4][GitHub Actions]]で実行させた
* Reference
* Archives
** DONE OpenAPIの使い方を調べる
CLOSED: [2023-01-19 Thu 00:13]
:LOGBOOK:
CLOCK: [2023-01-16 Mon 23:34]--[2023-01-16 Mon 23:59] =>  0:25
CLOCK: [2023-01-15 Sun 23:00]--[2023-01-15 Sun 23:25] =>  0:25
CLOCK: [2023-01-15 Sun 22:31]--[2023-01-15 Sun 22:56] =>  0:25
:END:
API設計・ドキュメント作成をスムーズに行えるようにする。

- モックサーバ
- PDF生成

まあ、楽にできる。いくつかの例からyamlを覚えればいいだけだ。あとは継続的にドキュメントをアップデートできる仕組み…たとえば実装と合っているかテストする([[id:e04aa1a3-509c-45b2-ac64-53d69c961214][Rails]]でいうところのCommitee)を入れれば、完璧。

- [[https://nextat.co.jp/staff/archives/253][LaravelアプリケーションのAPIがSwagger/OpenAPIドキュメントに準拠していることを透過的にテストする｜Laravel｜PHP｜開発ブログ｜株式会社Nextat（ネクスタット）]]
- [[https://github.com/lezhnev74/openapi-psr7-validator][lezhnev74/openapi-psr7-validator: It validates PSR-7 messages (HTTP request/response) against OpenAPI specifications]]
