:PROPERTIES:
:ID:       5e514773-5808-4a6c-a271-e4de4cfe6f1a
:END:
#+title: Mermaid
* 概要
Mermaidはテキストで作図するためのライブラリ。[[id:a6980e15-ecee-466e-9ea7-2c0210243c0d][JavaScript]]で実装されている。

[[id:1ad8c3d5-97ba-4905-be11-e6f2626127ad][Emacs]]の[[id:7e85e3f3-a6b9-447e-9826-307a3618dac8][org-mode]]で実行できるようにしていて、これがめちゃ便利。[[id:1658782a-d331-464b-9fd7-1f8233b8b7f8][Docker]]で設定してるいるので、依存もない。
* Memo
** 例
#+begin_src mermaid :file images/20230206221415-le58S6Wo0w.png
flowchart LR

A[Hard] -->|Text| B(Round)
B --> C{Decision}
C -->|One| D[Result 1]
C -->|Two| E[Result 2]
#+end_src

#+RESULTS:
[[file:images/20230206221415-le58S6Wo0w.png]]

#+begin_src mermaid :file images/20230206221359-bzQPfJvXEu.png
flowchart RL

  A[Hard] -->|Text| B(Round)
  B --> C{Decision}
  C -->|One| D[Result 1]
  C -->|Two| E[Result 2]
#+end_src

#+RESULTS:
[[file:images/20230206221359-bzQPfJvXEu.png]]

#+begin_src mermaid :file images/20230206221435-Xgfe0VbEjM.png
sequenceDiagram
    Alice->>John: Hello John, how are you?
    John-->>Alice: Great!
    Alice-)John: See you later!
#+end_src

#+RESULTS:
[[file:images/20230206221435-Xgfe0VbEjM.png]]

#+begin_src mermaid :file images/20230206221451-IwXDFrgfiw.png
  flowchart TB
    subgraph GHA
    a1(ビルド)
    end
    subgraph GHP
    p1(HTML)
    end
    subgraph GHCR
    cr1(image)
    end
    GHCR -- Image Pull --> GHP
    GHA -- Image Push --> GHCR
#+end_src

#+RESULTS:
[[file:images/20230206221451-IwXDFrgfiw.png]]

#+caption: https://dev.classmethod.jp/articles/workflow-tips-with-mermaid/
#+begin_src mermaid :file images/20230206221505-u5MbB9yw6U.png
  sequenceDiagram
      autonumber
      actor お客様
      participant form as 申し込みフォーム
      participant s3 as 申込書補保管S3
      participant admin as 管理システム
      お客様->>form: サービス申し込み
      Note left of form: 申込書
      form->>s3: 申込書保存
      Note left of s3: 申込書
      form->>お客様: 受付処理中連絡
      s3->>s3: FSSによる申込書マルウェアチェック
      s3->>admin: 申込書マルウェアチェック完了通知
      admin->>s3: 申込書取得リクエスト
      s3->>admin: 申込書取得レスポンス
      Note left of admin: 申込書
      admin->>admin: 申込書バリデーションチェック
      admin->>admin: 申込情報登録
      admin->>お客様: 受付完了連絡
#+end_src

#+RESULTS:
[[file:images/20230206221505-u5MbB9yw6U.png]]

#+caption: https://zenn.dev/yasuhiroki/articles/dd0feae790ba41
#+begin_src mermaid :file images/20230206221517-zRUUkeqGql.png
  sequenceDiagram
  autonumber
  Client->>+Server: GET /issues
  Server--)Server2: 非同期リクエスト
  Server-->>-Client: response
  loop
    Server2-->Server2: なにかしら
    Note right of Server2: 処理が完了しなくても<br/>10秒で強制終了する
  end
#+end_src

#+RESULTS:
[[file:images/20230206221517-zRUUkeqGql.png]]

#+begin_src mermaid :file images/20230206221532-93SxrlWvaH.png
  erDiagram
  users{
    int id
    string hello
  }

  articles{
    int id
    string content
  }

  users ||--o{ articles: ""
#+end_src

#+RESULTS:
[[file:images/20230206221532-93SxrlWvaH.png]]

クラス図ではなぜか日本語が使えるので、ER図を書くときもこっちのほうがよい。

#+begin_src mermaid :file images/20230206220952-Wn8bXbkbzF.png
  classDiagram
    class Customer{
        id int
    }

    Customer "1" --> "*" Ticket
    日本語が "1" --> "*" 使える
#+end_src

#+RESULTS:
[[file:images/20230206220952-Wn8bXbkbzF.png]]

* Tasks
** TODO mermaid-modeのdockerコマンドを直す
READMEにはdocker対応と書かれているのだが、関数がdockerへ対応したシェルコマンドになっていないので、PRを出せるとよさそう。ただnpmを使うのと両立させるいい方法が思いつかない。
* Reference
* Archives
