:properties:
:ID: 20241123T012402
:mtime:    20241123092308
:ctime:    20241123012407
:end:
#+title:      KDOC 305: 加算と左ビットシフトの実行速度を計測する
#+date:       [2024-11-23 Sat 01:24]
#+filetags:   :draft:permanent:
#+identifier: 20241123T012402

# (denote-rename-file-using-front-matter (buffer-file-name) 0)
# (save-excursion (while (re-search-backward ":draft" nil t) (replace-match "")))
# (flush-lines "^\\#\s.+?")

# ====ポリシー。
# 1ファイル1アイデア。
# 1ファイルで内容を完結させる。
# 常にほかのエントリとリンクする。
# 自分の言葉を使う。
# 参考文献を残しておく。
# 文献メモの場合は、感想と混ぜないこと。1つのアイデアに反する
# ツェッテルカステンの議論に寄与するか。それで本を書けと言われて書けるか
# 頭のなかやツェッテルカステンにある問いとどのようにかかわっているか
# エントリ間の接続を発見したら、接続エントリを追加する。カード間にあるリンクの関係を説明するカード。
# アイデアがまとまったらアウトラインエントリを作成する。リンクをまとめたエントリ。
# エントリを削除しない。古いカードのどこが悪いかを説明する新しいカードへのリンクを追加する。
# 恐れずにカードを追加する。無意味の可能性があっても追加しておくことが重要。
# 個人の感想・意思表明ではない。事実や書籍情報に基づいている

# ====永久保存メモのルール。
# 自分の言葉で書く。
# 後から読み返して理解できる。
# 他のメモと関連付ける。
# ひとつのメモにひとつのことだけを書く。
# メモの内容は1枚で完結させる。
# 論文の中に組み込み、公表できるレベルである。

# ====水準を満たす価値があるか。
# その情報がどういった文脈で使えるか。
# どの程度重要な情報か。
# そのページのどこが本当に必要な部分なのか。
# 公表できるレベルの洞察を得られるか

# ====フロー。
# 1. 「走り書きメモ」「文献メモ」を書く
# 2. 1日1回既存のメモを見て、自分自身の研究、思考、興味にどのように関係してくるかを見る
# 3. 追加すべきものだけ追加する

* この文書のステータス
- 作成
  - [X] 2024-11-23 貴島
- レビュー
  - [ ] <署名>
# (progn (kill-line -1) (insert (format "  - [X] %s 貴島" (format-time-string "%Y-%m-%d"))))

# チェックリスト ================
# 関連をつけた。
# タイトルがフォーマット通りにつけられている。
# 内容をブラウザに表示して読んだ(作成とレビューのチェックは同時にしない)。
# 文脈なく読めるのを確認した。
# おばあちゃんに説明できる。
# いらない見出しを削除した。
# タグを適切にした。
# すべてのコメントを削除した。
* 概要
# 本文(見出しも設定する)

#+begin_src
  42 + 42
  42 * 2
#+end_src

は、どちらが早いだろうか。これは言い換えると加算命令と左ビットシフトはどちらが早いか、ということになる。Go言語のベンチマークツールで加算命令と左ビットシフトの実行速度を計測する。

まず、命令がコンパイラによって省略されないように調整する。デフォルトの挙動だと、使用されない変数はコンパイル結果から省かれるため ~//go:noinline~ が必要。乗算は2の倍数なので、左ビットシフト演算に変換されている。

#+begin_export html
<iframe width="800px" height="400px" src="https://godbolt.org/e#g:!((g:!((g:!((h:codeEditor,i:(filename:'1',fontScale:14,fontUsePx:'0',j:1,lang:go,selection:(endColumn:9,endLineNumber:7,positionColumn:9,positionLineNumber:7,selectionStartColumn:9,selectionStartLineNumber:7,startColumn:9,startLineNumber:7),source:'//+Type+your+code+here,+or+load+an+example.%0A//+Your+function+name+should+start+with+a+capital+letter.%0Apackage+main%0A%0Afunc+main()+%7B%0A%09_+%3D+add(42)%0A%09_+%3D+shl(42)%0A%7D%0A%0A//go:noinline%0Afunc+add(a+int)+int+%7B%0A%09return+a+%2B+a%0A%7D%0A%0A//go:noinline%0Afunc+shl(a+int)+int+%7B%0A%09return+a+*+2%0A%7D%0A'),l:'5',n:'0',o:'Go+source+%231',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0'),(g:!((h:compiler,i:(compiler:gl1232,filters:(b:'0',binary:'1',binaryObject:'1',commentOnly:'0',debugCalls:'1',demangle:'0',directives:'0',execute:'1',intel:'1',libraryCode:'0',trim:'0',verboseDemangling:'0'),flagsViewOpen:'1',fontScale:14,fontUsePx:'0',j:1,lang:go,libs:!(),options:'',overrides:!(),selection:(endColumn:1,endLineNumber:1,positionColumn:1,positionLineNumber:1,selectionStartColumn:1,selectionStartLineNumber:1,startColumn:1,startLineNumber:1),source:1),l:'5',n:'0',o:'+x86-64+gc+1.23.2+(Editor+%231)',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0')),l:'2',n:'0',o:'',t:'0')),version:4"></iframe>
#+end_export

次に、↑で確認したコードでテストファイルを作成する。

#+caption: bench_test.go
#+begin_src go
package main

import "testing"

func BenchmarkAdd(b *testing.B) {
	for i := 0; i < b.N; i++ {
		_ = add(42)
	}
}

func BenchmarkShl(b *testing.B) {
	for i := 0; i < b.N; i++ {
		_ = shl(42)
	}
}

//go:noinline
func add(a int) int {
	return a + a
}

//go:noinline
func shl(a int) int {
	return a * 2
}
#+end_src

100回分ベンチマークを実行し、結果を保存する。

#+caption: ベンチマークを保存する
#+begin_src shell
  go test -bench . -benchmem -count 100 > exec.log
#+end_src

複数回取得したベンチマーク結果をbenchstatによってまとめて見る。

#+caption: benchstatの実行と結果
#+begin_src shell
  # benchstatをインストールする
  go install golang.org/x/perf/cmd/benchstat@latest
  # 100回分の計測結果をまとめる
  benchstat exec.log

  (略)
  goos: linux
  goarch: amd64
  pkg: playground/at-2024-11-22-223539
  cpu: 12th Gen Intel(R) Core(TM) i7-1260P
              │   exec.log   │
              │    sec/op    │
  Add-16        0.4828n ± 0%
  Shl-16        0.4969n ± 1%
  (略)
#+end_src

ということで、0.1ナノ秒、加算の方が早い。さらに、左ビットシフト演算は加算より計算時間にややばらつきがあることを確認した。

* 関連
# 関連するエントリ。なぜ関連させたか理由を書く。意味のあるつながりを意識的につくる。
# この事実は自分のこのアイデアとどう整合するか。
# この現象はあの理論でどう説明できるか。
# ふたつのアイデアは互いに矛盾するか、互いを補っているか。
# いま聞いた内容は以前に聞いたことがなかったか。
# メモ y についてメモ x はどういう意味か。
- [[id:20241122T231155][KDOC 304: 加算と乗算どちらが早いか?]]。確認したきっかけとなる疑問
