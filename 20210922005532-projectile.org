:PROPERTIES:
:ID:       cddd7435-414b-4f6b-bfbf-90c6c1bd77f0
:END:
#+title: projectile
* 概要
projectileは[[id:1ad8c3d5-97ba-4905-be11-e6f2626127ad][Emacs]] packageの1つ。
[[id:90c6b715-9324-46ce-a354-63d09403b066][Git]]単位でプロジェクトとし、ファイル移動をしやすくする。

- Repository :: [[https://github.com/bbatsov/projectile][bbatsov/projectile]]
* Memo
* Tasks
** TODO projectile issue#1709
:LOGBOOK:
CLOCK: [2021-09-28 Tue 10:21]--[2021-09-28 Tue 10:50] =>  0:29
CLOCK: [2021-09-28 Tue 09:28]--[2021-09-28 Tue 09:43] =>  0:15
CLOCK: [2021-09-28 Tue 00:36]--[2021-09-28 Tue 01:11] =>  0:35
CLOCK: [2021-09-27 Mon 23:51]--[2021-09-28 Tue 00:05] =>  0:14
CLOCK: [2021-09-27 Mon 08:16]--[2021-09-27 Mon 10:37] =>  2:21
:END:
- [[https://github.com/bbatsov/projectile/issues/1709][projectile-switch-buffers with prefix argument plus k also kills current buffer · Issue #1709 · bbatsov/projectile]]

~projectile-project-buffer-p~ が誤検知してる。現在のバッファがプロジェクトでないのにプロジェクト判定し、それで消すときに含まれてしまう。
#+begin_src emacs-lisp
  (defun projectile-project-buffer-p (buffer project-root)
  "Check if BUFFER is under PROJECT-ROOT."
  (with-current-buffer buffer
    (and (not (string-prefix-p " " (buffer-name buffer)))
         (not (projectile-ignored-buffer-p buffer))
         default-directory ;; これが怪しい。どこから取ってる？
         (string-equal (file-remote-p default-directory)
                       (file-remote-p project-root))
         (not (string-match-p "^http\\(s\\)?://" default-directory))
         (string-prefix-p project-root (file-truename default-directory) (eq system-type 'windows-nt)))))
#+end_src

~default-directory~ が、switch先のdirectoryを指している。なのでtrueになる。
つまり消そうとしているdirectoryではないがtrueを返し誤って消される。

初回のループで変数 ~default-directory~ が引数のbufferと合っていない。現在開いているバッファが入り、現在開いているものまで消してしまう。
無理やり ~(cd ...)~ とすれば変更できるが、いかしてない。

~default-directory~ を使わない方法でやるとこうなる。
ほかにも変更が必要そうだな。

#+begin_src emacs-lisp
  (defun projectile-project-buffer-p (buffer project-root)
    "Check if BUFFER is under PROJECT-ROOT."
    (with-current-buffer buffer
      (and (not (string-prefix-p " " (buffer-name buffer)))
           (not (projectile-ignored-buffer-p buffer))
           (file-name-directory buffer-file-name)
           (string-equal (file-remote-p (file-name-directory buffer-file-name))
                         (file-remote-p project-root))
           (not (string-match-p "^http\\(s\\)?://" (file-name-directory buffer-file-name)))
           (string-prefix-p project-root (file-truename (file-name-directory buffer-file-name)) (eq system-type 'windows-nt)))))
#+end_src

取得できない理由。current buffer以外にセットされているから。
ループを進んだ後はなぜできてるのか。

- [[https://stackoverflow.com/questions/28196228/emacs-how-to-get-directory-of-current-buffer][elisp - Emacs, how to get directory of current buffer? - Stack Overflow]]

#+begin_quote
Sometimes default-directory for the current buffer may be set to something other than the current directory of the file the buffer is currently visiting, in which case the solution above wouldn't give what the asker was looking for.

In such cases, you can use the file-name-directory method, like so: (file-name-directory buffer-file-name)
#+end_quote

初回以降の ~default-directory~ を変えている要素は何だ。何か変わっているはずだが、単なるループで他の条件は一切変わってないようだな…。

テストで再現できない。

project-root: ~/home/kijima/.emacs.d/~
buffer: projectile.el
default-directory: .emacs.d → これがおかしい。

projectile-switch-project → projectile-switch-project-by-name(名前で選択) → アクション選択
projectile-project-buffers → projectile-project-buffer-p

#+begin_src emacs-lisp
  (it "ensures the buffer is switched immediately"
        (let ((projectile-switch-project-action
               (lambda () (switch-to-buffer (find-file-noselect "file" t)))))
          (projectile-test-with-sandbox
           (projectile-test-with-files
            ("project/"
             "project/file")
            (projectile-add-known-project (file-name-as-directory (expand-file-name "project")))
            (projectile-switch-project-by-name (file-name-as-directory (expand-file-name "project")))

            (expect (current-buffer) :to-be (get-file-buffer "project/file"))))))
#+end_src

テストでprojectバッファを開いてる状態にするにはどうしたらいいんだ。
* Reference
* Archive
