:PROPERTIES:
:ID:       7e85e3f3-a6b9-447e-9826-307a3618dac8
:header-args+: :wrap :results raw
:END:
#+title: org-mode
* 概要
org-modeは[[id:1ad8c3d5-97ba-4905-be11-e6f2626127ad][Emacs]]の機能の1つ。独自のアウトライン形式.orgを扱うためのインターフェースを提供する。Emacsのkiller appの一角で、根強い人気がある。

- キーボードにフォーカスしたアウトライン操作
- プロジェクト管理
- 時間計測
- 脚注
- PDF、HTMLなどの各種形式への変換([[id:2709c815-cd38-4679-86e8-ff2d3b8817e4][Insomnia]]はこの変換を使ってビルドしている)
- コードの実行、実行結果の文書内への挿入
- シンタックスハイライト
- タグを使用した検索

などが可能。
* Memo
** pandocでディレクトリ内のorgファイルを1つのPDFにする
:LOGBOOK:
CLOCK: [2024-02-07 Wed 00:08]--[2024-02-07 Wed 00:33] =>  0:25
CLOCK: [2024-02-06 Tue 23:32]--[2024-02-06 Tue 23:57] =>  0:25
:END:
- [[https://zenn.dev/honahuku/scraps/bb784d54600256][ubuntuでpandocを使ったmarkdownのpdf作成]]

#+begin_src shell
    sudo apt install pandoc texlive-lang-japanese texlive-latex-extra texlive-luatex
    sudo apt install librsvg2-bin # SVG
    pandoc -s test.org -o te2st.pdf --pdf-engine=lualatex -V documentclass=ltjsarticle -V luatexjapresetoptions=morisawa
#+end_src

#+caption: ディレクトリ下を一括で実行する
#+begin_src shell
  mkdir -p pdf
  find ./ -name "*.org" -type f -exec sh -c 'echo ${0}; pandoc "${0}" -o "pdf/${0%.org}.pdf" --toc -N --pdf-engine=lualatex -V documentclass=ltjsarticle -V luatexjapresetoptions=morisawa && echo ok' {} \;
#+end_src

#+caption: 結合する
#+begin_src shell
  sudo apt install pdftk
  pdftk *.pdf cat output merge.pdf
#+end_src

** 見積もり時間
~C-c C-x e~ で見積もり時間を設定できる。見積もり時間を設定すると、モードラインの残り時間の横に表示される。[0:51/03:00]という感じ。
** easy templates
- ~<q tag~ でquote blockを展開できる
- <s tag でsource code blockを展開できる
** orgエレメントの情報を取得する

org-modeをパースした結果が保持されているので、APIによって簡単に扱うことができる。

#+caption: 細かい情報を取得できる
#+begin_src emacs-lisp :results raw
(org-element-context)
#+end_src

#+RESULTS:
#+begin_results
(src-block (:language emacs-lisp :switches nil :parameters :results raw :begin 530 :end 622 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value (org-element-context)
 :post-blank 1 :post-affiliated 553 :caption (((細かい情報を取得できる))) :parent nil))
#+end_results

org-modeが各エレメントをどのように扱っているか少し想像がつく。

#+caption: アクセスして取得する用の関数もある
#+begin_src emacs-lisp
(org-element-type (org-element-context))
#+end_src

#+RESULTS:
#+begin_results
src-block
#+end_results

** orgファイルからkeywordsを取得する

(org-collect-keywords)を使うとorgファイルの情報を取得できる。

#+caption: (org-collect-keywords)を使ってタイトルを取得しているコード例
#+begin_src git-permalink
https://github.com/kd-collective/org-roam/blob/abe63b436035049923ae96639b9b856697047779/org-roam-db.el#L299-L309
#+end_src

#+RESULTS:
#+begin_results emacs-lisp
(defun org-roam-db--file-title ()
  "In current Org buffer, get the title.
If there is no title, return the file name relative to
`org-roam-directory'."
  (org-link-display-format
   (or (cadr (assoc "TITLE" (org-collect-keywords '("title"))))
       (file-name-sans-extension (file-relative-name
                                  (buffer-file-name (buffer-base-buffer))
                                  org-roam-directory)))))

(defun org-roam-db-insert-file ()
#+end_results

** メモをつける
タスクの状態が遷移したときに、メモを開く設定ができる。

#+caption: property
#+begin_src
:PROPERTIES:
:LOGGING:  lognoterepeat
:END:
#+end_src
** プロパティ挿入
特殊な意味をもつ、大文字で構成されるさまざまなプロパティが存在する。
EXPORTシリーズ、CUSTOM_ID、ID...。

C-c C-x p で挿入できる。
** 直前のタスクで再度計測
C-c C-x C-i (org-clock-in) でタスク計測できる。

直前のタスクで再度計測するときは、 C-c C-x C-x (org-clock-in-last) で可能。
https://orgmode.org/manual/Clocking-commands.html

clock-inが動くだけで、org-pomodoroはinvokeしない。
** 見出しのリンクを挿入する
[[id:815a2c31-7ddb-40ad-bae0-f84e1cfd8de1][Org-roam]]で見出しへのファイル内リンクを貼りたいとき。

~org-store-link (C-c l)~
で、見出しのリンクを取得する。このとき見出しのIDが生成される。これを消すと辿れなくなるので注意。

~org-insert-link (C-c C-l)~
で、貼り付ける。
** タグをつける
~C-c C-c~ で見出しにタグを挿入できる。
WIPとかつけるようにすると便利そう。
基本的なカテゴリは階層で、一時的な状態はタグでやるようにするのがよさそう。

 ~C-c / m~ で検索できる。
** 可変幅と等幅フォント
[[id:1ad8c3d5-97ba-4905-be11-e6f2626127ad][Emacs]]はテキストエディタなので、文字表示のほとんどは等幅フォントだ。が、
org-modeでは自然言語の文章なので、幅の違うフォントのほうが読みやすい。

[[https://zzamboni.org/post/beautifying-org-mode-in-emacs/][zzamboni.org | Beautifying Org Mode in Emacs]]の設定がとても良い。

- M-qでインデントの形に文章を整形する
- variable-pitch-modeが可変幅にするmode
- variable-pitch-modeだけだとコードブロックも可変になっちゃうので、コードブロックなどのfaceも変更する
** org-alertで通知する
[[https://github.com/spegoraro/org-alert][spegoraro/org-alert: System notifications of org agenda items]]
org-alertでDEADLINEが近い見出しを通知できる。
期限設定していても、通知されなければ忘れる。
スケジュール管理に使うのであれば必須か。
** babelのヘッダーを挿入する
ヘッダーでbabelの実行結果のオプションを変えることができる。

#+BEGIN_SRC org
,#+BEGIN_SRC emacs-lisp :result outputs
(concat "hello" "world")
,#+END_SRC
#+END_SRC

で実行すると標準出力が挿入される。

手書きは忘れやすいのでコマンドでやる。
コードブロック上で ~C-c C-v j~ :: ~org-babel-insert-header-arg~ 。

わかりやすい説明。
[[http://misohena.jp/blog/2017-10-26-how-to-use-code-block-of-emacs-org-mode.html][org-modeのコードブロック(Babel)の使い方 | Misohena Blog]]
** babelで結果をそのまま表示する
適用させたい見出しレベルのproperty内で、↓追加する。
#+begin_src shell
:header-args+: :results output
#+end_src

動作の違い。

#+begin_src ruby
[1, 2]
#+end_src

#+RESULTS:
| 1 | 2 |

#+begin_src ruby :results output
p [1, 2]
#+end_src

#+RESULTS:
: [1, 2]

** org-protocolを設定する
:LOGBOOK:
CLOCK: [2021-09-26 Sun 09:45]--[2021-09-26 Sun 09:55] =>  0:10
:END:

- [[https://github.com/sprig/org-capture-extension][sprig/org-capture-extension: A Chrome and firefox extension facilitating org-capture in emacs]]
Chrome拡張としてある。ここのReadmeに書いてあるコマンドを実行する。
- emacsclientをorg-protocolのハンドラとして登録する。たぶんプロトコルと対応するアプリケーションを選ぶ、という処理だろう。httpのときはブラウザを起動する、みたいな

#+begin_src shell
cat > "${HOME}/.local/share/applications/org-protocol.desktop" << EOF
[Desktop Entry]
Name=org-protocol
Exec=emacsclient %u
Type=Application
Terminal=false
Categories=System;
MimeType=x-scheme-handler/org-protocol;
EOF
#+end_src

そして↓。Linux MintでもOKだった。

#+begin_src shell
update-desktop-database ~/.local/share/applications/
#+end_src

OSの設定は完了。Emacsの設定を追加する。template名をちゃんと設定する+ディレクトリが存在しないと起動しない。

#+begin_src emacs-lisp
(setq org-capture-templates `(
    ("p" "Protocol" entry (file+headline ,(concat org-directory "notes.org") "Inbox")
        "* %^{Title}\nSource: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?")
    ("L" "Protocol Link" entry (file+headline ,(concat org-directory "notes.org") "Inbox")
        "* %? [[%:link][%:description]] \nCaptured On: %U")
))
#+end_src

Chromeに拡張機能をインストールしてクリックすると、Emacsが立ち上がる。
** org-protocolでプロンプトを出さないようにする
Linux Mint, Chromeにて。
org-protocolを設定できても、ドメインごとでxdg-openを許可しますかプロンプトが出るので面倒。
ポリシーを変更することで出さないようにする。

設定ポリシーは、chrome://policy/ で確認できる。最初は何もない。
↓実行する。
#+caption: ポリシーを追加する
#+begin_src shell
  sudo mkdir -p /etc/opt/chrome/policies/managed/ && echo '{ "URLAllowlist": ["org-protocol://*"] }' |sudo tee /etc/opt/chrome/policies/managed/whitelist.json
#+end_src

chrome://policy/ に表示されるのを確認する(再読込が必要)。
org-protocol使用時にプロンプトが出なくなる。
** メモを取るのにはorg-captureを使う
** エクスポートしないタグ
~C-c C-q~ で ~noexport~ を指定するとその場所はエクスポートされない。
* Tasks
** TODO org-lintをCIで実行する
~org-lint~ をディレクトリに対して行う方法。
** TODO ファイルごとの形式を正規化する
見出しにけっこうズレがある。そういうのを検知するLintがあるはずだ。
** TODO clock table/agenda にリンクをつける
* Example
** チェックリスト
~C-c~ でチェックできる。
- 人としてやるべきこと [1/3]
  - [X] 盆栽に水をやる
  - [ ] 子孫に美田を残す
  - [ ] 借金を返す
** 脚注
これが脚注[fn:1]である。
定義はどこに書いてもいい。
出力時にはFootnotesのアウトラインが作られてそこに挿入される。

[fn:1] The link is: https://orgmode.org
* Reference
** [[https://www.evalapply.org/posts/why-and-how-i-use-org-mode/index.html][Why and How I use "Org Mode" for my writing and more]]
org-modeを使う理由。
** [[https://zzamboni.org/post/beautifying-org-mode-in-emacs/][zzamboni.org | Beautifying Org Mode in Emacs]]
かなりいい感じに表示する設定。
** [[https://orgmode.org/manual/Results-of-Evaluation.html][Results of Evaluation (The Org Manual)]]
** [[https://lists.gnu.org/archive/html/emacs-orgmode/2017-10/msg00227.html][Re: [O] Lint multiple files at once]]
** [[https://blog.jethro.dev/posts/org_mode_workflow_preview/][Org-mode Workflow: A Preview · Jethro Kuan]]
org-mode運用法。
** [[https://github.com/sprig/org-capture-extension][sprig/org-capture-extension: A Chrome and firefox extension facilitating org-capture in emacs]]
org-protocolの設定。
* Archives
** CLOSE exampleを完成させる
CLOSED: [2021-09-26 Sun 09:41]
どういう意味なのか、全く思い出せない。
ああ、org-modeの使用例のページを作るということか。
別にいらないだろう。実際の例で示せばいい。
** DONE org-captureでメモ元リンクを記録しないようにする
CLOSED: [2021-09-26 Sun 09:41]
** CLOSE org-pomodoro完了後メモを残すように設定を復活
CLOSED: [2021-09-26 Sun 09:42]
:LOGBOOK:
CLOCK: [2021-09-19 Sun 15:37]--[2021-09-19 Sun 16:02] =>  0:25
:END:

別に見ないから不要だろう。
** DONE denoteを調べる
CLOSED: [2022-10-26 Wed 12:24]
:LOGBOOK:
CLOCK: [2022-10-26 Wed 14:46]--[2022-10-26 Wed 15:11] =>  0:25
CLOCK: [2022-10-26 Wed 12:34]--[2022-10-26 Wed 13:00] =>  0:26
CLOCK: [2022-10-26 Wed 11:39]--[2022-10-26 Wed 12:04] =>  0:25
CLOCK: [2022-10-26 Wed 11:14]--[2022-10-26 Wed 11:39] =>  0:25
CLOCK: [2022-10-26 Wed 10:49]--[2022-10-26 Wed 11:14] =>  0:25
CLOCK: [2022-10-26 Wed 10:10]--[2022-10-26 Wed 10:35] =>  0:25
:END:

- [[https://protesilaos.com/codelog/2022-06-18-denote-demo/][Emacs: demonstration of my Denote package (simple note-taking) | Protesilaos Stavrou]]

roamだと時系列、ブログ的に表現しにくいので、denoteを調べる。ほとんどは分野別ファイルで問題ないが、たまに必要なときがある。いい感じだ。

denoteリンクをHTMLエクスポートする方法がわからない。エラーになる。
リネームするときは denote-rename-file を使う。
** DONE Agenda Viewの整理
CLOSED: [2023-01-29 Sun 12:43] SCHEDULED: <2023-01-31 Tue>
:PROPERTIES:
:Effort:   1:00
:END:
:LOGBOOK:
CLOCK: [2023-01-29 Sun 12:12]--[2023-01-29 Sun 12:37] =>  0:25
CLOCK: [2023-01-29 Sun 11:42]--[2023-01-29 Sun 12:07] =>  0:25
:END:
予定関係をうまく使えてない。

- effort表示をorg-agendaでできるようにした
  - 目標値だけで、今どれくらいやったのかはわからないのが若干ビミョーだが...
- 週タスクを決めるためのビュー
  - TODO一覧を見る
  - 今週やると決めたものにeffortを設定する
- 今日(週)やることのビュー
  - 週のscheduleの一覧が表示される
  - 今日やることをWIPにして開始
  - 2つ表示しようとしたが、面倒だったのでやめた
  - scheduledがうまく設定できず。まああまり先に設定してもやらないので、まあやらなくていい。せいぜい今週がわかればいい
  - effortでのフィルタはできたので、週にやりたいものはeffortを設定することにする
