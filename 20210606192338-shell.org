:PROPERTIES:
:ID:       585d3b5e-989d-4363-bcc3-894402fcfcf9
:header-args+: :wrap :results raw
:END:
#+title: Shell

* 概要
シェルスクリプトはUnixシェルで使われる[[id:868ac56a-2d42-48d7-ab7f-7047c85a8f39][Programming Language]]。
* Memo
** sudoでセットされる環境変数は異なる
普通の実行時とsudo時で、セットされている環境変数は異なる。

#+caption: これらは異なる結果になる
#+begin_src shell
  export TEST=1
  env # これはTESTを含む
  sudo env # TESTがない
#+end_src

** シェルのバックグラウンド実行
#+caption: 再帰で処理する
#+begin_src git-permalink
https://github.com/kd-collective/NetBSD/blob/89341ae2e1875e7f91cefa9b1dcc0e4549edcde0/bin/sh/jobs.c#L1716-L1865
#+end_src

#+RESULTS:
#+begin_results C
STATIC void
cmdtxt(union node *n)
{
	union node *np;
	struct nodelist *lp;
	const char *p;
	int i;

	if (n == NULL || cmdnleft <= 0)
		return;
	switch (n->type) {
	case NSEMI:
		cmdtxt(n->nbinary.ch1);
		cmdputs("; ");
		cmdtxt(n->nbinary.ch2);
		break;
	case NAND:
		cmdtxt(n->nbinary.ch1);
		cmdputs(" && ");
		cmdtxt(n->nbinary.ch2);
		break;
	case NOR:
		cmdtxt(n->nbinary.ch1);
		cmdputs(" || ");
		cmdtxt(n->nbinary.ch2);
		break;
	case NDNOT:
		cmdputs("! ");
		/* FALLTHROUGH */
	case NNOT:
		cmdputs("! ");
		cmdtxt(n->nnot.com);
		break;
	case NPIPE:
		for (lp = n->npipe.cmdlist ; lp ; lp = lp->next) {
			cmdtxt(lp->n);
			if (lp->next)
				cmdputs(" | ");
		}
		if (n->npipe.backgnd)
			cmdputs(" &");
		break;
	case NSUBSHELL:
		cmdputs("(");
		cmdtxt(n->nredir.n);
		cmdputs(")");
		break;
	case NREDIR:
	case NBACKGND:
		cmdtxt(n->nredir.n);
		break;
	case NIF:
		cmdputs("if ");
		cmdtxt(n->nif.test);
		cmdputs("; then ");
		cmdtxt(n->nif.ifpart);
		if (n->nif.elsepart) {
			cmdputs("; else ");
			cmdtxt(n->nif.elsepart);
		}
		cmdputs("; fi");
		break;
	case NWHILE:
		cmdputs("while ");
		goto until;
	case NUNTIL:
		cmdputs("until ");
 until:
		cmdtxt(n->nbinary.ch1);
		cmdputs("; do ");
		cmdtxt(n->nbinary.ch2);
		cmdputs("; done");
		break;
	case NFOR:
		cmdputs("for ");
		cmdputs(n->nfor.var);
		cmdputs(" in ");
		cmdlist(n->nfor.args, 1);
		cmdputs("; do ");
		cmdtxt(n->nfor.body);
		cmdputs("; done");
		break;
	case NCASE:
		cmdputs("case ");
		cmdputs(n->ncase.expr->narg.text);
		cmdputs(" in ");
		for (np = n->ncase.cases; np; np = np->nclist.next) {
			cmdtxt(np->nclist.pattern);
			cmdputs(") ");
			cmdtxt(np->nclist.body);
			switch (n->type) {	/* switch (not if) for later */
			case NCLISTCONT:
				cmdputs(";& ");
				break;
			default:
				cmdputs(";; ");
				break;
			}
		}
		cmdputs("esac");
		break;
	case NDEFUN:
		cmdputs(n->narg.text);
		cmdputs("() { ... }");
		break;
	case NCMD:
		cmdlist(n->ncmd.args, 1);
		cmdlist(n->ncmd.redirect, 0);
		if (n->ncmd.backgnd)
			cmdputs(" &");
		break;
	case NARG:
		cmdputs(n->narg.text);
		break;
	case NTO:
		p = ">";  i = 1;  goto redir;
	case NCLOBBER:
		p = ">|";  i = 1;  goto redir;
	case NAPPEND:
		p = ">>";  i = 1;  goto redir;
	case NTOFD:
		p = ">&";  i = 1;  goto redir;
	case NFROM:
		p = "<";  i = 0;  goto redir;
	case NFROMFD:
		p = "<&";  i = 0;  goto redir;
	case NFROMTO:
		p = "<>";  i = 0;  goto redir;
 redir:
		if (n->nfile.fd != i)
			cmdputi(n->nfile.fd);
		cmdputs(p);
		if (n->type == NTOFD || n->type == NFROMFD) {
			if (n->ndup.dupfd < 0)
				cmdputs("-");
			else
				cmdputi(n->ndup.dupfd);
		} else {
			cmdtxt(n->nfile.fname);
		}
		break;
	case NHERE:
	case NXHERE:
		cmdputs("<<...");
		break;
	default:
		cmdputs("???");
		break;
	}
}
#+end_results

** カレントディレクトリのファイルサイズ

#+caption: -s: 総容量だけ、-h 適当なファイルサイズで表示
#+begin_src shell
du -sh .
#+end_src

#+RESULTS:
#+begin_results
388M	.
#+end_results

** ファイルサイズのランキング
サイズ順に、もっとも大きい10ディレクトリを表示する。

#+caption: -s: 総容量だけ、 -k キロバイト
#+begin_src shell
du -sk * | sort -rn | head -10
#+end_src

#+RESULTS:
#+begin_results
360676	node_modules
3696	public
196	package-lock.json
124	20210624232811-digger.org
100	20210910122240-bookmarks.org
72	20210926143813-clojure.org
68	20210907223510-haskell.org
64	20210508234743-emacs.org
56	20210911113057-go.org
56	20210901101339-rust.org
#+end_results

比較するディレクトリサイズによって単位オプションをKBやMBにする。ソートが機能しなくなるので-hオプションは使用しない。

** エラー: 公開鍵を利用できないため、以下の署名は検証できませんでした を解決する
sudo apt-get updateしたとき、GPGエラーが出る解決法。

#+begin_quote
GPG エラー: https://.... focal InRelease: 公開鍵を利用できないため、以下の署名は検証できませんでした: NO_PUBKEY ...
#+end_quote

表示されているpubkeyをコピペして、追加する。

#+begin_src shell
sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys aaaaaa... # aaaaaa...に、公開鍵を利用できないため、以下の署名は検証できませんでした: NO_PUBKEY ...← を入れる
#+end_src
** cinnamonを再起動する
ウィンドウマネージャを再起動したいときがある。
#+begin_src shell
cinnamon --replace
#+end_src
** sourceコマンド
sourceは環境変数関係を再読み込みするのによく使う。
~source ~~/.bashrc~ みたいに。

bashでは、 ~.~ でもできる。
つまり、 ~. ~~/.bashrc~ と書いても同じ意味になる。
** sshが切れたときに処理が止まらないようにする
nohupをつけて実行すると、SSHが切れても実行され続ける。
#+caption: ssh先のターミナルにて
#+begin_src shell
nohup make long_job &
#+end_src

[[https://qiita.com/f0o0o/items/7f9dfaf3f7392c0ce52f][sshが切れた時に処理が止まらないようにする - Qiita]]
** コマンドの実行と出力結果を記録する
~script~ コマンドが便利。
実行してオンになると、 ~exit~ するまでの履歴をファイルに保存できる。

[[https://staffblog.amelieff.jp/entry/2020/04/20/130000][簡単にコマンドの実行ログをファイルに記録する方法 - アメリエフの技術ブログ]]
** 踏み台を経由したssh
普通にやると、2回sshコマンドを実行するので面倒。
configに記入しておいて、一度に実行する。

#+caption:.ssh/config
#+begin_src
Host <alias_name>
  HostName <target_server>
  User <target_user>
  IdentityFile <target_id_rsa>
  ProxyCommand ssh -W %h:%p -i <bastion_id_rsa> -p <bastion_port> <bastion_user>@<bastion_server>
#+end_src

[[https://qiita.com/hkak03key/items/3b0c4752bfbcc52e676d][踏み台サーバを飛び越えて一発で目的のサーバへsshする方法 - Qiita]]
** input関係の設定を.bash_profile等でしてはいけない理由
[[https://wiki.archlinux.jp/index.php/Fcitx#.E6.97.A5.E6.9C.AC.E8.AA.9E][Fcitx - ArchWiki]]

#+begin_quote
上記の設定を .bashrc でしないでください。.bashrc はインタラクティブな bash セッションを初期化するときに使われます。インタラクティブでないセッションや X セッションの初期化では用いられません。さらに、.bashrc で環境変数を設定すると、コマンドラインから実行した診断ツールに誤解を与えて、X セッションでは環境変数が使われていないのに正しく設定されているかのように表示されることがあります。
#+end_quote
** cronで通知する
cronで時報を通知したいけど、表示されないことがある。これはcronがCLI向けのコマンドであって、画面出力があることを想定してないから。

指定する。普通はこれでOK。
#+caption: GUIが関係するコマンドを実行するときはDISPLAY=:0をつける
#+begin_src shell
  export DISPLAY=:0 && notify-send "時報" "$(date +\%H):00!"
#+end_src

#+caption: 実行ログを見る
#+begin_src shell
  cat /var/log/syslog
#+end_src

[[id:eb196529-bdbd-48c5-9d5b-a156fe5c2f41][EXWM]] + dunstの環境でうまくいかなかった。
DBUS_SESSION_BUS_ADDRESSの設定が必要なよう。参考サイトをコピペすると通知できるようになった。
#+begin_src shell
  00 * * * * DISPLAY=:0 DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus setpriv --euid=1000 notify-send "Timebot" "$(date +\%H):00!"
#+end_src
[[https://bbs.archlinux.org/viewtopic.php?id=223050][Cannot run notify-send from cron job / Newbie Corner / Arch Linux Forums]]
** xargsで一括削除

#+caption: .logファイルを一括削除する
#+begin_src shell
find . -name "*.log" | xargs rm -fv
#+end_src

findでファイルのリストを作成して、xargsに渡す。
xargsはファイルを1つずつrmに渡す。

xargsにはdry-runモードがある。
#+caption: pオプションがついてると生成コマンドを確認するだけで実行しない
#+begin_src shell
find . -name "*.log" | xargs -p rm -fv
#+end_src

[[https://techblog.kyamanak.com/entry/2018/02/12/202256][【Linux】xargs コマンドの使い方がよく分からない - きゃまなかのブログ]]
** xargsでリポジトリ内一括置換
git grep、xargs、sedを組み合わせる。

#+caption: リポジトリの2.6.5という文字列を2.7.1に置換する例
#+begin_src shell
  git grep -l '2\.6\.5' | xargs sed -i 's/2\.6\.5/2.7.1/g'
#+end_src

- git grepの ~l~ オプションはヒットしたファイル名を出力する。
- xargsは標準出力からリストを読み込み、出力を次のコマンドの引数に渡すコマンド。
- sedは置換。 ~i~ オプションは結果を画面出力しないオプション。 本来は ~sed -i "s/aaa/bbb/s" Gemfile~ みたいな順だが、xargsで自動で渡されている。
** 一括git clone
[[id:6b889822-21f1-4a3e-9755-e3ca52fa0bc4][GitHub]]から、
個人 or 組織のリポジトリをすべてダウンロードする方法。
#+begin_src shell
curl https://api.github.com/users/{USER}/repos?per_page=100 | jq .[].ssh_url | xargs -n 1 git clone
#+end_src

#+begin_src shell
curl https://api.github.com/orgs/{ORG}/repos?per_page=100  | jq .[].ssh_url | xargs -n 1 git clone
#+end_src

~?per_page=100~ をつけないとデフォルトの30件しか取ってこないので注意。
100を超えるとページを指定する必要がある。

- https://tic40.hatenablog.com/entry/2018/03/26/073000

参考に読む用リポジトリは、organizationにまとめておく。
ローカルですぐ閲覧できて便利。
** Cinnamonのコントロールパネルを出す
これが起動できればサウンドやディスプレイ設定もできる。
#+begin_src shell
cinnamon-settings
#+end_src
** 失敗時例外を出す
#+begin_src shell
  #!/bin/bash

  set -e

  # ...
#+end_src
というように、しておくと、実行時できなかったときにエラーメッセージを出す。
何も指定しないと、どこで失敗したのか把握するのが困難。
ローカル環境だといいのだが、CIだと確認コストがかかるので必ず指定しておくとよい。
** デバッグメッセージ出力
#+begin_src shell
  #!/bin/bash -x

  # ...
#+end_src
-xをつけると評価結果を逐一出力する。
** GNOMEの音量調整
#+begin_src shell
  pactl set-sink-volume @DEFAULT_SINK@ +5%
  pactl set-sink-volume @DEFAULT_SINK@ -5%
#+end_src
** カレントディレクトリ行数カウント
#+begin_src shell
  wc -l `find ./ -name '*.el'`
#+end_src

別解。
#+begin_src shell
  git ls-files *.org | xargs wc -c | sort -n
#+end_src
** ディレクトリの全ファイルで実行する
#+begin_src shell
  for file in `\find ./src -name '*.py'`;
  do
  echo $file
  python $file | sed -e s/.*[0-9]m// >> ./docs/query.org
  done
#+end_src
** port検索する
port already in used. が出たとき。

プロセスを探す。
#+begin_src shell
  sudo lsof -i:5432
#+end_src

ポートを使ってるプロセスを削除する。
#+begin_src shell
sudo lsof -t -i tcp:5432 | sudo xargs kill -9
#+end_src
** LinuxでWindowsのブートメディアを作成する
woeusbというパッケージをインストールして行う。
#+begin_src shell
  sudo add-apt-repository ppa:tomtomtom/woeusb
  sudo apt update && sudo apt install woeusb-frontend-wxgtk
#+end_src
https://www.omgubuntu.co.uk/2017/06/create-bootable-windows-10-usb-ubuntu
** aptコマンド
aptはdebian系ディストリビューションで用いられるパッケージマネージャ。
- パッケージ検索
#+begin_src shell
  apt search libffi
#+end_src
** suspendする
コマンドでサスペンドする方法。

Ubuntuのとき。
#+begin_src shell
  systemctl suspend -i
#+end_src

GNU Guixのとき。
#+begin_src shell
  loginctl suspend
#+end_src
** プロセスを止める
簡単に検索、killできる。
#+begin_src shell
  pgrep firefox
  pkill firefox
#+end_src
* Tasks
** TODO [[https://qiita.com/ko1nksm/items/9650ed1fc21d668f2732][シェルスクリプトは変数代入で = の前後にスペースを置けない！･･･の本当の理由を知ると優れた文法が見えてくる - Qiita]]
詳しい解説。
** TODO [[https://www.itmedia.co.jp/enterprise/articles/0811/20/news019.html][インストール済みUbuntuのクローンを新しいハードディスクに作成する：Linux Hacks（1/2 ページ） - ITmedia エンタープライズ]]
まとめておく。
* References
** [[https://github.com/stedolan/jq][stedolan/jq: Command-line JSON processor]]
jsonを扱う便利コマンド。
