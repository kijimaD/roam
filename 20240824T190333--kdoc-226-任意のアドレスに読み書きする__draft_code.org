:properties:
:ID: 20240824T190333
:end:
#+title:      KDOC 226: 任意のアドレスに読み書きする
#+date:       [2024-08-24 Sat 19:03]
#+filetags:   :draft:code:
#+identifier: 20240824T190333

# (denote-rename-file-using-front-matter (buffer-file-name) 0)
# (save-excursion (while (re-search-backward ":draft" nil t) (replace-match "")))
# (flush-lines "^\\#\s.+?")

# ====ポリシー。
# 1ファイル1アイデア。
# 1ファイルで内容を完結させる。
# 常にほかのエントリとリンクする。
# 自分の言葉を使う。
# 参考文献を残しておく。
# 文献メモの場合は、感想と混ぜないこと。1つのアイデアに反する
# ツェッテルカステンの議論に寄与するか
# 頭のなかやツェッテルカステンにある問いとどのようにかかわっているか
# エントリ間の接続を発見したら、接続エントリを追加する。カード間にあるリンクの関係を説明するカード。
# アイデアがまとまったらアウトラインエントリを作成する。リンクをまとめたエントリ。
# エントリを削除しない。古いカードのどこが悪いかを説明する新しいカードへのリンクを追加する。
# 恐れずにカードを追加する。無意味の可能性があっても追加しておくことが重要。

# ====永久保存メモのルール。
# 自分の言葉で書く。
# 後から読み返して理解できる。
# 他のメモと関連付ける。
# ひとつのメモにひとつのことだけを書く。
# メモの内容は1枚で完結させる。
# 論文の中に組み込み、公表できるレベルである。

# ====価値があるか。
# その情報がどういった文脈で使えるか。
# どの程度重要な情報か。
# そのページのどこが本当に必要な部分なのか。

* この文書のステータス
- 作成
  - [X] 2024-08-24 貴島
- レビュー
  - [ ] <署名>
# (progn (kill-line -1) (insert (format "  - [X] %s 貴島" (format-time-string "%Y-%m-%d"))))

# 関連をつけた。
# タイトルがフォーマット通りにつけられている。
# 内容をブラウザに表示して読んだ(作成とレビューのチェックは同時にしない)。
# 文脈なく読めるのを確認した。
# おばあちゃんに説明できる。
# いらない見出しを削除した。
# タグを適切にした。
# すべてのコメントを削除した。
* 概要
# 本文(タイトルをつける)。
メモリアドレスを直接指定して、値を読み書きしてみるコードを見る。

#+begin_export html
<iframe width="800px" height="200px" src="https://godbolt.org/e#g:!((g:!((g:!((h:codeEditor,i:(filename:'1',fontScale:14,fontUsePx:'0',j:1,lang:___c,selection:(endColumn:2,endLineNumber:6,positionColumn:2,positionLineNumber:6,selectionStartColumn:2,selectionStartLineNumber:6,startColumn:2,startLineNumber:6),source:'%23include+%3Cstdlib.h%3E%0A%0Aint+main()+%7B++++%0A++++*((int+*)+0x2b67)+%3D+(int)+111%3B%0A++++int+load+%3D+*((int+*)+0x2b67)%3B%0A%7D'),l:'5',n:'1',o:'C+source+%231',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0'),(g:!((h:compiler,i:(compiler:rv32-cgcctrunk,filters:(b:'0',binary:'1',binaryObject:'1',commentOnly:'0',debugCalls:'1',demangle:'0',directives:'0',execute:'1',intel:'1',libraryCode:'0',trim:'0',verboseDemangling:'0'),flagsViewOpen:'1',fontScale:14,fontUsePx:'0',j:1,lang:___c,libs:!(),options:'',overrides:!(),selection:(endColumn:1,endLineNumber:1,positionColumn:1,positionLineNumber:1,selectionStartColumn:1,selectionStartLineNumber:1,startColumn:1,startLineNumber:1),source:1),l:'5',n:'0',o:'+RISC-V+(32-bits)+gcc+(trunk)+(Editor+%231)',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0')),l:'2',n:'0',o:'',t:'0')),version:4"></iframe>
#+end_export

~0x2b67~ アドレスに値 ~111~ を書き込み、後からアドレス直接指定で値を読み込むようなアセンブリが生成できている。

無効な範囲を指定すると、Segmentation Faultになり書き込みできない。

#+caption: 無効な範囲を書き換えしてみると、メモリ保護機能によって Segmentation faultになる
#+begin_src C
  int main() {
    ,*((int *) 0x0001) = (int) 111;
  }
#+end_src

#+caption: 変数のとりうる範囲は毎回変動する。正しい範囲を指定すると上書きできる
#+begin_src C
  int main() {
    int x = 1;
    printf("0x%08X: x -> %i\n", &x, x);
    ,*((int *) &x) = (int) 999999;
    printf("0x%08X: x -> %i\n", &x, x);
  }
#+end_src

#+RESULTS:
#+begin_src
0x4423DD04: x -> 1
0x4423DD04: x -> 999999
#+end_src

セグメント内なら、任意のメモリにアクセスできる。

#+caption: セグメント内ならアドレスを指定して任意のメモリにアクセスできる。セグフォにならない範囲でintとして値を取得して調べた。マイナス方向には多く余地があるが、プラス方向には少ない
#+begin_src C
  int main() {
    int x = 2;
    printf("0x%08X: x -> %i\n", &x, x);
    int load1 = *((int *) &x-0x100000);
    int load2 = *((int *) &x+0x100);
    int load3 = *((int *) &x+0x2);
    printf("load1(-0x100000): 0x%08X\n", load1);
    printf("load2(+0x100): 0x%08X\n", load2);
    printf("load3(+0x2): 0x%08X\n", load3);
  }
#+end_src

#+RESULTS:
#+begin_src
0x9EBD7178: x -> 2
load1(-0x100000): 0x00000000
load2(+0x100): 0x00001000
load3(+0x2): 0x00001000
#+end_src

#+caption: 直にアドレスを指定して取得する
#+begin_src C
  int main() {
    char base = 0;
    char a = 'a';
    char b = 'b';
    char c = 'c';

    printf("0x%08X: base\n", &base);
    printf("0x%08X: a\n", &a);
    printf("0x%08X: b\n", &b);
    printf("0x%08X: c\n", &c);
    printf("\n");
    printf("a: 0x%08X\n", *((char *) &base+0x1));
    printf("b: 0x%08X\n", *((char *) &base+0x2));
    printf("c: 0x%08X\n", *((char *) &base+0x3));
  }
#+end_src

#+RESULTS:
#+begin_src
0x5FD01F44: base
0x5FD01F45: a
0x5FD01F46: b
0x5FD01F47: c

a: 0x00000061
b: 0x00000062
c: 0x00000063
#+end_src

* 関連
# 関連するエントリ。なぜ関連させたか理由を書く。意味のあるつながりを意識的につくる。
# この事実は自分のこのアイデアとどう整合するか。
# この現象はあの理論でどう説明できるか。
# ふたつのアイデアは互いに矛盾するか、互いを補っているか。
# いま聞いた内容は以前に聞いたことがなかったか。
# メモ y についてメモ x はどういう意味か。
- [[id:20240717T223527][KDOC 202: 『30日でできる! OS自作入門』]]。出てきたコードを確認した
