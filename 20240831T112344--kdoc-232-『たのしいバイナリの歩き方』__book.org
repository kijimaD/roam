:properties:
:ID: 20240831T112344
:end:
#+title:      KDOC 232: 『たのしいバイナリの歩き方』
#+date:       [2024-08-31 Sat 11:23]
#+filetags:   :book:
#+identifier: 20240831T112344

* この文書のステータス
:LOGBOOK:
CLOCK: [2024-09-01 Sun 09:44]--[2024-09-01 Sun 10:09] =>  0:25
CLOCK: [2024-09-01 Sun 09:11]--[2024-09-01 Sun 09:36] =>  0:25
CLOCK: [2024-09-01 Sun 01:04]--[2024-09-01 Sun 01:29] =>  0:25
CLOCK: [2024-08-31 Sat 22:58]--[2024-08-31 Sat 23:23] =>  0:25
CLOCK: [2024-08-31 Sat 22:29]--[2024-08-31 Sat 22:54] =>  0:25
CLOCK: [2024-08-31 Sat 21:36]--[2024-08-31 Sat 22:01] =>  0:25
CLOCK: [2024-08-31 Sat 21:07]--[2024-08-31 Sat 21:32] =>  0:25
CLOCK: [2024-08-31 Sat 20:42]--[2024-08-31 Sat 21:07] =>  0:25
CLOCK: [2024-08-31 Sat 20:17]--[2024-08-31 Sat 20:42] =>  0:25
CLOCK: [2024-08-31 Sat 17:45]--[2024-08-31 Sat 18:10] =>  0:25
CLOCK: [2024-08-31 Sat 17:19]--[2024-08-31 Sat 17:44] =>  0:25
CLOCK: [2024-08-31 Sat 16:51]--[2024-08-31 Sat 17:16] =>  0:25
CLOCK: [2024-08-31 Sat 15:08]--[2024-08-31 Sat 15:33] =>  0:25
CLOCK: [2024-08-31 Sat 12:12]--[2024-08-31 Sat 12:37] =>  0:25
CLOCK: [2024-08-31 Sat 11:23]--[2024-08-31 Sat 11:49] =>  0:26
:END:
- 作成
  - [X] 2024-09-01 貴島
- レビュー
  - [X] 2024-09-03 貴島

* 概要
[[https://amzn.to/4cQQvLQ][『たのしいバイナリの歩き方』]]は、セキュリティを題材にとって、バイナリ知識でできることを紹介する本。

* メモ
- 無数にあるプログラミング言語の中で、アセンブラが一番「楽しい」を持っている言語だと思った、という(p4)
- ツール(p13)
  - Stirling バイナリエディタ
  - Process Monitor ファイルとレジストリの監視
  - Wireshark ネットワークの監視
- レジストリは、OS([[id:a15d346a-f82e-4796-a78b-85a8d227f0ef][Windows]])上で動作するアプリケーションのために用意された、設定情報のデータベースのこと。ブラウザの設定、拡張子の関連付け、ユーザーパスワードなどが保存されている(p17)
- 静的解析 :: 対象となるプログラムを実行せずに解析する
- 動的解析 :: 対象となるプログラムを実行しながら解析する
- 作者にとって、バイナリエディタ、電卓、逆アセンブラ、デバッガがリバースエンジニアリングにおいて必須アイテムだという(p24)
- アセンブラは難しいように見えるが、現在はさまざまなツールがそろっており、ことソフトウェア解析に使うアセンブラの知識はほとんど必要ない。IDAなどが表示するアセンブラコードを見ればそのことはわかる(p30)
- ステップイン :: 関数内部まで入り込んで実行する
- ステップアウト :: 関数の呼び出しそのものを1命令として実行する
- ソフトウェア解析とは「何をやっているか調べること」であり、プログラミングとは違う。すべての処理を完全に理解する必要はなく、だいたいの雰囲気がわかればよい((p43))
- 静的解析は「全体を広く眺めるイメージ」、動的解析は「局所的に集中して見つめるイメージ」であるという。最初にStirlingやIDAで全体をざっと眺めたあとに、気になったポイントをOllyDbgでステップ実行していく、といった流れで解析することが多いという(p49)
- ソフトウェア解析の現場ではアセンブラコードを読むことはほとんど日常的であるが、逆にアセンブラコードを書くことはほとんどない。誰もが小説を読めるが、小説を書ける人は少ない。同様に、読むことはできても、書くことができないパターンは多い。プログラミングも同じで、書くことと読むことは必要な能力が違う。書くことで、読み書き両方の能力が鍛えられる。本当にアセンブラの知識を深めたければ、1度アセンブラを書いてみるべきである(p75)
- IsDebuggerPresent は、デバッガでアタッチされているのを検知するAPI関数(p114)
- ソフトウェアブレイクポイントとは、デバッガが該当アドレスの命令を0xCC(int3h)に書き換えるという、とても単純なものである。プロセッサは、「0xCCという命令を見つけたら、OSをとおしてデバッガに例外を通知する」という仕組みになっている。そのため、好きなところに0xCCを書けば、いつでもどこでも処理を停止させられる(p139)
- 中間言語にコンパイルされるタイプの言語、Javaや.NETアプリケーションのリバースエンジニアリングは、デバッガや逆アセンブラを使って少しずつ解析していくのではなく、「どこまで本来のソースコードに近い形に戻せるか」という点が重要になる。また異なるスキルセットが必要となる(p144)
- スタックバッファオーバーフロー。問題なのは、%ebpとret_addrが上書きされること。ret_addrは、処理が終了したあと、mainへ戻るためのアドレスが格納されている。これが上書きされていると、攻撃者はあらゆる場所へ処理をジャンプできる。つまり攻撃者が用意したコードに飛べるのなら、それは「任意のコードが実行できる脆弱性」となる(p164)
- print系関数に起因するフォーマットストリングバグ。print系関数には、%nという引数に渡されたポインタへデータサイズを書き込む変換指定文字がある。これを利用して任意のアドレスに任意の値を書き込める(p189)
- Metasploit を使うと、環境ややりたいことにあわせて、shellcode を自動で生成してくれる。最初は勉強を兼ねて自分で手書きしたほうがいいが、理解したあとはツールを利用するのが効率的である(p285)
- EMETとはマイクロソフトが無料で提供する脆弱性緩和ツール(p320)

ツール。

- OllyDbg(動的解析)
- IDA(静的解析)

* 関連
- [[id:20240803T161124][KDOC 210: 『0と1のコンピュータ世界 バイナリで遊ぼう!』]]。より遊びに重きをおいてバイナリを紹介している
