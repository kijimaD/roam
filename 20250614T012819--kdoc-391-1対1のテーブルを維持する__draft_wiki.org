:properties:
:ID: 20250614T012819
:mtime:    20250620085311
:ctime:    20250614012820
:end:
#+title:      KDOC 391: 1対1のテーブルを維持する
#+date:       [2025-06-14 Sat 01:28]
#+filetags:   :draft:wiki:
#+identifier: 20250614T012819

# (kd/denote-kdoc-rename)
# (denote-rename-file-using-front-matter (buffer-file-name) 0)
# (save-excursion (while (re-search-backward ":draft" nil t) (replace-match "")))
# (flush-lines "^\\#\s.+?")

# ====ポリシー。
# 1ファイル1アイデア。
# 1ファイルで内容を完結させる。
# 常にほかのエントリとリンクする。
# 自分の言葉を使う。
# 参考文献を残しておく。
# 文献メモの場合は、感想と混ぜないこと。1つのアイデアに反する
# ツェッテルカステンの議論に寄与するか。それで本を書けと言われて書けるか
# 頭のなかやツェッテルカステンにある問いとどのようにかかわっているか
# エントリ間の接続を発見したら、接続エントリを追加する。カード間にあるリンクの関係を説明するカード。
# アイデアがまとまったらアウトラインエントリを作成する。リンクをまとめたエントリ。
# エントリを削除しない。古いカードのどこが悪いかを説明する新しいカードへのリンクを追加する。
# 恐れずにカードを追加する。無意味の可能性があっても追加しておくことが重要。
# 個人の感想・意思表明ではない。事実や書籍情報に基づいている

# ====永久保存メモのルール。
# 自分の言葉で書く。
# 後から読み返して理解できる。
# 他のメモと関連付ける。
# ひとつのメモにひとつのことだけを書く。
# メモの内容は1枚で完結させる。
# 論文の中に組み込み、公表できるレベルである。

# ====水準を満たす価値があるか。
# その情報がどういった文脈で使えるか。
# どの程度重要な情報か。
# そのページのどこが本当に必要な部分なのか。
# 公表できるレベルの洞察を得られるか

# ====フロー。
# 1. 「走り書きメモ」「文献メモ」を書く
# 2. 1日1回既存のメモを見て、自分自身の研究、思考、興味にどのように関係してくるかを見る
# 3. 追加すべきものだけ追加する

* この文書のステータス
- 作成
  - [X] 2025-06-19 貴島
- レビュー
  - [ ] <署名>
# (progn (kill-line -1) (insert (format "  - [X] %s 貴島" (format-time-string "%Y-%m-%d"))))

# チェックリスト ================
# 関連をつけた。
# タイトルがフォーマット通りにつけられている。
# 内容をブラウザに表示して読んだ(作成とレビューのチェックは同時にしない)。
# 文脈なく読めるのを確認した。
# おばあちゃんに説明できる。
# いらない見出しを削除した。
# タグを適切にした。
# すべてのコメントを削除した。
* 概要
# 本文(見出しも設定する)

親テーブルと子テーブルのレコードが1対1の対応であることを保ちたい場面がある。親だけ、あるいは子だけが消された状態はデータ不整合である。防ぎたい。

たとえばこのような、必ず「ユーザ」は「個人ユーザ」か「会社ユーザ」である、ようなケース。

users。親。

| フィールド |
|----------|
| id       |

user_individuals。子。

| フィールド |
|----------|
| id       |
| user_id  |

user_companies。子。

| フィールド |
|----------|
| id       |
| user_id  |

データベース制約によって、親が消されたら子を削除する、は簡単にできる(DELETE CASCADE)。いっぽう、親子が1対1で子だけの削除を禁止する、というのをデータベースのレベルでは表現できないように見える。

この場合、アプリケーションでガードする、しか方法を知らない。ベストではない。仕様がわかりにくいのと、事故は起きうるのが問題に見える。

- 消すときは親テーブルを消し、親削除による関連削除によって子を削除するルールにする
- ORMのフックで、子テーブルの直接削除は禁止する
- アプリケーションに整合チェックを入れて確認する

* 関連
# 関連するエントリ。なぜ関連させたか理由を書く。意味のあるつながりを意識的につくる。
# - この事実は自分のこのアイデアとどう整合するか。
# - この現象はあの理論でどう説明できるか。
# - ふたつのアイデアは互いに矛盾するか、互いを補っているか。
# - いま聞いた内容は以前に聞いたことがなかったか。
# - メモ y についてメモ x はどういう意味か。
# - 対立する
# - 修正する
# - 補足する
# - 付け加えるもの
# - アイデア同士を組み合わせて新しいものを生み出せないか
# - どんな疑問が浮かんだか
なし。
