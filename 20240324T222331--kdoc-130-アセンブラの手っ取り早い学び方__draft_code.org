:properties:
:ID: 20240324T222331
:end:
#+title:      KDOC 130: アセンブラの手っ取り早い学び方
#+date:       [2024-03-24 Sun 22:23]
#+filetags:   :draft:code:
#+identifier: 20240324T222331

# (denote-rename-file-using-front-matter (buffer-file-name) 0)
# (save-excursion (while (re-search-backward ":draft" nil t) (replace-match "")))
# (flush-lines "^\\#\s.+?")

# ====ポリシー。
# 1ファイル1アイデア。
# 1ファイルで内容を完結させる。
# 常にほかのエントリとリンクする。
# 自分の言葉を使う。
# 参考文献を残しておく。
# 自分の考えを加える。
# 構造を気にしない。
# エントリ間の接続を発見したら、接続エントリを追加する。カード間にあるリンクの関係を説明するカード。
# アイデアがまとまったらアウトラインエントリを作成する。リンクをまとめたエントリ。
# エントリを削除しない。古いカードのどこが悪いかを説明する新しいカードへのリンクを追加する。
# 恐れずにカードを追加する。無意味の可能性があっても追加しておくことが重要。

* この文書のステータス
- 作成
  - [X] 2024-03-24 貴島
- レビュー
  - [ ] <署名>
# (progn (kill-line -1) (insert (format "  - [X] %s 貴島" (format-time-string "%Y-%m-%d"))))

# 関連をつけた。
# タイトルがフォーマット通りにつけられている。
# 内容をブラウザに表示して読んだ(作成とレビューのチェックは同時にしない)。
# 文脈なく読めるのを確認した。
# おばあちゃんに説明できる。
# いらない見出しを削除した。
# タグを適切にした。
# すべてのコメントを削除した。
* 学び方
アセンブリを学ぶ。以前分厚い『独習アセンブリ』を読んだけど、あまり腑に落ちない状態でそのままになっていた。そのときはあまり楽しいと思えなくて、その後が続かなかった。最近読んだ本がいい感じに楽しめたので、その流れを書いておく。

1. 命令セットを決める

   RISC-Vがシンプルでとっつきやすいとのこと。

2. シンプルなコードを書く

   できるだけシンプルに、知りたい部分にフォーカスしたコードを書く。ポインタについて知りたいならポインタだけを書いているコードとか。

3. [[https://godbolt.org/][Compiler Explorer]]でアセンブリに変換する

  コンパイルターゲットをRISC-V向けにすること。

4. C言語に対応している部分を比較する

  Compiler ExplorerがC言語に対応するアセンブリを色分けしてくれるので読みやすい。少し変えてみてどうなるか見る。

アセンブリをガリガリ書いて実行していくというよりは、比較してみるほうが面白いと感じた。アセンブリで実際に何か面白いものを作れたらいいが、そこまでの熱意はないし、高級言語のぬるま湯育ちにはムリ。作るより内部の仕組みを観察する道具として捉えるのがいいのかな。

* 関連
- [[id:20240324T214548][KDOC 129: 『ポインタ理解のためのアセンブリ入門』を読んだ]]。で解説する本の流れが良いと感じたので書いた
