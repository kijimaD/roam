:PROPERTIES:
:ID:       656a0aa4-e5d3-416f-82d5-f909558d0639
:header-args+: :wrap :results raw
:END:
#+title: C language
* 概要
C言語は汎用の[[id:868ac56a-2d42-48d7-ab7f-7047c85a8f39][Programming Language]]。
OS、プログラミング言語、ハードウェアとの接続といった基盤的な部分で使われる。

たとえば…。
- [[id:7a81eb7c-8e2b-400a-b01a-8fa597ea527a][Linux]]
- [[id:cfd092c4-1bb2-43d3-88b1-9f647809e546][Ruby]]
- [[id:a6c9c9ad-d9b1-4e13-8992-75d8590e464c][Python]]
- [[id:1ad8c3d5-97ba-4905-be11-e6f2626127ad][Emacs]]([[id:c7e81fac-9f8b-4538-9851-21d4ff3c2b08][Emacs Lisp]]以外の部分)

現在基盤として使われている多くのプログラムがCで書かれていて、[[id:bb71747d-8599-4aee-b747-13cb44c05773][OSS]]として公開されている。別の言語で書くにしても、既存の巨大なコード群を参考にできるのは大きな利点。
* Memo
** 配列変数は先頭の要素へのポインタ
配列変数には先頭の要素へのポインタが入っていて、インデックスをその分ずらすことで要素を取得できる。配列が0から始まるのはそのため。

- 最初の要素は、*doses もしくは doses[0] で取得できる。

#+caption: 等価なさまざまな表記
#+begin_src C
doses[3] == *(doses + 3) == *(3 + doses) == 3[doses]
#+end_src

#+RESULTS:
#+begin_results
#+end_results

#+caption: ポインタをずらすことで、文字列をスキップできる
#+begin_src C
  void skip(char *msg)
  {
    puts(msg + 6);
  }
  char *msg_from_amy = "Dont call me";
  skip(msg_from_amy);
#+end_src

#+RESULTS:
#+begin_results
all me
#+end_results

** 引数の渡し方
関数呼び出しのとき、デフォルトは値渡しで、コピーされた値が使用される。コピーされるので、呼び出し元の引数の値は変化しない。変化させたいときは、参照を渡す必要がある。
#+caption: main内で座標を保持して、移動するための関数で座標を変化させるような場合、参照渡しでないといけない。
#+begin_src C
  void move(int *lat, int *lon) {
    ,*lat = *lat + 1; // 引数で渡されたlatにはメモリアドレスが入っているので、格納している値を読み込むために*を使う。
    ,*lon = *lon + 1;
  }

  int main() {
    int latitude = 32;
    int longitude = 64;
    move(&latitude, &longitude); // 参照を渡す。参照でない場合、単なる値のコピーとなって、move()内で全く関係ないローカル変数の値が変わるだけになる。main()内の値は変わらない。
    printf("停止...現在位置：[%i, %i]\n", latitude, longitude);
    return 0;
  }
#+end_src

#+RESULTS:
#+begin_results
停止...現在位置：[33, 65]
#+end_results

渡したメモリ位置を更新する関数といえる。
* Tasks
** TODO [[https://9cguide.appspot.com/][総合目次 - 苦しんで覚えるC言語]]
WEB版の入門書。
** WIP [[https://www.oreilly.co.jp/books/9784873116099/][O'Reilly Japan - Head First C]]
:LOGBOOK:
CLOCK: [2022-06-16 Thu 22:32]--[2022-06-16 Thu 22:57] =>  0:25
CLOCK: [2022-06-11 Sat 23:07]--[2022-06-11 Sat 23:32] =>  0:25
CLOCK: [2022-06-11 Sat 22:38]--[2022-06-11 Sat 23:03] =>  0:25
CLOCK: [2022-06-10 Fri 10:10]--[2022-06-10 Fri 10:35] =>  0:25
CLOCK: [2022-06-09 Thu 10:17]--[2022-06-09 Thu 10:42] =>  0:25
:END:
- 41, 59, 67
楽しい入門書。
*** DONE -50
CLOSED: [2022-06-12 Sun 15:57]
*** TODO -100
*** TODO -150
*** TODO -200
*** TODO -250
* Reference
** [[https://kuina.ch/l6prog][６さいからのプログラミング]]
C言語のチュートリアル。
** [[http://www.kouno.jp/home/c_faq/][Language C FAQ]]
日本語版。
** [[http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2137r0.html][P2137R0: Goals and priorities for C++]]
C++の提案書。
** [[http://www.nurs.or.jp/~sug/soft/index.htm][杉浦とソフトウェア開発]]
なんだかすごい人。
** [[http://www.kh.rim.or.jp/~nagamura/misc/stroustrup-interview.html][Bjarne Stroustrup インタビュー (？)]]
C++の開発者へのインタビュー。
* Archives
