:PROPERTIES:
:ID:       656a0aa4-e5d3-416f-82d5-f909558d0639
:header-args+: :wrap :results raw
:END:
#+title: C language
* 概要
C言語は汎用の[[id:868ac56a-2d42-48d7-ab7f-7047c85a8f39][Programming Language]]。
OS、プログラミング言語、ハードウェアとの接続といった基盤的な部分で使われる。

たとえば…。
- [[id:7a81eb7c-8e2b-400a-b01a-8fa597ea527a][Linux]]
- [[id:cfd092c4-1bb2-43d3-88b1-9f647809e546][Ruby]]
- [[id:a6c9c9ad-d9b1-4e13-8992-75d8590e464c][Python]]
- [[id:1ad8c3d5-97ba-4905-be11-e6f2626127ad][Emacs]]([[id:c7e81fac-9f8b-4538-9851-21d4ff3c2b08][Emacs Lisp]]以外の部分)

現在基盤として使われている多くのプログラムがCで書かれていて、[[id:bb71747d-8599-4aee-b747-13cb44c05773][OSS]]として公開されている。別の言語で書くにしても、既存の巨大なコード群を参考にできるのは大きな利点。
* Memo
** 配列
#+caption: 配列要素があらかじめわかっている場合の初期化
#+begin_src git-permalink
https://github.com/kd-collective/NetBSD/blob/89341ae2e1875e7f91cefa9b1dcc0e4549edcde0/lib/libc/time/localtime.c#L869-L871
#+end_src

#+RESULTS:
#+begin_results
static const int	year_lengths[2] = {
	DAYSPERNYEAR, DAYSPERLYEAR
};
#+end_results

#+caption: 通常の年と潤年の日数
#+begin_src git-permalink
https://github.com/kd-collective/NetBSD/blob/89341ae2e1875e7f91cefa9b1dcc0e4549edcde0/lib/libc/time/localtime.c#L864-L867
#+end_src

#+RESULTS:
#+begin_results
static const int	mon_lengths[2][MONSPERYEAR] = {
	{ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 },
	{ 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 }
};
#+end_results

** データの内部構造を表現する
#+caption: tarが各ファイルの情報を表現するために使用する構造体
#+begin_src git-permalink
https://github.com/kd-collective/NetBSD/blob/89341ae2e1875e7f91cefa9b1dcc0e4549edcde0/external/bsd/file/dist/src/tar.h#L53-L71
#+end_src

#+RESULTS:
#+begin_results
union record {
	unsigned char	charptr[RECORDSIZE];
	struct header {
		char	name[NAMSIZ];
		char	mode[8];
		char	uid[8];
		char	gid[8];
		char	size[12];
		char	mtime[12];
		char	chksum[8];
		char	linkflag;
		char	linkname[NAMSIZ];
		char	magic[8];
		char	uname[TUNMLEN];
		char	gname[TGNMLEN];
		char	devmajor[8];
		char	devminor[8];
	} header;
};
#+end_results
** 多態の実装
#+caption: データの種類を定義。名前にtypeをつける慣例
#+begin_src git-permalink
https://github.com/kd-collective/NetBSD/blob/89341ae2e1875e7f91cefa9b1dcc0e4549edcde0/include/rpc/rpc_msg.h#L54-L57
#+end_src

#+RESULTS:
#+begin_results
enum msg_type {
	CALL=0,
	REPLY=1
};
#+end_results

#+caption: msg_typeで2つの型が識別される
#+begin_src git-permalink
https://github.com/kd-collective/NetBSD/blob/89341ae2e1875e7f91cefa9b1dcc0e4549edcde0/include/rpc/rpc_msg.h#L149-L155
#+end_src

#+RESULTS:
#+begin_results
struct rpc_msg {
	uint32_t		rm_xid;
	enum msg_type		rm_direction;
	union {
		struct call_body RM_cmb;
		struct reply_body RM_rmb;
	} ru;
#+end_results

** 共用体の使用例
共用体はメモリを共用し、節約するために用いる。

#+caption: mallocのコードから
#+begin_src git-permalink
https://github.com/kd-collective/NetBSD/blob/89341ae2e1875e7f91cefa9b1dcc0e4549edcde0/lib/libbsdmalloc/malloc.c#L75-L89
#+end_src

#+RESULTS:
#+begin_results
union	overhead {
	union	overhead *ov_next;	/* when free */
	struct {
		u_char	ovu_magic;	/* magic number */
		u_char	ovu_index;	/* bucket # */
#ifdef RCHECK
		u_short	ovu_rmagic;	/* range magic number */
		u_long	ovu_size;	/* actual block size */
#endif
	} ovu;
#define	ov_magic	ovu.ovu_magic
#define	ov_index	ovu.ovu_index
#define	ov_rmagic	ovu.ovu_rmagic
#define	ov_size		ovu.ovu_size
};
#+end_results

空き状態と専有状態を同時にとることはないので、同じメモリ空間を共用できる。

** 構造体の使用例
外部媒体のデータ構造を表現するために構造体が用いられる。

#+caption: ネットワークインターフェースカードのコマンドブロックのデータ構造
#+begin_src git-permalink
https://github.com/kd-collective/NetBSD/blob/89341ae2e1875e7f91cefa9b1dcc0e4549edcde0/sys/dev/ic/i82557reg.h#L147-L151
#+end_src

#+RESULTS:
#+begin_results
struct fxp_cb_nop {
	volatile uint16_t cb_status;
	volatile uint16_t cb_command;
	volatile uint32_t link_addr;
};
#+end_results

#+caption: TCPパケットヘッダの定義
#+begin_src git-permalink
https://github.com/kd-collective/NetBSD/blob/89341ae2e1875e7f91cefa9b1dcc0e4549edcde0/external/bsd/tcpdump/dist/tcp.h#L37-L47
#+end_src

#+RESULTS:
#+begin_results
struct tcphdr {
	uint16_t	th_sport;		/* source port */
	uint16_t	th_dport;		/* destination port */
	tcp_seq		th_seq;			/* sequence number */
	tcp_seq		th_ack;			/* acknowledgement number */
	uint8_t		th_offx2;		/* data offset, rsvd */
	uint8_t		th_flags;
	uint16_t	th_win;			/* window */
	uint16_t	th_sum;			/* checksum */
	uint16_t	th_urp;			/* urgent pointer */
} UNALIGNED;
#+end_results

構造体にメソッドやプロパティに相当する定義をすることで、オブジェクト風に使える。

#+caption: オブジェクト指向的に使う
#+begin_src git-permalink
https://github.com/kd-collective/NetBSD/blob/89341ae2e1875e7f91cefa9b1dcc0e4549edcde0/sys/sys/domain.h#L55-L93
#+end_src

#+RESULTS:
#+begin_results
struct	domain {
	int	dom_family;		/* AF_xxx */
	const char *dom_name;
	void	(*dom_init)		/* initialize domain data structures */
			(void);
	int	(*dom_externalize)	/* externalize access rights */
			(struct mbuf *, struct lwp *, int);
	void	(*dom_dispose)		/* dispose of internalized rights */
			(struct mbuf *);
	const struct protosw *dom_protosw, *dom_protoswNPROTOSW;
	int	(*dom_rtattach)		/* initialize routing table */
			(rtbl_t **, int);
	int	dom_rtoffset;		/* an arg to rtattach, in bits */
	int	dom_maxrtkey;		/* for routing layer */
	void	(*dom_if_up)		/* ifnet brought up */
			(struct ifnet *);
	void	(*dom_if_down)		/* ifnet brought down */
			(struct ifnet *);
	void	*(*dom_ifattach)	/* attach af-dependent data on ifnet */
			(struct ifnet *);
	void	(*dom_ifdetach)		/* detach af-dependent data on ifnet */
			(struct ifnet *, void *);
	void	(*dom_if_link_state_change)
			(struct ifnet *, int);
	const void *(*dom_sockaddr_const_addr)(const struct sockaddr *,
					       socklen_t *);
	void	*(*dom_sockaddr_addr)(struct sockaddr *, socklen_t *);
	int	(*dom_sockaddr_cmp)(const struct sockaddr *,
	                            const struct sockaddr *);
	struct sockaddr *(*dom_sockaddr_externalize)(struct sockaddr *,
	                                             socklen_t,
						     const struct sockaddr *);
	const struct sockaddr *dom_sa_any;
	struct ifqueue *dom_ifqueues[2]; /* ifqueue for domain */
	STAILQ_ENTRY(domain) dom_link;
	struct	mowner dom_mowner;
	uint_fast8_t	dom_sa_cmpofs;
	uint_fast8_t	dom_sa_cmplen;
};
#+end_results

** strlenの実装
#+begin_src git-permalink
https://github.com/kd-collective/NetBSD/blob/89341ae2e1875e7f91cefa9b1dcc0e4549edcde0/common/lib/libc/string/strlen.c#L49-L56
#+end_src

#+RESULTS:
#+begin_results
strlen(const char *str)
{
	const char *s;

	for (s = str; *s; ++s)
		continue;
	return(s - str);
}
#+end_results

ポインタを文字列の終端に達するまでインクリメントして、先頭のアドレスを差し引く。
#+begin_src C :results output
  #include <stdio.h>
  #include <string.h>
  int test_strlen(char *str) # strは先頭のアドレス
  {
    char *s;

    for (s = str; *s; ++s)
      continue; # 要素の数だけインクリメント
    return(s - str); # 進んだ分を求める
  }
#+end_src

#+RESULTS:
#+begin_results
#+end_results

** 無限ループのイディオム
無限ループの書き方。条件を指定しない。

#+begin_src git-permalink
https://github.com/kd-collective/emacs/blob/d983e080e027bd7b680b1e40ccfa0c71d6a3cd94/lib-src/emacsclient.c#L275-L286
#+end_src

#+RESULTS:
#+begin_results
      for (;;)
	{
	  char *buf = malloc (buf_size);
	  if (!buf)
	    return NULL;
	  if (getcwd (buf, buf_size) == buf)
	    return buf;
	  free (buf);
	  if (errno != ERANGE || buf_size == bufsize_max)
	    return NULL;
	  buf_size = buf_size <= bufsize_max / 2 ? 2 * buf_size : bufsize_max;
	}
#+end_results

** 配列変数は先頭の要素へのポインタ
配列変数には先頭の要素へのポインタが入っていて、インデックスをその分ずらすことで要素を取得できる。配列が0から始まるのはそのため。

- 最初の要素は、*doses もしくは doses[0] で取得できる。

#+caption: 等価なさまざまな表記
#+begin_src C
doses[3] == *(doses + 3) == *(3 + doses) == 3[doses]
#+end_src

#+RESULTS:
#+begin_results
#+end_results

#+caption: ポインタをずらすことで、文字列をスキップできる
#+begin_src C
  void skip(char *msg)
  {
    puts(msg + 6);
  }
  char *msg_from_amy = "Dont call me";
  skip(msg_from_amy);
#+end_src

#+RESULTS:
#+begin_results
all me
#+end_results

** 引数の渡し方
関数呼び出しのとき、デフォルトは値渡しで、コピーされた値が使用される。コピーされるので、呼び出し元の引数の値は変化しない。変化させたいときは、参照を渡す必要がある。
#+caption: main内で座標を保持して、移動するための関数で座標を変化させるような場合、参照渡しでないといけない。
#+begin_src C
  void move(int *lat, int *lon) {
    ,*lat = *lat + 1; // 引数で渡されたlatにはメモリアドレスが入っているので、格納している値を読み込むために*を使う。
    ,*lon = *lon + 1;
  }

  int main() {
    int latitude = 32;
    int longitude = 64;
    move(&latitude, &longitude); // 参照を渡す。参照でない場合、単なる値のコピーとなって、move()内で全く関係ないローカル変数の値が変わるだけになる。main()内の値は変わらない。
    printf("停止...現在位置：[%i, %i]\n", latitude, longitude);
    return 0;
  }
#+end_src

#+RESULTS:
#+begin_results
停止...現在位置：[33, 65]
#+end_results

渡したメモリ位置を更新する関数といえる。
* Tasks
** TODO [[https://9cguide.appspot.com/][総合目次 - 苦しんで覚えるC言語]]
WEB版の入門書。
** WIP [[https://www.oreilly.co.jp/books/9784873116099/][O'Reilly Japan - Head First C]]
:LOGBOOK:
CLOCK: [2022-06-16 Thu 22:32]--[2022-06-16 Thu 22:57] =>  0:25
CLOCK: [2022-06-11 Sat 23:07]--[2022-06-11 Sat 23:32] =>  0:25
CLOCK: [2022-06-11 Sat 22:38]--[2022-06-11 Sat 23:03] =>  0:25
CLOCK: [2022-06-10 Fri 10:10]--[2022-06-10 Fri 10:35] =>  0:25
CLOCK: [2022-06-09 Thu 10:17]--[2022-06-09 Thu 10:42] =>  0:25
:END:
- 41, 59, 67
楽しい入門書。
*** DONE -50
CLOSED: [2022-06-12 Sun 15:57]
*** TODO -100
*** TODO -150
*** TODO -200
*** TODO -250
* Reference
** [[https://kuina.ch/l6prog][６さいからのプログラミング]]
C言語のチュートリアル。
** [[http://www.kouno.jp/home/c_faq/][Language C FAQ]]
日本語版。
** [[http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2137r0.html][P2137R0: Goals and priorities for C++]]
C++の提案書。
** [[http://www.nurs.or.jp/~sug/soft/index.htm][杉浦とソフトウェア開発]]
なんだかすごい人。
** [[http://www.kh.rim.or.jp/~nagamura/misc/stroustrup-interview.html][Bjarne Stroustrup インタビュー (？)]]
C++の開発者へのインタビュー。
* Archives
