:PROPERTIES:
:ID:       a23ceb84-e89a-4905-b931-1944a0b828b7
:END:
#+title: Learning

* 概要
学び方についてまとめる。
* Memo
** コードは初期段階でしかない
WEBプログラマーの場合まず身につけることは[[id:cfd092c4-1bb2-43d3-88b1-9f647809e546][Ruby]]とかプログラミング言語になる。
新しい[[id:868ac56a-2d42-48d7-ab7f-7047c85a8f39][Programming Language]]を学ぶときは、まず体で覚えて文法を楽に認識できるようにする。
いちいち考えずとも、自然に認識できる状態にする。先にコードを読み書きする。
本を読んで学ぶのはそれからでいい。
コード例をすばやく理解でき、何度か見た謎の文法がああそういうことだったのかと納得できる。

最初はコードだけできれば仕事が万事できるように見えるのだが、それだけでない。
データ関連とか、配置とか、パスとか、何かを作る上で無数に決定していくことになるのでそれらをすべて知らないとスピードが出ない。マイグレーションのたびにコマンドを調べたり、 [[id:afccf86d-70b8-44c0-86a8-cdac25f7dfd3][RSpec]]を書くたびにマッチャーを調べてたら一瞬で時間が溶ける。
そして、脳内だけで展開できないと、開発の会話についていけない。
総合的な[[id:e04aa1a3-509c-45b2-ac64-53d69c961214][Rails]]での開発や、データ関係、目の前にあるコードベースへ慣れていく及び慣れるスピードを増やすこと、が必要に
なる。

何か難しいことをやるというよりは、地道に数と時間をこなすしかなさそう。
プライベートでなにかしらのWEB開発プロジェクトをやることのが必要だろう。全体を触っておいて、 *できる* だけでなくスピードも上げていくといい。
** 進め方を学ぶ
強い人はその技術だけでなく、進め方に特徴があるように見える。
適切な段階と手順を踏むことで、困難に見えることを実現可能なことに落とし込んでいる。

たとえばWebアプリケーションでデータベースの変更を伴う変更…とくにテーブル名を変更するとか、直接動作に影響しないものはそのままになりがちだ。
この例の場合は単純にいうと面倒くさいということなのだが、その理由の内訳を見ると、データベース関連の変更は事故の危険がある、変更が莫大になるところが大きい。強い人はどう進めるかというと、分割して安全に淡々と進める。そしてみんなが気づいてるおかしなところをブルドーザーのように解決していく。

こういった流れは、本には書いてない。ただ精神的習慣として、獲得していったものに見える。
幸いなことに、典型的なタスクの進め方はリポジトリの過去のPRを読むことで理解できる。
OSSでも良いのだが、日本語のものは少なく、理解できる規模感のものとなるとさらに少なくなる。仕事でやっているリポジトリは、単にお金を稼ぐための情報置き場でなく、過去の偉人が遺した情報の宝庫でもある。
** 高い技術を持った人の特徴
強い人を観察して感じたこと。

- 異常に仕事が早い
  PR出してくるのが異様に早い。仕事が早いので経験値もたまりやすい。
- ゴリゴリとリファクタリングする
  異常な状態への感度が高い。大量のfile changedを恐れない。淡々とやる。
- 一発で理解する量が多い
  1回で理解し、一度触ったコードなら確度をもって話すことができる。仕様としてほかの人に伝えることもできる。
- 端的な文章
  自信がないと長く書きすぎになるが、そういう感じでもなく、必要な情報が端的にかかれている。
- 明確なスコープ
  スコープをもって1つのPRをやる。1つの目的でも変更が莫大になることはあるが、それを恐れない。
- 既存コード関わらず成果を出す 普通の人は既存コードが汚いから…と言いがち。強い人はその間に既存コードごとすべてを修正してる。ひどいコードに直面して何か言いがちなとき、みんなが同じ反応して足踏みする、というわけではない。強い人ならどうするかを考えた方がよさそう。直面したときの反応は、明確な技術の差にみえる。
** 本を買う
- 出版が新しいものを買う
[[id:a6980e15-ecee-466e-9ea7-2c0210243c0d][  JavaScript]], [[id:dc50d818-d7d1-48a8-ad76-62ead617c670][React]]など、すぐ情報が古くなる分野はちゃんと出版年を確認してから買ったほうがいい。最新のとは変わっていて、あまり役にたたないことがある。ほかのプログラミング言語の本では気にしたことはないが、JS関連ではいくつかあった。
- 日本語でないと読めなさそうなとき
  あまり概念を把握してないとき。新しい概念を他言語で理解するのは大変。まず土台を作っておけば、理解できる。
  コードの割合が低い本。コードだと理解できるが、文章の割合が高いと理解できないことが多い。
