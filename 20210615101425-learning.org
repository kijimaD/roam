:PROPERTIES:
:ID:       a23ceb84-e89a-4905-b931-1944a0b828b7
:END:
#+title: Learning

* 概要
学び方についてまとめる。
* Memo
** Head Firstシリーズ
Head Firstシリーズの序文では、学習に関して示唆に富むことを書いている。
ビジュアル、自分で考えること、会話体、繰り返し説明する…。
向き不向きが分かれそうだが、一度試しておくべき本。

メカニズム、理由を解説しているので自分が何かを記録したり書いたりするときにも役立つ。

脳を思い通りにさせるためできること。
- じっくり読みましょう。理解すればするほど、記憶すべきことは少なくなります
- 問題を解きましょう。自分のノートに書き込んでください
- 「素朴な疑問に答えます」を読みましょう
- この本を読んだ後は寝るまで他の本を読まないようにしましょう。少なくとも、難しいものは読まないようにしましょう
- 内容をはっきりと声に出してみましょう
- 水をたくさん飲みましょう
- 脳に耳を傾けましょう
- 感情を持ちましょう
- たくさんのコードを書きましょう
** 影響範囲の広いリファクタリング
修正ひとつひとつの難易度は大したことないが、影響範囲莫大なことが先伸ばしにさせている負債。たとえばfactoryを全体的に修正する、というような場合。
広く浅く1種類の問題を解決していく。

1. まずネストをやめる(全体)
2. traitを使う(全体)
3. 不要な記述削除(全体)
4. 莫大になるものは適宜ごとでコミットを切る
** コードは最低限の装備レベル
WEBプログラマーの場合まず身につけることは[[id:cfd092c4-1bb2-43d3-88b1-9f647809e546][Ruby]]とかプログラミング言語になる。
新しい[[id:868ac56a-2d42-48d7-ab7f-7047c85a8f39][Programming Language]]を学ぶときは、まず体で覚えて文法を楽に認識できるようにする。
いちいち考えずとも、自然に認識できる状態にする。先にコードを読み書きする。
本を読んで学ぶのはそれからでいい。
コード例をすばやく理解でき、何度か見た謎の文法がああそういうことだったのかと納得できる。

最初はコードだけできれば仕事が万事できるように見えるのだが、それだけでない。
データ関連とか、配置とか、パスとか、何かを作る上で無数に決定していくことになるのでそれらをすべて知らないとスピードが出ない。マイグレーションのたびにコマンドを調べたり、 [[id:afccf86d-70b8-44c0-86a8-cdac25f7dfd3][RSpec]]を書くたびにマッチャーを調べてたら一瞬で時間が溶ける。
そして、脳内だけで展開できないと、開発の会話についていけない。
総合的な[[id:e04aa1a3-509c-45b2-ac64-53d69c961214][Rails]]での開発や、データ関係、目の前にあるコードベースへ慣れていく及び慣れるスピードを増やすこと、が必要に
なる。

何か難しいことをやるというよりは、地道に数と時間をこなすしかなさそう。
プライベートでなにかしらのWEB開発プロジェクトをやることのが必要だろう。全体を触っておいて、 *できる* だけでなくスピードも上げていくといい。
** 進め方を学ぶ
強い人はその技術だけでなく、進め方に特徴があるように見える。
適切な段階と手順を踏むことで、困難に見えることを実現可能なことに落とし込んでいる。

たとえばWebアプリケーションでデータベースの変更を伴う変更…とくにテーブル名を変更するとか、直接動作に影響しないものはそのままになりがちだ。
この例の場合は単純にいうと面倒くさいということなのだが、その理由の内訳を見ると、データベース関連の変更は事故の危険がある、変更が莫大になるところが大きい。強い人はどう進めるかというと、分割して安全に淡々と進める。そしてみんなが気づいてるおかしなところをブルドーザーのように解決していく。

こういった流れは、本には書いてない。ただ精神的習慣として、獲得していったものに見える。
幸いなことに、典型的なタスクの進め方はリポジトリの過去のPRを読むことで理解できる。
OSSでも良いのだが、日本語のものは少なく、理解できる規模感のものとなるとさらに少なくなる。仕事でやっているリポジトリは、単にお金を稼ぐための情報置き場でなく、過去の偉人が遺した情報の宝庫でもある。
** 強い人の進め方: 解決スクリプトを書く
強い人は仕事の梃子としてコードを使う率が高いように見える。
並の人は、たとえば[[id:e04aa1a3-509c-45b2-ac64-53d69c961214][Rails]]開発なら、[[id:e04aa1a3-509c-45b2-ac64-53d69c961214][Rails]]の機能開発以外でコードを使うことはあまりない。

並の人の例。
- 不整合データを調査する → [[id:8b69b8d4-1612-4dc5-8412-96b431fdd101][SQL]]を使って各条件を調べる。合っているか手動で確かめる
- 不整合データを削除する → 調査する、各環境のコンソールで逐次実行を繰り返す
- 使われてないファイルを削除する → 逐一grepして削除していく
- リレーションの不整合を調査する → 1つ1つ地道に見ていくか、grepで頑張る
- バージョンを上げる → バージョン番号をgrepして置換

強い人の場合。
- 不整合データを調査する → Rakeタスクで1発で必要なデータをすべて出力する。タスク内にチェック処理を入れて検証する
- 不整合データを削除する → 調査 → Rakeタスクで一発で不整合をすべて解決する。各環境でタスクを実行するだけ
- 使われてないファイルを削除する → 使われてないことを検知+削除するスクリプトを書く
- リレーションの不整合を調査する → 1つ1つ地道に見ていくか、grepで頑張る。リレーションを検証するコードを書く
- バージョンを上げる → リポジトリ全体で一括置換

そうやって使うのか、と驚かされることが多い。とても創造的に見える。コードを自由に手足のように使っている。

つまらない単調な仕事があったとき重要なのは、あの人も同じように仕事を進めるだろうか、と考えることだ。強者は100倍の速度で終わらせている、なんてことはよくある。つまらない仕事があるというより、自分でつまらなくしている可能性がある。

具体的にどうすればそうなれそうか考えてみると、1.)2次元的なコードを書くことへの慣れ、2.)道具を作るマインドに思える。
2次元的というのはコードを生成して実行するコード、みたいなことだ。xargsを使いこなせること、といってもいい。1次元的はターミナルに直に打って1つ結果が返ってくるようなこと。またライブラリとかの、ほかのプログラマーが使う用のコードを書く側(使う側ではなく)である側面も技術や想像力といった面で重要なようだ。具体的に思いうかべている超強い人は、[[id:e04aa1a3-509c-45b2-ac64-53d69c961214][Rails]]の上位のコントリビューターだった。

並のプログラマーは、エンドユーザ(つまりサイトをブラウザで利用してる人)に向けてプログラムしている。だから、具体的な問題な問題に対する解決が多く、梃子がきかない。抽象的な問題の解決に不慣れに見える。
強いプログラマーは、ほかのプログラマーに向けて抽象的な目的や手段を使ってプログラムしているから、抽象的な問題を解決するのに慣れている。梃子がきいて、莫大な成果を上げる。
** 強い人の特徴
強いプログラマーを観察して感じたこと。共通する特徴を出せるほど知らないので、だいたい特定の一人を思い浮かべる。

- 異常に仕事が早い
  - PR出してくるのが異様に早い。例: 38コミット、180Files Changed が一日で来る。普通の人が1週間かかることを1日でやる。単純な変更でも何かしらの技術の梃子がはたらいているように見える(詳細不明)。
- 莫大な変更を恐れずリファクタリングする
  - あらゆる分野に異常な状態への感度が高い。 解決法がクール。また、修正のために全体を変えないといけない、ようなことも尻込みせずやる。難易度というよりその影響範囲や変更数のため後回しになっていることも高速で潰していく。
- 一発で理解する量が多い
  - 1回で理解し、一度触ったコードなら確度をもって話すことができる。仕様としてほかの人に伝えることもできる。
- 端的な文章 自信がないと長く書きすぎになるが、そういう感じではない。必要な情報が端的にかかれている。素っ気ないともいえる。フランクな書き言葉。
- 明確なスコープ
  - スコープをもって1つのPRをやる。1つの目的でも変更が莫大になることはあるが、それを恐れない。
- 既存コード関わらず成果を出す。
  - 普通の人は既存コードが汚いから、しょうがない…と言いがち。強い人はその間に既存コードごとすべてを修正してる。環境の側を変える。ひどいコードに直面して何か言いがちなとき、みんなが同じ反応して足踏みする、というわけではない。強い人ならどうするかを考えた方がよさそう。直面したときの反応は、明確な技術の差にみえる。

コードや環境を完全にコントロールしているように見えた。コンピュータに振り回されるのではなくて、明確に命令する側だった。プログラマーは本質的に何だってできる、ということを確信させてくれる。比較して凹むことも多いだろうけど、すごい人と働くことはおもしろそう。
** 語録
いい言葉だったので、強プログラマーの言葉を(勝手に)保存。
#+begin_quote
参考までに、ここでのレビューで着目すべきは、以下かなと思ってます。

1. Activehashのバージョンがあがったことでプロダクションに影響がないかを、CHANGELOGなどの差分を見て確認する（主に破壊的変更がないかがだいじ。ただ x.z.y とバージョン番号がついていて、メジャーバージョン.マイナーバージョン.パッチバージョンとがあって、大きな変更がある場合はメジャーバージョンがあがるので、マイナーバージョンの場合はある程度気楽に見ても問題はないです）
2. sampleを使っているのがテストコードなので、CIが通っていれば概ね問題ない
3. 手元でcheckoutして直し漏れがないか確認。ただ、今回の修正対象がテストコードなのと、 直し漏れがあったところで入出力が変わらないのであれば、そこまで神経質になる必要はない と思ってます（神経質になるほうがかえって生産性を落とすんじゃないのかな、と思います）
注力すべきところ、しなくていいところ、を使い分けてもいいかなと思いますが、経験則もあるので、やっていくうちに身につければいいと思います。なので参考までに、という話。

どちらでも変わらない場合の「重箱の隅」をつつくのがコードレビューではない 、というのだけ共通認識があると嬉しいかもなあ。ミスだったりその変更によって結果が変わる場合はとても大事なんですけど。

という自分も、むかしは「たくさん何かをコメントすれば価値がある」と誤解していたんですけど、 "他人に修正ないし判断を強いる" ことなので「まあ別にここでやらなくてもよくない?」ということに関してはマージしてリリースするのを優先した方が、 "エンドユーザーから見たプロダクトの価値" という視点でみると、価値があるアクションかな〜と思ってます。

そうですね、初学者にありがちなのは、コードレビューを「フォーマットの精査」と認識していることがあるんですが、そういうのはrubocopみたいなのでやればよくて、注目すべきは

1. 要求通りか、ちゃんと動くか
2. ぶっこわれてないか、ぶっこわれないか
3. 入出力が適切か
4. 計算量が問題ないか
5. 設計や命名に問題がないか、あとで辛くならないか
の5点であって、それ以外は割とどちらでもいいこと（nits）かなと思ってます。
#+end_quote
** 本を買う
- 出版が新しいものを買う
[[id:a6980e15-ecee-466e-9ea7-2c0210243c0d][  JavaScript]], [[id:dc50d818-d7d1-48a8-ad76-62ead617c670][React]]など、すぐ情報が古くなる分野はちゃんと出版年を確認してから買ったほうがいい。最新のとは変わっていて、あまり役にたたないことがある。ほかのプログラミング言語の本では気にしたことはないが、JS関連ではいくつかあった。
- 日本語でないと読めなさそうなとき
  あまり概念を把握してないとき。新しい概念を他言語で理解するのは大変。まず土台を作っておけば、理解できる。
  コードの割合が低い本。コードだと理解できるが、文章の割合が高いと理解できないことが多い。
