:PROPERTIES:
:ID:       5546c2ef-f650-40b5-b37b-1a8aeb1884f8
:END:
#+title: template
* 概要
テンプレートはコミュニケーションや思考の枠組みとなる。
さらに改良して次に活かすことができる。
* 利点
- ソフトウェア開発では正確なコミュニケーションが重要になる。
  抽象的で理解しづらいから。伝わっているかわからないから。
- 文字でのやりとりでは、キャッチボールなく一度に伝える論理性の強さが必要。テンプレートは効果的に使える。
- 沿って書くことでスピードも上がる。
- テンプレートに慣れることで、ほかの似たようなことにも応用できる。
* テンプレート集
** 記事
[[https://gist.github.com/LambdaNote/0d33b7d8284a3c99cffd1a5aa83c115f][記事の書き方]]をベースに、メモ。
*** 構成
記事全体をどう構成するかは、解説する内容や目的（情報の要約、チュートリアルなど）によって異なる。

- 何のために記事を書くか（問題意識を読者と共有）
- 解説の前提となる情報の整理（読者を記事の土俵に上げる）
- 主たる解説
- まとめ、練習問題、関連情報、参考資料など

通常、大構造の内部は、さらに構造化したほうが読みやすくなる。
しかし、構造が深くなると読者が迷子になりやすいので、大構造の下位は原則として1段階のみとする。
*** 段落の書き方
段落を書くときは以下の2点に注意する。

- ある段落を1つ取り出したとき、その内容を簡潔に要約できるか
- 段落と段落の関係は、全体として伝えたい内容にとって適切か

差分が見やすくなるように、段落内ではなるべく句点ごとにこまめに改行を挿入する。

段落は次の要領で記述する。

- 空行から次の空行までの文章が、1つの段落になる
- 途中で改行しても、新しい段落にはならない

段落内および段落間をうまく構成すると、言いたかったことが伝わりやすい記事になる。
各段落の内容を自分で要約しながら自分で読み返してみるのがおすすめ。
*** 箇条書き
段落の主張を見やすく整理することを目的として、必要に応じて箇条書きを利用する。
箇条書きはあくまでも段落に従属するものとし、箇条書きのみで説明が終わらないようにする。
箇条書きには、連番がつかないものと、つくものがある。それぞれ以下の要領で使う。

- 箇条書き（Unordered List）
  基本的には連番なしの箇条書きを使う。

- 項目1
  + サブ項目は1階層のみ可
- 項目2
  1. 連番つき箇条書きのサブ項目の例
- 連番つき箇条書き（Ordered List）
  項目間の順序に意味がある場合や、あとから番号で参照したい場合は、連番つき箇条書きを使う。

  1. 項目1
  2. 項目2
*** コードブロック

技術書において、プログラムの一部を示したコードブロックは主要な解説対象である。
したがって、コードブロックの提示をもって説明を終わらせるのではなく、そのコードについて日本語で説明を施すようにする。 具体的には、次のような内容を説明する。

1. なぜ本文のこの位置でそのコードを提示するのか
2. 何を実現するコードなのか
3. コードの各部にはどのような役割があり、どのように動作するか

プログラミング言語のコメント機能を使ってコード中に動作の説明を付記するのは、上記のうち3のみにする。
コメント機能によるコードの動作の補足説明は、コードの中身をしっかり読む段階にある読者にとってはとても有用だが、初見ではあまり読まれない。
特に上記の1と2の内容については、本文でしっかりと解説するようにする。
** Commit Messages
*** David Winterbottom
[[https://codeinthehole.com/tips/a-useful-template-for-commit-messages/][A useful template for commit messages — David Winterbottom]] を日本語にした。
#+begin_src
# 適用された場合、このコミットは…

# なぜこの変更が必要か?
この変更の前は、

# この問題をどう解決するか？
この変更は、

# 関連チケット、リンク、記事などの情報源を入力
#+end_src
*** Conventional Commits
- [[id:36da3e35-29c9-480f-99b3-4a297345bd5d][Conventional Commits]]
  コミットメッセージのための規約であり、テンプレートとは違うが参考になる。
** Issue
OSSによって、さまざまなテンプレートがあって参考にできそう。
気になるのがあったら貼っておく。
** PR
キャッチボールを減らすためには、過不足なく情報を伝える必要がある。
テンプレートはその考えるコストを減らすことができる。
** Design doc
[[id:d26cecee-48f4-466f-853c-8b65bdb2580a][Design doc]]はプロジェクトへ取り組む前に書く仕様書。
これを元に人や資源を集め、期間を設定し…メンバーのプロジェクトへの理解を深める、というふうに基盤となっていく。

有名企業がテンプレート公開してたりする。
*** Google
- [[https://gist.github.com/daijinload/ae9fd5438a7f954106bbfcc0eed485c0][Googleのデザインドックのマークダウンサンプルらしい]]
から持ってきた。
**** プロジェクトのタイトル
# [例：作成するライブラリの名前は]
**** プロジェクトの目的
# [何を実現するの？]
**** プロジェクトの背景
# [どんな背景があるから実現するの？]
**** ハイレベルアーキテクチャ
# [コードだけでは分からない作成物のアーキテクチャを画像などで]
**** プロジェクトの参加者
# [連絡先が大切。誰が参加するのかを明らかにしよう]
**** 仕様（とくに従うべき仕様がなければ飛ばす）
***** 実装する仕様
# [事前に仕様が決まっていたら]
***** 既存のものとの相違点
# [既存のものと何が違うのか、比較対象の仕様があれば言えるだろう。]
***** 関連する仕様
# [関連する仕様があれば]
**** 各クラスの概要
# [各クラスの概要を書く。]
**** # 実装
***** インターフェイス
# [各クラスのインターフェイスの概要。hファイルや、javadocやpod形式かな。関数や構造体を定義するコードとコメント。]
***** 処理フロー
# [「どのように処理をおこなうか」を各関数内の処理フローを上記で説明したインターフェイスに基づき、自然言語で詳細に書く]
***** 作成物の使用例
# [おもにサンプルコード]
**** セキュリティやプライバシーについての考察
# [考えられる問題と、それに対する対処方法]
**** 既知でオープンな問題
# [事前にわかっている様々な課題]
**** テスト計画、モニタープラン
# [思いついたテストを思いついただけ書く]
# [テストケースの記述]
# [運用時の考慮。障害の発見方法や、復旧方法など]
**** 参考文献
# [参考文献を書く]
**** レポジトリ
# [サーバのアドレスや位置]
**** Docの編集の履歴
# [編集日、編集者、何をしたのか、の3つ組を書く]
** カスタマーサービス
メールを送る前に試してほしいこと、よくある問題をまとめておく。
実際にメールを送るときもフリーテンプレートでなく調査結果や、試したことを項目として入れておくことで価値のある情報になる。

テンプレートがない場合、「動きません」みたいなメールが来て何のヒントにもならない。
再度基本的な情報(ブラウザ、ネットにつながってますか…)を聞くが時間がかかる。
エンジニリング的に何もヒントになる情報がないのにユーザは怒り始め、サービス担当者から急かされることになる。

AmazonやGoogleなど、莫大なサポートをしている企業のページはかなり参考になる。
たいていの問題はサポートへ問い合わせる前に解決する。
もし解決しなくても少しでも早く解決するための方法が整備されている。
** FAQ
よくある質問もテンプレートのひとつ。
** [[id:1fc79e15-1830-47eb-a31d-f33cd98ce2f8][DB Design]]
DB設計の共有をするためのテンプレート。
技術的フィードバックをもらうためには、背景を完全に共有する必要がある。
共有せずに最高の答えをもらうことは期待できない。
*** 背景
- 既存の機能の説明
- 用語やテーブルの解説
*** やりたいこと
- やりたいこと。
- なぜそれをやる必要があるか
- どのような利点があるか
- モック。イメージ
- ユーザのユースケースの例。どのように遷移してその機能を使用するか
*** 制約と解決策
- どのような難しさがあるか
- 解決方法
*** ER図と説明
- ER図の意図の説明
*** 運用
- データの初期セットはどうやって誰が行うか
- データが途中で変わる可能性はあるか
- いつ追加されるか
- 誰が編集するか
*** エッジケース
ビジネスサイドはごくわずかなケースしか考慮してない可能性が高い。
できるだけエンジニアサイドで事前に想定されるケースを出しておく必要がある。
- Xの場合の表示はどうなるか
*** マージとリリースをどの段階で行うか
- たとえばテーブルを切り替えるとDBだけの話しでなくなり、viewも切り替える必要があるわけだがそこはどうするのか。
- どこまでユーザの影響があるのか。
- どうやってできるだけ影響を少なくするのか。
- 新機能はどの時点で見られるようにするのか。
- リリースとはどういうことをいうのか、認識は合っているか(マスターブランチにマージすることなのか、デプロイすることなのか、ユーザが見られるようにすることなのか)。
- 毎回デプロイもするが、ユーザには見えなくするのでよいか、あるいは専用にブランチを切って作業をするか。
- データ移行はどうするか。
*** 作業の進め方
- どの時点まで並列して進められるか
- 破壊的変更はどこで起こるか
- データの移行はどのタイミングで行うか
*** 担当者
- 誰が何を担当するか
*** Todo
- 次までにやることはなにか
** Briefing
参考: [[https://note.com/141ishii/n/na578fec5ef84#dgZ3V][【1時間で分かる】P&G流マーケティングの教科書｜石井賢介（Marketing Demo代表取締役）｜note]]
マーケティング戦略を元に、広告代理店に依頼をするためのテンプレート。
広告代理店は戦略を作品に翻訳するのであって、戦略が存在して、うまく伝達しないことには機能しない。
*** 目的
*** WHO情報(Job、デモグラ、ペルソナ)
*** コミュニケーションで起こしたい消費者の態度変容
*** コンセプト/訴求内容
*** 製品情報(POD、テクノロジー、デモ)
*** 変更不可能なポイント(ロゴ、パッケージ、起用するタレント等)
*** 予算
*** スケジュール
* Memo
* Tasks
* Reference
* Archives
