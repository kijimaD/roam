:PROPERTIES:
:ID:       5546c2ef-f650-40b5-b37b-1a8aeb1884f8
:END:
#+title: template
* 概要
テンプレートはコミュニケーションや思考の枠組みとなる。
さらに改良して次に活かすことができる。
* 利点
- ソフトウェア開発では正確なコミュニケーションが重要になる。
  抽象的で理解しづらいから。伝わっているかわからないから。
- 文字でのやりとりでは、キャッチボールなく一度に伝える論理性の強さが必要。テンプレートは効果的に使える。
- 沿って書くことでスピードも上がる。
- テンプレートに慣れることで、ほかの似たようなことにも応用できる。
* さまざまなテンプレート
** Issue
OSSによって、さまざまなテンプレートがあって参考にできそう。
気になるのがあったら貼っておく。
** PR
キャッチボールを減らすためには、過不足なく情報を伝える必要がある。
テンプレートはその考えるコストを減らすことができる。
** Design doc
[[id:d26cecee-48f4-466f-853c-8b65bdb2580a][Design doc]]はプロジェクトへ取り組む前に書く仕様書。
これを元に人や資源を集め、期間を設定し…メンバーのプロジェクトへの理解を深める、というふうに基盤となっていく。

会社ごとで公開してたりするので、集めてみたい。
- [[https://gist.github.com/daijinload/ae9fd5438a7f954106bbfcc0eed485c0][Googleのデザインドックのマークダウンサンプルらしい]]
** カスタマーサービス
メールを送る前に試してほしいこと、よくある問題をまとめておく。
実際にメールを送るときもフリーテンプレートでなく調査結果や、試したことを項目として入れておくことで価値のある情報になる。

テンプレートがない場合、「動きません」みたいなメールが来て何のヒントにもならない。
再度基本的な情報(ブラウザ、ネットにつながってますか…)を聞くが時間がかかる。
エンジニリング的に何もヒントになる情報がないのにユーザは怒り始め、サービス担当者から急かされることになる。

AmazonやGoogleなど、莫大なサポートをしている企業のページはかなり参考になる。
たいていの問題はサポートへ問い合わせる前に解決する。
もし解決しなくても少しでも早く解決するための方法が整備されている。
** FAQ
よくある質問もテンプレートのひとつ。
** [[id:1fc79e15-1830-47eb-a31d-f33cd98ce2f8][DB Design]]
技術的フィードバックをもらうためには、背景を完全に共有する必要がある。
共有せずに最高の答えをもらうことは期待できない。
*** 背景
- 既存の機能の説明
- 用語やテーブルの解説
*** やりたいこと
- やりたいこと。
- なぜそれをやる必要があるか
- どのような利点があるか
*** 制約と解決策
- どのような難しさがあるか
- 解決方法
*** ER図と説明
- ER図の意図の説明
*** マージとリリースをどの段階で行うか
- たとえばテーブルを切り替えるとDBだけの話しでなくなり、viewも切り替える必要があるわけだがそこはどうするのか。
- どこまでユーザの影響があるのか。
- どうやってできるだけ影響を少なくするのか。
- 新機能はどの時点で見られるようにするのか。
- リリースとはどういうことをいうのか、認識は合っているか(マスターブランチにマージすることなのか、デプロイすることなのか、ユーザが見られるようにすることなのか)。
- 毎回デプロイもするが、ユーザには見えなくするのでよいか、あるいは専用にブランチを切って作業をするか。
- データ移行はどうするか。
- データの初期セットはどうやって誰が行うか。
- データが途中で変わる可能性はあるか。
*** 作業の進め方
- どの時点まで並列して進められるか
- 破壊的変更はどこで起こるか
- データの移行はどのタイミングで行うか
*** 担当者
- 誰が何を担当するか
*** Todo
- 次までにやることはなにか
* Memo
* Tasks
* Reference
* Archives
