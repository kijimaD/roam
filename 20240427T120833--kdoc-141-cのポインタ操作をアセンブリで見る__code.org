:properties:
:ID: 20240427T120833
:mtime:    20241102180312 20241028101410
:ctime:    20241028101410
:end:
#+title:      KDOC 141: Cのポインタ操作をアセンブリで見る
#+date:       [2024-04-27 Sat 12:08]
#+filetags:   :code:
#+identifier: 20240427T120833

* この文書のステータス
- 作成
  - [X] 2024-04-29 貴島
- レビュー
  - [X] 2024-05-06 貴島

* 概要
ポインタ型の引数に代入すると、関数をまたいで変更を反映できる(参照渡し)。[[id:656a0aa4-e5d3-416f-82d5-f909558d0639][C言語]]では返り値を複数返せないので、複数必要なときはこれを使う。

#+caption: ポインタ型で反映する例
#+begin_src C
#include <stdio.h>

void inc(int *a) { // アドレスを受け取る
  *a = *a+1; // アドレスが参照する値を反映する
}

int main(void){
  int a = 0;
  inc(&a); // アドレスを渡す
  inc(&a);
  printf("%d",a); // 2
}
#+end_src

何が起きているのか、生成されたアセンブリを見て確かめる。

* アセンブリで見ると
↓こうなっている。即値の代入とじつはあまり変わらない。スタックに入っている値を使うか、スタックのアドレスを使うかだけの違い。

#+begin_export HTML
<iframe width="800px" height="200px" src="https://godbolt.org/e#g:!((g:!((g:!((h:codeEditor,i:(filename:'1',fontScale:14,fontUsePx:'0',j:1,lang:___c,selection:(endColumn:10,endLineNumber:1,positionColumn:10,positionLineNumber:1,selectionStartColumn:10,selectionStartLineNumber:1,startColumn:10,startLineNumber:1),source:'void+main(void)+%7B%0A+int+val%3B%0A+int+*ptr+%3D+%26val%3B%0A+*ptr+%3D+41%3B%0A%7D'),l:'5',n:'0',o:'C+source+%231',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0'),(g:!((h:compiler,i:(compiler:rv32-cgcctrunk,filters:(b:'0',binary:'1',binaryObject:'1',commentOnly:'0',debugCalls:'1',demangle:'0',directives:'0',execute:'1',intel:'1',libraryCode:'0',trim:'0',verboseDemangling:'0'),flagsViewOpen:'1',fontScale:14,fontUsePx:'0',j:1,lang:___c,libs:!(),options:'',overrides:!(),selection:(endColumn:1,endLineNumber:1,positionColumn:1,positionLineNumber:1,selectionStartColumn:1,selectionStartLineNumber:1,startColumn:1,startLineNumber:1),source:1),l:'5',n:'0',o:'+RISC-V+(32-bits)+gcc+(trunk)+(Editor+%231)',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0')),l:'2',n:'0',o:'',t:'0')),version:4"></iframe>
#+end_export

#+caption: 説明
#+begin_src asm
  // ↓新しいスタック割当。sp -> スタックの底
  addi sp,sp,-32
  // ↓元々のレジスタの値をスタックに退避する
  sw ra,28(sp)
  sw s0,24(sp)
  // ↓s0 -> スタックの一番上、開始アドレス
  addi s0,sp,32

  // ↓スタックポインタからのアドレスを求めて、値でなく**アドレスを**a5に格納
  addi a5,s0,-24
  // ↓a5(アドレスが入ってる)をスタックに保存。変数宣言してるからね
  sw a5,-20(s0)
  // ↓a5をスタックからロード
  lw a5,-20(s0)
  // ↓即値41をa4にロード
  li a4,41
  // ↓41をa5に保存したアドレス(参照先)に、保存
  sw a4,0(a5)
  nop

  ;; レジスタを元に戻す
  lw ra,28(sp)
  lw s0,24(sp)
  addi sp,sp,32
  ;; 呼び出し先に戻る
  jr ra
#+end_src

* 関連
- [[id:20240427T113714][KDOC 140: 『自作エミュレータで学ぶx86アーキテクチャ』]]。出てきた内容を確かめた
