:PROPERTIES:
:ID:       8b69b8d4-1612-4dc5-8412-96b431fdd101
:mtime:    20241102180355 20241028101410
:ctime:    20210725100835
:END:
#+title: SQL

* 概要
SQLは、データベースを操作するための言語。RDMS([[id:7dab097c-60ba-43b9-949f-c58bf3151aa8][MySQL]], [[id:752d725e-b834-4784-8110-c58f89bd4fa2][PostgreSQL]])の種類によって実装・挙動が微妙に異なる。

- Wikipedia: https://ja.wikipedia.org/wiki/SQL
* Tasks
** TODO [[https://www.oreilly.co.jp/books/9784873115894/][O'Reilly Japan - SQLアンチパターン]]
データベース開発におけるアンチパターンを紹介している。
** TODO 達人に学ぶSQL 徹底指南書
- [[https://www.amazon.co.jp/s?k=sql&__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&ref=nb_sb_noss][Amazon.co.jp : sql]]
** TODO [[https://www.amazon.co.jp/%E5%A4%B1%E6%95%97%E3%81%8B%E3%82%89%E5%AD%A6%E3%81%B6RDB%E3%81%AE%E6%AD%A3%E3%81%97%E3%81%84%E6%AD%A9%E3%81%8D%E6%96%B9-Software-Design-plus-%E6%9B%BD%E6%A0%B9/dp/4297104083][失敗から学ぶRDBの正しい歩き方 (Software Design plus) | 曽根 壮大 |本 | 通販 | Amazon]]
アンチパターンを知っておくとよい。
* Memo
** プロセス一覧を見る
SQLで、DB関連の情報を得ることができる。

#+caption: プロセスの一覧を取得する
#+begin_src sql
show processlist;
#+end_src
** LinuxでのDB閲覧/操作ツール
Macでは、Sequel Pro が多いはず。
Linuxでは、DBeaver が有力のよう。

インストールページ。
[[https://dbeaver.io/download/][Download | DBeaver Community]]

#+caption: snapでダウンロード
#+begin_src shell
  sudo snap install dbeaver-ce
#+end_src

↑snapだとバージョンが古く、エラーが出た。最初のローディング画面は出るが、それ以降が何も表示されない。
#+begin_quote
org.eclipse.swt.SWTException: Graphic is disposed
#+end_quote

↓このissueと同じ状況に見える。
https://github.com/dbeaver/dbeaver/issues/8319

公式サイトからdebファイルをダウンロードして入れると、無事起動した。
[[https://dbeaver.io/download/][Download | DBeaver Community]]

- レコード編集機能がある
  - 表示レコードをそのままいじれる機能。
  - DBeaverのほかにsqlelectronもいい感じだったのだが、カラムから編集できる機能がないのは致命的で使うのを見送った。
- ER図を自動生成してくれる
  - 関連できたりできなかったりだが、最初から入ってるのはありがたい。
** 正規表現
~~~ で正規表現が使える。
#+begin_src sql
  select *
  from customer
  where status_cd ~ '^[A-F]'
#+end_src
** カラムにない項目で集計する
重複してださい方法。
#+begin_src sql
-- 人口階級ごとに地方名に再分類する
SELECT CASE WHEN population < 100 THEN '01'
       WHEN population >= 100 AND population < 200 THEN '02'
       WHEN population >= 200 AND population < 300 THEN '03'
       WHEN population >= 300 THEN '04'
       ELSE NULL END AS pop_class,
       COUNT(*) AS cnt
  FROM PopTbl
 GROUP BY CASE WHEN population < 100 THEN '01'
          WHEN population >= 100 AND population < 200 THEN '02'
          WHEN population >= 200 AND population < 300 THEN '03'
          WHEN population >= 300 THEN '04'
          ELSE NULL END;
#+end_src

DBによっては名前をつけて参照できる。
#+begin_src sql
-- 県名を地方名に分類する
SELECT CASE pref_name
       WHEN '徳島' THEN '四国'
       WHEN '香川' THEN '四国'
       WHEN '愛媛' THEN '四国'
       WHEN '高知' THEN '四国'
       WHEN '福岡' THEN '九州'
       WHEN '佐賀' THEN '九州'
       WHEN '長崎' THEN '九州'
       ELSE 'その他' END AS district,
       SUM(population)
  FROM PopTbl
 GROUP BY district;
#+end_src
** 条件を指定して集計する
where句で異なる条件を記述して2回SQLを発行するような場面。
#+begin_src sql
  -- 男性の人口
SELECT pref_name,
       population
  FROM PopTbl2
 WHERE sex = '1';

-- 女性の人口
SELECT pref_name,
       population
  FROM PopTbl2
 WHERE sex = '2';

#+end_src

case句で便利に書くとこう。
#+begin_src sql
SELECT pref_name,
  -- 男性の人口
       SUM(CASE WHEN sex = '1' THEN population ELSE 0 END) AS cnt_m,
  -- 女性の人口
       SUM(CASE WHEN sex = '2' THEN population ELSE 0 END) AS cnt_f
  FROM PopTbl2
 GROUP BY pref_name;
#+end_src
SUM関数を必要性をチェックしてみる。
** 複数の列の条件関係を定義する
CHECK制約。

↓条件法。
#+begin_src sql
CONSTRAINT check_salary CHECK
  (CASE WHEN sex = '2'
    THEN CASE WHEN salary <= 200000
      THEN 1 ELSE 0 END
  ELSE 1 END = 1)
#+end_src

↓論理積。
#+begin_src sql
CONSTRAINT CHECK_salary CHECK
  (sex = '2' AND salary <= 200000)
#+end_src

条件法はゆるい。
** UPDATEの順番で結果が変わるとき
1回目のupdateをした結果、2回目の条件に入ってしまうような場合。
caseをつかって1度に処理しないといけない。
#+begin_src sql
UPDATE Personnel
   SET salary = CASE WHEN salary >= 300000
       THEN salary * 0.9
       WHEN salary >= 250000 AND salary < 280000
       THEN salary * 1.2
       ELSE salary END;
#+end_src

主キーを入れ替えることもできる。普通にUPDATE3回だと退避させる必要があるが、whenだと一気にできる。
#+begin_src sql
-- CASE式で主キーを入れ替える
UPDATE SomeTable
   SET p_key = CASE WHEN p_key = 'a'
       THEN 'b'
       WHEN p_key = 'b'
       THEN 'a'
       ELSE p_key END
       WHERE p_key IN ('a', 'b');
#+end_src
* Refences
** [[https://use-the-index-luke.com/][SQL Indexing and Tuning e-Book for developers: Use The Index, Luke covers Oracle, MySQL, PostgreSQL, SQL Server, ...]]
データベースのパフォーマンスの説明。
**  [[https://sqlzoo.net/wiki/SQL_Tutorial][SQLZOO]]
SQLの練習ができるサイト。
**  [[https://data.world/][data.world | The Cloud-Native Data Catalog]]
サンプルのデータを使って、SQLの練習ができる。
