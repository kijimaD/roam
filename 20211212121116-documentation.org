:PROPERTIES:
:ID:       79178e63-a446-4f47-b832-82128cdf854a
:END:
#+title: documentation
* 概要
よいドキュメント(技術文書)があると、後から見てもスムーズに入っていきやすいので重要である。
ドキュメントの最大の利点は非同期性で、プログラマーにとって重要に見える。
他人だけでなくて未来の自分すら理解していたことを忘れるので、いつでも把握しやすいのは思い出すコストや敷居を下げることになる。

効果的なドキュメントについてまとめる。
一般的なコミュニケーションについては[[id:d68263db-a8c5-478e-b456-8a753eb34416][communication]]へ。
* Memo
** ポストモーテム(事後分析)
根本的原因を分析し、自分の失敗をドキュメント化する。

- 分析対象イベントの簡潔な要約
- 発見から調査を経て解決に至るまでの分析対象イベントのタイムライン
- 分析対象イベントの主要原因
- 影響と損害の評価
- 問題を直ちに修正するための一連アクションアイテム(要処理事項)とそのオーナー
- 分析対象イベントが再度発生するのを防ぐための一連のアクションアイテム
- 学んだ教訓
** 技術記事
[[https://gist.github.com/LambdaNote/0d33b7d8284a3c99cffd1a5aa83c115f][記事の書き方]]をベースに、メモ。
技術記事の書き方なので、とても参考になる。
*** 構成
記事全体をどう構成するかは、解説する内容や目的（情報の要約、チュートリアルなど）によって異なる。

- 何のために記事を書くか（問題意識を読者と共有）
- 解説の前提となる情報の整理（読者を記事の土俵に上げる）
- 主たる解説
- まとめ、練習問題、関連情報、参考資料など

通常、大構造の内部は、さらに構造化したほうが読みやすくなる。
しかし、構造が深くなると読者が迷子になりやすいので、大構造の下位は原則として1段階のみとする。
*** 段落の書き方
段落を書くときは以下の2点に注意する。

- ある段落を1つ取り出したとき、その内容を簡潔に要約できるか
- 段落と段落の関係は、全体として伝えたい内容にとって適切か

差分が見やすくなるように、段落内ではなるべく句点ごとにこまめに改行を挿入する。

段落は次の要領で記述する。

- 空行から次の空行までの文章が、1つの段落になる
- 途中で改行しても、新しい段落にはならない

段落内および段落間をうまく構成すると、言いたかったことが伝わりやすい記事になる。
各段落の内容を自分で要約しながら自分で読み返してみるのがおすすめ。
*** 箇条書き
段落の主張を見やすく整理することを目的として、必要に応じて箇条書きを利用する。
箇条書きはあくまでも段落に従属するものとし、箇条書きのみで説明が終わらないようにする。
箇条書きには、連番がつかないものと、つくものがある。それぞれ以下の要領で使う。

- 箇条書き（Unordered List）
  基本的には連番なしの箇条書きを使う。

- 項目1
  + サブ項目は1階層のみ可
- 項目2
  1. 連番つき箇条書きのサブ項目の例
- 連番つき箇条書き（Ordered List）
  項目間の順序に意味がある場合や、あとから番号で参照したい場合は、連番つき箇条書きを使う。

  1. 項目1
  2. 項目2
*** コードブロック
技術書において、プログラムの一部を示したコードブロックは主要な解説対象である。
したがって、コードブロックの提示をもって説明を終わらせるのではなく、そのコードについて日本語で説明を施すようにする。 具体的には、次のような内容を説明する。

1. なぜ本文のこの位置でそのコードを提示するのか
2. 何を実現するコードなのか
3. コードの各部にはどのような役割があり、どのように動作するか

プログラミング言語のコメント機能を使ってコード中に動作の説明を付記するのは、上記のうち3のみにする。
コメント機能によるコードの動作の補足説明は、コードの中身をしっかり読む段階にある読者にとってはとても有用だが、初見ではあまり読まれない。
特に上記の1と2の内容については、本文でしっかりと解説するようにする。
* Tasks
* Reference
** [[https://rastam.hatenablog.com/entry/questions-to-ask-in-code-reviews][コードレビューで聞く質問集 - rastam on rails]]
コードレビューでの確認テンプレート。
** [[https://about.gitlab.com/handbook/][Handbook | GitLab]]
最強の文書化企業の成果物。
* Archives
** DONE [[https://speakerdeck.com/namura/shui-gadoujian-temosoutosikashou-kequ-renaiwen-shu-shu-gong-kai-ban][誰がどう見てもそうとしか受け取れない文書術（公開版） - Speaker Deck]]
CLOSED: [2021-10-03 Sun 14:34]
<2021-10-03 Sun>
明確な文章の書き方。すごくいい。
