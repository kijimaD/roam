:properties:
:ID: 20240225T172419
:end:
#+title:      KDOC 106: Linuxでアーキテクチャ名を調べる
#+date:       [2024-02-25 Sun 17:24]
#+filetags:   :draft:code:
#+identifier: 20240225T172419

# (denote-rename-file-using-front-matter (buffer-file-name) 0)
# (org-roam-tag-remove)
# (org-roam-tag-add)

# ====ポリシー。
# 1ファイル1アイデア。
# 1ファイルで内容を完結させる。
# 常にほかのエントリとリンクする。
# 自分の言葉を使う。
# 参考文献を残しておく。
# 自分の考えを加える。
# 構造を気にしない。
# エントリ間の接続を発見したら、接続エントリを追加する。カード間にあるリンクの関係を説明するカード。
# アイデアがまとまったらアウトラインエントリを作成する。リンクをまとめたエントリ。
# エントリを削除しない。古いカードのどこが悪いかを説明する新しいカードへのリンクを追加する。
# 恐れずにカードを追加する。無意味の可能性があっても追加しておくことが重要。

* この文書のステータス
- 作成
  - [X] 2024-02-26 貴島
- レビュー
  - [ ] <署名>
# (progn (kill-line -1) (insert (format "  - [X] %s 貴島" (format-time-string "%Y-%m-%d"))))

# 関連をつけた。
# タイトルがフォーマット通りにつけられている。
# 内容をブラウザに表示して読んだ(作成とレビューのチェックは同時にしない)。
# 文脈なく読めるのを確認した。
# おばあちゃんに説明できる。
# いらない見出しを削除した。
# タグを適切にした。
# すべてのコメントを削除した。
* 概要
[[id:7a81eb7c-8e2b-400a-b01a-8fa597ea527a][Linux]]でアーキテクチャ名を調べる方法。

#+caption: アーキテクチャ名を調べる
#+begin_src shell
  uname -i
#+end_src

#+RESULTS:
#+begin_src
x86_64
#+end_src

これはLinuxカーネルのビルド時に決まるとのこと[fn:1]。 ~UTS-MACHINE~ という定義でアーキテクチャの文字列が定義されるという。

* 何が起きているか
結局わからず。

実際、どこを参照しているのだろうか。本には具体的な場所の記載がなかったので調べる。

まずドキュメントを見るが記載はない。[[https://manpages.ubuntu.com/manpages/trusty/ja/man2/uname.2.html][Ubuntu Manpage: uname - 現在稼働中のカーネルについての名前と情報を得る]]。そんな実装のことまでは書いてないだろうことは想像に難くない。

実際の場所を調べる。straceで見ると、unameシステムコールが発行されている↓。ので、システムコールの定義を見ればよいと考えた。

#+caption: nameシステムコールが発行されている。2>&1はorg-babel用
#+begin_src shell :results raw
  strace uname -i 2>&1 | tail
#+end_src

#+RESULTS:
#+begin_src
mmap(NULL, 6784496, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f6e037af000
close(3)                                = 0
uname({sysname="Linux", nodename="orange-ThinkPad-X1-Carbon-Gen-10", ...}) = 0 👈
newfstatat(1, "", {st_mode=S_IFIFO|0600, st_size=0, ...}, AT_EMPTY_PATH) = 0
write(1, "x86_64\n", 7x86_64
)                 = 7
close(1)                                = 0
close(2)                                = 0
exit_group(0)                           = ?
+++ exited with 0 +++
#+end_src

しかし、↓ソースコードを見てもよくわからない。別の関数まで辿らないといけない。uts_name()から返される構造体をコピーしているのか。uts_name()がどこで定義されているかわからない。

#+caption: unameの定義
#+begin_src git-permalink
https://github.com/torvalds/linux/blob/1f874787ed9a2d78ed59cb21d0d90ac0178eceb0/kernel/sys.c#L1327-L1345
#+end_src

#+RESULTS:
#+begin_src c
SYSCALL_DEFINE1(uname, struct old_utsname __user *, name)
{
	struct old_utsname tmp;

	if (!name)
		return -EFAULT;

	down_read(&uts_sem);
	memcpy(&tmp, utsname(), sizeof(tmp));
	up_read(&uts_sem);
	if (copy_to_user(name, &tmp, sizeof(tmp)))
		return -EFAULT;

	if (override_release(name->release, sizeof(name->release)))
		return -EFAULT;
	if (override_architecture(name))
		return -EFAULT;
	return 0;
}
#+end_src

動いているマシン上で、/proc/sys/kernel にunameで出るリリース日とか、アーキテクチャ名があるのを確認した。が、どう利用しているのかはわからない。/procはオンメモリ、動的なディレクトリなはずなのでそれを制御しているコードもどこかにあるはずだが。

* 関連
- [[id:20240105T215847][KDOC 63: 『私はどのようにしてLinuxカーネルを学んだか』を読んだ]]。を見て、ここから知ろうと考えた

* Footnotes
[fn:1] [[https://amzn.to/3I8xXtT][私はどのようにしてLinuxカーネルを学んだか]]から。
