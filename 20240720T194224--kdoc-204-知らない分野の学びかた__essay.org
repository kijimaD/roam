:properties:
:ID: 20240720T194224
:mtime:    20241102180334 20241028101410
:ctime:    20241028101410
:end:
#+title:      KDOC 204: 知らない分野の学びかた
#+date:       [2024-07-20 Sat 19:42]
#+filetags:   :essay:
#+identifier: 20240720T194224

* この文書のステータス
- 作成
  - [X] 2024-07-21 貴島
- レビュー
  - [X] 2024-07-30 貴島

* 学びかた
これまでコンピュータやプログラミングを学ぶとき、何かを実際作ってみることで、体で覚えていくことが多かった。体系だった専門教育を受けたことはない。

最近仕事で機械学習を勉強したり、趣味でCPUの本を読んでいる。それらのより体系的な知識を必要とする分野に対する、自分のアプローチはあまりうまくいっていないと感じていた。ちょっと作ってみて理解するというわけにはいかない。数ヶ月取り組んだ結果、取っ掛かりをつかんだように思えた。

- 何がわからないのか明確にする
  - 初心者レベルのほとんどの質問は、そのままChatGPTに質問すればわかる
  - ChatGPTの回答を読んでもわからないなら、さらに分解して質問するかグーグル検索する
  - 焦らない。数回読んだり調べると基礎的な言葉や概念を覚えて、土台にして応用的なことを学べるようになっていく
- わからないところは飛ばして読んで全体像を掴む、という考え方もある。自分の場合、これはうまくいかない。飛ばして読むと後の部分がわかるようになることがない。読んでわからない部分があまりに多いなら、まだその本を読むべき段階ではない。もっとやさしい本に取り組むべきである
- 同じテーマの違う本を読むと、復習になってよいのと違う観点で学べてよい。退屈さも感じない
- 脳内ペア読書する。「ここはわかる」「これはこういうことだ」「どういうことだ」と言葉に出して考えるとなんとなく読み飛ばすのを避けやすい
- 自分は作って学ぶスタイルの本と、モチベーション上相性がよいことが多い。ただ読むしかないと退屈に感じる。具体的に作っていって、親しみを感じると学びやすい。ただ、手順どおりに作っただけで応用できるくらいに学べてはいないこともある
- 分野によっては、背後にある知識が大きすぎて作れないことがある。その場合はただ読んで全体像を掴む時間が必要になる。理論と実践をバランスよく交互にやっていくとよい
- はやくアウトプットしようと焦らない。しっかり本の内容を理解しないことには、アウトプットはできない(写経くらいしかできないだろう)。手っ取り早く何かやった気になっても意味はない
- 歴史的経緯や功績を残した人物に着目して調べてみるのは、よい気分転換とモチベーションになる

プログラム関係の本の場合。

- コードのついた本は、コードを絶対に読むべきである。むしろコードが本体であると考えて、コードを理解するために本文を読んでいく
- 少しコードを変えて実験したり、コードにコメントをつけていくとよい

* 関連
- [[id:20240523T005146][KDOC 177: 『モブプログラミング・ベストプラクティス』]]。一人で学ぶときにもモブプロのテクニックは参考になる
