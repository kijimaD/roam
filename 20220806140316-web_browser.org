:PROPERTIES:
:ID:       d6696b59-7349-4c0a-9512-b72598a918eb
:END:
#+title: Web Browser
* 概要
ウェブブラウザは、パソコンやスマートフォン等でWebサーバに接続するためのソフトウェア。
* Memo
** [[https://www.oreilly.co.jp/books/9784873119038/][O'Reilly Japan - Real World HTTP 第2版]]
CLOSED: [2023-05-10 Wed 01:01]
:LOGBOOK:
CLOCK: [2023-05-10 Wed 00:42]--[2023-05-10 Wed 01:01] =>  0:19
CLOCK: [2023-05-09 Tue 23:12]--[2023-05-09 Tue 23:37] =>  0:25
CLOCK: [2023-05-09 Tue 22:40]--[2023-05-09 Tue 23:05] =>  0:25
CLOCK: [2023-05-09 Tue 22:15]--[2023-05-09 Tue 22:40] =>  0:25
CLOCK: [2023-05-09 Tue 20:26]--[2023-05-09 Tue 20:51] =>  0:25
CLOCK: [2023-05-07 Sun 19:48]--[2023-05-07 Sun 20:13] =>  0:25
CLOCK: [2023-05-07 Sun 19:17]--[2023-05-07 Sun 19:42] =>  0:25
CLOCK: [2023-05-07 Sun 18:50]--[2023-05-07 Sun 19:15] =>  0:25
CLOCK: [2023-05-07 Sun 16:10]--[2023-05-07 Sun 16:35] =>  0:25
CLOCK: [2023-05-07 Sun 15:39]--[2023-05-07 Sun 16:04] =>  0:25
CLOCK: [2023-05-07 Sun 15:05]--[2023-05-07 Sun 15:30] =>  0:25
CLOCK: [2023-05-07 Sun 14:31]--[2023-05-07 Sun 14:56] =>  0:25
CLOCK: [2023-05-07 Sun 13:49]--[2023-05-07 Sun 14:14] =>  0:25
CLOCK: [2023-05-07 Sun 13:17]--[2023-05-07 Sun 13:42] =>  0:25
CLOCK: [2023-05-07 Sun 12:33]--[2023-05-07 Sun 12:58] =>  0:25
CLOCK: [2023-05-07 Sun 11:48]--[2023-05-07 Sun 12:13] =>  0:25
CLOCK: [2023-05-07 Sun 00:24]--[2023-05-07 Sun 00:49] =>  0:25
CLOCK: [2023-05-06 Sat 23:05]--[2023-05-06 Sat 23:30] =>  0:25
CLOCK: [2023-05-06 Sat 22:39]--[2023-05-06 Sat 23:04] =>  0:25
CLOCK: [2023-05-06 Sat 22:05]--[2023-05-06 Sat 22:30] =>  0:25
CLOCK: [2023-05-06 Sat 21:40]--[2023-05-06 Sat 22:05] =>  0:25
CLOCK: [2023-05-06 Sat 20:15]--[2023-05-06 Sat 20:40] =>  0:25
CLOCK: [2023-05-06 Sat 19:43]--[2023-05-06 Sat 20:08] =>  0:25
CLOCK: [2023-05-06 Sat 19:02]--[2023-05-06 Sat 19:27] =>  0:25
CLOCK: [2023-05-06 Sat 18:36]--[2023-05-06 Sat 19:01] =>  0:25
CLOCK: [2023-05-06 Sat 18:07]--[2023-05-06 Sat 18:32] =>  0:25
CLOCK: [2023-05-06 Sat 17:38]--[2023-05-06 Sat 18:03] =>  0:25
CLOCK: [2023-05-06 Sat 15:35]--[2023-05-06 Sat 16:00] =>  0:25
CLOCK: [2023-05-06 Sat 15:08]--[2023-05-06 Sat 15:33] =>  0:25
CLOCK: [2023-05-04 Thu 19:30]--[2023-05-04 Thu 19:55] =>  0:25
CLOCK: [2023-05-04 Thu 18:52]--[2023-05-04 Thu 19:17] =>  0:25
CLOCK: [2023-05-04 Thu 18:25]--[2023-05-04 Thu 18:50] =>  0:25
CLOCK: [2023-05-04 Thu 13:37]--[2023-05-04 Thu 14:02] =>  0:25
CLOCK: [2023-05-04 Thu 13:07]--[2023-05-04 Thu 13:32] =>  0:25
CLOCK: [2023-05-04 Thu 12:23]--[2023-05-04 Thu 12:48] =>  0:25
CLOCK: [2023-05-04 Thu 11:53]--[2023-05-04 Thu 12:18] =>  0:25
CLOCK: [2023-05-04 Thu 11:28]--[2023-05-04 Thu 11:53] =>  0:25
CLOCK: [2023-05-04 Thu 11:03]--[2023-05-04 Thu 11:28] =>  0:25
CLOCK: [2023-05-03 Wed 22:33]--[2023-05-03 Wed 22:58] =>  0:25
CLOCK: [2023-05-03 Wed 22:07]--[2023-05-03 Wed 22:32] =>  0:25
CLOCK: [2023-05-03 Wed 21:40]--[2023-05-03 Wed 22:05] =>  0:25
CLOCK: [2023-05-03 Wed 21:12]--[2023-05-03 Wed 21:38] =>  0:26
CLOCK: [2023-05-03 Wed 18:43]--[2023-05-03 Wed 19:08] =>  0:25
CLOCK: [2023-05-03 Wed 17:57]--[2023-05-03 Wed 18:22] =>  0:25
CLOCK: [2023-05-03 Wed 17:32]--[2023-05-03 Wed 17:57] =>  0:25
CLOCK: [2023-05-03 Wed 17:03]--[2023-05-03 Wed 17:28] =>  0:25
CLOCK: [2023-05-03 Wed 16:33]--[2023-05-03 Wed 16:58] =>  0:25
CLOCK: [2023-05-03 Wed 13:07]--[2023-05-03 Wed 13:32] =>  0:25
CLOCK: [2023-05-03 Wed 12:01]--[2023-05-03 Wed 12:26] =>  0:25
CLOCK: [2023-05-03 Wed 11:32]--[2023-05-03 Wed 11:57] =>  0:25
CLOCK: [2023-05-03 Wed 11:01]--[2023-05-03 Wed 11:26] =>  0:25
CLOCK: [2023-05-03 Wed 10:31]--[2023-05-03 Wed 10:56] =>  0:25
CLOCK: [2023-05-03 Wed 10:06]--[2023-05-03 Wed 10:31] =>  0:25
CLOCK: [2023-05-03 Wed 09:40]--[2023-05-03 Wed 10:05] =>  0:25
CLOCK: [2023-05-03 Wed 09:15]--[2023-05-03 Wed 09:40] =>  0:25
CLOCK: [2023-05-03 Wed 00:38]--[2023-05-03 Wed 01:03] =>  0:25
:END:
HTTPの解説。

- 機能が追加されたり修正されるのには理由がある。最初のコンセプトはシンプルであることが多い。その流れを知れば、全体を理解しやすくなる
- RFCはRequest For Comment。仕様書なのにこの言葉が使われているのは、軍事用としてスタートしたため。公開するためには意見を募るためという名目が必要だった
- 初期バージョンのHTTPにはバージョン番号がなかった
- MIMEタイプはファイルの種類を区別するための文字列で、電子メールのために作られ、HTTPでも流用された。ヘッダー名はContent-Type。当初の仕様にはなく、ドキュメントを送ることしかできなかった
- 電子メールとHTTPは基本は同じ。ヘッダー + 本文がある。HTTPの通信は高速で電子メールが往復しているのと同じようなもの
- HTTPはファイルシステムのような思想で作られている
- ブラウザによってはリダイレクトを行ったときにメソッドが変更されるものがある。そのため、メソッドが対応してないエラーが表示されることがある
- URNは名前。URLは住所。URLは住所なので、移動するとアクセスできない。いっぽうURNは名前でしかないので、どこにあるかの情報は別に必要
- URIにはURNという名前の付け方のルールも含まれる
- URLの ~#~ はフラグメントで、ブラウザ内部でのみ利用されるので、サーバーに送信されるのはフラグメントより前の部分だけ
- <link rel="canonical" href="..."> によって、正規のURLをサーバに教えられる。これによって、たとえばURLパラメータにトラッキングIDがついたURLが検索エンジンに登録されるのを防げる
  - あるいは、ソーシャルブックマークで別のURLと認識されることを防げる
- クッキーはHTTPヘッダーをベースにして実装されている。 ~Set-Cookie: LAST_ACCESS=12:04~ とすると、サーバ側がクライアント(ブラウザ)に保存を指示する
  - クライアントは値を保存しておき、次回のアクセス時に ~Cookie: LAST_ACCESS=12:04~ の形式で送信する。サーバ側はこの設定を読み取ることでクライアントが最後にアクセスした時刻を知ることができる
- オリジン ... ブラウザはスキーム、ドメイン、ポートの3つの組が同じであれば同一のサイトと判断する
  - ほかのサイトにクッキーなどを使えたら、セキュリティが
- キャッシュしてほしいがされてない場合のチェック
  - GETとHEAD以外のべき等ではないメソッド
  - Cache-Controlヘッダーにprivateが設定されている
  - Cache-Controlヘッダーにno-storeが設定されている
  - Authorizationヘッダーがあるが、Cache-Controlヘッダーにpublicがない
- ETagは、キャッシュがフレッシュかを判断するのにファイルに関連するハッシュ値を使って比較する。これによって、動的な送信内容であってもキャッシュを利用できるか判断できる
- 同じURLでもクライアントに返す結果が異なることを示すヘッダーがVary
- referer はRFCに提案されたときのスペルミス
- 公開鍵 → 南京錠
- TLSの骨格になる、「サーバを認証し、鍵を交換して通信を行う」というフローはTLS1.0から1.3まで大きく変わらない。その一方で、鍵交換の方法、メッセージの暗号化、メッセージの署名方式などそれぞれの場面で使うアルゴリズムの組み合わせをリスト化して管理している。サーバ・クライアント間で共通に使えるものを選択する仕組みにすることで、新しいアルゴリズムを少しずつ導入したり、古いアルゴリズムを非推奨にするといったことを、バージョン間で行いやすくなっている。このアルゴリズムのセットを暗号スイートという
  - 暗号スイートの一覧を出す
  - ~$ openssl ciphers -v~
- ~data:application/json,{"message": "hello"}~ をブラウザのURLバーに入れるとそのまま表示できる
- ブラウザがファイルをどのように処理するのか決めているのは、拡張子ではなくサーバから送られたMIMEタイプ
  - Content-Dispositionヘッダーの内容によって、ブラウザはこの動作を変更する
  - 次のヘッダーがサーバから返ってくると、ブラウザはレスポンスは表示用のものではなく、ダウンロードしてローカルに保存するためのものであると認識する
  - ~Content-Disposition: attachment; filename=filename.xlsx~
- 自動ダウンロードの開始(はじまらない場合はクリック、みたいな)の実現方法
  - サーバは2つURLを提供する。ひとつは実際にファイルをダウンロードするページ。もうひとつはHTMLのページを返し、そこにはダウンロードありがとうメッセージと下記のヘッダーを含む
    - ~<meta http-equiv="refresh" content="0;URL=./download_file">~
  - ブラウザがページを表示するときにContent-Dispositionヘッダーがあると、ページの表示をリセットせずにダウンロードだけを行う。まず完了ページをユーザに見せる。ブラウザはコンテンツを表示するときにメタタグを見つけるので、そのページにジャンプしようとする
- ダウンロードの中断、再開は大きなファイルの指定範囲を切り出してダウンロード、という形で可能になっている
  - サーバ側が指定範囲ダウンロードをサポートしている場合には、Accept-Rangesヘッダーをレスポンスに付与する
- ユーザエージェントは正規化されていない情報
- オープングラフプロトコル(OGP) :: SNS等に貼り付けたときに記事の一部が引用され、画像も表示される
- GETはべき等で、何度実行しても副作用がない。例えばブラウザの挙動はこれに基づいているから、「よく開くページ」にはGETのページだけが表示される。クローラはGETのページだけをクローリングする
- サーバーレスと名付けたのは、アジャイル界隈で有名なマーチン・ファウラー。マーチン・ファウラーは必要以上にかっこいい名前をつけてバズらせてしまうことで有名
- CGIのデメリットは、リクエストを受けるたびにプロセスを起動して処理をさせたあとにプロセスが終了すること。プロセスの起動はOSの中でも重い処理。スクリプト言語であればライブラリロードのコストなどが毎回のリクエストに上乗せされる
  - プロセスを起動しっぱなしにして、ソケット通信でリクエストを処理プログラムに渡す方式のFastCGIが考案された
- Chrome 開発者ツールでの「copy as cURL」機能が面白い

#+begin_quote
今後新しいフレームワークが出てきたとしても、本章で触れた内容から大きく外れるものが生み出されることはおそらくなく、これらの技術に新しいアイディアが追加されたものになるでしょう。他の章と同様、未来を予測するものではありませんが、将来登場する未知の技術のキャッチアップを高速に行えるようになるはずです。
#+end_quote

#+begin_quote
続々と登場する新機能も「まったく新しい破壊的イノベーション」ではなく、過去の機能では実現できないことや問題があり、それに対する連続的な進化の次の一歩として登場しています。各機能がどのような狙いを持って生み出されたのかを知れば、本書の出版後に出てくる技術も、その延長として、少ない努力で理解できるでしょう。
#+end_quote
* Tasks
** TODO [[https://blog.amedama.jp/entry/2016/01/03/115602][Xvfb を使って仮想ディスプレイを作る - CUBE SUGAR CONTAINER]]
ディスプレイがない環境で、ディスプレイなしにテストができる。
** TODO ブラウザがどうサーバと接続し、HTMLページを表示までやっているか :DontKnow:
* Reference
** [[https://github.com/pion/awesome-pion][pion/awesome-pion: A curated list of awesome things related to Pion]]
WebRTCの事例集。
** [[https://gist.github.com/voluntas/379e48807635ed18ebdbcedd5f3beefa][仕事で WebRTC]]
WebRTCの資料。
** [[https://www.oreilly.co.jp/books/9784873116761/][O'Reilly Japan - ハイパフォーマンス ブラウザネットワーキング]]
ネットワークのパフォーマンス最適化の本。
** [[https://techracho.bpsinc.jp/hachi8833/2023_03_10/97431][保存版: Web画像フォーマットを「正しく」扱う（1）ピクセルとDPRを完全理解する（翻訳）｜TechRacho by BPS株式会社]]
画像フォーマットの連載。
** [[https://ja.wikipedia.org/wiki/%E3%82%A6%E3%82%A7%E3%83%96%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6][ウェブブラウザ - Wikipedia]]
* Archives
