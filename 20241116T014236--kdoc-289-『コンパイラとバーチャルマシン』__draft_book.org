:properties:
:ID: 20241116T014236
:mtime:    20250702170715
:ctime:    20241116014238
:end:
#+title:      KDOC 289: 『コンパイラとバーチャルマシン』
#+date:       [2024-11-16 Sat 01:42]
#+filetags:   :draft:book:
#+identifier: 20241116T014236

# (denote-rename-file-using-front-matter (buffer-file-name) 0)
# (save-excursion (while (re-search-backward ":draft" nil t) (replace-match "")))
# (flush-lines "^\\#\s.+?")

# ====ポリシー。
# 1ファイル1アイデア。
# 1ファイルで内容を完結させる。
# 常にほかのエントリとリンクする。
# 自分の言葉を使う。
# 参考文献を残しておく。
# 文献メモの場合は、感想と混ぜないこと。1つのアイデアに反する
# ツェッテルカステンの議論に寄与するか。それで本を書けと言われて書けるか
# 頭のなかやツェッテルカステンにある問いとどのようにかかわっているか
# エントリ間の接続を発見したら、接続エントリを追加する。カード間にあるリンクの関係を説明するカード。
# アイデアがまとまったらアウトラインエントリを作成する。リンクをまとめたエントリ。
# エントリを削除しない。古いカードのどこが悪いかを説明する新しいカードへのリンクを追加する。
# 恐れずにカードを追加する。無意味の可能性があっても追加しておくことが重要。
# 個人の感想・意思表明ではない。事実や書籍情報に基づいている

# ====永久保存メモのルール。
# 自分の言葉で書く。
# 後から読み返して理解できる。
# 他のメモと関連付ける。
# ひとつのメモにひとつのことだけを書く。
# メモの内容は1枚で完結させる。
# 論文の中に組み込み、公表できるレベルである。

# ====水準を満たす価値があるか。
# その情報がどういった文脈で使えるか。
# どの程度重要な情報か。
# そのページのどこが本当に必要な部分なのか。
# 公表できるレベルの洞察を得られるか

# ====フロー。
# 1. 「走り書きメモ」「文献メモ」を書く
# 2. 1日1回既存のメモを見て、自分自身の研究、思考、興味にどのように関係してくるかを見る
# 3. 追加すべきものだけ追加する

* この文書のステータス
:LOGBOOK:
CLOCK: [2024-12-16 Mon 19:00]--[2024-12-16 Mon 19:25] =>  0:25
CLOCK: [2024-11-16 Sat 23:05]--[2024-11-16 Sat 23:30] =>  0:25
CLOCK: [2024-11-16 Sat 22:37]--[2024-11-16 Sat 23:02] =>  0:25
CLOCK: [2024-11-16 Sat 20:53]--[2024-11-16 Sat 21:18] =>  0:25
:END:
- 作成
  - [ ] <署名>
# (progn (kill-line -1) (insert (format "  - [X] %s 貴島" (format-time-string "%Y-%m-%d"))))
- レビュー
  - [ ] <署名>
# (progn (kill-line -1) (insert (format "  - [X] %s 貴島" (format-time-string "%Y-%m-%d"))))

# チェックリスト ================
# 関連をつけた。
# タイトルがフォーマット通りにつけられている。
# 内容をブラウザに表示して読んだ(作成とレビューのチェックは同時にしない)。
# 文脈なく読めるのを確認した。
# おばあちゃんに説明できる。
# いらない見出しを削除した。
# タグを適切にした。
# すべてのコメントを削除した。
* 概要
# 本文(見出しも設定する)
[[https://www.ohmsha.co.jp/book/9784274133084/][『コンパイラとバーチャルマシン』]]は、主にコンパイラを解説した本である。
* メモ

- 前置記法はコンパイラでは使用しない(p12)
- 日本語の項目名のバッカス記法で、例示のプログラミング言語が示されている。わかりやすい(p21)

#+begin_src
  式の構文規則
  式 → 項|式+項
  項 → 因子|項*因子
  因子 → 名前|(式)
#+end_src

- LL(k)構文解析
  - kは先読み記号を最大 ~k~ 個まで許すことを意味する。 ~k~ が1の場合には、バックトラックのない下向き構文解析が可能である
- 上向き構文解析法は、葉を枝に、枝を木に…というように、個別の項目から全体の項目へ構文解析を進めていく
- 下向き構文解析法は、次に何が来るかを仮定しながら構文解析を進めていく
- First, Follow, Director 集合
- ~項 → 項*因子~ 名前と定義の両方に出現している。左再帰性をもつ、という
- 下向き構文解析では左再帰性の問題を取り除くために構文を書き換えて対応する
- 文法の定義として、チョムスキーによる句構造文法がある
- if文などは条件付き分岐命令を生成するが、まだthen側のオブジェクトコードを生成していないので、その時点では番地が確定しない。こういった場合、いったん命令を生成して先に進んだあとで後戻りしてその一部を修正する。バックパッチという
- データフロー解析で、到達するかを調べる。定義点と使用点を解析して、到達しない箇所を特定する
- ループ不変式の追い出し。ループ内で変化しない値はループの外に追い出して同じ計算を繰り返し行わないようにする
- ループ展開。ループの繰り返し部分を展開して、ループ繰り返し回数の計算と終了判定の条件分岐を除去する
  - 一般にループ繰り返し回数はコンパイル時にはわからないので、4倍や8倍など2のべき乗の倍数で展開する。静的なオブジェクトコードの数は増えるが、実行するオブジェクトコードの数は減らせる
- 定数伝播。変数の使用を定数で置き換えて静的にする
- 静式評価。コンパイル時に計算できるものはコンパイル時に計算し、結果だけをオブジェクトコードに反映する
- ~a = b;~ のような右辺に演算のない代入文をコピー文という。コピー伝播は、このような ~a~ の値の使用を、 ~b~ の値の使用で置き換える変換である
  - 置き換える ~a~ の使用には、このコピー文からの使用定義連鎖だけしか届いていない、などの条件がある
- コンパイル時に実行できる部分、実行時にしか実行できない部分、がある

* 関連
# 関連するエントリ。なぜ関連させたか理由を書く。意味のあるつながりを意識的につくる。
# この事実は自分のこのアイデアとどう整合するか。
# この現象はあの理論でどう説明できるか。
# ふたつのアイデアは互いに矛盾するか、互いを補っているか。
# いま聞いた内容は以前に聞いたことがなかったか。
# メモ y についてメモ x はどういう意味か。
なし。
