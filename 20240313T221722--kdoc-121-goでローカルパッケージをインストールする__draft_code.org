:properties:
:ID: 20240313T221722
:end:
#+title:      KDOC 121: Goでローカルパッケージをインストールする
#+date:       [2024-03-13 Wed 22:17]
#+filetags:   :draft:code:
#+identifier: 20240313T221722

# (denote-rename-file-using-front-matter (buffer-file-name) 0)
# (org-roam-tag-remove)
# (org-roam-tag-add)

# ====ポリシー。
# 1ファイル1アイデア。
# 1ファイルで内容を完結させる。
# 常にほかのエントリとリンクする。
# 自分の言葉を使う。
# 参考文献を残しておく。
# 自分の考えを加える。
# 構造を気にしない。
# エントリ間の接続を発見したら、接続エントリを追加する。カード間にあるリンクの関係を説明するカード。
# アイデアがまとまったらアウトラインエントリを作成する。リンクをまとめたエントリ。
# エントリを削除しない。古いカードのどこが悪いかを説明する新しいカードへのリンクを追加する。
# 恐れずにカードを追加する。無意味の可能性があっても追加しておくことが重要。

* この文書のステータス
- 作成
  - [X] 2024-03-13 貴島
- レビュー
  - [ ] <署名>
# (progn (kill-line -1) (insert (format "  - [X] %s 貴島" (format-time-string "%Y-%m-%d"))))

# 関連をつけた。
# タイトルがフォーマット通りにつけられている。
# 内容をブラウザに表示して読んだ(作成とレビューのチェックは同時にしない)。
# 文脈なく読めるのを確認した。
# おばあちゃんに説明できる。
# いらない見出しを削除した。
# タグを適切にした。
# すべてのコメントを削除した。
* go install
コマンドラインツールを作っていると、コマンドをインストールしてみて[fn:1]別のディレクトリで試してみたいことがよくある。そういうとき[[id:7cacbaa3-3995-41cf-8b72-58d6e07468b1][Go]]では簡単にできる。

開発しているディレクトリで ~go install~ すればいい。それだけで、インターネットからツールをgo installするときと同じようにバイナリがインストールされる。当然パスは通っているのでどこでも使える。また、ソースコードを変更したら、 ~go install~ すれば変更を反映できる。
* Footnotes
[fn:1] ~go run~ だとソースコードの位置を気にしないといけないので、別のディレクトリで試すのに具合が悪い。
