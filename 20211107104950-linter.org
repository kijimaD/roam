:PROPERTIES:
:ID:       e5663529-8095-4fc8-8fb5-500dd4471a73
:END:
#+title: Linter
* 概要
Linterとは、静的にプログラムを解析するツール。プログラムにおける解析ツールの総称。実行はできるがエラーにつながる書き方をチェックしてくれたり、チームでの書き方を揃えるのに使う。

一般的にはプログラム言語が対象だが、自然言語に対するlint([[id:d3394774-aba5-4167-bd18-f194eb2bd9ed][TextLint]])も存在する。プログラム言語それぞれでツールが存在する。

- ESLint :: [[id:a6980e15-ecee-466e-9ea7-2c0210243c0d][JavaScript]], [[id:ad1527ee-63b3-4a9b-a553-10899f57c234][TypeScript]]におけるLint
- Rubocop :: [[id:cfd092c4-1bb2-43d3-88b1-9f647809e546][Ruby]]におけるLint。
* 仕組み
- [[https://docs.google.com/presentation/d/1I4pHnzV2dFOMbRcpA-XD0TaLcX6PBKpls6WxGHoMjOg/edit#slide=id.g80ffbfd5e3_0_168][14. 静的解析とコード生成 - Google Slides]]のメモ

静的開発ツール開発の流れ。

#+begin_src mermaid :file images/20230226004543-H6jQpJeEsi.png
  flowchart LR

  開始 -->|Goファイル| 字句解析
  字句解析 -->|トークン| 構文解析
  構文解析 -->|抽象構文木| 型チェック
  構文解析 -->|抽象構文木| 自作部分
  型チェック -->|型情報| 自作部分
#+end_src

#+RESULTS:
[[file:images/20230226004543-H6jQpJeEsi.png]]

[[id:7cacbaa3-3995-41cf-8b72-58d6e07468b1][Go]]における静的解析のフェーズ。

1. 構文解析
2. 型チェック
3. ~静的単一代入形式~
4. ポインタ解析

言語仕様を読む。
- 抽象構文木を扱うためにGoの構文に詳しくなる
  - [[https://go.dev/ref/spec][言語仕様書]]
  - EBNFを読む
  - 構文を深く理解すれば抽象構文木を自由に扱える
    - どういうノードで構成されているか
    - どういう情報がどういうノードから取得できるか
* Tasks
** TODO 配信方法を考える
:LOGBOOK:
CLOCK: [2023-03-01 Wed 00:41]--[2023-03-01 Wed 01:06] =>  0:25
:END:
オリジナルで作ったけど、それらをひとまとめにして簡単に利用できるようにする。
** DONE 1つオリジナルで実装してみる
CLOSED: [2023-03-01 Wed 00:34]
:LOGBOOK:
CLOCK: [2023-02-28 Tue 23:05]--[2023-02-28 Tue 23:30] =>  0:25
CLOCK: [2023-02-28 Tue 22:40]--[2023-02-28 Tue 23:05] =>  0:25
CLOCK: [2023-02-28 Tue 22:15]--[2023-02-28 Tue 22:40] =>  0:25
CLOCK: [2023-02-28 Tue 21:50]--[2023-02-28 Tue 22:15] =>  0:25
:END:

無意味なコメントを検知してみる。
* Reference
** [[https://github.com/dustinspecker/awesome-eslint][dustinspecker/awesome-eslint: A list of awesome ESLint plugins, configs, etc.]]
eslintのplugin集。
種類が多い。
* Archives
