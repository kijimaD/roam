:PROPERTIES:
:ID:       32295609-a416-4227-9aa9-47aefc42eefc
:END:
#+title: dotfiles
* 概要
Linux系のプログラムでは、dotfileと呼ばれる ~.~ から始まるプレーンテキストで設定を書くことが多い。

- [[id:90c6b715-9324-46ce-a354-63d09403b066][Git]]管理できる
- 別のマシンでも全く同じ環境を作り出すことができる

などのメリットがある。

[[https://github.com/kijimaD/dotfiles][kijimaD/dotfiles: System settings]]
* Memo
** QEMU(仮想デスクトップ環境)
新しい[[id:7a81eb7c-8e2b-400a-b01a-8fa597ea527a][Linux]]ディストリビューションを試すときや、設定を変更するときは仮想マシン上で行ったほうがいい。
気軽に試せるし、再現性が高い。緊密なフィードバックループがあるとき開発は効率的になる。

逆にマシン本体へのインストールだと、設定変更や壊れたときの対応が面倒。
マシン本体へのインストールは本番環境みたいなもので、すばやく試すのには向いてないし、壊れたときがさらに面倒。
** [[id:d694ecaa-6a8b-4669-a95c-f76de6dcbd2c][GNU Guix]]を仮想マシンで起動する
[[id:d694ecaa-6a8b-4669-a95c-f76de6dcbd2c][GNU Guix ]][[https://www.youtube.com/watch?v=7ZdMRLPZhFs][5 Reasons to Try Guix in 2022 - YouTube]]
#+begin_src shell
  sudo apt install qemu-kvm
  qemu-system-x86_64 \
      -nic user,model=virtio-net-pci \
      -enable-kvm -m 2048 \
      -device virtio-blk,drive=guix-demo \
      -drive if=none,file=$HOME/Downloads/guix-vm.qcow2,id=guix-demo \
#+end_src
** Windowsを仮想マシンで起動する
[[https://qiita.com/Hiroki_Kawakami/items/b18f6c50df4ce215e40d][無料のWindows仮想マシンをQEMUで動かす - Qiita]]

#+caption: Hyper-V用のイメージWin10.vhdxを用意して起動する
#+begin_src shell
qemu-system-x86_64 -m 4096 -smp 2 -hda MSEdge\ -\ Win10.vhdx -enable-kvm
#+end_src

[[https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/][配布サイト]]に記載のように、パスワードは ~Passw0rd!~ 。
仮想マシンのフォーカスを抜けるにはCtrl + Alt + g。
* 好みのOSを作る
カスタマイズ性の高いソフトを組み合わせて、再現性の高い最高のシステムを作る。
Guixは土台になる。
だいたい[[id:fa497359-ae3f-494a-b24a-9822eefe67ad][System Crafters]]の情報がベースになってる。

- プレーンテキストでの設定
- 柔軟な設定
- コードがオープン
- キーボード指向

** [[id:d694ecaa-6a8b-4669-a95c-f76de6dcbd2c][GNU Guix]]
パッケージ管理システム。
** GNU [[id:1ad8c3d5-97ba-4905-be11-e6f2626127ad][Emacs]]
環境。
** GNU Stow
設定ファイル管理ツール。
シンボリックリンクを管理してくれる。
** GNU Shepherd
サービス管理ツール。
** GNU Make
古代からのビルド用ツール。タスク定義をドキュメント化するのに使う。
** nyxt
完全キーボードでのインターネットブラウジングを可能にする。
** i3-wm
どうしてもEmacsで日本語入力ができない。
ibusが特定アプリで動作しない不具合にあたっている。
gnomeでは完全にできるので、自動でやってくれてるところがあるよう。
Emacs上ではskkを使うようにして解決。Emacs以外では普通に入力すればいい。

ドキュメント
https://i3wm.org/docs/userguide.html#_hiding_vertical_borders

- close window: ~Mod + Shift + q~
** polybar
柔軟に設定できるメニューバー。
** compton
Emacs側で透過設定しても字が薄くなって微妙だが、ウィンドウ側でやると綺麗にできる。
また、ほかのアプリケーションを透過できて統一感がある。かっこいい。
** feh
背景を設定する。
#+begin_src shell
  feh --bg-fill -Zr ~/dotfiles/backgrounds/4k-Ultra-HD_00330.jpg
#+end_src
** dunst
[[https://github.com/dunst-project/dunst][dunst-project/dunst: Lightweight and customizable notification daemon]]
通知機能が入ってないウィンドウシステムでは([[id:eb196529-bdbd-48c5-9d5b-a156fe5c2f41][EXWM]]とか)、これを組み合わせて通知する。
* Tasks
** TODO インストールタスクが壊れてるのを直す
:LOGBOOK:
CLOCK: [2023-09-18 Mon 18:43]--[2023-09-18 Mon 19:08] =>  0:25
CLOCK: [2023-09-18 Mon 18:12]--[2023-09-18 Mon 18:37] =>  0:25
:END:

イメージからインストールする前提でMakeタスクのいくつかを消しているので、手動でインストールするときは大変面倒なことになっている。直す。

#+caption: org-roamを使うときに必要だった
#+begin_src shell
sudo apt install libsqlite3-dev
#+end_src

** TODO DBeaverインストール
閲覧に便利なdbクライアントをインストールする。
** TODO strategyを設定する
ubuntu22.04, ubuntu20.04, xubuntuを同時にテストできるようにしたい。できないにしても、動作確認には役立つ…か。少なくともデグレは防げる。
** TODO イメージを22.04に上げる
:LOGBOOK:
CLOCK: [2022-09-17 Sat 17:04]--[2022-09-17 Sat 17:29] =>  0:25
CLOCK: [2022-09-14 Wed 14:52]--[2022-09-14 Wed 15:17] =>  0:25
:END:
今は20.04。
** TODO dist-upgradeする
22.04をイメージのベースにするのが厳しそうなので、妥協してdist-upgradeを走らせる。

どうしてもアップデートの途中で止まってしまう。
** TODO makeタスクを整理
:LOGBOOK:
CLOCK: [2022-09-19 Mon 07:47]--[2022-09-19 Mon 08:12] =>  0:25
CLOCK: [2022-09-18 Sun 17:07]--[2022-09-18 Sun 17:32] =>  0:25
:END:
ブートイメージ化で不要になったものがあったり、逆に必要なものがあったりする。
** TODO イメージ展開用のmakeタスクを作成
動作検証で頻繁にやるので。
* Reference
** [[https://config.daviwil.com/desktop][Desktop Environment - config.daviwil.com]]
すごいdotfile。
** [[https://gitlab.com/dnsmichi/dotfiles][Michael Friedrich / dotfiles · GitLab]]
dotfilesの例。
** [[https://sachachua.com/dotemacs/][Sacha Chua's Emacs configuration]](Sacha Chua)
Emacsで有名な人のdotfiles。設定が莫大。
** [[https://sqrtminusone.xyz/configs/readme/][My dotfiles]](SqrtMinusOne)
Emacs界隈でよく見かける人。グラフ化していて良い。
** [[https://mvallim.github.io/live-custom-ubuntu-from-scratch/][How to create a custom Ubuntu live from scratch | live-custom-ubuntu-from-scratch]]
スクラッチでブータブルイメージを作る。
* Archives
** DONE dotfilesをCIテストする
CLOSED: [2021-10-03 Sun 14:07]
:LOGBOOK:
CLOCK: [2021-10-03 Sun 12:44]--[2021-10-03 Sun 14:06] =>  1:22
CLOCK: [2021-10-03 Sun 11:13]--[2021-10-03 Sun 12:02] =>  0:49
:END:
<2021-10-03 Sun>
- [[https://uu64.me/blog/2020/11/dotfiles][Github Actions を使って dotfiles の CI を Ubuntu/macOS 上で実行する | uu64.me]]

テスト、Lintはセットしたが、実行時エラーが解消できない。guixに依存した ~.bash_profile~ なんだよな。
** DONE [[id:1658782a-d331-464b-9fd7-1f8233b8b7f8][Docker]]でテストする
CLOSED: [2022-02-20 Sun 00:28]
:LOGBOOK:
CLOCK: [2022-02-19 Sat 11:29]--[2022-02-19 Sat 11:54] =>  0:25
CLOCK: [2022-02-19 Sat 11:02]--[2022-02-19 Sat 11:27] =>  0:25
CLOCK: [2022-02-19 Sat 10:36]--[2022-02-19 Sat 11:01] =>  0:25
CLOCK: [2022-02-19 Sat 10:10]--[2022-02-19 Sat 10:35] =>  0:25
:END:
クリーンな環境で一連のインストール作業ができるかチェックすると安心だろう。
[[id:d694ecaa-6a8b-4669-a95c-f76de6dcbd2c][GNU Guix]]関連をどうするかで詰まっている。使いこなせれば[[id:1658782a-d331-464b-9fd7-1f8233b8b7f8][Docker]]でやる必要はなくなるはずだが。
docker ubuntuではsystemctlが起動できないようになっているなので、[[id:d694ecaa-6a8b-4669-a95c-f76de6dcbd2c][GNU Guix]]が起動せず、依存関係が満たせない。
GitHub Actionでは実行できるのでそれでやった。実行テストさえできればいいだろう。
** DONE dotfilesにSSH設定の例を追加する
CLOSED: [2022-01-09 Sun 10:14] DEADLINE: <2022-01-08 Sat 23:50>

少なくとも例だけのせておくと便利だろう。
環境を楽に選択できるようconfigを設定する。
https://qiita.com/hkak03key/items/3b0c4752bfbcc52e676d
** DONE インストールディスクを作成する(いちいち最初からするのが面倒なので)
CLOSED: [2022-09-14 Wed 14:15]
:LOGBOOK:
CLOCK: [2022-09-14 Wed 11:20]--[2022-09-14 Wed 11:45] =>  0:25
CLOCK: [2022-09-14 Wed 10:45]--[2022-09-14 Wed 11:10] =>  0:25
CLOCK: [2022-09-14 Wed 09:13]--[2022-09-14 Wed 09:38] =>  0:25
CLOCK: [2022-09-14 Wed 08:35]--[2022-09-14 Wed 09:00] =>  0:25
CLOCK: [2022-09-14 Wed 07:07]--[2022-09-14 Wed 07:32] =>  0:25
CLOCK: [2022-09-13 Tue 17:51]--[2022-09-13 Tue 18:16] =>  0:25
CLOCK: [2022-09-13 Tue 17:25]--[2022-09-13 Tue 17:50] =>  0:25
CLOCK: [2022-09-13 Tue 16:32]--[2022-09-13 Tue 16:57] =>  0:25
CLOCK: [2022-09-13 Tue 14:50]--[2022-09-13 Tue 15:15] =>  0:25
CLOCK: [2022-09-13 Tue 14:15]--[2022-09-13 Tue 14:40] =>  0:25
CLOCK: [2022-09-13 Tue 13:41]--[2022-09-13 Tue 14:06] =>  0:25
CLOCK: [2022-09-13 Tue 12:53]--[2022-09-13 Tue 13:18] =>  0:25
CLOCK: [2022-09-13 Tue 12:27]--[2022-09-13 Tue 12:52] =>  0:25
CLOCK: [2022-09-13 Tue 07:42]--[2022-09-13 Tue 08:07] =>  0:25
CLOCK: [2022-09-13 Tue 07:14]--[2022-09-13 Tue 07:39] =>  0:25
CLOCK: [2022-09-12 Mon 20:01]--[2022-09-12 Mon 20:26] =>  0:25
CLOCK: [2022-09-12 Mon 19:31]--[2022-09-12 Mon 19:57] =>  0:26
CLOCK: [2022-09-12 Mon 18:45]--[2022-09-12 Mon 19:10] =>  0:25
CLOCK: [2022-09-12 Mon 18:19]--[2022-09-12 Mon 18:44] =>  0:25
CLOCK: [2022-09-12 Mon 15:17]--[2022-09-12 Mon 15:42] =>  0:25
CLOCK: [2022-09-12 Mon 14:10]--[2022-09-12 Mon 14:35] =>  0:25
CLOCK: [2022-09-12 Mon 13:45]--[2022-09-12 Mon 14:10] =>  0:25
CLOCK: [2022-09-12 Mon 13:20]--[2022-09-12 Mon 13:45] =>  0:25
CLOCK: [2022-09-12 Mon 11:40]--[2022-09-12 Mon 12:05] =>  0:25
CLOCK: [2022-09-12 Mon 11:06]--[2022-09-12 Mon 11:31] =>  0:25
CLOCK: [2022-09-12 Mon 10:41]--[2022-09-12 Mon 11:06] =>  0:25
CLOCK: [2022-09-12 Mon 09:51]--[2022-09-12 Mon 10:16] =>  0:25
CLOCK: [2022-09-12 Mon 09:12]--[2022-09-12 Mon 09:37] =>  0:25
CLOCK: [2022-09-12 Mon 08:47]--[2022-09-12 Mon 09:12] =>  0:25
CLOCK: [2022-09-12 Mon 08:22]--[2022-09-12 Mon 08:47] =>  0:25
CLOCK: [2022-09-12 Mon 07:57]--[2022-09-12 Mon 08:22] =>  0:25
CLOCK: [2022-09-11 Sun 09:37]--[2022-09-11 Sun 10:02] =>  0:25
:END:
すべて整備された状態でクリーンインストールできるようにしたい。イメージを作るとかそういうのができるはず。system.scmではパーティションやユーザ名を入力するのだから。

- [[https://github.com/daviwil/dotfiles/blob/master/Systems.org#system-installation][system-installation]]
- [[https://qiita.com/misohagi/items/4443fcc495366c717c38][GitHub ActionsでカスタマイズしたUbuntuのISOイメージを作る - Qiita]]
- [[https://rohhie.net/ubuntu20-04-try-to-make-a-live-cd-from-scratch-basic/][Ubuntu20.04 Live CDを作ってみる 基本編 | ろっひー]]

可能なことは確かだが、全然わからない。
** CLOSE mozcのdotfilesを用意する
CLOSED: [2022-04-10 Sun 20:28]
:LOGBOOK:
CLOCK: [2022-04-10 Sun 20:11]--[2022-04-10 Sun 20:28] =>  0:17
:END:
configファイルはないようだ。なのでファイル管理できない。

** DONE 色を変えて再起動するpolybar設定
CLOSED: [2022-09-14 Wed 14:18]
:LOGBOOK:
CLOCK: [2022-06-04 Sat 11:42]--[2022-06-04 Sat 12:07] =>  0:25
CLOCK: [2022-06-04 Sat 11:11]--[2022-06-04 Sat 11:36] =>  0:25
CLOCK: [2022-06-04 Sat 10:58]--[2022-06-04 Sat 11:11] =>  0:13
:END:
** DONE polybarとpomodoroを連携させる
CLOSED: [2022-01-16 Sun 17:13]
:LOGBOOK:
CLOCK: [2022-01-16 Sun 22:41]--[2022-01-16 Sun 23:06] =>  0:25
CLOCK: [2022-01-16 Sun 20:39]--[2022-01-16 Sun 21:04] =>  0:25
CLOCK: [2022-01-16 Sun 20:01]--[2022-01-16 Sun 20:26] =>  0:25
CLOCK: [2022-01-16 Sun 16:33]--[2022-01-16 Sun 16:58] =>  0:25
CLOCK: [2022-01-16 Sun 16:02]--[2022-01-16 Sun 16:27] =>  0:25
:END:
- [[https://colekillian.com/posts/org-pomodoro-and-polybar/][Org Pomodoro and Polybar - Cole Killian Adventure]]

改良してゲージ型にした。
全体カウント機能を追加した。一日ごとにリセットする。
** DONE [[id:1658782a-d331-464b-9fd7-1f8233b8b7f8][Docker]]で動作チェックできるようにする
CLOSED: [2022-09-14 Wed 14:19]
クリーンな環境でうまくいっているかチェックしたい。
Guix関連が難しく、詰まっている。
** DONE xfce4にする
CLOSED: [2022-09-15 Thu 10:26]
:LOGBOOK:
CLOCK: [2022-09-15 Thu 09:39]--[2022-09-15 Thu 10:04] =>  0:25
CLOCK: [2022-09-15 Thu 07:31]--[2022-09-15 Thu 07:56] =>  0:25
CLOCK: [2022-09-15 Thu 01:20]--[2022-09-15 Thu 01:45] =>  0:25
CLOCK: [2022-09-15 Thu 00:34]--[2022-09-15 Thu 00:59] =>  0:25
:END:

[[id:eb196529-bdbd-48c5-9d5b-a156fe5c2f41][EXWM]]の関係で、xfceのほうがいい。
** CLOSE emacsをCIで初回起動する
CLOSED: [2022-09-17 Sat 17:04]
:LOGBOOK:
CLOCK: [2022-09-17 Sat 16:39]--[2022-09-17 Sat 17:04] =>  0:25
CLOCK: [2022-09-17 Sat 14:20]--[2022-09-17 Sat 14:45] =>  0:25
CLOCK: [2022-09-17 Sat 13:32]--[2022-09-17 Sat 13:57] =>  0:25
CLOCK: [2022-09-17 Sat 13:22]--[2022-09-17 Sat 13:32] =>  0:10
CLOCK: [2022-09-17 Sat 12:56]--[2022-09-17 Sat 13:21] =>  0:25
CLOCK: [2022-09-17 Sat 12:15]--[2022-09-17 Sat 12:40] =>  0:25
CLOCK: [2022-09-17 Sat 08:22]--[2022-09-17 Sat 08:47] =>  0:25
CLOCK: [2022-09-16 Fri 16:39]--[2022-09-16 Fri 17:04] =>  0:25
CLOCK: [2022-09-16 Fri 16:10]--[2022-09-16 Fri 16:35] =>  0:25
CLOCK: [2022-09-16 Fri 15:41]--[2022-09-16 Fri 16:06] =>  0:25
CLOCK: [2022-09-16 Fri 14:59]--[2022-09-16 Fri 15:24] =>  0:25
CLOCK: [2022-09-16 Fri 10:38]--[2022-09-16 Fri 11:03] =>  0:25
CLOCK: [2022-09-16 Fri 09:47]--[2022-09-16 Fri 10:12] =>  0:25
CLOCK: [2022-09-16 Fri 09:21]--[2022-09-16 Fri 09:46] =>  0:25
CLOCK: [2022-09-16 Fri 08:54]--[2022-09-16 Fri 09:19] =>  0:25
CLOCK: [2022-09-16 Fri 08:11]--[2022-09-16 Fri 08:36] =>  0:25
CLOCK: [2022-09-16 Fri 07:42]--[2022-09-16 Fri 08:07] =>  0:25
CLOCK: [2022-09-15 Thu 20:33]--[2022-09-15 Thu 20:58] =>  0:25
CLOCK: [2022-09-15 Thu 18:22]--[2022-09-15 Thu 18:47] =>  0:25
CLOCK: [2022-09-15 Thu 13:33]--[2022-09-15 Thu 13:58] =>  0:25
CLOCK: [2022-09-15 Thu 11:19]--[2022-09-15 Thu 11:44] =>  0:25
CLOCK: [2022-09-15 Thu 10:41]--[2022-09-15 Thu 11:06] =>  0:25
:END:
いろいろ走るので初回が遅い。.emacs.dを指定して起動、とかしたらいいかな。emacs-sqliteのバイナリが見つからないエラーになる。ライブラリが入ってないため、コンパイルが自動でされないよう。

- emacsql-sqlite

cコンパイラ(gcc, clang, build-essentialどれでも )をインストールするとemacs-sqliteのコンパイルはできるようになる。だがubuntu自体の起動が失敗する。謎。Ubuntuインストール後、Guixでgccインストール、手動でコンパイルするしかない。めんどくさい。

- vterm

いくつかライブラリが必要。ない場合は自動コンパイルが走りわかりやすいエラー文も出るので対処はしやすい。

emacsを起動したイメージでブートすると、ユーザ作成モーダルを抜けられない。何らかの権限的な理由でユーザ作成に失敗しているように見える。
** DONE caskはタグが打たれたときだけ実行する
CLOSED: [2022-09-17 Sat 17:04]
実行時間が長いので、開発に支障が出る。
** DONE URLとファイル名を定数化する
CLOSED: [2022-09-17 Sat 17:33]
** DONE cloner追加
CLOSED: [2022-09-17 Sat 21:35]
:LOGBOOK:
CLOCK: [2022-09-15 Thu 16:15]--[2022-09-15 Thu 16:40] =>  0:25
CLOCK: [2022-09-15 Thu 14:03]--[2022-09-15 Thu 14:28] =>  0:25
:END:
cargo install clonerを追加する。

- build-essential が入ってないので、ビルドに失敗する
- build-essential を入れるとubiquityが失敗する
** CLOSE バージョン情報、gitハッシュ情報をイメージに含める
CLOSED: [2022-09-18 Sun 12:00]
:LOGBOOK:
CLOCK: [2022-09-18 Sun 11:40]--[2022-09-18 Sun 12:00] =>  0:20
CLOCK: [2022-09-17 Sat 17:30]--[2022-09-17 Sat 17:55] =>  0:25
:END:
あとから、イメージがどのバージョンなのかわからないので。それ用のファイルはありそうだが。

まあ、USBのパーティションの名前に含めればいいか。
** DONE qemuを入れる
CLOSED: [2022-09-18 Sun 17:50]
使うので。
** DONE dockerイメージを作る
CLOSED: [2022-09-18 Sun 17:50]
:LOGBOOK:
CLOCK: [2022-09-18 Sun 16:27]--[2022-09-18 Sun 16:52] =>  0:25
CLOCK: [2022-09-18 Sun 15:30]--[2022-09-18 Sun 15:55] =>  0:25
CLOCK: [2022-09-18 Sun 14:32]--[2022-09-18 Sun 14:57] =>  0:25
CLOCK: [2022-09-18 Sun 14:04]--[2022-09-18 Sun 14:29] =>  0:25
CLOCK: [2022-09-18 Sun 12:32]--[2022-09-18 Sun 12:57] =>  0:25
CLOCK: [2022-09-18 Sun 12:07]--[2022-09-18 Sun 12:32] =>  0:25
:END:
動作検証できるように、isoからイメージにしておく。

- [[https://medium.com/@SofianeHamlaoui/convert-iso-images-to-docker-images-4e1b1b637d75][🐳 Convert ISO images to docker images | by Sofiane Hamlaoui | Medium]]

単にtarに固めただけでできた。デバッグやテストもやりやすそうだ。
** DONE 必須のgoライブラリを入れる
CLOSED: [2022-09-18 Sun 17:55]
:LOGBOOK:
CLOCK: [2022-09-18 Sun 13:03]--[2022-09-18 Sun 13:28] =>  0:25
:END:
LSP, DAPを入れる。

ダウンロードすると、起動しなくなる。emacsを起動と同じく、何か特定のことをすると動かなくなる。走らせるとシステムディレクトリに何らかの変更をもたらす場合、動かなくなる可能性。たとえば ~go install~ やemacs起動したとき、ホームディレクトリ以外に何かを保存するとか。

とりあえずisoビルド段階では入れず、makeタスクに追加した。
