:properties:
:ID: 20240612T133312
:end:
#+title:      KDOC 190: 『Rubyのしくみ Ruby Under a Microscope』
#+date:       [2024-06-12 Wed 13:33]
#+filetags:   :draft:book:
#+identifier: 20240612T133312

# (denote-rename-file-using-front-matter (buffer-file-name) 0)
# (save-excursion (while (re-search-backward ":draft" nil t) (replace-match "")))
# (flush-lines "^\\#\s.+?")

# ====ポリシー。
# 1ファイル1アイデア。
# 1ファイルで内容を完結させる。
# 常にほかのエントリとリンクする。
# 自分の言葉を使う。
# 参考文献を残しておく。
# 文献メモの場合は、感想と混ぜないこと。1つのアイデアに反する
# ツェッテルカステンの議論に寄与するか
# 頭のなかやツェッテルカステンにある問いとどのようにかかわっているか
# エントリ間の接続を発見したら、接続エントリを追加する。カード間にあるリンクの関係を説明するカード。
# アイデアがまとまったらアウトラインエントリを作成する。リンクをまとめたエントリ。
# エントリを削除しない。古いカードのどこが悪いかを説明する新しいカードへのリンクを追加する。
# 恐れずにカードを追加する。無意味の可能性があっても追加しておくことが重要。

# ====永久保存メモのルール。
# 自分の言葉で書く。
# 後から読み返して理解できる。
# 他のメモと関連付ける。
# ひとつのメモにひとつのことだけを書く。
# メモの内容は1枚で完結させる。
# 論文の中に組み込み、公表できるレベルである。

# ====価値があるか。
# その情報がどういった文脈で使えるか。
# どの程度重要な情報か。
# そのページのどこが本当に必要な部分なのか。

* TODO この文書のステータス
:PROPERTIES:
:Effort:   20:00
:END:
:LOGBOOK:
CLOCK: [2024-06-23 Sun 20:54]--[2024-06-23 Sun 21:19] =>  0:25
CLOCK: [2024-06-23 Sun 20:27]--[2024-06-23 Sun 20:52] =>  0:25
CLOCK: [2024-06-23 Sun 19:48]--[2024-06-23 Sun 20:13] =>  0:25
CLOCK: [2024-06-23 Sun 19:22]--[2024-06-23 Sun 19:47] =>  0:25
CLOCK: [2024-06-23 Sun 17:12]--[2024-06-23 Sun 17:37] =>  0:25
CLOCK: [2024-06-23 Sun 13:30]--[2024-06-23 Sun 13:56] =>  0:26
CLOCK: [2024-06-23 Sun 11:12]--[2024-06-23 Sun 11:37] =>  0:25
CLOCK: [2024-06-22 Sat 23:31]--[2024-06-22 Sat 23:56] =>  0:25
CLOCK: [2024-06-22 Sat 23:06]--[2024-06-22 Sat 23:31] =>  0:25
CLOCK: [2024-06-22 Sat 22:41]--[2024-06-22 Sat 23:06] =>  0:25
CLOCK: [2024-06-22 Sat 21:36]--[2024-06-22 Sat 22:01] =>  0:25
CLOCK: [2024-06-22 Sat 19:16]--[2024-06-22 Sat 19:41] =>  0:25
CLOCK: [2024-06-22 Sat 18:46]--[2024-06-22 Sat 19:11] =>  0:25
CLOCK: [2024-06-22 Sat 18:07]--[2024-06-22 Sat 18:32] =>  0:25
CLOCK: [2024-06-22 Sat 15:07]--[2024-06-22 Sat 15:32] =>  0:25
CLOCK: [2024-06-22 Sat 10:25]--[2024-06-22 Sat 10:50] =>  0:25
CLOCK: [2024-06-22 Sat 10:00]--[2024-06-22 Sat 10:25] =>  0:25
CLOCK: [2024-06-22 Sat 09:14]--[2024-06-22 Sat 09:39] =>  0:25
CLOCK: [2024-06-22 Sat 08:32]--[2024-06-22 Sat 08:57] =>  0:25
CLOCK: [2024-06-20 Thu 21:40]--[2024-06-20 Thu 22:05] =>  0:25
CLOCK: [2024-06-20 Thu 20:13]--[2024-06-20 Thu 20:38] =>  0:25
CLOCK: [2024-06-20 Thu 19:42]--[2024-06-20 Thu 20:07] =>  0:25
CLOCK: [2024-06-19 Wed 22:13]--[2024-06-19 Wed 22:38] =>  0:25
CLOCK: [2024-06-19 Wed 21:36]--[2024-06-19 Wed 22:01] =>  0:25
CLOCK: [2024-06-19 Wed 19:58]--[2024-06-19 Wed 20:23] =>  0:25
CLOCK: [2024-06-19 Wed 19:23]--[2024-06-19 Wed 19:48] =>  0:25
CLOCK: [2024-06-19 Wed 16:58]--[2024-06-19 Wed 17:23] =>  0:25
CLOCK: [2024-06-19 Wed 16:31]--[2024-06-19 Wed 16:56] =>  0:25
CLOCK: [2024-06-19 Wed 15:25]--[2024-06-19 Wed 15:50] =>  0:25
CLOCK: [2024-06-19 Wed 14:41]--[2024-06-19 Wed 15:06] =>  0:25
CLOCK: [2024-06-19 Wed 00:30]--[2024-06-19 Wed 00:55] =>  0:25
CLOCK: [2024-06-18 Tue 23:58]--[2024-06-19 Wed 00:23] =>  0:25
CLOCK: [2024-06-18 Tue 21:52]--[2024-06-18 Tue 22:17] =>  0:25
CLOCK: [2024-06-18 Tue 20:12]--[2024-06-18 Tue 20:37] =>  0:25
CLOCK: [2024-06-18 Tue 18:01]--[2024-06-18 Tue 18:27] =>  0:26
CLOCK: [2024-06-17 Mon 21:43]--[2024-06-17 Mon 22:08] =>  0:25
CLOCK: [2024-06-17 Mon 21:03]--[2024-06-17 Mon 21:28] =>  0:25
CLOCK: [2024-06-17 Mon 19:25]--[2024-06-17 Mon 19:50] =>  0:25
CLOCK: [2024-06-16 Sun 15:42]--[2024-06-16 Sun 16:07] =>  0:25
CLOCK: [2024-06-13 Thu 00:35]--[2024-06-13 Thu 01:00] =>  0:25
CLOCK: [2024-06-12 Wed 16:08]--[2024-06-12 Wed 16:33] =>  0:25
CLOCK: [2024-06-12 Wed 15:37]--[2024-06-12 Wed 16:02] =>  0:25
CLOCK: [2024-06-12 Wed 15:12]--[2024-06-12 Wed 15:37] =>  0:25
:END:
- 作成
  - [ ] <署名>
# (progn (kill-line -1) (insert (format "  - [X] %s 貴島" (format-time-string "%Y-%m-%d"))))
- レビュー
  - [ ] <署名>
# (progn (kill-line -1) (insert (format "  - [X] %s 貴島" (format-time-string "%Y-%m-%d"))))

# 関連をつけた。
# タイトルがフォーマット通りにつけられている。
# 内容をブラウザに表示して読んだ(作成とレビューのチェックは同時にしない)。
# 文脈なく読めるのを確認した。
# おばあちゃんに説明できる。
# いらない見出しを削除した。
# タグを適切にした。
# すべてのコメントを削除した。
* 概要
[[https://tatsu-zine.com/books/ruby-under-a-microscope-ja][Rubyのしくみ Ruby Under a Microscope]]は、[[id:cfd092c4-1bb2-43d3-88b1-9f647809e546][Ruby]]の言語処理系を解説する本。
* メモ
- ~RubyVM::InstructionSequence~ を使うと、プログラム中からRubyのYARVエンジンにアクセスできる(p48)

#+begin_src ruby :results output
puts RubyVM::InstructionSequence.compile('1 + 2').disasm
#+end_src

#+RESULTS:
#+begin_src
== disasm: #<ISeq:<compiled>@<compiled>:1 (1,0)-(1,5)> (catch: FALSE)
0000 putobject_INT2FIX_1_                                             (   1)[Li]
0001 putobject                              2
0003 opt_plus                               <calldata!mid:+, argc:1, ARGS_SIMPLE>
0005 leave
#+end_src

#+begin_src ruby :results output
  code = <<END
  10.times do |n|
         puts n
  end
  END
  puts RubyVM::InstructionSequence.compile(code).disasm
#+end_src

#+RESULTS:
#+begin_src
== disasm: #<ISeq:<compiled>@<compiled>:1 (1,0)-(3,3)> (catch: FALSE)
== catch table
| catch type: break  st: 0000 ed: 0005 sp: 0000 cont: 0005
| == disasm: #<ISeq:block in <compiled>@<compiled>:1 (1,9)-(3,3)> (catch: FALSE)
| == catch table
| | catch type: redo   st: 0001 ed: 0006 sp: 0000 cont: 0001
| | catch type: next   st: 0001 ed: 0006 sp: 0000 cont: 0006
| |------------------------------------------------------------------------
| local table (size: 1, argc: 1 [opts: 0, rest: -1, post: 0, block: -1, kw: -1@-1, kwrest: -1])
| [ 1] n@0<Arg>
| 0000 nop                                                              (   1)[Bc]
| 0001 putself                                                          (   2)[Li]
| 0002 getlocal_WC_0                          n@0
| 0004 opt_send_without_block                 <calldata!mid:puts, argc:1, FCALL|ARGS_SIMPLE>
| 0006 nop
| 0007 leave                                                            (   3)[Br]
|------------------------------------------------------------------------
0000 putobject                              10                        (   1)[Li]
0002 send                                   <calldata!mid:times, argc:0>, block in <compiled>
0005 nop
0006 leave                                                            (   1)
#+end_src

- 一度Rubyコンパイラが実行されると、ブロックパラメータに関する情報はASTの外、ローカルテーブルと呼ばれる別のデータ構造にコピーされ、新しく生成されたYARV命令列の近くに保存される。書くYARV命令、つまりRubyプログラムの各スコープは専用のローカルスコープを持つ(p50)

#+caption: メソッド定義の処理
#+begin_src ruby :results output
  code = <<END
  def add_two(a, b)
      sum = a+b
  end
  END
  puts RubyVM::InstructionSequence.compile(code).disasm
#+end_src

#+RESULTS:
#+begin_src
== disasm: #<ISeq:<compiled>@<compiled>:1 (1,0)-(3,3)> (catch: FALSE)
0000 definemethod                           :add_two, add_two         (   1)[Li]
0003 putobject                              :add_two
0005 leave

== disasm: #<ISeq:add_two@<compiled>:1 (1,0)-(3,3)> (catch: FALSE)
local table (size: 3, argc: 2 [opts: 0, rest: -1, post: 0, block: -1, kw: -1@-1, kwrest: -1])
[ 3] a@0<Arg>   [ 2] b@1<Arg>   [ 1] sum@2
0000 getlocal_WC_0                          a@0                       (   2)[LiCa]
0002 getlocal_WC_0                          b@1
0004 opt_plus                               <calldata!mid:+, argc:1, ARGS_SIMPLE>
0006 dup
0007 setlocal_WC_0                          sum@2
0009 leave                                                            (   3)[Re]
#+end_src

デフォルト引数。

#+begin_src ruby :results output
  code = <<END
  def add_two_opt(a, b = 99)
      sum = a+b
  end
  END
  puts RubyVM::InstructionSequence.compile(code).disasm
#+end_src

#+RESULTS:
#+begin_src
== disasm: #<ISeq:<compiled>@<compiled>:1 (1,0)-(3,3)> (catch: FALSE)
0000 definemethod                           :add_two_opt, add_two_opt (   1)[Li]
0003 putobject                              :add_two_opt
0005 leave

== disasm: #<ISeq:add_two_opt@<compiled>:1 (1,0)-(3,3)> (catch: FALSE)
local table (size: 3, argc: 1 [opts: 1, rest: -1, post: 0, block: -1, kw: -1@-1, kwrest: -1])
[ 3] a@0<Arg>   [ 2] b@1<Opt=0> [ 1] sum@2
0000 putobject                              99                        (   1)
0002 setlocal_WC_0                          b@1
0004 getlocal_WC_0                          a@0                       (   2)[LiCa]
0006 getlocal_WC_0                          b@1
0008 opt_plus                               <calldata!mid:+, argc:1, ARGS_SIMPLE>
0010 dup
0011 setlocal_WC_0                          sum@2
0013 leave                                                            (   3)[Re]
#+end_src

キーワード引数。

#+begin_src ruby :results output
  code = <<END
  def add_two_opt(a, b: 99)
      sum = a+b
  end
  END
  puts RubyVM::InstructionSequence.compile(code).disasm
#+end_src

#+RESULTS:
#+begin_src
== disasm: #<ISeq:<compiled>@<compiled>:1 (1,0)-(3,3)> (catch: FALSE)
0000 definemethod                           :add_two_opt, add_two_opt (   1)[Li]
0003 putobject                              :add_two_opt
0005 leave

== disasm: #<ISeq:add_two_opt@<compiled>:1 (1,0)-(3,3)> (catch: FALSE)
local table (size: 4, argc: 1 [opts: 0, rest: -1, post: 0, block: -1, kw: 1@0, kwrest: -1])
[ 4] a@0<Arg>   [ 3] b@1        [ 2] ?@2        [ 1] sum@3
0000 getlocal_WC_0                          a@0                       (   2)[LiCa]
0002 getlocal_WC_0                          b@1
0004 opt_plus                               <calldata!mid:+, argc:1, ARGS_SIMPLE>
0006 dup
0007 setlocal_WC_0                          sum@3
0009 leave                                                            (   3)[Re]
#+end_src

- YARVは途中の値や引数、返り値を把握するために内部的にスタックを利用する。YARVはスタック志向な仮想マシンである、という。内部スタックに加えて、Rubyプログラムのコールスタックも把握し続ける。どのメソッドが他のメソッド、関数、ブロックやラムダなどを呼び出したか記録される。YARVは二重スタックマシンである(p62)

#+caption: YARV命令列、YARVが管理するフレーム、内部レジスタの関係図(p62参考)
[[file:images/20240623-inner.drawio.svg]]

#+caption: スタックフレームの積み重なるイメージ(p62参考)
[[file:images/20240623-stack.drawio.svg]]

- Rubyは新しいプログラムを開始する際、まずはじめにTOPフレームを生成する。EVALというタイプのフレームは、Rubyスクリプトのトップレベルのスコープに対応している(p67)
- Rubyは ~pubobject~ や ~send~ といったすべてのYARV命令をCを使って実装している。しかしCソースファイル内に各YARV命令のコードはない。そのかわり、 ~insns.def~ (define instruction)という単一の巨大なファイル内にYARV命令のCソースコードを記述している、という。ほとんどの部分はCではない。ビルド処理の中で ~insns.def~ の内容をCコードへと変換する(p68)
  - YARNV命令定義(~insns.def~ ファイル) -> プリプロセス -> YARV Cコード(~vm.inc~ ファイル)
  - RubyはRubyを使って ~insns.def~ を処理し、 ~vm.inc~ というCソースコードを生成する。そして生成したCソースコードとあわせて、まずは小さなminirubyというコマンドをビルドし、これを用いて大きなRubyコマンドを作っていく

#+caption: YARV命令putself
#+begin_src git-permalink
https://github.com/kd-collective/ruby/blob/dd04def10f22296c9a98b4d796c100b9ad4e2388/insns.def#L348-L356
#+end_src

#+RESULTS:
#+begin_src c
/* put self. */
DEFINE_INSN
putself
()
()
(VALUE val)
{
    val = GET_SELF();
}
#+end_src

- RubyコアチームはRuby1.9からYARV仮想マシンを導入した。Rubyの初期のバージョンはASTのノードを直接たどることでプログラムを実行していた。Rubyはただ字句解析と構文解析を行い、すぐにコードを実行していた。コンパイラと新しい仮想マシンを導入したのは、速度だ。YARVを使用してコンパイルされたRubyプログラムを実行すると、直接ASTをたどるよりはるかに高速にプログラムを実行できる(p71)
- Rubyは変数に保存した値すべてを、YARV命令列の引数や返り値と一緒にYARVスタックに保存する。しかしこれらの変数へのアクセスはそう単純ではない。変数の値を読み書きしやすくするために、Rubyはローカル変数アクセスと動的変数アクセスという2つの全く異なる方法を用いる、という(p74)
- ローカル変数アクセス(p74)
  - Rubyは現在のメソッドにおける特殊変数のテーブルへのポインタか、現在のレキシカルスコープへのポインタのいずれかをsvar/crefに含める
  - スタック上のスペースに値を書き込むために、環境ポインタ(EP)を使う。このポインタは現在のメソッド用のローカル変数がスタック上のどこにあるかをポイントする。スタックポインタ(SP)の値がYARV命令を実行することによって変化しても、EPの値はそこにとどまる

#+caption: ローカル変数アクセスの例。setlocalでスタックからstrの位置に保存する。後でEPとインデックス0を使って保存位置をたどれる
#+begin_src ruby :results output
  code = <<END
  def display_string
      str1 = "Local access."
      puts str1
  end
  END
  puts RubyVM::InstructionSequence.compile(code).disasm
#+end_src

#+RESULTS:
#+begin_src
== disasm: #<ISeq:<compiled>@<compiled>:1 (1,0)-(4,3)> (catch: FALSE)
0000 definemethod                           :display_string, display_string(   1)[Li]
0003 putobject                              :display_string
0005 leave

== disasm: #<ISeq:display_string@<compiled>:1 (1,0)-(4,3)> (catch: FALSE)
local table (size: 1, argc: 0 [opts: 0, rest: -1, post: 0, block: -1, kw: -1@-1, kwrest: -1])
[ 1] str1@0
0000 putstring                              "Local access."           (   2)[LiCa]
0002 setlocal_WC_0                          str1@0
0004 putself                                                          (   3)[Li]
0005 getlocal_WC_0                          str1@0
0007 opt_send_without_block                 <calldata!mid:puts, argc:1, FCALL|ARGS_SIMPLE>
0009 leave                                                            (   4)[Re]
#+end_src

#+caption: setlocal, getlocalを図で見る
[[file:images/20240623-local.drawio.svg]]

- 動的変数アクセス(p78)
  - 異なるスコープで定義された変数を使用しようとした場合にRubyは動的変数アクセスを行う。たとえばブロックの内側かブロックの外側の変数にアクセスしようとしたとき

#+caption: 動的変数アクセスの例。putsメソッドがあるブロックのgetlocal_WC_1命令に注目。1はブロックのスコープからそれを呼んだメソッドのスコープに1つ戻ることを意味している
#+begin_src ruby :results output
  code = <<END
  def display_string
    str = "Dynamic access."
    10.times do
      puts str
    end
  end
  END
  puts RubyVM::InstructionSequence.compile(code).disasm
#+end_src

#+RESULTS:
#+begin_src
== disasm: #<ISeq:<compiled>@<compiled>:1 (1,0)-(6,3)> (catch: FALSE)
0000 definemethod                           :display_string, display_string(   1)[Li]
0003 putobject                              :display_string
0005 leave

== disasm: #<ISeq:display_string@<compiled>:1 (1,0)-(6,3)> (catch: FALSE)
== catch table
| catch type: break  st: 0004 ed: 0009 sp: 0000 cont: 0009
| == disasm: #<ISeq:block in display_string@<compiled>:3 (3,11)-(5,5)> (catch: FALSE)
| == catch table
| | catch type: redo   st: 0001 ed: 0006 sp: 0000 cont: 0001
| | catch type: next   st: 0001 ed: 0006 sp: 0000 cont: 0006
| |------------------------------------------------------------------------
| 0000 nop                                                              (   3)[Bc]
| 0001 putself                                                          (   4)[Li]
| 0002 getlocal_WC_1                          str@0
| 0004 opt_send_without_block                 <calldata!mid:puts, argc:1, FCALL|ARGS_SIMPLE>
| 0006 nop
| 0007 leave                                                            (   5)[Br]
|------------------------------------------------------------------------
local table (size: 1, argc: 0 [opts: 0, rest: -1, post: 0, block: -1, kw: -1@-1, kwrest: -1])
[ 1] str@0
0000 putstring                              "Dynamic access."         (   2)[LiCa]
0002 setlocal_WC_0                          str@0
0004 putobject                              10                        (   3)[Li]
0006 send                                   <calldata!mid:times, argc:0>, block in display_string
0009 nop
0010 leave                                                            (   6)[Re]
#+end_src

#+caption: 動的変数アクセス
[[file:images/20240623-dynamic.drawio.svg]]

#+begin_src ruby :results output
puts RubyVM::InstructionSequence.compile('puts 1 + 2').disasm
#+end_src

#+RESULTS:
#+begin_src
== disasm: #<ISeq:<compiled>@<compiled>:1 (1,0)-(1,10)> (catch: FALSE)
0000 putself                                                          (   1)[Li]
0001 putobject_INT2FIX_1_
0002 putobject                              2
0004 opt_plus                               <calldata!mid:+, argc:1, ARGS_SIMPLE>
0006 opt_send_without_block                 <calldata!mid:puts, argc:1, FCALL|ARGS_SIMPLE>
0008 leave
#+end_src

- スタック内の ~EIP-1~ スロットはこのスタックフレーム内で定義された特殊変数のポインタである ~svar~ の値を含んでいる。Rubyにおける特殊変数とは、利便性を目的に環境や直前の操作によってRubyが自動で生成した値を参照するもの、だという(p83)
- ~$&~ は明らかにグローバルでない。Rubyはこの振る舞いを可能にするために、特殊変数の集合をスタックのレベルごとにわけて保存している(p84)

#+caption: スコープごとに$&を保持している
#+begin_src ruby :results output
  str = "The quick brown fox jumps over the lazy dog"
  /fox/.match(str)

  def search(str)
    /dog/.match(str)
    puts "Value of $& inside method: #{$&}"
  end

  search(str)
  puts "Value of $& top level scope: #{$&}"
#+end_src

#+RESULTS:
#+begin_src
Value of $& inside method: dog
Value of $& top level scope: fox
#+end_src

#+caption: 各スタックフレームは専用の特殊変数のセットを持つ
[[file:images/20240623-special.drawio.svg]]

#+caption: ブロック内で実行されたdogの検索によってトップレベルスコープの$&の値が上書きされる。Rubyは特殊変数に関してはトップレベルスコープとブロックの内側のスコープは同じとみなす、という(p86)
#+begin_src ruby :results output
  str = "The quick brown fox jumped over the lazy dog.\n"
  /fox/.match(str)

  2.times do
    /dog/.match(str)
    puts "Value of $& inside block: #{$&}"
  end

  puts "Value of $& in the top-level scope: #{$&}"
#+end_src

#+RESULTS:
#+begin_src
Value of $& inside block: dog
Value of $& inside block: dog
Value of $& in the top-level scope: dog
#+end_src

#+caption: ソースコードから特殊変数の一覧を確認する
#+begin_src git-permalink
  https://github.com/kd-collective/ruby/blob/dd04def10f22296c9a98b4d796c100b9ad4e2388/parse.y#L9572-L9587
#+end_src

#+RESULTS:
#+begin_src
      case '~':		/* $~: match-data */
      case '*':		/* $*: argv */
      case '$':		/* $$: pid */
      case '?':		/* $?: last status */
      case '!':		/* $!: error string */
      case '@':		/* $@: error position */
      case '/':		/* $/: input record separator */
      case '\\':		/* $\: output record separator */
      case ';':		/* $;: field separator */
      case ',':		/* $,: output field separator */
      case '.':		/* $.: last read line number */
      case '=':		/* $=: ignorecase */
      case ':':		/* $:: load path */
      case '<':		/* $<: reading filename */
      case '>':		/* $>: default output handle */
      case '\"':		/* $": already loaded files */
#+end_src

#+caption: ブロックをコンパイルしたコード内のthrow 2はYARVコード片のいずれかにつながるポインタのテーブル、捕捉テーブルを使ってYARV命令レベルで例外を送出するもの、だという(p96)
#+begin_src ruby :results output
  code = <<END
    10.times do |n|
      puts n
      break
    end
      puts "continue from here."
  END
  puts RubyVM::InstructionSequence.compile(code).disasm
#+end_src

#+RESULTS:
#+begin_src
== disasm: #<ISeq:<compiled>@<compiled>:1 (1,0)-(5,30)> (catch: TRUE)
== catch table
| catch type: break  st: 0000 ed: 0005 sp: 0000 cont: 0005
| == disasm: #<ISeq:block in <compiled>@<compiled>:1 (1,11)-(4,5)> (catch: TRUE)
| == catch table
| | catch type: redo   st: 0001 ed: 0010 sp: 0000 cont: 0001
| | catch type: next   st: 0001 ed: 0010 sp: 0000 cont: 0010
| |------------------------------------------------------------------------
| local table (size: 1, argc: 1 [opts: 0, rest: -1, post: 0, block: -1, kw: -1@-1, kwrest: -1])
| [ 1] n@0<Arg>
| 0000 nop                                                              (   1)[Bc]
| 0001 putself                                                          (   2)[Li]
| 0002 getlocal_WC_0                          n@0
| 0004 opt_send_without_block                 <calldata!mid:puts, argc:1, FCALL|ARGS_SIMPLE>
| 0006 pop
| 0007 putnil                                                           (   3)[Li]
| 0008 throw                                  2
| 0010 nop
| 0011 leave                                                            (   4)[Br]
|------------------------------------------------------------------------
0000 putobject                              10                        (   1)[Li]
0002 send                                   <calldata!mid:times, argc:0>, block in <compiled>
0005 nop
0006 pop                                                              (   1)
0007 putself                                                          (   5)[Li]
0008 putstring                              "continue from here."
0010 opt_send_without_block                 <calldata!mid:puts, argc:1, FCALL|ARGS_SIMPLE>
0012 leave
#+end_src

- YARVはthrow命令を実行すると、現在のYARV命令シーケンス用のブレークポインタを含む捕捉テーブルがあるかどうかをチェックする。見つからなければ、スタックを繰り返したどる。一度捕捉テーブルへのポインタを見つけると、新しい実行ポイントを反映するために、Rubyコールスタック(CFP)と内部YARVスタックの両方をリセットする。そしてYARVはその地点から処理を継続する(p96)
- returnキーワードも、捕捉テーブルを使用するRubyの一般的な制御構造である。ブロック内でreturnを呼び出す際にはいつでも、Rubyは内部的に例外を送出する。そしてbreakと同じ方法で捕捉テーブルポインタとともにそれを捕捉する。breakとreturnは例外を送出する同じYARV命令を使っている。breakに加えて、rescue, ensure, retry, redo, nextの実装に捕捉テーブルを使用する(p98)
  - return -> throw 1
  - break -> throw 2
- Rubyがforループをどうコンパイルするか検証する。実際に内部でeachを使ってforループを実装していることを確認できる (p99)

#+caption: eachを使ってforループを実装しているのを確認する(p99)
#+begin_src ruby :results output
  code = <<END
       for i in 0..5
         puts i
       end
  END
  puts RubyVM::InstructionSequence.compile(code).disasm
#+end_src

#+RESULTS:
#+begin_src
== disasm: #<ISeq:<compiled>@<compiled>:1 (1,0)-(3,8)> (catch: FALSE)
== catch table
| catch type: break  st: 0000 ed: 0005 sp: 0000 cont: 0005
| == disasm: #<ISeq:block in <compiled>@<compiled>:1 (1,5)-(3,8)> (catch: FALSE)
| == catch table
| | catch type: redo   st: 0005 ed: 0010 sp: 0000 cont: 0005
| | catch type: next   st: 0005 ed: 0010 sp: 0000 cont: 0010
| |------------------------------------------------------------------------
| local table (size: 1, argc: 1 [opts: 0, rest: -1, post: 0, block: -1, kw: -1@-1, kwrest: -1])
| [ 1] ?@0<Arg>
| 0000 getlocal_WC_0                          ?@0                       (   1)
| 0002 setlocal_WC_1                          i@0
| 0004 nop                                    [Bc]
| 0005 putself                                                          (   2)[Li]
| 0006 getlocal_WC_1                          i@0
| 0008 opt_send_without_block                 <calldata!mid:puts, argc:1, FCALL|ARGS_SIMPLE>
| 0010 nop
| 0011 leave                                                            (   3)[Br]
|------------------------------------------------------------------------
local table (size: 1, argc: 0 [opts: 0, rest: -1, post: 0, block: -1, kw: -1@-1, kwrest: -1])
[ 1] i@0
0000 putobject                              0..5                      (   1)[Li]
0002 send                                   <calldata!mid:each, argc:0>, block in <compiled>
0005 nop
0006 leave                                                            (   1)
#+end_src

- メソッド探索の流れ(p102)
  1. YARVがsendを呼ぶ
  2. メソッド探索
  3. メソッドディスパッチ
  4. YARVが対象のメソッドを実行する
- Rubyは内部的にメソッドを11種類のタイプに分けて扱っている。メソッドディスパッチの間、Rubyは呼び出そうとしているメソッドのタイプを調べ、そのタイプに従ってそれぞれ異なる呼び出し方をする。YARVはほとんどのメソッドを、ISEQ(命令列)というメソッドタイプとして扱う(p102)
  - ISEQ
  - CFUNC
  - ATTRSET
  - IVAR
  - BMETHOD
  - ZSUPER
  - UNDEF
  - NOTIMPLEMENTED
  - OPTIMIZED
  - MISSING
  - REFINED
- キーワード引数を実装するためにハッシュが使われているのを証明する(p110)
- Rubyは、ユーザが作成したクラスの各オブジェクトを、RObjectというCの構造体に格納する(p116)
- すべてのRubyオブジェクトは、クラスへのポインタとインスタンス変数の配列の組み合わせである、という(p116)
- クラスの2つのインスタンスの可視化の図(p119)
- 整数や文字列、シンボルなどの基本データ型を含むすべての値がオブジェクトである(p119)
  - ユーザが定義したクラスをRubyはRObject構造体に保存する
  - 一般的なデータ型の各値を保存するために、RubyはRObjectとは異なるC構造体を使用する
- パフォーマンスの最適化のため、Rubyは小さな整数値やシンボルといった単純な値を構造体を使わずVALUEポインタの中に直接保存する。VALUEの下位数ビットに保存したフラグを使ってクラスを記録する(p120)
- 新しいインスタンス変数を保存するのにどれくらいかかるか検証する。オブジェクトごとに新しいクラスを作る(p124)

#+caption: 新しいインスタンス変数を保存する時間を計測する
#+begin_src ruby :results output
  require 'benchmark'

  ITERATIONS = 100000
  GC.disable
  obj = ITERATIONS.times.map { Class.new.new }

  Benchmark.bm do |bench|
    20.times do |count|
      bench.report("adding instance variable number #{count+1}") do
        ITERATIONS.times do |n|
          obj[n].instance_variable_set("@var#{count}", "value")
        end
      end
    end
  end
#+end_src

#+RESULTS:
#+begin_src
       user     system      total        real
adding instance variable number 1  0.021548   0.020863   0.042411 (  0.042811)
adding instance variable number 2  0.022505   0.003532   0.026037 (  0.026317)
adding instance variable number 3  0.023075   0.003734   0.026809 (  0.027071)
adding instance variable number 4  0.024410   0.004075   0.028485 (  0.028722)
adding instance variable number 5  0.031556   0.003862   0.035418 (  0.035679)
adding instance variable number 6  0.020043   0.009000   0.029043 (  0.029327)
adding instance variable number 7  0.022835   0.003691   0.026526 (  0.026792)
adding instance variable number 8  0.031815   0.000680   0.032495 (  0.032762)
adding instance variable number 9  0.035043   0.008684   0.043727 (  0.044222)
adding instance variable number 10  0.027289   0.000000   0.027289 (  0.027487)
adding instance variable number 11  0.027571   0.003536   0.031107 (  0.031416)
adding instance variable number 12  0.015372   0.012116   0.027488 (  0.027830)
adding instance variable number 13  0.028007   0.000680   0.028687 (  0.029049)
adding instance variable number 14  0.031383   0.003799   0.035182 (  0.035621)
adding instance variable number 15  0.025727   0.003518   0.029245 (  0.029572)
adding instance variable number 16  0.015992   0.012207   0.028199 (  0.028549)
adding instance variable number 17  0.049342   0.004136   0.053478 (  0.054039)
adding instance variable number 18  0.023057   0.016051   0.039108 (  0.039487)
adding instance variable number 19  0.016073   0.013158   0.029231 (  0.029594)
adding instance variable number 20  0.026045   0.003476   0.029521 (  0.029833)
#+end_src

- すべてのオブジェクトは、RClass構造体へのポインタを保存することで自分のクラスを記憶する(p127)
- Rubyクラスの定義(p129)
  - メソッド定義のグループを含む
  - 属性名のテーブルを含む
  - Rubyオブジェクトである
  - スーパークラスポインタを含む
  - 定数テーブルを含む

* 関連
# 関連するエントリ。なぜ関連させたか理由を書く。意味のあるつながりを意識的につくる。
# この事実は自分のこのアイデアとどう整合するか。
# この現象はあの理論でどう説明できるか。
# ふたつのアイデアは互いに矛盾するか、互いを補っているか。
# いま聞いた内容は以前に聞いたことがなかったか。
# メモ y についてメモ x はどういう意味か。
