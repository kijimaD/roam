:PROPERTIES:
:ID:       ad1527ee-63b3-4a9b-a553-10899f57c234
:END:
#+title: TypeScript
* 概要
TypeScriptは[[id:a6980e15-ecee-466e-9ea7-2c0210243c0d][JavaScript]]の上位互換となるように作られた[[id:868ac56a-2d42-48d7-ab7f-7047c85a8f39][Programming Language]]。
型定義が最大の特徴。
* Memo
** DONE lspをセットする
CLOSED: [2021-09-05 日 19:16]
lspは、Language Server Protocol。
開発ツールと言語サーバープロセスの間における通信プロトコル…つまり実行前に解析することでエラーを検知できる。
検知した内容は共通の通信プロトコルで送信されるので、ソフトを問わずに知ることができる。

まず設定しておくと、インタラクティブに理解が進む。
WEBでどんな感じが試すのもいい。
https://www.typescriptlang.org/play
** TODO TypeScript本 DEADLINE: <2021-10-01 Fri>
:LOGBOOK:
CLOCK: [2021-09-03 Fri 23:27]--[2021-09-04 Sat 00:09] =>  0:42
CLOCK: [2021-09-03 Fri 22:47]--[2021-09-03 Fri 23:27] =>  0:40
CLOCK: [2021-09-03 Fri 09:44]--[2021-09-03 Fri 09:47] =>  0:03
:END:
わかりづらいので本を変えた。
まず最初に読みやすいか確認するべきだな。
徐々にアプリを作っていく形式で、コードをどこに追加していいかわからないのは致命的だ。

古いバージョンで最新ではコードが動かない。
ドラッグアンドドロップできない。

- 91p。<2021-09-06 月>
* Language Memo
** 継承
クラス継承はextendsキーワードで行う。

#+begin_src javascript
class Parent {}
class Child extends Parent {}
#+end_src
** インターフェース
[[https://book.yyts.org/features/interfaces][インターフェース (Interfaces) - サバイバルTypeScript-TypeScript入門]]

#+begin_quote
TypeScriptにはabstract修飾子があり抽象クラスを表現できます。
#+end_quote
** 抽象クラス
[[https://book.yyts.org/revisiting-javascript/objects-and-classes][JavaScriptのオブジェクトとクラス - サバイバルTypeScript-TypeScript入門]]

#+begin_quote
avaやPHPなどの言語では、abstract修飾子を使って抽象クラスを定義できます。
抽象クラスは、直接インスタンスを作れないクラスのことです。JavaScriptに
は抽象クラスを定義する構文はありません。
#+end_quote
** アクセス修飾子
#+begin_quote
JavaやPHPなどの言語では、フィールドやメソッドにprivate, protected,
publicを指定できます。JavaScriptでもprivateのようなプロパティを実現する
ためにプライベートクラスフィールドという仕様が実験的に導入されはじめて
はいますが、現状はJavaのようなアクセス修飾子はありません。

TypeScriptにはJava風のアクセス修飾子があります。TypeScriptのアクセス修
飾子については「クラス」をご覧ください。
#+end_quote
** プロトタイプベース
[[https://book.yyts.org/revisiting-javascript/prototype-based][プロトタイプベース - サバイバルTypeScript-TypeScript入門]]

#+begin_quote
- プロトタイプベースとはどういう考え方なのか？
- プロトタイプベースのJavaScriptは、クラスベースのPHPやJavaとどんなとこ
  ろが違う？
- なぜJavaScriptはプロトタイプベースを採用したのか？
- プロトタイプベースの利点は何か？
#+end_quote

こういう疑問から始めるのはいいな。

#+begin_quote
オブジェクト指向プログラミング(OOP)では、オブジェクトを扱います。オブジェ
クトを扱う以上は、オブジェクトを生成する必要があります。

しかし、オブジェクトの生成方式は、OOPで統一的な決まりはありません。言語
によって異なるのです。言語によりオブジェクト生成の細部は異なりますが、
生成方法は大きく分けて「クラスベース」と「プロトタイプベース」がありま
す。
#+end_quote

オブジェクト思考プログラミング言語ではクラス作成 → クラス.newしてインスタンスを作成して目的を達成する。
オブジェクトの素となるのがクラスだから、クラスベースと言う。

#+begin_quote
一方のJavaScriptのオブジェクト生成はプロトタイプベースです。プロトタイ
プベースの特徴は、クラスのようなものが無いこところです。(あったとしても
クラスもオブジェクトの一種だったりと特別扱いされていない)
#+end_quote
** 振る舞い
[[https://book.yyts.org/features/primitive-types][プリミティブ型 (Primitive Types) - サバイバルTypeScript-TypeScript入門]]

#+begin_quote
振る舞いがないとはメソッドを持たないことです。
#+end_quote

#+begin_quote
null.toString();

意図せずこのようにしてしまい実行時エラーになってしまった経験はあるかと
思います。これはnullがtoString()という振る舞いを持っていないことに起因
します。

とはいうもののJavaScriptにおいてプリミティブ型の多くはラッパークラスを
持っています。ラッパークラスを持つプリミティブ型の値はメソッド呼び出し
があれば実行時に、対応するラッパークラスのインスタンスに変換されるため、
あたかもプリミティブ型が振る舞いを持つように見え、またそのように使うこ
とができます。これはJavaを使われている方にとってはおなじみのAutoboxing
というJavaScript の言語機能です。
#+end_quote
** バッククォートリテラル
- 改行できる
- 変数展開できる
#+begin_src typescript
  `console.log(`
hello
world
!!`);
#+end_src
** anyを禁止する
#+begin_quote
TypeScriptのプロジェクトを作る時に必要なtsconfig.jsonにはこのany型の使
用を防ぐためのオプションとしてnoImplicitAnyがあります。既存の
JavaScriptのプロジェクトをTypeScriptに置き換えていくのではなく、スクラッ
チの状態からTypeScriptで作るのであればこの設定を入れるとよいでしょう。
#+end_quote
** 分割代入
#+begin_src typescript
  type TopSecret = {
    height: number;
    weight: number;
  };
  ​function bmi({height, weight}: TopSecret): number {
    const mHeight: number = height / 100.0;
    return weight / (mHeight ** 2);
  }

  bmi({height: 170, weight: 65});
  bmi({weight: 65, height: 170});
#+end_src
** タイプエイリアス
#+begin_src typescript
  type Person = {
    surname: string;
    givenname: string;
  };
  const person: Person = {
    surname: 'Faure',
    givenName: 'Gabriel'
  };

  type Parents = {
    mother: Person;
    father: Person;
  };
  type Family = {
    parents: Parents;
    children: Person[];
    grandparents: Parents[];
  }
  const family: Family = {...};
#+end_src
** オブジェクト内の関数定義
オブジェクトが持つメソッドの定義の方法。
#+begin_src typescript
  type A = {
    merge: (arg1: string, arg2: string) => string;
  };
  type B = {
    merge(arg1: string, arg2: string): string;
  }
#+end_src
** プリミティブ型タイプエイリアス
#+begin_src typescript
  type Surname = string;
  type GivenName = string;
  type Person = {
    surname: Surname;
    givenName: GivenName;
  }
#+end_src

#+begin_src typescript
  const surname: Surname = 'Faure';
  const givenName: GivenName = 'Gabriel';
  const person: Person = {
    surname: givenName,
    givenName: surname
  }
#+end_src

#+begin_src typescript
  type SystemSupportLanguage = 'en' | 'tr' | 'it' | 'es';
#+end_src

~?~ をつけると選択可。
#+begin_src typescript
  type = Person = {
    surname: string;
    middleName?: string;
    givenName: string;
  }
#+end_src

readonly
#+begin_src typescript
  type Person = {
    readOnly surname: string;
    givenName: string;
  };
#+end_src

入れ子までreadonlyにするわけではない。
** インデックス型
#+begin_src typescript
  type Butterfly = {
    [key: string] : string;
  };

  const butterflies: Butterfly = {
    en: 'Butterfly',
    fr: 'Papillon',
    it: 'Farfalla',
    es: 'Mariposa',
    de: 'Schmetterling'
  };
#+end_src
** Mapped type
#+begin_src typescript
  type SystemSupportLanguage = 'en' | 'fr' | 'it' | 'es';
#+end_src

#+begin_src typescript
  const butterflies: Butterfly = {
    en: 'Butterfly',
    fr: 'Papillon',
    it: 'Farfalla',
    es: 'Mariposa',
    de: 'Schmetterling'
  };
// deでエラーになる
#+end_src
** オブジェクト
#+begin_src typescript
  const pokemon = {
    name: 'pikachu',
    no: 25,
    genre: 'mouse pokemon',
    height: 0.4,
    weight: 6.0,
  };
#+end_src

オブジェクト型はプリミティブ型以外の総称。

#+begin_src typescript
  const pikachu: object = {
    name: 'pikachu',
    no: 25,
    genre: 'mouse pokemon',
    height: 0.4,
    weight: 6.0,
  };

  const pokemon: object = new Pokemon{
    'pikachu',
    25,
    'mouse pokemon',
    0.4,
    6.0
  };

  const increment: object = i => i + 1;
#+end_src

⚠object型を与えた変数はその変数の持っているプロパティ、メソッドに対してアクセスできない。

#+begin_src typescript
  pikachu.no;
  // error
#+end_src

オブジェクトのプロパティは上書き可能。readonlyにするなどが必要。
** 分割代入
#+begin_src typescript
  const {
    name,
    no,
    genre
  }: Wild = safari();
#+end_src
** タイプエイリアスとインターフェースのどちらを使うか
** インターフェース
* Tasks
* Reference
- Official documentation :: [[https://www.typescriptlang.org/docs/handbook/jsx.html#the-as-operator][TypeScript: Documentation - JSX]]
* Archives
