:properties:
:ID: 20240213T235930
:mtime:    20241103085159
:ctime:    20241028101410
:end:
#+title:      KDOC 94: 2>&1の意味
#+date:       [2024-02-13 Tue 23:59]
#+filetags:   :wiki:
#+identifier: 20240213T235930

* この文書のステータス
:LOGBOOK:
CLOCK: [2024-02-14 Wed 00:15]--[2024-02-14 Wed 00:40] =>  0:25
:END:
- 作成
  - [X] 2024-02-14 貴島
- レビュー
  - [X] 2024-02-18 貴島
* 概要
[[id:585d3b5e-989d-4363-bcc3-894402fcfcf9][Shell]]に、標準出力と標準エラーをまとめる ~2>&1~ という書き方がある。よくコマンドの実行結果を保存するのに使う。標準出力と、標準エラー出力をまとめて取り出せるとデバッグに便利である。よくわからずに使っていたので、記法の意味を分解して理解する。

* 動かしてみる

まず使い方をまとめ、実行して分解を試みる。

#+caption: 標準出力をファイルに出力できる
#+begin_src shell :results output
  result=`echo "hello" 2>&1`
  echo $result
#+end_src

#+RESULTS:
#+begin_src
hello
#+end_src

#+caption: 標準エラーをファイルに出力できる
#+begin_src shell :results output
  result=`aaa 2>&1`
  echo $result
#+end_src

#+RESULTS:
#+begin_src
/bin/bash: line 1: aaa: command not found
#+end_src

#+caption: &がないと1というファイルができてしまう。ファイルディスクリプタではなくファイルとして認識する
#+begin_src shell :results output
  result=`aaa 2>1`
  cat 1
#+end_src

#+RESULTS:
#+begin_src
/bin/bash: line 1: aaa: command not found
#+end_src

#+caption: これでも書ける
#+begin_src shell :results output
  result=`aaa 2>& 1`
  echo $result
#+end_src

#+RESULTS:
#+begin_src
/bin/bash: line 1: aaa: command not found
#+end_src

#+caption: > の前後にスペースがあるとsyntax errorになる
#+begin_src shell :results output
  result=`aaa 2> &1`
  echo $result
#+end_src

結論、 ~2>&~ はスペースを許容せずひと塊でないといけない。意味的にもひと塊になっているはずだが、意味のつながりがよくわからない。

* 調べる
:LOGBOOK:
CLOCK: [2024-02-14 Wed 00:40]--[2024-02-14 Wed 01:05] =>  0:25
:END:

[[https://qiita.com/task4233/items/1f5ba68e8fed430f6f9f][Bashのリダイレクト(`>`と`>&`)とパイプ等についてのまとめ #Bash - Qiita]]を見てみよう。

~>~ はリダイレクト記法である。空のファイルを生成して書き込む。書式は ~$ コマンド [元fd=1]> 先ファイル名~ となっている。ファイルディスクリプタ番号はデフォルトで1(標準出力)。

#+caption: 等価な2つの書き方
#+begin_src shell :results raw
  echo "hello1" > test.log
  cat test.log

  echo "hello2" 1> test.log
  cat test.log
#+end_src

#+RESULTS:
#+begin_src
hello1
hello2
#+end_src

#+caption: 標準エラー出力してみる
#+begin_src shell
  aaa 2> error.log
  cat error.log
#+end_src

#+RESULTS:
#+begin_src
/bin/bash: line 1: aaa: command not found
#+end_src

~>&~ は他のファイルディスクリプタにリダイレクトする。 ~$コマンド [元FD]>&[先FD]~ 。&がないとファイル書き込みになってしまう。つまり ~2>&1~ は標準エラー出力を標準出力にリダイレクトする。結果、標準出力に標準出力と標準エラー出力が表示できる。

#+caption: 標準出力できている
#+begin_src shell
  result=`echo hello 2>&1`
  echo $result
#+end_src

#+RESULTS:
#+begin_src
hello
#+end_src

#+caption: 標準エラー出力できている
#+begin_src shell
  result=`aaa 2>&1`
  echo $result
#+end_src

#+RESULTS:
#+begin_src
/bin/bash: line 1: aaa: command not found
#+end_src

リダイレクトをさらにリダイレクトできる。

#+caption: さらにaaa.logファイルに出力する
#+begin_src shell
  result=`echo hello 2>&1 > aaa.log`
  cat aaa.log
#+end_src

#+RESULTS:
#+begin_src
hello
#+end_src

#+caption: 捨てる
#+begin_src shell
  result=`echo hello 2>&1 > /dev/null`
  echo $result
#+end_src

#+RESULTS:
#+begin_src
#+end_src

以上より、 ~2>&~ がひと塊でないといけない理由。

- ~2>~ の数字はリダイレクト元ファイルディスクリプタ指定。 ~>~ は ~1>~ が省略されているだけで、1以外には ~2>~ と省略せずに書く必要がある。そもそもスペースは入れない記法である
- ~>&~ の ~&~ は続くリダイレクト先がファイルディスクリプタであることを示す。 ~>~ に続く識別子がファイル名でないのを区別するための記法なので、スペースを許容しないほうが意味が明確である。ファイル名は ~&~ がくる可能性があり、そのとき意味が不明瞭になる

* 参考
- [[https://qiita.com/task4233/items/1f5ba68e8fed430f6f9f][Bashのリダイレクト(`>`と`>&`)とパイプ等についてのまとめ #Bash - Qiita]]。わかりやすかった

* 関連
なし。
