:properties:
:ID: 20250902T225938
:mtime:    20250904002816
:ctime:    20250902225943
:end:
#+title:      KDOC 449: 32bitマシンでint64型を使うとどうなるのか?
#+date:       [2025-09-02 Tue 22:59]
#+filetags:   :draft:permanent:
#+identifier: 20250902T225938

# (kd/denote-kdoc-rename)
# (denote-rename-file-using-front-matter (buffer-file-name) 0)
# (save-excursion (while (re-search-backward ":draft" nil t) (replace-match "")))
# (flush-lines "^\\#\s.+?")

# ====ポリシー。
# 1ファイル1アイデア。
# 1ファイルで内容を完結させる。
# 常にほかのエントリとリンクする。
# 自分の言葉を使う。
# 参考文献を残しておく。
# 文献メモの場合は、感想と混ぜないこと。1つのアイデアに反する
# ツェッテルカステンの議論に寄与するか。それで本を書けと言われて書けるか
# 頭のなかやツェッテルカステンにある問いとどのようにかかわっているか
# エントリ間の接続を発見したら、接続エントリを追加する。カード間にあるリンクの関係を説明するカード。
# アイデアがまとまったらアウトラインエントリを作成する。リンクをまとめたエントリ。
# エントリを削除しない。古いカードのどこが悪いかを説明する新しいカードへのリンクを追加する。
# 恐れずにカードを追加する。無意味の可能性があっても追加しておくことが重要。
# 個人の感想・意思表明ではない。事実や書籍情報に基づいている

# ====永久保存メモのルール。
# 自分の言葉で書く。
# 後から読み返して理解できる。
# 他のメモと関連付ける。
# ひとつのメモにひとつのことだけを書く。
# メモの内容は1枚で完結させる。
# 論文の中に組み込み、公表できるレベルである。

# ====水準を満たす価値があるか。
# その情報がどういった文脈で使えるか。
# どの程度重要な情報か。
# そのページのどこが本当に必要な部分なのか。
# 公表できるレベルの洞察を得られるか

# ====フロー。
# 1. 「走り書きメモ」「文献メモ」を書く
# 2. 1日1回既存のメモを見て、自分自身の研究、思考、興味にどのように関係してくるかを見る
# 3. 追加すべきものだけ追加する

* この文書のステータス
- 作成
  - [X] 2025-10-12 貴島
- レビュー
  - [ ] <署名>
# (progn (kill-line -1) (insert (format "  - [X] %s 貴島" (format-time-string "%Y-%m-%d"))))

# チェックリスト ================
# 関連をつけた。
# タイトルがフォーマット通りにつけられている。
# 内容をブラウザに表示して読んだ(作成とレビューのチェックは同時にしない)。
# 文脈なく読めるのを確認した。
# おばあちゃんに説明できる。
# いらない見出しを削除した。
# タグを適切にした。
# すべてのコメントを削除した。
* 概要
# 本文(見出しも設定する)

32bitマシンだとレジスタに入り切らないため1度に処理できず、スタックを使う想定だが、正しいだろうか。レジスタよりサイズが大きい場合にどう扱うか、ともいえる。

アセンブラを見る。

#+caption: 32bit
#+begin_src shell :results output
  tmpfile=$(mktemp /tmp/tmp.XXXXXX.c)

  cat > $tmpfile <<EOF
    #include <stdio.h>

    int main() {
        long long a = 1234567890123;
        int b = 42;
        printf("%lld %d\n", a, b);
        return 0;
    }
  EOF

  docker run --rm -v /tmp:/tmp -w /tmp i386/ubuntu bash -c "apt update -y && apt install -y build-essential && gcc -m32 -S $tmpfile -o 32.s && cat 32.s"

  rm $tmpfile
#+end_src

#+caption: 64bit
#+begin_src shell :results output
    tmpfile=$(mktemp /tmp/tmp.XXXXXX.c)

    cat > $tmpfile <<EOF
      #include <stdio.h>

      int main() {
          long long a = 1234567890123;
          int b = 42;
          printf("%lld %d\n", a, b);
          return 0;
      }
    EOF
    gcc -S $tmpfile -o /tmp/64.s

    rm $tmpfile
#+end_src

#+begin_src shell :wrap export diff
  cat /tmp/32.s
  cat /tmp/64.s
  diff /tmp/32.s /tmp/64.s
#+end_src

#+RESULTS:
#+begin_export diff
	.file	"tmp.Q8B7li.c"
	.text
	.section	.rodata
.LC0:
	.string	"%lld %d\n"
	.text
	.globl	main
	.type	main, @function
main:
.LFB0:
	.cfi_startproc
	leal	4(%esp), %ecx
	.cfi_def_cfa 1, 0
	andl	$-16, %esp
	pushl	-4(%ecx)
	pushl	%ebp
	.cfi_escape 0x10,0x5,0x2,0x75,0
	movl	%esp, %ebp
	pushl	%ebx
	pushl	%ecx
	.cfi_escape 0xf,0x3,0x75,0x78,0x6
	.cfi_escape 0x10,0x3,0x2,0x75,0x7c
	subl	$16, %esp
	call	__x86.get_pc_thunk.ax
	addl	$_GLOBAL_OFFSET_TABLE_, %eax
	movl	$1912276171, -16(%ebp)
	movl	$287, -12(%ebp)
	movl	$42, -20(%ebp)
	pushl	-20(%ebp)
	pushl	-12(%ebp)
	pushl	-16(%ebp)
	leal	.LC0@GOTOFF(%eax), %edx
	pushl	%edx
	movl	%eax, %ebx
	call	printf@PLT
	addl	$16, %esp
	movl	$0, %eax
	leal	-8(%ebp), %esp
	popl	%ecx
	.cfi_restore 1
	.cfi_def_cfa 1, 0
	popl	%ebx
	.cfi_restore 3
	popl	%ebp
	.cfi_restore 5
	leal	-4(%ecx), %esp
	.cfi_def_cfa 4, 4
	ret
	.cfi_endproc
.LFE0:
	.size	main, .-main
	.section	.text.__x86.get_pc_thunk.ax,"axG",@progbits,__x86.get_pc_thunk.ax,comdat
	.globl	__x86.get_pc_thunk.ax
	.hidden	__x86.get_pc_thunk.ax
	.type	__x86.get_pc_thunk.ax, @function
__x86.get_pc_thunk.ax:
.LFB1:
	.cfi_startproc
	movl	(%esp), %eax
	ret
	.cfi_endproc
.LFE1:
	.ident	"GCC: (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0"
	.section	.note.GNU-stack,"",@progbits
	.file	"tmp.wWxeed.c"
	.text
	.section	.rodata
.LC0:
	.string	"%lld %d\n"
	.text
	.globl	main
	.type	main, @function
main:
.LFB0:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movabsq	$1234567890123, %rax
	movq	%rax, -8(%rbp)
	movl	$42, -12(%rbp)
	movl	-12(%rbp), %edx
	movq	-8(%rbp), %rax
	movq	%rax, %rsi
	leaq	.LC0(%rip), %rax
	movq	%rax, %rdi
	movl	$0, %eax
	call	printf@PLT
	movl	$0, %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE0:
	.size	main, .-main
	.ident	"GCC: (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:
1c1
< 	.file	"tmp.Q8B7li.c"
---
> 	.file	"tmp.wWxeed.c"
12,34c12,27
< 	leal	4(%esp), %ecx
< 	.cfi_def_cfa 1, 0
< 	andl	$-16, %esp
< 	pushl	-4(%ecx)
< 	pushl	%ebp
< 	.cfi_escape 0x10,0x5,0x2,0x75,0
< 	movl	%esp, %ebp
< 	pushl	%ebx
< 	pushl	%ecx
< 	.cfi_escape 0xf,0x3,0x75,0x78,0x6
< 	.cfi_escape 0x10,0x3,0x2,0x75,0x7c
< 	subl	$16, %esp
< 	call	__x86.get_pc_thunk.ax
< 	addl	$_GLOBAL_OFFSET_TABLE_, %eax
< 	movl	$1912276171, -16(%ebp)
< 	movl	$287, -12(%ebp)
< 	movl	$42, -20(%ebp)
< 	pushl	-20(%ebp)
< 	pushl	-12(%ebp)
< 	pushl	-16(%ebp)
< 	leal	.LC0@GOTOFF(%eax), %edx
< 	pushl	%edx
< 	movl	%eax, %ebx
---
> 	endbr64
> 	pushq	%rbp
> 	.cfi_def_cfa_offset 16
> 	.cfi_offset 6, -16
> 	movq	%rsp, %rbp
> 	.cfi_def_cfa_register 6
> 	subq	$16, %rsp
> 	movabsq	$1234567890123, %rax
> 	movq	%rax, -8(%rbp)
> 	movl	$42, -12(%rbp)
> 	movl	-12(%rbp), %edx
> 	movq	-8(%rbp), %rax
> 	movq	%rax, %rsi
> 	leaq	.LC0(%rip), %rax
> 	movq	%rax, %rdi
> 	movl	$0, %eax
36d28
< 	addl	$16, %esp
38,47c30,31
< 	leal	-8(%ebp), %esp
< 	popl	%ecx
< 	.cfi_restore 1
< 	.cfi_def_cfa 1, 0
< 	popl	%ebx
< 	.cfi_restore 3
< 	popl	%ebp
< 	.cfi_restore 5
< 	leal	-4(%ecx), %esp
< 	.cfi_def_cfa 4, 4
---
> 	leave
> 	.cfi_def_cfa 7, 8
52,63c36
< 	.section	.text.__x86.get_pc_thunk.ax,"axG",@progbits,__x86.get_pc_thunk.ax,comdat
< 	.globl	__x86.get_pc_thunk.ax
< 	.hidden	__x86.get_pc_thunk.ax
< 	.type	__x86.get_pc_thunk.ax, @function
< __x86.get_pc_thunk.ax:
< .LFB1:
< 	.cfi_startproc
< 	movl	(%esp), %eax
< 	ret
< 	.cfi_endproc
< .LFE1:
< 	.ident	"GCC: (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0"
---
> 	.ident	"GCC: (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0"
64a38,53
> 	.section	.note.gnu.property,"a"
> 	.align 8
> 	.long	1f - 0f
> 	.long	4f - 1f
> 	.long	5
> 0:
> 	.string	"GNU"
> 1:
> 	.align 8
> 	.long	0xc0000002
> 	.long	3f - 2f
> 2:
> 	.long	0x3
> 3:
> 	.align 8
> 4:
#+end_export

* 関連
# 関連するエントリ。なぜ関連させたか理由を書く。意味のあるつながりを意識的につくる。
# - この事実は自分のこのアイデアとどう整合するか。
# - この現象はあの理論でどう説明できるか。
# - ふたつのアイデアは互いに矛盾するか、互いを補っているか。
# - いま聞いた内容は以前に聞いたことがなかったか。
# - メモ y についてメモ x はどういう意味か。
# - 対立する
# - 修正する
# - 補足する
# - 付け加えるもの
# - アイデア同士を組み合わせて新しいものを生み出せないか
# - どんな疑問が浮かんだか
なし。
