:properties:
:ID: 20240715T214607
:end:
#+title:      KDOC 201: スクリーンルーラーを作る
#+date:       [2024-07-15 Mon 21:46]
#+filetags:   :draft:memo:
#+identifier: 20240715T214607

# (denote-rename-file-using-front-matter (buffer-file-name) 0)
# (save-excursion (while (re-search-backward ":draft" nil t) (replace-match "")))
# (flush-lines "^\\#\s.+?")

# ====ポリシー。
# 1ファイル1アイデア。
# 1ファイルで内容を完結させる。
# 常にほかのエントリとリンクする。
# 自分の言葉を使う。
# 参考文献を残しておく。
# 文献メモの場合は、感想と混ぜないこと。1つのアイデアに反する
# ツェッテルカステンの議論に寄与するか
# 頭のなかやツェッテルカステンにある問いとどのようにかかわっているか
# エントリ間の接続を発見したら、接続エントリを追加する。カード間にあるリンクの関係を説明するカード。
# アイデアがまとまったらアウトラインエントリを作成する。リンクをまとめたエントリ。
# エントリを削除しない。古いカードのどこが悪いかを説明する新しいカードへのリンクを追加する。
# 恐れずにカードを追加する。無意味の可能性があっても追加しておくことが重要。

# ====永久保存メモのルール。
# 自分の言葉で書く。
# 後から読み返して理解できる。
# 他のメモと関連付ける。
# ひとつのメモにひとつのことだけを書く。
# メモの内容は1枚で完結させる。
# 論文の中に組み込み、公表できるレベルである。

# ====価値があるか。
# その情報がどういった文脈で使えるか。
# どの程度重要な情報か。
# そのページのどこが本当に必要な部分なのか。

* この文書のステータス
- 作成
  - [X] <署名>
# (progn (kill-line -1) (insert (format "  - [X] %s 貴島" (format-time-string "%Y-%m-%d"))))
- レビュー
  - [ ] <署名>
# (progn (kill-line -1) (insert (format "  - [X] %s 貴島" (format-time-string "%Y-%m-%d"))))

# 関連をつけた。
# タイトルがフォーマット通りにつけられている。
# 内容をブラウザに表示して読んだ(作成とレビューのチェックは同時にしない)。
# 文脈なく読めるのを確認した。
# おばあちゃんに説明できる。
# いらない見出しを削除した。
# タグを適切にした。
# すべてのコメントを削除した。
* 概要
スクリーンルーラーを作る。

- [[https://github.com/kijimaD/xruler][kijimaD/xruler]]

* Tasks
** TODO イベントループを使う
ルーラー追従を、単純なループにsleepを入れて実装していてすごいダサい。カーソルイベントを受け取って同期したい。
** DONE 動作するようにする
CLOSED: [2024-07-15 Mon 21:46]
:LOGBOOK:
CLOCK: [2024-07-15 Mon 18:19]--[2024-07-15 Mon 18:44] =>  0:25
CLOCK: [2024-07-15 Mon 17:48]--[2024-07-15 Mon 18:13] =>  0:25
CLOCK: [2024-07-15 Mon 17:04]--[2024-07-15 Mon 17:29] =>  0:25
CLOCK: [2024-07-15 Mon 16:09]--[2024-07-15 Mon 16:34] =>  0:25
CLOCK: [2024-07-15 Mon 11:50]--[2024-07-15 Mon 12:15] =>  0:25
CLOCK: [2024-07-15 Mon 11:14]--[2024-07-15 Mon 11:39] =>  0:25
CLOCK: [2024-07-15 Mon 10:47]--[2024-07-15 Mon 11:12] =>  0:25
CLOCK: [2024-07-15 Mon 10:22]--[2024-07-15 Mon 10:47] =>  0:25
CLOCK: [2024-07-15 Mon 09:57]--[2024-07-15 Mon 10:22] =>  0:25
CLOCK: [2024-07-14 Sun 17:49]--[2024-07-14 Sun 18:14] =>  0:25
CLOCK: [2024-07-14 Sun 17:19]--[2024-07-14 Sun 17:44] =>  0:25
CLOCK: [2024-07-14 Sun 16:39]--[2024-07-14 Sun 17:04] =>  0:25
CLOCK: [2024-07-14 Sun 16:05]--[2024-07-14 Sun 16:30] =>  0:25
CLOCK: [2024-07-14 Sun 15:38]--[2024-07-14 Sun 16:03] =>  0:25
CLOCK: [2024-07-14 Sun 15:13]--[2024-07-14 Sun 15:38] =>  0:25
CLOCK: [2024-07-14 Sun 14:37]--[2024-07-14 Sun 15:02] =>  0:25
CLOCK: [2024-07-14 Sun 14:11]--[2024-07-14 Sun 14:36] =>  0:25
CLOCK: [2024-07-14 Sun 13:46]--[2024-07-14 Sun 14:11] =>  0:25
CLOCK: [2024-07-14 Sun 13:19]--[2024-07-14 Sun 13:44] =>  0:25
CLOCK: [2024-07-14 Sun 12:20]--[2024-07-14 Sun 12:45] =>  0:25
CLOCK: [2024-07-14 Sun 11:51]--[2024-07-14 Sun 12:16] =>  0:25
CLOCK: [2024-07-14 Sun 11:10]--[2024-07-14 Sun 11:35] =>  0:25
CLOCK: [2024-07-14 Sun 10:36]--[2024-07-14 Sun 11:01] =>  0:25
CLOCK: [2024-07-14 Sun 00:06]--[2024-07-14 Sun 00:31] =>  0:25
CLOCK: [2024-07-13 Sat 23:40]--[2024-07-14 Sun 00:05] =>  0:25
CLOCK: [2024-07-13 Sat 23:15]--[2024-07-13 Sat 23:40] =>  0:25
CLOCK: [2024-07-13 Sat 22:34]--[2024-07-13 Sat 22:59] =>  0:25
CLOCK: [2024-07-13 Sat 18:38]--[2024-07-13 Sat 19:03] =>  0:25
CLOCK: [2024-07-13 Sat 18:13]--[2024-07-13 Sat 18:38] =>  0:25
CLOCK: [2024-07-13 Sat 11:17]--[2024-07-13 Sat 11:42] =>  0:25
:END:
[[https://github.com/swillner/highlight-pointer][swillner/highlight-pointer]]的な感じで自作したい。

- 極小のウィンドウを作って、それをカーソル周辺に描画しているように見える

#+caption: この部分がないとクリックできなくなる
#+begin_src C
  XRectangle rect;
  XserverRegion region = XFixesCreateRegion(dpy, &rect, 1);
  XFixesSetWindowShapeRegion(dpy, win, ShapeInput, 0, 0, region);
  XFixesDestroyRegion(dpy, region);
#+end_src

#+caption: ウィンドウを動かしている部分
#+begin_src git-permalink
https://github.com/swillner/highlight-pointer/blob/32bf4c60696a4764e8060574ca3031f4fb4ca20d/highlight-pointer.c#L353-L357
#+end_src

#+RESULTS:
#+begin_results
                        } else if (highlight_visible) {
                            get_pointer_position(&x, &y);
                            XMoveWindow(dpy, win, x - total_radius - 1, y - total_radius - 1);
                            /* unfortunately, this causes increase of the X server's cpu usage */
                        }
#+end_results

#+caption: ここで背景を透明にしている。ないとハイライトまわりが白くなる
#+begin_src git-permalink
https://github.com/swillner/highlight-pointer/blob/32bf4c60696a4764e8060574ca3031f4fb4ca20d/highlight-pointer.c#L155
#+end_src

#+RESULTS:
#+begin_results
static void set_window_mask() {
#+end_results

#+caption: カーソルを描画している
#+begin_src git-permalink
https://github.com/swillner/highlight-pointer/blob/32bf4c60696a4764e8060574ca3031f4fb4ca20d/highlight-pointer.c#L245-L253
#+end_src

#+RESULTS:
#+begin_results
static void redraw() {
    XSetForeground(dpy, gc, button_pressed ? pressed_color.pixel : released_color.pixel);
    if (options.outline) {
        XSetLineAttributes(dpy, gc, options.outline, LineSolid, CapButt, JoinBevel);
        XDrawArc(dpy, win, gc, options.outline, options.outline, 2 * options.radius + 1, 2 * options.radius + 1, 0, 360 * 64);
    } else {
        XFillArc(dpy, win, gc, options.outline, options.outline, 2 * options.radius + 1, 2 * options.radius + 1, 0, 360 * 64);
    }
}
#+end_results

#+caption: これがないと枠すら表示されない。移動したときのイベントで何か処理をしているのか
#+begin_src git-permalink
https://github.com/swillner/highlight-pointer/blob/32bf4c60696a4764e8060574ca3031f4fb4ca20d/highlight-pointer.c#L130-L146
#+end_src

#+RESULTS:
#+begin_results
static int init_events() {
    XIEventMask events;
    unsigned char mask[(XI_LASTEVENT + 7) / 8];
    memset(mask, 0, sizeof(mask));

    XISetMask(mask, XI_RawButtonPress);
    XISetMask(mask, XI_RawButtonRelease);
    XISetMask(mask, XI_RawMotion);

    events.deviceid = XIAllMasterDevices;
    events.mask = mask;
    events.mask_len = sizeof(mask);

    XISelectEvents(dpy, root, &events, 1);

    return 0;
}
#+end_results

- イベントマスクとは、特定のイベントが発生したときに通知を受け取るための機構。一般的に、イベントマスクはビットマスクとして表現され、各ビットが特定のイベントタイプに対応している

#+caption: ここをコメントアウトするとカーソルが何も表示されなくなる。カーソルのある点で描画しているのはこいつか
#+begin_src git-permalink
https://github.com/swillner/highlight-pointer/blob/32bf4c60696a4764e8060574ca3031f4fb4ca20d/highlight-pointer.c#L115-L123
#+end_src

#+RESULTS:
#+begin_results
static void show_highlight() {
    int x, y;
    int total_radius = options.radius + options.outline;
    get_pointer_position(&x, &y);
    XMoveWindow(dpy, win, x - total_radius - 1, y - total_radius - 1);
    XMapWindow(dpy, win);
    redraw();
    highlight_visible = 1;
}
#+end_results

- 新しく作成されるウィンドウはウィンドウマネージャによって制御されず、直接画面に表示される

#+caption: クセのあるシグネチャ
#+begin_src git-permalink
func (w *Window) Create(parent xproto.Window, x, y, width, height,
	valueMask int, valueList ...uint32) {
#+end_src

- valueMaskで、ビット形式で指定したマスクに対して、可変長引数の値を設定していく
- xfixesで対象領域のクリックを無視する

#+caption: xfixesを実行すると出るエラー。原因がわからない
#+begin_src
BadRequest {NiceName: Request, Sequence: 2, BadValue: 0, MinorOpcode: 5, MajorOpcode: 138}
exit status 1
#+end_src

#+caption: コード一覧
#+begin_src shell
xdpyinfo -queryExtensions | grep opcode
#+end_src

#+RESULTS:
#+begin_results
    BIG-REQUESTS  (opcode: 133)
    Composite  (opcode: 142)
    DAMAGE  (opcode: 143, base event: 91, base error: 152)
    DOUBLE-BUFFER  (opcode: 145, base error: 153)
    DPMS  (opcode: 147)
    DRI2  (opcode: 155, base event: 119)
    DRI3  (opcode: 149)
    GLX  (opcode: 152, base event: 95, base error: 158)
    Generic Event Extension  (opcode: 128)
    MIT-SCREEN-SAVER  (opcode: 144, base event: 92)
    MIT-SHM  (opcode: 130, base event: 65, base error: 128)
    Present  (opcode: 148)
    RANDR  (opcode: 140, base event: 89, base error: 147)
    RECORD  (opcode: 146, base error: 154)
    RENDER  (opcode: 139, base error: 142)
    SECURITY  (opcode: 137, base event: 86, base error: 138)
    SHAPE  (opcode: 129, base event: 64)
    SYNC  (opcode: 134, base event: 83, base error: 134)
    X-Resource  (opcode: 150)
    XC-MISC  (opcode: 136)
    XFIXES  (opcode: 138, base event: 87, base error: 140)
    XFree86-DGA  (opcode: 154, base event: 112, base error: 179)
    XFree86-VidModeExtension  (opcode: 153, base error: 172)
    XINERAMA  (opcode: 141)
    XInputExtension  (opcode: 131, base event: 66, base error: 129)
    XKEYBOARD  (opcode: 135, base event: 85, base error: 137)
    XTEST  (opcode: 132)
    XVideo  (opcode: 151, base event: 93, base error: 155)
#+end_results

- コードは138で、 ~XFIXES~ である。ここからは何もわからない

  #+caption: xwindowのログを出す
#+begin_src sh
xtrace -o output.log ./xpoint
#+end_src

#+caption: エラー周辺のログ
#+begin_src
001:<:0003: 16: XFIXES-Request(138,5): CreateRegion region=0x05600001 rectangles={x=0 y=0 w=0 h=0};
001:<:0004:  4: Request(43): GetInputFocus
001:>:0003:Error 1=Request: major=138, minor=5, bad=0x00000000, seq=0003
#+end_src

#+caption: 正常なプログラム
#+begin_src
000:<:0009: 12: XFIXES-Request(138,0): QueryVersion major version=6 minor version=0
000:>:0009:32: Reply to QueryVersion: major version=6 minor version=0
000:<:000a: 16: XFIXES-Request(138,5): CreateRegion region=0x05400002 rectangles={x=0 y=0 w=0 h=0};
000:<:000b: 20: XFIXES-Request(138,21): SetWindowShapeRegion window=0x05400001 kind=Input(0x02) x offset=0 y offset=0 region=0x05400002
000:<:000c:  8: XFIXES-Request(138,10): DestroyRegion region=0x05400002
000:<:000d: 24: Request(98): QueryExtension name='XInputExtension'
#+end_src

- 正常なプログラムではXFIXESがまとまって存在しているが、エラーが起きるコードでは見知らぬGetInputFocusが混じっている。こいつがうまくいっていない可能性がある
- なぜか先にバージョンを確認すると動作するようになった
** DONE 透明度を設定する
CLOSED: [2024-07-15 Mon 21:46]
:LOGBOOK:
CLOCK: [2024-07-15 Mon 19:59]--[2024-07-15 Mon 20:24] =>  0:25
CLOCK: [2024-07-15 Mon 19:19]--[2024-07-15 Mon 19:44] =>  0:25
CLOCK: [2024-07-15 Mon 18:46]--[2024-07-15 Mon 19:11] =>  0:25
:END:
半透明にする。

- comptonが起動してないと透明にならない
- X Window Systemは透明の表示をサポートしてない。受け取れるが描画はできない
- comptonはコンポジットマネージャ。コンポジットマネージャはウィンドウを描画し合成する責任を持つ
** DONE コード整理する
CLOSED: [2024-07-18 Thu 00:54]
:LOGBOOK:
CLOCK: [2024-07-17 Wed 00:37]--[2024-07-17 Wed 01:02] =>  0:25
CLOCK: [2024-07-17 Wed 00:07]--[2024-07-17 Wed 00:32] =>  0:25
CLOCK: [2024-07-16 Tue 23:42]--[2024-07-17 Wed 00:07] =>  0:25
CLOCK: [2024-07-15 Mon 23:13]--[2024-07-15 Mon 23:38] =>  0:25
CLOCK: [2024-07-15 Mon 22:46]--[2024-07-15 Mon 23:11] =>  0:25
CLOCK: [2024-07-15 Mon 22:20]--[2024-07-15 Mon 22:45] =>  0:25
CLOCK: [2024-07-15 Mon 21:46]--[2024-07-15 Mon 22:11] =>  0:25
:END:
きれいにする。
* 関連
# 関連するエントリ。なぜ関連させたか理由を書く。意味のあるつながりを意識的につくる。
# この事実は自分のこのアイデアとどう整合するか。
# この現象はあの理論でどう説明できるか。
# ふたつのアイデアは互いに矛盾するか、互いを補っているか。
# いま聞いた内容は以前に聞いたことがなかったか。
# メモ y についてメモ x はどういう意味か。
なし。
