:properties:
:ID: 20240824T173305
:end:
#+title:      KDOC 225: mallocをアセンブラで見る
#+date:       [2024-08-24 Sat 17:33]
#+filetags:   code
#+identifier: 20240824T173305

* この文書のステータス
- 作成
  - [X] 2024-09-09 貴島
- レビュー
  - [X] 2024-09-14 貴島

* 概要
mallocは[[id:656a0aa4-e5d3-416f-82d5-f909558d0639][C言語]]の標準ライブラリの関数である。動的にメモリ確保する。

これはメモリ管理をプログラマー自身がやるための機能であって、コンパイル時にメモリサイズを決定している方法から外れる。だからアセンブラを見てもmallocが何をしているかはわからない。ただ関数呼び出しをしているのしかわからない。

#+begin_export html
<iframe width="800px" height="200px" src="https://godbolt.org/e#g:!((g:!((g:!((h:codeEditor,i:(filename:'1',fontScale:14,fontUsePx:'0',j:1,lang:___c,selection:(endColumn:14,endLineNumber:5,positionColumn:14,positionLineNumber:5,selectionStartColumn:14,selectionStartLineNumber:5,startColumn:14,startLineNumber:5),source:'%23include+%3Cstdlib.h%3E%0A%0Aint+main()+%7B++++%0A++++int+*p+%3D+(int*)malloc(sizeof(int)*100)%3B%0A++++free+(p)%3B%0A%7D'),l:'5',n:'1',o:'C+source+%231',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0'),(g:!((h:compiler,i:(compiler:rv32-cgcctrunk,filters:(b:'0',binary:'1',binaryObject:'1',commentOnly:'0',debugCalls:'1',demangle:'0',directives:'0',execute:'1',intel:'1',libraryCode:'0',trim:'0',verboseDemangling:'0'),flagsViewOpen:'1',fontScale:14,fontUsePx:'0',j:1,lang:___c,libs:!(),options:'',overrides:!(),selection:(endColumn:1,endLineNumber:1,positionColumn:1,positionLineNumber:1,selectionStartColumn:1,selectionStartLineNumber:1,startColumn:1,startLineNumber:1),source:1),l:'5',n:'0',o:'+RISC-V+(32-bits)+gcc+(trunk)+(Editor+%231)',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0')),l:'2',n:'0',o:'',t:'0')),version:4"></iframe>
#+end_export

- [[https://ja.wikipedia.org/wiki/Malloc][malloc - Wikipedia]]
- [[https://ja.wikipedia.org/wiki/%E5%8B%95%E7%9A%84%E3%83%A1%E3%83%A2%E3%83%AA%E7%A2%BA%E4%BF%9D][動的メモリ確保 - Wikipedia]]

通常の変数はコールスタック上に展開される。コンパイル時に、メモリ上に展開するサイズが決定している。必要なサイズが実行時でないとわからないようなケースでは、これは都合がよくない。それにスタック構造を超えて保持しておくということもできない。その解決策として、mallocによってヒープ領域のメモリを使う。

ヒープのポイント。

- 動的に、好きなメモリサイズを確保できる
- 破棄しない限り保持し続ける

* 関連
なし。
