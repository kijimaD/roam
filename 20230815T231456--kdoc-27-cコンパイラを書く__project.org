:properties:
:ID: 20230815T231456
:mtime:    20241111171256
:ctime:    20241028101410
:end:
#+title:      KDOC 27: Cコンパイラを書く
#+date:       [2023-08-15 Tue 23:14]
#+filetags:   :project:
#+identifier: 20230815T231456

* この文書のステータス
- [X] 作成
- [X] レビュー
* CLOSE プロジェクトステータス
CLOSED: [2024-11-11 Mon 12:55]

プロジェクトは終了である。

未完成で放置した。

* 概要
[[id:6cbcac25-a12b-47c0-8183-62d18799835d][compiler]]を作成する。自作言語だとだるくなるので、[[id:656a0aa4-e5d3-416f-82d5-f909558d0639][C言語]]の言語仕様でコンパイラを作る。

- 8ccを参考にする。アセンブラの部分が参考になる
- いきなりGoを書いているけど、いったん理解してからがいい感じがする...
- パーサーとかレキサーを他から持ってきているので、乖離していく
- ちょっとずつ進めること、動作テストコードを書く。各コミットでテストがあるので、追いつくことはできる
- まだ1文しか考えなくてよい
* 導入
背景。
* Tasks
** TODO 8ccを読む
:LOGBOOK:
CLOCK: [2023-09-02 Sat 21:13]--[2023-09-02 Sat 21:38] =>  0:25
CLOCK: [2023-09-02 Sat 20:38]--[2023-09-02 Sat 21:03] =>  0:25
CLOCK: [2023-09-02 Sat 20:13]--[2023-09-02 Sat 20:38] =>  0:25
CLOCK: [2023-08-26 Sat 10:55]--[2023-08-26 Sat 11:20] =>  0:25
CLOCK: [2023-08-26 Sat 10:30]--[2023-08-26 Sat 10:55] =>  0:25
CLOCK: [2023-08-25 Fri 22:37]--[2023-08-25 Fri 23:02] =>  0:25
CLOCK: [2023-08-25 Fri 21:36]--[2023-08-25 Fri 22:01] =>  0:25
CLOCK: [2023-08-25 Fri 20:42]--[2023-08-25 Fri 21:07] =>  0:25
CLOCK: [2023-08-25 Fri 20:16]--[2023-08-25 Fri 20:41] =>  0:25
CLOCK: [2023-08-24 Thu 23:16]--[2023-08-24 Thu 23:41] =>  0:25
CLOCK: [2023-08-22 Tue 17:43]--[2023-08-22 Tue 18:08] =>  0:25
CLOCK: [2023-08-11 Fri 17:44]--[2023-08-11 Fri 18:09] =>  0:25
CLOCK: [2023-08-11 Fri 17:15]--[2023-08-11 Fri 17:40] =>  0:25
CLOCK: [2023-08-11 Fri 16:17]--[2023-08-11 Fri 16:42] =>  0:25
CLOCK: [2023-08-11 Fri 15:24]--[2023-08-11 Fri 15:50] =>  0:26
CLOCK: [2023-08-11 Fri 14:43]--[2023-08-11 Fri 15:08] =>  0:25
CLOCK: [2023-08-11 Fri 14:18]--[2023-08-11 Fri 14:43] =>  0:25
CLOCK: [2023-08-09 Wed 23:58]--[2023-08-10 Thu 00:23] =>  0:25
CLOCK: [2023-08-09 Wed 22:52]--[2023-08-09 Wed 23:17] =>  0:25
CLOCK: [2023-08-09 Wed 22:21]--[2023-08-09 Wed 22:46] =>  0:25
CLOCK: [2023-08-09 Wed 21:25]--[2023-08-09 Wed 21:50] =>  0:25
CLOCK: [2023-08-05 Sat 16:59]--[2023-08-05 Sat 17:24] =>  0:25
CLOCK: [2023-07-30 Sun 11:02]--[2023-07-30 Sun 11:27] =>  0:25
CLOCK: [2023-07-30 Sun 10:29]--[2023-07-30 Sun 10:54] =>  0:25
CLOCK: [2023-07-29 Sat 23:03]--[2023-07-29 Sat 23:28] =>  0:25
CLOCK: [2023-07-29 Sat 22:33]--[2023-07-29 Sat 22:58] =>  0:25
:END:

まず全体像を把握する。
** TODO 終端のチェックをやる
セミコロンをチェックする。
** TODO 変数宣言まわりで式の評価順が間違っているのを直す
:LOGBOOK:
CLOCK: [2023-08-15 Tue 23:50]--[2023-08-16 Wed 00:15] =>  0:25
CLOCK: [2023-08-15 Tue 21:25]--[2023-08-15 Tue 21:50] =>  0:25
:END:

なぜか違う値になる。

#+caption: 期待している答えは3だが、4が返ってくる
#+begin_src shell
echo 'int a = 1;a+2' | go run ./main.go > gogo.s
#+end_src

#+caption: 変数を使ってコンパイルしたほう。4は誤っている
#+begin_src asm
.text
	.global mymain
mymain:
	mov $1, %eax
	mov %eax, -4(%rbp)
	mov $2, %eax
	push %rax
	mov %eax, -4(%rbp)
	pop %rbx
	add %ebx, %eax
	ret
#+end_src

#+caption: 変数を使わずにコンパイルした場合。正しく3になる
#+begin_export asm
.text
	.global mymain
mymain:
	mov $2, %eax
	push %rax
	mov $1, %eax
	pop %rbx
	add %ebx, %eax
	ret
#+end_export
** TODO identの許容文字を明示する
小文字、大文字、アンダースコアのみにする。
* Archives
** DONE 関数呼び出しを実装する
CLOSED: [2023-08-23 Wed 00:14]
:LOGBOOK:
CLOCK: [2023-08-22 Tue 23:27]--[2023-08-22 Tue 23:52] =>  0:25
CLOCK: [2023-08-22 Tue 22:51]--[2023-08-22 Tue 23:16] =>  0:25
CLOCK: [2023-08-22 Tue 22:03]--[2023-08-22 Tue 22:28] =>  0:25
CLOCK: [2023-08-22 Tue 21:38]--[2023-08-22 Tue 22:03] =>  0:25
CLOCK: [2023-08-22 Tue 21:13]--[2023-08-22 Tue 21:38] =>  0:25
CLOCK: [2023-08-22 Tue 20:42]--[2023-08-22 Tue 21:07] =>  0:25
CLOCK: [2023-08-22 Tue 20:17]--[2023-08-22 Tue 20:42] =>  0:25
CLOCK: [2023-08-22 Tue 19:23]--[2023-08-22 Tue 19:48] =>  0:25
CLOCK: [2023-08-22 Tue 18:57]--[2023-08-22 Tue 19:22] =>  0:25
CLOCK: [2023-08-22 Tue 18:32]--[2023-08-22 Tue 18:57] =>  0:25
:END:

関数定義は後でやる。
** DONE charを実装する
CLOSED: [2023-08-23 Wed 22:17]
:LOGBOOK:
CLOCK: [2023-08-23 Wed 21:52]--[2023-08-23 Wed 22:17] =>  0:25
CLOCK: [2023-08-23 Wed 20:48]--[2023-08-23 Wed 21:13] =>  0:25
CLOCK: [2023-08-23 Wed 20:00]--[2023-08-23 Wed 20:25] =>  0:25
:END:
文字列と同じ感じでいけそう。
** DONE 文字列のテスト落ちを直す
CLOSED: [2023-08-16 Wed 10:10]
:LOGBOOK:
CLOCK: [2023-08-15 Tue 23:17]--[2023-08-15 Tue 23:42] =>  0:25
:END:

テスト用のCの関数がintを返すようになっているから、文字列は返せないんだな。8ccではASTで文字列を返すようになっているので、同じ感じにする。
** DONE identを直す
CLOSED: [2023-08-15 Tue 21:24]
:LOGBOOK:
CLOCK: [2023-08-15 Tue 20:42]--[2023-08-15 Tue 21:07] =>  0:25
CLOCK: [2023-08-15 Tue 20:16]--[2023-08-15 Tue 20:41] =>  0:25
:END:

envが初期状態のままになっているようだ。分岐の箇所を間違っていた。
** DONE stringを直す
CLOSED: [2023-08-15 Tue 20:13]
:LOGBOOK:
CLOCK: [2023-08-15 Tue 19:47]--[2023-08-15 Tue 20:12] =>  0:25
CLOCK: [2023-08-15 Tue 00:32]--[2023-08-15 Tue 00:57] =>  0:25
CLOCK: [2023-08-15 Tue 00:07]--[2023-08-15 Tue 00:32] =>  0:25
:END:
データラベルが必要。
** DONE 文字列テストを書き直す
CLOSED: [2023-08-24 Thu 22:40]
:LOGBOOK:
CLOCK: [2023-08-24 Thu 22:06]--[2023-08-24 Thu 22:31] =>  0:25
CLOCK: [2023-08-24 Thu 21:41]--[2023-08-24 Thu 22:06] =>  0:25
CLOCK: [2023-08-24 Thu 21:16]--[2023-08-24 Thu 21:41] =>  0:25
:END:
printf関数を使って文字列テストをやる。
** DONE lexerまわりのリファクタ
CLOSED: [2023-08-25 Fri 20:11]
:LOGBOOK:
CLOCK: [2023-08-24 Thu 22:40]--[2023-08-24 Thu 23:05] =>  0:25
:END:
細かいやつ。
** CLOSE DeclStatementは中置演算子で書けないか
CLOSED: [2023-08-27 Sun 13:21]
:LOGBOOK:
CLOCK: [2023-08-27 Sun 11:01]--[2023-08-27 Sun 11:26] =>  0:25
CLOCK: [2023-08-27 Sun 10:35]--[2023-08-27 Sun 11:00] =>  0:25
CLOCK: [2023-08-27 Sun 00:14]--[2023-08-27 Sun 00:39] =>  0:25
CLOCK: [2023-08-26 Sat 23:22]--[2023-08-26 Sat 23:47] =>  0:25
CLOCK: [2023-08-26 Sat 22:53]--[2023-08-26 Sat 23:18] =>  0:25
:END:
いや、今のコミット時点の8ccと同じように合わせておくのが安全そう。いきなり大変になるし。

宣言文は ~int a = 1~ みたいな文。

別枠にしているが、中置演算子で共用するときれいにかけるのではないか。型名がなければ代入文で完全に中置にできる。

int a "=" 2

今はidentが特定の名前だったらトークン認識するが、これは最初の判定にイコールを使ったほうがよさそうだ。代入しなおすときに型名はないから。イコールを使えば中置演算子とできそう。

- 宣言文と代入文は使う関数を変えたほうがいいのだろうか
- 各ast構造体に型を追加する
  - プリミティブ型だけで必要。それぞれintのときは…とかで分岐するから、共通でなくていい
** DONE astのidentをvarにする
CLOSED: [2023-08-27 Sun 21:15]
astの時点でidentの中の、varと確定できるので。lexerの時点ではidentのまま。
** DONE ctypeを追加する
CLOSED: [2023-09-02 Sat 20:12]
:LOGBOOK:
CLOCK: [2023-09-02 Sat 14:22]--[2023-09-02 Sat 14:47] =>  0:25
CLOCK: [2023-09-02 Sat 13:19]--[2023-09-02 Sat 13:44] =>  0:25
CLOCK: [2023-09-02 Sat 12:42]--[2023-09-02 Sat 13:07] =>  0:25
CLOCK: [2023-09-02 Sat 12:17]--[2023-09-02 Sat 12:42] =>  0:25
CLOCK: [2023-09-02 Sat 11:52]--[2023-09-02 Sat 12:17] =>  0:25
CLOCK: [2023-09-01 Fri 00:25]--[2023-09-01 Fri 00:50] =>  0:25
CLOCK: [2023-08-31 Thu 23:27]--[2023-08-31 Thu 23:52] =>  0:25
CLOCK: [2023-08-31 Thu 00:26]--[2023-08-31 Thu 00:51] =>  0:25
CLOCK: [2023-08-28 Mon 23:48]--[2023-08-29 Tue 00:14] =>  0:26
CLOCK: [2023-08-27 Sun 20:56]--[2023-08-27 Sun 21:21] =>  0:25
CLOCK: [2023-08-27 Sun 20:26]--[2023-08-27 Sun 20:51] =>  0:25
CLOCK: [2023-08-27 Sun 19:55]--[2023-08-27 Sun 20:20] =>  0:25
CLOCK: [2023-08-27 Sun 19:30]--[2023-08-27 Sun 19:55] =>  0:25
CLOCK: [2023-08-27 Sun 19:00]--[2023-08-27 Sun 19:25] =>  0:25
CLOCK: [2023-08-27 Sun 18:31]--[2023-08-27 Sun 18:56] =>  0:25
CLOCK: [2023-08-27 Sun 16:12]--[2023-08-27 Sun 16:37] =>  0:25
CLOCK: [2023-08-27 Sun 15:47]--[2023-08-27 Sun 16:12] =>  0:25
CLOCK: [2023-08-27 Sun 14:09]--[2023-08-27 Sun 14:34] =>  0:25
CLOCK: [2023-08-27 Sun 13:41]--[2023-08-27 Sun 14:06] =>  0:25
CLOCK: [2023-08-27 Sun 13:16]--[2023-08-27 Sun 13:41] =>  0:25
CLOCK: [2023-08-27 Sun 12:51]--[2023-08-27 Sun 13:16] =>  0:25
CLOCK: [2023-08-27 Sun 12:15]--[2023-08-27 Sun 12:40] =>  0:25
CLOCK: [2023-08-27 Sun 11:28]--[2023-08-27 Sun 11:53] =>  0:25
:END:

- それぞれのASTにctypeを追加する
  - 不定なものと、確定しているものがある
- identをCTYPEに変換する関数を追加する
- 型演算の結果を出す関数を追加する

** DONE ast読み込みの時点で変数を確定する
CLOSED: [2023-08-27 Sun 21:03]
今は変数の確認をasmでやっていて確定するが、それをparserでやる。うーん、変数の確認をするにはobjectを持ってくる必要があるが、面倒だな。

monkeyではevaluatorでやってる。インタプリタではそうするのが自然に思える。とにかく、コンパイルするので事前にそれぞれの型を確定して、チェックする必要がある。

とりあえずparserにobjectsを保存するようにして、取り出して確定できるようにする。

- 関数呼び出しを、変数と解釈してしまっている。
- ~f(1)~ で、 ~f~ が見つからないエラー。
- ~f()~ がidentになっているのが問題
- token.identは共用のもので、ast.callとast.varに分岐させたい
