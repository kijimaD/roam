:properties:
:ID: 20240427T184254
:end:
#+title:      KDOC 143: Cの添字記法は単なるシンタックスシュガーである
#+date:       [2024-04-27 Sat 18:42]
#+filetags:   :draft:code:
#+identifier: 20240427T184254

# (denote-rename-file-using-front-matter (buffer-file-name) 0)
# (save-excursion (while (re-search-backward ":draft" nil t) (replace-match "")))
# (flush-lines "^\\#\s.+?")

# ====ポリシー。
# 1ファイル1アイデア。
# 1ファイルで内容を完結させる。
# 常にほかのエントリとリンクする。
# 自分の言葉を使う。
# 参考文献を残しておく。
# 自分の考えを加える。
# 構造を気にしない。
# エントリ間の接続を発見したら、接続エントリを追加する。カード間にあるリンクの関係を説明するカード。
# アイデアがまとまったらアウトラインエントリを作成する。リンクをまとめたエントリ。
# エントリを削除しない。古いカードのどこが悪いかを説明する新しいカードへのリンクを追加する。
# 恐れずにカードを追加する。無意味の可能性があっても追加しておくことが重要。

* この文書のステータス
- 作成
  - [X] 2024-04-29 貴島
- レビュー
  - [ ] <署名>
# (progn (kill-line -1) (insert (format "  - [X] %s 貴島" (format-time-string "%Y-%m-%d"))))

# 関連をつけた。
# タイトルがフォーマット通りにつけられている。
# 内容をブラウザに表示して読んだ(作成とレビューのチェックは同時にしない)。
# 文脈なく読めるのを確認した。
# おばあちゃんに説明できる。
# いらない見出しを削除した。
# タグを適切にした。
# すべてのコメントを削除した。
* 概要
[[id:656a0aa4-e5d3-416f-82d5-f909558d0639][C language]]での配列の添字記法は、単なるポインタ操作のシンタックスシュガーになっている。添字の数値を、単純に配列の先頭をさすポインタに足している。 ~arr[1]~ は、 ~*(arr+1)~ とも書ける。

#+begin_src C :results raw
  #include <stdio.h>

  void main() {
    int nums[3] = {1, 2, 3};
    int a;
    // 同じ意味のさまざまな書き方
    printf("%d\n", nums[1]);
    printf("%d\n", *(nums+1));
    printf("%d\n", 1[nums]);
  }
#+end_src

#+RESULTS:
#+begin_src
2
2
2
#+end_src

これを、アセンブリを見て確かめる。

* 実演

↓生成されるアセンブリが全く同じなのを確認した。

#+begin_export html
<iframe width="800px" height="200px" src="https://godbolt.org/e#g:!((g:!((g:!((h:codeEditor,i:(filename:'1',fontScale:14,fontUsePx:'0',j:1,lang:___c,selection:(endColumn:2,endLineNumber:6,positionColumn:2,positionLineNumber:6,selectionStartColumn:2,selectionStartLineNumber:6,startColumn:2,startLineNumber:6),source:'void+main()+%7B%0A++++int+nums%5B3%5D+%3D+%7B1,+2,+3%7D%3B%0A++++int+a%3B%0A++++a+%3D+nums%5B1%5D%3B%0A++++a+%3D+*(nums%2B1)%3B%0A%7D'),l:'5',n:'0',o:'C+source+%231',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0'),(g:!((h:compiler,i:(compiler:rv32-cgcctrunk,filters:(b:'0',binary:'1',binaryObject:'1',commentOnly:'0',debugCalls:'1',demangle:'0',directives:'0',execute:'1',intel:'1',libraryCode:'0',trim:'0',verboseDemangling:'0'),flagsViewOpen:'1',fontScale:14,fontUsePx:'0',j:1,lang:___c,libs:!(),options:'',overrides:!(),selection:(endColumn:1,endLineNumber:1,positionColumn:1,positionLineNumber:1,selectionStartColumn:1,selectionStartLineNumber:1,startColumn:1,startLineNumber:1),source:1),l:'5',n:'0',o:'+RISC-V+(32-bits)+gcc+(trunk)+(Editor+%231)',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0')),l:'2',n:'0',o:'',t:'0')),version:4"></iframe>
#+end_export

アセンブリに、添字で指定したままの数値は登場しない。アドレス計算された後の値になっている。コードに現れる添字はあくまでインデックスであって、配列の型の大きさによってアドレスに足す値は変わる。コンパイラは型情報を読んで、要素のアドレスを計算してくれている。

* 関連
- [[id:20240427T113714][KDOC 140: 『自作エミュレータで学ぶx86アーキテクチャ』を読んだ]]。とても詳しく解説されていたので、試した
