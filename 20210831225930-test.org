:PROPERTIES:
:ID:       120300fc-27c2-428e-9fbc-49e14172f6df
:END:
#+title: Test
* 概要
Software [[id:7b14035e-cd37-424d-96c3-ab2988d1c377][development]]におけるテスト。

テストのメリット。
- 挙動をプログラムとして記述しておくことでエラーを起こす変更を防ぐ
- 動く[[id:79178e63-a446-4f47-b832-82128cdf854a][documentation]]として、理解しやすくなる
- アップデートによる変更を検知しやすくなる
- 望む結果が記述されているので、変更を加えやすくなる

などの利点がある。
各言語やフレームワークでテスト拡張が存在する。[[id:cfd092c4-1bb2-43d3-88b1-9f647809e546][Ruby]] → [[id:afccf86d-70b8-44c0-86a8-cdac25f7dfd3][RSpec]]など。
* テスト駆動開発
プロダクトコードを書く → テストコードを書くことが多いが、最初にテストを書いて開発を進めるスタイルがある。
新規に行う開発だけでなく、バグの修正にも有効。

- 最初にバグを再現するコードを書く。これは失敗する、などとコミットメッセージに書いておく。
- バグ修正/リファクタリング、テスト/プロダクトコード修正を混ぜない。わけわからなくなるから。
- 日本語で検証する内容を書く。もちろん、意図を明確に伝えられる英語力があれば問題ない。単にAdd, Fixとかレベルの語彙しか使えないので、実用的ではない。
- テストのネスト、レベル感を合わせる。
- 例の値であることを示す。
* Tasks
* Archives
* Reference
** [[https://www.amazon.co.jp/-/en/%E3%83%AA%E3%83%BC%E3%83%BB%E3%82%B3%E3%83%BC%E3%83%97%E3%83%A9%E3%83%B3%E3%83%89/dp/4822282511/?_encoding=UTF8&pd_rd_w=TKE9M&pf_rd_p=804d5b02-2ee3-4291-af73-4ed641bef875&pf_rd_r=H062A0H4W127PBYM7568&pd_rd_r=38f29407-ad17-4065-9846-a2929166ef0b&pd_rd_wg=V9pdt&ref_=pd_gw_bmx_gp_rb3xsz6n][Amazon.co.jp: はじめて学ぶソフトウェアのテスト技法 : リー・コープランド, 宗 雅彦: Japanese Books]]
テストの方法の本。
** [[https://speakerdeck.com/willnet/clean-test-code-revised][Clean Test Code Revised - Speaker Deck]]
クリーンなテストコードの書き方。
