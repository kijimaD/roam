:PROPERTIES:
:ID:       a9fab970-2057-48ce-95ee-19964d639a38
:header-args+: :wrap :results raw
:END:
#+title: project
* Project
よい個人プロジェクトとは。

- ワクワクすること
- 1ヶ月以内で終わること
- 何か形として残ること
- テストしやすいこと
- 新しく学ぶことが絞られていること
- 成功か失敗かわかりやすいこと
- 他人からのフィードバックが得られること

がある。新鮮な気分でテーマを掘り下げられる。

また、十分に難しいと思える問題を選ぶのがよい。

----

1. あなたの分野でいちばん重要な難問は何ですか。
2. それに取り組んでいますか。
3. なぜ取り組んでいないのですか。

+ [[http://blog.livedoor.jp/lionfan/archives/52909819.html][らいおんの隠れ家 : ポール・グレアム「良い後回し、悪い後回し」]]

----

自分に才能をもちながら成功しない大勢の人の特徴。

- 重要な問題に取り組まないこと
- 問題に熱中しないこと
- 難しい問題を状況を変え、簡単にできるがまだ重要な問題に代えないこと
- なぜしないか言い訳を捜し続けること

+ [[http://www-comm.cs.shinshu-u.ac.jp/david/papers/stories/japanese/hamming.pdf][あなたとあなたの研究]]
* Memo
** 道具を作る表現力
Well-grounded rubyistで、 最期の章はテストの原形をつくった。
すごい。メタなものが扱えることは、作れるものの幅を大きく広げる。
多くの人に、いろんな目的で利用される道具は抽象的だ。
そういうものが作れるようになったら楽しいだろうな。
** ゲーム作りの問題点
ゲームの問題点。遊ぶ人が自分だけであること。
ゼロからやるのは楽しいが、自分の望むものが大きすぎて途中で飽きる。
小さいツール類だと完全に自分用でも達成できる。

どこかに提出する前提でやるのがいいか。
最初にそういう会を見つけておいて、そのレギュレーションに合う形でやると。
* Tasks
** _
やることのアイデア。
** TODO やったことの3D/VR表示
:LOGBOOK:
CLOCK: [2022-09-21 Wed 11:42]--[2022-09-21 Wed 12:07] =>  0:25
CLOCK: [2022-09-21 Wed 11:17]--[2022-09-21 Wed 11:42] =>  0:25
CLOCK: [2022-09-21 Wed 10:50]--[2022-09-21 Wed 11:15] =>  0:25
CLOCK: [2022-09-21 Wed 10:24]--[2022-09-21 Wed 10:49] =>  0:25
CLOCK: [2022-09-21 Wed 09:49]--[2022-09-21 Wed 10:14] =>  0:25
CLOCK: [2022-09-21 Wed 09:24]--[2022-09-21 Wed 09:49] =>  0:25
CLOCK: [2022-09-21 Wed 08:59]--[2022-09-21 Wed 09:24] =>  0:25
CLOCK: [2022-09-21 Wed 08:33]--[2022-09-21 Wed 08:58] =>  0:25
CLOCK: [2022-09-20 Tue 22:31]--[2022-09-20 Tue 22:56] =>  0:25
CLOCK: [2022-09-20 Tue 22:06]--[2022-09-20 Tue 22:31] =>  0:25
CLOCK: [2022-09-20 Tue 21:33]--[2022-09-20 Tue 22:06] =>  0:33
CLOCK: [2022-09-20 Tue 21:08]--[2022-09-20 Tue 21:33] =>  0:25
CLOCK: [2022-09-20 Tue 20:43]--[2022-09-20 Tue 21:08] =>  0:25
CLOCK: [2022-09-20 Tue 17:15]--[2022-09-20 Tue 17:40] =>  0:25
CLOCK: [2022-09-20 Tue 16:44]--[2022-09-20 Tue 17:09] =>  0:25
CLOCK: [2022-09-20 Tue 16:12]--[2022-09-20 Tue 16:37] =>  0:25
CLOCK: [2022-09-20 Tue 15:47]--[2022-09-20 Tue 16:12] =>  0:25
CLOCK: [2022-09-20 Tue 15:21]--[2022-09-20 Tue 15:46] =>  0:25
CLOCK: [2022-09-20 Tue 14:14]--[2022-09-20 Tue 14:39] =>  0:25
CLOCK: [2022-09-20 Tue 12:17]--[2022-09-20 Tue 12:42] =>  0:25
CLOCK: [2022-09-20 Tue 11:06]--[2022-09-20 Tue 11:31] =>  0:25
:END:
何かやったことを3D表示したい。[[id:90c6b715-9324-46ce-a354-63d09403b066][Git]]とか組み合わせられないか。何かものの収集は、形があるのでたくさんやるほど結果が目に見えやすい。般若心経、ゴミヘビ。どこか行く系は距離で苦労が理解しやすい。

収集やかけた労力によってもっと好きになっていく循環ってある。みうらじゅんはそんな感じのことをよく言っている。

- データ構造
  - 種別
    - リポジトリ
    - Web
      - 本
      - Web
  - URL
  - 識別名

とりあえず文字表示は抜きにして、立方体と色で表示する。タスク数は、roamにhttpリクエストしてgrepする…。org側でjson出力とかできたらそれを取得するようにしたい。なかなか役立つ感じがするな。

** PRの統計
[[id:6b889822-21f1-4a3e-9755-e3ca52fa0bc4][GitHub]]から生産性について取れる情報はたくさんある。

有益な指標のリスト。[[https://cloud.google.com/blog/ja/products/gcp/using-the-four-keys-to-measure-your-devops-performance][エリート DevOps チームであることを Four Keys プロジェクトで確認する | Google Cloud Blog]]

- デプロイの頻度 - 組織による正常な本番環境へのリリースの頻度
- 変更のリードタイム - commit から本番環境稼働までの所要時間
- 変更障害率 - デプロイが原因で本番環境で障害が発生する割合（%）
- サービス復元時間 - 組織が本番環境での障害から回復するのにかかる時間

** [[id:1658782a-d331-464b-9fd7-1f8233b8b7f8][Docker]]の時間統計
ビルド時間のステージごとの統計が取れたら便利だろうな。
** yml-sorterのWEB版
docker-compose.ymlを並び替えたいが、ちょっと見たらweb版がない。需要ありそうだけどな。
** simple covの結果を元に、PR毎にコメントを表示する
一般化できる方法で解きたい。
** 床屋シミュレータ
Programming [[id:b2f63c13-4b30-481c-9c95-8abe388254fd][Scala]] の218ページ付近で紹介されている床屋シミュレータ。
グラフィカルにして動くのを眺めたい。
** orgの文書lint
よい文書のための、特定の形式を満たしていることをチェックするlint。

たとえば。
- コードブロックにはキャプションがついている
- 見出しがネストしすぎてない
- タイトルタグがついている
- 見出しだけ(本文がなく)の項目がない
- 特定の見出しが存在すること
** simplecovのエディタ表示
すでにいくつかのエディタでは存在する。
** 読書ページ記録
pdf.jsでページ送りするたびに、その時刻が記録されるのはどうだろう。
ちょっと楽しい感じがする。前の時間との差分も計算する。
- 1: 2021-11-13T20:21:20+09:00
- 2: 2021-11-13T20:21:34+09:00 (14)
** 言語記述型のシミュレーション
[[id:7c01d791-1479-4727-b076-280034ab6a40][Simutrans]]を、言語記述でできないだろうか。
たとえば2つに画面がわかれていて、左側はエディタ、右側は画面が表示されている。
左側でA = station(1, 2)とすると右の画面に駅が作られる。
train(A, B)とするとA, Bを往復する列車が表示される。
** method quiz
たとえばRubyのメソッド一覧から任意のものを取って表示する。
知ってるか、知らないかだけ。
ドキュメント、ソースへのリンクを飛ばす。

クラスも指定できるといいな。メソッドの開拓に使える。

ジャンルの指定とかもしてな。 ~!~ がついてるやつとか述語メソッドとか。
** 各言語でのxmpfilter
xmpfilterはrubyのrcodetools gemsに付属しているコード。
実行結果アノテーションをつけて、行ごとの評価結果をファイルに出力してくれるので学習に便利。
** DBゲーム
話がデカすぎてやる気が持続するとは思わないが。

自動生成操作をするプログラムをユーザに見立てて、dbアプリを作成する。出来ていくデータを眺める。とにかく重要なのは、生身のユーザを必要としないことだ。
基本的に眺める楽しさ。

viewは一切開発せず、直にパブリックメソッドを実行するbotを仮想ユーザとして考える。何かイベントを与えると必要なことを行おうとする。経営のダッシュボードだけ可視化できるようにして、あとはルールとして実装する。あとで変更しやすいように、テキストで全管理できるDBにしたいな。
- 株
- 病院
- レンタルビデオ
- 人間関係ネットワーク。お互いに影響を与え合う様子。

パワポケのペナントモードという考え方もできる。チームという入力を入れると、試合データが出てくる。試合やチームによって、所属する選手は変化していく。それってシミュレーションゲーム。値を自由に入れることができないシミュレーション。
うむむ、DBを使う必要はあるんだろうか。
** SimutransのCUI版
** 倉庫番
でかいのに取り組むより、これくらいがよい。
- 空間の実装方法が理解できる。
** プログラムゲーム
最低限の世界のルールを定めておいて、それをプログラムで解決するゲーム。
世界のルール: 物体は質量を持つ、移動には費用がかかる、その枠の中で自由にプログラムできる、というもの。本質的には、ルールセットを記述して戦うロボット的なゲームに似ている。でもそうやって具体的なひとつのケースを見るのではなくて、全体を見るところが違う。
** サウンドノベル・web
- markdownを拡張してサウンドノベル用の文法を作る。
- webでmdを読み込んで表示できるようにする。
** バッジ出力ツール
たとえばカバレッジ出力などは乱立している。
** パッケージ作る
これが現実的か。
- 小さくていい。
- 他のを見て参考にできる。
- 一度理解すれば横展開がやりやすい。どこかにPR出せばスターがつきやすいのもいい。確実に需要がある。
** 経済ゲーム
Practical Ruby Projectsに書いてあったやつ。経済シミュレーター。
[[id:b4f27aef-22ec-45c0-be50-810f3a0cf9bc][Money]]の知識と絡められないか。
* Archives
** CLOSE Textlint Web
CLOSED: [2021-09-10 Fri 17:52]
- もうすでにある。
** CLOSE テキストベースのゲーム
CLOSED: [2021-08-31 Tue 23:20]
[[id:70f249a8-f8c8-4a7e-978c-8ff04ffd09c0][digger]]で、[[id:cfd092c4-1bb2-43d3-88b1-9f647809e546][Ruby]]を使ってやった。

- テストしやすいためテキスト主体。
- ローグライク
- アドベンチャーゲーム
** CLOSE melpaクローン
CLOSED: [2022-03-05 Sat 22:55]
ruby gemsのクローンのmelpa版。すでにあった。
** DONE gemfile exporter
CLOSED: [2022-04-11 Mon 22:05]
絶対もうあるが、便利コマンドの練習になる。
** DONE stale-files-action
CLOSED: [2022-05-27 Fri 00:47]
:LOGBOOK:
CLOCK: [2022-05-01 Sun 16:05]--[2022-05-01 Sun 16:30] =>  0:25
CLOCK: [2022-05-01 Sun 14:56]--[2022-05-01 Sun 15:21] =>  0:25
CLOCK: [2022-05-01 Sun 14:12]--[2022-05-01 Sun 14:37] =>  0:25
CLOCK: [2022-05-01 Sun 13:26]--[2022-05-01 Sun 13:51] =>  0:25
CLOCK: [2022-05-01 Sun 11:48]--[2022-05-01 Sun 12:13] =>  0:25
CLOCK: [2022-05-01 Sun 11:23]--[2022-05-01 Sun 11:48] =>  0:25
CLOCK: [2022-05-01 Sun 10:48]--[2022-05-01 Sun 11:13] =>  0:25
CLOCK: [2022-05-01 Sun 10:17]--[2022-05-01 Sun 10:42] =>  0:25
CLOCK: [2022-05-01 Sun 09:48]--[2022-05-01 Sun 10:13] =>  0:25
CLOCK: [2022-05-01 Sun 09:23]--[2022-05-01 Sun 09:48] =>  0:25
CLOCK: [2022-04-30 Sat 22:55]--[2022-04-30 Sat 23:20] =>  0:25
CLOCK: [2022-04-30 Sat 22:29]--[2022-04-30 Sat 22:54] =>  0:25
CLOCK: [2022-04-30 Sat 22:04]--[2022-04-30 Sat 22:29] =>  0:25
CLOCK: [2022-04-30 Sat 21:39]--[2022-04-30 Sat 22:04] =>  0:25
CLOCK: [2022-04-30 Sat 21:04]--[2022-04-30 Sat 21:29] =>  0:25
CLOCK: [2022-04-30 Sat 20:09]--[2022-04-30 Sat 20:34] =>  0:25
CLOCK: [2022-04-30 Sat 19:40]--[2022-04-30 Sat 20:05] =>  0:25
CLOCK: [2022-04-30 Sat 19:15]--[2022-04-30 Sat 19:40] =>  0:25
CLOCK: [2022-04-30 Sat 17:15]--[2022-04-30 Sat 17:40] =>  0:25
CLOCK: [2022-04-30 Sat 16:06]--[2022-04-30 Sat 16:31] =>  0:25
CLOCK: [2022-04-30 Sat 15:41]--[2022-04-30 Sat 16:06] =>  0:25
CLOCK: [2022-04-30 Sat 15:15]--[2022-04-30 Sat 15:40] =>  0:25
CLOCK: [2022-04-30 Sat 14:50]--[2022-04-30 Sat 15:15] =>  0:25
CLOCK: [2022-04-30 Sat 11:28]--[2022-04-30 Sat 11:53] =>  0:25
:END:
更新のないファイルを検知して、issueを作成し、一覧コメントをつけるアクション。

- 更新のないファイル検知
- issue作成
- データを受け取って整形、コメント送信

#+caption: こんな感じのコメント
#+begin_src
- [ ] ./docs/ruby.org 2021-03-04 40days
- [ ] ./docs/python.org 2021-03-04 44days
#+end_src

*** 変数情報
コメントの最後で、実行した条件を表示する。
*** カウント
stale総数 / 検索対象数、 パーセント。
*** ファイル名をリンク化
** DONE git-linkを展開する拡張
CLOSED: [2022-09-19 Mon 12:23]
:LOGBOOK:
CLOCK: [2022-06-22 Wed 22:45]--[2022-06-22 Wed 23:10] =>  0:25
CLOCK: [2022-06-21 Tue 22:54]--[2022-06-21 Tue 23:19] =>  0:25
CLOCK: [2022-06-21 Tue 09:06]--[2022-06-21 Tue 09:31] =>  0:25
CLOCK: [2022-06-21 Tue 08:40]--[2022-06-21 Tue 09:05] =>  0:25
CLOCK: [2022-06-21 Tue 08:14]--[2022-06-21 Tue 08:39] =>  0:25
CLOCK: [2022-06-20 Mon 20:39]--[2022-06-20 Mon 21:04] =>  0:25
CLOCK: [2022-06-20 Mon 20:14]--[2022-06-20 Mon 20:39] =>  0:25
CLOCK: [2022-06-20 Mon 17:50]--[2022-06-20 Mon 18:15] =>  0:25
CLOCK: [2022-06-20 Mon 17:25]--[2022-06-20 Mon 17:50] =>  0:25
CLOCK: [2022-06-20 Mon 17:00]--[2022-06-20 Mon 17:25] =>  0:25
CLOCK: [2022-06-17 Fri 10:31]--[2022-06-17 Fri 10:56] =>  0:25
CLOCK: [2022-06-17 Fri 10:01]--[2022-06-17 Fri 10:26] =>  0:25
CLOCK: [2022-06-17 Fri 00:11]--[2022-06-17 Fri 00:36] =>  0:25
CLOCK: [2022-06-16 Thu 23:33]--[2022-06-16 Thu 23:58] =>  0:25
:END:
GitHub上でパーマリンクのコードが展開されるみたいに、リンクを評価するとコードを展開できるようにしたい。org-modeで使えれば便利だろう。
*** 構想
#+begin_src shell
echo "a"
#+end_src

#+RESULTS:
#+begin_results
a
#+end_results

と同様に、パーマリンクを書いて、評価する。元リンクもついているので、あとで元を辿ることもできる。ただこの場合の問題点は、シンタックスハイライトを効かせるのが難しいことか。いや、resultsにも効くな。とはいえ再評価すると消えてしまうのでビミョーではある。拡張子をそのまま結果に使えばよさそうだな。

#+begin_src gh-permalink
https://github.com/kijimaD/roam/blob/5519ac4f79470b6c33d77401bf5202c61951f8bb/20210615222732-project.org#L52
#+end_src

#+RESULTS:
#+begin_results shell
echo "aaaa"
#+end_results

普通の関数としても使えるが、org-babelのひとつとして使うのがしっくりくるな。解決したい課題: コードを貼り付けたいけど、元の場所も示しておきたいとき。あとから参照できなくなるのもあるし、引用的にも元リンクはほしい。

- リンク
- コード

問題は、org-babelを使うのが正しい方法なのか、ということだ。

- リンクと展開を別にできる
- 再評価可能
*** 実装
- リンクをパースする部分
  - サイトを入れ替えられるようにする
- 取得する部分
  - サイトを入れ替えられるようにする
- 描画する部分
  - すべてのサイトで共通
