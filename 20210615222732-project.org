:PROPERTIES:
:ID:       a9fab970-2057-48ce-95ee-19964d639a38
:header-args+: :wrap :results raw
:mtime:    20241102180358 20241028101410
:ctime:    20210615222732
:END:
#+title: project

* Project
よいプロジェクトの条件として思い浮かぶこと。

- ワクワクすること
- 1ヶ月以内で終わること
- 何か形として残ること
- テストしやすいこと
- 新しく学ぶことが絞られていること
- 成功か失敗かわかりやすいこと
- 他人からのフィードバックが得られること
- 難しいと思えること

[[http://blog.livedoor.jp/lionfan/archives/52909819.html][らいおんの隠れ家 : ポール・グレアム「良い後回し、悪い後回し」]]の、解くべき問題に取り組んでいるかのチェックリスト。

#+begin_quote
1. あなたの分野でいちばん重要な難問は何ですか。
2. それに取り組んでいますか。
3. なぜ取り組んでいないのですか。
#+end_quote

[[http://www-comm.cs.shinshu-u.ac.jp/david/papers/stories/japanese/hamming.pdf][あなたとあなたの研究]]の、自分に才能をもちながら成功しない大勢の人の特徴。

- 重要な問題に取り組まないこと
- 問題に熱中しないこと
- 難しい問題を状況を変え、簡単にできるがまだ重要な問題に代えないこと
- なぜしないか言い訳を捜し続けること

* Memo
** 道具を作る表現力
Well-grounded rubyistで、 最期の章はテストの原形をつくった。すごい。メタなものが扱えることは、作れるものの幅を大きく広げる。多くの人に、いろんな目的で利用される道具は抽象的だ。そういうものが作れるようになったら楽しいだろうな。
** ゲーム作りの問題点
ゲームの問題点。遊ぶ人が自分だけであること。ゼロからやるのは楽しいが、自分の望むものが大きすぎて途中で飽きる。小さいツール類だと完全に自分用でも達成できる。どこかに提出する前提でやるのがいいか。最初にそういう会を見つけておいて、そのレギュレーションに合う形でやると。
* Tasks
** ブラウザでシェルの実行結果を見る

- GitHub Actionsの実行結果のイメージ
- できればリアルタイムで

** [[id:a6c9c9ad-d9b1-4e13-8992-75d8590e464c][Python]]の雛形リポジトリを作る
[[id:e5663529-8095-4fc8-8fb5-500dd4471a73][Linter]]設定とかしておく。
** GitHubリポジトリを自動設定するプログラム
CLIでURLを打つと、自動でその設定にしてくれるプログラム。というか、リポジトリの作成からやってくれる。リポジトリ設定のファイル化。すでにありそう。

- デフォルトトークンの権限を読み書き可能にする
- ブランチを自動削除する
** 関連するWikipediaの項目を出すプログラム
たとえばCPUと打ったら、CPUに関連する記事を列挙するような。

勉強するときに、ドバっとまとめて関連する分野の単語をおさえるのに使う。

** Google ChromeのPDFでスクロールしたときにページ数を更新する
ページを自動更新してほしい。いや、ブックマークレットとかできそうな感じもする。
** Google Meetのコメントを流して表示する
画面共有中に、ほかのタブでコメントを見られるようにしたい。流れるようにできればベスト。Chrome拡張でできそうなのがあったが、動かなかった。

- X Window でやればできるだろう。コメントを取れるかはわからないが
** バイナリの可視化ツール
バイナリかるたでやっているように、出現頻度で画像化したい。

- 文字表示については、別でツールでやるのでいらない
- 全部やると遅そう。オフセットとサイズを指定して一部だけ可視化できればよい
- 仕様の参考にする。[[https://digitaltravesia.jp/usamimihurricane/webhelp/_RESOURCE/MenuItem/another/anotherAoZoraSiroNeko.html][汎用ファイルアナライザ「青い空を見上げればいつもそこに白い猫」]]

** create-link修正
org-make-link-stringを使ってリンクを組み立てるようにする。
** TODO vtermが、負の前置引数を尊重してないように見える
vtermだけ実行できないのを調べる。eshellではできた。
** TODO 郷土本
:LOGBOOK:
CLOCK: [2024-02-12 Mon 21:29]--[2024-02-12 Mon 21:54] =>  0:25
CLOCK: [2024-02-12 Mon 20:56]--[2024-02-12 Mon 21:22] =>  0:26
CLOCK: [2024-02-12 Mon 20:27]--[2024-02-12 Mon 20:52] =>  0:25
CLOCK: [2024-02-12 Mon 01:19]--[2024-02-12 Mon 01:44] =>  0:25
CLOCK: [2024-02-11 Sun 22:43]--[2024-02-11 Sun 23:08] =>  0:25
CLOCK: [2024-02-11 Sun 22:06]--[2024-02-11 Sun 22:31] =>  0:25
CLOCK: [2024-02-11 Sun 21:36]--[2024-02-11 Sun 22:01] =>  0:25
CLOCK: [2024-02-03 Sat 21:09]--[2024-02-03 Sat 21:34] =>  0:25
CLOCK: [2023-12-03 Sun 23:01]--[2023-12-03 Sun 23:26] =>  0:25
CLOCK: [2023-12-03 Sun 22:33]--[2023-12-03 Sun 22:58] =>  0:25
CLOCK: [2023-12-03 Sun 21:21]--[2023-12-03 Sun 21:46] =>  0:25
CLOCK: [2023-12-03 Sun 20:28]--[2023-12-03 Sun 20:53] =>  0:25
CLOCK: [2023-12-03 Sun 00:49]--[2023-12-03 Sun 01:14] =>  0:25
CLOCK: [2023-12-03 Sun 00:24]--[2023-12-03 Sun 00:49] =>  0:25
CLOCK: [2023-12-02 Sat 23:12]--[2023-12-02 Sat 23:37] =>  0:25
CLOCK: [2023-12-02 Sat 22:44]--[2023-12-02 Sat 23:09] =>  0:25
CLOCK: [2023-12-02 Sat 22:04]--[2023-12-02 Sat 22:30] =>  0:26
CLOCK: [2023-12-02 Sat 21:39]--[2023-12-02 Sat 22:04] =>  0:25
:END:
作る。
** TODO denote renameをディレクトリ内の全ファイルに対して適用する
~denote-rename-file-using-front-matter~ を全ファイルに対して実行したい。
** TODO アセンブラの実行結果を可視化するツール
パラパラ漫画にすれば一瞬で理解できるように見える。

いい感じのものが見つからない。デバッガとは違うんだよな。
** TODO 簡易メモ帳
Emacsからpecoみたいな感じで、あまり覚えてないテキストをインクリメンタル検索しながら呼び出せるようにする。
** リンクのかぶりチェックツール
同じものを追加していることがよくあるので、検知できるようにする。
** エレベーター実装
アルゴリズムを実装してみる。
** コードドキュメント生成ツール
コメントとソースコードでいい感じのWebページに変換する。
** TODO RFCページのように各段落にアンカーを設定できるツールを作成する
:LOGBOOK:
CLOCK: [2023-12-02 Sat 02:42]--[2023-12-02 Sat 03:07] =>  0:25
CLOCK: [2023-12-02 Sat 02:17]--[2023-12-02 Sat 02:42] =>  0:25
CLOCK: [2023-12-02 Sat 01:50]--[2023-12-02 Sat 02:15] =>  0:25
CLOCK: [2023-12-02 Sat 01:21]--[2023-12-02 Sat 01:46] =>  0:25
CLOCK: [2023-12-02 Sat 00:21]--[2023-12-02 Sat 00:46] =>  0:25
CLOCK: [2023-12-01 Fri 23:56]--[2023-12-02 Sat 00:21] =>  0:25
:END:

RFCのサイトでは各段落ごとでアンカーを設定できる。示しやすい。

- PLATEAUのHTMLドキュメントでやろうとしたが、タグ構造が複雑で難しい。段落という概念がとれない
- PDFをHTML化するとタグ構造はめちゃくちゃになっているため難しい

** Chrome拡張のorg-captureを右クリックに対応させる
ボタンかショートカットキーからしかできないが、右クリックからできたら便利だろうな。
** org-agendaのブラウザ表示
ブラウザでの表示をモダンにできるようにする。orgパーサーが必要か。
** TODO コンテナダッシュボード
:LOGBOOK:
CLOCK: [2023-05-18 Thu 00:06]--[2023-05-18 Thu 00:31] =>  0:25
CLOCK: [2023-05-17 Wed 23:41]--[2023-05-18 Thu 00:06] =>  0:25
CLOCK: [2023-05-17 Wed 22:58]--[2023-05-17 Wed 23:23] =>  0:25
CLOCK: [2023-05-13 Sat 23:31]--[2023-05-13 Sat 23:56] =>  0:25
CLOCK: [2023-05-13 Sat 21:36]--[2023-05-13 Sat 22:01] =>  0:25
CLOCK: [2023-05-13 Sat 20:17]--[2023-05-13 Sat 20:42] =>  0:25
CLOCK: [2023-05-13 Sat 19:38]--[2023-05-13 Sat 20:03] =>  0:25
CLOCK: [2023-05-13 Sat 18:51]--[2023-05-13 Sat 19:16] =>  0:25
CLOCK: [2023-05-13 Sat 18:26]--[2023-05-13 Sat 18:51] =>  0:25
CLOCK: [2023-05-13 Sat 16:25]--[2023-05-13 Sat 16:50] =>  0:25
CLOCK: [2023-05-13 Sat 15:44]--[2023-05-13 Sat 16:09] =>  0:25
CLOCK: [2023-05-13 Sat 15:08]--[2023-05-13 Sat 15:33] =>  0:25
CLOCK: [2023-05-13 Sat 14:32]--[2023-05-13 Sat 14:57] =>  0:25
CLOCK: [2023-05-13 Sat 11:56]--[2023-05-13 Sat 12:21] =>  0:25
CLOCK: [2023-05-13 Sat 11:29]--[2023-05-13 Sat 11:54] =>  0:25
CLOCK: [2023-05-13 Sat 11:03]--[2023-05-13 Sat 11:28] =>  0:25
CLOCK: [2023-05-11 Thu 23:51]--[2023-05-12 Fri 00:16] =>  0:25
CLOCK: [2023-05-11 Thu 23:09]--[2023-05-11 Thu 23:34] =>  0:25
CLOCK: [2023-05-11 Thu 22:44]--[2023-05-11 Thu 23:09] =>  0:25
CLOCK: [2023-05-11 Thu 22:16]--[2023-05-11 Thu 22:41] =>  0:25
CLOCK: [2023-05-11 Thu 21:33]--[2023-05-11 Thu 21:58] =>  0:25
CLOCK: [2023-05-10 Wed 22:23]--[2023-05-10 Wed 22:48] =>  0:25
CLOCK: [2023-05-10 Wed 21:43]--[2023-05-10 Wed 22:08] =>  0:25
CLOCK: [2023-05-10 Wed 20:11]--[2023-05-10 Wed 20:36] =>  0:25
:END:

docker-composeで立てたコンテナを手軽に一覧できるようにする。

- envconfig
  - 環境変数の読み込み、ないときはデフォルト値を設定する
- signal.NotifyContext
  - シグナルをキャッチしてコンテキストをcancelさせる処理を楽に書ける
- sync.RWMutex
- webサーバ - クライアントはWebソケット。webサーバはdockerからのイベントを受け付け、それをクライアントに通知する
- websocketConnectionとclientConnectionの違いはなんだ
  - WebSocketは、HTTPとは異なるプロトコルである
  - HTTPで接続を確立してから、UpgradeしてWebSocketで通信する
  - つまり両方は別のconnectionで、WebSocketで通信するには両方必要
- ClientConnectionsは購読リスト。websocket接続を確立したクライアントごとにある
  - たとえばブラウザとcurlでリクエストを飛ばしたとしたら、ClientConnectionsの長さは2になる。
- LogStoreやDocker構造体はどのリクエストでも共通

*** TODO バックエンドのコードを把握する
:LOGBOOK:
CLOCK: [2023-05-15 Mon 23:30]--[2023-05-15 Mon 23:55] =>  0:25
CLOCK: [2023-05-15 Mon 22:44]--[2023-05-15 Mon 23:09] =>  0:25
CLOCK: [2023-05-15 Mon 22:05]--[2023-05-15 Mon 22:30] =>  0:25
CLOCK: [2023-05-15 Mon 21:37]--[2023-05-15 Mon 22:02] =>  0:25
CLOCK: [2023-05-15 Mon 21:11]--[2023-05-15 Mon 21:36] =>  0:25
CLOCK: [2023-05-15 Mon 20:32]--[2023-05-15 Mon 20:57] =>  0:25
CLOCK: [2023-05-14 Sun 22:57]--[2023-05-14 Sun 23:22] =>  0:25
CLOCK: [2023-05-14 Sun 22:31]--[2023-05-14 Sun 22:56] =>  0:25
CLOCK: [2023-05-14 Sun 21:59]--[2023-05-14 Sun 22:24] =>  0:25
CLOCK: [2023-05-14 Sun 21:34]--[2023-05-14 Sun 21:59] =>  0:25
CLOCK: [2023-05-14 Sun 19:15]--[2023-05-14 Sun 19:41] =>  0:26
CLOCK: [2023-05-14 Sun 18:38]--[2023-05-14 Sun 19:03] =>  0:25
CLOCK: [2023-05-14 Sun 17:59]--[2023-05-14 Sun 18:24] =>  0:25
CLOCK: [2023-05-14 Sun 17:31]--[2023-05-14 Sun 17:56] =>  0:25
CLOCK: [2023-05-14 Sun 15:54]--[2023-05-14 Sun 16:19] =>  0:25
CLOCK: [2023-05-14 Sun 15:29]--[2023-05-14 Sun 15:54] =>  0:25
CLOCK: [2023-05-14 Sun 12:04]--[2023-05-14 Sun 12:29] =>  0:25
CLOCK: [2023-05-14 Sun 11:21]--[2023-05-14 Sun 11:46] =>  0:25
CLOCK: [2023-05-14 Sun 10:53]--[2023-05-14 Sun 11:18] =>  0:25
CLOCK: [2023-05-14 Sun 10:28]--[2023-05-14 Sun 10:53] =>  0:25
:END:
けっこう複雑で絡み合っていて、よくわかっていない。

読むというよりは、実際機能追加したみたほうがいいんだろうな。

*** TODO フロント側のコードを把握する
おそろくフロントのちゃんとした書き方なので参考になる感じがする。
*** TODO 検証しやすいようにする
ウェブソケットの確かめ方がよくわからない。どうやってデバッグすればいいのだろう。
** 各node数をカウントするコマンド
ASTテストが網羅しているか調べるツール。プロジェクト全体で見るのもおもしろそう。
** gorunをコンテナ実行する
より[[id:2d35ac9e-554a-4142-bba7-3c614cbfe4c4][GitHub Actions]]に近づける。
** golangci-lintを調べる

- エラーが出るが、矢印が正しくないときがあるのを調べる
- オフラインのとき解決に失敗するのを調べる
- タグの形式をチェック。チェックできなさそうな気もする

** シェルを実装する
理解したいなら実装してみればよい。なので、UNIXプログラミングが理解したければ、シェルを実装すればよい。

参考。

- [[https://jun-networks.hatenablog.com/entry/2021/07/02/034002][シェル実装の課題を完走した - JUNのブログ]]

** 静的サイトジェネレータ
[[id:2d35ac9e-554a-4142-bba7-3c614cbfe4c4][GitHub Actions]]でリポジトリの一覧をHTMLできれいに表示できるようにする。
** 関数一覧からテストを自動生成する
テンプレートを生成する。あるいは、一覧から選択して作成してくれると良い。
** テストをドキュメントに変換する
[[id:c7e81fac-9f8b-4538-9851-21d4ff3c2b08][Emacs Lisp]]のテストを書いている。HTMLに変換して、デプロイしてブラウザで見られるようにしたい。
** org projectを1つのPDFにビルドする
メモ・日記が多すぎなので、1つのPDFで閲覧できるようにする。
** 探検記
いくつかネタがあるので探検記を書く。画像を大量に使う予定だが、いい感じに表示するためにはどうしたらよいだろうか。
** テスト駆動のEmacs Lispチュートリアル
Goのテスト駆動のやつは非常によかった。Emacs Lisp版もあるとよさそう。自分の勉強がてら。
** 楽しい経路探索
どこかで言われていたこと。地図検索で最短距離でなく、楽しさや静かさを考慮した経路探索する。それらのスコア付けは、ユーザによる2つの画像の比較によって行われる。
** org-modeのパーサ

解析してほかの用途へ使えるようにする。すでにありそうだけど練習に。

** 意味のない中間変数検知ツール

#+caption: 例
#+begin_src go
  a := "aaa"
  return a
#+end_src

のような明らかに意味のない中間変数をコード中から探すツール。変数名を扱うから構文解析が必要か。

** いい感じの規模感のリポジトリを探すツール
言語ごとに行数、スター数から調べる。

行数が少ないものは読みやすい。

サーバレスか[[id:2d35ac9e-554a-4142-bba7-3c614cbfe4c4][GitHub Actions]]で定期実行して、加工して公開する。
** PRの統計
[[id:6b889822-21f1-4a3e-9755-e3ca52fa0bc4][GitHub]]から生産性について取れる情報はたくさんある。

有益な指標のリスト。[[https://cloud.google.com/blog/ja/products/gcp/using-the-four-keys-to-measure-your-devops-performance][エリート DevOps チームであることを Four Keys プロジェクトで確認する | Google Cloud Blog]]

- デプロイの頻度 - 組織による正常な本番環境へのリリースの頻度
- 変更のリードタイム - commit から本番環境稼働までの所要時間
- 変更障害率 - デプロイが原因で本番環境で障害が発生する割合（%）
- サービス復元時間 - 組織が本番環境での障害から回復するのにかかる時間

** [[id:1658782a-d331-464b-9fd7-1f8233b8b7f8][Docker]]の時間統計
ビルド時間のステージごとの統計が取れたら便利だろうな。あるいはイメージ。

- 統計情報の記録/取得
- 保存
- 表示

の2つになりそう。保存に関しては、GitHub Actionsが使えないだろうか。

** yml-sorterのWEB版
docker-compose.ymlを並び替えたいが、ちょっと見たらweb版がない。需要ありそうだけどな。でも、docker-composeは単にソートすればいいってわけでもない。たとえばversionは一番上に書くのが普通だが、これは別にソートではない。キーワードごとで例外というか、優先度をつけなければいけなそう。

フォーマッタがありそうな。
** simple covの結果を元に、PR毎にコメントを表示する
一般化できる方法で解きたい。
** 床屋シミュレータ
Programming [[id:b2f63c13-4b30-481c-9c95-8abe388254fd][Scala]]の218ページ付近で紹介されている床屋シミュレータ。
グラフィカルにして動くのを眺めたい。
** orgの文書lint
よい文書のための、特定の形式を満たしていることをチェックするlint。

たとえば。
- コードブロックにはキャプションがついている
- 見出しがネストしすぎてない
- タイトルタグがついている
- 見出しだけ(本文がなく)の項目がない
- 特定の見出しが存在すること
** simplecovのエディタ表示
すでにいくつかのエディタでは存在する。
** 読書ページ記録
pdf.jsでページ送りするたびに、その時刻が記録されるのはどうだろう。
ちょっと楽しい感じがする。前の時間との差分も計算する。
- 1: 2021-11-13T20:21:20+09:00
- 2: 2021-11-13T20:21:34+09:00 (14)
** 言語記述型のシミュレーション
[[id:7c01d791-1479-4727-b076-280034ab6a40][Simutrans]]を、言語記述でできないだろうか。

たとえば2つに画面がわかれていて、左側はエディタ、右側は画面が表示されている。左側でA = station(1, 2)とすると右の画面に駅が作られる。train(A, B)とするとA, Bを往復する列車が表示される。
** method quiz
たとえばRubyのメソッド一覧から任意のものを取って表示する。
知ってるか、知らないかだけ。
ドキュメント、ソースへのリンクを飛ばす。

クラスも指定できるといいな。メソッドの開拓に使える。

ジャンルの指定とかもしてな。 ~!~ がついてるやつとか述語メソッドとか。
** 各言語でのxmpfilter
xmpfilterはrubyのrcodetools gemsに付属しているコード。
実行結果アノテーションをつけて、行ごとの評価結果をファイルに出力してくれるので学習に便利。
** DBゲーム
話がデカすぎてやる気が持続するとは思わないが。

自動生成操作をするプログラムをユーザに見立てて、dbアプリを作成する。出来ていくデータを眺める。とにかく重要なのは、生身のユーザを必要としないことだ。
基本的に眺める楽しさ。

viewは一切開発せず、直にパブリックメソッドを実行するbotを仮想ユーザとして考える。何かイベントを与えると必要なことを行おうとする。経営のダッシュボードだけ可視化できるようにして、あとはルールとして実装する。あとで変更しやすいように、テキストで全管理できるDBにしたいな。
- 株
- 病院
- レンタルビデオ
- 人間関係ネットワーク。お互いに影響を与え合う様子。

パワポケのペナントモードという考え方もできる。チームという入力を入れると、試合データが出てくる。試合やチームによって、所属する選手は変化していく。それってシミュレーションゲーム。値を自由に入れることができないシミュレーション。
うむむ、DBを使う必要はあるんだろうか。
** プログラムゲーム
最低限の世界のルールを定めておいて、それをプログラムで解決するゲーム。

世界のルール: 物体は質量を持つ、移動には費用がかかる、その枠の中で自由にプログラムできる、というもの。本質的には、ルールセットを記述して戦うロボット的なゲームに似ている。でもそうやって具体的なひとつのケースを見るのではなくて、全体を見るところが違う。
** サウンドノベル・web
- markdownを拡張してサウンドノベル用の文法を作る。
- webでmdを読み込んで表示できるようにする。
** バッジ出力ツール
たとえばカバレッジ出力などは乱立している。
* References
** [[https://github.com/practical-tutorials/project-based-learning][practical-tutorials/project-based-learning: Curated list of project-based tutorials]]
プロジェクトベースのチュートリアル集。面白い。
* Archives
** CLOSE Textlint Web
CLOSED: [2021-09-10 Fri 17:52]
- もうすでにある。
** CLOSE テキストベースのゲーム
CLOSED: [2021-08-31 Tue 23:20]
[[id:70f249a8-f8c8-4a7e-978c-8ff04ffd09c0][digger]]で、[[id:cfd092c4-1bb2-43d3-88b1-9f647809e546][Ruby]]を使ってやった。

- テストしやすいためテキスト主体。
- ローグライク
- アドベンチャーゲーム
** CLOSE melpaクローン
CLOSED: [2022-03-05 Sat 22:55]
ruby gemsのクローンのmelpa版。すでにあった。
** DONE gemfile exporter
CLOSED: [2022-04-11 Mon 22:05]
絶対もうあるが、便利コマンドの練習になる。
** DONE stale-files-action
CLOSED: [2022-05-27 Fri 00:47]
:LOGBOOK:
CLOCK: [2022-05-01 Sun 16:05]--[2022-05-01 Sun 16:30] =>  0:25
CLOCK: [2022-05-01 Sun 14:56]--[2022-05-01 Sun 15:21] =>  0:25
CLOCK: [2022-05-01 Sun 14:12]--[2022-05-01 Sun 14:37] =>  0:25
CLOCK: [2022-05-01 Sun 13:26]--[2022-05-01 Sun 13:51] =>  0:25
CLOCK: [2022-05-01 Sun 11:48]--[2022-05-01 Sun 12:13] =>  0:25
CLOCK: [2022-05-01 Sun 11:23]--[2022-05-01 Sun 11:48] =>  0:25
CLOCK: [2022-05-01 Sun 10:48]--[2022-05-01 Sun 11:13] =>  0:25
CLOCK: [2022-05-01 Sun 10:17]--[2022-05-01 Sun 10:42] =>  0:25
CLOCK: [2022-05-01 Sun 09:48]--[2022-05-01 Sun 10:13] =>  0:25
CLOCK: [2022-05-01 Sun 09:23]--[2022-05-01 Sun 09:48] =>  0:25
CLOCK: [2022-04-30 Sat 22:55]--[2022-04-30 Sat 23:20] =>  0:25
CLOCK: [2022-04-30 Sat 22:29]--[2022-04-30 Sat 22:54] =>  0:25
CLOCK: [2022-04-30 Sat 22:04]--[2022-04-30 Sat 22:29] =>  0:25
CLOCK: [2022-04-30 Sat 21:39]--[2022-04-30 Sat 22:04] =>  0:25
CLOCK: [2022-04-30 Sat 21:04]--[2022-04-30 Sat 21:29] =>  0:25
CLOCK: [2022-04-30 Sat 20:09]--[2022-04-30 Sat 20:34] =>  0:25
CLOCK: [2022-04-30 Sat 19:40]--[2022-04-30 Sat 20:05] =>  0:25
CLOCK: [2022-04-30 Sat 19:15]--[2022-04-30 Sat 19:40] =>  0:25
CLOCK: [2022-04-30 Sat 17:15]--[2022-04-30 Sat 17:40] =>  0:25
CLOCK: [2022-04-30 Sat 16:06]--[2022-04-30 Sat 16:31] =>  0:25
CLOCK: [2022-04-30 Sat 15:41]--[2022-04-30 Sat 16:06] =>  0:25
CLOCK: [2022-04-30 Sat 15:15]--[2022-04-30 Sat 15:40] =>  0:25
CLOCK: [2022-04-30 Sat 14:50]--[2022-04-30 Sat 15:15] =>  0:25
CLOCK: [2022-04-30 Sat 11:28]--[2022-04-30 Sat 11:53] =>  0:25
:END:
更新のないファイルを検知して、issueを作成し、一覧コメントをつけるアクション。

- 更新のないファイル検知
- issue作成
- データを受け取って整形、コメント送信

#+caption: こんな感じのコメント
#+begin_src
- [ ] ./docs/ruby.org 2021-03-04 40days
- [ ] ./docs/python.org 2021-03-04 44days
#+end_src

*** 変数情報
コメントの最後で、実行した条件を表示する。
*** カウント
stale総数 / 検索対象数、 パーセント。
*** ファイル名をリンク化
** DONE git-linkを展開する拡張
CLOSED: [2022-09-19 Mon 12:23]
:LOGBOOK:
CLOCK: [2022-06-22 Wed 22:45]--[2022-06-22 Wed 23:10] =>  0:25
CLOCK: [2022-06-21 Tue 22:54]--[2022-06-21 Tue 23:19] =>  0:25
CLOCK: [2022-06-21 Tue 09:06]--[2022-06-21 Tue 09:31] =>  0:25
CLOCK: [2022-06-21 Tue 08:40]--[2022-06-21 Tue 09:05] =>  0:25
CLOCK: [2022-06-21 Tue 08:14]--[2022-06-21 Tue 08:39] =>  0:25
CLOCK: [2022-06-20 Mon 20:39]--[2022-06-20 Mon 21:04] =>  0:25
CLOCK: [2022-06-20 Mon 20:14]--[2022-06-20 Mon 20:39] =>  0:25
CLOCK: [2022-06-20 Mon 17:50]--[2022-06-20 Mon 18:15] =>  0:25
CLOCK: [2022-06-20 Mon 17:25]--[2022-06-20 Mon 17:50] =>  0:25
CLOCK: [2022-06-20 Mon 17:00]--[2022-06-20 Mon 17:25] =>  0:25
CLOCK: [2022-06-17 Fri 10:31]--[2022-06-17 Fri 10:56] =>  0:25
CLOCK: [2022-06-17 Fri 10:01]--[2022-06-17 Fri 10:26] =>  0:25
CLOCK: [2022-06-17 Fri 00:11]--[2022-06-17 Fri 00:36] =>  0:25
CLOCK: [2022-06-16 Thu 23:33]--[2022-06-16 Thu 23:58] =>  0:25
:END:
GitHub上でパーマリンクのコードが展開されるみたいに、リンクを評価するとコードを展開できるようにしたい。org-modeで使えれば便利だろう。
*** 構想
#+begin_src shell
echo "a"
#+end_src

#+RESULTS:
#+begin_results
a
#+end_results

と同様に、パーマリンクを書いて、評価する。元リンクもついているので、あとで元を辿ることもできる。ただこの場合の問題点は、シンタックスハイライトを効かせるのが難しいことか。いや、resultsにも効くな。とはいえ再評価すると消えてしまうのでビミョーではある。拡張子をそのまま結果に使えばよさそうだな。

#+begin_src gh-permalink
https://github.com/kijimaD/roam/blob/5519ac4f79470b6c33d77401bf5202c61951f8bb/20210615222732-project.org#L52
#+end_src

#+RESULTS:
#+begin_results shell
echo "aaaa"
#+end_results

普通の関数としても使えるが、org-babelのひとつとして使うのがしっくりくるな。解決したい課題: コードを貼り付けたいけど、元の場所も示しておきたいとき。あとから参照できなくなるのもあるし、引用的にも元リンクはほしい。

- リンク
- コード

問題は、org-babelを使うのが正しい方法なのか、ということだ。

- リンクと展開を別にできる
- 再評価可能
*** 実装
- リンクをパースする部分
  - サイトを入れ替えられるようにする
- 取得する部分
  - サイトを入れ替えられるようにする
- 描画する部分
  - すべてのサイトで共通
** DONE やったことの3D/VR表示(MVP)
CLOSED: [2022-10-03 Mon 00:52]
:LOGBOOK:
CLOCK: [2022-09-21 Wed 19:47]--[2022-09-21 Wed 20:12] =>  0:25
CLOCK: [2022-09-21 Wed 11:42]--[2022-09-21 Wed 12:07] =>  0:25
CLOCK: [2022-09-21 Wed 11:17]--[2022-09-21 Wed 11:42] =>  0:25
CLOCK: [2022-09-21 Wed 10:50]--[2022-09-21 Wed 11:15] =>  0:25
CLOCK: [2022-09-21 Wed 10:24]--[2022-09-21 Wed 10:49] =>  0:25
CLOCK: [2022-09-21 Wed 09:49]--[2022-09-21 Wed 10:14] =>  0:25
CLOCK: [2022-09-21 Wed 09:24]--[2022-09-21 Wed 09:49] =>  0:25
CLOCK: [2022-09-21 Wed 08:59]--[2022-09-21 Wed 09:24] =>  0:25
CLOCK: [2022-09-21 Wed 08:33]--[2022-09-21 Wed 08:58] =>  0:25
CLOCK: [2022-09-20 Tue 22:31]--[2022-09-20 Tue 22:56] =>  0:25
CLOCK: [2022-09-20 Tue 22:06]--[2022-09-20 Tue 22:31] =>  0:25
CLOCK: [2022-09-20 Tue 21:33]--[2022-09-20 Tue 22:06] =>  0:33
CLOCK: [2022-09-20 Tue 21:08]--[2022-09-20 Tue 21:33] =>  0:25
CLOCK: [2022-09-20 Tue 20:43]--[2022-09-20 Tue 21:08] =>  0:25
CLOCK: [2022-09-20 Tue 17:15]--[2022-09-20 Tue 17:40] =>  0:25
CLOCK: [2022-09-20 Tue 16:44]--[2022-09-20 Tue 17:09] =>  0:25
CLOCK: [2022-09-20 Tue 16:12]--[2022-09-20 Tue 16:37] =>  0:25
CLOCK: [2022-09-20 Tue 15:47]--[2022-09-20 Tue 16:12] =>  0:25
CLOCK: [2022-09-20 Tue 15:21]--[2022-09-20 Tue 15:46] =>  0:25
CLOCK: [2022-09-20 Tue 14:14]--[2022-09-20 Tue 14:39] =>  0:25
CLOCK: [2022-09-20 Tue 12:17]--[2022-09-20 Tue 12:42] =>  0:25
CLOCK: [2022-09-20 Tue 11:06]--[2022-09-20 Tue 11:31] =>  0:25
:END:
何かやったことを3D表示したい。[[id:90c6b715-9324-46ce-a354-63d09403b066][Git]]とか組み合わせられないか。何かものの収集は、形があるのでたくさんやるほど結果が目に見えやすい。般若心経、ゴミヘビ。どこか行く系は距離で苦労が理解しやすい。

収集やかけた労力によってもっと好きになっていく循環ってある。みうらじゅんはそんな感じのことをよく言っている。

- データ構造
  - 種別
    - リポジトリ
    - Web
      - 本
      - Web
  - URL
  - 識別名

とりあえず文字表示は抜きにして、立方体と色で表示する。タスク数は、roamにhttpリクエストしてgrepする…。org側でjson出力とかできたらそれを取得するようにしたい。なかなか役立つ感じがするな。

途中まで完了。タスク表示はできてない。

*** org-roamのjson出力
タスクの情報を加工しやすくする。roam以外にも対応させたいが、メインは自分使用なので管理が2重になるのは避けたい。
*** roamの各ページで表示する
各ページでjson表示できるなら、roamの各ページで、タスクモデルを表示できそう。
*** マウスオーバーで情報表示
立方体のマウスオーバーでそのタスク名とリンクを出してくれたら最高。難しそうだが、価値はある。
*** 入力方法の一般化
入力方式の規定、ブラウザでタスクの入力をできるようにすれば、ほかの人も利用できる。
*** [[id:ad1527ee-63b3-4a9b-a553-10899f57c234][TypeScript]]化
整備しやすいようにする。また入門するか。
*** 表示方法をわかりやすくする
今の積み重なっていく方式はベストでないように見える。ビジュアル的にもビミョーなので改善する。展示会でズラーっと並べられたゴムヘビのように、見て沸き立つものにしたい。

ベストなのはすべてのオブジェクトに画像と文字をつけることで、やったことがすべて違う形、見え方を持たせることだ。そういうのが100、200並んだのは遠くから見ても壮観だし、近くからじっくり見ることもできる。円周上に並べるのが良いのかな。
** DONE github actionsライクなランナー [15/15]
CLOSED: [2023-02-26 Sun 13:51]
:LOGBOOK:
CLOCK: [2023-02-16 Thu 21:18]--[2023-02-16 Thu 21:43] =>  0:25
CLOCK: [2023-02-12 Sun 20:21]--[2023-02-12 Sun 20:46] =>  0:25
CLOCK: [2023-02-12 Sun 16:53]--[2023-02-12 Sun 17:18] =>  0:25
CLOCK: [2023-02-12 Sun 16:18]--[2023-02-12 Sun 16:43] =>  0:25
CLOCK: [2023-02-12 Sun 15:53]--[2023-02-12 Sun 16:18] =>  0:25
CLOCK: [2023-02-12 Sun 15:28]--[2023-02-12 Sun 15:53] =>  0:25
CLOCK: [2023-02-12 Sun 14:59]--[2023-02-12 Sun 15:24] =>  0:25
CLOCK: [2023-02-12 Sun 12:51]--[2023-02-12 Sun 13:16] =>  0:25
CLOCK: [2023-02-12 Sun 11:50]--[2023-02-12 Sun 12:15] =>  0:25
CLOCK: [2023-02-12 Sun 11:24]--[2023-02-12 Sun 11:49] =>  0:25
CLOCK: [2023-02-12 Sun 10:58]--[2023-02-12 Sun 11:23] =>  0:25
CLOCK: [2023-02-12 Sun 10:30]--[2023-02-12 Sun 10:55] =>  0:25
:END:
必要なツールがインストールされてるか、宣言的に書いて診断するツール。なかったら実行できそうな場合は自動実行させる。

yamlで書き、ローカルで実行する。別にymlでなくてよくない、という感じはする。うむむ、目的がよくわからなくなってきた。[[id:2d35ac9e-554a-4142-bba7-3c614cbfe4c4][GitHub Actions]]のクローンを作ってみるでよくないか。面白そうだし、要件はこの上なく明確だ。

#+begin_src yaml
jobs:
  job_a:
    description: test
    steps:
      - name: a
        run: echo hello
#+end_src

実行結果が確認できる。

#+caption: 実行結果を標準出力で確認する
#+begin_src
- job_a ✓
  - a ✓
    ログ...
  - b ✓
    ログ...
- job_b ✓
  - c skip
    ログ...
  - d ✓
    ログ...
#+end_src

目標としては、[[id:2d35ac9e-554a-4142-bba7-3c614cbfe4c4][GitHub Actions]]用のymlをそのまま実行できること。

*** DONE データ構造を定義する
CLOSED: [2023-02-12 Sun 17:25]
:PROPERTIES:
:Effort:   2:00
:END:

- jobs(workflow)
  - job
    - step
      - task
      - task
  - job
    - step
      - task
*** DONE yamlをパースする
CLOSED: [2023-02-12 Sun 22:02]
:LOGBOOK:
CLOCK: [2023-02-12 Sun 21:30]--[2023-02-12 Sun 21:55] =>  0:25
CLOCK: [2023-02-12 Sun 21:02]--[2023-02-12 Sun 21:27] =>  0:25
:END:
設定ファイルをパースする。
*** DONE 複数steps実行
CLOSED: [2023-02-13 Mon 23:44]
:LOGBOOK:
CLOCK: [2023-02-12 Sun 23:24]--[2023-02-12 Sun 23:49] =>  0:25
CLOCK: [2023-02-12 Sun 22:42]--[2023-02-12 Sun 23:07] =>  0:25
CLOCK: [2023-02-12 Sun 22:12]--[2023-02-12 Sun 22:37] =>  0:25
:END:
stepsは順次実行。
*** CLOSE jobの並列処理
CLOSED: [2023-02-26 Sun 13:51]
:LOGBOOK:
CLOCK: [2023-02-16 Thu 00:25]--[2023-02-16 Thu 00:50] =>  0:25
CLOCK: [2023-02-15 Wed 23:35]--[2023-02-16 Thu 00:00] =>  0:25
CLOCK: [2023-02-13 Mon 23:44]--[2023-02-14 Tue 00:09] =>  0:25
:END:
jobは並列実行。

- どうしよう。ranを参考にしようにも、よくわからない
  - 何かのプログラミングパターンなんだ
- 単にゴルーチンにすればいいような。とりあえずそれでやってみる

*** DONE ログを別フィールドにする
CLOSED: [2023-02-18 Sat 17:06]
:LOGBOOK:
CLOCK: [2023-02-17 Fri 00:36]--[2023-02-17 Fri 01:01] =>  0:25
CLOCK: [2023-02-17 Fri 00:10]--[2023-02-17 Fri 00:35] =>  0:25
CLOCK: [2023-02-16 Thu 23:44]--[2023-02-17 Fri 00:09] =>  0:25
CLOCK: [2023-02-16 Thu 23:19]--[2023-02-16 Thu 23:44] =>  0:25
CLOCK: [2023-02-16 Thu 22:51]--[2023-02-16 Thu 23:16] =>  0:25
CLOCK: [2023-02-16 Thu 22:26]--[2023-02-16 Thu 22:51] =>  0:25
CLOCK: [2023-02-16 Thu 21:43]--[2023-02-16 Thu 22:08] =>  0:25
:END:
結果画面でjob, stepごとに一気に表示する。
*** DONE 実行結果にインデントをつける
CLOSED: [2023-02-18 Sat 17:12]
cmd.Start()したときに自動で入ってしまうが、これにインデントをつけるにはどうしたらよいのだろう。

実行時は別のstdoutではない別のwriterに入れておいて、実行したあとにインデントをつけてstdoutに送信する。
*** DONE envキーワード追加
CLOSED: [2023-02-23 Thu 18:50]
:LOGBOOK:
CLOCK: [2023-02-23 Thu 18:20]--[2023-02-23 Thu 18:45] =>  0:25
CLOCK: [2023-02-23 Thu 17:36]--[2023-02-23 Thu 18:01] =>  0:25
:END:
環境変数追加。

[[id:2d35ac9e-554a-4142-bba7-3c614cbfe4c4][GitHub Actions]]にはworkflow, job, stepであるみたいだが、とりあえずstepだけを実装する。
*** DONE ifキーワード追加
CLOSED: [2023-02-18 Sat 20:40]
:LOGBOOK:
CLOCK: [2023-02-18 Sat 19:27]--[2023-02-18 Sat 19:52] =>  0:25
CLOCK: [2023-02-18 Sat 18:57]--[2023-02-18 Sat 19:22] =>  0:25
CLOCK: [2023-02-18 Sat 18:13]--[2023-02-18 Sat 18:38] =>  0:25
CLOCK: [2023-02-18 Sat 17:42]--[2023-02-18 Sat 18:07] =>  0:25
CLOCK: [2023-02-18 Sat 17:12]--[2023-02-18 Sat 17:37] =>  0:25
:END:
if条件式追加。
*** DONE logを楽に保存できるようにする
CLOSED: [2023-02-23 Thu 15:59]
:LOGBOOK:
CLOCK: [2023-02-23 Thu 15:19]--[2023-02-23 Thu 15:44] =>  0:25
CLOCK: [2023-02-23 Thu 14:50]--[2023-02-23 Thu 15:15] =>  0:25
CLOCK: [2023-02-23 Thu 14:25]--[2023-02-23 Thu 14:50] =>  0:25
CLOCK: [2023-02-23 Thu 13:51]--[2023-02-23 Thu 14:16] =>  0:25
CLOCK: [2023-02-23 Thu 10:22]--[2023-02-23 Thu 10:47] =>  0:25
CLOCK: [2023-02-23 Thu 09:49]--[2023-02-23 Thu 10:14] =>  0:25
CLOCK: [2023-02-23 Thu 09:22]--[2023-02-23 Thu 09:47] =>  0:25
CLOCK: [2023-02-23 Thu 08:57]--[2023-02-23 Thu 09:22] =>  0:25
CLOCK: [2023-02-22 Wed 23:33]--[2023-02-22 Wed 23:58] =>  0:25
CLOCK: [2023-02-22 Wed 23:06]--[2023-02-22 Wed 23:31] =>  0:25
CLOCK: [2023-02-22 Wed 22:41]--[2023-02-22 Wed 23:06] =>  0:25
CLOCK: [2023-02-22 Wed 22:04]--[2023-02-22 Wed 22:29] =>  0:25
CLOCK: [2023-02-22 Wed 21:39]--[2023-02-22 Wed 22:04] =>  0:25
CLOCK: [2023-02-21 Tue 23:28]--[2023-02-21 Tue 23:53] =>  0:25
CLOCK: [2023-02-21 Tue 23:03]--[2023-02-21 Tue 23:28] =>  0:25
CLOCK: [2023-02-20 Mon 22:48]--[2023-02-20 Mon 23:13] =>  0:25
CLOCK: [2023-02-20 Mon 22:21]--[2023-02-20 Mon 22:46] =>  0:25
CLOCK: [2023-02-20 Mon 21:47]--[2023-02-20 Mon 22:12] =>  0:25
CLOCK: [2023-02-20 Mon 20:57]--[2023-02-20 Mon 21:22] =>  0:25
CLOCK: [2023-02-20 Mon 20:30]--[2023-02-20 Mon 20:55] =>  0:25
CLOCK: [2023-02-20 Mon 20:02]--[2023-02-20 Mon 20:27] =>  0:25
CLOCK: [2023-02-19 Sun 23:09]--[2023-02-19 Sun 23:34] =>  0:25
CLOCK: [2023-02-19 Sun 22:35]--[2023-02-19 Sun 23:00] =>  0:25
CLOCK: [2023-02-19 Sun 22:03]--[2023-02-19 Sun 22:28] =>  0:25
CLOCK: [2023-02-19 Sun 21:34]--[2023-02-19 Sun 21:59] =>  0:25
:END:
dockerの実装を参考にする。

#+begin_export
=> [builder 2/5] RUN apt-get update     && apt-get install -y --no-install-recommends     upx-ucl
=> => # Get:1 http://deb.debian.org/debian buster InRelease [122 kB]
#+end_export

が途中経過。
*** DONE steps数表示
CLOSED: [2023-02-23 Thu 16:31]
:LOGBOOK:
CLOCK: [2023-02-23 Thu 16:24]--[2023-02-23 Thu 16:31] =>  0:07
CLOCK: [2023-02-23 Thu 15:59]--[2023-02-23 Thu 16:24] =>  0:25
:END:
steps数を表示してないので追加する。
*** DONE working_directory追加
CLOSED: [2023-02-23 Thu 17:34]
:LOGBOOK:
CLOCK: [2023-02-23 Thu 17:05]--[2023-02-23 Thu 17:30] =>  0:25
:END:
cmdは独立してるので、単にフィールドに代入するだけでできた。

working_directory追加。

- definition追加
- 最初のディレクトリを記録
- 実行前に指定ディレクトリに移動
- 実行後に戻る

*** DONE 実行結果を表示する
CLOSED: [2023-02-26 Sun 13:50]
:PROPERTIES:
:Effort:   2:00
:END:
:LOGBOOK:
CLOCK: [2023-02-26 Sun 13:14]--[2023-02-26 Sun 13:39] =>  0:25
CLOCK: [2023-02-26 Sun 12:39]--[2023-02-26 Sun 13:04] =>  0:25
CLOCK: [2023-02-26 Sun 12:14]--[2023-02-26 Sun 12:39] =>  0:25
CLOCK: [2023-02-26 Sun 11:49]--[2023-02-26 Sun 12:14] =>  0:25
CLOCK: [2023-02-26 Sun 11:24]--[2023-02-26 Sun 11:49] =>  0:25
:END:
並列処理するとめちゃくちゃになるので結果表示があると良い。成功、失敗、スキップあたりがあるとよさそう。
*** DONE 設定ファイル指定オプション
CLOSED: [2023-02-23 Thu 20:04]
:LOGBOOK:
CLOCK: [2023-02-23 Thu 19:58]--[2023-02-23 Thu 20:04] =>  0:06
CLOCK: [2023-02-23 Thu 19:32]--[2023-02-23 Thu 19:58] =>  0:26
:END:
設定ファイルをコマンドラインオプションで指定できるようにする。また、デフォルトファイルを設定する。
*** CLOSE 使い方のサンプルを作る
CLOSED: [2023-02-26 Sun 13:50]
自分で使うサンプルを示す。
*** DONE table driven test にする
CLOSED: [2023-02-23 Thu 19:20]
:LOGBOOK:
CLOCK: [2023-02-23 Thu 19:04]--[2023-02-23 Thu 19:20] =>  0:16
:END:
テストの重複が多いので書き換える。
** DONE 簡単なlintを作る
CLOSED: [2023-02-28 Tue 21:46]
:PROPERTIES:
:Effort:   4:00
:END:
:LOGBOOK:
CLOCK: [2023-02-27 Mon 23:37]--[2023-02-28 Tue 00:02] =>  0:25
CLOCK: [2023-02-27 Mon 23:12]--[2023-02-27 Mon 23:37] =>  0:25
CLOCK: [2023-02-27 Mon 22:36]--[2023-02-27 Mon 23:01] =>  0:25
:END:

とりあえず識別子を判定するlint、テストをほぼコピペだけど作成した。
** DONE Golangの全カバレッジ率を表示したHTML
CLOSED: [2023-03-04 Sat 11:25]
:LOGBOOK:
CLOCK: [2023-03-04 Sat 00:04]--[2023-03-04 Sat 00:29] =>  0:25
CLOCK: [2023-03-03 Fri 23:39]--[2023-03-04 Sat 00:04] =>  0:25
:END:

すぐできた。

あると便利そう。すでにある可能性はある。
** DONE oav機能追加
CLOSED: [2023-03-17 Fri 21:20]
:LOGBOOK:
CLOCK: [2023-03-17 Fri 20:30]--[2023-03-17 Fri 20:55] =>  0:25
CLOCK: [2023-03-17 Fri 00:13]--[2023-03-17 Fri 00:38] =>  0:25
CLOCK: [2023-03-16 Thu 23:47]--[2023-03-17 Fri 00:12] =>  0:25
CLOCK: [2023-03-15 Wed 23:28]--[2023-03-15 Wed 23:53] =>  0:25
CLOCK: [2023-03-15 Wed 23:03]--[2023-03-15 Wed 23:28] =>  0:25
CLOCK: [2023-03-15 Wed 22:00]--[2023-03-15 Wed 22:25] =>  0:25
CLOCK: [2023-03-15 Wed 21:14]--[2023-03-15 Wed 21:39] =>  0:25
:END:
- [X] 連続でテストを実行できるようにする
  - テストで再現させる
  - load doc: error converting YAML to JSON: EOF
  - 一度読み込んだあとはこれが出るから、引数の値が変わっているように見える。ポインタではないけど
  - 一度走らせたあと、schemafileの入るbyteが空になるのを確認
  - Readerは、一度読み込みが終わると次読み込むときは中身が空になる。状態を保持している
  - bytes.Bufferを使うようにする
- [X] コマンドとして、パスをダンプできるようにする
- [X] GET以外に対応する
- [X] パラメータ追加に対応する
- [X] 出る画面をわかりやすくする
** DONE プロジェクトで使う静的解析ツールを作る
CLOSED: [2023-03-18 Sat 15:59]
:LOGBOOK:
CLOCK: [2023-02-26 Sun 22:17]--[2023-02-26 Sun 22:42] =>  0:25
CLOCK: [2023-02-26 Sun 21:52]--[2023-02-26 Sun 22:17] =>  0:25
CLOCK: [2023-02-26 Sun 20:01]--[2023-02-26 Sun 20:26] =>  0:25
CLOCK: [2023-02-26 Sun 19:07]--[2023-02-26 Sun 19:32] =>  0:25
CLOCK: [2023-02-26 Sun 18:03]--[2023-02-26 Sun 18:28] =>  0:25
CLOCK: [2023-02-26 Sun 17:28]--[2023-02-26 Sun 17:53] =>  0:25
CLOCK: [2023-02-26 Sun 16:51]--[2023-02-26 Sun 17:16] =>  0:25
CLOCK: [2023-02-26 Sun 16:24]--[2023-02-26 Sun 16:49] =>  0:25
CLOCK: [2023-02-26 Sun 15:23]--[2023-02-26 Sun 15:48] =>  0:25
CLOCK: [2023-02-26 Sun 14:51]--[2023-02-26 Sun 15:16] =>  0:25
CLOCK: [2023-02-26 Sun 13:51]--[2023-02-26 Sun 14:16] =>  0:25
:END:

[[id:7cacbaa3-3995-41cf-8b72-58d6e07468b1][Go]]では簡単にlinterが作れるようだ。

- モックを使ったとき、明示的にtimesを呼び出していることを確かめる
- 無意味な関数コメントを検知
** CLOSE Slackで倉庫番
CLOSED: [2023-05-27 Sat 21:11]
:LOGBOOK:
CLOCK: [2023-01-21 Sat 23:24]--[2023-01-21 Sat 23:49] =>  0:25
CLOCK: [2023-01-21 Sat 22:40]--[2023-01-21 Sat 23:05] =>  0:25
CLOCK: [2023-01-21 Sat 22:15]--[2023-01-21 Sat 22:40] =>  0:25
CLOCK: [2023-01-21 Sat 21:39]--[2023-01-21 Sat 22:04] =>  0:25
CLOCK: [2023-01-21 Sat 21:14]--[2023-01-21 Sat 21:39] =>  0:25
CLOCK: [2023-01-21 Sat 20:49]--[2023-01-21 Sat 21:14] =>  0:25
CLOCK: [2023-01-21 Sat 19:02]--[2023-01-21 Sat 19:27] =>  0:25
:END:
- [[https://kouki.hatenadiary.com/entry/2016/07/19/005006][Slackで将棋を動かしてみる - Lento con forza]]

のように、SlackをゲームのUIとして用いることができる。
*** DONE プレイヤーが移動できるようにする
:LOGBOOK:
CLOCK: [2023-01-22 Sun 20:10]--[2023-01-22 Sun 20:35] =>  0:25
CLOCK: [2023-01-22 Sun 19:45]--[2023-01-22 Sun 20:10] =>  0:25
CLOCK: [2023-01-22 Sun 19:14]--[2023-01-22 Sun 19:39] =>  0:25
CLOCK: [2023-01-22 Sun 18:14]--[2023-01-22 Sun 18:39] =>  0:25
CLOCK: [2023-01-22 Sun 14:14]--[2023-01-22 Sun 14:39] =>  0:25
CLOCK: [2023-01-22 Sun 13:49]--[2023-01-22 Sun 14:14] =>  0:25
CLOCK: [2023-01-22 Sun 13:22]--[2023-01-22 Sun 13:47] =>  0:25
CLOCK: [2023-01-22 Sun 12:00]--[2023-01-22 Sun 12:25] =>  0:25
CLOCK: [2023-01-22 Sun 11:35]--[2023-01-22 Sun 12:00] =>  0:25
CLOCK: [2023-01-22 Sun 10:59]--[2023-01-22 Sun 11:25] =>  0:26
CLOCK: [2023-01-22 Sun 10:34]--[2023-01-22 Sun 10:59] =>  0:25
CLOCK: [2023-01-22 Sun 01:37]--[2023-01-22 Sun 02:02] =>  0:25
CLOCK: [2023-01-22 Sun 01:11]--[2023-01-22 Sun 01:36] =>  0:25
CLOCK: [2023-01-22 Sun 00:44]--[2023-01-22 Sun 01:09] =>  0:25
:END:
コマンドラインで移動できるようにする。壁やマップ外には移動できない。
*** DONE 荷物を追加する
配置できるようにする。
*** DONE 荷物を押せるようにする
:LOGBOOK:
CLOCK: [2023-01-27 Fri 23:37]--[2023-01-28 Sat 00:02] =>  0:25
CLOCK: [2023-01-27 Fri 00:31]--[2023-01-27 Fri 00:56] =>  0:25
CLOCK: [2023-01-24 Tue 00:39]--[2023-01-24 Tue 00:58] =>  0:19
CLOCK: [2023-01-24 Tue 00:12]--[2023-01-24 Tue 00:37] =>  0:25
CLOCK: [2023-01-23 Mon 23:36]--[2023-01-24 Tue 00:01] =>  0:25
CLOCK: [2023-01-23 Mon 23:11]--[2023-01-23 Mon 23:36] =>  0:25
CLOCK: [2023-01-23 Mon 22:13]--[2023-01-23 Mon 22:38] =>  0:25
CLOCK: [2023-01-23 Mon 21:48]--[2023-01-23 Mon 22:13] =>  0:25
CLOCK: [2023-01-22 Sun 23:28]--[2023-01-22 Sun 23:53] =>  0:25
CLOCK: [2023-01-22 Sun 21:32]--[2023-01-22 Sun 21:57] =>  0:25
CLOCK: [2023-01-22 Sun 21:07]--[2023-01-22 Sun 21:32] =>  0:25
CLOCK: [2023-01-22 Sun 20:42]--[2023-01-22 Sun 21:07] =>  0:25
:END:
プレイヤーが移動する方向に荷物があって、空きスペースがあるなら移動できる。

- プレイヤーと荷物の衝突判定。
- 荷物と衝突した場合は、荷物で再度移動を試す。その方向に動けるなら、荷物とプレイヤーを動かす。荷物を動かせない場合は何もしない
- いつのまにかプレイヤーが分身していた
  - 移動後に消えてない。コピーが作られているようだ
- ポインタにしたらなぜか荷物entityがゴールentityになる
- keyの座標と、entityの持ってる座標が一致してない

*** DONE クリア条件を追加する
:LOGBOOK:
CLOCK: [2023-01-28 Sat 10:28]--[2023-01-28 Sat 10:53] =>  0:25
CLOCK: [2023-01-26 Thu 23:56]--[2023-01-27 Fri 00:21] =>  0:25
CLOCK: [2023-01-26 Thu 00:28]--[2023-01-26 Thu 00:53] =>  0:25
CLOCK: [2023-01-25 Wed 23:52]--[2023-01-26 Thu 00:17] =>  0:25
CLOCK: [2023-01-25 Wed 23:27]--[2023-01-25 Wed 23:52] =>  0:25
CLOCK: [2023-01-25 Wed 23:02]--[2023-01-25 Wed 23:27] =>  0:25
CLOCK: [2023-01-25 Wed 22:37]--[2023-01-25 Wed 23:02] =>  0:25
CLOCK: [2023-01-25 Wed 00:50]--[2023-01-25 Wed 01:15] =>  0:25
CLOCK: [2023-01-25 Wed 00:15]--[2023-01-25 Wed 00:40] =>  0:25
CLOCK: [2023-01-24 Tue 23:50]--[2023-01-25 Wed 00:15] =>  0:25
CLOCK: [2023-01-24 Tue 23:25]--[2023-01-24 Tue 23:50] =>  0:25
CLOCK: [2023-01-24 Tue 23:00]--[2023-01-24 Tue 23:25] =>  0:25
:END:
すべて適当な位置に置くとクリア。
*** DONE 地図をテキストから読み込む
:PROPERTIES:
:Effort:   2:00
:END:
:LOGBOOK:
CLOCK: [2023-01-28 Sat 14:55]--[2023-01-28 Sat 15:20] =>  0:25
CLOCK: [2023-01-28 Sat 14:17]--[2023-01-28 Sat 14:42] =>  0:25
CLOCK: [2023-01-28 Sat 13:52]--[2023-01-28 Sat 14:17] =>  0:25
CLOCK: [2023-01-28 Sat 13:24]--[2023-01-28 Sat 13:49] =>  0:25
CLOCK: [2023-01-28 Sat 12:55]--[2023-01-28 Sat 13:20] =>  0:25
CLOCK: [2023-01-28 Sat 12:11]--[2023-01-28 Sat 12:36] =>  0:25
:END:
手作りで作って、ファイル化して複数読み込めるようにする。
*** DONE goalをtileに移動
CLOSED: [2023-01-28 Sat 19:59]
:LOGBOOK:
CLOCK: [2023-01-28 Sat 19:22]--[2023-01-28 Sat 19:47] =>  0:25
CLOCK: [2023-01-28 Sat 18:43]--[2023-01-28 Sat 19:08] =>  0:25
CLOCK: [2023-01-28 Sat 18:18]--[2023-01-28 Sat 18:43] =>  0:25
CLOCK: [2023-01-28 Sat 17:33]--[2023-01-28 Sat 17:58] =>  0:25
:END:
動く可能性がないので。
*** DONE 地図生成時のバリデーション
CLOSED: [2023-01-28 Sat 23:09]
:LOGBOOK:
CLOCK: [2023-01-28 Sat 19:59]--[2023-01-28 Sat 20:24] =>  0:25
:END:
縦横が同じサイズでないとエラーを吐くようにする。
*** DONE ファイル・ディレクトリの整理
CLOSED: [2023-01-28 Sat 23:09]
:PROPERTIES:
:Effort:   1:00
:END:
どこにあるかわからなくなってきた。
*** DONE 地図を自動生成できるようにする[100%]
CLOSED: [2023-01-30 Mon 22:44]
:PROPERTIES:
:Effort:   5:00
:END:
:LOGBOOK:
CLOCK: [2023-01-30 Mon 21:17]--[2023-01-30 Mon 21:42] =>  0:25
CLOCK: [2023-01-30 Mon 20:51]--[2023-01-30 Mon 21:16] =>  0:25
CLOCK: [2023-01-30 Mon 20:26]--[2023-01-30 Mon 20:51] =>  0:25
CLOCK: [2023-01-30 Mon 19:59]--[2023-01-30 Mon 20:24] =>  0:25
CLOCK: [2023-01-29 Sun 23:20]--[2023-01-29 Sun 23:45] =>  0:25
CLOCK: [2023-01-29 Sun 22:55]--[2023-01-29 Sun 23:20] =>  0:25
CLOCK: [2023-01-29 Sun 22:29]--[2023-01-29 Sun 22:54] =>  0:25
CLOCK: [2023-01-29 Sun 21:36]--[2023-01-29 Sun 22:01] =>  0:25
CLOCK: [2023-01-29 Sun 21:03]--[2023-01-29 Sun 21:28] =>  0:25
CLOCK: [2023-01-29 Sun 20:38]--[2023-01-29 Sun 21:03] =>  0:25
CLOCK: [2023-01-29 Sun 20:12]--[2023-01-29 Sun 20:37] =>  0:25
CLOCK: [2023-01-29 Sun 19:31]--[2023-01-29 Sun 19:56] =>  0:25
CLOCK: [2023-01-29 Sun 19:06]--[2023-01-29 Sun 19:31] =>  0:25
CLOCK: [2023-01-29 Sun 18:25]--[2023-01-29 Sun 18:50] =>  0:25
CLOCK: [2023-01-29 Sun 17:57]--[2023-01-29 Sun 18:22] =>  0:25
CLOCK: [2023-01-29 Sun 10:47]--[2023-01-29 Sun 11:12] =>  0:25
CLOCK: [2023-01-29 Sun 10:22]--[2023-01-29 Sun 10:47] =>  0:25
CLOCK: [2023-01-28 Sat 23:28]--[2023-01-28 Sat 23:53] =>  0:25
CLOCK: [2023-01-28 Sat 23:03]--[2023-01-28 Sat 23:28] =>  0:25
CLOCK: [2023-01-28 Sat 22:38]--[2023-01-28 Sat 23:03] =>  0:25
CLOCK: [2023-01-28 Sat 22:09]--[2023-01-28 Sat 22:34] =>  0:25
CLOCK: [2023-01-28 Sat 20:32]--[2023-01-28 Sat 20:58] =>  0:26
CLOCK: [2023-01-28 Sat 17:08]--[2023-01-28 Sat 17:33] =>  0:25
:END:
レベルを指定して生成してくれるようにする。生成ロジックを入れ替えられるように設計する。

- [X] プレーンなマップ生成
- [X] ランダムにゴールと荷物配置
- [X] ✓を定数にする
- [X] 壁をランダムに生成する
- [X] 逆に動かす関数作成
- [X] ランダムに動かす
*** DONE CUIモードに組み込む
CLOSED: [2023-01-30 Mon 22:44]
:PROPERTIES:
:Effort:   1:00
:END:

ステージ生成を適用させる。
*** DONE 最初からリセット機能
CLOSED: [2023-02-02 Thu 00:53]
:PROPERTIES:
:Effort:   2:00
:END:
:LOGBOOK:
CLOCK: [2023-02-01 Wed 23:32]--[2023-02-01 Wed 23:57] =>  0:25
CLOCK: [2023-02-01 Wed 00:19]--[2023-02-01 Wed 00:44] =>  0:25
CLOCK: [2023-01-31 Tue 23:53]--[2023-02-01 Wed 00:18] =>  0:25
CLOCK: [2023-01-31 Tue 23:28]--[2023-01-31 Tue 23:53] =>  0:25
CLOCK: [2023-01-30 Mon 23:57]--[2023-01-31 Tue 00:22] =>  0:25
CLOCK: [2023-01-30 Mon 23:32]--[2023-01-30 Mon 23:57] =>  0:25
:END:

- 動けなくなったら最初の位置へリセットできるようにする
  - 変わらないな
  - スライスのメモリアドレスは違う
  - が、変更内容を明らかに共有しているように見える、ポインタが同じなのだろう
  - スライスEntitiesの中身はEntity構造体。構造体の中には、ポインタのフィールドもある。たとえばPosはポインタでないと移動を反映できないのでポインタにしている
  - ポインタをコピーしても、値は戻らない。向いてる先は同じ値なので
  - イテレートして手動でコピーするしかないのか
*** CLOSE サーバモード
CLOSED: [2023-05-27 Sat 21:11]
echoで処理できるようにする。現在の地図と、移動方向を送信すると移動結果を返す。

*** CLOSE 統計保存
CLOSED: [2023-05-27 Sat 21:11]
何かしらデータベースの機能を使う。

*** CLOSE デプロイ
CLOSED: [2023-05-27 Sat 21:11]
:LOGBOOK:
CLOCK: [2023-02-11 Sat 16:35]--[2023-02-11 Sat 17:00] =>  0:25
:END:

サーバレスでどこかに上げる。
** DONE webサーバをスクラッチ実装する
CLOSED: [2023-07-15 Sat 20:22]
:LOGBOOK:
CLOCK: [2023-07-13 Thu 23:31]--[2023-07-13 Thu 23:56] =>  0:25
CLOCK: [2023-07-13 Thu 23:01]--[2023-07-13 Thu 23:26] =>  0:25
CLOCK: [2023-07-13 Thu 22:33]--[2023-07-13 Thu 22:58] =>  0:25
CLOCK: [2023-07-13 Thu 22:07]--[2023-07-13 Thu 22:32] =>  0:25
CLOCK: [2023-07-12 Wed 23:16]--[2023-07-12 Wed 23:41] =>  0:25
CLOCK: [2023-07-12 Wed 22:50]--[2023-07-12 Wed 23:15] =>  0:25
CLOCK: [2023-07-12 Wed 22:25]--[2023-07-12 Wed 22:50] =>  0:25
CLOCK: [2023-07-12 Wed 21:30]--[2023-07-12 Wed 21:55] =>  0:25
CLOCK: [2023-07-12 Wed 00:48]--[2023-07-12 Wed 01:13] =>  0:25
CLOCK: [2023-07-11 Tue 23:29]--[2023-07-11 Tue 23:54] =>  0:25
CLOCK: [2023-07-11 Tue 23:04]--[2023-07-11 Tue 23:29] =>  0:25
CLOCK: [2023-07-11 Tue 00:11]--[2023-07-11 Tue 00:36] =>  0:25
CLOCK: [2023-07-10 Mon 23:32]--[2023-07-10 Mon 23:57] =>  0:25
CLOCK: [2023-07-10 Mon 22:52]--[2023-07-10 Mon 23:17] =>  0:25
CLOCK: [2023-07-10 Mon 22:27]--[2023-07-10 Mon 22:52] =>  0:25
CLOCK: [2023-07-10 Mon 22:02]--[2023-07-10 Mon 22:27] =>  0:25
CLOCK: [2023-07-10 Mon 00:09]--[2023-07-10 Mon 00:34] =>  0:25
CLOCK: [2023-07-09 Sun 23:42]--[2023-07-10 Mon 00:07] =>  0:25
CLOCK: [2023-07-09 Sun 22:57]--[2023-07-09 Sun 23:22] =>  0:25
CLOCK: [2023-07-09 Sun 22:32]--[2023-07-09 Sun 22:57] =>  0:25
CLOCK: [2023-07-09 Sun 22:06]--[2023-07-09 Sun 22:31] =>  0:25
CLOCK: [2023-07-09 Sun 21:41]--[2023-07-09 Sun 22:06] =>  0:25
CLOCK: [2023-07-09 Sun 21:15]--[2023-07-09 Sun 21:40] =>  0:25
CLOCK: [2023-07-09 Sun 19:54]--[2023-07-09 Sun 20:19] =>  0:25
CLOCK: [2023-07-09 Sun 19:28]--[2023-07-09 Sun 19:53] =>  0:25
CLOCK: [2023-07-09 Sun 19:03]--[2023-07-09 Sun 19:28] =>  0:25
CLOCK: [2023-07-09 Sun 16:08]--[2023-07-09 Sun 16:33] =>  0:25
:END:

システムコールを使ってやる。

- [X] 標準入出力
- [X] ソケットを使う
** DONE 倉庫番
CLOSED: [2023-07-20 Thu 23:57]
でかいのに取り組むより、これくらいがよい。
- 空間の実装方法が理解できる。
** CLOSE 経済ゲーム
CLOSED: [2023-07-20 Thu 23:58]
Practical Ruby Projectsに書いてあったやつ。経済シミュレーター。[[id:b4f27aef-22ec-45c0-be50-810f3a0cf9bc][Money]]の知識と絡められないか。
** DONE 環境構築ツール
CLOSED: [2023-09-26 Tue 23:36]
:PROPERTIES:
:Effort:   20:00
:END:
:LOGBOOK:
CLOCK: [2023-09-26 Tue 23:24]--[2023-09-26 Tue 23:36] =>  0:12
CLOCK: [2023-09-26 Tue 22:18]--[2023-09-26 Tue 22:43] =>  0:25
CLOCK: [2023-09-26 Tue 21:53]--[2023-09-26 Tue 22:18] =>  0:25
CLOCK: [2023-09-25 Mon 23:25]--[2023-09-25 Mon 23:50] =>  0:25
CLOCK: [2023-09-25 Mon 22:59]--[2023-09-25 Mon 23:24] =>  0:25
CLOCK: [2023-09-25 Mon 22:00]--[2023-09-25 Mon 22:25] =>  0:25
CLOCK: [2023-09-25 Mon 21:35]--[2023-09-25 Mon 22:00] =>  0:25
CLOCK: [2023-09-25 Mon 20:53]--[2023-09-25 Mon 21:18] =>  0:25
CLOCK: [2023-09-25 Mon 19:37]--[2023-09-25 Mon 20:02] =>  0:25
CLOCK: [2023-09-25 Mon 08:07]--[2023-09-25 Mon 08:32] =>  0:25
CLOCK: [2023-09-25 Mon 07:33]--[2023-09-25 Mon 07:58] =>  0:25
CLOCK: [2023-09-25 Mon 00:29]--[2023-09-25 Mon 00:55] =>  0:26
CLOCK: [2023-09-24 Sun 23:43]--[2023-09-25 Mon 00:08] =>  0:25
CLOCK: [2023-09-24 Sun 22:47]--[2023-09-24 Sun 23:12] =>  0:25
CLOCK: [2023-09-24 Sun 22:22]--[2023-09-24 Sun 22:47] =>  0:25
CLOCK: [2023-09-24 Sun 21:37]--[2023-09-24 Sun 22:02] =>  0:25
CLOCK: [2023-09-24 Sun 14:02]--[2023-09-24 Sun 14:27] =>  0:25
CLOCK: [2023-09-24 Sun 13:32]--[2023-09-24 Sun 13:57] =>  0:25
CLOCK: [2023-09-24 Sun 13:07]--[2023-09-24 Sun 13:32] =>  0:25
CLOCK: [2023-09-24 Sun 12:41]--[2023-09-24 Sun 13:06] =>  0:25
CLOCK: [2023-09-24 Sun 12:09]--[2023-09-24 Sun 12:34] =>  0:25
CLOCK: [2023-09-24 Sun 11:31]--[2023-09-24 Sun 11:56] =>  0:25
CLOCK: [2023-09-24 Sun 11:05]--[2023-09-24 Sun 11:31] =>  0:26
CLOCK: [2023-09-24 Sun 10:30]--[2023-09-24 Sun 10:55] =>  0:25
CLOCK: [2023-09-24 Sun 10:04]--[2023-09-24 Sun 10:29] =>  0:25
CLOCK: [2023-09-24 Sun 00:37]--[2023-09-24 Sun 01:02] =>  0:25
CLOCK: [2023-09-24 Sun 00:12]--[2023-09-24 Sun 00:37] =>  0:25
CLOCK: [2023-09-23 Sat 23:32]--[2023-09-23 Sat 23:57] =>  0:25
CLOCK: [2023-09-23 Sat 22:18]--[2023-09-23 Sat 22:43] =>  0:25
CLOCK: [2023-09-23 Sat 21:52]--[2023-09-23 Sat 22:17] =>  0:25
CLOCK: [2023-09-23 Sat 21:24]--[2023-09-23 Sat 21:49] =>  0:25
CLOCK: [2023-09-23 Sat 20:51]--[2023-09-23 Sat 21:16] =>  0:25
CLOCK: [2023-09-23 Sat 20:16]--[2023-09-23 Sat 20:41] =>  0:25
CLOCK: [2023-09-23 Sat 19:41]--[2023-09-23 Sat 20:06] =>  0:25
CLOCK: [2023-09-23 Sat 18:29]--[2023-09-23 Sat 18:54] =>  0:25
CLOCK: [2023-09-23 Sat 15:30]--[2023-09-23 Sat 15:55] =>  0:25
CLOCK: [2023-09-23 Sat 14:55]--[2023-09-23 Sat 15:20] =>  0:25
CLOCK: [2023-09-23 Sat 14:08]--[2023-09-23 Sat 14:33] =>  0:25
CLOCK: [2023-09-23 Sat 13:43]--[2023-09-23 Sat 14:08] =>  0:25
CLOCK: [2023-09-23 Sat 13:03]--[2023-09-23 Sat 13:28] =>  0:25
CLOCK: [2023-09-23 Sat 12:32]--[2023-09-23 Sat 12:57] =>  0:25
CLOCK: [2023-09-23 Sat 11:56]--[2023-09-23 Sat 12:21] =>  0:25
CLOCK: [2023-09-23 Sat 11:24]--[2023-09-23 Sat 11:49] =>  0:25
CLOCK: [2023-09-22 Fri 23:05]--[2023-09-22 Fri 23:30] =>  0:25
CLOCK: [2023-09-22 Fri 22:40]--[2023-09-22 Fri 23:05] =>  0:25
CLOCK: [2023-09-22 Fri 21:55]--[2023-09-22 Fri 22:20] =>  0:25
CLOCK: [2023-09-22 Fri 21:30]--[2023-09-22 Fri 21:55] =>  0:25
CLOCK: [2023-09-22 Fri 00:26]--[2023-09-22 Fri 00:51] =>  0:25
CLOCK: [2023-09-21 Thu 23:46]--[2023-09-22 Fri 00:11] =>  0:25
CLOCK: [2023-09-21 Thu 23:21]--[2023-09-21 Thu 23:46] =>  0:25
CLOCK: [2023-09-21 Thu 00:06]--[2023-09-21 Thu 00:31] =>  0:25
CLOCK: [2023-09-20 Wed 23:21]--[2023-09-20 Wed 23:46] =>  0:25
CLOCK: [2023-09-20 Wed 22:56]--[2023-09-20 Wed 23:21] =>  0:25
CLOCK: [2023-09-20 Wed 00:54]--[2023-09-20 Wed 01:19] =>  0:25
CLOCK: [2023-09-20 Wed 00:28]--[2023-09-20 Wed 00:53] =>  0:25
:END:
assertとインストールコマンドをセットで書いてインストールするツール。

#+begin_src yml
- cond: "cd ~/aaa"
  run: git clone aaa.git
#+end_src

- とりあえず今のdotfileの内容をかきあげて、どんな感じにしたら便利かを探る。
- バイナリにすれば、何もインストールされてないまっさらな状態から実行しやすい
  - もとのスクリプトはシェルだから、別にどこでも実行できるのは変わらないか
- dotfilesを埋め込めないか
** DONE gitのタグ番号をもとにファイルを書き換えるツール
CLOSED: [2023-10-14 Sat 19:20]
:PROPERTIES:
:Effort:   4:00
:END:
:LOGBOOK:
CLOCK: [2023-10-13 Fri 09:01]--[2023-10-13 Fri 09:26] =>  0:25
CLOCK: [2023-10-12 Thu 23:17]--[2023-10-12 Thu 23:42] =>  0:25
CLOCK: [2023-10-12 Thu 22:11]--[2023-10-12 Thu 22:36] =>  0:25
CLOCK: [2023-10-12 Thu 21:46]--[2023-10-12 Thu 22:11] =>  0:25
CLOCK: [2023-10-12 Thu 21:11]--[2023-10-12 Thu 21:36] =>  0:25
CLOCK: [2023-10-12 Thu 09:10]--[2023-10-12 Thu 09:35] =>  0:25
CLOCK: [2023-10-12 Thu 00:24]--[2023-10-12 Thu 00:49] =>  0:25
CLOCK: [2023-10-11 Wed 23:03]--[2023-10-11 Wed 23:28] =>  0:25
CLOCK: [2023-10-11 Wed 22:37]--[2023-10-11 Wed 23:02] =>  0:25
CLOCK: [2023-10-11 Wed 22:12]--[2023-10-11 Wed 22:37] =>  0:25
CLOCK: [2023-10-11 Wed 21:33]--[2023-10-11 Wed 21:58] =>  0:25
CLOCK: [2023-10-11 Wed 21:01]--[2023-10-11 Wed 21:26] =>  0:25
CLOCK: [2023-10-11 Wed 20:32]--[2023-10-11 Wed 20:57] =>  0:25
CLOCK: [2023-10-11 Wed 20:01]--[2023-10-11 Wed 20:26] =>  0:25
:END:

- 対象ファイルを指定できるようにする
- .versionファイルを作成すればいいのでは、と考えた。古いバージョンはそれで特定すればよさそう
** DONE Goアセンブラを出力するorg-babel
CLOSED: [2023-10-15 Sun 20:11]
:LOGBOOK:
CLOCK: [2023-10-15 Sun 19:39]--[2023-10-15 Sun 20:04] =>  0:25
CLOCK: [2023-10-15 Sun 19:07]--[2023-10-15 Sun 19:32] =>  0:25
CLOCK: [2023-10-15 Sun 18:32]--[2023-10-15 Sun 18:57] =>  0:25
CLOCK: [2023-10-15 Sun 18:07]--[2023-10-15 Sun 18:32] =>  0:25
:END:

出力アセンブラを試すのが面倒なので簡単なのを作る。一般性はないのでMELPAには送れない。

#+begin_src go-asm
  package main
  func main() {
	for i := 1; i <= 10; i++ {
		print(i)
	}
  }
#+end_src

#+RESULTS:
#+begin_results
# command-line-arguments
main.main STEXT size=87 args=0x0 locals=0x18 funcid=0x0 align=0x0
	0x0000 00000 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:2)	TEXT	main.main(SB), ABIInternal, $24-0
	0x0000 00000 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:2)	CMPQ	SP, 16(R14)
	0x0004 00004 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:2)	PCDATA	$0, $-2
	0x0004 00004 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:2)	JLS	80
	0x0006 00006 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:2)	PCDATA	$0, $-1
	0x0006 00006 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:2)	SUBQ	$24, SP
	0x000a 00010 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:2)	MOVQ	BP, 16(SP)
	0x000f 00015 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:2)	LEAQ	16(SP), BP
	0x0014 00020 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:2)	FUNCDATA	$0, gclocals·g2BeySu+wFnoycgXfElmcg==(SB)
	0x0014 00020 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:2)	FUNCDATA	$1, gclocals·g2BeySu+wFnoycgXfElmcg==(SB)
	0x0014 00020 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:3)	MOVQ	$1, main.i+8(SP)
	0x001d 00029 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:3)	JMP	31
	0x001f 00031 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:3)	CMPQ	main.i+8(SP), $10
	0x0025 00037 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:3)	JLE	41
	0x0027 00039 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:3)	JMP	70
	0x0029 00041 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:4)	PCDATA	$1, $0
	0x0029 00041 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:4)	CALL	runtime.printlock(SB)
	0x002e 00046 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:4)	MOVQ	main.i+8(SP), AX
	0x0033 00051 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:4)	CALL	runtime.printint(SB)
	0x0038 00056 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:4)	CALL	runtime.printunlock(SB)
	0x003d 00061 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:4)	JMP	63
	0x003f 00063 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:3)	INCQ	main.i+8(SP)
	0x0044 00068 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:3)	JMP	31
	0x0046 00070 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:6)	PCDATA	$1, $-1
	0x0046 00070 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:6)	MOVQ	16(SP), BP
	0x004b 00075 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:6)	ADDQ	$24, SP
	0x004f 00079 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:6)	RET
	0x0050 00080 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:6)	NOP
	0x0050 00080 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:2)	PCDATA	$1, $-1
	0x0050 00080 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:2)	PCDATA	$0, $-2
	0x0050 00080 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:2)	CALL	runtime.morestack_noctxt(SB)
	0x0055 00085 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:2)	PCDATA	$0, $-1
	0x0055 00085 (/tmp/babel-ZDNznW/go-src-AsiWm8.go:2)	JMP	0
	0x0000 49 3b 66 10 76 4a 48 83 ec 18 48 89 6c 24 10 48  I;f.vJH...H.l$.H
	0x0010 8d 6c 24 10 48 c7 44 24 08 01 00 00 00 eb 00 48  .l$.H.D$.......H
	0x0020 83 7c 24 08 0a 7e 02 eb 1d e8 00 00 00 00 48 8b  .|$..~........H.
	0x0030 44 24 08 e8 00 00 00 00 e8 00 00 00 00 eb 00 48  D$.............H
	0x0040 ff 44 24 08 eb d9 48 8b 6c 24 10 48 83 c4 18 c3  .D$...H.l$.H....
	0x0050 e8 00 00 00 00 eb a9                             .......
	rel 42+4 t=7 runtime.printlock+0
	rel 52+4 t=7 runtime.printint+0
	rel 57+4 t=7 runtime.printunlock+0
	rel 81+4 t=7 runtime.morestack_noctxt+0
go:cuinfo.producer.main SDWARFCUINFO dupok size=0
	0x0000 2d 4e 20 2d 6c 20 72 65 67 61 62 69              -N -l regabi
go:cuinfo.packagename.main SDWARFCUINFO dupok size=0
	0x0000 6d 61 69 6e                                      main
main..inittask SNOPTRDATA size=24
	0x0000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0010 00 00 00 00 00 00 00 00                          ........
gclocals·g2BeySu+wFnoycgXfElmcg== SRODATA dupok size=8
	0x0000 01 00 00 00 00 00 00 00                          ........
#+end_results
** DONE carve で取るタグが時系列順になっていない
CLOSED: [2023-10-16 Mon 23:53]
:PROPERTIES:
:Effort:   2:00
:END:
:LOGBOOK:
CLOCK: [2023-10-16 Mon 22:29]--[2023-10-16 Mon 22:54] =>  0:25
CLOCK: [2023-10-16 Mon 21:54]--[2023-10-16 Mon 22:19] =>  0:25
CLOCK: [2023-10-16 Mon 21:28]--[2023-10-16 Mon 21:53] =>  0:25
CLOCK: [2023-10-16 Mon 20:31]--[2023-10-16 Mon 20:56] =>  0:25
CLOCK: [2023-10-16 Mon 20:06]--[2023-10-16 Mon 20:31] =>  0:25
:END:

古いタグが、最新になってしまっている。直す。

軽量タグを取れてなかったためだった。
** DONE tiny file managerのアップロードスクリプトを作成する
CLOSED: [2023-10-22 Sun 10:54]
:LOGBOOK:
CLOCK: [2023-10-21 Sat 22:41]--[2023-10-21 Sat 23:06] =>  0:25
CLOCK: [2023-10-21 Sat 21:48]--[2023-10-21 Sat 22:13] =>  0:25
CLOCK: [2023-10-21 Sat 21:13]--[2023-10-21 Sat 21:38] =>  0:25
CLOCK: [2023-10-21 Sat 19:25]--[2023-10-21 Sat 19:50] =>  0:25
CLOCK: [2023-10-21 Sat 18:17]--[2023-10-21 Sat 18:42] =>  0:25
CLOCK: [2023-10-21 Sat 17:43]--[2023-10-21 Sat 18:08] =>  0:25
CLOCK: [2023-10-21 Sat 14:13]--[2023-10-21 Sat 14:38] =>  0:25
CLOCK: [2023-10-21 Sat 13:47]--[2023-10-21 Sat 14:12] =>  0:25
CLOCK: [2023-10-21 Sat 13:08]--[2023-10-21 Sat 13:33] =>  0:25
CLOCK: [2023-10-21 Sat 12:42]--[2023-10-21 Sat 13:07] =>  0:25
CLOCK: [2023-10-21 Sat 12:14]--[2023-10-21 Sat 12:39] =>  0:25
CLOCK: [2023-10-21 Sat 11:48]--[2023-10-21 Sat 12:13] =>  0:25
CLOCK: [2023-10-21 Sat 11:13]--[2023-10-21 Sat 11:38] =>  0:25
CLOCK: [2023-10-21 Sat 10:48]--[2023-10-21 Sat 11:13] =>  0:25
CLOCK: [2023-10-21 Sat 10:23]--[2023-10-21 Sat 10:48] =>  0:25
CLOCK: [2023-10-21 Sat 09:20]--[2023-10-21 Sat 09:45] =>  0:25
CLOCK: [2023-10-19 Thu 23:12]--[2023-10-19 Thu 23:37] =>  0:25
CLOCK: [2023-10-19 Thu 21:33]--[2023-10-19 Thu 21:58] =>  0:25
CLOCK: [2023-10-19 Thu 08:56]--[2023-10-19 Thu 09:21] =>  0:25
CLOCK: [2023-10-19 Thu 08:30]--[2023-10-19 Thu 08:55] =>  0:25
CLOCK: [2023-10-18 Wed 23:52]--[2023-10-19 Thu 00:17] =>  0:25
CLOCK: [2023-10-18 Wed 23:27]--[2023-10-18 Wed 23:52] =>  0:25
CLOCK: [2023-10-18 Wed 22:52]--[2023-10-18 Wed 23:17] =>  0:25
CLOCK: [2023-10-18 Wed 22:25]--[2023-10-18 Wed 22:50] =>  0:25
CLOCK: [2023-10-18 Wed 20:49]--[2023-10-18 Wed 21:14] =>  0:25
CLOCK: [2023-10-18 Wed 20:19]--[2023-10-18 Wed 20:44] =>  0:25
:END:

特殊な状況用に作る。

- ファイル指定できるようにする
  - 不要とする
- [X] ツールのヘルプ文を作る
- [X] goreleaserを設定する
- 転送成功メッセージと転送先パス
  - アップロードしたあとどこに配置されるかはファイルマネージャの設定によるのでスキップ
- [X] curlのプログレスバーをリアルタイム表示する
- [X] サイズがでかくても成功するかを確認する
- [ ] ユーザ・パスを指定できるようにする
  - まだいらない
- [X] クロスプラットフォームにする
  - シェルまわりがかなり違う
  - シェルを使わない形式に書き直した
** DONE グラフ生成
CLOSED: [2023-11-01 Wed 21:31]
:PROPERTIES:
:Effort:   3:00
:END:
:LOGBOOK:
CLOCK: [2023-11-01 Wed 00:42]--[2023-11-01 Wed 01:07] =>  0:25
CLOCK: [2023-11-01 Wed 00:15]--[2023-11-01 Wed 00:40] =>  0:25
CLOCK: [2023-10-31 Tue 22:10]--[2023-10-31 Tue 22:35] =>  0:25
CLOCK: [2023-10-31 Tue 21:45]--[2023-10-31 Tue 22:10] =>  0:25
CLOCK: [2023-10-24 Tue 00:36]--[2023-10-24 Tue 01:01] =>  0:25
:END:
さくっとグラフを作る。
** DONE Goで何かしらWebサーバを作る
CLOSED: [2023-11-18 Sat 10:24]
:LOGBOOK:
CLOCK: [2023-11-18 Sat 15:44]--[2023-11-18 Sat 16:09] =>  0:25
CLOCK: [2023-11-17 Fri 23:25]--[2023-11-17 Fri 23:50] =>  0:25
CLOCK: [2023-11-17 Fri 22:50]--[2023-11-17 Fri 23:15] =>  0:25
CLOCK: [2023-11-17 Fri 22:23]--[2023-11-17 Fri 22:48] =>  0:25
CLOCK: [2023-11-17 Fri 21:39]--[2023-11-17 Fri 22:04] =>  0:25
CLOCK: [2023-11-17 Fri 20:48]--[2023-11-17 Fri 21:13] =>  0:25
CLOCK: [2023-11-12 Sun 17:23]--[2023-11-12 Sun 17:48] =>  0:25
CLOCK: [2023-11-12 Sun 12:48]--[2023-11-12 Sun 13:13] =>  0:25
CLOCK: [2023-11-12 Sun 11:57]--[2023-11-12 Sun 12:22] =>  0:25
CLOCK: [2023-11-12 Sun 11:25]--[2023-11-12 Sun 11:50] =>  0:25
CLOCK: [2023-11-11 Sat 22:44]--[2023-11-11 Sat 23:09] =>  0:25
CLOCK: [2023-11-11 Sat 22:17]--[2023-11-11 Sat 22:42] =>  0:25
CLOCK: [2023-11-11 Sat 21:43]--[2023-11-11 Sat 22:08] =>  0:25
CLOCK: [2023-11-11 Sat 21:13]--[2023-11-11 Sat 21:38] =>  0:25
CLOCK: [2023-11-11 Sat 20:01]--[2023-11-11 Sat 20:26] =>  0:25
CLOCK: [2023-11-11 Sat 19:02]--[2023-11-11 Sat 19:27] =>  0:25
CLOCK: [2023-11-11 Sat 18:30]--[2023-11-11 Sat 18:55] =>  0:25
CLOCK: [2023-11-11 Sat 18:01]--[2023-11-11 Sat 18:26] =>  0:25
CLOCK: [2023-11-11 Sat 17:26]--[2023-11-11 Sat 17:51] =>  0:25
CLOCK: [2023-11-11 Sat 15:00]--[2023-11-11 Sat 15:25] =>  0:25
CLOCK: [2023-11-11 Sat 14:24]--[2023-11-11 Sat 14:49] =>  0:25
CLOCK: [2023-11-11 Sat 13:49]--[2023-11-11 Sat 14:14] =>  0:25
CLOCK: [2023-11-11 Sat 12:37]--[2023-11-11 Sat 13:02] =>  0:25
CLOCK: [2023-11-11 Sat 11:58]--[2023-11-11 Sat 12:23] =>  0:25
CLOCK: [2023-11-06 Mon 22:10]--[2023-11-06 Mon 22:35] =>  0:25
CLOCK: [2023-11-06 Mon 21:42]--[2023-11-06 Mon 22:07] =>  0:25
CLOCK: [2023-11-06 Mon 21:17]--[2023-11-06 Mon 21:42] =>  0:25
CLOCK: [2023-11-06 Mon 20:42]--[2023-11-06 Mon 21:07] =>  0:25
CLOCK: [2023-11-05 Sun 10:35]--[2023-11-05 Sun 11:00] =>  0:25
CLOCK: [2023-11-05 Sun 00:37]--[2023-11-05 Sun 01:02] =>  0:25
CLOCK: [2023-11-04 Sat 23:09]--[2023-11-04 Sat 23:34] =>  0:25
CLOCK: [2023-11-04 Sat 21:23]--[2023-11-04 Sat 21:48] =>  0:25
CLOCK: [2023-11-04 Sat 20:48]--[2023-11-04 Sat 21:13] =>  0:25
CLOCK: [2023-11-04 Sat 19:50]--[2023-11-04 Sat 20:15] =>  0:25
CLOCK: [2023-11-04 Sat 19:25]--[2023-11-04 Sat 19:50] =>  0:25
CLOCK: [2023-11-04 Sat 18:43]--[2023-11-04 Sat 19:08] =>  0:25
CLOCK: [2023-11-04 Sat 17:13]--[2023-11-04 Sat 17:38] =>  0:25
CLOCK: [2023-11-04 Sat 16:47]--[2023-11-04 Sat 17:12] =>  0:25
CLOCK: [2023-11-04 Sat 16:19]--[2023-11-04 Sat 16:44] =>  0:25
:END:
練習。
** DONE openapi3filterのミドルウェアの使い方を調べる
CLOSED: [2023-11-19 Sun 11:09]
:LOGBOOK:
CLOCK: [2023-11-19 Sun 10:44]--[2023-11-19 Sun 11:09] =>  0:25
CLOCK: [2023-11-19 Sun 10:10]--[2023-11-19 Sun 10:35] =>  0:25
CLOCK: [2023-11-19 Sun 00:00]--[2023-11-19 Sun 00:25] =>  0:25
CLOCK: [2023-11-18 Sat 22:21]--[2023-11-18 Sat 22:46] =>  0:25
CLOCK: [2023-11-18 Sat 21:34]--[2023-11-18 Sat 21:59] =>  0:25
CLOCK: [2023-11-18 Sat 20:57]--[2023-11-18 Sat 21:22] =>  0:25
CLOCK: [2023-11-18 Sat 20:32]--[2023-11-18 Sat 20:57] =>  0:25
CLOCK: [2023-11-18 Sat 20:07]--[2023-11-18 Sat 20:32] =>  0:25
CLOCK: [2023-11-18 Sat 19:32]--[2023-11-18 Sat 19:57] =>  0:25
CLOCK: [2023-11-18 Sat 19:07]--[2023-11-18 Sat 19:32] =>  0:25
CLOCK: [2023-11-18 Sat 17:32]--[2023-11-18 Sat 17:57] =>  0:25
CLOCK: [2023-11-18 Sat 17:07]--[2023-11-18 Sat 17:32] =>  0:25
CLOCK: [2023-11-18 Sat 16:34]--[2023-11-18 Sat 16:59] =>  0:25
CLOCK: [2023-11-18 Sat 16:09]--[2023-11-18 Sat 16:34] =>  0:25
CLOCK: [2023-11-18 Sat 15:19]--[2023-11-18 Sat 15:44] =>  0:25
CLOCK: [2023-11-18 Sat 11:40]--[2023-11-18 Sat 12:05] =>  0:25
CLOCK: [2023-11-18 Sat 11:08]--[2023-11-18 Sat 11:33] =>  0:25
CLOCK: [2023-11-18 Sat 10:43]--[2023-11-18 Sat 11:08] =>  0:25
:END:
openapi3filterは、Go言語のAPIサーバと[[id:a833c386-3cca-49eb-969a-5af58991250d][OpenAPI]]を連携させるライブラリ。

- [[https://pkg.go.dev/github.com/getkin/kin-openapi@v0.97.0/openapi3filter#example-Validator][httptest.NewServer]]

に例が書いてあるが、なぜこれで動くのかがわからない。

- squareHanderとパスの紐付けはどこでやっている
  - 紐付けはしてなかった。パスによってハンドラが分岐してなかった
  - 1つのハンドラだけ
- 実行テストはできたが、これをどうやってミドルウェアに組み込むか。テストするか
- 少し不器用だが、Ginに組み込めた
** DONE 通知ビューワを作る2
CLOSED: [2024-01-30 Tue 23:53]
:PROPERTIES:
:Effort:   20:00
:END:
:LOGBOOK:
CLOCK: [2024-01-28 Sun 21:35]--[2024-01-28 Sun 22:00] =>  0:25
CLOCK: [2024-01-28 Sun 21:00]--[2024-01-28 Sun 21:25] =>  0:25
CLOCK: [2024-01-28 Sun 20:20]--[2024-01-28 Sun 20:45] =>  0:25
CLOCK: [2024-01-28 Sun 19:20]--[2024-01-28 Sun 19:45] =>  0:25
CLOCK: [2024-01-28 Sun 18:55]--[2024-01-28 Sun 19:20] =>  0:25
CLOCK: [2024-01-28 Sun 18:29]--[2024-01-28 Sun 18:54] =>  0:25
CLOCK: [2024-01-28 Sun 17:25]--[2024-01-28 Sun 17:50] =>  0:25
CLOCK: [2024-01-28 Sun 10:00]--[2024-01-28 Sun 10:25] =>  0:25
CLOCK: [2024-01-28 Sun 09:29]--[2024-01-28 Sun 09:54] =>  0:25
CLOCK: [2024-01-28 Sun 09:04]--[2024-01-28 Sun 09:29] =>  0:25
CLOCK: [2024-01-28 Sun 08:39]--[2024-01-28 Sun 09:04] =>  0:25
CLOCK: [2024-01-28 Sun 00:34]--[2024-01-28 Sun 01:00] =>  0:26
CLOCK: [2024-01-27 Sat 23:17]--[2024-01-27 Sat 23:42] =>  0:25
CLOCK: [2024-01-27 Sat 22:50]--[2024-01-27 Sat 23:15] =>  0:25
CLOCK: [2024-01-27 Sat 22:24]--[2024-01-27 Sat 22:49] =>  0:25
CLOCK: [2024-01-27 Sat 21:57]--[2024-01-27 Sat 22:22] =>  0:25
CLOCK: [2024-01-27 Sat 21:30]--[2024-01-27 Sat 21:55] =>  0:25
CLOCK: [2024-01-27 Sat 15:18]--[2024-01-27 Sat 15:43] =>  0:25
CLOCK: [2024-01-27 Sat 14:43]--[2024-01-27 Sat 15:08] =>  0:25
CLOCK: [2024-01-27 Sat 14:08]--[2024-01-27 Sat 14:33] =>  0:25
CLOCK: [2024-01-27 Sat 13:43]--[2024-01-27 Sat 14:08] =>  0:25
CLOCK: [2024-01-27 Sat 13:11]--[2024-01-27 Sat 13:36] =>  0:25
CLOCK: [2024-01-27 Sat 10:00]--[2024-01-27 Sat 10:25] =>  0:25
CLOCK: [2024-01-27 Sat 09:35]--[2024-01-27 Sat 10:00] =>  0:25
CLOCK: [2024-01-26 Fri 22:42]--[2024-01-26 Fri 23:07] =>  0:25
CLOCK: [2024-01-26 Fri 22:07]--[2024-01-26 Fri 22:32] =>  0:25
CLOCK: [2024-01-26 Fri 21:42]--[2024-01-26 Fri 22:07] =>  0:25
CLOCK: [2024-01-26 Fri 21:14]--[2024-01-26 Fri 21:39] =>  0:25
CLOCK: [2024-01-26 Fri 20:30]--[2024-01-26 Fri 20:55] =>  0:25
CLOCK: [2024-01-26 Fri 00:31]--[2024-01-26 Fri 00:56] =>  0:25
CLOCK: [2024-01-25 Thu 22:55]--[2024-01-25 Thu 23:20] =>  0:25
CLOCK: [2024-01-25 Thu 22:08]--[2024-01-25 Thu 22:33] =>  0:25
CLOCK: [2024-01-25 Thu 09:35]--[2024-01-25 Thu 10:00] =>  0:25
CLOCK: [2024-01-25 Thu 09:08]--[2024-01-25 Thu 09:33] =>  0:25
CLOCK: [2024-01-25 Thu 00:17]--[2024-01-25 Thu 00:42] =>  0:25
CLOCK: [2024-01-24 Wed 23:09]--[2024-01-24 Wed 23:34] =>  0:25
CLOCK: [2024-01-24 Wed 22:40]--[2024-01-24 Wed 23:05] =>  0:25
CLOCK: [2024-01-24 Wed 21:38]--[2024-01-24 Wed 22:03] =>  0:25
CLOCK: [2024-01-24 Wed 21:10]--[2024-01-24 Wed 21:35] =>  0:25
CLOCK: [2024-01-24 Wed 20:44]--[2024-01-24 Wed 21:09] =>  0:25
CLOCK: [2024-01-24 Wed 20:19]--[2024-01-24 Wed 20:44] =>  0:25
CLOCK: [2024-01-24 Wed 00:46]--[2024-01-24 Wed 01:11] =>  0:25
CLOCK: [2024-01-23 Tue 00:47]--[2024-01-23 Tue 01:12] =>  0:25
CLOCK: [2024-01-23 Tue 00:22]--[2024-01-23 Tue 00:47] =>  0:25
CLOCK: [2024-01-22 Mon 23:46]--[2024-01-23 Tue 00:11] =>  0:25
CLOCK: [2024-01-22 Mon 22:32]--[2024-01-22 Mon 22:57] =>  0:25
CLOCK: [2024-01-22 Mon 22:07]--[2024-01-22 Mon 22:32] =>  0:25
CLOCK: [2024-01-22 Mon 21:27]--[2024-01-22 Mon 21:52] =>  0:25
CLOCK: [2024-01-22 Mon 21:02]--[2024-01-22 Mon 21:27] =>  0:25
CLOCK: [2024-01-21 Sun 23:50]--[2024-01-22 Mon 00:15] =>  0:25
CLOCK: [2024-01-21 Sun 23:25]--[2024-01-21 Sun 23:50] =>  0:25
CLOCK: [2024-01-21 Sun 22:38]--[2024-01-21 Sun 23:03] =>  0:25
CLOCK: [2024-01-21 Sun 21:56]--[2024-01-21 Sun 22:21] =>  0:25
CLOCK: [2024-01-21 Sun 21:31]--[2024-01-21 Sun 21:56] =>  0:25
CLOCK: [2024-01-21 Sun 21:06]--[2024-01-21 Sun 21:31] =>  0:25
CLOCK: [2024-01-21 Sun 20:00]--[2024-01-21 Sun 20:25] =>  0:25
CLOCK: [2024-01-21 Sun 19:34]--[2024-01-21 Sun 19:59] =>  0:25
CLOCK: [2024-01-21 Sun 18:13]--[2024-01-21 Sun 18:38] =>  0:25
CLOCK: [2024-01-21 Sun 17:48]--[2024-01-21 Sun 18:13] =>  0:25
CLOCK: [2024-01-21 Sun 15:27]--[2024-01-21 Sun 15:52] =>  0:25
CLOCK: [2024-01-21 Sun 14:57]--[2024-01-21 Sun 15:22] =>  0:25
CLOCK: [2024-01-21 Sun 14:32]--[2024-01-21 Sun 14:57] =>  0:25
CLOCK: [2024-01-21 Sun 14:07]--[2024-01-21 Sun 14:32] =>  0:25
CLOCK: [2024-01-21 Sun 12:07]--[2024-01-21 Sun 12:32] =>  0:25
CLOCK: [2024-01-21 Sun 11:31]--[2024-01-21 Sun 11:56] =>  0:25
CLOCK: [2024-01-21 Sun 10:42]--[2024-01-21 Sun 11:07] =>  0:25
CLOCK: [2024-01-21 Sun 10:17]--[2024-01-21 Sun 10:42] =>  0:25
CLOCK: [2024-01-20 Sat 22:56]--[2024-01-20 Sat 23:21] =>  0:25
CLOCK: [2024-01-20 Sat 22:25]--[2024-01-20 Sat 22:50] =>  0:25
CLOCK: [2024-01-20 Sat 21:54]--[2024-01-20 Sat 22:19] =>  0:25
CLOCK: [2024-01-20 Sat 20:59]--[2024-01-20 Sat 21:24] =>  0:25
CLOCK: [2024-01-20 Sat 20:24]--[2024-01-20 Sat 20:49] =>  0:25
CLOCK: [2024-01-20 Sat 19:55]--[2024-01-20 Sat 20:20] =>  0:25
CLOCK: [2024-01-20 Sat 19:30]--[2024-01-20 Sat 19:55] =>  0:25
CLOCK: [2024-01-20 Sat 19:04]--[2024-01-20 Sat 19:29] =>  0:25
CLOCK: [2024-01-20 Sat 16:44]--[2024-01-20 Sat 17:09] =>  0:25
CLOCK: [2024-01-20 Sat 16:17]--[2024-01-20 Sat 16:42] =>  0:25
CLOCK: [2024-01-20 Sat 15:52]--[2024-01-20 Sat 16:17] =>  0:25
CLOCK: [2024-01-20 Sat 15:06]--[2024-01-20 Sat 15:31] =>  0:25
CLOCK: [2024-01-20 Sat 14:41]--[2024-01-20 Sat 15:06] =>  0:25
CLOCK: [2024-01-20 Sat 14:16]--[2024-01-20 Sat 14:41] =>  0:25
:END:
electronで作る。

前回の問題点は何か。

- iframeの制約で遷移できなかった
- よくわからないエラーで落ちる

メモ。
- タブを切り替えたい
  - うまくいかない
  - できた。preload.jsを読み込んでないだけだった

設計。
- フロントではタブの状態管理をする
  - UIとしては切り替えられればよい
- バックエンド
  - ソースURL(feed URLとか)をもとに、エントリURL+タイトルの取得ジョブ実行
  - サーバ
  - SQLiteとのやりとり
  - エントリテーブルを作って、そこで管理する。既読がついてないものを返す
  - エンドポイント
    - 設定一覧

エントリのステート。
- 未取得
- エントリ取得
- 同期ずみ
  - クライアントを起動しなおすと再度受信する
  - クライアントが取得時に排除するしかないのかな
  - クライアントが現在あるものをパラメータで送信するようにして、バックエンドはそれを含むと返さない、でよさそうか。やってることは同じだが、バックエンドから来る値をそのまま使えるほうが直感的だ
- 既読
- 全体の状態管理が必要。タブボタンとウィンドウは一致しなければならない
  - react側で状態管理する
  - 状態管理に対してメソッドを定義して、同時にIPC通信を実行させればよさそう
- タブボタンを削除すると対応するウィンドウが削除される
- 今はウィンドウのURLで判断して切り替えてるけど、複数ある場合はどうなるか
- ウィンドウを開いたときに、IDを保存させる。IDを元にタイトルやURLだのにアクセスさせる
  - タイトルはタブが持ってるのでDBにはいらない可能性がある
- ステートのデータ構造はどうするか
  - ViewのID
    - URL
    - タイトル
    - は、viewから取得できるのでいらない
- ipcRendererの使い方がわからない
  - preload.tsで登録して使う
  - コピペしたコードにonはすでに登録してあった
- main側のdom-readyは実行できてる
  - なのでsendはできてるように見える
  - 受信が原因か、送信が原因かわからない
  - 送信してるwindowを指定できてなかった。UIがあるwindowに送る必要がある
- タブを消したあとに、新しいタブを開こうとするとエラーになる。前のタブにフォーカスしようとするからか
- 取得の手順
  - 「10件取得」ボタンをつくり、それを押すと最大10個のリンクを取得してくる
  - 入力: 件数とすでにあるリンク一覧
  - 出力: 指定件数で、すでにあるリンクを排除したリンクを返す
- フィードを書くところをファイルにするかデータベースにするか
  - ファイルだとGit管理できる。準備や説明が面倒。実装は楽
  - データベースだとブラウザでそのまま設定しやすい。UIの準備はやや面倒
** DONE APIサーバ開発
CLOSED: [2024-01-31 Wed 00:06]
:LOGBOOK:
CLOCK: [2023-12-17 Sun 21:44]--[2023-12-17 Sun 22:09] =>  0:25
CLOCK: [2023-12-17 Sun 21:14]--[2023-12-17 Sun 21:39] =>  0:25
CLOCK: [2023-12-17 Sun 12:31]--[2023-12-17 Sun 12:56] =>  0:25
CLOCK: [2023-12-17 Sun 11:49]--[2023-12-17 Sun 12:14] =>  0:25
CLOCK: [2023-12-17 Sun 11:14]--[2023-12-17 Sun 11:39] =>  0:25
CLOCK: [2023-12-17 Sun 10:45]--[2023-12-17 Sun 11:10] =>  0:25
CLOCK: [2023-12-17 Sun 10:15]--[2023-12-17 Sun 10:40] =>  0:25
CLOCK: [2023-12-17 Sun 00:34]--[2023-12-17 Sun 00:59] =>  0:25
CLOCK: [2023-12-17 Sun 00:09]--[2023-12-17 Sun 00:34] =>  0:25
CLOCK: [2023-12-16 Sat 23:44]--[2023-12-17 Sun 00:09] =>  0:25
CLOCK: [2023-12-16 Sat 22:57]--[2023-12-16 Sat 23:22] =>  0:25
CLOCK: [2023-12-16 Sat 22:28]--[2023-12-16 Sat 22:53] =>  0:25
CLOCK: [2023-12-16 Sat 22:01]--[2023-12-16 Sat 22:26] =>  0:25
CLOCK: [2023-12-16 Sat 21:28]--[2023-12-16 Sat 21:53] =>  0:25
CLOCK: [2023-12-16 Sat 12:55]--[2023-12-16 Sat 13:20] =>  0:25
CLOCK: [2023-12-16 Sat 12:22]--[2023-12-16 Sat 12:47] =>  0:25
CLOCK: [2023-12-16 Sat 11:43]--[2023-12-16 Sat 12:08] =>  0:25
CLOCK: [2023-12-16 Sat 10:42]--[2023-12-16 Sat 11:07] =>  0:25
CLOCK: [2023-12-16 Sat 10:12]--[2023-12-16 Sat 10:37] =>  0:25
CLOCK: [2023-12-16 Sat 09:44]--[2023-12-16 Sat 10:09] =>  0:25
CLOCK: [2023-12-14 Thu 23:19]--[2023-12-14 Thu 23:44] =>  0:25
CLOCK: [2023-12-14 Thu 19:10]--[2023-12-14 Thu 19:35] =>  0:25
CLOCK: [2023-11-22 Wed 00:44]--[2023-11-22 Wed 01:09] =>  0:25
CLOCK: [2023-11-21 Tue 23:40]--[2023-11-22 Wed 00:05] =>  0:25
CLOCK: [2023-11-21 Tue 23:15]--[2023-11-21 Tue 23:40] =>  0:25
:END:
作る。
** DONE 監視ツールを試す
CLOSED: [2024-02-15 Thu 18:17]
:LOGBOOK:
CLOCK: [2023-12-17 Sun 20:48]--[2023-12-17 Sun 21:13] =>  0:25
CLOCK: [2023-12-17 Sun 19:47]--[2023-12-17 Sun 20:12] =>  0:25
CLOCK: [2023-12-17 Sun 19:17]--[2023-12-17 Sun 19:42] =>  0:25
CLOCK: [2023-12-17 Sun 18:46]--[2023-12-17 Sun 19:11] =>  0:25
CLOCK: [2023-12-17 Sun 18:05]--[2023-12-17 Sun 18:30] =>  0:25
CLOCK: [2023-12-17 Sun 15:21]--[2023-12-17 Sun 15:47] =>  0:26
CLOCK: [2023-12-17 Sun 14:53]--[2023-12-17 Sun 15:18] =>  0:25
CLOCK: [2023-12-17 Sun 14:25]--[2023-12-17 Sun 14:50] =>  0:25
CLOCK: [2023-12-17 Sun 13:46]--[2023-12-17 Sun 14:11] =>  0:25
CLOCK: [2023-12-17 Sun 13:02]--[2023-12-17 Sun 13:27] =>  0:25
CLOCK: [2023-12-16 Sat 19:44]--[2023-12-16 Sat 20:09] =>  0:25
CLOCK: [2023-12-16 Sat 19:15]--[2023-12-16 Sat 19:40] =>  0:25
CLOCK: [2023-12-16 Sat 18:17]--[2023-12-16 Sat 18:42] =>  0:25
CLOCK: [2023-12-16 Sat 17:48]--[2023-12-16 Sat 18:13] =>  0:25
CLOCK: [2023-12-16 Sat 13:47]--[2023-12-16 Sat 14:12] =>  0:25
CLOCK: [2023-12-16 Sat 13:20]--[2023-12-16 Sat 13:45] =>  0:25
:END:
コンテナログを見やすくする。

- Management -> Kibana -> DataViewでデータを追加。fluentdからうまく送信されていれば、indexの候補が表示される
- Management -> Data -> Index Lifecycle Policies で削除設定を追加する。肥大化するので
- kibanaは通知が有料だったので、途中でやめた。監視しても通知できなきゃ意味がない
- 代わりにprometheusを使うことにした
** CLOSE go playgroundからとってくるorg-babel
CLOSED: [2024-02-17 Sat 12:03]
:LOGBOOK:
CLOCK: [2024-02-17 Sat 11:59]--[2024-02-17 Sat 12:03] =>  0:04
:END:
org-babelのGoは制約が大きいので。いっそplaygroundから取ってきたほうが便利そう。

すでにそういうパッケージがあったのでそれを使う。テストが実行できないな。
** DONE 遮断プロキシを設定する
CLOSED: [2024-02-17 Sat 12:49]
:LOGBOOK:
CLOCK: [2024-02-17 Sat 12:24]--[2024-02-17 Sat 12:49] =>  0:25
CLOCK: [2024-02-15 Thu 21:29]--[2024-02-15 Thu 21:54] =>  0:25
CLOCK: [2024-02-15 Thu 20:43]--[2024-02-15 Thu 21:08] =>  0:25
CLOCK: [2024-02-15 Thu 19:12]--[2024-02-15 Thu 19:37] =>  0:25
CLOCK: [2024-02-15 Thu 18:18]--[2024-02-15 Thu 18:43] =>  0:25
:END:

集中したいとき遮断できるようにする。

- 今のプロキシのモード設定(priv, work, disable)
  - あまり起動設定変更しないし、いいか
- [X] システムのプロキシ選択状況表示(オフ、オン)
- [X] CLIでのプロキシモード切り替え
** DONE PDF管理
CLOSED: [2024-03-13 Wed 20:20]
:PROPERTIES:
:Effort:   20:00
:END:
:LOGBOOK:
CLOCK: [2024-03-13 Wed 18:04]--[2024-03-13 Wed 18:29] =>  0:25
CLOCK: [2024-03-13 Wed 00:15]--[2024-03-13 Wed 00:40] =>  0:25
CLOCK: [2024-03-12 Tue 23:40]--[2024-03-13 Wed 00:05] =>  0:25
CLOCK: [2024-03-12 Tue 22:46]--[2024-03-12 Tue 23:11] =>  0:25
CLOCK: [2024-03-12 Tue 22:21]--[2024-03-12 Tue 22:46] =>  0:25
CLOCK: [2024-03-12 Tue 21:55]--[2024-03-12 Tue 22:20] =>  0:25
CLOCK: [2024-03-11 Mon 21:48]--[2024-03-11 Mon 22:13] =>  0:25
CLOCK: [2024-03-11 Mon 21:08]--[2024-03-11 Mon 21:33] =>  0:25
CLOCK: [2024-03-11 Mon 20:43]--[2024-03-11 Mon 21:08] =>  0:25
CLOCK: [2024-03-11 Mon 20:18]--[2024-03-11 Mon 20:43] =>  0:25
CLOCK: [2024-03-11 Mon 19:52]--[2024-03-11 Mon 20:17] =>  0:25
CLOCK: [2024-03-10 Sun 23:17]--[2024-03-10 Sun 23:42] =>  0:25
CLOCK: [2024-03-10 Sun 22:51]--[2024-03-10 Sun 23:16] =>  0:25
CLOCK: [2024-03-10 Sun 19:55]--[2024-03-10 Sun 20:20] =>  0:25
CLOCK: [2024-03-10 Sun 19:25]--[2024-03-10 Sun 19:50] =>  0:25
CLOCK: [2024-03-10 Sun 18:42]--[2024-03-10 Sun 19:07] =>  0:25
CLOCK: [2024-03-10 Sun 18:15]--[2024-03-10 Sun 18:40] =>  0:25
CLOCK: [2024-03-10 Sun 17:49]--[2024-03-10 Sun 18:14] =>  0:25
CLOCK: [2024-03-10 Sun 17:24]--[2024-03-10 Sun 17:49] =>  0:25
CLOCK: [2024-03-10 Sun 16:56]--[2024-03-10 Sun 17:21] =>  0:25
CLOCK: [2024-03-10 Sun 16:30]--[2024-03-10 Sun 16:55] =>  0:25
CLOCK: [2024-03-10 Sun 16:04]--[2024-03-10 Sun 16:29] =>  0:25
CLOCK: [2024-03-10 Sun 15:39]--[2024-03-10 Sun 16:04] =>  0:25
CLOCK: [2024-03-10 Sun 15:11]--[2024-03-10 Sun 15:36] =>  0:25
CLOCK: [2024-03-10 Sun 11:13]--[2024-03-10 Sun 11:38] =>  0:25
CLOCK: [2024-03-10 Sun 10:48]--[2024-03-10 Sun 11:13] =>  0:25
CLOCK: [2024-03-10 Sun 10:23]--[2024-03-10 Sun 10:48] =>  0:25
CLOCK: [2024-03-10 Sun 09:58]--[2024-03-10 Sun 10:23] =>  0:25
CLOCK: [2024-03-10 Sun 01:42]--[2024-03-10 Sun 02:07] =>  0:25
CLOCK: [2024-03-09 Sat 22:09]--[2024-03-09 Sat 22:34] =>  0:25
CLOCK: [2024-03-09 Sat 21:05]--[2024-03-09 Sat 21:30] =>  0:25
CLOCK: [2024-03-09 Sat 20:39]--[2024-03-09 Sat 21:04] =>  0:25
CLOCK: [2024-03-09 Sat 20:13]--[2024-03-09 Sat 20:38] =>  0:25
CLOCK: [2024-03-09 Sat 19:48]--[2024-03-09 Sat 20:13] =>  0:25
CLOCK: [2024-03-09 Sat 19:13]--[2024-03-09 Sat 19:38] =>  0:25
CLOCK: [2024-03-09 Sat 17:46]--[2024-03-09 Sat 18:11] =>  0:25
CLOCK: [2024-03-09 Sat 17:21]--[2024-03-09 Sat 17:46] =>  0:25
CLOCK: [2024-03-09 Sat 12:36]--[2024-03-09 Sat 13:01] =>  0:25
CLOCK: [2024-03-09 Sat 12:09]--[2024-03-09 Sat 12:34] =>  0:25
CLOCK: [2024-03-09 Sat 11:42]--[2024-03-09 Sat 12:07] =>  0:25
CLOCK: [2024-03-09 Sat 11:11]--[2024-03-09 Sat 11:36] =>  0:25
CLOCK: [2024-03-08 Fri 23:01]--[2024-03-08 Fri 23:26] =>  0:25
CLOCK: [2024-03-08 Fri 22:36]--[2024-03-08 Fri 23:01] =>  0:25
CLOCK: [2024-03-08 Fri 00:36]--[2024-03-08 Fri 01:01] =>  0:25
CLOCK: [2024-03-07 Thu 23:14]--[2024-03-07 Thu 23:39] =>  0:25
CLOCK: [2024-03-07 Thu 22:49]--[2024-03-07 Thu 23:14] =>  0:25
CLOCK: [2024-03-07 Thu 22:09]--[2024-03-07 Thu 22:34] =>  0:25
CLOCK: [2024-03-05 Tue 00:22]--[2024-03-05 Tue 00:47] =>  0:25
CLOCK: [2024-03-04 Mon 23:07]--[2024-03-04 Mon 23:32] =>  0:25
CLOCK: [2024-03-04 Mon 22:37]--[2024-03-04 Mon 23:02] =>  0:25
CLOCK: [2024-03-04 Mon 22:12]--[2024-03-04 Mon 22:37] =>  0:25
CLOCK: [2024-03-04 Mon 21:19]--[2024-03-04 Mon 21:44] =>  0:25
CLOCK: [2024-03-04 Mon 20:44]--[2024-03-04 Mon 21:09] =>  0:25
CLOCK: [2024-03-04 Mon 20:19]--[2024-03-04 Mon 20:44] =>  0:25
CLOCK: [2024-03-04 Mon 00:25]--[2024-03-04 Mon 00:50] =>  0:25
CLOCK: [2024-03-03 Sun 22:58]--[2024-03-03 Sun 23:23] =>  0:25
CLOCK: [2024-03-03 Sun 22:33]--[2024-03-03 Sun 22:58] =>  0:25
CLOCK: [2024-03-03 Sun 21:36]--[2024-03-03 Sun 22:01] =>  0:25
CLOCK: [2024-03-03 Sun 21:03]--[2024-03-03 Sun 21:28] =>  0:25
CLOCK: [2024-03-03 Sun 20:28]--[2024-03-03 Sun 20:53] =>  0:25
CLOCK: [2024-03-03 Sun 19:40]--[2024-03-03 Sun 20:05] =>  0:25
CLOCK: [2024-03-03 Sun 18:23]--[2024-03-03 Sun 18:48] =>  0:25
CLOCK: [2024-03-03 Sun 17:58]--[2024-03-03 Sun 18:23] =>  0:25
CLOCK: [2024-03-03 Sun 17:33]--[2024-03-03 Sun 17:58] =>  0:25
CLOCK: [2024-03-03 Sun 17:07]--[2024-03-03 Sun 17:33] =>  0:26
CLOCK: [2024-03-03 Sun 16:41]--[2024-03-03 Sun 17:07] =>  0:26
CLOCK: [2024-03-03 Sun 16:16]--[2024-03-03 Sun 16:41] =>  0:25
CLOCK: [2024-03-03 Sun 15:51]--[2024-03-03 Sun 16:16] =>  0:25
CLOCK: [2024-03-03 Sun 15:26]--[2024-03-03 Sun 15:51] =>  0:25
:END:

本はPDFで買うことが多い。ストレージに置いているがわけわからない。2個買ってたりする。既存ツールでいいのがないか調べる。ファイル構造じゃなくて、タグで管理したい。バージョン管理したい。

ファイルとメタデータを紐付けられればよい。

ファイル。
#+begin_src
  {ID}_{タイトル}.pdf
  {ID}.toml

  - 20240303T201703_ふつうのLinuxプログラミング.pdf
  - 20240303T201703.toml
  - 20250101T191703_コーディングを支える技術.pdf
  - 20250101T191703.toml
#+end_src

- タイトルはPDF情報から取ってこれるので、コマンドでファイル名は自動生成する。IDがあるのでタイトルはかぶってもよい
  - PDFじゃないこともあるのでこれはまあいいか
  - ID以降はどうでもいい
- tomlも同時に自動生成する。タイトルなどがある

TOMlファイル。
#+begin_src toml
  [book]
  [book.basic]
  title = "ふつうのLinuxプログラミング"
  [book.todo]
  name = "TODO"      # TODO || WIP || DONE
  [[book.tag]]
  name = "linux"     # 特定のタグしか許容しない
  [[book.tag]]
  name = "container" # 特定のタグしか許容しない
#+end_src

#+begin_src
  [タグ選択]

  本一覧 # クリックするとpdf.jsで開く
  --------
  - ふつうのLinuxプログラミング [Linux]
  - Docker book [Linux, Container]
#+end_src

- idの変換ロジックは文字列でよいけど、ディレクトリとか絡んでくるとそれ用の型を使ったほうがいい
** DONE ドラフトを解除するスクリプト
CLOSED: [2024-03-17 Sun 19:30]
エントリのドラフト状態を解除するのが面倒なのでたまりがち。

- [X] コメントをすべて削除する
- [X] タグのdraftを消す
- [X] リネームを実行する
** DONE 本棚のタグを直す
CLOSED: [2024-03-28 Thu 21:24]
:LOGBOOK:
CLOCK: [2024-03-28 Thu 19:57]--[2024-03-28 Thu 20:22] =>  0:25
:END:

現在のページ分しかタグが出ないのを直す。
** DONE PDFスライドを表示できるようにする
CLOSED: [2024-03-31 Sun 18:58]
:LOGBOOK:
CLOCK: [2024-03-31 Sun 15:46]--[2024-03-31 Sun 16:11] =>  0:25
CLOCK: [2024-03-31 Sun 12:33]--[2024-03-31 Sun 12:58] =>  0:25
CLOCK: [2024-03-31 Sun 11:50]--[2024-03-31 Sun 12:15] =>  0:25
CLOCK: [2024-03-31 Sun 11:23]--[2024-03-31 Sun 11:48] =>  0:25
CLOCK: [2024-03-30 Sat 21:30]--[2024-03-30 Sat 21:56] =>  0:26
CLOCK: [2024-03-30 Sat 20:17]--[2024-03-30 Sat 20:42] =>  0:25
CLOCK: [2024-03-30 Sat 19:49]--[2024-03-30 Sat 20:14] =>  0:25
CLOCK: [2024-03-30 Sat 18:39]--[2024-03-30 Sat 19:04] =>  0:25
CLOCK: [2024-03-30 Sat 17:45]--[2024-03-30 Sat 18:10] =>  0:25
CLOCK: [2024-03-30 Sat 16:18]--[2024-03-30 Sat 16:43] =>  0:25
CLOCK: [2024-03-30 Sat 15:45]--[2024-03-30 Sat 16:10] =>  0:25
CLOCK: [2024-03-30 Sat 15:20]--[2024-03-30 Sat 15:45] =>  0:25
CLOCK: [2024-03-30 Sat 14:33]--[2024-03-30 Sat 14:58] =>  0:25
CLOCK: [2024-03-30 Sat 14:08]--[2024-03-30 Sat 14:33] =>  0:25
CLOCK: [2024-03-30 Sat 13:41]--[2024-03-30 Sat 14:07] =>  0:26
CLOCK: [2024-03-30 Sat 13:16]--[2024-03-30 Sat 13:41] =>  0:25
:END:
[[https://keens.github.io/blog/2022/09/21/burogunipdfsuraidowotsuikashitahanashi/][ブログにPDFスライドを追加した話 | κeenのHappy Hacκing Blog]]が面白そうだった。参考にして作成してみる。

- 準備はPDFへのリンクを配置しておくだけ
- サーバを起動させる必要はなく、配置するだけでクライアント上で動作する
  - リンクリストを読み取り、HTMLを生成できればいい
  - iframeリスト
- リンク一覧ではサムネを表示する
- スライド用PDFビューと、フルPDFビューへのボタンがある
- スライド作成にいい感じのツールがない
  - drawio.svgのように閲覧と編集が同じファイルでできるのがベスト
  - 図がメイン
  - markdownでは表現できない
- pdf.jsがぼやける。参考元と同じ設定なのに
  - ズーム率が高い設定になってただけだった...
- CIで文字化けする
  - 手元で再現できた
  - ローカルで作ったPDFを見ると、全部TakaoPGothicになっている。何を選択しても全部。
** CLOSE go packageをPlantUMLで出力する
CLOSED: [2024-05-22 Wed 22:40]
:LOGBOOK:
CLOCK: [2024-05-22 Wed 22:09]--[2024-05-22 Wed 22:34] =>  0:25
:END:

理解しやすくする。

PlantUMLでエラーになる。よくわからない。[[https://www.dumels.com/][Dumels]]ではなぜかできる。まあ見やすいし、サイトで確認するでいいか、ってなった。
