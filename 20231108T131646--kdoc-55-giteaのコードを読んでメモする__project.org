:properties:
:ID: 20231108T131646
:mtime:    20250626231858
:ctime:    20241028101410
:end:
#+title:      KDOC 55: giteaのコードを読んでメモする
#+date:       [2023-11-08 Wed 13:16]
#+filetags:   :project:
#+identifier: 20231108T131646

* DONE プロジェクトのステータス
CLOSED: [2024-11-11 Mon 12:55]

プロジェクトは終了である。

* 概要
[[https://github.com/go-gitea/gitea][go-gitea/gitea]]を読んだメモ。バックエンドは[[id:7cacbaa3-3995-41cf-8b72-58d6e07468b1][Go]]で書かれている。

* memo
** コンパイル

コンパイルしている部分。タスク名が動的になっていてわかりにくい。

#+begin_src git-permalink
https://github.com/go-gitea/gitea/blob/8ef169a173c24e5ab57de8d6638bb6786e378a3d/Makefile#L788-L789
#+end_src

#+RESULTS:
#+begin_src
$(EXECUTABLE): $(GO_SOURCES) $(TAGS_PREREQ)
	CGO_CFLAGS="$(CGO_CFLAGS)" $(GO) build $(GOFLAGS) $(EXTRA_GOFLAGS) -tags '$(TAGS)' -ldflags '-s -w $(LDFLAGS)' -o $@
#+end_src

** routerを起動している部分

#+begin_src git-permalink
https://github.com/go-gitea/gitea/blob/8ef169a173c24e5ab57de8d6638bb6786e378a3d/cmd/web.go#L211
#+end_src

#+RESULTS:
#+begin_src
	webRoutes := routers.NormalRoutes()
#+end_src

** DB設定部分

setting packageにまとめられている。パッケージで変数化されている。

#+caption: database
#+begin_src git-permalink
https://github.com/go-gitea/gitea/blob/0999721c7b4d124c1f14bbd067acdcf767542abb/modules/setting/database.go#L27-L28
#+end_src

#+RESULTS:
#+begin_src
	// Database holds the database settings
	Database = struct {
#+end_src

変数はグローバル変数にしつつ↑、セットはパッケージ内の関数でやる。

#+begin_src git-permalink
https://github.com/go-gitea/gitea/blob/8ef169a173c24e5ab57de8d6638bb6786e378a3d/modules/setting/database.go#L59-L65
#+end_src

#+RESULTS:
#+begin_src
func loadDBSetting(rootCfg ConfigProvider) {
	sec := rootCfg.Section("database")
	Database.Type = DatabaseType(sec.Key("DB_TYPE").String())

	Database.Host = sec.Key("HOST").String()
	Database.Name = sec.Key("NAME").String()
	Database.User = sec.Key("USER").String()
#+end_src

** DB初期化部分

routerでのDBの初期化は↓でやっている。

#+begin_src git-permalink
https://github.com/go-gitea/gitea/blob/8ef169a173c24e5ab57de8d6638bb6786e378a3d/models/db/engine.go#L132-L133
#+end_src

#+RESULTS:
#+begin_src
// InitEngine initializes the xorm.Engine and sets it as db.DefaultContext
func InitEngine(ctx context.Context) error {
#+end_src

InitEngineの中でデータベースを初期化する。

#+caption: InitEngine(ctx context.Context) error 内で実行する
#+begin_src git-permalink
 https://github.com/go-gitea/gitea/blob/8ef169a173c24e5ab57de8d6638bb6786e378a3d/models/db/engine.go#L134
#+end_src

#+RESULTS:
#+begin_src
	xormEngine, err := newXORMEngine()
#+end_src

InitEngineの中でSetDefaultEngine()して初期化したデータベースをDefaultContextに設定する。

#+begin_src git-permalink
https://github.com/go-gitea/gitea/blob/8ef169a173c24e5ab57de8d6638bb6786e378a3d/models/db/engine.go#L153-L160
#+end_src

#+RESULTS:
#+begin_src
// SetDefaultEngine sets the default engine for db
func SetDefaultEngine(ctx context.Context, eng *xorm.Engine) {
	x = eng
	DefaultContext = &Context{
		Context: ctx,
		e:       x,
	}
}
#+end_src

セットできているかの確認文。

#+begin_src git-permalink
https://github.com/go-gitea/gitea/blob/8ef169a173c24e5ab57de8d6638bb6786e378a3d/routers/init.go#L136
#+end_src

#+RESULTS:
#+begin_src
	mustInitCtx(ctx, common.InitDBEngine)
#+end_src

** 変数default contextに設定する

設定している部分。

#+begin_src git-permalink
https://github.com/go-gitea/gitea/blob/8ef169a173c24e5ab57de8d6638bb6786e378a3d/models/db/engine.go#L153-L160
#+end_src

#+RESULTS:
#+begin_src
// SetDefaultEngine sets the default engine for db
func SetDefaultEngine(ctx context.Context, eng *xorm.Engine) {
	x = eng
	DefaultContext = &Context{
		Context: ctx,
		e:       x,
	}
}
#+end_src

テストとかではdefault contextを使って、dbを簡単に起動している。そうでない部分では、起動時に明示して上書きしているようだ。

** APIContextをセットしている部分

DBのデータなどはcontext.APIContextで伝達している。APIContextにはBaseが埋め込まれている。

#+caption: APIContextの定義
#+begin_src git-permalink
https://github.com/go-gitea/gitea/blob/8ef169a173c24e5ab57de8d6638bb6786e378a3d/modules/context/api.go#L28-L43
#+end_src

#+RESULTS:
#+begin_src
// APIContext is a specific context for API service
type APIContext struct {
	,*Base

	Cache cache.Cache

	Doer        *user_model.User // current signed-in user
	IsSigned    bool
	IsBasicAuth bool

	ContextUser *user_model.User // the user which is being visited, in most cases it differs from Doer

	Repo    *Repository
	Org     *APIOrganization
	Package *Package
}
#+end_src

Baseにはcontext.Contextが埋め込まれている。

#+caption: Baseの定義
#+begin_src git-permalink
https://github.com/go-gitea/gitea/blob/8ef169a173c24e5ab57de8d6638bb6786e378a3d/modules/context/base.go#L31-L44
#+end_src

#+RESULTS:
#+begin_src
type Base struct {
	originCtx     context.Context
	contextValues []contextValuePair

	Resp ResponseWriter
	Req  *http.Request

	// Data is prepared by ContextDataStore middleware, this field only refers to the pre-created/prepared ContextData.
	// Although it's mainly used for MVC templates, sometimes it's also used to pass data between middlewares/handler
	Data middleware.ContextData

	// Locale is mainly for Web context, although the API context also uses it in some cases: message response, form validation
	Locale translation.Locale
}
#+end_src

#+begin_src git-permalink
https://github.com/go-gitea/gitea/blob/8ef169a173c24e5ab57de8d6638bb6786e378a3d/modules/context/api.go#L213-L223
#+end_src

#+RESULTS:
#+begin_src
// APIContexter returns apicontext as middleware
func APIContexter() func(http.Handler) http.Handler {
	return func(next http.Handler) http.Handler {
		return http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
			base, baseCleanUp := NewBaseContext(w, req)
			ctx := &APIContext{
				Base:  base,
				Cache: mc.GetCache(),
				Repo:  &Repository{PullRequest: &PullRequest{}},
				Org:   &APIOrganization{},
			}
#+end_src

** contextからdbインスタンスを取り出す

#+begin_src git-permalink
https://github.com/go-gitea/gitea/blob/8ef169a173c24e5ab57de8d6638bb6786e378a3d/models/admin/task.go#L56
#+end_src

#+RESULTS:
#+begin_src
	has, err := db.GetEngine(ctx).ID(task.RepoID).Get(&repo)
#+end_src

** DBコンテキストは異なる

DBのためだけにありそう。defaultContextが入るのはこれ。contextを構造体に埋め込むのはよくないとされている。

#+begin_src git-permalink
https://github.com/go-gitea/gitea/blob/8ef169a173c24e5ab57de8d6638bb6786e378a3d/models/db/context.go#L29-L34
#+end_src

#+RESULTS:
#+begin_src
// Context represents a db context
type Context struct {
	context.Context
	e           Engine
	transaction bool
}
#+end_src

#+caption: クエリを走らせるためのcontext
#+begin_src git-permalink
https://github.com/go-gitea/gitea/blob/8ef169a173c24e5ab57de8d6638bb6786e378a3d/models/db/context.go#L14-L16
#+end_src

#+RESULTS:
#+begin_src
// DefaultContext is the default context to run xorm queries in
// will be overwritten by Init with HammerContext
var DefaultContext context.Context
#+end_src

context.Contextはインターフェースなので、DefaultContextにはdb.Contextが入る。

このDBコンテキストは、Engine()を実装しているのでEnginedインターフェースを満たす。

#+begin_src git-permalink
https://github.com/go-gitea/gitea/blob/8ef169a173c24e5ab57de8d6638bb6786e378a3d/models/db/context.go#L67-L90
#+end_src

#+RESULTS:
#+begin_src
// Engined structs provide an Engine
type Engined interface {
	Engine() Engine
}

// GetEngine will get a db Engine from this context or return an Engine restricted to this context
func GetEngine(ctx context.Context) Engine {
	if e := getEngine(ctx); e != nil {
		return e
	}
	return x.Context(ctx)
}

// getEngine will get a db Engine from this context or return nil
func getEngine(ctx context.Context) Engine {
	if engined, ok := ctx.(Engined); ok {
		return engined.Engine()
	}
	enginedInterface := ctx.Value(enginedContextKey)
	if enginedInterface != nil {
		return enginedInterface.(Engined).Engine()
	}
	return nil
}
#+end_src

#+begin_src git-permalink
https://github.com/go-gitea/gitea/blob/8ef169a173c24e5ab57de8d6638bb6786e378a3d/models/db/context.go#L49-L52
#+end_src

#+RESULTS:
#+begin_src
// Engine returns db engine
func (ctx *Context) Engine() Engine {
	return ctx.e
}
#+end_src

** DBオブジェクト宣言

xormのオブジェクト作成はxorm.NewEngine()で行う。

#+caption: func newXORMEngine() (*xorm.Engine, error) で実行している
#+begin_src git-permalink
https://github.com/go-gitea/gitea/blob/8ef169a173c24e5ab57de8d6638bb6786e378a3d/models/db/engine.go#L107
#+end_src

#+RESULTS:
#+begin_src
		engine, err = xorm.NewEngine("postgresschema", connStr)
#+end_src

** テストで、どうやってDefaultContextをセットしているか

テストでたくさん使っている。便利だ。これはいつセットされているか。

最初にunittest.PrepareTestDatabase()する。この中でDefaultContextに対してクエリが実行されている。そのあとDefaultContextを直に取得して実行する。

#+begin_src git-permalink
https://github.com/go-gitea/gitea/blob/8ef169a173c24e5ab57de8d6638bb6786e378a3d/models/actions/runner_token_test.go#L16-L18
#+end_src

#+RESULTS:
#+begin_src
	assert.NoError(t, unittest.PrepareTestDatabase())
	token := unittest.AssertExistsAndLoadBean(t, &ActionRunnerToken{ID: 3})
	expectedToken, err := GetLatestRunnerToken(db.DefaultContext, 1, 0)
#+end_src

dbはcontextのvalueで持つべきじゃないらしい。リクエストスコープでないから。ダメじゃんと思ったけれども、contextの内部で持ってるわけではなく構造体で持ってるからいいのか。

** APIコンテキストはどうやって生成しているか

#+caption: リクエスト時の普通のcontextから、APIContextを生成している部分
#+begin_src git-permalink
https://github.com/go-gitea/gitea/blob/8ef169a173c24e5ab57de8d6638bb6786e378a3d/modules/context/api.go#L213-L243
#+end_src

#+RESULTS:
#+begin_src
// APIContexter returns apicontext as middleware
func APIContexter() func(http.Handler) http.Handler {
	return func(next http.Handler) http.Handler {
		return http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
			base, baseCleanUp := NewBaseContext(w, req)
			ctx := &APIContext{
				Base:  base,
				Cache: mc.GetCache(),
				Repo:  &Repository{PullRequest: &PullRequest{}},
				Org:   &APIOrganization{},
			}
			defer baseCleanUp()

			ctx.Base.AppendContextValue(apiContextKey, ctx)
			ctx.Base.AppendContextValueFunc(git.RepositoryContextKey, func() any { return ctx.Repo.GitRepo })

			// If request sends files, parse them here otherwise the Query() can't be parsed and the CsrfToken will be invalid.
			if ctx.Req.Method == "POST" && strings.Contains(ctx.Req.Header.Get("Content-Type"), "multipart/form-data") {
				if err := ctx.Req.ParseMultipartForm(setting.Attachment.MaxSize << 20); err != nil && !strings.Contains(err.Error(), "EOF") { // 32MB max size
					ctx.InternalServerError(err)
					return
				}
			}

			httpcache.SetCacheControlInHeader(ctx.Resp.Header(), 0, "no-transform")
			ctx.Resp.Header().Set(`X-Frame-Options`, setting.CORSConfig.XFrameOptions)

			next.ServeHTTP(ctx.Resp, ctx.Req)
		})
	}
}
#+end_src

ミドルウェアとして登録されている。

#+begin_src git-permalink
https://github.com/go-gitea/gitea/blob/8ef169a173c24e5ab57de8d6638bb6786e378a3d/routers/api/v1/api.go#L807
#+end_src

#+RESULTS:
#+begin_src
	m.Use(context.APIContexter())
#+end_src

DB関係なくないか。どこでセットされているか。

トランザクションコンテキストは必要。なぜ。

** マイグレーションコマンド

マイグレーションはタスクで行う。あるいは、Webの起動時にも関数が用意されている。

#+begin_src git-permalink
https://github.com/go-gitea/gitea/blob/8ef169a173c24e5ab57de8d6638bb6786e378a3d/cmd/migrate.go#L25
#+end_src

#+RESULTS:
#+begin_src
func runMigrate(ctx *cli.Context) error {
#+end_src

** テスト時にどうやってDB初期化されているか

- マイグレーション
- DefaultContext初期化

が必要なはずだが見当たらない。

unittest.PrepareTestDatabase() を見るが、そのときにはすでにDefaultContextからDBが取得できている。

各test packageにあるtest_main.goにある、TestMain関数内でunittest.MainTest()している。MainTest内でDBを初期化してる。テスト時に必ず実行される。

#+caption: 初期化している
#+begin_src git-permalink
  https://github.com/go-gitea/gitea/blob/8ef169a173c24e5ab57de8d6638bb6786e378a3d/models/unittest/testdb.go#L73
#+end_src

#+RESULTS:
#+begin_src
func MainTest(m *testing.M, testOpts ...*TestOptions) {
#+end_src
