:PROPERTIES:
:ID:       1fc79e15-1830-47eb-a31d-f33cd98ce2f8
:END:
#+title: DB Design
* 概要
データベース(DB)の設計に関してまとめる。
DBはシステムの核となるもので、DBが先にあって周辺プログラムが存在する。
データで失敗するとプログラムで挽回することは難しいため、非常に重要である。

論理設計のあとで各製品レベル([[id:7dab097c-60ba-43b9-949f-c58bf3151aa8][MySQL]],  [[id:752d725e-b834-4784-8110-c58f89bd4fa2][PostgreSQL]])での実装設計がある。
* Memo
** [[https://www.slideshare.net/t_wada/sql-antipatterns-digest][SQLアンチパターン - 開発者を待ち受ける25の落とし穴 (拡大版)]]
:LOGBOOK:
CLOCK: [2022-12-11 Sun 11:04]--[2022-12-11 Sun 11:29] =>  0:25
:END:
- アンチパターン
- 継承・ポリモーフィックに注意する。commentsテーブルにtype(bug, feature)フィールドがあって、分岐させてるような場合
  - 1つのテーブルに複数の事実が混ざっていてわかりづらい。アプリやクエリ側で吸収する必要がある
  - 関連を単純化する
  - comments -< bugsComments >- bugs
  - comments -< featureComments >- features
** [[https://eh-career.com/engineerhub/entry/2018/12/11/110000#%E3%83%87%E3%83%BC%E3%82%BF%E3%81%A8%E6%83%85%E5%A0%B1%E3%81%AE%E9%81%95%E3%81%84][DBの寿命はアプリより長い！長生きするDBに必要な設計とリファクタリングを実践から学ぶ]]
:LOGBOOK:
CLOCK: [2022-12-11 Sun 10:37]--[2022-12-11 Sun 11:02] =>  0:25
:END:
- 年齢は事実ではない。毎年カウントアップされ、変化するので情報。生年月日は変化しないのでデータ。データベースに保存するべきはデータ、事実
** [[https://www.slideshare.net/kawasima/ss-250716400][イミュータブルデータモデルの極意]]
:LOGBOOK:
CLOCK: [2022-12-11 Sun 10:12]--[2022-12-11 Sun 10:37] =>  0:25
:END:
- Event(コト)
  - 日時属性をもつ
  - 非対称性
  - ある一時点
  - 一時点の事実の記録なので、属性は変わることはない
- Resource(モノ)
  - 日時属性をもたない
  - 対称性
  - ライフサイクルがある
  - ライフサイクルにともない属性が変化していくこともある。属性が変化しても同じモノであることを示すためIdentityが必要
- 部門 -< 所属 >- 社員: 「所属」の関連を作るのに、「配属」イベントが存在しそれを記録する。リソースの関連とそれに関するイベントとは別で識別する
- どのイベントを記録して残すか。これが業務設計・システム設計。リソースの発生・変更・消滅するところにはイベントがある。つまり変更履歴がある
- 非依存のリソース同士が関連付け/解消されるところにはイベントがある。予約・注文・配属・割当。これらの操作履歴
- 全部が必要ではない。コストがかかるので取捨選択する
  - 金になるもの
  - 記録がないと金を失うリスクがあるもの
  - 記録すると決めたイベントは、Factが失われるので決して変更されてはならない
** [[https://www.slideshare.net/kawasima/ss-40471672][イミュータブルデータモデル(入門編)]]
- モデルの複雑性を生むのは、UPDATEに関する要件
- モデルに対するデータの更新を極限まで削ることで、拡張に対して開いていて、修正に対して閉じている堅牢なものにする
- ミュータブルな箇所を特定し、そのUPDATEを許可する
- 更新日時という属性を徹底的に排除する
- リソースとイベントを分ける基準は属性に日時をもつかどうか
- イベントエンティティは1つの日時属性しか持たないようにする
  - イベント系エンティティは更新が入らないデータが格納されるもの
- 会員を管理するシステムの場合 会員 -< 会員変更 とし、変更日時フィールドは会員変更テーブルが持つ
- 非依存リレーションシップを表現できているか。互いに独立に存在しえて、何らかのイベントによって、それらに関連性が作られるという、このイベントが何か洗い出せているか(例: 配属・購読)
** [[https://www.slideshare.net/kawasima/ss-44958468][イミュータブルデータモデル(世代編)]]
- 世代の設計方法
- イベントは更新不可
  - 過日のイベントと未来の予定イベントは区別して扱う
  - 過去の価格は変更できない。未来の価格は変更でき、変更予定を取り消すことができる
  - 値付け実績、予定価格を分ける
  - 期間によって変わる属性を別のテーブルにする。変更したときはUPDATEではなく追加になる
- UPDATEを避ける
** [[https://www.amazon.co.jp/%E6%A5%BD%E3%80%85ERD%E3%83%AC%E3%83%83%E3%82%B9%E3%83%B3-CodeZine-BOOKS-%E3%82%B9%E3%82%BF%E3%83%BC%E3%83%AD%E3%82%B8%E3%83%83%E3%82%AF-%E7%BE%BD%E7%94%9F/dp/4798110663][楽々ERDレッスン (CodeZine BOOKS) | (株)スターロジック 羽生 章洋 |本 | 通販 | Amazon]]
:LOGBOOK:
CLOCK: [2022-07-31 Sun 10:58]--[2022-07-31 Sun 11:23] =>  0:25
CLOCK: [2022-07-26 Tue 09:12]--[2022-07-26 Tue 09:37] =>  0:25
CLOCK: [2022-07-24 Sun 21:00]--[2022-07-24 Sun 21:25] =>  0:25
CLOCK: [2022-07-24 Sun 20:34]--[2022-07-24 Sun 20:59] =>  0:25
CLOCK: [2022-07-24 Sun 14:52]--[2022-07-24 Sun 15:17] =>  0:25
CLOCK: [2022-07-24 Sun 14:18]--[2022-07-24 Sun 14:43] =>  0:25
CLOCK: [2022-07-23 Sat 20:50]--[2022-07-23 Sat 21:15] =>  0:25
CLOCK: [2022-07-23 Sat 19:42]--[2022-07-23 Sat 20:07] =>  0:25
CLOCK: [2022-07-23 Sat 19:08]--[2022-07-23 Sat 19:33] =>  0:25
CLOCK: [2022-07-23 Sat 18:39]--[2022-07-23 Sat 19:04] =>  0:25
CLOCK: [2022-07-23 Sat 16:32]--[2022-07-23 Sat 16:57] =>  0:25
:END:

*** 所属はイベント
社員が組織に所属していることから直感的に、組織 -< 社員 としたくなるが、これは誤り。組織がなくなっても社員が消えることはない。所属はイベントとして扱い、組織 -< 所属 >- 社員 とするのが正しい。組織と社員は互いに独立したエンティティ。

*** DB設計の手順
- 大まかにブロック分けを行う(業務単位か部門単位)
- それぞれのブロックごとにイベント系を洗い出す
  - タイムスタンプを打てるのがイベント系
  - 入力系業務と出力系業務に着目する
- イベント系に対する正規化を行って、リソース系を洗い出す
  - 論理的なデータ構造を押さえることに注力する
- リソース系に対する分類の洗い出しを行って、リソース系の正規化を行う
- ブロック間でリソースの統合を行い、さらに正規化を行う
- 導出系の整理をして、最終的な正規化を行う

*** 実績系・計画系・分析系の違い
- 基幹系
  - 実績データを取り扱う
- 計画系
  - 版が存在する
- 分析系
  - 版が存在する

*** データライフサイクル
- データにはライフサイクルがある。CRUD。
- データ構造とトランザクションの間に、CRUDを通じてマトリックスが書ける。各処理で、どのライフサイクルの処理を行うのか
- トランザクションを正規化しなければ、無駄なプロセスが発生する
- トランザクションの多くはUIを必要とする。UIと利用する立場によってマトリックスが書ける。そうしてユーザの役割を正規化する
- RDBMSのテーブル設計だけが設計ではない
- データはプロセスよりも永続性が高い。プロセスのありかたは変わっていくが、何をいくついくらで売ったというデータの構造は基本的に変わらないはずであるから
- インデックスは並び替え。並び替えるのにコストがかかるが探すのが早くなる。検索と更新のトレードオフ
* Tasks
** TODO [[https://zenn.dev/rebi/articles/28c7f1fee5730a][RDBのデータモデリング・テーブル設計の際に参考にしている考え方と資料]]
データベース設計のリンク集。
* Reference
* Archives
** DONE [[https://www.amazon.co.jp/dp/B00EE1XPAI/ref=dp-kindle-redirect?_encoding=UTF8&btkr=1][Amazon.co.jp: 達人に学ぶDB設計 徹底指南書 eBook : ミック: Kindle Store]]
CLOSED: [2021-10-23 Sat 14:07] DEADLINE: <2021-10-31 Sun>
:LOGBOOK:
CLOCK: [2021-10-21 Thu 22:58]--[2021-10-21 Thu 23:23] =>  0:25
:END:
** DONE [[https://engineers.weddingpark.co.jp/mysql-database-design/][【DB設計入門|ER図|MySQL】コンビニレシートから学ぶ！データモデリング手法 | Wedding Park CREATORS Blog]]
CLOSED: [2022-07-23 Sat 16:31]
:LOGBOOK:
CLOCK: [2022-07-23 Sat 16:03]--[2022-07-23 Sat 16:28] =>  0:25
:END:
** DONE レシートで設計練習
CLOSED: [2022-10-21 Fri 23:35]
:LOGBOOK:
CLOCK: [2022-10-21 Fri 22:41]--[2022-10-21 Fri 23:06] =>  0:25
CLOCK: [2022-10-21 Fri 22:16]--[2022-10-21 Fri 22:41] =>  0:25
:END:
