:PROPERTIES:
:ID:       fb4240f7-7947-4897-98c7-4b6d325e8e29
:END:
#+title: OAuth
* 概要
OAuthは認可の仕組み。クライアントがリソース所有者に代わってリソースサーバを使用することを可能にする認可フレームワーク。あるいは、アプリケーションがユーザに代わってAPIを使用することを可能にする認可フレームワーク。

権限の情報をやりとりするためにはアクセストークンを用いる。OAuthはアクセストークンを発行するためのルールともいえる。

#+caption: 関連図
#+begin_src mermaid :file images/20230206221548-G3FG1GRFEV.png
  flowchart LR
  A[fa:fa-user-circle Twitterユーザー\n<リソースオーナー>]
  B[fa:fa-robot Twitterスケジューラー\nアプリケーション\n<クライアント>]
  C[fa:fa-server Twitter API\n<リソースサーバ>]
  D[fa:fa-key 認可サーバ\nTwitter OAuth]

  A -- 1.クライアントから\nツイートさせる設定 --> B
  B -- 2.Twitterに対して\nツイート権限を要求 --> D
  D -- 3.ツイート権限をクライアントに\n移譲することをユーザに確認 --> A
  A -- 4.権限移譲に同意 --> D
  D -- 5.権限が移譲された証として\nアクセストークンを発行して\nクライアントに渡す  --> B
  B -- 6.クライアントはアクセストークン\nを使ってツイート送信を要求 --> C
  C -- 7.アクセストークンの有効性と\n権限を確認し問題がなければツイート --> B
#+end_src

#+RESULTS:
[[file:images/20230206221548-G3FG1GRFEV.png]]

* Memo
** OAuthを認証に使う問題点
:LOGBOOK:
CLOCK: [2023-02-05 Sun 14:37]--[2023-02-05 Sun 15:02] =>  0:25
:END:
OAuthは認可についての仕様であり、認証に用いるには問題がある。

- 悪意のあるアプリが、他人のアクセストークンを取得する → アクセストークンを差し替えて、別のユーザとしてログインできてしまう
- アクセストークンを入手した場合、ほかのサイトにログインできてしまう。切符を盗まれるのと同じで、誰が持っているかは問題ではないから
** OAuth2.0 State
- [[https://qiita.com/naoya_matsuda/items/67a5a0fb4f50ac1e30c1][OAuth2.0 State の役割 - Qiita]]

CSRF対策のために必要。[[id:fb4240f7-7947-4897-98c7-4b6d325e8e29][OAuth]]2.0におけるCSRF攻撃は、一般的なCSRFとは少し意味が異なる。攻撃の標的となったユーザに攻撃者のリソースを処理させる権限を与えること。

* Tasks
** TODO [[https://tech-lab.sios.jp/archives/8091][OAuthを実装してみました | SIOS Tech. Lab]]
わかりやすい解説。
* Reference
** [[https://www.sakimura.org/2011/05/1087/][非技術者のためのOAuth認証(?)とOpenIDの違い入門 – @_Nat Zone]]
意味の違いから詳しく説明。
** [[https://tech-lab.sios.jp/archives/13002][「単なるOAUTH 2.0を認証に使うと、車が通れるほどのどでかいセキュリティー・ホールができる」について | SIOS Tech. Lab]]
お叱り記事。
** [[https://tech-lab.sios.jp/archives/8091][OAuthを実装してみました | SIOS Tech. Lab]]
実装する記事。
** [[https://qiita.com/TakahikoKawasaki/items/f2a0d25a4f05790b3baa][OAuth 2.0 + OpenID Connect のフルスクラッチ実装者が知見を語る - Qiita]]
詳しい解説。
** [[https://developer.ntt.com/ja/blog/27d30623-f460-43af-97c9-10e60433dae4][OAuth2.0サーバを素早く立てるライブラリ・フレームワークまとめ | NTT Communications Developer Portal]]
ライブラリ集。
** [[https://speakerdeck.com/d_endo/30fen-deopenid-connectwan-quan-nili-jie-sitatoyan-eruyouninarumian-qiang-hui?slide=30][30分でOpenID Connect完全に理解したと言えるようになる勉強会 - Speaker Deck]]
図が多くてわかりやすいスライド。

- OpenID Connect(IDDC) = OAuth + IDトークン + UserInfoエンドポイント
- 3種類のフロー
  - 認可フロー
    - 安全にclient secretを保存できるクライアン用(サーバ)
  - インプリシットフロー
    - 安全にclient secretを保存できないクライアント用(アプリ)
  - ハイブリットフロー
    - 安全にアクセストークンやIDトークンを保存できないクライアント用(SPA)
** [[https://ritou.hatenablog.com/entry/2020/12/01/000000][OAuth認証とは何か?なぜダメなのか - 2020冬 - r-weblife]]
お叱り記事。
** [[https://qiita.com/TakahikoKawasaki/items/e37caf50776e00e733be][一番分かりやすい OAuth の説明 - Qiita]]
:LOGBOOK:
CLOCK: [2023-02-05 Sun 13:33]--[2023-02-05 Sun 13:58] =>  0:25
:END:
解説。
* Archives
