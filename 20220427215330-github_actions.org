:PROPERTIES:
:ID:       2d35ac9e-554a-4142-bba7-3c614cbfe4c4
:END:
#+title: GitHub Actions
* 概要
GitHub Actionsは[[id:6b889822-21f1-4a3e-9755-e3ca52fa0bc4][GitHub]]が提供する[[id:eaf6ed04-7927-4a16-ba94-fbb9f6e76166][CI]]/[[id:2c4cb3a7-7a8a-4a3b-88c2-2c5e69515764][CD]]環境。
コードやプロジェクトに対するタスクを実行できる。
* Memo
** 差分をチェックする
:LOGBOOK:
CLOCK: [2022-12-18 Sun 10:50]--[2022-12-18 Sun 11:15] =>  0:25
:END:
** jobを共通化する

job間での共通部分はまとめて書くことですっきり書け、ジョブの高速化もできる。

- キャッシュ
- 言語環境

はどのタスクでも使うので、共通化できる。

#+caption: 例。setup->(build, test)とジョブが実行される
#+begin_src yaml
name: Check

on:
  push:

jobs:
  # 共通処理で言語環境とキャッシュの用意をやる
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: set up
        uses: actions/setup-go@v2
        with:
          go-version: ^1.19
      - name: check out
        uses: actions/checkout@v3
      - name: Cache
        uses: actions/cache@main
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
  build:
    needs: setup # 依存関係
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: build
        run: go build .
  test:
    needs: setup # 依存関係
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: test
        run: go test . -v
#+end_src

** キャッシュ破棄ポリシーの落とし穴
毎回ビルドキャッシュ保存をしてるのに、あまりキャッシュヒットせず、毎回最初からになる現象に悩まされていた。デフォルトブランチでもマージするたびに行っていたので、キャッシュのブランチスコープの問題ではないように見えた。

問題の原因は、キャッシュ破棄ポリシーだった。1週間という期間と、リポジトリ合計で10GBという制限がある。

#+begin_quote
利用制限と退去のポリシー
GitHubは、7日間以上アクセスされていないキャッシュエントリを削除します。 There is no limit on the number of caches you can store, but the total size of all caches in a repository is limited to 10 GB.
この制限を超えた場合、GitHubは新しいキャッシュを保存しますが、合計サイズがリポジトリの制限以下になるまでキャッシュを退去させはじめます。
#+end_quote

キャッシュサイズは2GBあったため、5回分しか保持されない計算。その回数のうちで、デフォルトブランチ以外のビルドでキャッシュが追い出されていくため、デフォルトブランチでのキャッシュがない状態になる。そのため、キャッシュヒットしない状態になる。妥協点はデフォルトブランチでのみキャッシュ保存し、別のブランチでは読み込みだけにすることだが、cacheアクションには保存だけするオプションがない。

- https://github.com/actions/cache/pull/489

** cacheスコープ
- [[https://zenn.dev/mallowlabs/articles/github-actions-cache-scope#actions%2Fcache-%E3%81%AE%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%97][GitHub Actions の cache アクションでキャッシュヒットしない時はスコープを確認してみる]]
- [[https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows#restrictions-for-accessing-a-cache][Caching dependencies to speed up workflows - GitHub Docs]]

pushトリガーのジョブで、こんな感じにキャッシュを使っているとする。
#+begin_src yaml
    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
#+end_src

restore-keysはキャッシュ検索に使うkey。メインのkeyはgithub.shaによってすべてのコミットで別々にキャッシュ保存するので、完全一致でキャッシュ取得できることはない。ので、restore-keyが必要。キーが部分一致するので、後続のコミットで利用できる。

が、これだけではブランチが変わったとき、ブランチの最初ではキャッシュが利用されない。これがスコープ。スコープの探索は 同じブランチ → ベースブランチ → デフォルトブランチ のみで行われるので、ブランチの最初ではヒットしないということ。これを防ぐために、デフォルトブランチで定期的にpush保存を必要がある。

#+begin_quote
キャッシュキーのマッチング
cache アクションは最初に、ワークフロー実行を含むブランチで key および restore-keys のキャッシュヒットを検索します。 現在のブランチにヒットがない場合、cache アクションは、親ブランチと上流のブランチで key および restore-keys を検索します。
restore-keys allows you to specify a list of alternate restore keys to use when there is a cache miss on key. 特定の度合いが強いものから弱いものへ並べて複数のリストアキーを作成できます。 The cache action searches the restore-keys in sequential order. キーが直接マッチしなかった場合、アクションはリストアキーでプレフィックスされたキーを検索します。 リストアキーに対して複数の部分一致があった場合、アクションは最も最近に作成されたキャッシュを返します。
#+end_quote

** reuseable actionにおけるsecretsの扱い方
#+caption: caller
#+begin_src yaml
  jobs:
    called:
      uses: user/repo/.github/workflows/called.yml@main
      with:
        text: ${{ github.event.inputs.text }}
        secrets: # ←←←
        DUMMY: ${{ secrets.DUMMY }} # ←←← caller側ではとくになにもせずともsecretsが使える
#+end_src

#+caption: called
#+begin_src yaml
  on:
    workflow_call:
      inputs:
        text:
          type: string
          required: true
      secrets: # ←←←
        DUMMY: # ←←←called側ではここで定義されていて、かつ呼び出し側のsecretsで定義されてないとsecretsは参照不可
          required: true

  jobs:
    called:
      runs-on: ubuntu-latest
      steps:
        - name: output secret
          run: |
            echo ${{ secrets.DUMMY }}
#+end_src
** Stale Bot
動きがないIssueやPRを自動的にマークしたりcloseするGitHub bot。
[[https://github.com/probot/stale][probot/stale: A GitHub App built with Probot that closes abandoned Issues and Pull Requests after a period of inactivity.]]

設定の例(rubocop)。
https://github.com/rubocop/rubocop/blob/master/.github/stale.yml
** PRの編集ファイルによって自動でラベルをつける
面倒なラベル付けを自動化する。

#+caption: actions https://github.com/upptime/uptime-monitor/blob/master/.github/workflows/labeler.yml
#+begin_src yaml
name: Pull Request Labeler
on:
  - pull_request
  - pull_request_review
jobs:
  triage:
    runs-on: ubuntu-latest
    steps:
      - name: Label all PRs
        uses: actions/labeler@master
        with:
          repo-token: "${{ secrets.GH_PAT }}"
      - name: Label approved PRs
        uses: koj-co/label-approved-action@master
        with:
          labels: "merge"
        env:
          GITHUB_TOKEN: "${{ secrets.GH_PAT }}"
#+end_src

#+caption: labels.yml https://github.com/upptime/uptime-monitor/blob/master/.github/labeler.yml
#+begin_src yaml
config:
  - ./*
tooling:
  - tooling/**/*.*
assets:
  - static/**/*.*
tests:
  - any: ["src/**/*.spec.js", "cypress/**/*"]
package:
  - any: ["package.json", "package-lock.json"]
source:
  - src/**/*
#+end_src
** GitHub Actionsのトリガー
pathsで特定ファイルが変更されたときのみ実行するときの注意点。
pushは使わずに、pull_requestトリガーを使うべき。

#+caption: 良い。Dockerfileが含まれるPRではすべて実行される
#+begin_src yaml
on:
  pull_request:
    paths:
      - 'Dockerfile'
#+end_src

#+caption: 悪い。Dockerfileが含まれないコミットでは実行されない。漏れやすい
#+begin_src yaml
on:
  push:
    paths:
      - 'Dockerfile'
#+end_src

pushではpull_request全体の変更を追うことができないので、コミットが分かれているとジョブが走らず、あたかもパスしているように見えて危険。
* Tasks
** 実行時間の統計を取りたい
何で遅くなった、早くなったか把握したい。
** DONE [[https://note.com/tably/n/n46041458d6b3][GitHub Actions向け自作アクションの作り方｜Tably｜note]]
CLOSED: [2022-04-30 Sat 11:00]
:LOGBOOK:
CLOCK: [2022-04-30 Sat 10:40]--[2022-04-30 Sat 11:00] =>  0:20
:END:
作り方。
* Reference
** [[https://github.com/release-drafter/release-drafter][release-drafter/release-drafter: Drafts your next release notes as pull requests are merged into master.]]
タグを自動で打ち、リリースを作成する便利なアクション。
** [[https://developer.mamezou-tech.com/blogs/2022/03/08/github-actions-reuse-workflows/][GitHub Actions - 再利用可能ワークフローを使う | 豆蔵デベロッパーサイト]]
reuseable workflowの説明。
** [[https://stackoverflow.com/questions/69521380/secret-interpolation-is-giving-syntax-error-in-caller-workflow-when-calling-a-re][continuous integration - Secret interpolation is giving syntax error in caller workflow when calling a resusable workflow in GitHub Action - Stack Overflow]]
reuseable workflowでは secrets専用で渡す。
** [[https://zenn.dev/hsaki/articles/github-actions-component][GitHub ActionsにおけるStep/Job/Workflow設計論]]
** [[https://zenn.dev/snowcait/articles/787e83640746e1][Composite Action Template を作りました GitHub Actions]]
自作アクションの作り方。ミニマルでわかりやすい。
[[https://github.com/snow-actions/git-config-user][snow-actions/git-config-user: Set git user name and email address]]
* Archives
