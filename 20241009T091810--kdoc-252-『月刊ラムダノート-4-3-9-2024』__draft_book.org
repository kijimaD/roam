:properties:
:ID: 20241009T091810
:end:
#+title:      KDOC 252: 『月刊ラムダノート 4-3-9-2024』
#+date:       [2024-10-09 Wed 09:18]
#+filetags:   :draft:book:
#+identifier: 20241009T091810

# (denote-rename-file-using-front-matter (buffer-file-name) 0)
# (save-excursion (while (re-search-backward ":draft" nil t) (replace-match "")))
# (flush-lines "^\\#\s.+?")

# ====ポリシー。
# 1ファイル1アイデア。
# 1ファイルで内容を完結させる。
# 常にほかのエントリとリンクする。
# 自分の言葉を使う。
# 参考文献を残しておく。
# 文献メモの場合は、感想と混ぜないこと。1つのアイデアに反する
# ツェッテルカステンの議論に寄与するか
# 頭のなかやツェッテルカステンにある問いとどのようにかかわっているか
# エントリ間の接続を発見したら、接続エントリを追加する。カード間にあるリンクの関係を説明するカード。
# アイデアがまとまったらアウトラインエントリを作成する。リンクをまとめたエントリ。
# エントリを削除しない。古いカードのどこが悪いかを説明する新しいカードへのリンクを追加する。
# 恐れずにカードを追加する。無意味の可能性があっても追加しておくことが重要。

# ====永久保存メモのルール。
# 自分の言葉で書く。
# 後から読み返して理解できる。
# 他のメモと関連付ける。
# ひとつのメモにひとつのことだけを書く。
# メモの内容は1枚で完結させる。
# 論文の中に組み込み、公表できるレベルである。

# ====価値があるか。
# その情報がどういった文脈で使えるか。
# どの程度重要な情報か。
# そのページのどこが本当に必要な部分なのか。

* この文書のステータス
:LOGBOOK:
CLOCK: [2024-10-28 Mon 20:56]--[2024-10-28 Mon 21:21] =>  0:25
CLOCK: [2024-10-09 Wed 16:54]--[2024-10-09 Wed 17:19] =>  0:25
:END:
- 作成
  - [ ] <署名>
# (progn (kill-line -1) (insert (format "  - [X] %s 貴島" (format-time-string "%Y-%m-%d"))))
- レビュー
  - [ ] <署名>
# (progn (kill-line -1) (insert (format "  - [X] %s 貴島" (format-time-string "%Y-%m-%d"))))

# 関連をつけた。
# タイトルがフォーマット通りにつけられている。
# 内容をブラウザに表示して読んだ(作成とレビューのチェックは同時にしない)。
# 文脈なく読めるのを確認した。
# おばあちゃんに説明できる。
# いらない見出しを削除した。
# タグを適切にした。
# すべてのコメントを削除した。
* 概要
:LOGBOOK:
CLOCK: [2024-10-28 Mon 23:44]--[2024-10-29 Tue 00:09] =>  0:25
:END:
# 本文(タイトルをつける)。
[[https://www.lambdanote.com/collections/frontpage/products/n-vol-4-no-3-2024-ebook][n月刊ラムダノート Vol.4, No.3(2024)]]は以下の章で構成される。

1. TypeScriptではじめる型システム（遠藤侑介）
2. 型を活用した安全なアプリケーション開発（佐藤有斗）
3. 「インターネットのカタチ」のその後（小川晃通）

* メモ
- たとえば処理系ではプログラムを実行するたびに「値がnullでないか」をチェックする。こうしたチェックには、計算機性能や用途次第では無視できないほどのオーバーヘッドがかかる。そこで歴史的に、動作保証しようとしたら実行時オーバーヘッドがかかってしまうような動作は「未定義」であるとし、その対処を言語の責任ではなくプログラマの責任としたCやC++といったプログラミング言語が、特に実行速度が求められるプログラムでは使われてきた。しかし未定義動作は、その回避に対して責任があるプログラマにとっては不便であったり間違いの原因になったりする。このように未定義動作に陥る問題を解決する方法のひとつが型システムである。未定義動作に陥る可能性のあるプログラムを実行前に型検査器で判定し、OKとされたプログラムは未定義動作にならない、ということが保証できる(p5)
- [[id:a6980e15-ecee-466e-9ea7-2c0210243c0d][JavaScript]]のプログラムは未定義動作に陥ることがない。なので[[id:ad1527ee-63b3-4a9b-a553-10899f57c234][TypeScript]]の型システムは型安全性を厳密に保証する必要がない(p5)
- "argument" と "parameter" を使い分けることもある。"argument" を実引数、 "parameter" を仮引数として使い分けたりする。言語やコミュニティによって異なる(p19)
- 型の等価判定をするための関数と、変数がどういう型を持っているかの情報を保持する仕組みを実装する(p22)

* 関連
# 関連するエントリ。なぜ関連させたか理由を書く。意味のあるつながりを意識的につくる。
# この事実は自分のこのアイデアとどう整合するか。
# この現象はあの理論でどう説明できるか。
# ふたつのアイデアは互いに矛盾するか、互いを補っているか。
# いま聞いた内容は以前に聞いたことがなかったか。
# メモ y についてメモ x はどういう意味か。
