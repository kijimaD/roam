:PROPERTIES:
:ID:       ddc21510-6693-4c1e-9070-db0dd2a8160b
:header-args+: :wrap :results raw
:END:
#+title: Rust
* 概要
RustはC言語、C++の置換を目指した[[id:868ac56a-2d42-48d7-ab7f-7047c85a8f39][Programming Language]]。

- 性能
- メモリ安全性
- 安全な並行性

を特徴とする。

[[id:4270d99a-d2b5-429e-b33c-c2e097b20730][Zig]]と方向性が同じ。
* Memo
** 変更を検知して自動ビルド
変更したら自動でcargo runしてほしいときがある。

#+caption: cargo-watchを使う
#+begin_src shell
cargo install cargo-watch
cargo watch -x run
#+end_src
** ~println!~ マクロ
#+begin_src rust
  println!("hello world!");
  println!("{} days", 31);
  println!("{0}, this is {1}, {1}, this is {0}", "Alice", "Bob");
  println!("{} of {:b} people know binary, the other half doesn't", 1, 2);
  println!("{number:>0width$}", number=1, width=6);
  println!("{subject} {verb} {object}", object="the lazy dog", subject="the quick brown fox", verb="jumps over");
#+end_src

#+RESULTS:
#+begin_results
hello world!
31 days
Alice, this is Bob, Bob, this is Alice
1 of 10 people know binary, the other half doesn't
000001
the quick brown fox jumps over the lazy dog
#+end_results

引数チェックもしてくれる。
#+begin_src rust
  println!("My name is {0}, {1} {0}", "Bond");
#+end_src

#+RESULTS:
#+begin_results
error: invalid reference to positional argument 1 (there is 1 argument)
 --> /tmp/babel-wnDbpn/rust-W98kSP:2:27
  |
2 | println!("My name is {0}, {1} {0}", "Bond");
  |                           ^^^
  |
  = note: positional arguments are zero-based

error: aborting due to previous error
#+end_results

マーカーの変更。
#+begin_src rust
  println!("This struct `{}` won't print...", Structure(3));
#+end_src

#+RESULTS:
#+begin_results
error[E0425]: cannot find function, tuple struct or tuple variant `Structure` in this scope
 --> /tmp/babel-wnDbpn/rust-If17CF:2:45
  |
2 | println!("This struct `{}` won't print...", Structure(3));
  |                                             ^^^^^^^^^ not found in this scope

error: aborting due to previous error

For more information about this error, try `rustc --explain E0425`.
#+end_results

#+begin_src rust
  #[derive(Debug)]
  struct Structure(i32);
  println!("This struct `{:?}` won't print...", Structure(3));
#+end_src

#+RESULTS:
#+begin_results
This struct `Structure(3)` won't print...
#+end_results

* パッケージ
** [[id:1ad8c3d5-97ba-4905-be11-e6f2626127ad][Emacs]]をRustで書き直すプロジェクト
EmacsのC言語で書かれた部分をRustに書き直すリポジトリがある。
[[https://github.com/remacs/remacs][remacs/remacs: Rust Emacs]]
** 超高速検索できるripgrep
高速検索するripgrepは、ほかのどのgrepツールより早いらしい。

- repository :: [[https://github.com/BurntSushi/ripgrep][BurntSushi/ripgrep]]
** 新世代の[[id:585d3b5e-989d-4363-bcc3-894402fcfcf9][Shell]], nushell
[[id:fa497359-ae3f-494a-b24a-9822eefe67ad][System Crafters]]の動画[[https://www.youtube.com/watch?v=IHeKUeO7bpo][Integrating Nushell with Emacs]]のコラボ回で出たパッケージ。
リッチな出力形式、便利コマンドがすごい。
- repository :: [[https://github.com/nushell/nushell][nushell/nushell: A new type of shell]]
* Tasks
** DONE [[https://rust-cli.github.io/book/index.html][Getting started - Command Line Applications in Rust]]
CLOSED: [2022-05-04 Wed 16:40]
:LOGBOOK:
CLOCK: [2022-05-04 Wed 16:39]--[2022-05-04 Wed 16:40] =>  0:01
CLOCK: [2022-05-04 Wed 16:05]--[2022-05-04 Wed 16:30] =>  0:25
CLOCK: [2022-05-04 Wed 11:12]--[2022-05-04 Wed 11:37] =>  0:25
CLOCK: [2022-05-04 Wed 10:47]--[2022-05-04 Wed 11:12] =>  0:25
CLOCK: [2022-05-03 Tue 10:27]--[2022-05-03 Tue 10:52] =>  0:25
:END:
コマンドラインプログラムを作るチュートリアル。
** TODO [[https://doc.rust-jp.rs/rust-by-example-ja/][Introduction - Rust By Example 日本語版]]
** TODO [[https://doc.rust-jp.rs/book-ja/title-page.html][The Rust Programming Language 日本語版]]
** TODO [[https://bfnightly.bracketproductions.com/][Introduction - Roguelike Tutorial - In Rust]]
:LOGBOOK:
CLOCK: [2022-04-02 Sat 23:33]--[2022-04-02 Sat 23:58] =>  0:25
CLOCK: [2022-04-02 Sat 21:36]--[2022-04-02 Sat 22:01] =>  0:25
CLOCK: [2022-04-02 Sat 21:11]--[2022-04-02 Sat 21:36] =>  0:25
CLOCK: [2022-04-02 Sat 20:13]--[2022-04-02 Sat 20:38] =>  0:25
CLOCK: [2022-04-02 Sat 19:14]--[2022-04-02 Sat 19:39] =>  0:25
CLOCK: [2022-04-02 Sat 17:55]--[2022-04-02 Sat 18:20] =>  0:25
CLOCK: [2022-04-02 Sat 17:24]--[2022-04-02 Sat 17:49] =>  0:25
CLOCK: [2022-04-02 Sat 16:46]--[2022-04-02 Sat 17:11] =>  0:25
CLOCK: [2022-04-02 Sat 16:17]--[2022-04-02 Sat 16:42] =>  0:25
CLOCK: [2022-04-02 Sat 15:52]--[2022-04-02 Sat 16:17] =>  0:25
CLOCK: [2022-04-02 Sat 15:26]--[2022-04-02 Sat 15:51] =>  0:25
CLOCK: [2022-04-02 Sat 11:35]--[2022-04-02 Sat 12:00] =>  0:25
CLOCK: [2022-04-02 Sat 11:10]--[2022-04-02 Sat 11:35] =>  0:25
CLOCK: [2022-04-01 Fri 22:52]--[2022-04-01 Fri 23:17] =>  0:25
CLOCK: [2022-04-01 Fri 22:00]--[2022-04-01 Fri 22:25] =>  0:25
CLOCK: [2022-04-01 Fri 20:19]--[2022-04-01 Fri 20:44] =>  0:25
CLOCK: [2022-03-31 Thu 22:30]--[2022-03-31 Thu 22:55] =>  0:25
CLOCK: [2022-03-31 Thu 21:23]--[2022-03-31 Thu 21:48] =>  0:25
CLOCK: [2022-03-31 Thu 09:38]--[2022-03-31 Thu 10:03] =>  0:25
CLOCK: [2022-03-31 Thu 09:13]--[2022-03-31 Thu 09:38] =>  0:25
CLOCK: [2022-03-31 Thu 00:11]--[2022-03-31 Thu 00:36] =>  0:25
CLOCK: [2022-03-30 Wed 23:45]--[2022-03-31 Thu 00:10] =>  0:25
CLOCK: [2022-03-30 Wed 23:20]--[2022-03-30 Wed 23:45] =>  0:25
CLOCK: [2022-03-30 Wed 10:31]--[2022-03-30 Wed 10:56] =>  0:25
CLOCK: [2022-03-30 Wed 09:56]--[2022-03-30 Wed 10:21] =>  0:25
CLOCK: [2022-03-29 Tue 22:48]--[2022-03-29 Tue 23:13] =>  0:25
CLOCK: [2022-03-28 Mon 23:58]--[2022-03-29 Tue 00:23] =>  0:25
CLOCK: [2022-03-28 Mon 22:28]--[2022-03-28 Mon 22:53] =>  0:25
CLOCK: [2022-03-28 Mon 10:26]--[2022-03-28 Mon 10:51] =>  0:25
CLOCK: [2022-03-28 Mon 09:58]--[2022-03-28 Mon 10:23] =>  0:25
CLOCK: [2022-03-28 Mon 09:21]--[2022-03-28 Mon 09:46] =>  0:25
CLOCK: [2022-03-27 Sun 23:09]--[2022-03-27 Sun 23:34] =>  0:25
CLOCK: [2022-03-27 Sun 22:44]--[2022-03-27 Sun 23:09] =>  0:25
CLOCK: [2022-03-27 Sun 22:16]--[2022-03-27 Sun 22:41] =>  0:25
CLOCK: [2022-03-27 Sun 21:51]--[2022-03-27 Sun 22:16] =>  0:25
CLOCK: [2022-03-27 Sun 21:12]--[2022-03-27 Sun 21:37] =>  0:25
CLOCK: [2022-03-27 Sun 20:46]--[2022-03-27 Sun 21:11] =>  0:25
CLOCK: [2022-03-27 Sun 19:43]--[2022-03-27 Sun 20:08] =>  0:25
CLOCK: [2022-03-27 Sun 19:18]--[2022-03-27 Sun 19:43] =>  0:25
CLOCK: [2022-03-27 Sun 18:36]--[2022-03-27 Sun 19:01] =>  0:25
CLOCK: [2022-03-27 Sun 17:43]--[2022-03-27 Sun 18:08] =>  0:25
CLOCK: [2022-03-27 Sun 17:08]--[2022-03-27 Sun 17:33] =>  0:25
CLOCK: [2022-03-27 Sun 16:33]--[2022-03-27 Sun 16:58] =>  0:25
CLOCK: [2022-03-27 Sun 15:50]--[2022-03-27 Sun 16:15] =>  0:25
CLOCK: [2022-03-27 Sun 15:11]--[2022-03-27 Sun 15:36] =>  0:25
CLOCK: [2022-03-27 Sun 14:43]--[2022-03-27 Sun 15:08] =>  0:25
CLOCK: [2022-03-27 Sun 14:17]--[2022-03-27 Sun 14:42] =>  0:25
CLOCK: [2022-03-27 Sun 00:37]--[2022-03-27 Sun 01:02] =>  0:25
CLOCK: [2022-03-26 Sat 23:32]--[2022-03-26 Sat 23:57] =>  0:25
CLOCK: [2022-03-26 Sat 23:06]--[2022-03-26 Sat 23:31] =>  0:25
CLOCK: [2022-03-26 Sat 21:08]--[2022-03-26 Sat 21:33] =>  0:25
CLOCK: [2022-03-26 Sat 18:43]--[2022-03-26 Sat 19:08] =>  0:25
CLOCK: [2022-03-26 Sat 17:56]--[2022-03-26 Sat 18:21] =>  0:25
CLOCK: [2022-03-26 Sat 16:19]--[2022-03-26 Sat 16:44] =>  0:25
CLOCK: [2022-03-26 Sat 15:46]--[2022-03-26 Sat 16:11] =>  0:25
CLOCK: [2022-03-26 Sat 15:06]--[2022-03-26 Sat 15:31] =>  0:25
CLOCK: [2022-03-26 Sat 11:36]--[2022-03-26 Sat 12:01] =>  0:25
CLOCK: [2022-03-26 Sat 11:02]--[2022-03-26 Sat 11:27] =>  0:25
CLOCK: [2022-03-26 Sat 09:54]--[2022-03-26 Sat 10:19] =>  0:25
CLOCK: [2022-03-25 Fri 23:44]--[2022-03-26 Sat 00:09] =>  0:25
CLOCK: [2022-03-25 Fri 23:18]--[2022-03-25 Fri 23:43] =>  0:25
CLOCK: [2022-03-25 Fri 22:46]--[2022-03-25 Fri 23:11] =>  0:25
CLOCK: [2022-03-25 Fri 10:33]--[2022-03-25 Fri 10:58] =>  0:25
CLOCK: [2022-03-25 Fri 09:23]--[2022-03-25 Fri 09:48] =>  0:25
CLOCK: [2022-03-24 Thu 23:26]--[2022-03-24 Thu 23:51] =>  0:25
CLOCK: [2022-03-24 Thu 23:00]--[2022-03-24 Thu 23:25] =>  0:25
CLOCK: [2022-03-22 Tue 23:37]--[2022-03-23 Wed 00:02] =>  0:25
CLOCK: [2022-03-22 Tue 22:27]--[2022-03-22 Tue 22:52] =>  0:25
CLOCK: [2022-03-21 Mon 23:31]--[2022-03-21 Mon 23:57] =>  0:26
CLOCK: [2022-03-21 Mon 22:34]--[2022-03-21 Mon 22:59] =>  0:25
CLOCK: [2022-03-21 Mon 21:18]--[2022-03-21 Mon 21:43] =>  0:25
CLOCK: [2022-03-21 Mon 20:39]--[2022-03-21 Mon 21:04] =>  0:25
CLOCK: [2022-03-21 Mon 20:01]--[2022-03-21 Mon 20:26] =>  0:25
CLOCK: [2022-03-21 Mon 18:59]--[2022-03-21 Mon 19:24] =>  0:25
CLOCK: [2022-03-21 Mon 17:17]--[2022-03-21 Mon 17:42] =>  0:25
CLOCK: [2022-03-21 Mon 16:26]--[2022-03-21 Mon 16:51] =>  0:25
CLOCK: [2022-03-21 Mon 15:48]--[2022-03-21 Mon 16:13] =>  0:25
CLOCK: [2022-03-21 Mon 14:58]--[2022-03-21 Mon 15:23] =>  0:25
CLOCK: [2022-03-21 Mon 14:27]--[2022-03-21 Mon 14:52] =>  0:25
CLOCK: [2022-03-21 Mon 13:53]--[2022-03-21 Mon 14:18] =>  0:25
CLOCK: [2022-03-21 Mon 13:11]--[2022-03-21 Mon 13:36] =>  0:25
CLOCK: [2022-03-21 Mon 00:10]--[2022-03-21 Mon 00:35] =>  0:25
CLOCK: [2022-03-20 Sun 22:33]--[2022-03-20 Sun 22:58] =>  0:25
CLOCK: [2022-03-20 Sun 21:28]--[2022-03-20 Sun 21:53] =>  0:25
CLOCK: [2022-03-20 Sun 20:55]--[2022-03-20 Sun 21:20] =>  0:25
CLOCK: [2022-03-20 Sun 20:20]--[2022-03-20 Sun 20:45] =>  0:25
CLOCK: [2022-03-20 Sun 18:30]--[2022-03-20 Sun 18:55] =>  0:25
CLOCK: [2022-03-20 Sun 17:56]--[2022-03-20 Sun 18:21] =>  0:25
CLOCK: [2022-03-20 Sun 15:53]--[2022-03-20 Sun 16:18] =>  0:25
CLOCK: [2022-03-20 Sun 15:20]--[2022-03-20 Sun 15:45] =>  0:25
CLOCK: [2022-03-20 Sun 14:49]--[2022-03-20 Sun 15:14] =>  0:25
CLOCK: [2022-03-20 Sun 10:34]--[2022-03-20 Sun 10:59] =>  0:25
CLOCK: [2022-03-20 Sun 00:28]--[2022-03-20 Sun 00:54] =>  0:26
CLOCK: [2022-03-19 Sat 22:17]--[2022-03-19 Sat 22:42] =>  0:25
CLOCK: [2022-03-19 Sat 21:45]--[2022-03-19 Sat 22:10] =>  0:25
CLOCK: [2022-03-19 Sat 19:56]--[2022-03-19 Sat 20:21] =>  0:25
CLOCK: [2022-03-19 Sat 18:40]--[2022-03-19 Sat 19:05] =>  0:25
CLOCK: [2022-03-19 Sat 17:12]--[2022-03-19 Sat 17:37] =>  0:25
CLOCK: [2022-03-19 Sat 16:33]--[2022-03-19 Sat 16:58] =>  0:25
CLOCK: [2022-03-19 Sat 15:56]--[2022-03-19 Sat 16:21] =>  0:25
CLOCK: [2022-03-19 Sat 15:13]--[2022-03-19 Sat 15:38] =>  0:25
:END:

[[id:50ac66da-89f2-42dc-a746-d20b041d06ae][roguelike]]を作る長大なチュートリアル。
とりあえず14章までやり、理解を確かめるため自作改造フェーズに入った。
残りの部分はチュートリアルとしてやるというより、自作するうえで都度参照していく。
** DONE [[https://www.amazon.co.jp/-/en/%E3%82%AF%E3%82%B8%E3%83%A9%E9%A3%9B%E8%A1%8C%E6%9C%BA/dp/4802613512/ref=sr_1_5?crid=14EZ2K0WKN0UY&keywords=Rust&qid=1648043657&sprefix=rus%2Caps%2C165&sr=8-5][手を動かして考えればよくわかる 高効率言語 Rust 書きかた・作りかた]] :Read:
CLOSED: [2022-05-03 Tue 09:50]
:LOGBOOK:
CLOCK: [2022-04-29 Fri 13:36]--[2022-04-29 Fri 14:01] =>  0:25
CLOCK: [2022-04-29 Fri 13:10]--[2022-04-29 Fri 13:35] =>  0:25
CLOCK: [2022-04-28 Thu 10:27]--[2022-04-28 Thu 10:53] =>  0:26
CLOCK: [2022-04-28 Thu 09:48]--[2022-04-28 Thu 10:13] =>  0:25
CLOCK: [2022-04-24 Sun 16:37]--[2022-04-24 Sun 17:02] =>  0:25
CLOCK: [2022-04-24 Sun 14:43]--[2022-04-24 Sun 15:08] =>  0:25
CLOCK: [2022-04-24 Sun 14:06]--[2022-04-24 Sun 14:31] =>  0:25
CLOCK: [2022-04-24 Sun 12:26]--[2022-04-24 Sun 12:51] =>  0:25
CLOCK: [2022-04-10 Sun 19:35]--[2022-04-10 Sun 20:00] =>  0:25
CLOCK: [2022-04-10 Sun 19:09]--[2022-04-10 Sun 19:34] =>  0:25
CLOCK: [2022-04-07 Thu 23:12]--[2022-04-07 Thu 23:37] =>  0:25
CLOCK: [2022-03-26 Sat 19:24]--[2022-03-26 Sat 19:49] =>  0:25
CLOCK: [2022-03-26 Sat 00:12]--[2022-03-26 Sat 00:37] =>  0:25
CLOCK: [2022-03-25 Fri 09:51]--[2022-03-25 Fri 10:16] =>  0:25
CLOCK: [2022-03-23 Wed 23:33]--[2022-03-23 Wed 23:58] =>  0:25
CLOCK: [2022-03-23 Wed 22:54]--[2022-03-23 Wed 23:19] =>  0:25
:END:
*** 構造体に実装する
#+caption: 型に実装する
#+begin_src rust :results output
    fn main() {
      let body = Body::new(163.0, 75.2, "田中");
      body.print_result();
      let body = Body::new(158.2, 55.0, "鈴木");
      body.print_result();
      let body = Body::new(174.2, 54.2, "井上");
      body.print_result();
    }

  struct BmiRange {
      min: f64,
      max: f64,
      label: String,
  }

  impl BmiRange {
    fn new(min: f64, max: f64, label: &str) -> Self {
      BmiRange{ min, max, label: label.to_string() }
    }

    fn test(&self, v: f64) -> bool {
      (self.min <= v) && (v < self.max)
    }
  }

  struct Body {
    height: f64,
    weight: f64,
    name: String,
  }

  impl Body {
    fn new(height: f64, weight: f64, name: &str) -> Self {
        Body{ height, weight, name: name.to_string() }
    }

    fn calc_bmi(&self) -> f64 {
      self.weight / (self.height / 100.0).powf(2.0)
    }

    fn print_result(&self) {
      let bmi = self.calc_bmi();
      let bmi_list = [
        BmiRange::new(0.0, 18.5, "低体重"),
        BmiRange::new(18.5, 25.0, "普通体重"),
        BmiRange::new(25.0, 30.0, "肥満1度"),
        BmiRange::new(30.0, 35.0, "肥満2度"),
        BmiRange::new(35.0, 40.0, "肥満3度"),
      ];
      let mut result = String::from("不明");
      for range in bmi_list {
        if range.test(bmi) {
          result = range.label.clone();
          break;
        }
      }
      println!("{}さん、 BMI={:.1}, 判定={}",
      self.name, bmi, result);
    }
  }
main()
#+end_src

#+RESULTS:
#+begin_results
田中さん、 BMI=28.3, 判定=肥満1度
鈴木さん、 BMI=22.0, 判定=普通体重
井上さん、 BMI=17.9, 判定=低体重
()
#+end_results
*** None, Result
#+caption: 列挙型を使う
#+begin_src rust :results output
  struct Counter {
    value: i64,
  }

  impl Counter {
    fn new() -> Self {
      Counter { value: 0 }
    }

    fn inc(&mut self) {
      self.value += 1;
      println!("value={}", self.value);
    }
  }

  fn count(counter: Option<&mut Counter>) {
    match counter{
      None => return,
      Some(c) => c.inc(),
    };
  }

  fn main() {
    let mut a = Counter::new();
    count(Some(&mut a));
    count(Some(&mut a));
    let a = None;
    count(a);
  }
  main();
#+end_src

#+RESULTS:
#+begin_results
value=1
value=2
()
#+end_results

* Reference
** [[https://zenn.dev/toga/books/rust-atcoder/viewer/01-intro][序｜RustCoder ―― AtCoder と Rust で始める競技プログラミング入門]]
入門本。
** [[https://ja.wikipedia.org/wiki/Rust_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E)][Rust (プログラミング言語) - Wikipedia]]
* Archives
