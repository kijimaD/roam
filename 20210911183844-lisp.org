:PROPERTIES:
:ID:       18fbe00f-4ec8-4ca0-adfa-2d1381669642
:header-args+: :wrap :results raw
:END:
#+title: LISP
* 概要
LISPは[[id:868ac56a-2d42-48d7-ab7f-7047c85a8f39][Programming Language]]。
1958年に登場して以来、多数の方言が存在し、現在も使われ続けている。

- [[id:2337587f-0d95-484f-922a-f4cca1ace49e][Common Lisp]]
- [[id:53a7a781-8398-4069-8735-6ac5b8c3bc05][Scheme]]
- [[id:c7e81fac-9f8b-4538-9851-21d4ff3c2b08][Emacs Lisp]]
* Memo
** [[id:1ad8c3d5-97ba-4905-be11-e6f2626127ad][Emacs]]での実行環境準備
Common Lispの実装の1つSBCL(Steel Bank Common Lisp)を使用する方法。
[[id:1ad8c3d5-97ba-4905-be11-e6f2626127ad][Emacs]]のラッパーはSLIME。起動からコンソール画面表示までやってくれる。

#+caption: SBCLをインストール
#+begin_src shell
  $sudo apt-get install sbcl
#+end_src

#+caption: SBCLを選択
#+begin_src emacs-lisp
  (setq inferior-lisp-program "sbcl")
#+end_src
を評価。
~M-x slime~ で、接続して使用できるようになる。
* 初めてのLisp
Lispの考え方に焦点を当てた入門本。
解説で使われているのは[[id:2337587f-0d95-484f-922a-f4cca1ace49e][Common Lisp]]。

- 128, 162
** cond
#+caption: condは条件式の処理に使う。
#+begin_src lisp
  (cond ((>= 1 1) (print 0))
        ((= 0 0) (print 1)))
#+end_src

#+RESULTS:
: 0
** member
#+caption: member関数は、リストのトップレベルに望むものがあるか調べる
#+begin_src lisp
  (defun my-member (x y)
    (cond ((null y) nil)
          ((eq x (car y)) t)
          (t (member x (cdr y)))))
  (my-member 'a '(a b))
#+end_src

#+RESULTS:
#+begin_results
T
#+end_results

#+caption: 無い場合はnilを返す
#+begin_src lisp
  (my-member 'c '(a b))
#+end_src

#+RESULTS:
#+begin_results
NIL
#+end_results
** assoc
#+caption: assoc関数は辞書を検索する
#+begin_src lisp
  (setq dict '((unum . 1) (duo . 2) (tria . 3)))
  (assoc 'unum dict)
#+end_src

#+RESULTS:
#+begin_results
(UNUM . 1)
#+end_results

#+caption: assocの定義
#+begin_src lisp
  (defun my-assoc (x y)
    (cond ((null y) nil)
          ((eq x (caar y)) (car y))
          (t (assoc x (cdr y)))))
  (my-assoc 'unum dict)
#+end_src

#+RESULTS: assocの定義
#+begin_results
(UNUM . 1)
#+end_results
** rassoc
#+caption: rassocは逆引き関数。辞書からcdrを検索する
#+begin_src lisp
  (defun my-rassoc (x y)
    (cond ((null y) nil)
          ((eq x (cdar y)) (car y))
          (t (rassoc x (cdr y)))))
  (my-rassoc 1 dict)
#+end_src

#+RESULTS:
#+begin_results
(UNUM . 1)
#+end_results

ドット記法で ~(reiko . (3 712 5648))~ は、
~(reiko 3 712 5678)~ と同じ。後ろの方がリストになっているとドットは書かない慣習。

Lispにおける式は、題付きリストといえる。
(関数 引数1 引数2 ...)
は、関数と引数のリストとのドット対、
(関数 . 引数のリスト)
と考えることができる。
** replaca
#+caption: rplacaはxが指しているセルのcarをyに置き換える
#+begin_src lisp
(rplaca '(1 1) 2)
#+end_src

#+RESULTS:
#+begin_results
(2 1)
#+end_results

#+caption: rplacdはcdrバージョン
#+begin_src lisp
(rplacd '(1 1) 2)
#+end_src

#+RESULTS:
#+begin_results
(1 . 2)
#+end_results

#+caption: alistを書き換える関数
#+begin_src lisp
  (defun update-phone (p x y)
      (rplacd (assoc x p) y)
      p  )

  (setq dict '((unum . 1) (duo . 2) (tria . 3)))
  (update-phone dict 'unum 111)
#+end_src

#+RESULTS:
#+begin_results
((UNUM . 111) (DUO . 2) (TRIA . 3))
#+end_results
** remove
#+caption: xと等しいトップレベルの要素をすべて削除してみる
#+begin_src lisp
  (defun my-remove (x y)
    (cond ((null y) nil)
          ((eq (car y) x) (remove x (cdr y)))
          (t (cons (car y) (remove x (cdr y))))))
(my-remove 'mo '(to mo do mo mo to mo to mo))
#+end_src

#+RESULTS:
#+begin_results
(TO DO TO TO)
#+end_results

#+caption: マッチした最初のリストを取り除く。書き換えるべきセルは、1つ前のセル。
#+begin_src lisp
  (defun my-delete-1 (x y)
    (setq y (cons 'dummy y))
    (my-del2 x (cdr y) y)
    (cdr y))

  (defun my-del2 (x y z)
    (cond ((null y) nil)
          ((eq (car y) x) (rplacd z (cdr y)))
          (t (my-del2 x (cdr y) y))))
  (my-delete-1 'mo '(mo mo mo to to to))
#+end_src

#+RESULTS:
#+begin_results
(MO MO TO TO TO)
#+end_results

#+caption: 再帰関数が取る変数を少なくしたバージョン
#+begin_src lisp
  (defun my-delete (x y)
    (setq y (cons 'dummy y))
    (my-dela x y)
    (cdr y))

  (defun my-dela (x y)
    (cond ((null (cdr y)) nil)
          ((eq (cadr y) x)
           (rplacd y (cddr y))
           (my-dela x (cdr y)))
    (t (my-dela x (cdr y)))))

  (my-delete 'mo '(mo to mo to))
#+end_src

#+RESULTS:
#+begin_results
(TO TO TO)
#+end_results
** nreverse
#+caption: nreverseはリストを逆にする関数
#+begin_src lisp
(nreverse '(A B C))
#+end_src

#+RESULTS:
#+begin_results
(C B A)
#+end_results

#+caption: nreverseを定義する(バグ)
#+begin_src lisp
  (defun my-nreverse (x)
    (nrev2 x nil))

  (defun nrev2 (x r)
    (cond ((null x) r)
          (t (rplacd x r)
             (nrev2 (cdr x) x))))
  (my-nreverse '(A B C))
#+end_src

#+RESULTS:
#+begin_results
(A)
#+end_results

特殊形式prog1。
(prog1 式1 式2 式3 ...)
は返す値が式1の値。これを使って修正する。

#+caption: nrev2の修正版。prog1を使う
#+begin_src lisp
  (defun nrev2 (x r)
    (cond ((null x) r)
          (t (prog1 (nrev2 (cdr x) x)
               (rplacd x r)))))
  (my-nreverse '(A B C))
#+end_src

#+RESULTS:
#+begin_results
(C B A)
#+end_results

* Tasks
** TODO [[https://www.amazon.co.jp/%E5%88%9D%E3%82%81%E3%81%A6%E3%81%AE%E4%BA%BA%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AELISP-%E5%A2%97%E8%A3%9C%E6%94%B9%E8%A8%82%E7%89%88-%E7%AB%B9%E5%86%85-%E9%83%81%E9%9B%84/dp/4798119415/ref=pd_vtp_3/356-6212978-4622712][初めての人のためのLISP[増補改訂版] | 竹内 郁雄 |本 | 通販 | Amazon]]
** TODO [[http://www.asahi-net.or.jp/~kc7k-nd/][On Lisp日本語訳 草稿置き場]]
マクロの書き方の詳しい解説。
** TODO [[https://sicp.iijlab.net/fulltext/xcont.html][計算機プログラムの構造と解釈 第二版]]
通称SICP、[[id:e3b48a23-21bc-4cdf-8395-052fab9fecb5][Computer Science]]で有名な本。
** TODO [[https://www.oreilly.co.jp/books/9784873115870/][O'Reilly Japan - Land of Lisp]]
** TODO マンガで分かるLisp
- http://lambda.bugyo.tk/cdr/mwl/
- [[http://www.inf.ufsc.br/~aldo.vw/func/cl-quick-reference.pdf][wilburs-lisp-intro.dvi]]
* Reference
* Archive
