:properties:
:ID: 20240315T114639
:mtime:    20241102180303 20241028101410
:ctime:    20241028101410
:end:
#+title:      KDOC 123: HandleFuncとは何か
#+date:       [2024-03-15 Fri 11:46]
#+filetags:   :code:
#+identifier: 20240315T114639

* この文書のステータス
- 作成
  - [X] 2024-03-15 貴島
- レビュー
  - [X] 2024-04-03 貴島
* HandleFunc
[[id:7cacbaa3-3995-41cf-8b72-58d6e07468b1][Go]]でサーバを作るときによく登場するHandleFunc。何か調べる。

↓HandleFuncは関数である。グローバル変数のDefaultServeMuxがあって、その変数にインスタンス化された構造体メソッドを呼び出している。これによって、われわれはServeMuxインスタンスを初期化せずに、パスと処理を紐付けられる。

#+caption: HandleFunc関数
#+begin_src go
  func HandleFunc(pattern string, handler func(ResponseWriter, *Request)) {
          DefaultServeMux.HandleFunc(pattern, handler)
  }
#+end_src

↓グローバル変数に登録されている。

#+caption: DefaultServeMuxの定義
#+begin_src go
  // DefaultServeMux is the default ServeMux used by Serve.
  var DefaultServeMux = &defaultServeMux
  var defaultServeMux ServeMux
#+end_src

↓ServeMux型のメソッドの定義。内部ではServeMux型のHandleメソッドを呼びだす。Handleメソッドの引数では、引数のhandlerをHandlerFunc型に型変換している。当然だがシグネチャが同じなので、変換できる。こう書くことで関数呼び出しでは一般性を保ちつつ、内部ではHandlerFunc型のメソッドを使える、ということか。

#+caption: ServeMuxのメソッド
#+begin_src go
  func (mux *ServeMux) HandleFunc(pattern string, handler func(ResponseWriter, *Request)) {
          if handler == nil {
                  panic("http: nil handler")
          }
          mux.Handle(pattern, HandlerFunc(handler))
  }
#+end_src

#+caption: HandlerFunc型の定義
#+begin_src go
  type HandlerFunc func(ResponseWriter, *Request)
#+end_src
