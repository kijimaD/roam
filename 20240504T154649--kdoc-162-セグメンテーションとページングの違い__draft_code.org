:properties:
:ID: 20240504T154649
:end:
#+title:      KDOC 162: セグメンテーションとページングの違い
#+date:       [2024-05-04 Sat 15:46]
#+filetags:   :draft:code:
#+identifier: 20240504T154649

# (denote-rename-file-using-front-matter (buffer-file-name) 0)
# (save-excursion (while (re-search-backward ":draft" nil t) (replace-match "")))
# (flush-lines "^\\#\s.+?")

# ====ポリシー。
# 1ファイル1アイデア。
# 1ファイルで内容を完結させる。
# 常にほかのエントリとリンクする。
# 自分の言葉を使う。
# 参考文献を残しておく。
# 文献メモの場合は、感想と混ぜないこと。1つのアイデアに反する
# 自分の考えを加える。
# 構造を気にしない。
# エントリ間の接続を発見したら、接続エントリを追加する。カード間にあるリンクの関係を説明するカード。
# アイデアがまとまったらアウトラインエントリを作成する。リンクをまとめたエントリ。
# エントリを削除しない。古いカードのどこが悪いかを説明する新しいカードへのリンクを追加する。
# 恐れずにカードを追加する。無意味の可能性があっても追加しておくことが重要。

* この文書のステータス
- 作成
  - [X] 2024-05-09 貴島
- レビュー
  - [ ] <署名>
# (progn (kill-line -1) (insert (format "  - [X] %s 貴島" (format-time-string "%Y-%m-%d"))))

# 関連をつけた。
# タイトルがフォーマット通りにつけられている。
# 内容をブラウザに表示して読んだ(作成とレビューのチェックは同時にしない)。
# 文脈なく読めるのを確認した。
# おばあちゃんに説明できる。
# いらない見出しを削除した。
# タグを適切にした。
# すべてのコメントを削除した。
* 概要
メモリのアドレス変換方式に、セグメンテーションとページングがある。2つの違いについてまとめる。

- セグメンテーションは物理メモリをいくつかのセグメントに分け、1つのプログラムを1つのセグメントに格納する
- ページングは論理アドレス空間を小さな同じ大きさページ(区画)に分け、ページ単位で物理メモリを割り当てる。プログラムは論理アドレス空間の中でも一部しか使わないので、いくつかのページに物理メモリを割り当てておけば事足りる

つまり、違いは以下のようになる。

- メモリの分け方が可変(セグメンテーション)か、非可変(ページング)か
- 物理アドレスを使う(セグメンテーション)か、論理アドレスを使う(ページング)か

* 参考
- [[https://os.phil-opp.com/ja/paging-introduction/][ページング入門 | Writing an OS in Rust]]
- [[id:20240427T113714][KDOC 140: 『自作エミュレータで学ぶx86アーキテクチャ』]]

* 関連
# 関連するエントリ。なぜ関連させたか理由を書く。
- [[id:20240427T113714][KDOC 140: 『自作エミュレータで学ぶx86アーキテクチャ』]]。読んで考えたこと
