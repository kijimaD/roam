:properties:
:ID: 20241117T002732
:mtime:    20241117110406
:ctime:    20241117002741
:end:
#+title:      KDOC 293: 『超例解Linuxカーネルプログラミング』
#+date:       [2024-11-17 Sun 00:27]
#+filetags:   :draft:book:
#+identifier: 20241117T002732

# (denote-rename-file-using-front-matter (buffer-file-name) 0)
# (save-excursion (while (re-search-backward ":draft" nil t) (replace-match "")))
# (flush-lines "^\\#\s.+?")

# ====ポリシー。
# 1ファイル1アイデア。
# 1ファイルで内容を完結させる。
# 常にほかのエントリとリンクする。
# 自分の言葉を使う。
# 参考文献を残しておく。
# 文献メモの場合は、感想と混ぜないこと。1つのアイデアに反する
# ツェッテルカステンの議論に寄与するか。それで本を書けと言われて書けるか
# 頭のなかやツェッテルカステンにある問いとどのようにかかわっているか
# エントリ間の接続を発見したら、接続エントリを追加する。カード間にあるリンクの関係を説明するカード。
# アイデアがまとまったらアウトラインエントリを作成する。リンクをまとめたエントリ。
# エントリを削除しない。古いカードのどこが悪いかを説明する新しいカードへのリンクを追加する。
# 恐れずにカードを追加する。無意味の可能性があっても追加しておくことが重要。
# 個人の感想・意思表明ではない。事実や書籍情報に基づいている

# ====永久保存メモのルール。
# 自分の言葉で書く。
# 後から読み返して理解できる。
# 他のメモと関連付ける。
# ひとつのメモにひとつのことだけを書く。
# メモの内容は1枚で完結させる。
# 論文の中に組み込み、公表できるレベルである。

# ====水準を満たす価値があるか。
# その情報がどういった文脈で使えるか。
# どの程度重要な情報か。
# そのページのどこが本当に必要な部分なのか。
# 公表できるレベルの洞察を得られるか

# ====フロー。
# 1. 「走り書きメモ」「文献メモ」を書く
# 2. 1日1回既存のメモを見て、自分自身の研究、思考、興味にどのように関係してくるかを見る
# 3. 追加すべきものだけ追加する

* この文書のステータス
:LOGBOOK:
CLOCK: [2024-11-17 Sun 10:04]--[2024-11-17 Sun 10:29] =>  0:25
CLOCK: [2024-11-17 Sun 09:37]--[2024-11-17 Sun 10:02] =>  0:25
:END:
- 作成
  - [ ] <署名>
# (progn (kill-line -1) (insert (format "  - [X] %s 貴島" (format-time-string "%Y-%m-%d"))))
- レビュー
  - [ ] <署名>
# (progn (kill-line -1) (insert (format "  - [X] %s 貴島" (format-time-string "%Y-%m-%d"))))

# チェックリスト ================
# 関連をつけた。
# タイトルがフォーマット通りにつけられている。
# 内容をブラウザに表示して読んだ(作成とレビューのチェックは同時にしない)。
# 文脈なく読めるのを確認した。
# おばあちゃんに説明できる。
# いらない見出しを削除した。
# タグを適切にした。
# すべてのコメントを削除した。
* 概要
# 本文(見出しも設定する)

[[https://www.c-r.com/book/detail/1321][『超例解Linuxカーネルプログラミング』]]は、カーネル開発を解説する本。

* メモ

- 1章: Linuxカーネルの開発フロー
- [[https://lwn.net/][LWN.net]] :: Linux開発のニュースサイト(p29)
- Linuxカーネルは現場のプロによる修正が多く入っている。プロの修正が無償で見られることは、じつはすごいこと(p29)
- 2章: ソフトウェアの品質とライセンス
- stableブランチに入れるソースコードに関して、ルールが定められている(p45)
  - ただしくテストされていなければならない
  - 1つのコンテキストにおいて、修正量が100行を超えてはならない
  - たったひとつのバグが修正されなければならない
  - ユーザを悩ましている本当のバグを修正しなければならない。憶測でバグ修正をしてはいけない
  - クリティカルな問題が修正されなければならない。、つまりビルドエラー、カーネルパニック、ハングアップ、データ破損、セキュリティ問題など
  - つまらない修正は含めてはならない。スペルミスの修正や空白の調整など
- Linuxのデバイスドライバは静的型と動的型に分類できる。静的型は直接カーネルにリンクされており、起動時にデバイスドライバも起動するもの。動的型はカーネルの動作中にデバイスドライバのモジュールを組み込んだり取り外せる(p56)
- rodataセクションは、const宣言された定数や文字列定数が配置される領域。rodataセクションに配置されたデータは静的なデータであり、動的に確保されたカーネルメモリではないので、メモリを確保する操作も不要である(p60)
- 実際の修正例をもとに、起こしがちなバグを解説している
- ワークキューというカーネルの仕組みを利用すると、指定した関数を遅延実行させられる(p62)
- 長さ接頭辞付き文字列では、長さを示す接頭辞が文字列内の0の位置にある。文字列の最初の文字が文字列の配列表現においてインデックス1ではじまる。これは、実世界での数え方と同じである(p108)

* 感想

- 今のメジャーな文字列形式はなんだろうか。ヌル終端で合っているか

* 関連
# 関連するエントリ。なぜ関連させたか理由を書く。意味のあるつながりを意識的につくる。
# この事実は自分のこのアイデアとどう整合するか。
# この現象はあの理論でどう説明できるか。
# ふたつのアイデアは互いに矛盾するか、互いを補っているか。
# いま聞いた内容は以前に聞いたことがなかったか。
# メモ y についてメモ x はどういう意味か。
なし。
