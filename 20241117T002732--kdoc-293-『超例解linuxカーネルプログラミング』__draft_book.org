:properties:
:ID: 20241117T002732
:mtime:    20241127233229
:ctime:    20241117002741
:end:
#+title:      KDOC 293: 『超例解Linuxカーネルプログラミング』
#+date:       [2024-11-17 Sun 00:27]
#+filetags:   :draft:book:
#+identifier: 20241117T002732

# (denote-rename-file-using-front-matter (buffer-file-name) 0)
# (save-excursion (while (re-search-backward ":draft" nil t) (replace-match "")))
# (flush-lines "^\\#\s.+?")

# ====ポリシー。
# 1ファイル1アイデア。
# 1ファイルで内容を完結させる。
# 常にほかのエントリとリンクする。
# 自分の言葉を使う。
# 参考文献を残しておく。
# 文献メモの場合は、感想と混ぜないこと。1つのアイデアに反する
# ツェッテルカステンの議論に寄与するか。それで本を書けと言われて書けるか
# 頭のなかやツェッテルカステンにある問いとどのようにかかわっているか
# エントリ間の接続を発見したら、接続エントリを追加する。カード間にあるリンクの関係を説明するカード。
# アイデアがまとまったらアウトラインエントリを作成する。リンクをまとめたエントリ。
# エントリを削除しない。古いカードのどこが悪いかを説明する新しいカードへのリンクを追加する。
# 恐れずにカードを追加する。無意味の可能性があっても追加しておくことが重要。
# 個人の感想・意思表明ではない。事実や書籍情報に基づいている

# ====永久保存メモのルール。
# 自分の言葉で書く。
# 後から読み返して理解できる。
# 他のメモと関連付ける。
# ひとつのメモにひとつのことだけを書く。
# メモの内容は1枚で完結させる。
# 論文の中に組み込み、公表できるレベルである。

# ====水準を満たす価値があるか。
# その情報がどういった文脈で使えるか。
# どの程度重要な情報か。
# そのページのどこが本当に必要な部分なのか。
# 公表できるレベルの洞察を得られるか

# ====フロー。
# 1. 「走り書きメモ」「文献メモ」を書く
# 2. 1日1回既存のメモを見て、自分自身の研究、思考、興味にどのように関係してくるかを見る
# 3. 追加すべきものだけ追加する

* この文書のステータス
:LOGBOOK:
CLOCK: [2024-11-23 Sat 16:40]--[2024-11-23 Sat 17:05] =>  0:25
CLOCK: [2024-11-23 Sat 11:37]--[2024-11-23 Sat 12:03] =>  0:26
CLOCK: [2024-11-23 Sat 11:00]--[2024-11-23 Sat 11:25] =>  0:25
CLOCK: [2024-11-23 Sat 10:26]--[2024-11-23 Sat 10:51] =>  0:25
CLOCK: [2024-11-23 Sat 10:01]--[2024-11-23 Sat 10:26] =>  0:25
CLOCK: [2024-11-21 Thu 22:01]--[2024-11-21 Thu 22:26] =>  0:25
CLOCK: [2024-11-21 Thu 19:26]--[2024-11-21 Thu 19:51] =>  0:25
CLOCK: [2024-11-17 Sun 10:04]--[2024-11-17 Sun 10:29] =>  0:25
CLOCK: [2024-11-17 Sun 09:37]--[2024-11-17 Sun 10:02] =>  0:25
:END:
- 作成
  - [X] 2024-11-24 貴島
- レビュー
  - [X] 2024-11-27 貴島

# チェックリスト ================
# 関連をつけた。
# タイトルがフォーマット通りにつけられている。
# 内容をブラウザに表示して読んだ(作成とレビューのチェックは同時にしない)。
# 文脈なく読めるのを確認した。
# おばあちゃんに説明できる。
# いらない見出しを削除した。
# タグを適切にした。
# すべてのコメントを削除した。
* 概要
# 本文(見出しも設定する)

[[https://www.c-r.com/book/detail/1321][『超例解Linuxカーネルプログラミング』]]は、カーネル開発を解説する本。

* メモ

- 1章: Linuxカーネルの開発フロー
- [[https://lwn.net/][LWN.net]]は、Linux開発のニュースサイト(p29)
- Linuxカーネルは現場のプロによる修正が多く入っている。プロの修正が無償で見られることは、じつはすごいこと(p29)
- 2章: ソフトウェアの品質とライセンス
- stableブランチに入れるソースコードに関して、ルールが定められている(p45)
  - ただしくテストされていなければならない
  - 1つのコンテキストにおいて、修正量が100行を超えてはならない
  - たったひとつのバグが修正されなければならない
  - ユーザを悩ましている本当のバグを修正しなければならない。憶測でバグ修正をしてはいけない
  - クリティカルな問題が修正されなければならない。、つまりビルドエラー、カーネルパニック、ハングアップ、データ破損、セキュリティ問題など
  - つまらない修正は含めてはならない。スペルミスの修正や空白の調整など
- Linuxのデバイスドライバは静的型と動的型に分類できる。静的型は直接カーネルにリンクされており、起動時にデバイスドライバも起動するもの。動的型はカーネルの動作中にデバイスドライバのモジュールを組み込んだり取り外せる(p56)
- rodataセクションは、const宣言された定数や文字列定数が配置される領域。rodataセクションに配置されたデータは静的なデータであり、動的に確保されたカーネルメモリではないので、メモリを確保する操作も不要である(p60)
- 実際の修正例をもとに、起こしがちなバグを解説している
- ワークキューというカーネルの仕組みを利用すると、指定した関数を遅延実行させられる(p62)
- 割り込みハンドラは登録したあとはいつ呼び出されるかわからない。登録する前に必要な初期設定をしておかないといけない(p80)
- ネットワークインターフェースが有効かどうかは、ipコマンドで見たときに「stateがUP」であるという意味。以前はifconfigが使われていたが、現在では非推奨となっている、という(p85)
- ネットワークカードから発生する割り込みを禁止する処理は、ネットワークカードのレジスタにゼロを書き込んでいる(p86)
- ポーリングモードの欠点はパケットの受信処理が遅くなること。割り込みモードとポーリングモードのどちらを選択するかは、カーネルへの負荷とネットワーク性能のトレードオフとなる
- SystemTapという仕組みを利用するのが手軽。SystemTap専用のスクリプト言語を使って簡単なコードを書くことで、自動的にカーネルコードが生成され、動作中のカーネルに組み込める(p89)
  - ~apt install systemtap~
  - 手順: p90
- ネットワークインターフェイスをUPからダウンに変更中にネットワークから割り込みがきた場合が問題であるコード例(p95)
- ネットワークのパケットはいつ外部から入ってくるかわからないので、完全にネットワークドライバが停止していない限り、割り込みハンドラが呼び出されてしまう。割り込みはネットワークカードというハードウェアから上がってくるものなので、ソフトウェアで割り込み禁止にしない限り、延々と割り込みがくる。ハードウェアから見るといつまでも割り込みが処理されていないように見える。そして割り込みが無限に上がってくるとCPU1つを使い続けることになり、負荷が上がる(p95)
- ポインタはメモリ空間を指し示すアドレスなので、メモリ空間が4GBなのであれば、0から(4G-1)の数値を表現できる必要がある。32bitだとポインタのサイズが4バイト

#+begin_src ruby
  # 32bitに格納できる整数の数をGBに直す
  2**32 / 1000 / 1000 / 1000.0
#+end_src

#+RESULTS:
#+begin_src
4.294
#+end_src

- 5章: 32bit/64bitに関する落とし穴
- カーネル関数の ~printk()~ は、C言語の ~printf()~ に似せて作られているという。従来、 ~printk()~ の「%p」はポインタのアドレスを表示していたが、セキュリュティ上があるということで、でたらめな値が表示されるように実装が変更された。ポインタのアドレスをハッシュ化して、元の値がいくつかをわからなくする。「%px」では本当のポインタアドレスを表示する(p101)
- Kprobesは、Linuxカーネルの動作中に任意の箇所にブレークポイントを仕掛けられ、そのブレークポイントにデバッグ用コードを設定できる仕組みのこと。SystemTapはKprovesの仕組みを利用したツールである(p103)
- Kprovesではデバッグしたい関数にブレークを設定するには関数のアドレス、つまり関数ポインタのアドレスが必要である(p104)
- ドライバをビルドして、 ~insmod~ でドライブを組み込む。不要になったドライバは ~rmmod~ で取り外せる(p106)
  - ドライバをロードしたことが ~/var/log/syslog~ にログ保存される
- 6章: 処理終了の待ち合わせ
- I2Cとはシリアルバスのこと。組み込み分野ではよく用いられる
- DNA(Direct Memory Access)。I/OデバイスがCPUを介さずに直接メモリにアクセスできる(p116)
- Linuxカーネルのコンプリージョン機能。コンプリージョンを使うと処理完了まで待ち合わせできる。具体的にはユーザープロセスの状態を「割り込み不可なスリープ状態」にして通知を受けたら起動する。待ち合わせ中はユーザープロセスにSIGKILLを送ってもプロセスを強制終了できない(p118)
- ハードウェア割り込みは割り込みハンドラの登録解除しない限りいつ発生するかわからない。割り込みハンドラを登録解除してからメモリ解放しなければならない(p127)
- 7章: シンプルなミス
- マイクロコード: CPUの命令コードの塊のようなもので、CPUのバグ修正をソフトウェアレベルで行える仕組み。CPUのメーカーからベンダーに提供され、BIOSやOSに組み込まれる(p146)
- 8章: セキュリティ
- CPUの投機的実行を悪用した脆弱性。投機的実行はプログラムを先読みして実行していく仕組み。同時に実行することで範囲外アクセスが可能になったりする。1つのプロセスで読み込まれたデータはCPUのキャッシュに載るが、そのキャッシュデータを別のプロセスから読み出すことで本来読まれてはならないデータを読み出せるというもの(p153)
- CPU脆弱性問題
  - スペクターv1
  - スペクターv2
  - メルトダウン
- Linuxの端末実装は3つのレイヤーで構成される。最上位はキャラクタデバイスのインターフェースを提供し、中間層がldisc、最下位層はハードウェアおよび疑似端末と通信するドライバになる(p155)
- kfreeなどでメモリが解放されてもメモリの内容はそのままになっている。なので、情報漏えいしたらまずい内容をメモリに乗せる場合はメモリを解放する前にメモリをゼロクリアするのが定石である(p156)
- C言語によるプログラミングでは、文字列を表現するために終端にヌルが必要である。 ~char buf[128]~ という配列は大きさが128バイトであるから、最大127文字しか格納できない。なので文字列を127文字で切って、終端にヌルを入れるのが一般的である、という(p165)
- 無条件にヌルを書き込む方式はセキュリティ的によくない。ユーザーが意図した文字列が意図せずに切り詰められ、別の文字列として実行される可能性がある(p165)
- shebang行が127文字で切り詰められることを前提にしたコードが使われている部分があり、後にrevertされた(p166)
- ~/proc/kallsyms~ を参照してLinuxカーネルの全シンボル情報がわかる(p172)
- inotifyはファイルシステムの一種として実装されている(p172)
- intは-2147483648~2147483647まで扱える。argに2147483648以上の値を渡すと、以下のif文の条件が負になる。intにキャストして負数になるから(p182)
  - ~if (((int)arg >= cdi->capacity))~
  - チェックをすり抜けたargは以降の処理で使われる。配列アクセスなどしていると、バッファオーバーフローできてしまう
- メモリのゼロクリア処理は、コンパイラの最適化で削除される可能性がある。削除されると困る場合は明示的にゼロクリアする関数を使う(p196)
- Linuxカーネルにはガベージコレクタの仕組みがない(p196)
- カーネル開発においては、関数の早期リターンは避けたほうがよい。メモリの解放漏れなどのバグを作り込むことになるから。代わりにgotoで関数の末尾に呼び、最後にまとめてリソース解放するとよい(p196)

* 感想

- 今のメジャーな文字列形式はなんだろうか。ヌル終端で合っているか
  - 構造体に入れること
- カーネルモジュールを作成して、マウントして動作確認するとよい

* 関連
# 関連するエントリ。なぜ関連させたか理由を書く。意味のあるつながりを意識的につくる。
# この事実は自分のこのアイデアとどう整合するか。
# この現象はあの理論でどう説明できるか。
# ふたつのアイデアは互いに矛盾するか、互いを補っているか。
# いま聞いた内容は以前に聞いたことがなかったか。
# メモ y についてメモ x はどういう意味か。
なし。
