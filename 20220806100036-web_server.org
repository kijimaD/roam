:PROPERTIES:
:ID:       59d0554c-f2fa-4ca1-8c7a-774c68bdb036
:END:
#+title: Web Server
* 概要
Webサーバはソフトウェアの種類の1つ。HTTPに則りブラウザに対して表示を提供する。
* Memo
* Tasks
** TODO どうやってサーバとクライアントが情報をやりとりするのか   :DontKnow:
:LOGBOOK:
CLOCK: [2022-08-16 Tue 19:42]--[2022-08-16 Tue 20:07] =>  0:25
CLOCK: [2022-08-14 Sun 20:32]--[2022-08-14 Sun 20:57] =>  0:25
CLOCK: [2022-08-14 Sun 20:06]--[2022-08-14 Sun 20:31] =>  0:25
:END:

[[https://doc.rust-jp.rs/book-ja/ch20-00-final-project-a-web-server.html][最後のプロジェクト：マルチスレッドのWebサーバを構築する - The Rust Programming Language 日本語版]]

シンプルなWebサーバを実装し、基本的な仕組みを理解する。

- 接続は、クライアントがサーバに接続し、サーバがレスポンスを生成し、サーバが接続を閉じるというリクエストとレスポンス全体の過程の名前
- let response = "HTTP/1.1 200 OK\r\n\r\n";にするとブラウザwebツールで200 OKが出る。適当な文字列を入れると出ない。入れた文字がそのままページとして表示された
- HTTPステータスはレスポンスの先頭行の文字列をパースして得る。文字列はプロトコルとして定義されている
- レスポンスのヘッダ以降は表示される。だから[[id:9f5b7514-d5e5-4997-81b0-bd453775415c][HTML]]を入れてレスポンスを返すと、ブラウザで表示できる
  - pumaが200を返す部分。https://github.com/kd-collective/puma/blob/e9f09ba1fe6b168bed7fff59d0bdbfd65351cf9d/lib/puma/app/status.rb#L70 当然だが実際の大きなアプリケーションでも、レスポンスを返す部分がある。本質的な部分はシンプルなことがわかる
- パスによる分岐の実態は、アプリケーションを書くうえで直感的に感じる構造とは異なる。サーバ側でパスによる分岐処理があるから表示を分けられる。パス指定されていても、リクエストパスが異なるだけで他は同じ形式のリクエストに過ぎない
* Reference
** [[https://ja.wikipedia.org/wiki/Web%E3%82%B5%E3%83%BC%E3%83%90][Webサーバ - Wikipedia]]
* Archives
