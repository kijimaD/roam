:properties:
:ID: 20240209T005055
:end:
#+title:      KDOC 82: errors.Unwrapを見る
#+date:       [2024-02-09 Fri 00:50]
#+filetags:   :draft:code:
#+identifier: 20240209T005055

# (denote-rename-file-using-front-matter (buffer-file-name) 0)

* この文書のステータス
:LOGBOOK:
CLOCK: [2024-02-10 Sat 19:29]--[2024-02-10 Sat 19:54] =>  0:25
CLOCK: [2024-02-10 Sat 19:03]--[2024-02-10 Sat 19:28] =>  0:25
CLOCK: [2024-02-10 Sat 17:36]--[2024-02-10 Sat 18:01] =>  0:25
:END:
- 作成
  - [X] 2024-02-10 貴島
- レビュー
  - [ ] 2024-mm-dd <署名> (progn (kill-line 0) (insert (format "  - [X] %s 貴島" (format-time-string "%Y-%m-%d"))))
# 内容をブラウザに表示して読んだ(作成とレビューのチェックは同時にしない)。
# 文脈なく読めるのを確認した。
# おばあちゃんに説明できる。
# いらない見出しを削除した。
# タグを適切にした。(org-roam-tag-remove)。
# すべてのコメントを削除した。
* 概要
[[id:7cacbaa3-3995-41cf-8b72-58d6e07468b1][Go]]でerrors.Unwrap()がシンプルで美しく見えたので書く。

* コード

#+caption: 定義
#+begin_src git-permalink
https://github.com/kd-collective/go/blob/b8ac61e6e64c92f23d8cf868a92a70d13e20a124/src/errors/wrap.go#L11-L25
#+end_src

#+RESULTS:
#+begin_src go
// Unwrap returns the result of calling the Unwrap method on err, if err's
// type contains an Unwrap method returning error.
// Otherwise, Unwrap returns nil.
//
// Unwrap only calls a method of the form "Unwrap() error".
// In particular Unwrap does not unwrap errors returned by [Join].
func Unwrap(err error) error {
	u, ok := err.(interface {
		Unwrap() error
	})
	if !ok {
		return nil
	}
	return u.Unwrap()
}
#+end_src

引数で渡されたerror型の値が、Unwrap()メソッドを実装してれば実行する。実装してなければnilを返す。それだけ。使ってみる。

#+begin_src go
import (
	"errors"
	"testing"

	"github.com/stretchr/testify/assert"
)

type wrapped struct {
	msg string
	err error
}

func (e wrapped) Error() string { return e.msg }
func (e wrapped) Unwrap() error { return e.err }

func TestUnwrap(t *testing.T) {
	err1 := errors.New("1")
	err2 := wrapped{"wrap 2", err1}

	assert.Equal(t, nil, errors.Unwrap(wrapped{"wrapped", nil}))
	assert.Equal(t, err1, errors.Unwrap(wrapped{"wrapped", err1}))
	assert.Equal(t, err2, errors.Unwrap(wrapped{"wrapped", err2}))

	assert.Equal(t, "wrap 2", err2.Error())
	assert.Equal(t, "wrap 2", errors.Unwrap(wrapped{"wrapped", err2}).Error())
}
#+end_src

#+caption: Error()とUnwrap()を使うイメージ
[[file:./images/20240210-unwrap.drawio.svg]]

~Unwrap()~ を使うと何がうれしいかというと、エラーの木構造を、 ~Unwrap()~ を再帰的に適用してたどれることにある。このため、たとえば「sqlite driverのエラー全般」、という形でグループとしてerrorを扱える。再帰的にたどって一致判定をしているのが ~errors.Is()~ と ~errors.As()~ である。 ~Unwrap()~ 単体だとあまり役に立たない。

* 関連
- [[https://pkg.go.dev/errors#Unwrap][errors package - errors - Go Packages]]
- [[id:20231103T214045][KDOC 53: Goで独自定義のエラーをconstにする方法]]。Goのエラーを調べるつながり
