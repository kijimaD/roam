:properties:
:ID: 20250703T174843
:mtime:    20250730085659
:ctime:    20250703174853
:end:
#+title:      KDOC 418: 実行時のオーバーヘッドなしで型のサイズを判定する
#+date:       [2025-07-03 Thu 17:48]
#+filetags:   :wiki:
#+identifier: 20250703T174843

* この文書のステータス
- 作成
  - [X] 2025-07-24 貴島
- レビュー
  - [X] 2025-07-30 貴島

* 概要

CPUアーキテクチャによって、型のサイズは異なることがある。実行時のオーバーヘッドなしで判定しているのをGo言語自体のソースコードで見かけた。

constなのでコンパイル時に、ビルド成果物へ値が埋め込まれる。実行時のオーバーヘッドがない。

#+caption: uint型のビットサイズを判定する
#+begin_src git-permalink
https://github.com/golang/go/blob/0f8ab2db177baee7b04182f5641693df3b212aa9/src/math/bits/bits.go#L17
#+end_src

#+RESULTS:
#+begin_src
const uintSize = 32 << (^uint(0) >> 63) // 32 or 64
#+end_src

ビット演算に慣れてないので、一瞬でわからない。確認する。

- ~^~ でビット反転する
- >> で右ビット演算する
- << で左ビット演算する

中心になるアイデアは、すべてのビットに1が立つとビットサイズの違いが現れるということだ。分解して見る。

#+caption: それぞれ見る(64bitアーキテクチャで実行した)
#+begin_src go
  import "fmt"
  func main() {
    fmt.Printf("%b\n", uint(0))
    fmt.Printf("%b\n", ^uint(0))

    // ^uint(0) >> 63 の結果、32bit環境では 0 に、64bit環境では 1 になる
    fmt.Printf("%d\n", 32 << 0) // 移動しないので32のまま
    fmt.Printf("%d\n", 32 << 1) // 1だけ左シフトする。つまり32(2の5乗)から64(2の6乗)になる
  }
#+end_src

#+RESULTS:
#+begin_src
0
1111111111111111111111111111111111111111111111111111111111111111
32
64
#+end_src

ビットシフト演算子の両辺どちらが移動量かわからなくなるので確認する。移動元、オペレータ、移動量の位置関係は同じで、矢印の向きがそのまま移動の向きになっている。

#+begin_src go
  import "fmt"
  func main() {
    fmt.Printf("%b\n", 0b0010 << 1)
    fmt.Printf("%b\n", 0b0010 >> 1)
  }
#+end_src

#+RESULTS:
#+begin_src
100
1
#+end_src

* 関連
なし。
