:properties:
:ID: 20240501T161813
:mtime:    20241103085733
:ctime:    20241028101410
:end:
#+title:      KDOC 151: Goコンパイラの定数式の埋め込みをみる
#+date:       [2024-05-01 Wed 16:18]
#+filetags:   :wiki:
#+identifier: 20240501T161813

* この文書のステータス
- 作成
  - [X] 2024-05-01 貴島
- レビュー
  - [X] 2024-05-11 貴島

* 概要
[[id:7cacbaa3-3995-41cf-8b72-58d6e07468b1][Go]]が出力するアセンブリと、Cが出力するアセンブリと比較していると、定数式の扱いが違うことに気づいた。Goアセンブリでは定数どうしの式がアセンブラに現れず、結果だけが埋め込まれる。
* 違い
↓まずCの、RISC-V向けアセンブリ。見慣れた形式。

#+begin_export html
<iframe width="800px" height="200px" src="https://godbolt.org/e#g:!((g:!((g:!((h:codeEditor,i:(filename:'1',fontScale:14,fontUsePx:'0',j:1,lang:___c,selection:(endColumn:2,endLineNumber:4,positionColumn:2,positionLineNumber:4,selectionStartColumn:2,selectionStartLineNumber:4,startColumn:2,startLineNumber:4),source:'int+hello()+%7B%0A++int+a+%3D+1%3B%0A++return+a+*+222%3B%0A%7D'),l:'5',n:'0',o:'C+source+%231',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0'),(g:!((h:compiler,i:(compiler:rv32-cgcctrunk,filters:(b:'0',binary:'1',binaryObject:'1',commentOnly:'0',debugCalls:'1',demangle:'0',directives:'0',execute:'1',intel:'1',libraryCode:'0',trim:'0',verboseDemangling:'0'),flagsViewOpen:'1',fontScale:14,fontUsePx:'0',j:1,lang:___c,libs:!(),options:'',overrides:!(),selection:(endColumn:1,endLineNumber:1,positionColumn:1,positionLineNumber:1,selectionStartColumn:1,selectionStartLineNumber:1,startColumn:1,startLineNumber:1),source:1),l:'5',n:'0',o:'+RISC-V+(32-bits)+gcc+(trunk)+(Editor+%231)',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0')),l:'2',n:'0',o:'',t:'0')),version:4"></iframe>
#+end_export

↓つぎにGoの、RISC-V向けアセンブリ。

#+begin_export html
<iframe width="800px" height="200px" src="https://godbolt.org/e#g:!((g:!((g:!((h:codeEditor,i:(filename:'1',fontScale:14,fontUsePx:'0',j:1,lang:go,selection:(endColumn:19,endLineNumber:5,positionColumn:19,positionLineNumber:5,selectionStartColumn:19,selectionStartLineNumber:5,startColumn:19,startLineNumber:5),source:'package+main%0A%0Afunc+Hello()+int+%7B%0A++++a+:%3D+1%0A++++return+a+*+222%0A%7D%0A%0Afunc+main()+%7B%7D%0A'),l:'5',n:'0',o:'Go+source+%231',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0'),(g:!((h:compiler,i:(compiler:riscv64_gltip,filters:(b:'0',binary:'1',binaryObject:'1',commentOnly:'0',debugCalls:'1',demangle:'0',directives:'0',execute:'1',intel:'1',libraryCode:'0',trim:'0',verboseDemangling:'0'),flagsViewOpen:'1',fontScale:14,fontUsePx:'0',j:1,lang:go,libs:!(),options:'',overrides:!(),selection:(endColumn:1,endLineNumber:1,positionColumn:1,positionLineNumber:1,selectionStartColumn:1,selectionStartLineNumber:1,startColumn:1,startLineNumber:1),source:1),l:'5',n:'0',o:'+RISC-V+64+gc+(tip)+(Editor+%231)',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0')),l:'2',n:'0',o:'',t:'0')),version:4"></iframe>
#+end_export

まとめ。

- ↑2言語で書かれた内容はほぼ同じ
- Go言語の生成したアセンブリのほうが短い
- 少なくとも↑このコードでは、Goアセンブリに乗算命令 ~mul~ がない。明らかに定数だから、先読みして結果だけ埋め込んでしまうということか。例コードだとGoコンパイラの方が最適化しているといえる

↓引数にすると、最適化しようがないので乗算命令が現れる。

#+begin_export html
<iframe width="800px" height="200px" src="https://godbolt.org/e#g:!((g:!((g:!((h:codeEditor,i:(filename:'1',fontScale:14,fontUsePx:'0',j:1,lang:go,selection:(endColumn:15,endLineNumber:7,positionColumn:15,positionLineNumber:7,selectionStartColumn:15,selectionStartLineNumber:7,startColumn:15,startLineNumber:7),source:'package+main%0A%0Afunc+Hello(a+int)+int+%7B%0A++++return+a+*+222%0A%7D%0A%0Afunc+main()+%7B%7D%0A'),l:'5',n:'0',o:'Go+source+%231',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0'),(g:!((h:compiler,i:(compiler:riscv64_gltip,filters:(b:'0',binary:'1',binaryObject:'1',commentOnly:'0',debugCalls:'1',demangle:'0',directives:'0',execute:'1',intel:'1',libraryCode:'0',trim:'0',verboseDemangling:'0'),flagsViewOpen:'1',fontScale:14,fontUsePx:'0',j:1,lang:go,libs:!(),options:'',overrides:!(),selection:(endColumn:1,endLineNumber:1,positionColumn:1,positionLineNumber:1,selectionStartColumn:1,selectionStartLineNumber:1,startColumn:1,startLineNumber:1),source:1),l:'5',n:'0',o:'+RISC-V+64+gc+(tip)+(Editor+%231)',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0')),l:'2',n:'0',o:'',t:'0')),version:4"></iframe>
#+end_export

* 関連
- [[id:20240429T125828][KDOC 145: Goアセンブリの違いを見る]]。例示コードを書いているときに、計算命令が現れないのに気づいた
