:properties:
:ID: 20240324T120408
:end:
#+title:      KDOC 127: ChromeのPDFビューワでしおりを使う
#+date:       [2024-03-24 Sun 12:04]
#+filetags:   :draft:essay:
#+identifier: 20240324T120408

# (denote-rename-file-using-front-matter (buffer-file-name) 0)
# (save-excursion (while (re-search-backward ":draft" nil t) (replace-match "")))
# (flush-lines "^\\#\s.+?")

# ====ポリシー。
# 1ファイル1アイデア。
# 1ファイルで内容を完結させる。
# 常にほかのエントリとリンクする。
# 自分の言葉を使う。
# 参考文献を残しておく。
# 自分の考えを加える。
# 構造を気にしない。
# エントリ間の接続を発見したら、接続エントリを追加する。カード間にあるリンクの関係を説明するカード。
# アイデアがまとまったらアウトラインエントリを作成する。リンクをまとめたエントリ。
# エントリを削除しない。古いカードのどこが悪いかを説明する新しいカードへのリンクを追加する。
# 恐れずにカードを追加する。無意味の可能性があっても追加しておくことが重要。

* この文書のステータス
- 作成
  - [X] 2024-03-24 貴島
- レビュー
  - [ ] <署名>
# (progn (kill-line -1) (insert (format "  - [X] %s 貴島" (format-time-string "%Y-%m-%d"))))

# 関連をつけた。
# タイトルがフォーマット通りにつけられている。
# 内容をブラウザに表示して読んだ(作成とレビューのチェックは同時にしない)。
# 文脈なく読めるのを確認した。
# おばあちゃんに説明できる。
# いらない見出しを削除した。
# タグを適切にした。
# すべてのコメントを削除した。
* 概要
本はPDFで買うようにしていて、PDFはPCのブラウザ(Google Chrome)で読んでいる[fn:1]。

1つ問題があって、リロードするとページがリセットされる。最初からになるので、ブラウザを閉じるときはメモしたりしていた。不意にPCを再起動したりすると、どこまで読んだかわからなくなっていた。

最近見つけた解決策は、URLフラグメント ~#~ をつけるものだ。URLの末尾に ~#page=31~ をつけると、ChromeがPDFのそのページを開いてくれる。

たとえば、↓PDFをChromeで開くと10ページで開く。

- https://mozilla.github.io/pdf.js/web/compressed.tracemonkey-pldi-09.pdf#page=10 👈末尾に注目

* 関連
なし。

* Footnotes
[fn:1] 複数開くのをタブにまとめられて便利くらいで、特に理由はない。
