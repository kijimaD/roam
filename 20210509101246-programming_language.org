:PROPERTIES:
:ID:       868ac56a-2d42-48d7-ab7f-7047c85a8f39
:END:
#+title: Programming Language
* 概要
プログラミング言語は、コンピュータへの命令を記述する言語。
* Memo
** 上達とブログ
プログラミング上達にはブログを書くことが重要だという。
学んだことをそのまま書くのではなくて、自分でコードを用意して書くこと。
** 背景理解
問題解決するだけでは応用性という点で十分でない。
やっていることを完全理解するために調べたり書く。次の似たような問題が対応できるようになる。
毎回ちょっと違うことをググることになるなら、理解できてない。
** 言語の学びやすさ
言語そのものより、既存のプロジェクトがどれくらいあるか、も大きい。
難しくても、参考になるコードが簡単に見つけられれば学習は容易になる。

また、使い慣れたソフトがあるなら最高。何をするのか予めわかっていればすぐ理解できる。
本体コードを見るのもいい。
** [[https://tatsu-zine.com/books/clean-architecture][Clean Architecture 達人に学ぶソフトウェアの構造と設計]]
:LOGBOOK:
CLOCK: [2022-06-06 Mon 10:29]--[2022-06-06 Mon 10:54] =>  0:25
CLOCK: [2022-06-06 Mon 09:48]--[2022-06-06 Mon 10:13] =>  0:25
CLOCK: [2022-06-05 Sun 21:57]--[2022-06-05 Sun 22:22] =>  0:25
CLOCK: [2022-06-04 Sat 15:42]--[2022-06-04 Sat 16:07] =>  0:25
CLOCK: [2022-06-04 Sat 00:09]--[2022-06-04 Sat 00:34] =>  0:25
CLOCK: [2022-06-01 Wed 10:31]--[2022-06-01 Wed 10:56] =>  0:25
CLOCK: [2022-05-29 Sun 19:33]--[2022-05-29 Sun 19:58] =>  0:25
CLOCK: [2022-05-29 Sun 19:00]--[2022-05-29 Sun 19:25] =>  0:25
CLOCK: [2022-05-29 Sun 15:34]--[2022-05-29 Sun 15:59] =>  0:25
CLOCK: [2022-05-29 Sun 11:08]--[2022-05-29 Sun 11:33] =>  0:25
CLOCK: [2022-05-29 Sun 10:43]--[2022-05-29 Sun 11:08] =>  0:25
CLOCK: [2022-05-28 Sat 19:19]--[2022-05-28 Sat 19:44] =>  0:25
CLOCK: [2022-05-28 Sat 18:10]--[2022-05-28 Sat 18:35] =>  0:25
CLOCK: [2022-05-22 Sun 22:23]--[2022-05-22 Sun 22:48] =>  0:25
CLOCK: [2022-05-22 Sun 21:58]--[2022-05-22 Sun 22:23] =>  0:25
CLOCK: [2022-05-21 Sat 22:14]--[2022-05-21 Sat 22:39] =>  0:25
CLOCK: [2022-05-15 Sun 23:28]--[2022-05-15 Sun 23:53] =>  0:25
CLOCK: [2022-05-15 Sun 23:02]--[2022-05-15 Sun 23:27] =>  0:25
:END:
- 121,134,152,168,185, 235
- コードをどう組み合わせるか。アーキテクチャに関する本
- 構造化、関数型、オブジェクト指向…プログラミングパラダイムは、どれも制限を課すものである
- オブジェクト指向の最も有益な特徴はポリモーフィズムである。ソースコードの依存関係を実行順序と関係なくできる。ビジネスロジックが最上位にあり、下位にライブラリやデータベースを置き、これらは交換可能である。実行順序とは逆だ
- プラグインアーキテクチャは、上位レベルの方針を含んだモジュールを下位レベルの詳細を含んだモジュールから独立させること。下位レベルの詳細はプラグインモジュールとなり、上位レベルの方針を含んだモジュールとは独立して、デプロイおよび開発することが可能となる
- 単一責任原則(SRP)の失敗例: Employeeクラスに、経理、人事部門、データベース管理者の3つの部門の責務が入っているようなとき。
  - つまり、アクターの異なるコードは分割すべきということ
- オープン・クローズドの原則(OCP): ソフトウェアの振る舞いは、既存の成果物を変更せず拡張できるようにすべきである。
  - ローグライクチュートリアルがまさにそんな感じだった。機能追加で既存の箇所をいじる必要はなく、独立している
  - ちょっとした拡張のために大量の書き換えが必要になるようなら、そのソフトウェアシステムのアーキテクトは大失敗への道を突き進んでいる
- 依存性逆転の法則: ソースコードは具象に依存するべきではない。変化しやすい具象クラスを参照しない、継承しない。重要な部分が、重要でない部分に依存しないように設計すべき
- 再利用・リリース等価の原則: 同じタイミングで変更されることが多いクラスはひとつにまとめる
- 閉鎖性共通の原則: 同じ理由、同じタイミングで変更されるクラスをコンポーネントにまとめること。変更の理由やタイミングが異なるクラスは、別のコンポーネントに分けること
- 全再利用の原則: コンポーネントのユーザに対して、実際には使わないものへの依存を強要してはいけない
- 安定依存の原則: 安定度の高い方向に依存する
- 安定度・抽象度等価の原則: コンポーネントの抽象度は、その安定度と同程度でなければならない。安定度の高いコンポーネントは抽象度も高くあるべき
- 優れたアーキテクトは、方針と詳細を慎重に区別して、方針が詳細を把握することなく、決して依存することがないように、両者を切り離す
- アーキテクチャがサポートしなければいけないこと:
  - システムのユースケース
  - システムの運用
  - システムの開発
  - システムのデプロイ
- 注文入力システムに注文を追加するユースケースは、注文を削除するユースケースと比べると、明らかに異なる頻度と理由で変更される
- 優れたアーキテクトは、システムの詳細の決定を従属的かつ遅延可能なものにする
* Tasks
** TODO [[http://craftinginterpreters.com/][Crafting Interpreters]]
インタプリタを実装する。
** TODO [[https://www.amazon.co.jp/-/en/Steve-McConnell-ebook/dp/B01E5DYK1C/ref=sr_1_1?keywords=code+complete&qid=1650678654&sprefix=%2Caps%2C158&sr=8-1][Code Complete 第2版 完全なプログラミングを目指して]]             :Read:
:LOGBOOK:
CLOCK: [2022-05-22 Sun 22:53]--[2022-05-22 Sun 23:18] =>  0:25
CLOCK: [2022-05-01 Sun 20:17]--[2022-05-01 Sun 20:42] =>  0:25
CLOCK: [2022-04-29 Fri 17:24]--[2022-04-29 Fri 17:49] =>  0:25
CLOCK: [2022-04-29 Fri 15:35]--[2022-04-29 Fri 16:00] =>  0:25
CLOCK: [2022-04-27 Wed 10:21]--[2022-04-27 Wed 10:46] =>  0:25
CLOCK: [2022-04-25 Mon 22:36]--[2022-04-25 Mon 23:01] =>  0:25
CLOCK: [2022-04-24 Sun 18:53]--[2022-04-24 Sun 19:18] =>  0:25
CLOCK: [2022-04-24 Sun 17:08]--[2022-04-24 Sun 17:33] =>  0:25
CLOCK: [2022-04-24 Sun 11:47]--[2022-04-24 Sun 12:12] =>  0:25
CLOCK: [2022-04-24 Sun 11:16]--[2022-04-24 Sun 11:41] =>  0:25
CLOCK: [2022-04-24 Sun 10:49]--[2022-04-24 Sun 11:14] =>  0:25
CLOCK: [2022-04-24 Sun 01:01]--[2022-04-24 Sun 01:26] =>  0:25
CLOCK: [2022-04-23 Sat 20:51]--[2022-04-23 Sat 21:16] =>  0:25
CLOCK: [2022-04-23 Sat 18:57]--[2022-04-23 Sat 19:22] =>  0:25
CLOCK: [2022-04-23 Sat 12:27]--[2022-04-23 Sat 12:52] =>  0:25
CLOCK: [2022-04-23 Sat 11:21]--[2022-04-23 Sat 11:46] =>  0:25
CLOCK: [2022-04-23 Sat 10:52]--[2022-04-23 Sat 11:17] =>  0:25
:END:
*** DONE 10%
CLOSED: [2022-04-24 Sun 11:16]
*** DONE 20%
CLOSED: [2022-04-28 Thu 23:47]
設計。
コードが書けるレベルに具体化するまで行う。
設計をレビューしてくれる人がいない場合は一週間放置して見返してみる。
自分の設計を理解するのが難しく感じたのなら、自分以外の人が理解するのはもっと難しい。
トップダウン、ボトムアップを併用する。
トップダウンは最初簡単だが、あとの複雑さに気づかないことがある。
ボトムアップは最初難しいが、複雑さを早い段階で明らかにできる可能性がある。
最初に思いついた設計は間違っている。

クラス。
クラスがどのような抽象化を実装しているのか理解する。
できるだけ実装を隠し単純化する。
*** 30%
*** 40%
*** 50%
*** 60%
*** 70%
*** 80%
*** 90%
*** 100%
* References
** [[https://www.oreilly.com/library/view/domain-specific-languages/9780132107549/][Domain Specific Languages Book]]
DSLの本。
よくあるテクニックがどういう仕組みで動いているか解説。
** [[https://web.archive.org/web/20140416021831/http:/lists.canonical.org/pipermail/kragen-tol/2011-August/000937.html][Goodbye, shitty Car extends Vehicle object-orientation tutorial]]
オブジェクト指向に対する、理解しやすいが間違った説明の議論。
** [[https://github.com/sdmg15/Best-websites-a-programmer-should-visit][sdmg15/Best-websites-a-programmer-should-visit: Some useful websites for programmers.]]
役立つリンク集。
** TODO [[https://github.com/donnemartin/system-design-primer][donnemartin/system-design-primer: Learn how to design large-scale systems. Prep for the system design interview. Includes Anki flashcards.]]
大きなシステムの設計方法を学ぶ方法。
** TODO [[https://github.com/kamranahmedse/design-patterns-for-humans][kamranahmedse/design-patterns-for-humans: An ultra-simplified explanation to design patterns]]
シンプルなデザインパターンの解説。
** TODO [[https://github.com/mtdvio/every-programmer-should-know][mtdvio/every-programmer-should-know: A collection of (mostly) technical things every software developer should know about]]
プログラマーが知るべきこと。
** TODO [[https://web.archive.org/web/20120530181801/http:/local.joelonsoftware.com:80/wiki/Japanese][Japanese - The Joel on Software Translation Project]]
エッセイの日本語訳。
** TODO [[https://www.infoq.com/jp/articles/Understanding-Monads-guide-for-perplexed/][モナドを理解する - 迷える者への手引き]]
モナドの解説。
**  [[https://qiita.com/hirokidaichi/items/27c757d92b6915e8ecf7][ペアプログラミングして気がついた新人プログラマの成長を阻害する悪習 - Qiita]]
**  [[https://diveintocode.jp/blogs/Technology/PryDebug][DIVE INTO CODE | エラーの原因を突き止めるためにデバッグをする]]
pryデバッグの方法。
**  [[http://helloworldcollection.de/][The Hello World Collection]]
あらゆるプログラミング言語のhello world集。
**  [[https://gamesfromwithin.com/data-oriented-design][Data-Oriented Design (Or Why You Might Be Shooting Yourself in The Foot With OOP) – Games from Within]]
データ指向のデザイン。
** TODO [[https://practical.engineering/][Practical Engineering]]
エンジニアリングに関する面白い記事がある。
**  [[https://www.digitalocean.com/community/conceptual_articles/s-o-l-i-d-the-first-five-principles-of-object-oriented-design][SOLID: The First 5 Principles of Object Oriented Design | DigitalOcean]]
オブジェクト指向の原則。
**  [[https://xn--97-273ae6a4irb6e2hsoiozc2g4b8082p.com/][プログラマが知るべき97のこと]]
**  [[https://xn--97-273ae6a4irb6e2hxjpb5etb3nqtgfpmg22065a.com/][ゲームクリエイターが知るべき97のこと]]
**  [[https://www.pygame.org/tags/all][Pygameリンク集]]
**  [[https://gameprogrammingpatterns.com/contents.html][Table of Contents · Game Programming Patterns]]
ゲームプログラミングでよく使われるデザインパターン。
* Archives
