:PROPERTIES:
:ID:       868ac56a-2d42-48d7-ab7f-7047c85a8f39
:END:
#+title: Programming Language
* 概要
プログラミング言語は、コンピュータへの命令を記述する言語。
* Memo
** 式(expression)と文(statement)

よく、わからなくなる。

- [[http://ichitcltk.hustle.ne.jp/gudon2/index.php?pageType=file&id=word_expression_statement.md][プログラミングにおける式と文とは - 愚鈍人]]
  - 式は文の構成要素。 例えば、if文の中の判定条件は式
    - 条件判定の式の中でも、セミコロンを使って文にして代入とかできる
  - 文と式の最大の違いは、値を返すのが式で、返さないのが文
    - 多くの言語でifで始まる構文は値を返さず、代入できないので文
    - 関数定義は文
    - クラス定義は文
    - 代入は文
    - 代入の右辺は値を返しているので式
    - returnの引数は値を返しているので式
    - if 条件 本体 の全体は文。条件は式。本体は文。

** データ型uint8

uint8は8ビット(1バイト)の符号なし整数のデータ型。つまり2の8乗で0~255の値が入る。例えば、[[id:a6980e15-ecee-466e-9ea7-2c0210243c0d][JavaScript]]ではバイナリを表示したときのuint8の配列で ~[1, 2, 3, 2, 5 ...]~ というように返ってくる。uint8の配列によってバイナリを表現できる。

** セマフォとは排他制御の仕組みのこと
- [[https://wa3.i-3-i.info/word13357.html][セマフォとは｜「分かりそう」で「分からない」でも「分かった」気になれるIT用語辞典]]

排他制御の仕組みのこと。同時に使える人の数が決まっているものに割り当てられた「あと何人の人が使えるよ」を表した数字。

最大接続数が3だとして、セマフォの中で実行を開始するとカウントが2になる。0になると実行開始をやめ、新規実行しなくなる。先に実行していたスレッドが終了するとカウントが1になり、再度実行開始されるようになる。

セマフォを使ってプログラム間の足並みを揃えることもできる。ある共通リソースにアクセスする部分でだけ同期して、ほかの関係ない部分は並列することによって、資源を効率的に活用できる。
** 式(expression)と文(statement)の違い
式は値を生成し、文はしない。

- 5 は値5を生成するので式
- let a = 1 は値を生成しないので文

値を生成するかどうかはプログラミング言語によって変わる。なので言語によってはif式、if文となる。

** まずインターフェースを決めてから実装する
設計のいい話。

[[https://doc.rust-jp.rs/book-ja/ch20-02-multithreaded.html][シングルスレッドサーバをマルチスレッド化する - The Rust Programming Language 日本語版]]

#+begin_quote
コードの設計を試みる際、 クライアントのインターフェイスをまず書くことは、設計を導く手助けになることがあります。呼び出したいように構成されるよう、 コードのAPIを記述してください; そして、機能を実装してから公開APIの設計をするのではなく、その構造内で機能を実装してください。
#+end_quote

** 背景を理解する重要性
問題解決するだけでは応用性という点で十分でない。やっていることを完全理解するために調べたり書く。次の似たような問題が対応できるようになる。毎回ちょっと違うことをググることになるなら、理解できてない。
** 言語の学びやすさと分野
言語そのものより、その分野に既存のプロジェクトがどれくらいあるか、も大きい。難しくても、参考になるコードが簡単に見つけられれば学習は容易になる。また、使い慣れたソフトがあるなら最高だ。何をするのかあらかじめわかっていれば理解しやすい。
** [[https://tatsu-zine.com/books/clean-architecture][Clean Architecture 達人に学ぶソフトウェアの構造と設計]]
:LOGBOOK:
CLOCK: [2022-06-06 Mon 10:29]--[2022-06-06 Mon 10:54] =>  0:25
CLOCK: [2022-06-06 Mon 09:48]--[2022-06-06 Mon 10:13] =>  0:25
CLOCK: [2022-06-05 Sun 21:57]--[2022-06-05 Sun 22:22] =>  0:25
CLOCK: [2022-06-04 Sat 15:42]--[2022-06-04 Sat 16:07] =>  0:25
CLOCK: [2022-06-04 Sat 00:09]--[2022-06-04 Sat 00:34] =>  0:25
CLOCK: [2022-06-01 Wed 10:31]--[2022-06-01 Wed 10:56] =>  0:25
CLOCK: [2022-05-29 Sun 19:33]--[2022-05-29 Sun 19:58] =>  0:25
CLOCK: [2022-05-29 Sun 19:00]--[2022-05-29 Sun 19:25] =>  0:25
CLOCK: [2022-05-29 Sun 15:34]--[2022-05-29 Sun 15:59] =>  0:25
CLOCK: [2022-05-29 Sun 11:08]--[2022-05-29 Sun 11:33] =>  0:25
CLOCK: [2022-05-29 Sun 10:43]--[2022-05-29 Sun 11:08] =>  0:25
CLOCK: [2022-05-28 Sat 19:19]--[2022-05-28 Sat 19:44] =>  0:25
CLOCK: [2022-05-28 Sat 18:10]--[2022-05-28 Sat 18:35] =>  0:25
CLOCK: [2022-05-22 Sun 22:23]--[2022-05-22 Sun 22:48] =>  0:25
CLOCK: [2022-05-22 Sun 21:58]--[2022-05-22 Sun 22:23] =>  0:25
CLOCK: [2022-05-21 Sat 22:14]--[2022-05-21 Sat 22:39] =>  0:25
CLOCK: [2022-05-15 Sun 23:28]--[2022-05-15 Sun 23:53] =>  0:25
CLOCK: [2022-05-15 Sun 23:02]--[2022-05-15 Sun 23:27] =>  0:25
:END:
- 121,134,152,168,185, 235
- コードをどう組み合わせるか。アーキテクチャに関する本
- 構造化、関数型、オブジェクト指向…プログラミングパラダイムは、どれも制限を課すものである
- オブジェクト指向のもっとも有益な特徴はポリモーフィズムである。ソースコードの依存関係を実行順序と関係なくできる。ビジネスロジックが最上位にあり、下位にライブラリやデータベースを置き、これらは交換可能である。実行順序とは逆だ
- プラグインアーキテクチャは、上位レベルの方針を含んだモジュールを下位レベルの詳細を含んだモジュールから独立させること。下位レベルの詳細はプラグインモジュールとなり、上位レベルの方針を含んだモジュールとは独立して、デプロイおよび開発することが可能となる
- 単一責任原則(SRP)の失敗例: Employeeクラスに、経理、人事部門、データベース管理者の3つの部門の責務が入っているようなとき。
  - つまり、アクターの異なるコードは分割すべきということ
- オープン・クローズドの原則(OCP): ソフトウェアの振る舞いは、既存の成果物を変更せず拡張できるようにすべきである。
  - ローグライクチュートリアルがまさにそんな感じだった。機能追加で既存の箇所をいじる必要はなく、独立している
  - ちょっとした拡張のために大量の書き換えが必要になるようなら、そのソフトウェアシステムのアーキテクトは大失敗への道を突き進んでいる
- 依存性逆転の法則: ソースコードは具象に依存するべきではない。変化しやすい具象クラスを参照しない、継承しない。重要な部分が、重要でない部分に依存しないように設計すべき
- 再利用・リリース等価の原則: 同じタイミングで変更されることが多いクラスはひとつにまとめる
- 閉鎖性共通の原則: 同じ理由、同じタイミングで変更されるクラスをコンポーネントにまとめること。変更の理由やタイミングが異なるクラスは、別のコンポーネントに分けること
- 全再利用の原則: コンポーネントのユーザに対して、実際には使わないものへの依存を強要してはいけない
- 安定依存の原則: 安定度の高い方向に依存する
- 安定度・抽象度等価の原則: コンポーネントの抽象度は、その安定度と同程度でなければならない。安定度の高いコンポーネントは抽象度も高くあるべき
- 優れたアーキテクトは、方針と詳細を慎重に区別して、方針が詳細を把握することなく、決して依存することがないように、両者を切り離す
- アーキテクチャがサポートしなければいけないこと:
  - システムのユースケース
  - システムの運用
  - システムの開発
  - システムのデプロイ
- 注文入力システムに注文を追加するユースケースは、注文を削除するユースケースと比べると、明らかに異なる頻度と理由で変更される
- 優れたアーキテクトは、システムの詳細の決定を従属的かつ遅延可能なものにする
* Tasks
** TODO [[https://qiita.com/suin/items/52cf80021361168f6b0e][TypeScript: 異なる2つの型システム「公称型」と「構造的部分型」 - Qiita]]
2つの型の違いは何か。
** TODO [[https://tatsu-zine.com/books/types-and-programming-languages-ja][型システム入門 プログラミング言語と型の理論 - 達人出版会]]
:LOGBOOK:
CLOCK: [2022-07-26 Tue 08:38]--[2022-07-26 Tue 09:03] =>  0:25
:END:
** TODO [[http://craftinginterpreters.com/][Crafting Interpreters]]
インタプリタを実装する。
** TODO [[https://www.amazon.co.jp/-/en/Steve-McConnell-ebook/dp/B01E5DYK1C/ref=sr_1_1?keywords=code+complete&qid=1650678654&sprefix=%2Caps%2C158&sr=8-1][Code Complete 第2版 完全なプログラミングを目指して]]             :Read:
:LOGBOOK:
CLOCK: [2022-05-22 Sun 22:53]--[2022-05-22 Sun 23:18] =>  0:25
CLOCK: [2022-05-01 Sun 20:17]--[2022-05-01 Sun 20:42] =>  0:25
CLOCK: [2022-04-29 Fri 17:24]--[2022-04-29 Fri 17:49] =>  0:25
CLOCK: [2022-04-29 Fri 15:35]--[2022-04-29 Fri 16:00] =>  0:25
CLOCK: [2022-04-27 Wed 10:21]--[2022-04-27 Wed 10:46] =>  0:25
CLOCK: [2022-04-25 Mon 22:36]--[2022-04-25 Mon 23:01] =>  0:25
CLOCK: [2022-04-24 Sun 18:53]--[2022-04-24 Sun 19:18] =>  0:25
CLOCK: [2022-04-24 Sun 17:08]--[2022-04-24 Sun 17:33] =>  0:25
CLOCK: [2022-04-24 Sun 11:47]--[2022-04-24 Sun 12:12] =>  0:25
CLOCK: [2022-04-24 Sun 11:16]--[2022-04-24 Sun 11:41] =>  0:25
CLOCK: [2022-04-24 Sun 10:49]--[2022-04-24 Sun 11:14] =>  0:25
CLOCK: [2022-04-24 Sun 01:01]--[2022-04-24 Sun 01:26] =>  0:25
CLOCK: [2022-04-23 Sat 20:51]--[2022-04-23 Sat 21:16] =>  0:25
CLOCK: [2022-04-23 Sat 18:57]--[2022-04-23 Sat 19:22] =>  0:25
CLOCK: [2022-04-23 Sat 12:27]--[2022-04-23 Sat 12:52] =>  0:25
CLOCK: [2022-04-23 Sat 11:21]--[2022-04-23 Sat 11:46] =>  0:25
CLOCK: [2022-04-23 Sat 10:52]--[2022-04-23 Sat 11:17] =>  0:25
:END:

設計。
コードが書けるレベルに具体化するまで行う。
設計をレビューしてくれる人がいない場合は一週間放置して見返してみる。
自分の設計を理解するのが難しく感じたのなら、自分以外の人が理解するのはもっと難しい。
トップダウン、ボトムアップを併用する。
トップダウンは最初簡単だが、あとの複雑さに気づかないことがある。
ボトムアップは最初難しいが、複雑さを早い段階で明らかにできる可能性がある。
最初に思いついた設計は間違っている。

クラス。
クラスがどのような抽象化を実装しているのか理解する。
できるだけ実装を隠し単純化する。

** TODO [[https://www.oreilly.co.jp/books/9784873115320/][O'Reilly Japan - 言語実装パターン]]
実装パターンの解説書。
* References
** [[https://github.com/charlax/professional-programming][charlax/professional-programming: A collection of learning resources for curious software engineers]]
おすすめのリンク集。
** [[https://qiita.com/e99h2121/items/fb8f04637cc420c7e1f6][エンジニアは数学をどこまで勉強すればよいのか - 「プログラマの数学」を薦めたい - Qiita]]
役に立つ記事リスト。
** [[https://engineer-lab.findy-code.io/rust-contributor][Rustに貢献してみませんか？コントリビューターたちが語る開発の裏側とOSS活動の魅力 - Findy Engineer Lab - ファインディエンジニアラボ]]

謎に包まれたコントリビュートのプロセスの、ヒント。

#+begin_quote
それに、過去には「Rust Compiler Ambitions for 2022」というブログ記事の「What do I do if I'm interested in compiler development but have no experience in compilers?」という項目の中で「コンパイラ開発の経験がなくても気にしなくていい」「今コントリビューションしているメンバーも、Rustの開発をしながら徐々にコンパイラの知識を身につけたんだ」という旨のことが書かれています。

自分のスキルの高低は気にせず、できることから手をつけたらいいと思います。コミッターたちに質問できる場も用意されているので、困ったことがあれば誰かしら助けてくれるはずです。
#+end_quote

小さいことから始める。
** [[https://www.amazon.com/Art-Metaobject-Protocol-Gregor-Kiczales/dp/0262610744][The Art of the Metaobject Protocol: Gregor Kiczales, Jim des Rivieres, Daniel G. Bobrow: 9780262610742: Amazon.com: Books]]
メタオブジェクトプロトコルのバイブル。
** [[https://www.oreilly.com/library/view/domain-specific-languages/9780132107549/][Domain Specific Languages Book]]
DSLの本。
よくあるテクニックがどういう仕組みで動いているか解説。
** [[https://web.archive.org/web/20140416021831/http:/lists.canonical.org/pipermail/kragen-tol/2011-August/000937.html][Goodbye, shitty Car extends Vehicle object-orientation tutorial]]
オブジェクト指向に対する、理解しやすいが間違った説明の議論。
** [[https://github.com/sdmg15/Best-websites-a-programmer-should-visit][sdmg15/Best-websites-a-programmer-should-visit: Some useful websites for programmers.]]
役立つリンク集。
** TODO [[https://github.com/donnemartin/system-design-primer][donnemartin/system-design-primer: Learn how to design large-scale systems. Prep for the system design interview. Includes Anki flashcards.]]
大きなシステムの設計方法を学ぶ方法。
** TODO [[https://github.com/kamranahmedse/design-patterns-for-humans][kamranahmedse/design-patterns-for-humans: An ultra-simplified explanation to design patterns]]
シンプルなデザインパターンの解説。
** TODO [[https://github.com/mtdvio/every-programmer-should-know][mtdvio/every-programmer-should-know: A collection of (mostly) technical things every software developer should know about]]
プログラマーが知るべきこと。
** TODO [[https://web.archive.org/web/20120530181801/http:/local.joelonsoftware.com:80/wiki/Japanese][Japanese - The Joel on Software Translation Project]]
エッセイの日本語訳。
** TODO [[https://www.infoq.com/jp/articles/Understanding-Monads-guide-for-perplexed/][モナドを理解する - 迷える者への手引き]]
モナドの解説。
**  [[https://qiita.com/hirokidaichi/items/27c757d92b6915e8ecf7][ペアプログラミングして気がついた新人プログラマの成長を阻害する悪習 - Qiita]]
**  [[https://diveintocode.jp/blogs/Technology/PryDebug][DIVE INTO CODE | エラーの原因を突き止めるためにデバッグをする]]
pryデバッグの方法。
**  [[http://helloworldcollection.de/][The Hello World Collection]]
あらゆるプログラミング言語のhello world集。
**  [[https://gamesfromwithin.com/data-oriented-design][Data-Oriented Design (Or Why You Might Be Shooting Yourself in The Foot With OOP) – Games from Within]]
データ指向のデザイン。
** TODO [[https://practical.engineering/][Practical Engineering]]
エンジニアリングに関する面白い記事がある。
**  [[https://www.digitalocean.com/community/conceptual_articles/s-o-l-i-d-the-first-five-principles-of-object-oriented-design][SOLID: The First 5 Principles of Object Oriented Design | DigitalOcean]]
オブジェクト指向の原則。
**  [[https://xn--97-273ae6a4irb6e2hsoiozc2g4b8082p.com/][プログラマが知るべき97のこと]]
**  [[https://xn--97-273ae6a4irb6e2hxjpb5etb3nqtgfpmg22065a.com/][ゲームクリエイターが知るべき97のこと]]
**  [[https://www.pygame.org/tags/all][Pygameリンク集]]
**  [[https://gameprogrammingpatterns.com/contents.html][Table of Contents · Game Programming Patterns]]
ゲームプログラミングでよく使われるデザインパターン。
* Archives
** DONE [[https://www.amazon.co.jp/%E3%83%99%E3%82%BF%E3%83%BC%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E-%E2%80%95%E5%84%AA%E3%82%8C%E3%81%9F%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%AB%E3%81%AA%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AE38%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9%E3%81%A8%E3%83%86%E3%82%AF%E3%83%8B%E3%83%83%E3%82%AF-Pete-Goodliffe/dp/4873118204][ベタープログラマ ―優れたプログラマになるための38の考え方とテクニック | Pete Goodliffe, 柴田 芳樹 |本 | 通販 | Amazon]]
CLOSED: [2022-09-26 Mon 22:35]
:LOGBOOK:
CLOCK: [2022-09-26 Mon 15:02]--[2022-09-26 Mon 15:27] =>  0:25
CLOCK: [2022-09-26 Mon 14:32]--[2022-09-26 Mon 14:57] =>  0:25
CLOCK: [2022-09-26 Mon 11:44]--[2022-09-26 Mon 12:09] =>  0:25
CLOCK: [2022-09-26 Mon 11:19]--[2022-09-26 Mon 11:44] =>  0:25
CLOCK: [2022-09-26 Mon 09:28]--[2022-09-26 Mon 09:53] =>  0:25
CLOCK: [2022-09-26 Mon 09:00]--[2022-09-26 Mon 09:25] =>  0:25
CLOCK: [2022-09-26 Mon 08:32]--[2022-09-26 Mon 08:57] =>  0:25
CLOCK: [2022-09-26 Mon 07:55]--[2022-09-26 Mon 08:20] =>  0:25
CLOCK: [2022-09-25 Sun 22:32]--[2022-09-25 Sun 22:58] =>  0:26
CLOCK: [2022-09-25 Sun 21:56]--[2022-09-25 Sun 22:21] =>  0:25
CLOCK: [2022-09-25 Sun 21:31]--[2022-09-25 Sun 21:56] =>  0:25
CLOCK: [2022-09-25 Sun 21:05]--[2022-09-25 Sun 21:30] =>  0:25
CLOCK: [2022-09-25 Sun 09:32]--[2022-09-25 Sun 09:57] =>  0:25
CLOCK: [2022-09-25 Sun 09:06]--[2022-09-25 Sun 09:31] =>  0:25
:END:
優れたプログラマになるためのヒント。

#+begin_quote
コードを読むことは、読むことに過ぎません。取り組んでみて、乗ろうとしてみて、間違いを犯し、そして転ぶことによってのみコードベースを学ぶことができます。コードに取り組むことを阻害する知的な壁を建てないでください。自分の理解に対する自信のなさから最初は無力であった多くの優秀なプログラマを、私は見てきました。

やってみて、飛び込んで、勇敢に、コードを修正してください。

コードを学ぶ最善の方法は、そのコードを修正することです。そして、自分の間違いから学んでください。

では、あなたは何を修正すべきでしょうか。

コードを学ぶ際には、すぐに恩恵を得られて、何かを壊す(あるいは恥ずかしいコードを書く)可能性が少ない箇所を探してください。

システムを理解するのに役立つようなコードを探してください。
#+end_quote

#+begin_quote
きちんと整理する機会を楽しんでください。がらくたに対して構造と健全さをもたらすことは価値があります。うんざりする練習だと思うのではなく、高い品質をもたらす機会だと見なしてください。それを教訓だと見なして、そこから学んでください。同じコーディングの誤りを繰り返さないためにはどうしますか。
#+end_quote

#+begin_quote
基本的な学習の技法は、行って学ぶことです。書籍や記事を読んだり、オンラインのチュートリアルを見たり、プログラミングのカンファレンスへ参加したりすることは、すべてよいことです。しかし、あなたがその技術を使ってみるまでは、頭の中に概念が抽象的な集まりとして存在するにすぎません。

抽象的なことを具体化してください。つまり、飛び込んで、試してください。

理想的には、学習している最中に具体化してください。テストプロジェクトを初めて、知識を蓄積しながらその知識を使ってください。新たな言語を学ぶときは、すぐにその言語でコードを書き始めてください。読んだコード例を試してください。そのコードで色々と行ってください。間違いをして、何がうまくいって何がうまくいかないかを知ってください。
#+end_quote

#+begin_quote
私は、自分が使っている言語との真の関係に熱心に取り組んでいます。それは、結婚に似ています。見返りが得られる関係ですが、努力を必要とします。
#+end_quote
