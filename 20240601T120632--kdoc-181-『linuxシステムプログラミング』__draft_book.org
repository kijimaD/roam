:properties:
:ID: 20240601T120632
:end:
#+title:      KDOC 181: 『Linuxシステムプログラミング』
#+date:       [2024-06-01 Sat 12:06]
#+filetags:   :draft:book:
#+identifier: 20240601T120632

# (denote-rename-file-using-front-matter (buffer-file-name) 0)
# (save-excursion (while (re-search-backward ":draft" nil t) (replace-match "")))
# (flush-lines "^\\#\s.+?")

# ====ポリシー。
# 1ファイル1アイデア。
# 1ファイルで内容を完結させる。
# 常にほかのエントリとリンクする。
# 自分の言葉を使う。
# 参考文献を残しておく。
# 文献メモの場合は、感想と混ぜないこと。1つのアイデアに反する
# ツェッテルカステンの議論に寄与するか
# 頭のなかやツェッテルカステンにある問いとどのようにかかわっているか
# エントリ間の接続を発見したら、接続エントリを追加する。カード間にあるリンクの関係を説明するカード。
# アイデアがまとまったらアウトラインエントリを作成する。リンクをまとめたエントリ。
# エントリを削除しない。古いカードのどこが悪いかを説明する新しいカードへのリンクを追加する。
# 恐れずにカードを追加する。無意味の可能性があっても追加しておくことが重要。

# ====永久保存メモのルール。
# 自分の言葉で書く。
# 後から読み返して理解できる。
# 他のメモと関連付ける。
# ひとつのメモにひとつのことだけを書く。
# メモの内容は1枚で完結させる。
# 論文の中に組み込み、公表できるレベルである。

# ====価値があるか。
# その情報がどういった文脈で使えるか。
# どの程度重要な情報か。
# そのページのどこが本当に必要な部分なのか。

* この文書のステータス
:LOGBOOK:
CLOCK: [2024-06-09 Sun 21:49]--[2024-06-09 Sun 22:14] =>  0:25
CLOCK: [2024-06-09 Sun 20:17]--[2024-06-09 Sun 20:42] =>  0:25
CLOCK: [2024-06-09 Sun 19:51]--[2024-06-09 Sun 20:17] =>  0:26
CLOCK: [2024-06-08 Sat 19:36]--[2024-06-08 Sat 20:01] =>  0:25
CLOCK: [2024-06-04 Tue 20:26]--[2024-06-04 Tue 20:51] =>  0:25
CLOCK: [2024-06-04 Tue 14:28]--[2024-06-04 Tue 14:53] =>  0:25
CLOCK: [2024-06-02 Sun 20:39]--[2024-06-02 Sun 21:04] =>  0:25
CLOCK: [2024-06-02 Sun 19:01]--[2024-06-02 Sun 19:26] =>  0:25
CLOCK: [2024-06-02 Sun 10:24]--[2024-06-02 Sun 10:49] =>  0:25
CLOCK: [2024-06-01 Sat 22:39]--[2024-06-01 Sat 23:04] =>  0:25
CLOCK: [2024-06-01 Sat 21:12]--[2024-06-01 Sat 21:37] =>  0:25
CLOCK: [2024-06-01 Sat 20:46]--[2024-06-01 Sat 21:11] =>  0:25
CLOCK: [2024-06-01 Sat 19:20]--[2024-06-01 Sat 19:45] =>  0:25
CLOCK: [2024-06-01 Sat 14:56]--[2024-06-01 Sat 15:21] =>  0:25
:END:
- 作成
  - [ ] <署名>
# (progn (kill-line -1) (insert (format "  - [X] %s 貴島" (format-time-string "%Y-%m-%d"))))
- レビュー
  - [ ] <署名>
# (progn (kill-line -1) (insert (format "  - [X] %s 貴島" (format-time-string "%Y-%m-%d"))))

# 関連をつけた。
# タイトルがフォーマット通りにつけられている。
# 内容をブラウザに表示して読んだ(作成とレビューのチェックは同時にしない)。
# 文脈なく読めるのを確認した。
# おばあちゃんに説明できる。
# いらない見出しを削除した。
# タグを適切にした。
# すべてのコメントを削除した。
* 概要
# 本文(タイトルをつける)。
[[https://www.oreilly.co.jp/books/9784873113623/][Linuxシステムプログラミング]]は、[[id:7a81eb7c-8e2b-400a-b01a-8fa597ea527a][Linux]]を解説する本。
* メモ
:LOGBOOK:
CLOCK: [2024-06-09 Sun 16:18]--[2024-06-09 Sun 16:43] =>  0:25
CLOCK: [2024-06-09 Sun 12:29]--[2024-06-09 Sun 12:54] =>  0:25
:END:
- 可能な限りどんなものでもファイルとして表現しようとしているLinuxのシステムでは、ファイルのオープン、読み取り、書き込み、クローズを把握することは重要である、という(p63)
- /dev/zero は0を無限に返す仮想デバイス(p65)
- ユーザはブロックサイズについて意識することはない。データを書き込むと、プロセス空間内のバッファに書き込まれる。ある決まったサイズに達すると1度の書き込みでバッファ全体を書き出す。読み込みの場合も、ブロックサイズでアラインメントされたサイズでデータを読み取る、という(p67)
- 標準I/Oライブラリ関数の世界では、オープンしたファイルをストリームと呼ぶ、という(p68)
- 通常エラー出力だけはデフォルトでバッファリングしない。標準出力が端末の場合はデフォルトで行単位でバッファリングする、という(p81)
- レベルトリガは信号が届いている間はいつでも発生する。エッジトリガは信号が変化したときのみ発生する(p99)
- メモリの最小単位をページといい、それぞれにアクセス権限と用途がある、という。mmapシステムコールはページにファイルをマッピングする(p101)
- mmapによるファイル操作の利点。read()やwrite()ではユーザ空間のバッファとのコピー処理が発生するが、メモリマッピングの場合には発生しない。メモリへマッピングした場合はシステムコールやコンテキストスイッチのオーバーヘッドが発生せず、単なるメモリアクセスと変わらない。また共有可能、シークが単なるポインタ処理で済む、などの利点がある。欠点もあるが、ファイルサイズが大きい場合には効果が大きい場合が多い(p106)
- アドバイスで、カーネルのリソース管理にヒントを与えられる。動画ストーリミングなど大量のデータを読み書きした場合には、アドバイスを用いてキャッシュを破棄するようにするとよい、というような使い方がある(p115)
- idleプロセスのpidは0。initプロセスのpidは1。(p131)
- プログラムイメージをメモリへロードし実行する処理は、Unixではプロセス作成とは分離されている。まずforkシステムコールによりプロセスを新規作成する。次にexecシステムコールでバイナリをメモリにロードし、それまでそのアドレス空間にあった内容と置き換え、新たなプログラムを実行する(p134)
- プロセスグループによって、グループ内のすべてのプロセスにシグナルを送信できる(p160)
- キーボードの押下、マウスの移動などはI/Oバウンド。応答性のために短いタイムスライスが適切で、スケジューラはI/Oバウンドの傾向を強く持つアプリケーションの優先度を高く設定する(p170)
- 一度プロセスをあるCPU上で実行すると、それ以降はプロセススケジューラはそのプロセスを可能な限り同じCPUで実行しようとする。プロセスを異なるプロセッサ間でマイグレーションするのはコストが高い、という。それでも、負荷がプロセッサによって偏っている場合にはプロセスを移動する意義があり、いつ移動するかの判断をロードバランスという(p177)
- プロセッサアフィニティとは、プロセスが同じプロセッサ上で実行する程度を表す。プロセスによっては、同じプロセッサで動作したほうが有利な場合が多くある、という(p177)

* 関連
# 関連するエントリ。なぜ関連させたか理由を書く。意味のあるつながりを意識的につくる。
# この事実は自分のこのアイデアとどう整合するか。
# この現象はあの理論でどう説明できるか。
# ふたつのアイデアは互いに矛盾するか、互いを補っているか。
# いま聞いた内容は以前に聞いたことがなかったか。
# メモ y についてメモ x はどういう意味か。
