:properties:
:ID: 20241102T103338
:mtime:    20241109134824
:ctime:    20241102180206
:end:
#+title:      KDOC 260: プロセスがSleepになるのを再現する
#+date:       [2024-11-02 Sat 10:33]
#+filetags:   :draft:wiki:
#+identifier: 20241102T103338

# (denote-rename-file-using-front-matter (buffer-file-name) 0)
# (save-excursion (while (re-search-backward ":draft" nil t) (replace-match "")))
# (flush-lines "^\\#\s.+?")

# ====ポリシー。
# 1ファイル1アイデア。
# 1ファイルで内容を完結させる。
# 常にほかのエントリとリンクする。
# 自分の言葉を使う。
# 参考文献を残しておく。
# 文献メモの場合は、感想と混ぜないこと。1つのアイデアに反する
# ツェッテルカステンの議論に寄与するか
# 頭のなかやツェッテルカステンにある問いとどのようにかかわっているか
# エントリ間の接続を発見したら、接続エントリを追加する。カード間にあるリンクの関係を説明するカード。
# アイデアがまとまったらアウトラインエントリを作成する。リンクをまとめたエントリ。
# エントリを削除しない。古いカードのどこが悪いかを説明する新しいカードへのリンクを追加する。
# 恐れずにカードを追加する。無意味の可能性があっても追加しておくことが重要。

# ====永久保存メモのルール。
# 自分の言葉で書く。
# 後から読み返して理解できる。
# 他のメモと関連付ける。
# ひとつのメモにひとつのことだけを書く。
# メモの内容は1枚で完結させる。
# 論文の中に組み込み、公表できるレベルである。

# ====価値があるか。
# その情報がどういった文脈で使えるか。
# どの程度重要な情報か。
# そのページのどこが本当に必要な部分なのか。

* この文書のステータス
:LOGBOOK:
CLOCK: [2024-11-02 Sat 17:26]--[2024-11-02 Sat 17:51] =>  0:25
CLOCK: [2024-11-02 Sat 16:33]--[2024-11-02 Sat 16:58] =>  0:25
CLOCK: [2024-11-02 Sat 16:05]--[2024-11-02 Sat 16:30] =>  0:25
CLOCK: [2024-11-02 Sat 15:27]--[2024-11-02 Sat 15:52] =>  0:25
CLOCK: [2024-11-02 Sat 12:06]--[2024-11-02 Sat 12:31] =>  0:25
CLOCK: [2024-11-02 Sat 11:27]--[2024-11-02 Sat 11:52] =>  0:25
CLOCK: [2024-11-02 Sat 10:55]--[2024-11-02 Sat 11:20] =>  0:25
:END:
- 作成
  - [X] 2024-11-07 貴島
- レビュー
  - [ ] <署名>
# (progn (kill-line -1) (insert (format "  - [X] %s 貴島" (format-time-string "%Y-%m-%d"))))

# 関連をつけた。
# タイトルがフォーマット通りにつけられている。
# 内容をブラウザに表示して読んだ(作成とレビューのチェックは同時にしない)。
# 文脈なく読めるのを確認した。
# おばあちゃんに説明できる。
# いらない見出しを削除した。
# タグを適切にした。
# すべてのコメントを削除した。
* 概要
[[id:20241017T190613][KDOC 254: ジョブプロセスがSleepしていた理由]]の、再現コードを書いた。もっとシンプルにしたいが、Python上でシェル実行するとき特有のことなのか、シェル実行でも再現する問題なのかわかっていない。パイプの挙動に見える。

* 再現

#+caption: 本体test.py。process.stderrを取り出していない
#+begin_src python
import subprocess

process = subprocess.Popen(
    ["bash", "-c", "./test.sh"],
    stdout=subprocess.PIPE,
    stderr=subprocess.PIPE
)

for line in process.stdout:
    print(line.decode('utf-8'), end="")
#+end_src

#+caption: test.sh。呼び出されるシェルコマンド。標準エラー出力を1000バイト書き出す。-xオプションは標準エラー出力で出してきて実験の邪魔になるのでオンにしてはいけない
#+begin_src bash
  #!/bin/bash
  set -eu

  # 1000バイト
  dummy=`printf "%1000s" | tr ' ' 'a'`
  i=0
  while true
  do
      sleep 0.01
      echo -n $dummy >&2 # 標準エラー出力へ

      echo $i        # 標準出力へ
      i=`echo "$i+1" | bc`
  done
#+end_src

#+caption: 普通に実行する
#+begin_src shell
  python test.py
#+end_src

↑結果は、63ループ目でプロセスがSleep状態になる。Linuxのパイプのバッファの大きさは64KBというから、符合する。プロセスを再開(Continue)しても、1ループも進まず再びSleepになる。

#+caption: straceする
#+begin_src shell
  strace python test.py
#+end_src

また、straceすると、最後はファイルディスクリプタ3番をreadしたところでSleepに入っていることがわかる。対応する括弧と後半の引数が出力されない。

#+caption: straceした結果
#+begin_src
(略...)
close(8)                                = 0
close(6)                                = 0
close(4)                                = 0
brk(0x565112213000)                     = 0x565112213000
read(7, "", 50000)                      = 0
brk(0x565112207000)                     = 0x565112207000
close(7)                                = 0
read(3,
#+end_src

#+caption: continueしたあとに続きが出力された
#+begin_src shell
read(3, 0x559d748f5030, 4096)           = ? ERESTARTSYS (To be restarted if SA_RESTART is set)
#+end_src

つまりreadの途中で、システムコールが中断されたということ。

ここで、ファイルディスクリプタ3番はパイプである。

#+caption: ファイルディスクリプタを調べる
#+begin_src shell
  $ ls -al /proc/3580807/fd
  total 0
  dr-x------ 2 orange orange  0 Nov  2 16:00 .
  dr-xr-xr-x 9 orange orange  0 Nov  2 15:57 ..
  lrwx------ 1 orange orange 64 Nov  2 16:00 0 -> /dev/pts/21
  lrwx------ 1 orange orange 64 Nov  2 16:00 1 -> /dev/pts/21
  lrwx------ 1 orange orange 64 Nov  2 16:00 2 -> /dev/pts/21
  lr-x------ 1 orange orange 64 Nov  2 16:00 24 -> /dev/pts/0
  lr-x------ 1 orange orange 64 Nov  2 16:00 3 -> 'pipe:[21445201]'
  (略...)
#+end_src

書き込みの途中で止まる、というならわかる。が、readで止まる理由がわからない。明らかにパイプのバッファがいっぱいになって起こることに見えるが、writeで止まっているわけではない。試してみると思ったとおりにならない。何かの理解が誤っている。

* 関連
# 関連するエントリ。なぜ関連させたか理由を書く。意味のあるつながりを意識的につくる。
# この事実は自分のこのアイデアとどう整合するか。
# この現象はあの理論でどう説明できるか。
# ふたつのアイデアは互いに矛盾するか、互いを補っているか。
# いま聞いた内容は以前に聞いたことがなかったか。
# メモ y についてメモ x はどういう意味か。
- [[id:20241017T190613][KDOC 254: ジョブプロセスがSleepしていた理由]]。を詳しく調べた
