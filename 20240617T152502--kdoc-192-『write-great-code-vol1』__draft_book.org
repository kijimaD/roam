:properties:
:ID: 20240617T152502
:mtime:    20241123181207
:ctime:    20241102003514
:end:
#+title:      KDOC 192: 『Write Great Code Vol.1』
#+date:       [2024-06-17 Mon 15:25]
#+filetags:   :draft:book:
#+identifier: 20240617T152502

# (denote-rename-file-using-front-matter (buffer-file-name) 0)
# (save-excursion (while (re-search-backward ":draft" nil t) (replace-match "")))
# (flush-lines "^\\#\s.+?")

# ====ポリシー。
# 1ファイル1アイデア。
# 1ファイルで内容を完結させる。
# 常にほかのエントリとリンクする。
# 自分の言葉を使う。
# 参考文献を残しておく。
# 文献メモの場合は、感想と混ぜないこと。1つのアイデアに反する
# ツェッテルカステンの議論に寄与するか
# 頭のなかやツェッテルカステンにある問いとどのようにかかわっているか
# エントリ間の接続を発見したら、接続エントリを追加する。カード間にあるリンクの関係を説明するカード。
# アイデアがまとまったらアウトラインエントリを作成する。リンクをまとめたエントリ。
# エントリを削除しない。古いカードのどこが悪いかを説明する新しいカードへのリンクを追加する。
# 恐れずにカードを追加する。無意味の可能性があっても追加しておくことが重要。

# ====永久保存メモのルール。
# 自分の言葉で書く。
# 後から読み返して理解できる。
# 他のメモと関連付ける。
# ひとつのメモにひとつのことだけを書く。
# メモの内容は1枚で完結させる。
# 論文の中に組み込み、公表できるレベルである。

# ====価値があるか。
# その情報がどういった文脈で使えるか。
# どの程度重要な情報か。
# そのページのどこが本当に必要な部分なのか。

* この文書のステータス
:PROPERTIES:
:Effort:   20:00
:END:
:LOGBOOK:
CLOCK: [2024-11-23 Sat 17:46]--[2024-11-23 Sat 18:11] =>  0:25
CLOCK: [2024-11-17 Sun 22:29]--[2024-11-17 Sun 22:54] =>  0:25
CLOCK: [2024-11-17 Sun 21:11]--[2024-11-17 Sun 21:36] =>  0:25
CLOCK: [2024-11-17 Sun 20:43]--[2024-11-17 Sun 21:08] =>  0:25
CLOCK: [2024-11-17 Sun 20:02]--[2024-11-17 Sun 20:27] =>  0:25
CLOCK: [2024-11-17 Sun 18:14]--[2024-11-17 Sun 18:39] =>  0:25
CLOCK: [2024-11-17 Sun 17:01]--[2024-11-17 Sun 17:26] =>  0:25
CLOCK: [2024-11-17 Sun 12:32]--[2024-11-17 Sun 12:57] =>  0:25
CLOCK: [2024-11-17 Sun 10:36]--[2024-11-17 Sun 11:01] =>  0:25
CLOCK: [2024-11-17 Sun 00:06]--[2024-11-17 Sun 00:31] =>  0:25
CLOCK: [2024-11-16 Sat 23:34]--[2024-11-16 Sat 23:59] =>  0:25
CLOCK: [2024-11-02 Sat 00:10]--[2024-11-02 Sat 00:35] =>  0:25
CLOCK: [2024-09-21 Sat 15:39]--[2024-09-21 Sat 16:04] =>  0:25
CLOCK: [2024-09-21 Sat 13:59]--[2024-09-21 Sat 14:24] =>  0:25
CLOCK: [2024-09-21 Sat 11:37]--[2024-09-21 Sat 12:02] =>  0:25
CLOCK: [2024-09-21 Sat 11:01]--[2024-09-21 Sat 11:26] =>  0:25
CLOCK: [2024-09-21 Sat 10:25]--[2024-09-21 Sat 10:50] =>  0:25
CLOCK: [2024-09-21 Sat 10:00]--[2024-09-21 Sat 10:25] =>  0:25
CLOCK: [2024-09-21 Sat 09:23]--[2024-09-21 Sat 09:48] =>  0:25
CLOCK: [2024-07-11 Thu 22:20]--[2024-07-11 Thu 22:45] =>  0:25
CLOCK: [2024-07-10 Wed 23:21]--[2024-07-10 Wed 23:46] =>  0:25
:END:
- 作成
  - [ ] <署名>
# (progn (kill-line -1) (insert (format "  - [X] %s 貴島" (format-time-string "%Y-%m-%d"))))
- レビュー
  - [ ] <署名>
# (progn (kill-line -1) (insert (format "  - [X] %s 貴島" (format-time-string "%Y-%m-%d"))))

# 関連をつけた。
# タイトルがフォーマット通りにつけられている。
# 内容をブラウザに表示して読んだ(作成とレビューのチェックは同時にしない)。
# 文脈なく読めるのを確認した。
# おばあちゃんに説明できる。
# いらない見出しを削除した。
# タグを適切にした。
# すべてのコメントを削除した。
* 概要
# 本文(タイトルをつける)。
[[https://tatsu-zine.com/books/write-great-code01][Write Great Code〈Vol.1〉]]は、低レイヤからよいコードを書く方法についての本。
* メモ
- BCD(Binary-Coded Decimal)は、10進数の値を2進表現でコード化したものである。BCDはデータをそれほど効率的に格納できない。重要な計算が、しばしば10進ベースの演算を使って実行されていた。特定の計算では正確な結果が得られるが、2進表現のほうがより正確に計算できることがほとんどである。このため最近のコンピュータプログラムで、すべての値(10進値を含めて)を2進形式で表現している、という(p32)
- 数値、文字列の変換にはコストがかかる、という(p20)
- 高水準言語の中には、パックされたデータのサポートが標準で組み込まれているものがある。たとえば、[[id:656a0aa4-e5d3-416f-82d5-f909558d0639][C言語]]では次のような構造体を定義できる(p59)

#+begin_src C
  struct {
    unsigned bits0_3 :4;
    unsigned bits4_11 :8;
    unsigned bits12_15 :4;
    unsigned bits16_23 :8;
    unsigned bits24_31 :8;
  } packedData;
#+end_src

#+RESULTS:
#+begin_src
#+end_src

- 浮動小数点計算の正確性を高めるには、計算時に追加の桁を使う必要がある。この追加の桁をガード桁という(p67)
- 浮動小数点同士の比較は危険。2進数の浮動小数点形式では、数学的に同じ結果を返す2つの計算の最下位ビットが異なる場合がある。代数的には等しくても、等式としてそのまま比較すると等しくならないことがある(p69)
- 浮動小数点形式も、当然2進表現で保存されている。どのような形式で保存するかによって、計算コストや容量コストが変わってくる
- Microsoft Windowsは内部的にUnicodeを使っている。そのためシステムコールにはASCII文字列を渡すよりもUnicode文字列を渡したほうが実行スピードが早くなる(p105)
- ゼロ終端文字列、長さ接頭辞付き文字列のメリットデメリット(p107)
- 長さ接頭辞付き文字列では、長さを示す接頭辞が文字列内の0の位置にある。文字列の最初の文字が文字列の配列表現においてインデックス1ではじまる。これは、実世界での数え方と同じである(p108)
- 説明用に新しい文字セットを定義していく。同じ文字の範囲だとしても、並べ方によってソートや比較の速度、人の扱いやすさに影響が出る
- 6章 メモリの構成とアクセス
- アドレスの信号線が1本ある場合、プロセッサがアクセスできる一意のアドレスは0と1の2つ。n本ある場合、プロセッサは2のn乗の一意のアドレスにアクセスできる(p130)
- システムはコントロールバスで読み出しと書き込みの2本の信号線を使ってデータフローの方向(CPU→メモリ、メモリ→CPU)を判断している(p131)
- 多くのプロセッサでは、オブジェクトサイズの偶数倍のアドレスにあるオブジェクトにアクセスしないと例外が発生する(p138)
- データをUSB経由で伝達するとき、標準形式はリトルエンディアンになる(p140)
- 共用体内のすべてのフィールドが同じメモリ位置で重なり合っている
  - 共用体の性質を利用して、32ビットオブジェクトの個別のバイトにアクセスできるので、順番を並び替えられる

#+caption: 共用体。iフィールドに値を書き込むと、uフィールドの値と、rフィールドの2バイトも上書きすることになる
#+begin_src C
  union{
    short unsigned i;
    short unsigned u;
    long  unsigned r;
  } UNIONvar;
#+end_src

- システムクロック
  - 動作周波数
  - システムはどうやって文を正しい順序で実行しているか
- クロックエッジ
  - クロック信号がLからHに遷移する部分
- ゼロウェイトステート
  - CPUは早い。メモリは比較して遅い。したがってCPUがメモリの処理を待って処理を停止する
- CPUは複数のレベルからなるキャッシュを持っている。レベル1キャッシュはオンチップにありとても高速だが高い(p151)
- CPUがサポートするもっとも一般的なメモリアドレス指定モードは、直接モード、間接モード、そしてインデックス付きモードである(p151)

* 関連
# 関連するエントリ。なぜ関連させたか理由を書く。意味のあるつながりを意識的につくる。
# この事実は自分のこのアイデアとどう整合するか。
# この現象はあの理論でどう説明できるか。
# ふたつのアイデアは互いに矛盾するか、互いを補っているか。
# いま聞いた内容は以前に聞いたことがなかったか。
# メモ y についてメモ x はどういう意味か。
