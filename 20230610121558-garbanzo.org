:PROPERTIES:
:ID:       251a3a5b-2c98-453f-a680-4bf79b16ea22
:mtime:    20241102180349 20241028101410
:ctime:    20230610121558
:END:
#+title: garbanzo

* 概要
garbanzoは通知ビューワを自作するプロジェクト。

[[https://efcl.info/2014/0430/res3872/][Githubのタイムラインや通知を見るアプリをnode-webkitで作った | Web Scratch]]的なことをやりたい。

* Memo
** 制約
- iframe内で他ホストの絶対リンクを開けない
  - ブラウザの制約のため
- iframe内で相対リンクを開けない
  - リンクは暗黙的に、プロキシサーバがホストになる。つまりlocalhost。そうすると元のホストが消えるため、辿れない
* Tasks
** TODO 受け取れる環境変数の一覧を表示できるようにする
READMEに書いておくのだと忘れるし面倒なので、コマンドで一覧表示できるとよい。
** TODO オフラインにすると止まる
サーバごと止まる。取得できないとキャンセルしないといけない。
** TODO 2回既読リストに入る可能性がある
チェックをするか、重複を許さないようにハッシュに読み込むなどする。
** TODO サイドバーを可変にする
:LOGBOOK:
CLOCK: [2023-06-18 Sun 17:37]--[2023-06-18 Sun 18:02] =>  0:25
CLOCK: [2023-06-18 Sun 17:04]--[2023-06-18 Sun 17:29] =>  0:25
:END:
ページによって横幅でデザイン崩れが発生する。例えばdev community。
** TODO 既読エンドポイントを普通のエンドポイントにする
クライアント→サーバをwebsocketでやってるけど、別にそうでなくていい。
** TODO コピペ用にiframe内のリンクを表示する
どこにいるかわかりにくいというのもある。カンタンだけど、表示する場所がないな。
** TODO カテゴリの色を設定できるようにする
よりわかりやすくする。
** TODO デスクトップUIを作成する
:LOGBOOK:
CLOCK: [2023-06-12 Mon 23:19]--[2023-06-12 Mon 23:44] =>  0:25
CLOCK: [2023-06-10 Sat 15:13]--[2023-06-10 Sat 15:38] =>  0:25
CLOCK: [2023-06-10 Sat 14:25]--[2023-06-10 Sat 14:50] =>  0:25
CLOCK: [2023-06-10 Sat 13:32]--[2023-06-10 Sat 13:57] =>  0:25
CLOCK: [2023-06-10 Sat 12:52]--[2023-06-10 Sat 13:17] =>  0:25
CLOCK: [2023-06-10 Sat 12:18]--[2023-06-10 Sat 12:43] =>  0:25
:END:

- iframeだと制約が大きい
  - リンクが辿れない
  - ホストを変えられない

ただ、iframe制約を回避するためのプロキシによってキャッシュを保持し、高速遷移できている側面もある。

- feed遷移と、あとでリンクを辿るのを区別する必要がある。feed遷移したあとにホストがプロキシサーバにならなければいい。読み込んだあとに変えることはできそうな
- つまり、iframe制約を超えられれば可能性がある

** TODO リポジトリごとに分けて表示できるようにする
一見同じなので混ざって読みにくい。

jQueryだけだと厳しいか。

** TODO キャッシュを更新できるようにする
iframe内の更新ボタンみたいなのを作成する。キャッシュ時刻を保持してもよさそう。
** TODO iframeでGitHub以外も開きたい
:LOGBOOK:
CLOCK: [2023-06-06 Tue 23:05]--[2023-06-06 Tue 23:30] =>  0:25
CLOCK: [2023-06-06 Tue 22:38]--[2023-06-06 Tue 23:03] =>  0:25
:END:
ちょっとしたときに、不便。見てる途中で開きたいことはけっこうある。

ブラウザでやる限り厳しい可能性が高い。デスクトップアプリにするか、ブラウザを埋め込むか。
** TODO 実行チェックのCIを追加する
5分くらい立ち上げるだけのチェック。ないよりはマシか。
* Reference
* Archives
** DONE オフラインになっても止まらないようにする
CLOSED: [2023-06-10 Sat 10:32]
今はフェッチに失敗すると止まる。別にサーバに影響を与えなくていい。

timeout cancelさせればいいのか。
** CLOSE 直近にクリックした項目を色をつける
CLOSED: [2023-06-06 Tue 01:27]

どこまでたどったかわからなくなるので。削除したときに最新の画面を開くなったので、別にいらなくなった。
** DONE 開いたときのiframe内に表示するページとして、Garbanzoの静的ページを用意する
CLOSED: [2023-06-06 Tue 01:26]
:LOGBOOK:
CLOCK: [2023-06-05 Mon 23:08]--[2023-06-05 Mon 23:33] =>  0:25
CLOCK: [2023-06-05 Mon 08:19]--[2023-06-05 Mon 08:45] =>  0:26
:END:
ツールのウェルカムページとしていい感じのページにする。
** DONE 削除したとき、先頭の項目でiframeを切り替えたい
CLOSED: [2023-06-06 Tue 01:26]
:LOGBOOK:
CLOCK: [2023-06-06 Tue 00:26]--[2023-06-06 Tue 00:51] =>  0:25
CLOCK: [2023-06-06 Tue 00:01]--[2023-06-06 Tue 00:26] =>  0:25
:END:
そのままチェックボタンを押すだけで、次のやつを見たい。
** DONE 既読にできるようにする
CLOSED: [2023-06-05 Mon 08:21]
:LOGBOOK:
CLOCK: [2023-06-05 Mon 00:11]--[2023-06-05 Mon 00:36] =>  0:25
CLOCK: [2023-06-04 Sun 23:45]--[2023-06-05 Mon 00:10] =>  0:25
CLOCK: [2023-06-04 Sun 23:14]--[2023-06-04 Sun 23:39] =>  0:25
CLOCK: [2023-06-04 Sun 22:49]--[2023-06-04 Sun 23:14] =>  0:25
CLOCK: [2023-06-04 Sun 22:22]--[2023-06-04 Sun 22:47] =>  0:25
CLOCK: [2023-06-04 Sun 11:27]--[2023-06-04 Sun 11:52] =>  0:25
:END:
表示やデータからの削除と、既読リクエストをやる。

受け渡しがうまくいかない。chanに送信はできるのだが、受信できてないよう。chanを初期化してないせいだった。
** DONE 長い本文は省略する
CLOSED: [2023-06-04 Sun 02:03]
:LOGBOOK:
CLOCK: [2023-06-04 Sun 01:32]--[2023-06-04 Sun 01:57] =>  0:25
:END:
どうせサイドバーだけから見ることはない。でもmarkdownからHTMLに変換をかけてるから切り出すのは難しそうな。
本文非表示でいいか。
** DONE 通知のアイコンや文章を調整する
CLOSED: [2023-06-04 Sun 02:03]
いい感じにする。
** CLOSE issueイベントにはオープンの場合とクローズの場合がある
CLOSED: [2023-06-04 Sun 02:03]
区別はできないようだ。
** DONE DiscussionとReleaseイベントに対応する
CLOSED: [2023-06-04 Sun 01:19]
:LOGBOOK:
CLOCK: [2023-06-04 Sun 01:02]--[2023-06-04 Sun 01:19] =>  0:17
CLOCK: [2023-06-03 Sat 23:34]--[2023-06-03 Sat 23:59] =>  0:25
CLOCK: [2023-06-03 Sat 23:03]--[2023-06-03 Sat 23:28] =>  0:25
:END:
対応できてない。

discussionは、APIの不具合でURLが取れないので不可能。スルーする。
** DONE PRオープンの通知が来てない
CLOSED: [2023-06-04 Sun 02:02]
:LOGBOOK:
CLOCK: [2023-06-03 Sat 22:38]--[2023-06-03 Sat 23:03] =>  0:25
CLOCK: [2023-06-03 Sat 22:13]--[2023-06-03 Sat 22:38] =>  0:25
:END:

PRイベントをスルーしてたので直した。
** DONE デスクトップ通知
CLOSED: [2023-06-03 Sat 22:15]
:LOGBOOK:
CLOCK: [2023-06-03 Sat 21:44]--[2023-06-03 Sat 22:09] =>  0:25
CLOCK: [2023-06-03 Sat 19:44]--[2023-06-03 Sat 20:09] =>  0:25
CLOCK: [2023-06-03 Sat 19:19]--[2023-06-03 Sat 19:44] =>  0:25
CLOCK: [2023-06-03 Sat 18:54]--[2023-06-03 Sat 19:19] =>  0:25
:END:
push.jsでやればよいというが。

簡単にできた。ただ初回実行で通知が多すぎるので無視したい。

- 通知したいかどうかはクライアントによって変わる。最新のリロードしたてのクライアントでは通知は出ないが、開きっぱなしにしていたクライアントでは出る
- 初回読み込みからそれ以後に受信された場合は通知したい
- 初回リロード時は通知しない
- 最初にサーバを立ち上げたときは、徐々に追加していくので、初回リロードのロジックだけでは不足する
- 単純に更新が3分以内だったら、とかでもよさそうな
** DONE 上から新しい順に並ばせる
CLOSED: [2023-06-03 Sat 18:54]
:LOGBOOK:
CLOCK: [2023-06-03 Sat 18:19]--[2023-06-03 Sat 18:44] =>  0:25
CLOCK: [2023-06-03 Sat 17:47]--[2023-06-03 Sat 18:12] =>  0:25
CLOCK: [2023-06-03 Sat 17:13]--[2023-06-03 Sat 17:38] =>  0:25
:END:
今はmapから取り出してランダムで見にくい。

map型のroom.eventsで一覧を持っている。これはかぶりを防ぐためmap型にしている。eventsから、各クライアントのdoneにないものをwebsocketに書き込む。
** DONE commentとissue openの処理を共通化する
CLOSED: [2023-06-03 Sat 15:41]
:LOGBOOK:
CLOCK: [2023-06-03 Sat 15:36]--[2023-06-03 Sat 15:41] =>  0:05
CLOCK: [2023-06-03 Sat 15:10]--[2023-06-03 Sat 15:35] =>  0:25
:END:
できるところが多くある。
** DONE eventにタイプフィールドを追加する
CLOSED: [2023-06-03 Sat 12:03]
パッと見でわかりやすい。
:LOGBOOK:
CLOCK: [2023-06-03 Sat 11:11]--[2023-06-03 Sat 11:36] =>  0:25
:END:

タイプというか、タグ的な使い方か。
** DONE 競合する
CLOSED: [2023-06-03 Sat 11:01]
:LOGBOOK:
CLOCK: [2023-06-03 Sat 10:44]--[2023-06-03 Sat 11:01] =>  0:17
CLOCK: [2023-06-03 Sat 10:18]--[2023-06-03 Sat 10:43] =>  0:25
CLOCK: [2023-06-03 Sat 09:53]--[2023-06-03 Sat 10:18] =>  0:25
:END:
まだpanicすることがある。
** DONE クライアントが増えると競合する
CLOSED: [2023-06-03 Sat 02:21]
消えたクライアントは消す。

コネクションの切断をサーバ側で見て、終了させる。切断とはつまり、websocketへの書き込みが失敗したとき。そのときハンドラのコネクションキープの無限ループを終了させ、deferで削除チャンネルに追加する、という処理。
** DONE 無限ループで通知取得する
CLOSED: [2023-06-03 Sat 02:19]
:LOGBOOK:
CLOCK: [2023-06-03 Sat 01:32]--[2023-06-03 Sat 01:57] =>  0:25
CLOCK: [2023-06-03 Sat 00:09]--[2023-06-03 Sat 00:34] =>  0:25
CLOCK: [2023-06-02 Fri 23:13]--[2023-06-02 Fri 23:38] =>  0:25
CLOCK: [2023-06-02 Fri 22:40]--[2023-06-02 Fri 23:05] =>  0:25
:END:
リアルタイムに通知を取得できるようにする。今は起動時にやってるだけ。

やるためには、無駄にリクエストしないロジックが必要になる。ストアに存在していれば、リクエストしないというような。
** DONE 無限ループでキャッシュ取得する
CLOSED: [2023-06-03 Sat 02:19]
通知取得と同様に。
** DONE 通知が少ないことがある
CLOSED: [2023-06-02 Fri 22:30]
:LOGBOOK:
CLOCK: [2023-06-02 Fri 21:35]--[2023-06-02 Fri 22:00] =>  0:25
CLOCK: [2023-06-02 Fri 21:10]--[2023-06-02 Fri 21:35] =>  0:25
CLOCK: [2023-06-02 Fri 20:45]--[2023-06-02 Fri 21:10] =>  0:25
CLOCK: [2023-06-02 Fri 20:17]--[2023-06-02 Fri 20:42] =>  0:25
:END:

競合かと思いきや、dereference失敗だ。タイトルか本文を持たないことがあるのか。
ループのどこかでreturnしているように見える。

~crypto/internal/bigmod: switch to saturated limbs~ のissueが来ると止まる。

コミットに対するコメントだと止まるのか。
** DONE 現在のURLを表示する
CLOSED: [2023-06-01 Thu 23:48]
:LOGBOOK:
CLOCK: [2023-06-01 Thu 23:31]--[2023-06-01 Thu 23:48] =>  0:17
:END:
遷移する方法もほしい。

iframeの中のURLを別タブで開けるようにする。

ボタンをリンクすればよさそう。
** DONE favicon追加する
CLOSED: [2023-06-02 Fri 01:14]
blob書き込みとしてできた。ファイルだろうとほかの、HTMLなどと同じように扱えるのに感動。
** DONE テキストをマークダウン化する
CLOSED: [2023-06-01 Thu 23:22]
:LOGBOOK:
CLOCK: [2023-06-01 Thu 23:04]--[2023-06-01 Thu 23:22] =>  0:18
:END:

ライブラリで簡単にできた。
** DONE 通知が多い場合の対応
CLOSED: [2023-06-01 Thu 22:57]
:LOGBOOK:
CLOCK: [2023-05-30 Tue 23:21]--[2023-05-30 Tue 23:46] =>  0:25
:END:
たくさんリクエストしてしまう。インメモリも無尽蔵に増えてしまう。

1リクエストで50のよう。まあいい。

- 50個を最大にして、なくなったら取得が走るようにする
  - 削除ロジックはどうするか。現状、重複を避けるためにマップにしているが、順番がないのでやりにくい

すでにあるリソースにリクエストを絶対飛ばないことがわかれば、とりあえず全部保存すればよさそう。
** DONE 通知にdiscussionがあるときにバグる
CLOSED: [2023-06-01 Thu 22:58]
subjectのURLがないよう。

スルーする処理を追加した。
** DONE 時刻表示
CLOSED: [2023-06-01 Thu 22:55]
GitHubから取ってきた時刻を入れる。
** DONE リポジトリを制限しない
CLOSED: [2023-06-01 Thu 22:32]
:LOGBOOK:
CLOCK: [2023-06-01 Thu 22:26]--[2023-06-01 Thu 22:32] =>  0:06
CLOCK: [2023-06-01 Thu 22:01]--[2023-06-01 Thu 22:26] =>  0:25
CLOCK: [2023-06-01 Thu 21:26]--[2023-06-01 Thu 21:51] =>  0:25
:END:
今はテストのため固定になっている。リポジトリ関わらず取得するようにする。ただ数がとんでもないことになりそうなので、あらかじめ数対応をしておきたい。
** DONE イメージを用意する
CLOSED: [2023-06-01 Thu 21:25]

軽量イメージを使っていい感じになった。
** DONE 初回起動時に配信されない
CLOSED: [2023-06-01 Thu 20:42]
:LOGBOOK:
CLOCK: [2023-06-01 Thu 00:59]--[2023-06-01 Thu 01:24] =>  0:25
CLOCK: [2023-06-01 Thu 00:34]--[2023-06-01 Thu 00:59] =>  0:25
:END:
起動直後に読み込むと、ウェブソケットの内容を受け取れない。clientにjoinはしているのだが、送信されてないようだ。

eventsを用意できてないと、forwardイベントが作成されないため、実行されない。起動後に無限ループ実行できれば解決する。

今のコードだと、forwardとroom.eventsを同期させようとすると全部追加で送ってしまうので、スタックしてしまう。重複もとんでもないことになる。クライアントごとに、どれが未送なのか判定できないといけない。

クライアント側にすでに送信したnotificationIDのmapを持たせておくことにした。
** DONE CPU使用率が高い
CLOSED: [2023-06-01 Thu 20:42]
:LOGBOOK:
CLOCK: [2023-06-01 Thu 20:28]--[2023-06-01 Thu 20:42] =>  0:14
CLOCK: [2023-06-01 Thu 20:03]--[2023-06-01 Thu 20:28] =>  0:25
CLOCK: [2023-06-01 Thu 19:36]--[2023-06-01 Thu 20:01] =>  0:25
:END:
送信しまくってるからな。
** DONE latest comment URL を event から消す
使ってないな。
CLOSED: [2023-05-30 Tue 23:19]
** DONE サイドバーの固定
CLOSED: [2023-05-30 Tue 22:52]
通知がたくさんあるとページが下に伸びる。
** DONE コメント種別によってエラーになる
CLOSED: [2023-05-30 Tue 22:52]
まだ特定してない。

issueが開かれたときの通知だな。
** DONE event内にリポジトリ情報を入れる
CLOSED: [2023-05-30 Tue 20:39]
リポジトリ名を入れる。
** DONE プロキシを図に描く
CLOSED: [2023-06-11 Sun 14:06]
頭がこんがらがるので整理する。
** DONE ステータスを表示するページ
CLOSED: [2023-06-12 Mon 01:09]
:PROPERTIES:
:Effort:   5:00
:END:
:LOGBOOK:
CLOCK: [2023-06-11 Sun 23:23]--[2023-06-11 Sun 23:48] =>  0:25
CLOCK: [2023-06-11 Sun 22:58]--[2023-06-11 Sun 23:23] =>  0:25
CLOCK: [2023-06-11 Sun 22:33]--[2023-06-11 Sun 22:58] =>  0:25
CLOCK: [2023-06-11 Sun 22:07]--[2023-06-11 Sun 22:32] =>  0:25
CLOCK: [2023-06-11 Sun 21:42]--[2023-06-11 Sun 22:07] =>  0:25
CLOCK: [2023-06-11 Sun 21:16]--[2023-06-11 Sun 21:41] =>  0:25
CLOCK: [2023-06-11 Sun 20:51]--[2023-06-11 Sun 21:16] =>  0:25
CLOCK: [2023-06-11 Sun 20:21]--[2023-06-11 Sun 20:46] =>  0:25
CLOCK: [2023-06-11 Sun 19:19]--[2023-06-11 Sun 19:44] =>  0:25
CLOCK: [2023-06-11 Sun 18:48]--[2023-06-11 Sun 19:13] =>  0:25
CLOCK: [2023-06-11 Sun 18:17]--[2023-06-11 Sun 18:42] =>  0:25
CLOCK: [2023-06-11 Sun 17:28]--[2023-06-11 Sun 17:53] =>  0:25
CLOCK: [2023-06-11 Sun 17:01]--[2023-06-11 Sun 17:26] =>  0:25
CLOCK: [2023-06-11 Sun 16:09]--[2023-06-11 Sun 16:34] =>  0:25
CLOCK: [2023-06-11 Sun 15:43]--[2023-06-11 Sun 16:08] =>  0:25
CLOCK: [2023-06-11 Sun 15:08]--[2023-06-11 Sun 15:33] =>  0:25
CLOCK: [2023-06-11 Sun 14:41]--[2023-06-11 Sun 15:06] =>  0:25
:END:
どこまでフェッチが終わったかを示す。

今はwebsocketでeventしか送ってないが、別の情報を送るのはどうするか。

- 送信すると止まるな。受信元が用意できてないとか。
  - 同じゴルーチン上で送信と受信してるから、capが1以上でないとブロックして止まるようになっていた
- 今はsendにあるごとに、jsonにwriteしてる。すでにある場合は無視してる。
- イベントを送るときと、統計を送るときは明らかに、タイミングと送るjsonが異なる
  - 今はjsonが同じなのが問題だ。event用しか送れない
  - websocketごと分けるとコードの重複が増えるのと、接続を管理する手間が増える
- case文にdefaultがないと、ループして先に進まない
- 2回読み込みできなくなった
** DONE プロキシをGitHub以外に対応する
CLOSED: [2023-06-15 Thu 00:27]
:LOGBOOK:
CLOCK: [2023-06-11 Sun 14:07]--[2023-06-11 Sun 14:32] =>  0:25
:END:

ホストが何でもできるようにする。できたが、相変わらずその画面から別のリンクを開くことはできない。

** DONE たまに何も出なくなる
CLOSED: [2023-06-15 Thu 00:26]
- 統計の数字がすべて0になる
- エラーとかは出てない

ロック関係か。途中でなることもある。その場合は既読が増えない。メインのselect文が止まるってことか。既読ボタンを連打するとなるぽい。時間のかかるリクエストを非同期にした。
** DONE RSSを既読記録できるようにする
CLOSED: [2023-06-18 Sun 10:23]
:PROPERTIES:
:Effort:   3:00
:END:
:LOGBOOK:
CLOCK: [2023-06-18 Sun 09:57]--[2023-06-18 Sun 10:22] =>  0:25
CLOCK: [2023-06-18 Sun 09:32]--[2023-06-18 Sun 09:57] =>  0:25
CLOCK: [2023-06-17 Sat 20:40]--[2023-06-17 Sat 21:05] =>  0:25
CLOCK: [2023-06-17 Sat 20:04]--[2023-06-17 Sat 20:29] =>  0:25
CLOCK: [2023-06-17 Sat 17:55]--[2023-06-17 Sat 18:20] =>  0:25
CLOCK: [2023-06-17 Sat 17:30]--[2023-06-17 Sat 17:55] =>  0:25
CLOCK: [2023-06-17 Sat 16:22]--[2023-06-17 Sat 16:47] =>  0:25
CLOCK: [2023-06-17 Sat 13:40]--[2023-06-17 Sat 14:05] =>  0:25
CLOCK: [2023-06-17 Sat 13:12]--[2023-06-17 Sat 13:37] =>  0:25
CLOCK: [2023-06-17 Sat 12:15]--[2023-06-17 Sat 12:40] =>  0:25
CLOCK: [2023-06-17 Sat 11:49]--[2023-06-17 Sat 12:15] =>  0:26
CLOCK: [2023-06-17 Sat 11:12]--[2023-06-17 Sat 11:37] =>  0:25
CLOCK: [2023-06-17 Sat 10:31]--[2023-06-17 Sat 10:56] =>  0:25
CLOCK: [2023-06-17 Sat 09:46]--[2023-06-17 Sat 10:11] =>  0:25
CLOCK: [2023-06-17 Sat 09:21]--[2023-06-17 Sat 09:46] =>  0:25
:END:

既読の場合は非表示にしたい。

- 既読をどうやって記録するか
  - CSVファイルに保存する
  - 既読したときにリンクを書き込む
  - 読み込むときにリンクリストを見て、ないときにeventに追加する
- 設定ディレクトリを生成する(.garbanzo)
- ファイルを生成する(history)
- 読み込まないパターン
  - ファイルにあるとき
  - メモリにあるとき
** DONE RSS対応する
CLOSED: [2023-06-18 Sun 10:04]
:LOGBOOK:
CLOCK: [2023-06-14 Wed 23:10]--[2023-06-14 Wed 23:35] =>  0:25
CLOCK: [2023-06-14 Wed 22:43]--[2023-06-14 Wed 23:08] =>  0:25
CLOCK: [2023-06-14 Wed 21:53]--[2023-06-14 Wed 22:18] =>  0:25
CLOCK: [2023-06-14 Wed 21:17]--[2023-06-14 Wed 21:43] =>  0:26
CLOCK: [2023-06-14 Wed 20:40]--[2023-06-14 Wed 21:05] =>  0:25
CLOCK: [2023-06-14 Wed 20:15]--[2023-06-14 Wed 20:40] =>  0:25
CLOCK: [2023-06-11 Sun 13:41]--[2023-06-11 Sun 14:06] =>  0:25
:END:

いちおう表示はできるようになった。
** DONE フィードURLを設定ファイルから取り込むようにする
CLOSED: [2023-06-18 Sun 10:04]
先に既読対応しないと、取りまくってしまう。
** DONE フィード設定ファイルがない場合の対応
CLOSED: [2023-06-18 Sun 11:47]
:LOGBOOK:
CLOCK: [2023-06-18 Sun 11:22]--[2023-06-18 Sun 11:47] =>  0:25
:END:
ファイルがない場合は作成する。起動したときに、いくつかのファイルについて作成を走らせる。
** DONE フィード表示を整える
CLOSED: [2023-06-18 Sun 11:21]
:LOGBOOK:
CLOCK: [2023-06-18 Sun 10:51]--[2023-06-18 Sun 11:16] =>  0:25
CLOCK: [2023-06-18 Sun 10:23]--[2023-06-18 Sun 10:49] =>  0:26
:END:
- アイコン
- リンク
- 作成日時

などを入れる。
** DONE 統計表示を表にする
CLOSED: [2023-06-18 Sun 18:40]
:LOGBOOK:
CLOCK: [2023-06-18 Sun 18:02]--[2023-06-18 Sun 18:27] =>  0:25
:END:
もうちょっときれいに表示する。
** DONE RSSのdescriptionにHTMLタグが入っているので消す
CLOSED: [2023-06-18 Sun 18:40]
文字を切り取るので、HTMLタグにしてるとうまくいかない。
** DONE 設定ファイルのテンプレートを用意する
CLOSED: [2023-06-20 Tue 01:14]
空白のファイルができるだけでわかりづらい。
** DONE フィードのドキュメントを作成する
CLOSED: [2023-06-20 Tue 01:14]
:PROPERTIES:
:Effort:   3:00
:END:
:LOGBOOK:
CLOCK: [2023-06-20 Tue 00:17]--[2023-06-20 Tue 00:42] =>  0:25
CLOCK: [2023-06-19 Mon 23:45]--[2023-06-20 Tue 00:10] =>  0:25
CLOCK: [2023-06-19 Mon 23:19]--[2023-06-19 Mon 23:44] =>  0:25
CLOCK: [2023-06-19 Mon 22:47]--[2023-06-19 Mon 23:12] =>  0:25
CLOCK: [2023-06-19 Mon 22:10]--[2023-06-19 Mon 22:35] =>  0:25
:END:
書く。

- 設定ymlのエントリの例を作成する
- 今の設定をトップページに表示する
- ないときは自動作成する
** DONE ymlのタイトルを何かに使う
CLOSED: [2023-06-20 Tue 01:15]
あるいは設定ファイルからタイトルを消す。今はイベントと分離して使えない。できればカテゴリにしたいが…。

フィードリストの説明を表示するために、増やした。タイトルではなくdescriptionとした。
** DONE RSSの取得情報をいい感じにする
CLOSED: [2023-06-20 Tue 01:16]
アイコンがブランクになることが多い。どうにかできないか。

とりあえず一括でRSSアイコンにした。
** CLOSE 起動直後にリロードするとクライアントの分だけfetchが走るような
CLOSED: [2023-06-20 Tue 01:16]
ログを仕込んだときに2つ出てくるときがある。
** CLOSE トークンをトップページから入れられるようにする
CLOSED: [2023-07-01 Sat 02:32]
別にファイルを直にいじってできればいいので、スルー。

入れて、設定ファイルに保存して次回以降使う。iframe内でやると、POSTできない可能性がある。
** DONE トークンを設定ファイルから読み込めるようにする
CLOSED: [2023-07-01 Sat 02:32]
:LOGBOOK:
CLOCK: [2023-07-01 Sat 01:48]--[2023-07-01 Sat 02:13] =>  0:25
CLOCK: [2023-07-01 Sat 01:12]--[2023-07-01 Sat 01:37] =>  0:25
CLOCK: [2023-07-01 Sat 00:47]--[2023-07-01 Sat 01:12] =>  0:25
CLOCK: [2023-07-01 Sat 00:16]--[2023-07-01 Sat 00:41] =>  0:25
CLOCK: [2023-06-30 Fri 23:50]--[2023-07-01 Sat 00:15] =>  0:25
CLOCK: [2023-06-30 Fri 23:25]--[2023-06-30 Fri 23:50] =>  0:25
CLOCK: [2023-06-30 Fri 23:00]--[2023-06-30 Fri 23:25] =>  0:25
CLOCK: [2023-06-30 Fri 22:25]--[2023-06-30 Fri 22:50] =>  0:25
CLOCK: [2023-06-30 Fri 21:35]--[2023-06-30 Fri 22:00] =>  0:25
CLOCK: [2023-06-30 Fri 00:05]--[2023-06-30 Fri 00:30] =>  0:25
CLOCK: [2023-06-29 Thu 23:40]--[2023-06-30 Fri 00:05] =>  0:25
CLOCK: [2023-06-29 Thu 23:15]--[2023-06-29 Thu 23:40] =>  0:25
:END:
環境変数では面倒だ。
** DONE 構造体まわりのリファクタ
CLOSED: [2023-07-01 Sat 11:23]
:PROPERTIES:
:Effort:   2:00
:END:
:LOGBOOK:
CLOCK: [2023-07-01 Sat 10:53]--[2023-07-01 Sat 11:18] =>  0:25
CLOCK: [2023-07-01 Sat 10:28]--[2023-07-01 Sat 10:53] =>  0:25
CLOCK: [2023-07-01 Sat 10:03]--[2023-07-01 Sat 10:28] =>  0:25
CLOCK: [2023-07-01 Sat 09:38]--[2023-07-01 Sat 10:03] =>  0:25
CLOCK: [2023-07-01 Sat 09:00]--[2023-07-01 Sat 09:25] =>  0:25
CLOCK: [2023-07-01 Sat 08:35]--[2023-07-01 Sat 09:00] =>  0:25
CLOCK: [2023-07-01 Sat 08:09]--[2023-07-01 Sat 08:34] =>  0:25
:END:

- 場所がわかりづらい
- 関数がでかい
- 設定がまとまってない
** DONE テンプレートに構造体を渡す
CLOSED: [2023-07-01 Sat 14:54]
:PROPERTIES:
:Effort:   2:00
:END:
:LOGBOOK:
CLOCK: [2023-07-01 Sat 12:39]--[2023-07-01 Sat 13:04] =>  0:25
CLOCK: [2023-07-01 Sat 11:23]--[2023-07-01 Sat 11:48] =>  0:25
:END:
** DONE 定数化する
CLOSED: [2023-07-01 Sat 14:54]
:LOGBOOK:
CLOCK: [2023-06-20 Tue 22:58]--[2023-06-20 Tue 23:23] =>  0:25
:END:
リファクタ。
** DONE トークンがないとき実行すると止まる
CLOSED: [2023-07-01 Sat 22:06]
:LOGBOOK:
CLOCK: [2023-07-01 Sat 21:32]--[2023-07-01 Sat 21:57] =>  0:25
CLOCK: [2023-07-01 Sat 20:57]--[2023-07-01 Sat 21:22] =>  0:25
:END:
いつのまにか。

トークンがないときか。
** DONE brew installに対応する
CLOSED: [2023-07-02 Sun 01:26]
:LOGBOOK:
CLOCK: [2023-07-02 Sun 00:11]--[2023-07-02 Sun 00:36] =>  0:25
CLOCK: [2023-07-01 Sat 23:00]--[2023-07-01 Sat 23:25] =>  0:25
CLOCK: [2023-07-01 Sat 22:35]--[2023-07-01 Sat 23:00] =>  0:25
CLOCK: [2023-07-01 Sat 22:07]--[2023-07-01 Sat 22:32] =>  0:25
:END:
気軽にMacでもインストールできるようにする。

- Go installはGoが入っているか限らない
- dockerは使い方に慣れてない可能性がある

動作確認するのが面倒だな。
