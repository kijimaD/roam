:PROPERTIES:
:ID:       375ccc99-c86e-4d3e-9367-550286dccba4
:END:
#+title: Make
* 概要
[[id:5c26b8e3-7dcb-47c4-833b-4fd2e7e8bfda][GNU]] Makeは歴史のあるビルド用ソフトウェア。依存関係を明示し、ビルドを自動化するのに使う。
* Memo
** 偽のターゲットと前提条件
- [[https://voyagegroup.github.io/make-advent-calendar-2020/002-phony-target-and-prerequisites][偽のターゲットと前提条件 | Makefile Advent Calendar 2020]]

#+caption: installファイルを生成する例
#+begin_src makefile
  install:
        echo "hello" > install
#+end_src

はinstallファイルを生成する。2回目はコマンドが実行されない。makeはターゲットと同名のファイルやディレクトリがあると、既に成果物の生成が済んでいて再実行が不要と判断してコマンドを実行しない( ~up to date~ になる)。

「成果物の生成に関わらないターゲット」を書くためにはPHONYを用いて、偽のターゲットにする。

#+caption: PHONYを用いる
#+begin_src makefile
  .PHONY: install

  install:
        echo "hello" > install
#+end_src

必要条件。

#+caption: 必要条件で対象ファイル名を設定する
#+begin_src makefile
  main.o: main.c
	gcc -o main.o main.c
#+end_src

main.cが存在すると ~up to date~ になる。タイムスタンプが更新されると再実行する。

** Go開発でのよさげな例
.PHONYをタスクごとに書くと忘れにくい。

- https://github.com/Songmu/make2help/blob/7d76187a6c490467f3e0ca879ae6eb1c1ec0d30b/Makefile
* Tasks
* Reference
** [[https://postd.cc/auto-documented-makefile/][Makefileを自己文書化する | POSTD]]
タスクの説明をコマンドで表示する方法。
* Archives
