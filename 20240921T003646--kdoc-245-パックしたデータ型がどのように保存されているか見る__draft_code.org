:properties:
:ID: 20240921T003646
:end:
#+title:      KDOC 245: パックしたデータ型がどのように保存されているか見る
#+date:       [2024-09-21 Sat 00:36]
#+filetags:   :draft:code:
#+identifier: 20240921T003646

# (denote-rename-file-using-front-matter (buffer-file-name) 0)
# (save-excursion (while (re-search-backward ":draft" nil t) (replace-match "")))
# (flush-lines "^\\#\s.+?")

# ====ポリシー。
# 1ファイル1アイデア。
# 1ファイルで内容を完結させる。
# 常にほかのエントリとリンクする。
# 自分の言葉を使う。
# 参考文献を残しておく。
# 文献メモの場合は、感想と混ぜないこと。1つのアイデアに反する
# ツェッテルカステンの議論に寄与するか
# 頭のなかやツェッテルカステンにある問いとどのようにかかわっているか
# エントリ間の接続を発見したら、接続エントリを追加する。カード間にあるリンクの関係を説明するカード。
# アイデアがまとまったらアウトラインエントリを作成する。リンクをまとめたエントリ。
# エントリを削除しない。古いカードのどこが悪いかを説明する新しいカードへのリンクを追加する。
# 恐れずにカードを追加する。無意味の可能性があっても追加しておくことが重要。

# ====永久保存メモのルール。
# 自分の言葉で書く。
# 後から読み返して理解できる。
# 他のメモと関連付ける。
# ひとつのメモにひとつのことだけを書く。
# メモの内容は1枚で完結させる。
# 論文の中に組み込み、公表できるレベルである。

# ====価値があるか。
# その情報がどういった文脈で使えるか。
# どの程度重要な情報か。
# そのページのどこが本当に必要な部分なのか。

* この文書のステータス
- 作成
  - [X] 2024-09-21 貴島
- レビュー
  - [ ] <署名>
# (progn (kill-line -1) (insert (format "  - [X] %s 貴島" (format-time-string "%Y-%m-%d"))))

# 関連をつけた。
# タイトルがフォーマット通りにつけられている。
# 内容をブラウザに表示して読んだ(作成とレビューのチェックは同時にしない)。
# 文脈なく読めるのを確認した。
# おばあちゃんに説明できる。
# いらない見出しを削除した。
# タグを適切にした。
# すべてのコメントを削除した。
* 概要
# 本文(タイトルをつける)。

[[id:656a0aa4-e5d3-416f-82d5-f909558d0639][C言語]]では、構造体のフィールドにビットフィールドを指定することで、ビット単位の最小サイズを指定しメモリ領域を節約できる。

#+caption: 通常20バイトになる構造体が、詰めて4バイトになる
#+begin_src C
  struct normal {
    unsigned bits0_3;
    unsigned bits4_11;
    unsigned bits12_15;
    unsigned bits16_23;
    unsigned bits24_31;
  };

  // コンパイラが割り当てる最小ビット数を指定する
  struct packed {
    unsigned bits0_3 :4;
    unsigned bits4_11 :8;
    unsigned bits12_15 :4;
    unsigned bits16_23 :8;
    unsigned bits24_31 :8;
  };

  struct normal nor = {1, 2, 3, 4, 5};
  struct packed pac = {1, 2, 3, 4, 5};

  printf("nor: %zu byte\n",sizeof(nor));
  printf("pac: %zu byte\n",sizeof(pac));
#+end_src

#+RESULTS:
#+begin_src
nor: 20 byte
pac: 4 byte
#+end_src

アセンブリでどのように保存されているか見る。

#+begin_export html
<iframe width="800px" height="400px" src="https://godbolt.org/e#z:OYLghAFBqd5QCxAYwPYBMCmBRdBLAF1QCcAaPECAMzwBtMA7AQwFtMQByARg9KtQYEAysib0QXACx8BBAKoBnTAAUAHpwAMvAFYTStJg1AB9U8lJL6yAngGVG6AMKpaAVxYMJANlIOAMngMmABy7gBGmMQSABykAA6oCoS2DM5uHt7xickCAUGhLBFRXLGWmNYpQgRMxARp7p5cPmUVAlU1BHkh4ZExFtW19RlN/R1dBUUxAJQWqK7EyOwcgQQA1CxMgRBTqwCkAOwAQrsaAIKrqwoExK7WqwwkG7R7RyfnF6uuDEnAQeirYUICg0xgAzLtQcczh9Pt88L9MP9AQQFJJjFwuBCoe8Ll8fn8AUCuAAmdEAVixbxhePhBORCiaxmJ4MhVI%2BNIRSKBxLRoMxrOhLwAIpSzmyrjc7nEmMgANaIl7Y6lwzmElEg0GrECSUU42H4hX0tEYrXRXXKg1clEk8lanUCvUculErxMzUgM0Oi20w3c3lcU3m4W68XXW5rB7EJ6rJh7UFCxVcUirYnJ0HJ6SrCn7EVey5hqUy%2BVIuMJg6HJMptMZ5PZ3PYg5CjgzWicMm8TzcXioTiOS5zBaYPbMnikAiaZszWUgMkafScSQdiekHscXgKEBz8ccLQzOCwJBoFhxOiRciUI8n%2BhRZDIAxGLj7DRJmi0AiRDcQMLLwHMYgAT04Udfxqf8AHkwm0cpt1HI82EEMCGFoQCd14LAwlcYBHDEWgNy7UgsA2IxxFQgi8GIaC8AAN0wPCtF8VRylcd8gN4FZMFbfDaDwMJiFA5wsGXa48BYZcaOIMJEkwIVMCI4BuKMCcZioAxgAUAA1PBMAAdzAuJGFYmRBBEMR2CkIz5CUNRl10JN7xMMx9B4jdIBmVA4hsAQ8O7cTiDwLAXO2CwOMouwIAcIZGl8Bh0HGHpiiyJJPNSFwGj0BIkpSOLCl6JMWmS9pBlS4ZgqsAqBk6QJuhyhKrg6SK9Dq2pssmLgZgUAdFgkFs2yXUjV1WVRoi8ABaLxJFWO9DGAVZHwAOg0OaAwgXBCBIYc%2BSmXht13KcZznTjF1ITt6NXddNzHJSeo4Yk%2BtOzhtqu0hxKSOxJCAA%3D%3D"></iframe>
#+end_export

#+caption: データ部分
#+begin_src asm
;; a: 通常
.L__const.main.a:
  .long 1
  .long 2
  .long 3
  .long 4
  .long 5

;; b: ビットフィールド指定
.L__const.main.b:
  .byte 33
  .byte 48
  .byte 4
  .byte 5
#+end_src

通常の構造体では、すべてlong型で、 ~1, 2, 3, 4, 5~ と格納されているのがわかる。これは、直感に合っている。4バイト(long)にそれぞれ数値がそのまま入っていて、それが5フィールドあるので、合計20バイトを使っているというわけだ。

いっぽう、ビットフィールドを指定すると ~33, 48, 4, 5~ と奇妙な数値が並んでいる。これは何だろうか。

データセクションのサイズは1バイトが4つで4バイトであり、これは先ほど調べた構造体のサイズと一致している。問題はこの値がどこからきたのか、ということだ。5フィールド分のエントリがないので、明らかに1バイトに複数のフィールドの値が詰められている。

このようにして変換できる(処理系に依る)。

#+caption: 初期化した値から、保存されているバイト列に変換する方法
#+begin_src
- ↓ 構造体のサイズに基づいて値を配置する{1, 2, 3, 4, 5}
- 0d1     0d2    0d3     0d4       0d5
- |--| |-------| |--| |-------| |-------|
- 0001 0000 0010 0011 0000 0100 0000 0101

- 入れ替え1 構造体の区切りで、上位下位を入れ替える
- |--| |-------| |--| |-------| |-------|
- 0001 0010 0000 0011 0100 0000 0101 0000

- 入れ替え2 1バイトごとで、上位下位を入れ替える
- |-------| |-------| |-------| |-------|
- 0010 0001 0011 0000 0000 0100 0000 0101
- |-0d33--| |-0d48--| |-0d4---| |-0d5---|
#+end_src

このように、ビットフィールドを指定した型を使うことでメモリの使用効率が高まるが、たとえば大小比較がそのままできなくなり元に戻すオーバーヘッドかかるなど計算で不利になるトレードオフがある。

* 関連
- [[id:20240617T152502][KDOC 192: 『Write Great Code Vol.1』]]。の解説を確かめた
# 関連するエントリ。なぜ関連させたか理由を書く。意味のあるつながりを意識的につくる。
# この事実は自分のこのアイデアとどう整合するか。
# この現象はあの理論でどう説明できるか。
# ふたつのアイデアは互いに矛盾するか、互いを補っているか。
# いま聞いた内容は以前に聞いたことがなかったか。
# メモ y についてメモ x はどういう意味か。
