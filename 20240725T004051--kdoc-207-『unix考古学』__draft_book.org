:properties:
:ID: 20240725T004051
:end:
#+title:      KDOC 207: 『Unix考古学』
#+date:       [2024-07-25 Thu 00:40]
#+filetags:   :draft:book:
#+identifier: 20240725T004051

# (denote-rename-file-using-front-matter (buffer-file-name) 0)
# (save-excursion (while (re-search-backward ":draft" nil t) (replace-match "")))
# (flush-lines "^\\#\s.+?")

# ====ポリシー。
# 1ファイル1アイデア。
# 1ファイルで内容を完結させる。
# 常にほかのエントリとリンクする。
# 自分の言葉を使う。
# 参考文献を残しておく。
# 文献メモの場合は、感想と混ぜないこと。1つのアイデアに反する
# ツェッテルカステンの議論に寄与するか
# 頭のなかやツェッテルカステンにある問いとどのようにかかわっているか
# エントリ間の接続を発見したら、接続エントリを追加する。カード間にあるリンクの関係を説明するカード。
# アイデアがまとまったらアウトラインエントリを作成する。リンクをまとめたエントリ。
# エントリを削除しない。古いカードのどこが悪いかを説明する新しいカードへのリンクを追加する。
# 恐れずにカードを追加する。無意味の可能性があっても追加しておくことが重要。

# ====永久保存メモのルール。
# 自分の言葉で書く。
# 後から読み返して理解できる。
# 他のメモと関連付ける。
# ひとつのメモにひとつのことだけを書く。
# メモの内容は1枚で完結させる。
# 論文の中に組み込み、公表できるレベルである。

# ====価値があるか。
# その情報がどういった文脈で使えるか。
# どの程度重要な情報か。
# そのページのどこが本当に必要な部分なのか。

* この文書のステータス
:LOGBOOK:
CLOCK: [2024-07-31 Wed 22:32]
CLOCK: [2024-07-31 Wed 08:13]--[2024-07-31 Wed 08:38] =>  0:25
CLOCK: [2024-07-31 Wed 00:17]--[2024-07-31 Wed 00:42] =>  0:25
CLOCK: [2024-07-29 Mon 23:38]--[2024-07-30 Tue 00:03] =>  0:25
CLOCK: [2024-07-29 Mon 21:35]--[2024-07-29 Mon 22:00] =>  0:25
CLOCK: [2024-07-29 Mon 20:22]--[2024-07-29 Mon 20:47] =>  0:25
CLOCK: [2024-07-29 Mon 19:39]--[2024-07-29 Mon 20:04] =>  0:25
CLOCK: [2024-07-28 Sun 23:18]--[2024-07-28 Sun 23:43] =>  0:25
CLOCK: [2024-07-28 Sun 21:08]--[2024-07-28 Sun 21:33] =>  0:25
CLOCK: [2024-07-28 Sun 20:21]--[2024-07-28 Sun 20:46] =>  0:25
CLOCK: [2024-07-28 Sun 18:40]--[2024-07-28 Sun 19:05] =>  0:25
CLOCK: [2024-07-28 Sun 18:07]--[2024-07-28 Sun 18:32] =>  0:25
CLOCK: [2024-07-28 Sun 17:03]--[2024-07-28 Sun 17:28] =>  0:25
CLOCK: [2024-07-28 Sun 13:34]--[2024-07-28 Sun 13:59] =>  0:25
CLOCK: [2024-07-27 Sat 23:19]--[2024-07-27 Sat 23:44] =>  0:25
:END:
- 作成
  - [X] 2024-07-31 貴島
- レビュー
  - [ ] <署名>
# (progn (kill-line -1) (insert (format "  - [X] %s 貴島" (format-time-string "%Y-%m-%d"))))

# 関連をつけた。
# タイトルがフォーマット通りにつけられている。
# 内容をブラウザに表示して読んだ(作成とレビューのチェックは同時にしない)。
# 文脈なく読めるのを確認した。
# おばあちゃんに説明できる。
# いらない見出しを削除した。
# タグを適切にした。
# すべてのコメントを削除した。
* 概要
# 本文(タイトルをつける)。
[[https://www.amazon.co.jp/Unix%E8%80%83%E5%8F%A4%E5%AD%A6-Truth-Legend-%E8%97%A4%E7%94%B0-%E6%98%AD%E4%BA%BA/dp/4048930508][Unix考古学 Truth of the Legend]]はUnix開発の歴史についての本。
* メモ
- Multicsプロジェクトが終わり、予算もつかなくなった。プロジェクトは高価なマシンを調達できなくなった。そのような状況で、当時まだ若手のデニス・リッチーとケン・トンプソンは手近なPDP-7でゲームを移植した。PDP-7は周辺機器として購入されていたので、CPU時間は無料だった。ゲーム移植の一連の作業でPDP-7のプログラミングに慣れてきたため、ファイルシステムをPDP-7上に実装し始めた。この時点ではまだ、プライベートプロジェクトであった
- Ken ThompsonとDennis Ritchie の功績は非常に有名だが、はじまりは悲惨なものだった。 Multics Projectという「失敗プロジェクト」に加担していたからである(p49)
- 活躍の初期において本業にツイていなかったKen Thompsonだが、Space Travelに関しては誰も使っていなかった「PDP-7」を見つけられたのは幸運だった(p53)
- Ken ThompsonはPDP-7上にFORTRANを実装することを宣言した。しかし結局はFORTRANと全く別の言語になり、「B」と呼ばれる言語になった。旧来との主たる違いは表記法で、C言語と通ずるものがある。しかし機能的に目立ったものはなかったようだ。少なくともこの時点で、Ken Thompsonはプログラミング言語を設計すること自体にはそれほど興味がなかったようだ(p61)
- PDP-7 Unixの実装には明確な目標があったわけではなく、まともなコンピュータを手に入れるまでの代替処置的な手段として開発されたと推測できる(p64)
- Unixのパスワードファイルに「GECOSフィールド」という項目がある。これは、かつてのUnixマシンからGECOSマシンにプリンタ出力やバッチ処理要求を送信する際、ユーザ識別のために付加された情報に由来している(p66)
- Joe Ossannaの提案した「文書処理システム」は、実に都合のよい玉虫色の研究テーマであった。マシンの調達と、OSに関する研究の言い訳ができるようになった(p76)
- Ken Thompsonは学生時代にQEDに正規表現の機能を実装しており、さらに実装に使用した正規表現を機械語にコンパイルするアルゴリズムについて論文を書き、特許も取得していた(p83)
- Unixの "Small is Beautiful"な哲学は、Multicsの開発に対する反省から生まれた(p97)
- yaccはB言語のコンパイラのために作られた(p106)
- 初期のC言語の開発での最大の目標は、「UnixカーネルをC言語で書き直すこと」であった。つまりカーネルを記述するために必要な機能が、すべてサポートされていることがゴールであった(p116)
- UnixもC言語も初期は一人で担当できるくらい十分に小さかった
- OSとしてのポータビリティのなさがTENEXを36ビットアーキテクチャに埋没させ、はどウェアの死滅の道連れにさせたと考えられる(p146)
- 1973年のThird Edition Unixは、OSとしては「ちょっと目立つニューカマー」でしかなかった(p146)
- AT&Tのサポートする気のなさは、結果的に協力なUnixユーザコミュニティを形成させる直接的な原因となった。いずれのユーザも「手元にあるのはソースコードだけ」という状態だったので、当初はそこから学び取った情報をユーザ同士で共有するという自己防衛的な発送でユーザの相互扶助が成立していた(p152)
- PCCの開発者であるSteve Johnsonは周囲の期待に応えてコンパイラにかかわる作業を長年続けていた。後に彼は「個人的にそれほど関心のあるテーマではなかった」という(p173)
- PCCの機能改善を行うために前段の構文パーサーが開発された。その過程で、Cプログラムの構文チェッカー"lint"が生まれた。当時はコマンドの名前に4文字しか使用できなかった(p175)
- 「カーネルも単なるプログラムの1つである」という考え方こそが、Unixがポータビリティを獲得したブレークスルーであった。カーネルをここまで簡単に取り扱えるように設計されたOSは、Unix以前には皆無だった(p176)
- ポータビリティのためのカーネル修正作業における成果の1つが、現代のC言語ユーザには当たり前とされている「システムコールの戻り値の一貫性」である(p177)
- 1970年代は16進数表記が一般的でなかった。1980年代になると16進数に慣れ親しむ人が増えていった(p179)
- 32ビットへの対応はUnixが「ミニコンのOS」から「汎用OS」へと進化したことを意味した(p180)
- Seventh Edition Unixのリリースは、1980年代に起こるUnixブームの準備を整えた。いっぽうで「Unixの青春時代の終わり」を告げるものでもあった。Seventh Editionがリリースされたころ、AT&TはUnixを製品化し、コンピュータビジネスに参入することを表明した。そして、Seventh Edition Unix以降のUnixライセンスにはAT&TのUnixビジネスの妨げにならないように多くの制約が加えられるようになった(p181)
- データベースシステムOracleの最初のバージョンはPDP-11上でアセンブラを使って書かれた(p194)
- 代表的なUnixコマンドが出揃ったのは、Seventh Edition Unix以降のことである(p197)
- [[id:ec870135-b092-4635-8f8e-74a5411bb779][RFC]]はIMPを介してARPANETサイト間で共有されたメモランダムが始まりである(p277)
- コンピュータサイエンスの分野でも、それまで先駆的研究の守護者として存在していたARPAが消滅することにより、民間活力による自律的・継続的な技術革新が促されることになる(p282)
- UCBの4BSDはARPANETの研究開発そのもののためではなく、研究成果であるTCP/IPのプロモーションのために開発された(p293)
- 新しいttyドライバのおかげで、BSD Unixにはビデオターミナルを前提とした高機能のターミナルインターフェースが実現された。Seventh Edition Unixのttyドライバは1文字削除時にエコーバックが出ないなどあまり優しくないインターフェースだった。ttyドライバによって、現在使われるようなCUIと同じような挙動をするようになった(p310)
- セカンドシステム症候群 :: 『人月の神話』で紹介されている事例。人間が設計する2番目のシステムは一般に作り込みすぎてしまう傾向があるため、最も危険なシステムになってしまう、という(p388)
- 「いったいPCとは何をするための道具なのか」といった哲学的な問題を考えると、答えられる人は少ない。PCというキーワードがなかったらどう説明するか。これは1970年代末、マイクロプロセッサに関わる多くの人々共通の悩みであった。マイクロプロセッサの可能性や将来性について、彼らは直感的によく理解できていた。しかしそれを理解できない人に説明するのは難題であった。パーソナルコンピュータというコンセプトが当時は存在しなかった(p396)
- Unixの配布元のAT&Tは望んでソースコードの配布を行ったわけではない。当時AT&Tはアメリカ国内の電信電話市場を事実上独占する公益事業を営む企業で、別の業界への参入を禁止されていた(p420)
- Microsoftは1979年にUnixライセンスを取得し、自社の製品(XENIX)として拡張して販売していた(p431)
- Richard Stallmanは、生活費を稼ぐために年に数ヶ月だけ行方不明になることがあった(p469)

* 関連
- [[https://ja.wikipedia.org/wiki/Text_Editor_and_Corrector][Text Editor and Corrector - Wikipedia]]
- [[https://www.issoh.co.jp/column/details/2684/#:~:text=%E3%82%BB%E3%82%AB%E3%83%B3%E3%83%89%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E7%97%87%E5%80%99%E7%BE%A4%E3%81%AF%E3%80%81%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0,%E3%81%93%E3%81%A8%E3%81%8C%E5%A4%9A%E3%81%84%E3%81%AE%E3%81%A7%E3%81%99%E3%80%82][セカンドシステム症候群とは何か？その原因と解決方法 | 株式会社一創]]
- [[https://ja.wikipedia.org/wiki/XENIX][XENIX - Wikipedia]]

# 関連するエントリ。なぜ関連させたか理由を書く。意味のあるつながりを意識的につくる。
# この事実は自分のこのアイデアとどう整合するか。
# この現象はあの理論でどう説明できるか。
# ふたつのアイデアは互いに矛盾するか、互いを補っているか。
# いま聞いた内容は以前に聞いたことがなかったか。
# メモ y についてメモ x はどういう意味か。
