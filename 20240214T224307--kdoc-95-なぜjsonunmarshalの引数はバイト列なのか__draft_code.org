:properties:
:ID: 20240214T224307
:end:
#+title:      KDOC 95: なぜjson.Unmarshalの引数はバイト列なのか
#+date:       [2024-02-14 Wed 22:43]
#+filetags:   :draft:code:
#+identifier: 20240214T224307

# (denote-rename-file-using-front-matter (buffer-file-name) 0)
# (org-roam-tag-remove)
# (org-roam-tag-add)

# ====ポリシー。
# 1ファイル1アイデア。
# 1ファイルで内容を完結させる。
# 常にほかのエントリとリンクする。
# 自分の言葉を使う。
# 参考文献を残しておく。
# 自分の考えを加える。
# 構造を気にしない。
# エントリ間の接続を発見したら、接続エントリを追加する。カード間にあるリンクの関係を説明するカード。
# アイデアがまとまったらアウトラインエントリを作成する。リンクをまとめたエントリ。
# エントリを削除しない。古いカードのどこが悪いかを説明する新しいカードへのリンクを追加する。
# 恐れずにカードを追加する。無意味の可能性があっても追加しておくことが重要。

* この文書のステータス
:LOGBOOK:
CLOCK: [2024-02-15 Thu 23:55]--[2024-02-16 Fri 00:20] =>  0:25
CLOCK: [2024-02-15 Thu 23:02]--[2024-02-15 Thu 23:27] =>  0:25
:END:
- 作成
  - [X] 2024-02-16 貴島
- レビュー
  - [ ] 2024-mm-dd <署名> (progn (kill-line 0) (insert (format "  - [X] %s 貴島" (format-time-string "%Y-%m-%d"))))
# 関連をつけた。
# タイトルがフォーマット通りにつけられている。
# 内容をブラウザに表示して読んだ(作成とレビューのチェックは同時にしない)。
# 文脈なく読めるのを確認した。
# おばあちゃんに説明できる。
# いらない見出しを削除した。
# タグを適切にした。(org-roam-tag-remove)。
# すべてのコメントを削除した。
* 概要
[[id:7cacbaa3-3995-41cf-8b72-58d6e07468b1][Go]]でJSONをデシリアライズするときに使う関数のシグネチャはこうだ。

#+caption: JSONを構造体に格納したりする関数
#+begin_src go
func Unmarshal(data []byte, v any) error {}
#+end_src

引数は[]byteで、バイトスライスだ。どうして文字列ではないのか、違いは何かを考えた。が、なぜそうなったのかは見つけられず、自分の持っている知識ではよくわからなかった。

* 違い

stringと[]byteの違いは何か。本質的にはどちらもバイト列だ。文字列はイミュータブルで、バイトスライスはミュータブルという点は違う。したがってデータが変わるときはバイトスライスのほうがコストを低くできる。文字列だとメモリをアローケーションして作り直すしかないから。文字列だと特定のケースで遅くなる可能性があるから、バイトスライスにしている、などどうだろう。

コンピュータ内部やネットワーク間ではバイト列で処理してるだろうから、[]byteのほうが低レイヤで汎用的ではある。Goは書く量がやや増えるのを許容して汎用性を求める、ようなデザインをしているように見えるので自然に見える。が、確たる根拠はないし、ほかにstringを取る関数もたくさんある理由はわからない。

* Footnotes
[fn:1] 文字エンコードまわりの理解があやふやなので、この表現は正確さに欠けている可能性が高い。
