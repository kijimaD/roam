:PROPERTIES:
:ID:       c7052a0d-0714-409a-86a7-4d4770240ada
:END:
#+title: Web API
* 概要
幅広いAPIという概念のなかで、とくにWebのこと、Web APIについてまとめる。
[[id:e04aa1a3-509c-45b2-ac64-53d69c961214][Rails]]などWEBアプリケーションを開発する場合、必ず使う。
* Memo
** CORSの簡単な仕組み
異なるドメインからのAPI呼び出しを制御して安全にする仕組み。なのでバックエンド、フロントエンドが別ドメインになっているときに考慮しないといけない。

フロントエンド側にバックエンド呼び出しが書かれているとき、バックエンド側で許可ドメインのヘッダーを入れてレスポンスを返して一致しないと、許可されない。通信する前にバックエンドに対してプリフライトリクエストを行って、許可されているかチェックする。

- FE -(FEのドメインを入れたプリフライトリクエスト)> BE -(BEの許可ドメインを入れたプリフライトレスポンス)>
  - BEの許可ドメインにFEドメインが含まれる場合、本題リクエスト。 FE -(本題リクエスト)> BE -(レスポンス)> FE

という感じ。
** バックエンドにクッキーの情報を渡す
認証をセッションによって行っているとする。ありがちな流れ↓だとする。

1. ログイン成功時にセッションキーを発行し、DB・クライアントブラウザのCookieに保存する
2. ログインが必要なページでは毎回、Cookieの値とDBの値が合致するかチェックしてログインしているか判定する

バックエンドとフロントエンドが同じ場合、クライアントは常にブラウザのためCookieをチェックできる。が、異なる場合は、クライアントはバックエンドへ直接アクセスしないために、バックエンドからクライアントCookieにアクセスできない。結果、常にセッションキーが一致しないのでログイン行為そのものは成功するが、再度ログイン画面に戻される挙動となる。

- クライアント →(○ Cookie)→ FE →(✗ Cookie)→ BE

解決策は、クッキーが渡されるようにすればよい。
FE → BE間のリクエストヘッダーに、クッキーをそのままつけるようにする。

#+caption: フロント側からのリクエストに設定する。CORSの設定も別で必要
#+begin_src
Access-Control-Allow-Credentials: true
#+end_src

あるいはプロキシを使ってFE → BEをFE → FEに見せかけることでも可能。

** クエリパラメータを使うとき
[[https://qiita.com/mserizawa/items/b833e407d89abd21ee72][翻訳: WebAPI 設計のベストプラクティス - Qiita]]

フィルタ・ソート・検索はクエリパラメータを使う。ベースとなるURLはできるだけシンプルにリソースを示したものにする。機能はクエリパラメータで指定する。
** URLとURIの違い
[[https://qiita.com/NagaokaKenichi/items/6298eb8960570c7ad2e9][RESTful APIのURI設計(エンドポイント設計) - Qiita]]

- URI
  - URL -- 位置を示す -> アドレス
  - URN -- 名前を示す

URLの方がより制限された用法。
** Swagger
SwaggerはAPIドキュメントツールである。ymlやjsonを記述して、ブラウザで閲覧できる。
[[id:e04aa1a3-509c-45b2-ac64-53d69c961214][Rails]]でのラッパーライブラリはrswagで、自然に扱うことができる。

- リポジトリ
  [[https://github.com/rswag/rswag][rswag/rswag: Seamlessly adds a Swagger to Rails-based API's]]
- コードの例
  [[https://github.com/ruslantolstov/rswag-example][ruslantolstov/rswag-example: Demo how to use rswag-api, rswag-specs.]]
- 記法例
  [[https://techblog.zozo.com/entry/swagger_yaml][開発効率を上げる！Swaggerの記法まとめ - ZOZO TECH BLOG]]

まとまっているサイト。[[https://qiita.com/disc99/items/37228f5d687ad2969aa2][SwaggerでRESTful APIの管理を楽にする - Qiita]]

* Tasks
* Reference
** [[https://qiita.com/Shokorep/items/b7697a146cbb1c3e9f0b][[RESTful API]パスパラメータ、クエリパラメータ、リクエストボディの違いと設計 - Qiita]]
- パスパラメータ
- クエリパラメータ
- リクエストボディ

の使い分け。
** [[https://developer.mozilla.org/ja/docs/Web/HTTP/CORS][オリジン間リソース共有 (CORS) - HTTP | MDN]]
CORSのドキュメント。
** [[https://qiita.com/att55/items/2154a8aad8bf1409db2b][なんとなく CORS がわかる...はもう終わりにする。 - Qiita]]
ドメイン間でのポリシー。
** [[https://railsguides.jp/routing.html][Rails のルーティング - Railsガイド]]
ルーティングの公式ドキュメント。
** [[https://d4192.hatenablog.com/entry/2019/04/10/190800][Railsルーティングのあれこれ(routes.rb) - プログラミングのメモ帳]]
** [[https://techracho.bpsinc.jp/baba/2020_11_20/15619][Railsのルーティングを極める (後編)｜TechRacho by BPS株式会社]]
** [[https://qiita.com/mserizawa/items/b833e407d89abd21ee72][翻訳: WebAPI 設計のベストプラクティス - Qiita]]
** [[https://qiita.com/ryo88c/items/0a3c7861015861026e00][「WebAPI 設計のベストプラクティス」に対する所感 - Qiita]]
** [[https://www.programmableweb.com/apis][APIs Dashboard | ProgrammableWeb]]
パブリックAPI集。設計の例としても使える。
* Archives
** DONE [[https://www.amazon.co.jp/Web-API-Parts-%E6%B0%B4%E9%87%8E-%E8%B2%B4%E6%98%8E/dp/4873116864/ref=sr_1_2?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&crid=176CX1TFR474&keywords=web+api&qid=1640733660&sprefix=web%2Caps%2C1017&sr=8-2][Web API: The Good Parts | 水野 貴明 |本 | 通販 | Amazon]]
CLOSED: [2022-07-13 Wed 10:25]
:LOGBOOK:
CLOCK: [2022-07-13 Wed 10:03]--[2022-07-13 Wed 10:25] =>  0:22
CLOCK: [2022-07-12 Tue 22:37]--[2022-07-12 Tue 23:02] =>  0:25
CLOCK: [2022-07-12 Tue 00:01]--[2022-07-12 Tue 00:26] =>  0:25
CLOCK: [2022-07-11 Mon 10:14]--[2022-07-11 Mon 10:39] =>  0:25
CLOCK: [2022-07-10 Sun 22:42]--[2022-07-10 Sun 23:07] =>  0:25
CLOCK: [2022-07-10 Sun 22:16]--[2022-07-10 Sun 22:41] =>  0:25
CLOCK: [2022-07-10 Sun 17:39]--[2022-07-10 Sun 18:04] =>  0:25
CLOCK: [2022-07-10 Sun 11:12]--[2022-07-10 Sun 11:37] =>  0:25
CLOCK: [2022-07-10 Sun 08:59]--[2022-07-10 Sun 09:24] =>  0:25
CLOCK: [2022-07-09 Sat 21:44]--[2022-07-09 Sat 22:09] =>  0:25
CLOCK: [2022-07-09 Sat 21:08]--[2022-07-09 Sat 21:33] =>  0:25
CLOCK: [2022-07-09 Sat 20:34]--[2022-07-09 Sat 20:59] =>  0:25
CLOCK: [2022-07-09 Sat 11:22]--[2022-07-09 Sat 11:47] =>  0:25
:END:

- 90

- URIとメソッドの関係は、操作するもの(リソース)と操作方法(何をするか)の関係であるといえる。
- だから名詞と動詞
- webページの通常のリンクはGETを使ってアクセスするものとみなされる。formを使うとpostとgetを選択できる。

HTTPのメソッドはHTTPリクエストヘッダの先頭行の最初に以下のようにつけられて、サーバに送信される。
#+begin_src
GET /v1/users/123 HTTP/1.1
Host: api.example.com
#+end_src

POSTメソッドは指定したURIに属する新しいリソースを送信する、新しい情報を登録するのが本来の目的。

- POSTは指定したURIの配下にデータを登録する。
- PUTはリソースがすでにあって、それを更新する。
- PUTは完全に上書きし、PATCHは一部を上書きする。
- 他のサイトを参考にしながら単語を決める
- APIがバックエンドのテーブル構造を反映する必要はない
- すべてのAPIが同じデータ構造を返すために実際のデータをくるむための構造をエンベロープという。ステータスはHTTPヘッダにやらせればよいことで、冗長な表現となる。
- JSON構造はなるべくフラットにすべきだけど階層化したほうが絶対によい場合は階層化もあり
- 多くのAPIで同じ意味に利用されている一般的な単語を用いる
- なるべく少ない単語数で表現する
- 複数の単語を連結する場合、その連結方法はAPI全体を通して統一する
- 変な省略形は極力利用しない
- 単数形/複数形に気をつける
- 性別をどうするか
  - 文字列保持のケースが多い
  - 生物学的な性別が必要な場合はsex
  - そうでない場合…社会的・文化的な性別の場合はgender
- エラーの形式を統一し、クライアント側でエラー詳細を機械的に理解可能にする
- 認証と認可の違い。
  - 認証(Authentication)とは、「アクセスしてきたのが誰であるのかを識別すること」
  - 認可(Authorization)とは、「特定のユーザに対してある操作の権限を許可すること」
- XSSは別のサイトでjavascriptを走らせることで情報を盗んだり不正な操作をさせること。対策はサニタイズして、外部のjavascriptを評価しないこと
- CSRF(XSRF)はpostなどのHTTPメソッドで別のサイトからURLアクセスさせること。対策はトークン、変更を加える操作はGET以外でやらないこと
- クライアントを信用せず、値を必ず検証する
