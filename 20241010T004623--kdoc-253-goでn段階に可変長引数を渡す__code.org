:properties:
:ID: 20241010T004623
:end:
#+title:      KDOC 253: GoでN段階に可変長引数を渡す
#+date:       [2024-10-10 Thu 00:46]
#+filetags:   :code:
#+identifier: 20241010T004623

* この文書のステータス
- 作成
  - [X] 2024-10-10 貴島
- レビュー
  - [X] 2024-10-28 貴島

* 概要

[[id:7cacbaa3-3995-41cf-8b72-58d6e07468b1][Go]]の可変長引数は、関数定義側では左側に ~...~ をつけて示す(~...args~)。関数内ではスライスとして使える。

また、関数呼び出し側ではスライスの右側に ~...~ をつけてスライスの要素を可変長引数として渡せる(~slice...~)。

#+caption: 等しい2つの例。呼び出し側にはスライスで渡すか、通常の複数の引数で渡すかの選択肢がある
#+begin_src go
  package main

  import "fmt"

  // func Print(a ...any) (n int, err error) {}

  func main() {
          fmt.Print("a", "b", "c")
          fmt.Println() // 改行
          fmt.Print([]any{"a", "b", "c"}...)
  }
#+end_src

#+RESULTS:
#+begin_src
abc
abc
#+end_src

多くのユースケースをサポートする、オプショナルな項目の多いタイプのプログラムでは、この構文を多用するものがある[fn:1]。特定のオプショナルな項目の組み合わせを関数化して、さらにその関数にオプショナルな項目をつける、というようなことだ。そういう場合は直感的でなく、少し目を慣らさないといけない。コードで見てみる。

#+caption: 等しい2つの例
#+begin_src go
  package main

  import "fmt"

  func main() {
          run1("a", "b", "c")
          fmt.Println() // 改行
          run2("c")
  }

  func run1(opts ...string) {
          for _, str := range opts {
                  fmt.Print(str)
          }
  }

  func run2(opts ...string) {
          run1(append([]string{"a", "b"}, opts...)...)
  }
#+end_src

#+RESULTS:
#+begin_src
abc
abc
#+end_src

~run1()~ では "a", "b", "c" がオプショナルだが、 ~run2()~ では "c" だけがオプショナルになっている。 ~run2()~ では "b", "c" は自動で渡される。利用者は長大なオプショナル引数を渡すことなく、プリセットの機能をすぐ利用できる。いっぽうで、細かく引数を指定して自分のケースに合わせたい利用者の要望も満たせている。

1つずつ見る。

1. ~opts~ -> スライス
2. ~...opts~ -> スライスを展開してappendの可変長引数となる
   - ~append~ のシグネチャ ~func append(slice []Type, elems ...Type) []Type~
3. ~append([]string{"a", "b"}, opts...)~ -> これは合体したスライスとなる
   - つまり ~[]string{"a", "b", "c"}~ となる
4. ~append([]string{"a", "b"}, opts...)...~ -> スライスを展開してrun1の可変長引数となる
   - つまり ~run1("a", "b", "c")~ というように呼び出す

* 関連

- [[id:20231128T074518][KDOC 59: ECSを使ってサンプルゲームを作る]]。コードを読む中でよく見かけたため、書いておくことにした

* Footnotes
[fn:1]例えば[[https://github.com/ebitenui/ebitenui][ebitenui/ebitenui]]。
