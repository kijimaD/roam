:properties:
:ID: 20240206T225919
:mtime:    20241103084928
:ctime:    20241028101410
:end:
#+title:      KDOC 74: The input device is not a TTYを理解する
#+date:       [2024-02-06 Tue 22:59]
#+filetags:   :wiki:
#+identifier: 20240206T225919

* この文書のステータス
:LOGBOOK:
CLOCK: [2024-02-07 Wed 23:47]--[2024-02-08 Thu 00:12] =>  0:25
CLOCK: [2024-02-07 Wed 22:53]--[2024-02-07 Wed 23:18] =>  0:25
:END:
- 作成
  - [X] 2024-02-07 貴島
- レビュー
  - [X] 2024-02-08 貴島
* 概要
[[id:2d35ac9e-554a-4142-bba7-3c614cbfe4c4][GitHub Actions]]でdocker runするとき、-iオプションをつけると"The input device is not a TTY"というエラーになる。これはなにか、書く。

~-i~ はインタラクティブオプション。標準入力を開いたままにして、コンテナ内のプロセスがユーザからの入力を受け取れるようにする。
* 調べる
まず[[id:2d35ac9e-554a-4142-bba7-3c614cbfe4c4][GitHub Actions]]上で試す。ttyではないことを確かめる。

#+caption: ttyではないというエラーを返す
#+begin_src shell
  tty
  # => not a tty
#+end_src

ttyではないということは、標準入出力となっているデバイスがないということだ。デバイスがないのにどうやって表示しているのかというと、標準出力経由だ。ttyと標準出力は異なる。

ブラウザのコンソール画面に見えている画面は入力を受け付けてない。プロンプトは出てない。考えてみると、インタラクティブさは必要ないので自然である。入力を受け付けられないのでinput device is not a TTYと出る。

手元のDockerで近そうな状況にして試す。ttyはなく、インタラクティブでもない。

#+caption: GitHub Actions上での実行結果と同じにする
#+begin_src shell
  docker run --rm ubuntu tty
#+end_src

#+RESULTS:
#+begin_src
not a tty
#+end_src

したがって[[id:2d35ac9e-554a-4142-bba7-3c614cbfe4c4][GitHub Actions]]上では、ワークフローファイルのコマンドを↓このような感じで実行しているのではないか。

#+caption: 予想
#+begin_src shell
  docker run --rm ubuntu echo {ここでわれわれのコードを実行している感じか?}
#+end_src

#+RESULTS:
#+begin_src
{ここでわれわれのコードを実行している感じか?}
#+end_src

なので、標準出力が見えているだけ。

* 関連
- [[https://ohbarye.hatenablog.jp/entry/2019/05/05/learn-tty-with-docker][docker run -it で学ぶ tty とか標準入出力とかファイルディスクリプタとか - valid,invalid]]。[[id:1658782a-d331-464b-9fd7-1f8233b8b7f8][Docker]]で検証するのが参考になる
