:PROPERTIES:
:ID:       1ad8c3d5-97ba-4905-be11-e6f2626127ad
:END:
#+title: Emacs
* 概要
Emacsは非常に優れた拡張性を特徴とするテキストエディタ。
エディタに内蔵された言語[[id:c7e81fac-9f8b-4538-9851-21d4ff3c2b08][Emacs Lisp]]で柔軟に設定を変更できる。

できること。
- 情報集積([[id:7e85e3f3-a6b9-447e-9826-307a3618dac8][org-mode]], [[id:815a2c31-7ddb-40ad-bae0-f84e1cfd8de1][Org-roam]])
- タスク管理([[id:7e85e3f3-a6b9-447e-9826-307a3618dac8][org-mode]])
- [[id:90c6b715-9324-46ce-a354-63d09403b066][Git]]([[id:5ba43a42-93cb-48fa-8578-0558c757493f][magit]]) + [[id:6b889822-21f1-4a3e-9755-e3ca52fa0bc4][GitHub]]([[id:4a80d381-2620-40dc-8588-cda910c3d785][magit-forge]])
- コマンド実行と結果出力([[id:7e85e3f3-a6b9-447e-9826-307a3618dac8][org-mode]])
- ウィンドウマネージャ([[id:eb196529-bdbd-48c5-9d5b-a156fe5c2f41][EXWM]])
- 静的サイトジェネレータ([[id:7e85e3f3-a6b9-447e-9826-307a3618dac8][org-mode]])
- ブラウザ(eww)
- インターネットラジオプレーヤ(eradio)
- フィードリーダー(elfeed.el)
- ファイラ
- 表計算
- テスト実行(rspec-mode)
- ターミナル実行(vterm)
- [[id:1658782a-d331-464b-9fd7-1f8233b8b7f8][Docker]]管理(docker-mode)
- リマインダー(org-alert)
- PDF閲覧(pdf-tools)

の機能を、共通の効率的なキーボード操作、プレーンテキストベースで行える。
* Memo
** diredでzip展開
dired-modeで Z ... ~dired-do-compress~ で展開か圧縮できる。
** 矩形選択する
~rectangle-mark-mode~ -- C-x SPC
で矩形選択できる。

back-button-modeのキーバインドが衝突してたのでback-button-modeの方を無効化。

#+caption: 無効化
#+begin_src emacs-lisp
(define-key back-button-mode-map (kbd "C-x SPC") nil)
#+end_src
** pdf-tools
pdf-toolsはEmacs内でPDFを閲覧できるパッケージ。
インストールしても、しばらくすると利用不可になってることがあるのでinstallしなおす。
インストールするとdiredから選択するとpdf-toolsが使われる。

#+caption: インストールする
#+begin_src emacs-lisp
(pdf-tools-install)
#+end_src
** ivy-occurで一括置換する
occurの特徴はeでedit-modeに入れる点。一覧にして複数ファイルをそのまま置換できる。

プロジェクトのファイルにすべてに対してoccurしたいとき。
~counsel-git-grep~ して絞り込んだものに対して ~(ivy-occur)~ = ~C-c C-o~ でoccurできる。

edit-modeに入るには。
~(ivy-wgrep-change-to-wgrep-mode)~ = ~C-x C-q~
occurでの変更をコミットするには。
~C-x C-s~ 。覚えにくい。
** 絵文字挿入
~C-x 8 return~
** elisp-refs
[[https://github.com/Wilfred/elisp-refs][Wilfred/elisp-refs: semantic code search for emacs lisp]]
関数や変数の参照を見つけるパッケージ。
じっさいに使われている例を探し出すことができる。

#+caption: popで検索してみた例
#+begin_src emacs-lisp
File: /gnu/store/lnwgc4ww47vkq2wv2ay3rdm0ppnmgyfy-emacs-27.2/share/emacs/27.2/lisp/format.el.gz
(setq prop (pop props))

File: /gnu/store/lnwgc4ww47vkq2wv2ay3rdm0ppnmgyfy-emacs-27.2/share/emacs/27.2/lisp/window.el.gz
(let ((window (pop window-state-put-stale-windows)))
#+end_src
** make-command-summary
キーバインドの一覧を出力するコマンド。
面白い。
** Emacsconf 2021
*** Emacs News Highlights Sacha Chua
1年のニュース。
Emacs本体, magit, roamのメジャーバージョンアップ。
*** The True Frownies are the Friends We Made Along the Way: An Anecdote of Emacs's Malleability Case Duckworth
frown-modeの開発。
*** Emacs manuals translation and OmegaT Jean-Christophe Helary
翻訳をツールを使って早く進める。
*** GNU's Not UNIX: Why Emacs Demonstrates The UNIX Philosophy Isn't Always The Only Answer Daniel Rose
UNIX哲学の概要、異なる点。
*** Emacs and Montessori Philosophy Grant Shangreaux
Emacsとモンテッソーリ教育。
ドキュメント化されたコード。
*** Emacs as Design Pattern Learning Greta Goetz
Emacsのデザインパターン。

- エコシステム
- 拡張性
- ユーザ
- 学ぶ方法
- コミュニティ
*** How Emacs made me appreciate software freedom Protesilaos Stavrou
プログラマーでなかったがパッケージ開発をするようになった人。
Emacsのドキュメント文化。
たとえばinfoはREADMEというより本。
そういった文書は非常に参考になる。
初心者でもドキュメントにコミットの余地がある。

org, magitなどのキラーアプリを使いたくても、まずEmacsを使えるようになる必要がある。

Emacsはユーザと開発者の境界が曖昧である。
ほかのソフトウェアは、分かれている。
*** NonGNU ELPA Update Philip Kaludercic
よいパッケージは本体に組み込む。
NonGNU ELPAはFSFのサインをする必要がない。
*** Manual Package Management in The Era of Repositories - Why and How Dhavan (codingquark)
最初のインストールから説明。
git-submoduleでのパッケージ管理。
パッケージをクローンして、ビルドする。
*** Introducing N-Angulator Kevin Haddock
UNIXファイルシステムはN次元の配列の集合体である。
だからそれをうまく扱えればファイラになる。

プレゼンの画面がとてつもなく古い。
SXEmacsだ。
*** telega.el and the Emacs community on Telegram Gabriele Bozzola
メッセージサービスTelegramのラッパー。
拡張性が高い。
*** Typesetting Gregorian Chant with Emacs Spencer King
楽譜を書くソフトのラッパー。
Emacsで書いて、PDFに変換できる。
*** A day in the life of a janitor Stefan Monnier
Emacsのメンテナーのコンパイル。
レキシカルバインディングとか、依存関係とか。
なんだかよくわからない。
*** Emacs Research Group, Season Zero: What we did together with Emacs in 2 hours a week for a year Noorah Alhasan, Joe Corneli, Raymond Puzio, Leo Vivier
*** One effective CS grad student workflow Greg Coladonato
*** Using Org-Mode For Recording Continuous Professional Development Philip Beadling
*** Creating technical API documentation and presentations using org-babel, restclient, and org-treeslide Jan Ypma
*** Org as an executable format Tom Gillespie
*** The use of Org mode syntax outside of GNU/Emacs Karl Voit
org-modeの特徴をいくつかの段階に分ける。
最も基礎的な部分をOrgdown1とする。
*** Using Org-mode to teach programming Daniel German
*** Managing a research workflow (bibliographies, note-taking, and arXiv) Ahmed Khaled
*** Babel for academics Asilata Bapat
*** Reproducible molecular graphics with Org-mode Blaine Mooers
*** Budgeting, Project Monitoring and Invoicing with Org Mode Adolfo Villafiorita
*** Finding Your (In)voice: Emacs for Invoicing Bala Ramadurai
*** Productivity Dashboards with Emacs and Kindle Mehmet Tekman
*** Emacs with Nyxt: extend your editor with the power of a Lisp browser Andrea
*** Emacs development updates John Wiegley
*** On the design of text editors Nicolas P. Rougier
*** Closing remarks day 1
*** Opening remarks day 2
*** Optimizing Emacs Lisp Code Dmitry Gutov
[[id:c7e81fac-9f8b-4538-9851-21d4ff3c2b08][Emacs Lisp]]の高速化。
オーバーレイがたくさんあるので、foldしまくってると表示が重い。

最初に計測して、原因を探ることから。
autocompleteの作者でもあるTomohiro Matsuyamaの作ったプロファイルライブラリがある。
ほかにもいろんなベンチマークがある。
*** Tree-edit: Structural editing for Java, Python, C, and beyond Ethan Leba
DSLで展開して編集するパッケージの開発者。
大学生。すごいなあ。
*** Yak-shaving to a UI framework Erik Anderson
React API。
Emacs上でコンポーネントの操作をできるようにするパッケージ。
すごすぎ。
テーマとかフォントはクソ古い感じで、ギャップに笑う。
*** Moldable Emacs, a step towards sustainable software Andrea
[[id:c7e81fac-9f8b-4538-9851-21d4ff3c2b08][Emacs Lisp]]のクエリで図を生成する。
*** Extending the "model" of Emacs to other applications Laszlo Krajnikovszkij
*** Emacs Lisp native compiler, current status and future developments Andrea Corallo
*** Old McCarthy Had a Form
*** Turbo Bindat
*** Test blocks
*** Perso-Arabic Input Methods And Making More Emacs Apps BIDI Aware
*** Emacs Application Framework: A 2021 Update
*** Imaginary Programming
*** CLEDE: the Common Lisp Emacs Development Environment
*** How to help Emacs maintainers
*** How to build an Emacs
*** M-x Forever: Why Emacs will outlast text editor trends
*** Closing remarks day 2
** 複数行に空白挿入
複数行一気に空白を挿入してインデントを整えるとき。
~C-x C-i~ で挿入モードにあるのであとは方向キーで微調整できる。
** 文字コード変更
改行コードなどで問題が生じたとき。^Mが表示されるとか。
~C-x RET f utf-8-unix~
で文字コードを変更して保存する。
** カウントダウンタイマー
カップ麺の3分を測りたい、みたいなとき。
~(org-timer-set-timer)~
** company-documentation
Company is input complement package.
Read document on complementation list.
~Ctrl + Shift + h~
** vtermのbash_profileを設定する
#+caption: .bash_profile
#+begin_src shell
if [[ "$INSIDE_EMACS" = 'vterm' ]] \
    && [[ -n ${EMACS_VTERM_PATH} ]] \
    && [[ -f ${EMACS_VTERM_PATH}/etc/emacs-vterm-bash.sh ]]; then
    source ${EMACS_VTERM_PATH}/etc/emacs-vterm-bash.sh
fi
#+end_src
[[https://naokton.hatenablog.com/entry/2020/12/08/150130][vterm-modeを使う - technokton]]
** パッケージのソースコードメモ
- org-lint
  - https://github.com/kijimaD/emacs/blob/master/lisp/org/org-lint.el#L124
- interactive
  - https://github.com/kijimaD/emacs/blob/master/src/callint.c#L37
- defun
  - https://github.com/kijimaD/emacs/blob/master/lisp/emacs-lisp/byte-run.el#L280
  - https://github.com/kijimaD/emacs/blob/master/lisp/emacs-lisp/cl-macs.el#L339
** projectile-toggle-between-implementation-and-test (~C-c p t~)
テストとプロダクトコードを切り替える。
** (magit-topic)
一覧でPRとIssueにアクセスできると行き来がしやすそう。
Forgeのトピック間移動がhelmでできたらいいのにな。
** [[id:7dab097c-60ba-43b9-949f-c58bf3151aa8][MySQL]]と接続して[[id:8b69b8d4-1612-4dc5-8412-96b431fdd101][SQL]]を直に実行する
#+begin_src
M-x customize-variable RET sql-connection-alist RET ...
M-x sql-connect
open buffer...
M-x sql-mode
M-x sql-set-sqli-buffer RET
sql-send-buffer (C-c C-b)
sqlup-capitalize-keywords-in-region (C-c u)
#+end_src
** Macでの置換
- Macでは ~query-replace~ (~M-%~)が奪われて押せないので、 ~query-replace-regexp~ (~C-M-%~)する。
** spring [[id:afccf86d-70b8-44c0-86a8-cdac25f7dfd3][RSpec]]
[[id:e04aa1a3-509c-45b2-ac64-53d69c961214][Rails]]でspringを走らせておくと[[id:afccf86d-70b8-44c0-86a8-cdac25f7dfd3][RSpec]]が高速に動作する。

いつのまにかEmacsでspringが動かなくなっていた。コマンドでは ~spring rspec~ などで動かせるが、Emacsではふつうの ~bundle exec ...~ になっていた。前は早くできていたはず。ネットの記事を参考に修正した。

#+begin_quote
emacsのrspec-modeで、上記のようにしてspringを使うと、自動ではspringがONにならない。 これはtmpにpidファイルが作られないため。 強制的にspringを使うには、次のように設定する。
#+end_quote

  #+begin_src emacs-lisp
  (require 'rspec-mode)
  (defun rspec-spring-p ()
    (and rspec-use-spring-when-possible
         (stringp (executable-find "spring"))))
  #+end_src

springを自動で検出してくれるらしい(何より今までできてた)。
~spring status~ でspringが動いてるかチェックする。動いてなかったら ~spring rspec~ する。
** デバッグ起動する
#+begin_src shell
$ emacs -q
# init読み込まない
$ emacs --debug-init
# デバッグモードで起動する
#+end_src
** [[id:fa497359-ae3f-494a-b24a-9822eefe67ad][System Crafters]] IRC
#+begin_quote
erc-tls
irc.libera.chat
6697
/join #systemcrafters
#+end_quote
** mermaid jsをEmacsで使う
mermaidはプレーンテキストで図を作れるツール。[[id:a6980e15-ecee-466e-9ea7-2c0210243c0d][JavaScript]]で書かれている。
これをEmacsで扱えるようにするのがmermaid-mode。

- https://github.com/abrochard/mermaid-mode

#+begin_src shell
npm install -g @mermaid-js/mermaid-cli
#+end_src
して、C-cで画像にコンパイルできる。
** 各Window managerでEmacs風キーバインドにする
- https://linuxfan.info/linux-emacs-keybindings-matome

#+begin_src shell
  # gnome
  gsettings set org.gnome.desktop.interface gtk-key-theme Emacs
  # MATE
  gsettings set org.mate.interface gtk-key-theme Emacs
  # Cinnamon
  gsettings set org.cinnamon.desktop.interface gtk-key-theme Emacs
#+end_src
** counsel-find-fileで新しいファイルを作る
補完選択になってしまって新しくファイルが作れないときは、C-M-jで新規作成できる。

counselのリポジトリのREADMEの最後に書かれてた。
#+begin_src emacs-lisp
(setq ivy-use-selectable-prompt t)
#+end_src
をすると上下選択できるようになる。
選択一覧にはでないのでわかりにくい。
** blame系関数
- ~vc-annotate~
- ~magit-blame~
- ~blamer~
** keybinding一覧
~(make-command-summary)~ や ~(describe-bindings)~ で生成できる。
* Tasks
** TODO recompileが別ウィンドウで立ち上がるようにする
recompileは直前のcompilationの再実行関数。
実行して別ウィンドウのバッファが残るはずなのだが、何かウィンドウに関するパッケージを入れたせいで挙動が変わっている。
消えてしまう。
** TODO [[id:eb196529-bdbd-48c5-9d5b-a156fe5c2f41][EXWM]]との連携を行う
:LOGBOOK:
CLOCK: [2022-01-18 Tue 22:08]--[2022-01-18 Tue 22:33] =>  0:25
CLOCK: [2022-01-18 Tue 21:39]--[2022-01-18 Tue 22:04] =>  0:25
:END:
[[https://www.youtube.com/watch?v=usCfMstCZ7E][The Perfect Panel: Integrating Polybar with Emacs - Emacs Desktop Environment #5 - YouTube]]
** TODO 正規表現置換が2度目以降失敗する
プログラム関係のmodeで起こることを確認(orgでは起こらない)。
#+begin_quote
  vr--perform-query-replace: Match data clobbered by buffer modification hooks
#+end_quote
** TODO Slackを見られるようにする
** TODO mailを読めるようにする
** TODO Vtermのログ件数を増やす
** TODO [[https://solist.work/blog/posts/git-history-tool/][ソースコードの読み方 - Solist Work Blog]]
Emacs, Magitで解説している。
** TODO [[https://dev.classmethod.jp/articles/emacs-multiple-cursors/][複数カーソルを操作するパッケージ multiple-cursors.el のご紹介 | DevelopersIO]]
** TODO .emacs.d整理
package管理もちゃんと使って設定したい。

- leaf https://qiita.com/conao3/items/dc88bdadb0523ef95878
** TODO wikipediaを直に検索できるようにする
** TODO popper(emacs package)
ウィンドウの出る方法を設定できるパッケージ。
** TODO shackle.el設定
** TODO EmacsとレプリカDB接続
ローカルではできるが、SSHを使う方法がわかっていない。
SQLを打つ時に不便なので。
** TODO lsp-mode が何かと競合する
消したときに近くの矩形が消されてしまう謎の挙動。
** TODO プロジェクトファイル限定のswitch-buffer。
projectile-switch-to-buffer (C-c p b)
** TODO キーバインドの一覧を表示
<F1> b
** TODO プロジェクトをag検索
projectile-ag (~C-c p s s~)
** TODO vtermでカッコが入力できない
vtermは互換性が高い[[id:585d3b5e-989d-4363-bcc3-894402fcfcf9][Shell]]のターミナルパッケージ。

カッコを自動入力するモードにしていると入力できなる。
なのでカッコ関係はコピペする羽目になる。
** TODO HIGでコピペしたときにおかしい
~highlight-indent-guides-mode~ がコピペしたときに表示がおかしい。
faceまでコピーするから仕方ないのかな。
** TODO vtermでコピーしたときにキルリングに入らない
一度読み取り専用バッファにして、コピーしないといけない。
** TODO GTAGSを使えるようにする
読むときにたどれないと不便。
** TODO 使ってないコマンドを開拓するパッケージ
最初にコマンド一覧をどこからか出力する。
それから、何かコマンドを打つごとに数を保存する。
そうしてしばらく使っていくと、使ったことのないコマンドが明らかになる。
カバレッジ率的にやっても面白そうだろう。
* Archives
** DONE git-linkでコミットハッシュからリンクを取る
CLOSED: [2021-09-24 Fri 10:44]
デフォルトだと現在のブランチから名前を取るため、remoteに存在しないブランチのとき無効なリンクになる。
ブランチ名を固定もできるが、汎用性がなくなる。
コミットハッシュから取ればいい。
#+begin_src emacs-lisp
(setq git-link-use-commit t)
#+end_src
** DONE ivy化
CLOSED: [2021-09-12 Sun 13:02]
[[https://qiita.com/takaxp/items/2fde2c119e419713342b][helm を背に ivy の門を叩く - Qiita]]
** DONE esh-autosuggestを導入する
CLOSED: [2021-09-12 Sun 12:47]
履歴を自動入力。
#+begin_src emacs-lisp
  (use-package esh-autosuggest
    :hook (eshell-mode . esh-autosuggest-mode)
    :config
    (setq esh-autosuggest-delay 0.5)
    (set-face-foreground 'company-preview-common "#4b5668")
    (set-face-background 'company-preview nil))
#+end_src
** DONE undo履歴を保持しないときがある
CLOSED: [2021-08-17 Tue 09:41]
3つくらいしか戻れないときがあり、原因は不明。
undo-treeで戻れる。
** DONE ~vterm-toggle~ をもっと良い感じに出てくるようにしたい。toggleでオフになったとき分割ウィンドウが消える。
CLOSED: [2021-05-30 Sun 00:25]
設定を追加した。
** DONE ~markdown-mode~ でHelm-M-xが作動しない。...emacs-mozcを使っていて日本語入力モードのときhelmがうまく作動しない。
CLOSED: [2021-05-30 Sun 00:25]
よくわからないのでclose。
** DONE 列名を表示する
CLOSED: [2021-07-26 Mon 09:41]
(global-display-line-numbers-mode)
linum-modeよりこっちのほうがいいらしい。
linum-modeは重かった。
外観も綺麗。
** DONE diredで直に編集する
CLOSED: [2021-06-23 Wed 01:34]
(wdired-change-to-wdired-mode)
編集モードにして ~C-c C-c~ で実行する。
** DONE 見出しレベル替え
CLOSED: [2021-09-10 Fri 17:58]
(org-cycle-level)
何も書いてない見出しでtab。
** DONE 見出し挿入
CLOSED: [2021-06-23 Wed 01:33]
C-enter
前の項目がリストでも見出しが挿入できる。
** DONE ~C-c n~
CLOSED: [2021-06-03 Thu 21:45]
roam のプレフィクスキー。
** DONE wdired-change-to-wdired-mode dired
CLOSED: [2021-06-03 Thu 21:45]
便利な置換。
** DONE org-mode の各種挿入 ~C-c C-,~
CLOSED: [2021-06-03 Thu 21:44]
** DONE ~projectile-find-file~ (~C-c p f~)
CLOSED: [2021-06-03 Thu 21:42]
プロジェクト全体のファイル名検索。
** DONE ~projectile-switch-project~ (~C-c p p~)
プロジェクトを切り替える。
CLOSED: [2021-06-03 Thu 21:42]
** DONE ~robe-doc~ (~C-c C-d~)
CLOSED: [2021-06-03 Thu 21:42]
Rubyメソッドを調べられる。gemがあるプロジェクトのGemfileで ~pry~, ~pry-doc~ をインストールして実行するとpryが起動して、以後使えるようになる。これは補完の ~company.el~ と連携させているため、pryを起動しないことにはgemの補完は表示されない。
** DONE ~vterm-copy-mode~ → ~C-c C-t~
CLOSED: [2021-06-03 Thu 21:42]
vterm上で、eshellなどのように自由に動き回るモード。
** DONE C-c C-w (org-refile)
CLOSED: [2021-07-26 Mon 09:41]
https://orgmode.org/manual/Refile-and-Copy.html#Refile-and-Copy
見出しの移動。
** DONE 使用パッケージで分岐するとき、どうやってbyte-compileエラーを回避するのか
CLOSED: [2021-08-21 Sat 23:47]
たとえばhelmを使ってるときはこれ、ivyのときはこれとかでrequireするものは変わるものだが。既存パッケージはどうしているのだろう。

↓とかやった。外部のコマンドは最初に定義しておいた。
#+begin_src emacs-lisp
(defvar w3m-current-url)
(declare-function w3m-current-title "ext:w3m-util")
#+end_src
** CLOSE Emacsをビルドしてみる
CLOSED: [2021-08-25 Wed 22:31]
https://systemcrafters.net/live-streams/august-20-2021/

この通りにやって簡単にできた。
** DONE roamリポジトリをサイト公開する
CLOSED: [2021-08-29 Sun 17:53]
どうにかして静的ページとして公開できるはず。
かっこいいのがなければ作る。

いい感じにやっているサイトはいくつもある。

- http://juanjose.garciaripoll.com/blog/org-mode-html-templates/index.html
- https://diego.codes/post/blogging-with-org/
- https://hugocisneros.com/org-config/#configuration
- https://hugocisneros.com/blog/my-org-roam-notes-workflow/
- https://doubleloop.net/2020/08/21/how-publish-org-roam-wiki-org-publish/
- https://notes.alexkehayias.com/org-roam/
- https://www.mtsolitary.com/20210318221148-emacs-configuration/#hugo-support
** DONE org-publishのスタイルを設定する
CLOSED: [2021-08-29 Sun 17:55]
https://ogbe.net/blog/blogging_with_org.html

contentのhtmlをいじることができなかったが、とりあえずcssで指定してOK。
** DONE autosaveが出てきてうざい
CLOSED: [2021-08-29 Sun 17:55]
Guixでは編集すると毎回プロンプトが出てくる。
#+begin_src emacs-lisp
  (defun ask-user-about-supersession-threat (fn)
    "blatantly ignore files that changed on disk"
  )
  (defun ask-user-about-lock (file opponent)
    "always grab lock"
  t)

  ;; or

  (setq revert-without-query '(".*"))
#+end_src
を実行したが、変わらなかった。

↓できた。
#+begin_src emacs-lisp
(setq auto-save-timeout 2)
(setq auto-save-visited-interval 2)
(setq auto-save-no-message t)
(auto-save-visited-mode)
#+end_src
** CLOSE Projectileの幅がせまくて見づらい
ほかのcompletionは幅いっぱいにハイライトされるが、projectileは文字のあるところしかハイライトされないので短い検索のときに見えにくい。たとえば ~counsel-find-file~ とか ~counsel-find-file~ と比べるとわかる。

counsel-projectileを使えば問題ない。でもデフォルトの動作がおかしいので修正したいところ。
いや、ivyの問題ぽい。ivy yasnippetをすると同じような状態になる。テーマを変えてもそうなる。

org-refileでも同じような感じ。要調査。
共通点は、右側にアノテーションが出ないときか。そのときはfaceが設定されないので右側まで伸びない。
** DONE org-mode のキーバインド
CLOSED: [2021-08-29 Sun 23:52]
見出し移動とか。
** DONE lsp setup([[id:ad1527ee-63b3-4a9b-a553-10899f57c234][TypeScript]])
CLOSED: [2021-09-04 Sat 14:39]
1. install language-server
https://deno.land/#installation
#+begin_src shell
  curl -fsSL https://deno.land/x/install/install.sh | sh
#+end_src
2. Install lsp-mode package
3. Add lsp settings to init.el

- reference :: [[https://takeokunn.xyz/blog/post/emacs-lsp-mode][emacsにlsp-mode入れた - takeokunn's blog]]
** DONE Vterm settings
CLOSED: [2021-09-12 Sun 13:05]
- prompt settings
** DONE lispxmpを設定する
CLOSED: [2021-09-19 Sun 19:42]
xmp-filterのelisp版。
#+begin_src emacs-lisp
  (require 'lispxmp)
  (define-key emacs-lisp-mode-map (kbd "C-c C-d") 'lispxmp)
#+end_src
** DONE pareditを設定する
CLOSED: [2021-09-19 Sun 19:42]
#+begin_src emacs-lisp
;;;括弧の対応を保持して編集する設定
(require 'paredit)
(add-hook 'emacs-lisp-mode-hook 'enable-paredit-mode)
(add-hook 'lisp-interaction-mode-hook 'enable-paredit-mode)
(add-hook 'lisp-mode-hook 'enable-paredit-mode)
(add-hook 'ielm-mode-hook 'enable-paredit-mode)
#+end_src
** DONE リンクを保存する方法をどうにかする
CLOSED: [2021-09-26 Sun 14:33]
ブラウザからコピペするのがメンドイのでどうにかする。
org-protocolを設定して簡単に保存できるようにした。
** DONE 踏み台SSH接続を簡単にできるように
CLOSED: [2022-01-15 Sat 10:11]
Emacsはあまり関係ない。
pecoを設定して簡単に接続できるようにした。
[[https://qiita.com/jagio/items/7b020df50c4b1bdc6ad0][Ubuntuにpecoを導入する(for bash) (for fish) - Qiita]]

#+caption: ~/.bashrc
#+begin_src shell
alias sshp='ssh $(grep Host ~/.ssh/config | grep -v HostName | cut -d" " -f2 | peco)'
#+end_src
* References
** [[https://masteringemacs.org/][Mastering Emacs]]
Emacsの本。
** [[https://karthinks.com/software/avy-can-do-anything/][Avy can do anything | Karthinks]]
avyの解説。
** [[https://www.emacswiki.org/emacs/HackerGuide][EmacsWiki: Hacker Guide]]
Emacsの簡単な概要。
** [[https://leanpub.com/hacking-your-way-emacs/][Hacking your way around in… by Marcin Borkowski]]
Emacsの本。買うか迷ってる。
** [[https://www.slideshare.net/nanasess/emacs-5282932][Emacs アイコンがコミットされるまで]]
こんな流れなんだ。
** TODO [[http://www.takuichi.net/hobby/symbolic/lisp/build-in.html][Emacs Lisp 組込み関数]]
基本的な関数をまとめたリスト。
** TODO [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Tips.html][Appendix D Tips and Conventions]]
Emacs Lisp Manual。いくつか面白そうな章がある。
**  [[https://www.macs.hw.ac.uk/~rs46/posts/2018-12-29-textlint-flycheck.html][A textlint flycheck checker in Emacs]]
EmacsでのTextlint設定方法。
**  [[https://rubikitch.hatenadiary.org/entry/20101109/mouse][Emacsでマウスを有効活用する方法 - http://rubikitch.com/に移転しました]]
マウス活用の方法。
** TODO [[https://stackoverflow.com/questions/15272841/how-to-remove-a-function-from-run-with-idle-timer][emacs - How to remove a function from run-with-idle-timer? - Stack Overflow]]
timerのキャンセル方法。
**  [[https://spin.atomicobject.com/2016/05/27/write-emacs-package/][A Simple Guide to Writing & Publishing Emacs Packages]]
パッケージを作ってみる記事。
**  [[https://github.com/alphapapa/emacs-package-dev-handbook][alphapapa/emacs-package-dev-handbook]]
Emacsパッケージのハンドブック。
** org-modeのキーバインド
https://qiita.com/takaxp/items/a5a3383d7358c58240d0
**  [[https://zeekat.nl/articles/making-emacs-work-for-me.html][Making Emacs Work For Me]]
設定解説。
