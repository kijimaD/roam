#+title: Emacs

- [[file:20210509122633-emacs_lisp.org][Emacs Lisp]]

* パッケージ

- [[file:20210508233810-roam.org][roam]]
- mermaid-mode
- alert.el
- writeroom-mode

* 👀覚えたいキーバインド

- ~C-x C-;~ - 行にコメントが付けられます。
- ~<F1> b~ - キーバインドの一覧を表示します。
- ~projectile-ag~ (~C-c p s s~) - プロジェクトをag検索します。検索結果をバッファで得たいときに。
- ~projectile-multi-occur~ (~C-c p o~) - プロジェクトで ~occur~ します。
- ~projectile-find-dir~(~C-c p d~) - プロジェクトのルートディレクトリを開きます。
- ~projectile-toggle-between-implementation-and-test~(~C-c p t~) - テストとプロダクトコードを切り替えます。
- diredで一気に置換したいとき、 ~wdired-change-to-wdired-mode~ で編集モードにして ~C-c C-c~ で実行します。
- org-mode の各種挿入 - ~C-c C-,~
- org-mode のキーバインド。見出し移動とか。https://qiita.com/takaxp/items/a5a3383d7358c58240d0
- roam のプレフィクスキー: ~C-c n~

* ✔覚えたキーバインド

- Helmのサーチ中のものをコピーするときには、~helm-copy-to-buffer~(~C-c C-i~)します。あるいは ~helm-kill-seletion-and-qui~ (~C-u C-c C-k~)も使えます。
- プロジェクト全体のファイル名検索は ~projectile-find-file~ (~C-c p f~)が便利です。
- ~projectile-switch-project~ (~C-c p p~) - プロジェクトを切り替えます。
- ~robe-doc~ (~C-c C-d~)でRubyメソッドを調べられます。gemがあるプロジェクトのGemfileで ~pry~, ~pry-doc~ をインストールして実行するとpryが起動して、以後使えるようになります。これは補完の ~company.el~ と連携させているため、pryを起動しないことにはgemの補完は表示されません。
- vterm上で、eshellなどのように自由に動き回るモードです。 ~vterm-copy-mode~ → ~C-c C-t~

* ソースメモ

** org-lint
https://github.com/kijimaD/emacs/blob/master/lisp/org/org-lint.el#L124
** interactive
https://github.com/kijimaD/emacs/blob/master/src/callint.c#L37
** defun
https://github.com/kijimaD/emacs/blob/master/lisp/emacs-lisp/byte-run.el#L280
https://github.com/kijimaD/emacs/blob/master/lisp/emacs-lisp/cl-macs.el#L339

* 改善メモ

- undo履歴を保持しないときがあります。3つくらいしか戻れないときがあり、原因は不明です。
- ~markdown-mode~ でHelm-M-xが作動しません。...emacs-mozcを使っていて日本語入力モードのときhelmがうまく作動しないみたいです。
- ~vterm-toggle~ をもっと良い感じに出てくるようにしたいです。toggleでオフになったとき分割ウィンドウが消えます。

* Macメモ

- Macでは ~query-replace~ (~M-%~)が奪われて押せないので、 ~query-replace-regexp~ (~C-M-%~)します。

* 未分類メモ
十分に集まってきたらファイルに分割しましょう。
** spring rspec
  いつのまにかEmacsでspringが動かなくなっていました。コマンドでは ~spring rspec~ などで動かせるが、Emacsではふつうの ~bundle exec ...~ になっていました。前は早くできていたはず。ネットの記事を参考にします。

  >emacsのrspec-modeで、上記のようにしてspringを使うと、自動ではspringがONにならない。 これはtmpにpidファイルが作られないため。 強制的にspringを使うには、次のように設定する。
  ```
  (require 'rspec-mode)
  (defun rspec-spring-p ()
    (and rspec-use-spring-when-possible
         (stringp (executable-find "spring"))))
  ```
  springを自動で検出してくれるらしいのですが(何より今までできてた)。
  - ~spring status~ でspringが動いてるかチェックする。動いてなかったら ~spring rspec~ する。
