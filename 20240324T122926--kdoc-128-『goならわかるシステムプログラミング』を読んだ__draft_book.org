:properties:
:ID: 20240324T122926
:end:
#+title:      KDOC 128: 『Goならわかるシステムプログラミング』を読んだ
#+date:       [2024-03-24 Sun 12:29]
#+filetags:   :draft:book:
#+identifier: 20240324T122926

# (denote-rename-file-using-front-matter (buffer-file-name) 0)
# (save-excursion (while (re-search-backward ":draft" nil t) (replace-match "")))
# (flush-lines "^\\#\s.+?")

# ====ポリシー。
# 1ファイル1アイデア。
# 1ファイルで内容を完結させる。
# 常にほかのエントリとリンクする。
# 自分の言葉を使う。
# 参考文献を残しておく。
# 自分の考えを加える。
# 構造を気にしない。
# エントリ間の接続を発見したら、接続エントリを追加する。カード間にあるリンクの関係を説明するカード。
# アイデアがまとまったらアウトラインエントリを作成する。リンクをまとめたエントリ。
# エントリを削除しない。古いカードのどこが悪いかを説明する新しいカードへのリンクを追加する。
# 恐れずにカードを追加する。無意味の可能性があっても追加しておくことが重要。

* この文書のステータス
- 作成
  - [X] 2024-03-24 貴島
- レビュー
  - [ ] <署名>
# (progn (kill-line -1) (insert (format "  - [X] %s 貴島" (format-time-string "%Y-%m-%d"))))

# 関連をつけた。
# タイトルがフォーマット通りにつけられている。
# 内容をブラウザに表示して読んだ(作成とレビューのチェックは同時にしない)。
# 文脈なく読めるのを確認した。
# おばあちゃんに説明できる。
# いらない見出しを削除した。
# タグを適切にした。
# すべてのコメントを削除した。
* 感想
[[https://amzn.to/3INZOjc][Goならわかるシステムプログラミング]]はその名の通りGoで、Cを使わずにシステムプログラミングを解説した本。

2年前に読んだが、よくわからなかったのでまた読み返した。[[id:7cacbaa3-3995-41cf-8b72-58d6e07468b1][Go]]にだいぶ慣れたのと、システムプログラミングまわりを浅くやったので、前より理解できたと感じた。
* メモ
あまりメモしてない。

- システムコールで引数が数値なのはレジスタで渡せるのが数値だけだから
- 返り値もレジスタで返ってくるので数値
- ソケットが他のプロセス間通信と違うのは、アドレスとポート番号がわかればローカルのコンピュータ内だけではなく外部のコンピュータとも通信が行える点
- ソケットの3種類...TCP, UDP, Unixドメインソケット
- プロセスグループ :: ~cat example.go | echo~ パイプでつなげられたコマンドをまとめてプロセスグループという。プロセスグループに対するIDがコマンドの代表のプロセスIDとなる
- セッショングループ :: 同じターミナルから起動したアプリケーションであれば同じセッショングループ
- すべてのプロセスは、3つの入出力データを持つ。
  - 入力: コマンドライン引数
  - 入力: 環境変数
  - 出力: 終了コード
- プログラムから見たスレッドは、メモリにロードされたプログラムの現在の実行状態を持つ仮想CPU。仮想CPUのそれぞれにスタックメモリが割り当てられている
- OSやCPUから見たスレッドは時間が凍結されたプログラムの実行状態
- OSの仕事は凍結状態のプログラムの実行状態を復元して各スレッドを順番に短時間ずつ処理を再開させること
- スレッドがCPUコアに対してマッピングされるのに対して、goroutineはOSのスレッドにマッピングされる
- goroutineはOSスレッドの1~2MBと比べると初期スタックメモリのサイズが小さく(2KB)、起動処理が軽い
* 関連
- [[id:20240219T221805][KDOC 99: 『詳解UNIXプログラミング』を途中で諦めた]]。わけわからなかったので、易しい本で勉強している
