:properties:
:ID: 20241105T170010
:mtime:    20241107153749
:ctime:    20241105170036
:end:
#+title:      KDOC 274: 『RFCの読み方』
#+date:       [2024-11-05 Tue 17:00]
#+filetags:   :draft:book:
#+identifier: 20241105T170010

# (denote-rename-file-using-front-matter (buffer-file-name) 0)
# (save-excursion (while (re-search-backward ":draft" nil t) (replace-match "")))
# (flush-lines "^\\#\s.+?")

# ====ポリシー。
# 1ファイル1アイデア。
# 1ファイルで内容を完結させる。
# 常にほかのエントリとリンクする。
# 自分の言葉を使う。
# 参考文献を残しておく。
# 文献メモの場合は、感想と混ぜないこと。1つのアイデアに反する
# ツェッテルカステンの議論に寄与するか。それで本を書けと言われて書けるか
# 頭のなかやツェッテルカステンにある問いとどのようにかかわっているか
# エントリ間の接続を発見したら、接続エントリを追加する。カード間にあるリンクの関係を説明するカード。
# アイデアがまとまったらアウトラインエントリを作成する。リンクをまとめたエントリ。
# エントリを削除しない。古いカードのどこが悪いかを説明する新しいカードへのリンクを追加する。
# 恐れずにカードを追加する。無意味の可能性があっても追加しておくことが重要。
# 個人の感想・意思表明ではない。事実や書籍情報に基づいている

# ====永久保存メモのルール。
# 自分の言葉で書く。
# 後から読み返して理解できる。
# 他のメモと関連付ける。
# ひとつのメモにひとつのことだけを書く。
# メモの内容は1枚で完結させる。
# 論文の中に組み込み、公表できるレベルである。

# ====水準を満たす価値があるか。
# その情報がどういった文脈で使えるか。
# どの程度重要な情報か。
# そのページのどこが本当に必要な部分なのか。
# 公表できるレベルの洞察を得られるか

# ====フロー。
# 1. 「走り書きメモ」「文献メモ」を書く
# 2. 1日1回既存のメモを見て、自分自身の研究、思考、興味にどのように関係してくるかを見る
# 3. 追加すべきものだけ追加する

* この文書のステータス
:LOGBOOK:
CLOCK: [2024-11-08 Fri 00:44]--[2024-11-08 Fri 01:09] =>  0:25
CLOCK: [2024-11-07 Thu 21:54]--[2024-11-07 Thu 22:19] =>  0:25
CLOCK: [2024-11-07 Thu 21:17]--[2024-11-07 Thu 21:42] =>  0:25
CLOCK: [2024-11-07 Thu 20:50]--[2024-11-07 Thu 21:15] =>  0:25
CLOCK: [2024-11-07 Thu 20:22]--[2024-11-07 Thu 20:47] =>  0:25
CLOCK: [2024-11-05 Tue 18:46]--[2024-11-05 Tue 19:11] =>  0:25
CLOCK: [2024-11-05 Tue 18:07]--[2024-11-05 Tue 18:32] =>  0:25
:END:
- 作成
  - [ ] <署名>
# (progn (kill-line -1) (insert (format "  - [X] %s 貴島" (format-time-string "%Y-%m-%d"))))
- レビュー
  - [ ] <署名>
# (progn (kill-line -1) (insert (format "  - [X] %s 貴島" (format-time-string "%Y-%m-%d"))))

# チェックリスト ================
# 関連をつけた。
# タイトルがフォーマット通りにつけられている。
# 内容をブラウザに表示して読んだ(作成とレビューのチェックは同時にしない)。
# 文脈なく読めるのを確認した。
# おばあちゃんに説明できる。
# いらない見出しを削除した。
# タグを適切にした。
# すべてのコメントを削除した。
* 概要

[[https://amzn.to/3UCjZaj][『RFCの読み方: インターネット技術の公式仕様書』]]はRFCの読み方を解説する本である。

* メモ
- RFCはけっして削除されることはない(p19)
- 基礎を学ぶのに最適なRFC1178。コンピュータの命名方法
  - つけてはいけない名前の例
  - おすすめのつけかた。テーマのある名前をつけること。あまり使われない、数の多いものだとなおよい。色、神話上の人物の名前、元素名、など
- セキュリティに関する考察はRFCでは必須のものとされている。なのでエッセイのRFCであっても章は存在する(p70)
- ユーザーエージェント(メーラー)からメールを送るときには、直接宛先のメールサーバではなく、SMTPサーバに送るのが一般的である。送信待ちとなるのを防いだり、再送機能を利用するためにSMTPに任せる(p89)
- 1回読んでわかりにくかったときは、箇条書きにして文を細かく分けて考えるとよい(p89)
- 待機と接続の確立(p91)
  - 「待機(listing)」ポートを開きそこへの接続を待つこと。TCP/IPの通信ではコンピュータは1~65535までの番号が付いたポートを持っている
  - POP3は110番ポートを開きそこでの接続されるのを待つ
  - クライアントは自分自身のポートのうち未使用のポートを開き、そのポートとサーバ側の110番をつなげようとする。こうしてクライアントのポートからサーバの110番ポートのデータが流れるようになった状態が「接続の確立」である
  - この時点ではまだ声が聞こえるにすぎず、会話にはなっていない
- キーワードは3~4文字で、引数は40文字以下でなければならない(p94)
  - ここから言えるのは、「 **こちらから** 送る引数は40文字以下でなければならない」である。けっして「 **相手から** 送られる引数は40文字以下である」ではない
- 「大文字で送らなくてはならない」とあっても、相手が必ず守っているという前提は避けなければならない(p95)
- 「POP3の認証のメカニズムは1種類だけでなく、すべてのPOP3サーバに要求される唯一の認証メカニズムは存在しない。少なくとも1種類の認証メカニズムをPOP3サーバはサポートしなくてはならない」認証プロトコルは将来的に変わりうるもので、自由度をもたせて変更に対応していこうということ(p105)
- 一般にサーバ側に「どちらでもよい」という定義があれば、クライアント側は「どちらにも対応しなければならない」ということになる(p107)
- 1バイトが何ビットなのかはCPUのアーキテクチャに依存する(p109)
- さまざまなCPU間でもやりとりを前提とする通信プロトコルでは、特定CPUに依存することなくビット数を正確に表すために、オクテットの表記を利用することが多い(p108)
- 「ここでは、各メッセージの順番は定義されていない」クライアントでは順番を前提にしてはならない(p119)
  - 規定がないことも読み取る。暗黙の前提と考えてはいけない
- コマンド例
  - STAT: メッセージがあるかどうか
  - LIST: サーバにあるメッセージ番号の一覧
  - RETR: メッセージ内容を取得する
  - DELE: 削除マークをつける。POP3 セッションが ~UPDATE~ 状態になるまで、実際の削除はしない
  - NOOP: POP3サーバは何もせず、単に成功のメッセージを返す
  - RSET: DELEコマンドに対して取り消しを行う
  - QUIT: 処理状態から更新状態に遷移する
- NOOPの使いどころ。レスポンスを返さずに10分経過したときにPOP3サーバはオートログアウトが認められている。接続を保持したい場合は何かしらのコマンドを発行する必要がある。そのとき、STATやLISTコマンドでもいいのだが、負荷をかけてしまう。そういう場合に負荷をかけないようにNOOPを用いる、などができる(p124)
- 最低限実装しないといけないコマンドと、オプションコマンドがある(p133)
- 存在しないメールアカウントの場合にも成功の合図を返してもよい。有効なユーザ名かどうかを判別されるのを防ぐため。UNIXのログインも同様のポリシーで、存在しないアカウント名でもパスワードを尋ねられる(p143)
- 過去に読んだことのあるメールかどうかはUIDLコマンドでユニークIDを取得し、取得済みのメッセージと比較を行えばよい
- RFCのヘッダを見て広く利用されているものを見る。洗練されている可能性が高い。用意されているコマンドはどれも必要なもので、意味不明なものはあまりないと予測できる、という(p165)
- 目次を見てメインとなる部分を予測しそこから読み始める。そこだけでわからなかった内容を目次の項目から見つけ出し、拾い読みしていけばよい。最後に全体を始めから読み直してみるとよい、とよい(p165)
- RFCは抽象的な記述が多い。大切な記述を見逃す可能性がある。したがって例示やセッション例などの具体例を参考にし、「これはどういう意味か」と考えながら読んでいくとよい。「自分だったらどうするか」というふうに想像力を働かせながら読み勧めるのがコツである、という(p165)
- ジョークRFCの世界(p166)
  - 1149
  - 748
  - 1926
  - 2100
  - 2550
  - 3514
- RFC2234: 標準化されたBNFであるABNFを規定する(p172)
- BNFと、一般的な文章の文法を説明する場合と異なるのは「規則」と「規則の内容」をどちらを先に記述するか、である(p174)
  - 一般的な文章: 五・七・五の音からなる文を俳句と呼ぶ
  - BNF: 俳句を五・七・五の音からなる文と定義する
  - BNF: 俳句 = 五・七・五の音からなる文
- 自由書式では、通常すでに世の中にあるものを説明するように記述できる。しかしBNFの場合は何もない状態から規則を1つ1つ作り上げ、それに名前をつけていくことになる(p175)
- BNFを理解するうえでもっとも重要なのは、「名前を付けていく作業の繰り返し」という考え方である(p175)

#+begin_src bnf
reader = "Kijima"
#+end_src

- リテラルとはプログラムのソースコードで定義される定数のことである。たとえば「name」というリテラルの文字列があった場合、これは「name」という文字列であって、決して「名前」を意味するわけではない。つまり「n」「a」「m」「e」という文字が連続して並んでいるだけである(p180)

#+caption: 任意順序形式演算子。renameもしくは省略したrenでもよいパターンを表せる
#+begin_src bnf
"ren" [ "ame"]
#+end_src

#+caption: Officeの製品名を定義する
#+begin_src bnf
  version = "95" / "97" / "2000" / "XP"
  office = "Microsoft Office" version
#+end_src

- RFC 2234 でBNFのコア規則をBNFで表現している。汎用的に利用できることを前提にしている
  - [[https://datatracker.ietf.org/doc/html/rfc2234][RFC 2234 - Augmented BNF for Syntax Specifications: ABNF]]
- p205あたりの、BNFの演算子をBNFで説明するところがよくわからなかった。概念が定着してから再度読み直す必要があるだろう
- ~<>~ の散文的表現の意味がわからない

* 関連
# 関連するエントリ。なぜ関連させたか理由を書く。意味のあるつながりを意識的につくる。
# この事実は自分のこのアイデアとどう整合するか。
# この現象はあの理論でどう説明できるか。
# ふたつのアイデアは互いに矛盾するか、互いを補っているか。
# いま聞いた内容は以前に聞いたことがなかったか。
# メモ y についてメモ x はどういう意味か。
なし。
