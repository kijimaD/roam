:properties:
:ID: 20241123T012402
:mtime:    20241130215141
:ctime:    20241123012407
:end:
#+title:      KDOC 305: 加算と左ビットシフトの実行速度を計測する
#+date:       [2024-11-23 Sat 01:24]
#+filetags:   :permanent:
#+identifier: 20241123T012402

* この文書のステータス
- 作成
  - [X] 2024-11-23 貴島
- レビュー
  - [X] 2024-11-30 貴島

* 概要

#+begin_src
  42 + 42
  42 * 2
#+end_src

は、どちらが早いだろうか。これは言い換えると加算命令と左ビットシフトはどちらが早いか、ということになる。Go言語のベンチマークツールで加算命令と左ビットシフトの実行速度を計測する。

まず、命令がコンパイラによって省略されないように調整する。デフォルトの挙動だと、使用されない変数はコンパイル結果から省かれるため ~//go:noinline~ が必要。乗算は2の倍数なので、左ビットシフト演算に変換されている。

#+begin_export html
<iframe width="800px" height="400px" src="https://godbolt.org/e#g:!((g:!((g:!((h:codeEditor,i:(filename:'1',fontScale:14,fontUsePx:'0',j:1,lang:go,selection:(endColumn:9,endLineNumber:7,positionColumn:9,positionLineNumber:7,selectionStartColumn:9,selectionStartLineNumber:7,startColumn:9,startLineNumber:7),source:'//+Type+your+code+here,+or+load+an+example.%0A//+Your+function+name+should+start+with+a+capital+letter.%0Apackage+main%0A%0Afunc+main()+%7B%0A%09_+%3D+add(42)%0A%09_+%3D+shl(42)%0A%7D%0A%0A//go:noinline%0Afunc+add(a+int)+int+%7B%0A%09return+a+%2B+a%0A%7D%0A%0A//go:noinline%0Afunc+shl(a+int)+int+%7B%0A%09return+a+*+2%0A%7D%0A'),l:'5',n:'0',o:'Go+source+%231',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0'),(g:!((h:compiler,i:(compiler:gl1232,filters:(b:'0',binary:'1',binaryObject:'1',commentOnly:'0',debugCalls:'1',demangle:'0',directives:'0',execute:'1',intel:'1',libraryCode:'0',trim:'0',verboseDemangling:'0'),flagsViewOpen:'1',fontScale:14,fontUsePx:'0',j:1,lang:go,libs:!(),options:'',overrides:!(),selection:(endColumn:1,endLineNumber:1,positionColumn:1,positionLineNumber:1,selectionStartColumn:1,selectionStartLineNumber:1,startColumn:1,startLineNumber:1),source:1),l:'5',n:'0',o:'+x86-64+gc+1.23.2+(Editor+%231)',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0')),l:'2',n:'0',o:'',t:'0')),version:4"></iframe>
#+end_export

次に、↑で確認したコードによってテストファイルを作成する。

#+caption: bench_test.go
#+begin_src go
package main

import "testing"

func BenchmarkAdd(b *testing.B) {
	for i := 0; i < b.N; i++ {
		_ = add(42)
	}
}

func BenchmarkShl(b *testing.B) {
	for i := 0; i < b.N; i++ {
		_ = shl(42)
	}
}

//go:noinline
func add(a int) int {
	return a + a
}

//go:noinline
func shl(a int) int {
	return a * 2
}
#+end_src

100回分ベンチマークを実行し、結果を保存する。

#+caption: ベンチマークを保存する
#+begin_src shell
  go test -bench . -benchmem -count 100 > exec.log
#+end_src

複数回取得したベンチマーク結果をbenchstatによってまとめて見る。

#+caption: benchstatの実行と結果
#+begin_src shell
  # benchstatをインストールする
  go install golang.org/x/perf/cmd/benchstat@latest
  # 100回分の計測結果をまとめる
  benchstat exec.log

  (略)
  goos: linux
  goarch: amd64
  pkg: playground/at-2024-11-22-223539
  cpu: 12th Gen Intel(R) Core(TM) i7-1260P
              │   exec.log   │
              │    sec/op    │
  Add-16        0.4828n ± 0%
  Shl-16        0.4969n ± 1%
  (略)
#+end_src

ということで、0.1ナノ秒、加算の方が早い。さらに、左ビットシフト演算は加算より計算時間にややばらつきがあることを確認した。

* 関連
- [[id:20241122T231155][KDOC 304: 加算と乗算どちらが早いか?]]。確認したきっかけとなる疑問
