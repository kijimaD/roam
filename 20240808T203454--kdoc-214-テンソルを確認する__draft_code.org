:properties:
:ID: 20240808T203454
:end:
#+title:      KDOC 214: テンソルを確認する
#+date:       [2024-08-08 Thu 20:34]
#+filetags:   :draft:code:
#+identifier: 20240808T203454

# (denote-rename-file-using-front-matter (buffer-file-name) 0)
# (save-excursion (while (re-search-backward ":draft" nil t) (replace-match "")))
# (flush-lines "^\\#\s.+?")

# ====ポリシー。
# 1ファイル1アイデア。
# 1ファイルで内容を完結させる。
# 常にほかのエントリとリンクする。
# 自分の言葉を使う。
# 参考文献を残しておく。
# 文献メモの場合は、感想と混ぜないこと。1つのアイデアに反する
# ツェッテルカステンの議論に寄与するか
# 頭のなかやツェッテルカステンにある問いとどのようにかかわっているか
# エントリ間の接続を発見したら、接続エントリを追加する。カード間にあるリンクの関係を説明するカード。
# アイデアがまとまったらアウトラインエントリを作成する。リンクをまとめたエントリ。
# エントリを削除しない。古いカードのどこが悪いかを説明する新しいカードへのリンクを追加する。
# 恐れずにカードを追加する。無意味の可能性があっても追加しておくことが重要。

# ====永久保存メモのルール。
# 自分の言葉で書く。
# 後から読み返して理解できる。
# 他のメモと関連付ける。
# ひとつのメモにひとつのことだけを書く。
# メモの内容は1枚で完結させる。
# 論文の中に組み込み、公表できるレベルである。

# ====価値があるか。
# その情報がどういった文脈で使えるか。
# どの程度重要な情報か。
# そのページのどこが本当に必要な部分なのか。

* この文書のステータス
- 作成
  - [X] 2024-08-08 貴島
- レビュー
  - [ ] <署名>
# (progn (kill-line -1) (insert (format "  - [X] %s 貴島" (format-time-string "%Y-%m-%d"))))

# 関連をつけた。
# タイトルがフォーマット通りにつけられている。
# 内容をブラウザに表示して読んだ(作成とレビューのチェックは同時にしない)。
# 文脈なく読めるのを確認した。
# おばあちゃんに説明できる。
# いらない見出しを削除した。
# タグを適切にした。
# すべてのコメントを削除した。

* 概要

機械学習に不慣れな人がまずやるべきは各ステップでのテンソルの把握、だと考えた。

* テンソル

慣れない機械学習に取り組んでいる。学習がうまくできてない、ということが何回かあった。動いてはいるのだが、数値がおかしい。エラーが出るわけではないので、そもそもおかしいか判断するのが難しいし、直す箇所を見つけるのも一苦労だ。

知見のある人に聞いて解決するうち、よく引っかかるポイントが少しわかってきた。

よく間違っていたのは、テンソルだった。特にチャンネル数の異なる画像やTiff画像をテンソルにするとき正しく扱えていなかった。熟達者がいうままにテンソル形状や型、そして値を確認することで、誤りに気づけた。

* 違い

Webサービスを作るのと機械学習とでもっとも異なるのは、エラーが出るかだ。次点に、扱うデータ形式の広さと量が異なる。

- データに起因する挙動の違いが起きやすい。データ形式を正しく理解していないと無意味な学習になる
- データの多様性を正しく理解していないと特定のデータだけ処理がおかしくなる

コンピュータのバックグラウンドを持たない人が、それらをすぐ理解できるようになる近道はわからない。確かな方法は、1つずつ解像度の高い方法で確認して確かめることだ。

例えば、このようなスクリプトでテンソルを確認しよう。

#+caption: テンソルを確認する
#+begin_src python
def print_tensor_info(tensor: torch.Tensor, name: str) -> None:
    print(
        f"{name}\t- shape: {tensor.shape}\t, dtype: {tensor.dtype}\t, min: {tensor.min().item()}, max: {tensor.max().item()}"
    )
#+end_src

重要な点は、値の範囲を確認していることだ。これがとてもわかりやすく感じる。単純にテンソルをプリントすると、値の量が多すぎて見にくく、把握しにくい。

これを使って、データの「境目」でチェックを行って何が起きているかを調べよう。

- 入力データ
- 教師データ
- 正規化した後のデータ
- 予測テンソル
- 活性化関数を適用したテンソル
- 損失関数を適用したテンソル

型だけでなく値を具体的に知ることで、思い込みからくるミスを防ぎやすい。なによりテンソルがより身近になり、動きをイメージできるようになったように思える。

* 関連
- [[id:20240207T092747][KDOC 77: 検証する方法があると理解が進む]]。検証する方法で理解が進むという点が共通している
# 関連するエントリ。なぜ関連させたか理由を書く。意味のあるつながりを意識的につくる。
# この事実は自分のこのアイデアとどう整合するか。
# この現象はあの理論でどう説明できるか。
# ふたつのアイデアは互いに矛盾するか、互いを補っているか。
# いま聞いた内容は以前に聞いたことがなかったか。
# メモ y についてメモ x はどういう意味か。
