:properties:
:ID: 20241010T004623
:end:
#+title:      KDOC 253: Goで2段階に可変長引数を渡す
#+date:       [2024-10-10 Thu 00:46]
#+filetags:   :draft:code:
#+identifier: 20241010T004623

# (denote-rename-file-using-front-matter (buffer-file-name) 0)
# (save-excursion (while (re-search-backward ":draft" nil t) (replace-match "")))
# (flush-lines "^\\#\s.+?")

# ====ポリシー。
# 1ファイル1アイデア。
# 1ファイルで内容を完結させる。
# 常にほかのエントリとリンクする。
# 自分の言葉を使う。
# 参考文献を残しておく。
# 文献メモの場合は、感想と混ぜないこと。1つのアイデアに反する
# ツェッテルカステンの議論に寄与するか
# 頭のなかやツェッテルカステンにある問いとどのようにかかわっているか
# エントリ間の接続を発見したら、接続エントリを追加する。カード間にあるリンクの関係を説明するカード。
# アイデアがまとまったらアウトラインエントリを作成する。リンクをまとめたエントリ。
# エントリを削除しない。古いカードのどこが悪いかを説明する新しいカードへのリンクを追加する。
# 恐れずにカードを追加する。無意味の可能性があっても追加しておくことが重要。

# ====永久保存メモのルール。
# 自分の言葉で書く。
# 後から読み返して理解できる。
# 他のメモと関連付ける。
# ひとつのメモにひとつのことだけを書く。
# メモの内容は1枚で完結させる。
# 論文の中に組み込み、公表できるレベルである。

# ====価値があるか。
# その情報がどういった文脈で使えるか。
# どの程度重要な情報か。
# そのページのどこが本当に必要な部分なのか。

* この文書のステータス
- 作成
  - [X] 2024-10-10 貴島
- レビュー
  - [ ] <署名>
# (progn (kill-line -1) (insert (format "  - [X] %s 貴島" (format-time-string "%Y-%m-%d"))))

# 関連をつけた。
# タイトルがフォーマット通りにつけられている。
# 内容をブラウザに表示して読んだ(作成とレビューのチェックは同時にしない)。
# 文脈なく読めるのを確認した。
# おばあちゃんに説明できる。
# いらない見出しを削除した。
# タグを適切にした。
# すべてのコメントを削除した。
* 概要
# 本文(タイトルをつける)。

[[id:7cacbaa3-3995-41cf-8b72-58d6e07468b1][Go]]の可変長引数は、関数定義側では左側に ~...~ をつけて示す(~...args~)。関数内ではスライスとして使える。

また、関数呼び出し側ではスライスの右側に ~...~ をつけてスライスの要素を可変長引数として渡せる(~slice...~)。

#+caption: 等しい2つの例。呼び出し側にはスライスで渡すか、通常の複数の引数で渡すかの選択肢がある
#+begin_src go
  package main

  import "fmt"

  // func Print(a ...any) (n int, err error) {}

  func main() {
          fmt.Print("a", "b", "c")
          fmt.Println() // 改行
          fmt.Print([]any{"a", "b", "c"}...)
  }
#+end_src

#+RESULTS:
#+begin_src
abc
abc
#+end_src

多くのユースケースをサポートする、オプショナルな項目の多いタイプのプログラムでは、この構文を多用するものがある。[fn:1]

オプショナルな項目が階層になって構成されていることもある。特定のオプショナルな項目の組み合わせを関数化して、さらにその関数にオプショナルな項目をつける、というようなことだ。そういう場合は直感的でなく、少し目を慣らさないといけない。コードで見てみる。

#+caption: 等しい2つの例
#+begin_src go
  package main

  import "fmt"

  func main() {
          run1("a", "b", "c")
          fmt.Println() // 改行
          run2("c")
  }

  func run1(opts ...string) {
          for _, str := range opts {
                  fmt.Print(str)
          }
  }

  func run2(opts ...string) {
          run1(append([]string{"a", "b"}, opts...)...)
  }
#+end_src

#+RESULTS:
#+begin_src
abc
abc
#+end_src

~run1()~ では "a", "b", "c" がオプショナルだが、 ~run2()~ では "c" だけがオプショナルになっている。 ~run2()~ では "b", "c" は自動で渡される。利用者は長大なオプショナル引数を渡すことなく、プリセットの機能をすぐ利用できる。いっぽうで、細かく引数を指定して自分のケースに合わせたい利用者の要望も満たせている。

1つずつ見る。

1. ~opts~ -> スライス
2. ~...opts~ -> スライスを展開してappendの可変長引数となる
   - ~append~ のシグネチャ ~func append(slice []Type, elems ...Type) []Type~
3. ~append([]string{"a", "b"}, opts...)~ -> これは合体したスライスとなる
   - つまり ~[]string{"a", "b", "c"}~ となる
4. ~append([]string{"a", "b"}, opts...)...~ -> スライスを展開してrun1の可変長引数となる
   - つまり ~run1("a", "b", "c")~ というように呼び出す

* 関連
# 関連するエントリ。なぜ関連させたか理由を書く。意味のあるつながりを意識的につくる。
# この事実は自分のこのアイデアとどう整合するか。
# この現象はあの理論でどう説明できるか。
# ふたつのアイデアは互いに矛盾するか、互いを補っているか。
# いま聞いた内容は以前に聞いたことがなかったか。
# メモ y についてメモ x はどういう意味か。

- [[id:20231128T074518][KDOC 59: ECSを使ってサンプルゲームを作る]]。コードを読む中でよく見かけたため、書いておくことにした

* Footnotes
[fn:1]例えば[[https://github.com/ebitenui/ebitenui][ebitenui/ebitenui]]。
