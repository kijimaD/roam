:properties:
:ID: 20230909T204817
:mtime:    20241102180226 20241028101410
:ctime:    20241028101410
:end:
#+title:      KDOC 28: 交通シミュレーションゲームを作る
#+date:       [2023-09-09 Sat 20:48]
#+filetags:   :project:
#+identifier: 20230909T204817

* この文書のステータス
- 未完成で終了した
* 概要
[[id:7c01d791-1479-4727-b076-280034ab6a40][Simutrans]]のような交通シミュレーションゲームを作成する。
* 導入
都市と交通に着目したゲームを作る。
* Tasks
** TODO 建物をエンティティ化する
:PROPERTIES:
:END:
:LOGBOOK:
CLOCK: [2023-10-10 Tue 22:49]--[2023-10-10 Tue 23:14] =>  0:25
CLOCK: [2023-10-10 Tue 09:12]--[2023-10-10 Tue 09:37] =>  0:25
CLOCK: [2023-10-10 Tue 00:47]--[2023-10-10 Tue 01:12] =>  0:25
CLOCK: [2023-10-05 Thu 20:36]--[2023-10-05 Thu 21:01] =>  0:25
CLOCK: [2023-10-05 Thu 09:10]--[2023-10-05 Thu 09:35] =>  0:25
CLOCK: [2023-10-05 Thu 00:40]--[2023-10-05 Thu 01:05] =>  0:25
CLOCK: [2023-10-04 Wed 00:01]--[2023-10-04 Wed 00:26] =>  0:25
CLOCK: [2023-10-03 Tue 09:11]--[2023-10-03 Tue 09:36] =>  0:25
CLOCK: [2023-10-03 Tue 00:19]--[2023-10-03 Tue 00:44] =>  0:25
CLOCK: [2023-10-02 Mon 22:28]--[2023-10-02 Mon 22:53] =>  0:25
CLOCK: [2023-10-02 Mon 21:52]--[2023-10-02 Mon 22:17] =>  0:25
CLOCK: [2023-10-02 Mon 21:26]--[2023-10-02 Mon 21:52] =>  0:26
CLOCK: [2023-10-02 Mon 20:58]--[2023-10-02 Mon 21:23] =>  0:25
CLOCK: [2023-10-02 Mon 08:49]--[2023-10-02 Mon 09:14] =>  0:25
CLOCK: [2023-10-02 Mon 00:21]--[2023-10-02 Mon 00:46] =>  0:25
CLOCK: [2023-10-01 Sun 23:29]--[2023-10-01 Sun 23:54] =>  0:25
CLOCK: [2023-10-01 Sun 23:01]--[2023-10-01 Sun 23:26] =>  0:25
CLOCK: [2023-10-01 Sun 22:33]--[2023-10-01 Sun 22:58] =>  0:25
CLOCK: [2023-10-01 Sun 22:02]--[2023-10-01 Sun 22:27] =>  0:25
CLOCK: [2023-10-01 Sun 19:25]--[2023-10-01 Sun 19:50] =>  0:25
:END:

建物をエンティティとして描画させる。

まずECSを導入した。
** TODO ebiten UIを使う
:PROPERTIES:
:END:
:LOGBOOK:
CLOCK: [2023-11-17 Fri 00:24]--[2023-11-17 Fri 00:49] =>  0:25
CLOCK: [2023-11-16 Thu 23:31]--[2023-11-16 Thu 23:56] =>  0:25
CLOCK: [2023-11-16 Thu 23:00]--[2023-11-16 Thu 23:25] =>  0:25
CLOCK: [2023-11-16 Thu 22:35]--[2023-11-16 Thu 23:00] =>  0:25
CLOCK: [2023-11-16 Thu 22:10]--[2023-11-16 Thu 22:35] =>  0:25
CLOCK: [2023-11-15 Wed 23:10]--[2023-11-15 Wed 23:35] =>  0:25
CLOCK: [2023-11-15 Wed 22:45]--[2023-11-15 Wed 23:10] =>  0:25
CLOCK: [2023-10-07 Sat 12:10]--[2023-10-07 Sat 12:35] =>  0:25
CLOCK: [2023-10-07 Sat 11:40]--[2023-10-07 Sat 12:05] =>  0:25
CLOCK: [2023-10-07 Sat 11:05]--[2023-10-07 Sat 11:30] =>  0:25
CLOCK: [2023-10-07 Sat 10:33]--[2023-10-07 Sat 10:58] =>  0:25
CLOCK: [2023-10-06 Fri 09:04]--[2023-10-06 Fri 09:29] =>  0:25
CLOCK: [2023-10-06 Fri 00:09]--[2023-10-06 Fri 00:34] =>  0:25
:END:
扱いづらい方法でやっているので変える。UIというか、別の箇所にも及んでいるので大変そうだ。

- ゲームステートによって常時描画するもの(メニュー・アイコンとか)と、動的に変わるもの(デバッグ表示)がある。
- デバッグメニューは頻繁に文字が書き換わるわけだが、それをいい感じにやる方法がわからないな
  - 再作成すると更新できるが、メモリリークして急速に重くなっていく
  - Update()でテキストを更新するようなフックが必要
  - デバッグ表示があったのでそれにした
- 日付を書き換える方法がわからない。ボタンはクリック時のハンドラがあるが、時間経過のハンドラはない

** TODO UIまわりをECSっぽくする
:LOGBOOK:
CLOCK: [2023-10-05 Thu 23:32]--[2023-10-05 Thu 23:57] =>  0:25
CLOCK: [2023-10-05 Thu 22:33]--[2023-10-05 Thu 22:58] =>  0:25
CLOCK: [2023-10-05 Thu 21:53]--[2023-10-05 Thu 22:18] =>  0:25
CLOCK: [2023-10-05 Thu 21:27]--[2023-10-05 Thu 21:52] =>  0:25
:END:
UIは全部構造体のフィールドとして持っている項目を描画しているという感じ。ECSっぽくないので変える。

前のローグライクでは、コンポーネントをかなり使っていた。UI描画はスタティックメソッドで、mainから呼び出す感じ。mainにあるグローバルなゲームステートによって変わるから、systemにはなくmainから呼び出す感じか。systemだと常時実行という感じ。

** TODO タイルを1次元配列にする
- 3次元は必要ない
- 2次元もループを回す手間がかかるので、1次元に入れる。ヘルパーを用意すれば扱いやすくなる
** TODO 連続建設と単体建設を分ける
道路系は範囲建設だが、建物系は単体建設になる。
** TODO バス停の詳細情報を見られるようにする
:PROPERTIES:
:END:
:LOGBOOK:
CLOCK: [2023-09-29 Fri 22:45]--[2023-09-29 Fri 23:10] =>  0:25
CLOCK: [2023-09-18 Mon 17:40]--[2023-09-18 Mon 18:05] =>  0:25
CLOCK: [2023-09-18 Mon 16:36]--[2023-09-18 Mon 17:01] =>  0:25
:END:
建設物の情報を保存する。

エンティティ化したあとにやる。
** TODO 地形に付随したものをチェックできるようにする
デバッグしやすくする。
** TODO バス停に名前がつくようにする
:PROPERTIES:
:END:
:LOGBOOK:
CLOCK: [2023-09-29 Fri 21:43]--[2023-09-29 Fri 22:08] =>  0:25
CLOCK: [2023-09-29 Fri 21:18]--[2023-09-29 Fri 21:43] =>  0:25
CLOCK: [2023-09-29 Fri 20:33]--[2023-09-29 Fri 20:58] =>  0:25
CLOCK: [2023-09-29 Fri 20:04]--[2023-09-29 Fri 20:30] =>  0:26
CLOCK: [2023-09-29 Fri 19:39]--[2023-09-29 Fri 20:04] =>  0:25
CLOCK: [2023-09-29 Fri 19:00]--[2023-09-29 Fri 19:25] =>  0:25
CLOCK: [2023-09-28 Thu 09:08]--[2023-09-28 Thu 09:33] =>  0:25
CLOCK: [2023-09-28 Thu 00:46]--[2023-09-28 Thu 01:11] =>  0:25
:END:

** TODO ebitenUIを使う
オレオレUIだからあまり綺麗じゃない。
** TODO オブジェクトを道路上に走らせる

つながっている道路だけ走れる。
** TODO 高さについて考える
どうすればいいのか見当もつかない。
** TODO つながっているを表現する(平面)
- 経路探索ライブラリがあるので、そんなに難しくない可能性がある
- 毎回道路に走るたびに乗り物に計算させてつながっているかは判定させればよさそう。つながっているかはベースの座標によって変わるので。
** TODO つながっているを表現する(立体)
異なる高さの道路は接続できない。スロープでしかつながらない。
** TODO 道路の方向を自動決定する

エンティティ化した後にやる。

設置したときに周囲8マスの状態に応じて画像を変化させる。横にあれば曲がるアイコンになるだろう。

* 参考
参考になりそうなリンクを書いておく。

タイルマップパーサ。
[[https://github.com/lafriks/go-tiled][lafriks/go-tiled: Go library to parse Tiled map editor file format (TMX) and render map to image]]

都市ゲーム。
[[https://code.rocket9labs.com/tslocum/citylimits][tslocum/citylimits: City-building simulation video game - citylimits - Rocket Nine Labs]]

経路探索ライブラリ。
[[https://github.com/beefsack/go-astar][beefsack/go-astar: Go implementation of the A* search algorithm]]
* Archives
** DONE ベースを作る
CLOSED: [2023-09-10 Sun 17:58]
:LOGBOOK:
CLOCK: [2023-09-10 Sun 13:57]--[2023-09-10 Sun 14:22] =>  0:25
CLOCK: [2023-09-10 Sun 13:29]--[2023-09-10 Sun 13:54] =>  0:25
CLOCK: [2023-09-10 Sun 12:57]--[2023-09-10 Sun 13:22] =>  0:25
CLOCK: [2023-09-10 Sun 12:20]--[2023-09-10 Sun 12:45] =>  0:25
CLOCK: [2023-09-10 Sun 11:55]--[2023-09-10 Sun 12:20] =>  0:25
CLOCK: [2023-09-09 Sat 22:28]--[2023-09-09 Sat 22:53] =>  0:25
CLOCK: [2023-09-09 Sat 21:08]--[2023-09-09 Sat 21:33] =>  0:25
:END:
参考コードを元にする。不要そうなところを削除していく。

- [X] タイルセットを変えた
** DONE 道路画像を登録する
CLOSED: [2023-09-10 Sun 19:10]
:LOGBOOK:
CLOCK: [2023-09-10 Sun 18:29]--[2023-09-10 Sun 18:54] =>  0:25
:END:

- 後から追加する方法がわからない
- 描いたほうがはやそう
  - gimpで追加した
** DONE ブルドーザーアイコンが消えた
CLOSED: [2023-09-10 Sun 23:06]
:LOGBOOK:
CLOCK: [2023-09-10 Sun 20:11]--[2023-09-10 Sun 20:36] =>  0:25
:END:

タイルセットの更新を忘れていたっぽい。Tilesで保存し直したら差分が出て直った。
** DONE バス停を作る
CLOSED: [2023-09-11 Mon 21:59]
:LOGBOOK:
CLOCK: [2023-09-11 Mon 21:30]--[2023-09-11 Mon 21:55] =>  0:25
CLOCK: [2023-09-11 Mon 20:53]--[2023-09-11 Mon 21:18] =>  0:25
CLOCK: [2023-09-11 Mon 20:27]--[2023-09-11 Mon 20:52] =>  0:25
CLOCK: [2023-09-10 Sun 20:36]--[2023-09-10 Sun 21:01] =>  0:25
CLOCK: [2023-09-10 Sun 17:59]--[2023-09-10 Sun 18:24] =>  0:25
CLOCK: [2023-09-10 Sun 17:23]--[2023-09-10 Sun 17:48] =>  0:25
:END:

とりあえず画像は後回しにして、追加してみる。
** DONE コード整理
CLOSED: [2023-09-18 Mon 16:37]
:LOGBOOK:
CLOCK: [2023-09-18 Mon 15:20]--[2023-09-18 Mon 15:45] =>  0:25
CLOCK: [2023-09-18 Mon 11:19]--[2023-09-18 Mon 11:44] =>  0:25
CLOCK: [2023-09-18 Mon 10:54]--[2023-09-18 Mon 11:19] =>  0:25
CLOCK: [2023-09-17 Sun 23:01]--[2023-09-17 Sun 23:26] =>  0:25
CLOCK: [2023-09-17 Sun 22:32]--[2023-09-17 Sun 22:57] =>  0:25
CLOCK: [2023-09-17 Sun 22:07]--[2023-09-17 Sun 22:32] =>  0:25
CLOCK: [2023-09-17 Sun 21:30]--[2023-09-17 Sun 21:55] =>  0:25
CLOCK: [2023-09-16 Sat 11:35]--[2023-09-16 Sat 12:00] =>  0:25
CLOCK: [2023-09-16 Sat 11:10]--[2023-09-16 Sat 11:35] =>  0:25
CLOCK: [2023-09-12 Tue 23:15]--[2023-09-12 Tue 23:41] =>  0:26
CLOCK: [2023-09-12 Tue 22:50]--[2023-09-12 Tue 23:15] =>  0:25
CLOCK: [2023-09-12 Tue 00:22]--[2023-09-12 Tue 00:47] =>  0:25
:END:
全体ざっくり読んでみる。
** DONE 自動リリース
CLOSED: [2023-09-18 Mon 17:14]
:LOGBOOK:
CLOCK: [2023-09-18 Mon 16:11]--[2023-09-18 Mon 16:36] =>  0:25
CLOCK: [2023-09-18 Mon 15:46]--[2023-09-18 Mon 16:11] =>  0:25
:END:
設定する。
** DONE CIチェック
CLOSED: [2023-09-18 Mon 17:40]
:LOGBOOK:
CLOCK: [2023-09-18 Mon 17:14]--[2023-09-18 Mon 17:40] =>  0:26
:END:
ライブラリの依存関係が多いので、イメージを作成する。
** DONE バス停の位置がずれている
CLOSED: [2023-09-29 Fri 21:48]
:LOGBOOK:
CLOCK: [2023-09-11 Mon 23:45]--[2023-09-12 Tue 00:10] =>  0:25
CLOCK: [2023-09-11 Mon 22:01]--[2023-09-11 Mon 22:26] =>  0:25
:END:
設置時にカーソルとずれているのを直す。

建物は高さが違う。描画時に高く表示されていた。
** DONE バス停を道路と重ねられるようにする
CLOSED: [2023-09-29 Fri 21:49]
透過して重ねる。

- TilesとTilesImage
** DONE セルの大きさを統一する
CLOSED: [2023-09-18 Mon 15:21]
:LOGBOOK:
CLOCK: [2023-09-10 Sun 19:29]--[2023-09-10 Sun 19:54] =>  0:25
:END:
今はスナップの精度が違うのでずれる。同じように建設してもずれる。

- 道路を4マスから1マスにした。自分で建てる建物は1マスでいいだろう。
** DONE タイル画像を直接触っている部分があり扱いにくい
CLOSED: [2023-10-01 Sun 19:24]
:PROPERTIES:
:Effort:   10:00
:END:
:LOGBOOK:
CLOCK: [2023-10-01 Sun 18:47]--[2023-10-01 Sun 19:12] =>  0:25
CLOCK: [2023-10-01 Sun 18:03]--[2023-10-01 Sun 18:28] =>  0:25
CLOCK: [2023-10-01 Sun 17:38]--[2023-10-01 Sun 18:03] =>  0:25
CLOCK: [2023-10-01 Sun 16:29]--[2023-10-01 Sun 16:54] =>  0:25
CLOCK: [2023-10-01 Sun 14:57]--[2023-10-01 Sun 15:22] =>  0:25
CLOCK: [2023-10-01 Sun 00:39]--[2023-10-01 Sun 01:04] =>  0:25
CLOCK: [2023-09-30 Sat 23:02]--[2023-09-30 Sat 23:27] =>  0:25
CLOCK: [2023-09-30 Sat 22:37]--[2023-09-30 Sat 23:02] =>  0:25
CLOCK: [2023-09-30 Sat 22:12]--[2023-09-30 Sat 22:37] =>  0:25
CLOCK: [2023-09-30 Sat 21:47]--[2023-09-30 Sat 22:12] =>  0:25
:END:
タイル画像が平原なら〜という箇所が大量に存在する。タイル画像ではなくオブジェクトで判定したいよな。

- 地形もオブジェクトとする(エンティティではない)
- 建物もエンティティとする
  - Renderコンポートネントを登録して描画する
- diggerではタイルは配列で表現されていた。2次元配列ではない。そうだ、タイルに関しては3次元でなくてよい。各座標に1つしかないのだから
- タイルは配列にする
- 描画エンティティが座標と高さを持つようにする
** CLOSE マップと同じにできないのか
CLOSED: [2023-10-01 Sun 19:25]

属性とマップの画像を別々に持っている。いちいちfor文で取り出している。
** DONE バス停を道路上だけに建設できるようにする
CLOSED: [2023-10-01 Sun 19:26]
:PROPERTIES:
:Effort:   2:00
:END:
:LOGBOOK:
CLOCK: [2023-09-30 Sat 11:41]--[2023-09-30 Sat 12:06] =>  0:25
CLOCK: [2023-09-30 Sat 01:03]--[2023-09-30 Sat 01:28] =>  0:25
CLOCK: [2023-09-30 Sat 00:28]--[2023-09-30 Sat 00:53] =>  0:25
:END:

tiletype分岐させることで、バス停を道路上へ建設できるようになった。
** DONE デプロイする
CLOSED: [2023-10-01 Sun 22:01]
:PROPERTIES:
:Effort:   1:00
:END:
:LOGBOOK:
CLOCK: [2023-10-01 Sun 20:12]--[2023-10-01 Sun 20:37] =>  0:25
:END:

先例があるので簡単にできそう。
** DONE ECSまわりのコードを読む
CLOSED: [2023-10-05 Thu 00:39]
:PROPERTIES:
:Effort:   2:00
:END:
:LOGBOOK:
CLOCK: [2023-09-30 Sat 19:59]--[2023-09-30 Sat 20:24] =>  0:25
CLOCK: [2023-09-30 Sat 18:31]--[2023-09-30 Sat 18:56] =>  0:25
CLOCK: [2023-09-30 Sat 18:05]--[2023-09-30 Sat 18:30] =>  0:25
:END:
