:properties:
:ID: 20240605T103458
:end:
#+title:      KDOC 184: 『イラストでわかるDockerとKubernetes』
#+date:       [2024-06-05 Wed 10:34]
#+filetags:   :draft:book:
#+identifier: 20240605T103458

# (denote-rename-file-using-front-matter (buffer-file-name) 0)
# (save-excursion (while (re-search-backward ":draft" nil t) (replace-match "")))
# (flush-lines "^\\#\s.+?")

# ====ポリシー。
# 1ファイル1アイデア。
# 1ファイルで内容を完結させる。
# 常にほかのエントリとリンクする。
# 自分の言葉を使う。
# 参考文献を残しておく。
# 文献メモの場合は、感想と混ぜないこと。1つのアイデアに反する
# ツェッテルカステンの議論に寄与するか
# 頭のなかやツェッテルカステンにある問いとどのようにかかわっているか
# エントリ間の接続を発見したら、接続エントリを追加する。カード間にあるリンクの関係を説明するカード。
# アイデアがまとまったらアウトラインエントリを作成する。リンクをまとめたエントリ。
# エントリを削除しない。古いカードのどこが悪いかを説明する新しいカードへのリンクを追加する。
# 恐れずにカードを追加する。無意味の可能性があっても追加しておくことが重要。

# ====永久保存メモのルール。
# 自分の言葉で書く。
# 後から読み返して理解できる。
# 他のメモと関連付ける。
# ひとつのメモにひとつのことだけを書く。
# メモの内容は1枚で完結させる。
# 論文の中に組み込み、公表できるレベルである。

# ====価値があるか。
# その情報がどういった文脈で使えるか。
# どの程度重要な情報か。
# そのページのどこが本当に必要な部分なのか。

* この文書のステータス
:LOGBOOK:
CLOCK: [2024-06-05 Wed 21:30]--[2024-06-05 Wed 21:55] =>  0:25
CLOCK: [2024-06-05 Wed 21:05]--[2024-06-05 Wed 21:30] =>  0:25
CLOCK: [2024-06-05 Wed 20:30]--[2024-06-05 Wed 20:55] =>  0:25
CLOCK: [2024-06-05 Wed 17:01]--[2024-06-05 Wed 17:26] =>  0:25
CLOCK: [2024-06-05 Wed 16:22]--[2024-06-05 Wed 16:48] =>  0:26
CLOCK: [2024-06-05 Wed 15:15]--[2024-06-05 Wed 15:40] =>  0:25
CLOCK: [2024-06-05 Wed 11:17]--[2024-06-05 Wed 11:42] =>  0:25
CLOCK: [2024-06-05 Wed 10:36]--[2024-06-05 Wed 11:01] =>  0:25
:END:
- 作成
  - [X] 2024-06-05 貴島
- レビュー
  - [ ] <署名>
# (progn (kill-line -1) (insert (format "  - [X] %s 貴島" (format-time-string "%Y-%m-%d"))))

# 関連をつけた。
# タイトルがフォーマット通りにつけられている。
# 内容をブラウザに表示して読んだ(作成とレビューのチェックは同時にしない)。
# 文脈なく読めるのを確認した。
# おばあちゃんに説明できる。
# いらない見出しを削除した。
# タグを適切にした。
# すべてのコメントを削除した。
* 概要
[[https://gihyo.jp/book/2024/978-4-297-14055-7][イラストでわかるDockerとKubernetes]]は、コンテナ関係を解説する本。使い方というよりは、コンテナの仕組みやエコシステムについて解説している。
* メモ
- コンテナは「変更差分の集まり」である。各変更差分はレイヤーと呼ばれる。変更差分を適用していった結果として得られるファイル群を、ルートファイルシステムとして用いて実行される、という(p49)
- あるイメージをコンテナから複数実行する場合でも、それらコンテナ同士で共通のレイヤ群はコピーされず共有される。また、レイヤ群は読み取り専用、直接読み込みができない状態でコンテナ間で共有されているため、そのレイヤの内容が他のコンテナによって意図せずに書き換えられることはない、という(p67)
- overlayファイルシステムはあるディレクトリを別のディレクトリへ重ね合わせ、その重ね合わせた結果をマウントできるファイルシステム、だという(p71)
- OCIランタイムは、ホストから隔離された実行環境をコンテナとして作り出したり、その直接操作の手段を提供するソフトウェア。高位のランタイムから指示を受け、ホストから隔離された実行環境をコンテナとして作り出しその直接操作の手段を与える。仕様がOpen Container Initiativeにより仕様が定められている、という(p82)
- CRIランタイムはKubernetesからPod操作に関する指示を受け、それに従ってイメージをレジストリから取得したり、コンテナ群をPodとして作成したりするソフトウェアである、という(p133)
- コンテナ関係の階層。ユーザ/kubelet -> 高レベル(CRI)ランタイム -> 低レベル(OCI)ランタイム -> Containers/Pod(p141)
- CRIランタイムに対する指示を行うためのインターフェースはgRPC APIとして[[id:81b73757-21b3-438c-ab65-680b5ad88a1b][Kubernetes]]プロジェクトで定められており、「Container Runtime Interface」と呼ばれる、という(p144)
- Filesystem bundleの実態(p161)
  - コンテナのルートファイルシステム
  - コンテナ実行環境の設定ファイル
- OCI Image Specification はOCIによって策定されているコンテナイメージの標準仕様(p164)

* 関連
なし。
