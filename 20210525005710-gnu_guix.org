:PROPERTIES:
:ID:       d694ecaa-6a8b-4669-a95c-f76de6dcbd2c
:END:
#+title: GNU Guix
* 概要
Gnu GuixはOSおよびパッケージ管理システム。

- システム設定をリポジトリで管理できる
- ロールバックできる
- マシンによって設定を変えることも可能
- 依存性に対する完全なコントロール。完全に再現できる

などの先進的な機能がある。[[id:53a7a781-8398-4069-8735-6ac5b8c3bc05][Scheme]]で設定ファイルを書ける。
* memo
** guix home とsystem
homeコマンドではユーザ個別の設定ができる。
インストールするソフトウェア、環境変数、起動サービスなど。
[[https://guix.gnu.org/manual/devel/en/html_node/Home-Configuration.html][Home Configuration (GNU Guix Reference Manual)]]

いっぽうでsystemの方では、ユーザ作成やパーティション、キーボードレイアウトなどシステム全体にかかることを設定できる。
** BIOSに出ないとき
Guixに限ったことではないが、Linuxをインストールしたドライブを認識しないときは、BIOSモードを確認する。
UEFIモードだとLinuxを認識してくれない。
レガシーモードにすると認識してくれ、起動もできる。
** 基本のコマンド
#+begin_src shell
  guix pull --news
  guix install {package}
  guix remove {package}
  guix package --list-generations
  guix package --list-installed
  guix package --switch-generation=42
  guix package --roll-back

  guix package --export-manifest
  guix refresh # 更新
#+end_src
** 独立環境
#+begin_src shell
  guix environment
#+end_src
を使う。
https://guix.gnu.org/manual/en/html_node/Invoking-guix-environment.html
** 詳しい解説
usbメモリーからインストールする方法をわかりやすく解説。

#+begin_quote
https://github.com/daviwil/dotfiles/blob/master/Systems.org (動画)
https://www.youtube.com/watch?v=oSy-TmoxG_Y
https://systemcrafters.cc/craft-your-system-with-guix/full-system-install/ (↑メモ)
#+end_quote

- ブートusb用意
- インストール(TTY作業)
- ログイン(以後、GUI)
- パスワード設定
- guix設定ファイル準備(etcから移す)

#+begin_src shell
mkdir -p ~/.config/guix
cd ~/.config/guix
cp /etc/channels.scm .
cp /etc/config.scm ./system.scm
chmod +w channels.scm
#+end_src

- commit削除
- アップデート

#+begin_src shell
guix pull
sudo -E guix system reconfigure ~/.config/guix/system.scm
#+end_src

- インストールパッケージをすべてアップデート
#+begin_src shell
guix package -u
#+end_src

** 日本語入力
#+caption: 参考URL
#+begin_quote
https://debbugs.gnu.org/cgi/bugreport.cgi?bug=35610#38
#+end_quote

言語設定を日本語にしただけでは入力や表示ができない。手動で設定する必要がある。
#+begin_src shell
  guix package -i ibus ibus-anthy font-adobe-source-han-sans
#+end_src

~.bash_profile~ などに追加。
#+begin_src emacs-lisp
  export GUIX_GTK2_IM_MODULE_FILE="$HOME/.guix-profile/lib/gtk-2.0/2.10.0/immodules-gtk2.cache"
  export GUIX_GTK3_IM_MODULE_FILE="$HOME/.guix-profile/lib/gtk-3.0/3.0.0/immodules-gtk3.cache"
#+end_src

ibusのキャッシュを削除する(重要)。
#+begin_src shell
  rm -rf ~/.cache/ibus
#+end_src

再起動する。
#+begin_src shell
  ibus-setup
#+end_src
一覧にJapanese(Anthy)が追加されているので、選択する。

- インプットメソッド切り替えはKeyboard Shortcutからできる。
- ibus設定画面はGNOME検索には出てこない。言語選択のJapanese(Anthy)歯車から設定できる。
** vterm
vtermのコンパイルにCmakeが必要。
#+begin_src shell
guix install cmake
#+end_src

#+begin_src sh
guix install nss-certs
export SSL_CERT_DIR="$HOME/.guix-profile/etc/ssl/certs"
export SSL_CERT_FILE="$HOME/.guix-profile/etc/ssl/certs/ca-certificates.crt"
export GIT_SSL_CAINFO="$SSL_CERT_FILE"
export CURL_CA_BUNDLE="$HOME/.guix-profile/etc/ssl/certs/ca-certificates.crt"
#+end_src
** caps入れ替え
system.scm書き換えでできるはずだが、反映させる方法がわからない。
gnomeのコマンドを1回打って代用する。
#+begin_src shell
  gsettings set org.gnome.desktop.input-sources xkb-options "['ctrl:swapcaps']"
#+end_src

デスクトップ環境関係なくできる↓。
#+begin_src shell
  /usr/bin/setxkbmap -option "ctrl:nocaps"
#+end_src
** パッケージを一括インストール
#+begin_src shell
  guix package -m ~/dotfiles/.config/guix/manifests/desktop.scm
#+end_src
** フローメモ
ctrl入れ替え → syncthingインストールと設定 → ssh鍵 → sshインストール。
gitインストール → dotfilesをclone。
** 自動起動
ファイルを配置して自動実行されるようにする。

サービス系の自動起動はguixが利用しているサービスマネージャ[[https://www.gnu.org/software/shepherd/][GNU Shepherd]]で行う。
https://github.com/kijimaD/dotfiles/blob/develop/.config/shepherd/init.scm
このように追加しておくと自動で実行する。
ただし、shepherd自体が自動で起動しないよう。デスクトップ環境に合わせて、自動実行させるようにする。
https://github.com/kijimaD/dotfiles/blob/develop/.config/autostart/gnome.desktop
実行権限をつけること。
** Gnomeで Alt + Shiftが設定されてしまう問題
いつの間にか、Alt+Shiftでinput method切り替えになっていて不便なことになっていた。
いつからかは不明。dotfilesの影響か、そうでないかもよくわからない。
gnome-tweaksをインストールしてAdditional OptionsにAlt+Shiftオプションがあるのでオフにした。(Emacs inputの設定項目があったので選択しておいた。)

https://askubuntu.com/questions/967364/ubuntu-17-10-and-later-cant-change-the-input-switching-shortcut-to-altshift

この辺configにまとめられないのか。
gnome使いたくないな。

ibus-anthyのショートカット一覧。
https://wiki.ubuntulinux.jp/UbuntuTips/JapaneseEnvironment/IbusAnthy#Setting
** AnthyにC-c C-j を奪われる問題
anthyにC-c C-jが奪われるようになった。設定で変えても変更が反映されない。
まあ、英語に切り替えてからやればいいか。
クリーンインストールすると解決する問題か。

C-c C-jを押すと無変換モードになるので、変換されないときは再度C-c C-jを押す必要がある。
** Anthyの入力モード切り替え
たまにカタカナ入力なって困る。
~ctrl+.~ で入力モードを順番に切り替える。
** Ruby環境
Guixがgemをサポートしているので、RVM, rbenv, bundlerは必要ないよう。
https://git.genenetwork.org/pjotrp/guix-notes/src/branch/master/RUBYGEMS-Nokogiri.org#headline-33

だがよくわからない。ひどく面倒そうな環境変数を追加しているのを見て、これは間違ったアプローチだと思った。
npmでlintは普通にできたので、同じようにできると思ったのだが。
** wifi
#+begin_src shell
nm-connection-editor
#+end_src
* 参考リンク
概念がわかりやすいPDF。
https://archive.fosdem.org/2016/schedule/event/deployments_with_gnu_guix/attachments/slides/1086/export/events/attachments/deployments_with_gnu_guix/slides/1086/reproducible_deployments_gnu_guix.pdf

よくわからないので実際の例を見てみる。

ビルドしてる。
https://notabug.org/mthl/cuirass

ノート。
https://github.com/pjotrp/guix-notes/blob/master/RUBY.org

System Crafters.
https://www.youtube.com/channel/UCAiiOTio8Yu69c3XnR7nQBQ
https://github.com/daviwil/dotfiles

guix-works。開発環境として使うための情報が豊富。
https://www.draketo.de/software/guix-work.html
* Task
** TODO [[id:1658782a-d331-464b-9fd7-1f8233b8b7f8][Docker]]を起動できるようにする
** TODO インストールディスクを作成する(いちいち最初からするのが面倒なので)
:LOGBOOK:
CLOCK: [2022-09-11 Sun 09:37]--[2022-09-11 Sun 10:02] =>  0:25
:END:
すべて整備された状態でクリーンインストールできるようにしたい。
おそらくイメージを作るとかそういうのができるはず。system.scmではパーティションやユーザ名を入力するのだから。
** TODO あるいはそれまでのつなぎで完全クローンを作成しておく
少なくとも今はうまく動いてるので。
** TODO i3のmod keyを変更する
AltとSuperの位置が近すぎて、workspaceを打ち間違う。
** TODO ibus設定をconfigで
日本語入力のときのスペースが全角になってうざい。
configで挙動を変更できないのか。
** TODO emacs-exwmで日本語入力できるようにする
例によって日本語入力ができない。
Emacs以外ではできてるので、やはりi3と同じ。
最初に起動するEmacsで環境変数を指定できれば解決なのだが。
インストールした最初からできたので、どこで制御してるのかわからない。

i3ではconfigに環境変数入力 && emacs を直書きすることができる。emacs-exwmでは最初に起動するEmacsを記述してる箇所はどこにあるんだろう。
** TODO メインPCのGuix完全移行
guixを使うようにする。

- 日本語入力
- Bluetooth
- Chrome
- Zoom

あたりをどうするのかが気になる。

* Archives
** DONE npmパッケージ
CLOSED: [2021-08-15 Sun 22:38]
#+begin_src shell
  guix install node
  npm install npm
  npm install
  npx textlint .*org
#+end_src
** DONE キー設定(caps入れ替え)
CLOSED: [2021-08-08 Sun 23:31]
一度Gnomeコマンドを打つ必要がある。
システムレベルで入れ替えたいができてない。
** DONE フォントインストール
CLOSED: [2021-08-08 Sun 23:31]
dotfilesと統合して簡単に。
** DONE git
CLOSED: [2021-08-08 Sun 23:32]
gitをインストール。
** DONE ssh
CLOSED: [2021-08-08 Sun 23:32]
open-sshをインストール。
** DONE .emacs.d
CLOSED: [2021-08-08 Sun 23:32]
セットアップ完了。
** DONE dotfiles
CLOSED: [2021-08-08 Sun 23:32]
stowインストール、セットアップ完了。
** DONE syncthing
CLOSED: [2021-08-08 Sun 23:32]
単にインストールするだけ、コード。
** DONE 日本語入力
CLOSED: [2021-08-08 Sun 23:32]
anthyをインストール、コード化。
** DONE syncthingなどの自動起動
CLOSED: [2021-08-08 Sun 23:32]
shepherdでやるように。コード化。
** DONE vtermのコンパイルができない
CLOSED: [2021-08-08 Sun 23:36]
guixインストールした。
** DONE emacsqlが利用できない
CLOSED: [2021-08-08 Sun 23:35]
guixインストールするように。
** DONE migemoが使えない
CLOSED: [2021-08-09 Mon 11:02]
インストールされてない環境では読み込まない、などの対応が必要。
コピペしたぽいコードはちゃんと対応されてたが、対応コードの外側でrequireしたためどの環境でも読み込むようになっていた。修正した。
** DONE パッケージリストから一気にインストールできるようにする。
CLOSED: [2021-08-09 Mon 13:28]
desktop.scmを作成した。これで必要なパッケージを一気に導入できる。
** DONE システムビルド時にインストールさせたい
CLOSED: [2021-08-10 Tue 00:09]
パッケージ群をまとめてインストールするにはdotfileをcloneして実行すればいい。が、それをするためにsyncthingやgitをインストールする必要がある。
ビルド時にインストールさせたい。
よくわからんのでmakefileを作成した。
** DONE org-roamが使えない
CLOSED: [2021-08-11 Wed 23:26]
org-roamのバージョンが上がったためだった。コマンドが変わっていた。
逆にMintの方が古いままになっているので、そっちを直す必要がある。
もう大体同じことができるので乗り換えてもいい。
** DONE サービスが起動しないことがある
CLOSED: [2021-08-13 Fri 14:37]
ibus、syncthingが起動直後は動いているのにいつのまにか止まっている。

1. i3ではshepherdを実行してなかった。
2.ログをとってみてみると、 ~ibus-daemon -d~ はダメで、 ~ibus-daemon~ とする必要がある。つまりふつうに実行してそこでコンソールが止まる形式で実行する必要がある。
** DONE 画面ロック
CLOSED: [2021-08-13 Fri 14:38]
時間経過で自動画面ロックしてくれないことに気づいた。
xautolockを入れることで解決した。
** DONE Emacsで日本語入力
CLOSED: [2021-08-14 Sat 00:37]
i3-wm + ibus-anthy + Emacsで日本語入力ができない問題。
この組み合わせでだけ起きる。

Emacsだけならともかく、ほかのブラウザなどの操作と一貫性がなくなるのを避けたい。
ほかにも発生する人がいた。だいたい同じ環境変数の定義を示していて、いくつか試すなかでなんとかうまくいった。

https://raawaa.github.io/2016/05/05/input-with-ibus-on-emacs/

#+begin_src shell
export LC_CTYPE=ja_JP.UTF-8
export GTK_IM_MODULE=ibus
export QT_IM_MODULE=ibus
export XMODIFIERS=@im=ibus
#+end_src

重要なのは、この環境変数が評価されているセッションでEmacsを実行すること。
ibus側の設定ではなく、Emacs側にinput methodを教えてあげる環境変数、ということだ。
上をターミナルで実行してそのままemacsを実行すると、たぶんうまくいく。

それを確かめてから、あとは ~.bashrc~ に書き込む。ターミナルでemacsを起動すると日本語が打てる。
ランチャーから起動すると打てないので、ランチャー側を少しいじる必要がある。
** DONE ibusは透過させないようにする
CLOSED: [2021-08-17 Tue 08:11]
見えにくいので。
** DONE suspendできるようにする
CLOSED: [2021-08-17 Tue 20:26]
suspendボタンをpolybarに追加した。
** DONE 仮想環境の使い方
CLOSED: [2021-08-19 Thu 00:53]
gemとかnpmを使うときにどうしたらいいのか。
#+begin_src shell
  guix environment -C guix --network --ad-hoc ruby ruby-sinatra
#+end_src
みたく、仮想環境が作れるのだが、実際どう使えばいいのかわからない。

当面はディレクトリにインストールしてそこで使うようにすればよい。
グローバルにインストールしなければ普通に使える。
** DONE 使えないキーがある
CLOSED: [2021-08-21 Sat 02:37]
たとえばM+<が使えない。単に ~<~ 入力と判定されてしまう。
alt+shiftが奪われてた問題と共通してるように見える。

system.scmの "grp:alt_shift_toggle" を消してreconfigureしたら直った。
理解してない設定は危険だな。
** DONE 何かの拍子にカタカナ入力になってしまう
CLOSED: [2022-09-11 Sun 09:37]
ibusの何かショートカットを押している。
~Ctrl+,~ だった。
** DONE roamでセーブプロンプトが出る
CLOSED: [2022-09-11 Sun 09:37]
とてもうざい。

時間経過で回復した。
* References
** [[https://savannah.gnu.org/maintenance/UsingGit/][UsingGit]]
guixのリポジトリ。
** [[https://guix.gnu.org/blog/2022/online-guix-days-2022-announcement-2/][Online Guix Day Conference: schedule released! — 2022 — Blog — GNU Guix]]
カンファレンス2022。
** [[https://guix.gnu.org/blog/2022/online-guix-days-2022-announcement-1/][Announcing the second online Guix Days — 2022 — Blog — GNU Guix]]
** [[https://www.youtube.com/watch?v=7ZdMRLPZhFs][5 Reasons to Try Guix in 2022 - YouTube]]
[[id:fa497359-ae3f-494a-b24a-9822eefe67ad][System Crafters]]の動画。
Guixを使うべき理由。仮想マシン上で実際に試す。
** [[https://guix.gnu.org/manual/devel/en/html_node/Translating-Guix.html][Translating Guix (GNU Guix Reference Manual)]]
翻訳によるコミットのやり方。
** [[https://nonguix.org/][Cuirass]]
guixのチャンネル。
** [[https://wiki.ubuntulinux.jp/UbuntuTips/JapaneseEnvironment/IbusAnthy][UbuntuTips/JapaneseEnvironment/IbusAnthy - Ubuntu Japanese Wiki]]
IME Anthyのショートカット一覧。
** [[https://www.draketo.de/software/guix-work.html][Using GNU Guix for software development]]
