:properties:
:ID: 20240720T194224
:end:
#+title:      KDOC 204: 知らない分野の学びかた
#+date:       [2024-07-20 Sat 19:42]
#+filetags:   :draft:essay:
#+identifier: 20240720T194224

# (denote-rename-file-using-front-matter (buffer-file-name) 0)
# (save-excursion (while (re-search-backward ":draft" nil t) (replace-match "")))
# (flush-lines "^\\#\s.+?")

# ====ポリシー。
# 1ファイル1アイデア。
# 1ファイルで内容を完結させる。
# 常にほかのエントリとリンクする。
# 自分の言葉を使う。
# 参考文献を残しておく。
# 文献メモの場合は、感想と混ぜないこと。1つのアイデアに反する
# ツェッテルカステンの議論に寄与するか
# 頭のなかやツェッテルカステンにある問いとどのようにかかわっているか
# エントリ間の接続を発見したら、接続エントリを追加する。カード間にあるリンクの関係を説明するカード。
# アイデアがまとまったらアウトラインエントリを作成する。リンクをまとめたエントリ。
# エントリを削除しない。古いカードのどこが悪いかを説明する新しいカードへのリンクを追加する。
# 恐れずにカードを追加する。無意味の可能性があっても追加しておくことが重要。

# ====永久保存メモのルール。
# 自分の言葉で書く。
# 後から読み返して理解できる。
# 他のメモと関連付ける。
# ひとつのメモにひとつのことだけを書く。
# メモの内容は1枚で完結させる。
# 論文の中に組み込み、公表できるレベルである。

# ====価値があるか。
# その情報がどういった文脈で使えるか。
# どの程度重要な情報か。
# そのページのどこが本当に必要な部分なのか。

* この文書のステータス
- 作成
  - [X] 2024-07-21 貴島
- レビュー
  - [ ] <署名>
# (progn (kill-line -1) (insert (format "  - [X] %s 貴島" (format-time-string "%Y-%m-%d"))))

# 関連をつけた。
# タイトルがフォーマット通りにつけられている。
# 内容をブラウザに表示して読んだ(作成とレビューのチェックは同時にしない)。
# 文脈なく読めるのを確認した。
# おばあちゃんに説明できる。
# いらない見出しを削除した。
# タグを適切にした。
# すべてのコメントを削除した。
* 学びかた
# 本文(タイトルをつける)。

これまでコンピュータやプログラミングを学ぶとき、何かを実際作ってみることで、体で覚えていくことが多かった。体系だった専門教育を受けたことはない。

最近仕事で機械学習を勉強したり、趣味でCPUの本を読んでいる。それらのより体系的な知識を必要とする分野に対する、自分のアプローチはあまりうまくいっていないと感じていた。数ヶ月取り組んだ結果、取っ掛かりをつかんだように思えた。

- 何がわからないのかを質問文にする
  - 初心者レベルのほとんどの質問は、そのままChatGPTに質問すればわかる
  - ChatGPTの回答を読んでもわからないなら、さらに分解して質問するかグーグル検索する
  - 焦らない。数回読んだり調べると基礎的な言葉や概念を覚えて、土台にして応用的なことを学べるようになっていく
- わからないところは飛ばして読んで全体像を掴む、という考え方もあるが、自分の場合これはうまくいかない。飛ばして読むと後の部分がわかるようになることがない。読んでわからない部分があまりに多いなら、まだその本を読むべき段階ではない。もっとやさしい本に取り組むべきである
- 同じテーマの違う本を読むと、復習になってよいのと違う観点で学べてよい。退屈さも感じない
- 脳内ペア読書する。「ここはわかる」「これはこういうことだ」「どういうことだ」と言葉に出して考えるとなんとなく読み飛ばすのを避けやすい
- 自分は作って学ぶスタイルの本と、モチベーション上相性がよいことが多い。ただ読むしかないと退屈に感じる。具体的に作っていって、親しみを感じると学びやすい。ただ、手順どおりに作っただけで応用できるくらいに学べてはいないこともある
- 分野によっては、背後にある知識が大きすぎて作れないことがある。その場合はただ読んで全体像を掴む時間が必要になる。理論と実践をバランスよく交互にやっていくとよい
- はやくアウトプットしようと焦らない。しっかり本の内容を理解しないことには、アウトプットはできない(写経くらいしかできないだろう)。手っ取り早く何かやった気になっても意味はない

プログラム関係の本の場合。

- コードのついた本は、コードを絶対に読むべきである。むしろコードが本体であると考えて、コードを理解するために本文を読んでいく
- 少しコードを変えて実験したり、コードにコメントをつけていくとよい

* 関連
- [[id:20240523T005146][KDOC 177: 『モブプログラミング・ベストプラクティス』]]。一人で学ぶときにもモブプロのテクニックは参考になる
# 関連するエントリ。なぜ関連させたか理由を書く。意味のあるつながりを意識的につくる。
# この事実は自分のこのアイデアとどう整合するか。
# この現象はあの理論でどう説明できるか。
# ふたつのアイデアは互いに矛盾するか、互いを補っているか。
# いま聞いた内容は以前に聞いたことがなかったか。
# メモ y についてメモ x はどういう意味か。
