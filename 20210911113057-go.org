:PROPERTIES:
:ID:       7cacbaa3-3995-41cf-8b72-58d6e07468b1
:END:
#+title: Go
* 概要
Go言語はGoogleによって開発された[[id:868ac56a-2d42-48d7-ab7f-7047c85a8f39][Programming Language]]。[[id:1658782a-d331-464b-9fd7-1f8233b8b7f8][Docker]]はGoで書かれている。シンプルさをコンセプトにしている。シンプルすぎて必要な機能が足りてない、という批判もあるくらい。
* Memo
** 基本事項

Goでは、最初の文字が大文字で始まる名前は、外部のパッケージから参照できるエクスポートされた名前。例えばPiはmathパッケージでエクスポートされる。

#+begin_src go
  package main
  import (
          "fmt"
          "math"
  )
  func main() {
          fmt.println(Math.pi)
  }
#+end_src

- メソッドの宣言には値レシーバ、ポインタレシーバの2つがある。混在させるべきではない
  - 変数レシーバではメソッドの操作は元の変数のコピーを操作する
  - ポインタレシーバでは、ポインタを使うので元の変数を変更できる
- ポインタレシーバを使う2つの理由
  - メソッドがレシーバが指す先の変数を変更するため
  - メソッドの呼び出し毎に変数のコピーを避けるため

** 基本コマンド

#+caption: ビルド+実行
#+begin_src shell
go run hello.go
#+end_src

[[id:1ad8c3d5-97ba-4905-be11-e6f2626127ad][Emacs]] dap-modeでデバッガ起動。行の横をクリックしてブレークポイントをセットしたのち、コマンド実行。

#+caption: デバッグ実行
#+begin_src emacs-lisp
M-x dap-debug
#+end_src

* Tasks
** TODO [[https://swet.dena.com/entry/2021/12/07/123000][「テスタビリティの高いGoのAPIサーバを開発しよう」というハンズオンを公開しました - DeNA Testing Blog]]
GoのAPIハンズオン。
** WIP [[https://go-tour-jp.appspot.com/list][A Tour of Go]]
:LOGBOOK:
CLOCK: [2022-09-11 Sun 15:02]--[2022-09-11 Sun 15:27] =>  0:25
CLOCK: [2022-09-11 Sun 14:33]--[2022-09-11 Sun 14:58] =>  0:25
CLOCK: [2022-09-11 Sun 10:03]--[2022-09-11 Sun 10:28] =>  0:25
CLOCK: [2022-09-10 Sat 21:18]--[2022-09-10 Sat 21:43] =>  0:25
CLOCK: [2022-09-10 Sat 20:50]--[2022-09-10 Sat 21:15] =>  0:25
CLOCK: [2022-09-10 Sat 20:24]--[2022-09-10 Sat 20:49] =>  0:25
CLOCK: [2022-09-10 Sat 18:48]--[2022-09-10 Sat 19:13] =>  0:25
CLOCK: [2022-09-10 Sat 18:16]--[2022-09-10 Sat 18:41] =>  0:25
CLOCK: [2022-09-10 Sat 17:51]--[2022-09-10 Sat 18:16] =>  0:25
CLOCK: [2022-09-10 Sat 16:44]--[2022-09-10 Sat 17:09] =>  0:25
:END:
最初のチュートリアル。
** TODO [[https://www.amazon.co.jp/Go%E3%81%AA%E3%82%89%E3%82%8F%E3%81%8B%E3%82%8B%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0-%E6%B8%8B%E5%B7%9D-%E3%82%88%E3%81%97%E3%81%8D/dp/4908686033/ref=sr_1_3?keywords=go+%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0&qid=1653145833&sprefix=go+%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%2Caps%2C206&sr=8-3][Goならわかるシステムプログラミング | 渋川 よしき, ごっちん |本 | 通販 - Amazon.co.jp]]
:LOGBOOK:
CLOCK: [2022-09-09 Fri 12:43]--[2022-09-09 Fri 13:08] =>  0:25
CLOCK: [2022-09-09 Fri 12:03]--[2022-09-09 Fri 12:28] =>  0:25
CLOCK: [2022-09-04 Sun 19:07]--[2022-09-04 Sun 19:32] =>  0:25
CLOCK: [2022-09-04 Sun 10:24]--[2022-09-04 Sun 10:49] =>  0:25
CLOCK: [2022-09-04 Sun 09:53]--[2022-09-04 Sun 10:18] =>  0:25
CLOCK: [2022-08-25 Thu 12:17]--[2022-08-25 Thu 12:42] =>  0:25
CLOCK: [2022-08-23 Tue 10:55]--[2022-08-23 Tue 11:20] =>  0:25
CLOCK: [2022-08-22 Mon 09:00]--[2022-08-22 Mon 09:25] =>  0:25
CLOCK: [2022-08-22 Mon 08:35]--[2022-08-22 Mon 09:00] =>  0:25
CLOCK: [2022-08-22 Mon 08:10]--[2022-08-22 Mon 08:35] =>  0:25
:END:

途中まで読んだが、あまりおもしろくないので後回しにする。

- 36, 53

低レイヤ処理をGoで学ぶ本。

- まずデバッガ環境を整えることから
- ファイルディスクリプタに対応するものは、通常のファイルに限らない。標準入出力/ソケット/OS/CPUに内蔵されている乱数生成の仕組みなど、ファイルではないものにもファイルディスクリプタが割り当てられ、どれもファイルと同じようにアクセスできる
- OSは、プロセスが起動されるとまず3つの疑似ファイルを作成し、それぞれにファイルディスクリプタを割り当てる。0が標準入力、1が標準出力、2が標準エラー出力
- 可能な限りすべてのものがファイルとして抽象化されている
- go言語ではファイルディスクリプタのような共通化の仕組みを言語レベルで持ってOSによる差異を吸収している。io.Writer
- インターフェースは、構造体と違って何かしら実態を持つものを表すのではなく、「どんなことができるか」を宣言しているだけ

** TODO [[https://wxdublin.gitbooks.io/docker-code-walk/content/client.html][Client | Docker Code Walk]]
Dockerコードの概略。
** TODO [[https://tatsu-zine.com/books/nuxt-go-web-app-development][NuxtとGoではじめるWebアプリ開発【委託】 - 達人出版会]]
動画検索アプリを題材に、NuxtとGoを使ったアプリ開発。
** TODO [[https://tatsu-zine.com/books/starting-grpc][スターティングgRPC【委託】 - 達人出版会]]
サーバ側Go, クライアント側Rubyと異なる言語を用いてサンプルアプリケーションを実装する。
** TODO [[https://gihyo.jp/dp/ebook/2021/978-4-297-12520-2][エキスパートたちのGo言語 一流のコードから応用力を学ぶ | Gihyo Digital Publishing … 技術評論社の電子書籍]]
ノウハウ集。
** TODO [[https://gihyo.jp/dp/ebook/2019/978-4-297-10728-4][改訂2版 みんなのGo言語 | Gihyo Digital Publishing … 技術評論社の電子書籍]]
:LOGBOOK:
CLOCK: [2022-09-09 Fri 19:04]--[2022-09-09 Fri 19:29] =>  0:25
:END:
わかりやすいという入門書。
** TODO [[https://tatsu-zine.com/books/go-web-programming][Goプログラミング実践入門 標準ライブラリでゼロからWebアプリを作る【委託】 - 達人出版会]]
ゼロから実装する。
** TODO [[https://www.oreilly.co.jp/books/9784873118222/][O'Reilly Japan - Go言語でつくるインタプリタ]]
インタプリタを実装する。
** TODO [[https://book.mynavi.jp/manatee/books/detail/id=131170][詳解Go言語Webアプリケーション開発｜Tech Book Zone Manatee]]
web開発の入門書。
** Go Design Patterns
** Cloud Native Go
** Go and Go-Moku The Oriental Board Games
** Mastering Go Create Golang production applications using network libraries, concurrency, and advanced Go data structures
** RESTful Go APIs Design und Implementierung leichtgewichtiger Hypermedia Services
** Hands-On System Programming with Go
** Powerful Command-Line Applications in Go
** Build an Orchestrator in Go
** The Docker Book
* Reference
* Archives
** DONE EmacsにLSP+DAPを設定する
CLOSED: [2022-08-22 Mon 12:44]
:LOGBOOK:
CLOCK: [2022-08-22 Mon 11:41]--[2022-08-22 Mon 12:06] =>  0:25
CLOCK: [2022-08-22 Mon 10:57]--[2022-08-22 Mon 11:22] =>  0:25
:END:
DAP(Debug Adapter Protocol)はデバッガー補助。エディタ関係なくIDEのようにエディタ上でブレークポイントをセットできるプロトコル。[[id:eb807577-cd69-478c-8f82-264243c67354][LSP]]のデバッガーバージョン。

go用のファイルはemacs側で自動インストールできず、手動でインストールする必要がある。

- [[https://emacs-lsp.github.io/dap-mode/page/configuration/#go][Configuration - DAP Mode]]
  - 外部コマンドをgo installでインストール
    - LSPは ~gopls~
    - Debuggerは ~delve~ (注意: VScode用のプログラムを用いる方法はdeprecatedで、現在は直接installするのが最新)
  - Emacs側で設定、Emacs側が認識できるようにする

#+caption: インストールする
#+begin_src shell
$ go get golang.org/x/tools/gopls                # Language Server
$ go get -v github.com/uudashr/gopkgs/cmd/gopkgs # Go パッケージ
$ go install golang.org/x/tools/cmd/goimports    # import の過不足を自動で補完
#+end_src

自分の環境では一瞬デバッガのボタンが表示されて Debug Adapter finished になってしまう状態になった。Warningには ~Warning (emacs): Initialize request failed: Failed to launch Disable showing Disable logging~ が表示される。理由がよくわからないため、表示させる。 ~(setq dap-print-io t)~ を評価すると、messageバッファに詳細なログを出力する。

原因は、しっかりと表示されていた。

#+begin_quote
"format": "Failed to launch: Go version 1.14.15 is too old for this version of Delve (minimum supported version 1.17, suppress this error with --check-go-version=false)",
#+end_quote

ということで、goのバージョンを上げると無事デバッガが起動するようになった。
** DONE [[https://tatsu-zine.com/books/go-five-recipes][Go言語を楽しむ5つのレシピ コタツと蜜柑とゴーファーとわたし【委託】 - 達人出版会]]
CLOSED: [2022-09-09 Fri 19:04]
:LOGBOOK:
CLOCK: [2022-09-09 Fri 18:29]--[2022-09-09 Fri 18:54] =>  0:25
CLOCK: [2022-09-09 Fri 17:24]--[2022-09-09 Fri 17:49] =>  0:25
CLOCK: [2022-09-09 Fri 16:51]--[2022-09-09 Fri 17:16] =>  0:25
:END:
画像処理やWebAssemblyなど。

ざっと読んだだけ。コードの中は読んでないので必要になったら確認する。
