:properties:
:ID: 20240511T182850
:end:
#+title:      KDOC 172: 関数呼び出しで起きていること
#+date:       [2024-05-11 Sat 18:28]
#+filetags:   :draft:code:
#+identifier: 20240511T182850

# (denote-rename-file-using-front-matter (buffer-file-name) 0)
# (save-excursion (while (re-search-backward ":draft" nil t) (replace-match "")))
# (flush-lines "^\\#\s.+?")

# ====ポリシー。
# 1ファイル1アイデア。
# 1ファイルで内容を完結させる。
# 常にほかのエントリとリンクする。
# 自分の言葉を使う。
# 参考文献を残しておく。
# 文献メモの場合は、感想と混ぜないこと。1つのアイデアに反する
# ツェッテルカステンの議論に寄与するか
# 頭のなかやツェッテルカステンにある問いとどのようにかかわっているか
# エントリ間の接続を発見したら、接続エントリを追加する。カード間にあるリンクの関係を説明するカード。
# アイデアがまとまったらアウトラインエントリを作成する。リンクをまとめたエントリ。
# エントリを削除しない。古いカードのどこが悪いかを説明する新しいカードへのリンクを追加する。
# 恐れずにカードを追加する。無意味の可能性があっても追加しておくことが重要。

# ====永久保存メモのルール。
# 自分の言葉で書く。
# 後から読み返して理解できる。
# 他のメモと関連付ける。
# ひとつのメモにひとつのことだけを書く。
# メモの内容は1枚で完結させる。
# 論文の中に組み込み、公表できるレベルである。

# ====価値があるか。
# その情報がどういった文脈で使えるか。
# どの程度重要な情報か。
# そのページのどこが本当に必要な部分なのか。

* この文書のステータス
- 作成
  - [X] 2024-06-01 貴島
- レビュー
  - [ ] <署名>
# (progn (kill-line -1) (insert (format "  - [X] %s 貴島" (format-time-string "%Y-%m-%d"))))

# 関連をつけた。
# タイトルがフォーマット通りにつけられている。
# 内容をブラウザに表示して読んだ(作成とレビューのチェックは同時にしない)。
# 文脈なく読めるのを確認した。
# おばあちゃんに説明できる。
# いらない見出しを削除した。
# タグを適切にした。
# すべてのコメントを削除した。
* 概要
# 本文(タイトルをつける)。

関数呼び出しを理解する。

#+begin_export html
<iframe width="800px" height="600px" src="https://godbolt.org/e#g:!((g:!((g:!((h:codeEditor,i:(filename:'1',fontScale:14,fontUsePx:'0',j:1,lang:___c,selection:(endColumn:18,endLineNumber:3,positionColumn:18,positionLineNumber:3,selectionStartColumn:18,selectionStartLineNumber:3,startColumn:18,startLineNumber:3),source:'/*+Type+your+code+here,+or+load+an+example.+*/%0Aint+my_add(int+a,+int+b)+%7B%0A++++return+a+%2B+b%3B%0A%7D%0A%0Avoid+main()+%7B%0A++++int+v+%3D+my_add(2,+3)%3B%0A%7D'),l:'5',n:'0',o:'C+source+%231',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0'),(g:!((h:compiler,i:(compiler:cg141,filters:(b:'0',binary:'1',binaryObject:'1',commentOnly:'0',debugCalls:'1',demangle:'0',directives:'0',execute:'1',intel:'1',libraryCode:'0',trim:'0',verboseDemangling:'0'),flagsViewOpen:'1',fontScale:14,fontUsePx:'0',j:1,lang:___c,libs:!(),options:'',overrides:!(),selection:(endColumn:1,endLineNumber:1,positionColumn:1,positionLineNumber:1,selectionStartColumn:1,selectionStartLineNumber:1,startColumn:1,startLineNumber:1),source:1),l:'5',n:'0',o:'+x86-64+gcc+14.1+(Editor+%231)',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0')),l:'2',n:'0',o:'',t:'0')),version:4"></iframe>
#+end_export

1: 関数呼び出し時、呼び出し側。

- rbpをスタックに保存して、呼び出し元に戻れるようにしておく
- rbpのアドレスでrspをセットする
- スタックフレームを初期化する。rspをrbp-16にして上に伸ばす
- 引数をレジスタにセットする
- callする

2: 呼び出される側。

- rbpをスタックに保存して、呼び出し元に戻れるようにしておく
- rbpのアドレスでrspをセットする
- 元のレジスタの値をスタックフレームに保存する
- スタックフレームからレジスタに値をセットする
- 演算する
- 先ほど保存したrbpを元に戻して、呼び出し元に戻る

3: 呼び出し側に戻る。

- 関数呼び出ししたとき返り値がレジスタに入っているので、スタックフレームに保存する
- leaveでスタックフレームを破棄する。rspにrbpの値をコピーしてrspを復元 + スタックに保存したrbpのアドレスからrbpを復元

図。

#+caption: スタックフレームの図
[[file:./images/20240601-stack.drawio.svg]]

* メモ

- main関数もretで元に戻る。どこに戻るのだろう

* 関連
- [[id:20240427T113714][KDOC 140: 『自作エミュレータで学ぶx86アーキテクチャ』]]。で出てきた例を詳しく考えた
# 関連するエントリ。なぜ関連させたか理由を書く。意味のあるつながりを意識的につくる。
# この事実は自分のこのアイデアとどう整合するか。
# この現象はあの理論でどう説明できるか。
# ふたつのアイデアは互いに矛盾するか、互いを補っているか。
# いま聞いた内容は以前に聞いたことがなかったか。
# メモyについてメモxはどういう意味か。
