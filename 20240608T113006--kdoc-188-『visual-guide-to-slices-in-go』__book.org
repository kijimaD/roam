:properties:
:ID: 20240608T113006
:mtime:    20241102180328 20241028101410
:ctime:    20241028101410
:end:
#+title:      KDOC 188: 『Visual Guide to Slices in Go』
#+date:       [2024-06-08 Sat 11:30]
#+filetags:   :book:
#+identifier: 20240608T113006

* この文書のステータス
:LOGBOOK:
CLOCK: [2024-06-08 Sat 14:05]--[2024-06-08 Sat 14:30] =>  0:25
CLOCK: [2024-06-08 Sat 12:51]--[2024-06-08 Sat 13:16] =>  0:25
:END:
- 作成
  - [X] 2024-06-08 貴島
- レビュー
  - [X] 2024-06-12 貴島

* 概要
[[https://sazak.io/articles/visual-guide-to-slices-in-go-2024-03-25][Visual Guide to Slices in Go — Ozan Sazak]]は、[[id:7cacbaa3-3995-41cf-8b72-58d6e07468b1][Go]]のスライスを解説した記事。

* メモ

- スライスは配列を抽象化したもの。扱うときに実際に割り当てられているメモリについて考えなくてよくするため。たとえばCでは、当初のメモリ割当よりも配列が大きくなった場合、手動でメモリの再割り当てとコピーが必要であった

#+caption: スライスの定義
#+begin_src git-permalink
https://github.com/kd-collective/go/blob/b8ac61e6e64c92f23d8cf868a92a70d13e20a124/src/runtime/slice.go#L15-L19
#+end_src

#+RESULTS:
#+begin_src
type slice struct {
	array unsafe.Pointer
	len   int
	cap   int
}
#+end_src

- capは基底配列の長さ。再メモリ確保せずに保存できる領域の長さ
- arrayフィールドは、基底配列への(最初の要素の)ポインタ。
- forによるイテレーションは、要素の長さ(len)で決まり、capの長さではない
- len == cap の状態で要素を加えた(append)とき、メモリを再割り当て(reallocate)する。capacityを増やして新しくsliceを作り、中身をコピーする
- ~sl = append(sl, "hello")~ のようになるのは、コピーによって異なるポインタを指すことがあるから
- printfフォーマットの ~%p~ によって、ポインタを表示できる
- スライス記法を使うと、コピーされずに同じ基底配列を指す。スライスの最初の要素ポインタがずれる
  - ↓の例では中の要素がbyteなので、1バイト文だけずれる

#+caption: 同じ基底配列。コピーされてない
#+begin_src go :imports "fmt"
  s1 := []byte{16, 32, 48, 64, 80}
  s2 := s1[1:3]

  fmt.Printf("s1: %p %v len: %d cap: %d\n", s1, s1, len(s1), cap(s1))
  fmt.Printf("s2: %p %v len: %d cap: %d\n", s2, s2, len(s2), cap(s2))
#+end_src

#+RESULTS:
#+begin_src
s1: 0xc0000120e0 [16 32 48 64 80] len: 5 cap: 5
s2: 0xc0000120e1 [32 48] len: 2 cap: 4
#+end_src

同じ基底配列を使っているのを確認する。

#+caption: 同じ基底配列。s2に追加するとs1も増える
#+begin_src go :imports "fmt"
  s1 := []byte{16, 32, 48, 64, 80}
  s2 := s1[1:3]

  s2 = append(s2, 100, 101)
  fmt.Printf("s1: %p %v len: %d cap: %d\n", s1, s1, len(s1), cap(s1))
  fmt.Printf("s2: %p %v len: %d cap: %d\n", s2, s2, len(s2), cap(s2))
#+end_src

#+RESULTS:
#+begin_src
s1: 0xc0000120e0 [16 32 48 100 101] len: 5 cap: 5
s2: 0xc0000120e1 [32 48 100 101] len: 4 cap: 4
#+end_src

capを超えた場合、再割り当てされるので、s1, s2は同じ基底配列ではなくなる。

- s2の先頭要素のポインタが変わっている
- s2への変更がs1に反映されない

#+caption: s2のcapを超えるとコピーされる
#+begin_src go :imports "fmt"
  s1 := []byte{16, 32, 48, 64, 80}
  s2 := s1[1:3]

  s2 = append(s2, 100, 101, 102)
  fmt.Printf("s1: %p %v len: %d cap: %d\n", s1, s1, len(s1), cap(s1))
  fmt.Printf("s2: %p %v len: %d cap: %d\n", s2, s2, len(s2), cap(s2))
#+end_src

#+RESULTS:
#+begin_src
s1: 0xc0000120e0 [16 32 48 64 80] len: 5 cap: 5
s2: 0xc0000120e8 [32 48 100 101 102] len: 5 cap: 8
#+end_src

スライス記法の3番目の引数で、新しいスライスの容量を制限できる。これによって、同じ基底配列に意図せず変更を加えるのを防げる。

#+begin_src go :imports "fmt"
  s1 := []byte{16, 32, 48, 64, 80}
  s3 := s1[1:3:3]

  s3 = append(s3, 200, 201)
  fmt.Printf("s1: %v, len: %d, cap: %d\n", s1, len(s1), cap(s1))
  fmt.Printf("s3: %v, len: %d, cap: %d\n", s3, len(s3), cap(s3))
#+end_src

#+RESULTS:
#+begin_src
s1: [16 32 48 64 80], len: 5, cap: 5
s3: [32 48 200 201], len: 4, cap: 8
#+end_src

* 関連
なし。
