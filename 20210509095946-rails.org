:PROPERTIES:
:ID:       e04aa1a3-509c-45b2-ac64-53d69c961214
:END:
#+title: Rails
* 概要
Railsは[[id:cfd092c4-1bb2-43d3-88b1-9f647809e546][Ruby]]でWEBサイトを作るためのフレームワーク。
* Memo
** shoulda Error
[[id:1658782a-d331-464b-9fd7-1f8233b8b7f8][Docker]]上でテストを走らせると出現した。

#+caption: 読み込む
#+begin_src shell
  require "shoulda/matchers"
  require 'rspec-sidekiq'
#+end_src
** find、find_by、whereの違い
[[https://qiita.com/tsuchinoko_run/items/f3926caaec461cfa1ca3][find、find_by、whereの違い - Qiita]]

- find :: 各モデルのidを検索キーとしてデータを取得するメソッド。モデルインスタンスが返る
- find_by :: id以外をキーとして検索。複数あった場合は最初だけ取る。モデルインスタンスが返る。
- where :: id以外をキーとして検索。モデルインスタンスの入った配列が返る。
** acts_as_list
acts_as_listは順番を管理するgem。
[[https://github.com/brendon/acts_as_list][brendon/acts_as_list: An ActiveRecord plugin for managing lists.]]

順番の生成と、操作を可能にする。
modelに順番カラムを指定すると、create時に自動で番号が格納される。
逆にフォームで番号格納しているとそれが優先して入るため自動採番されない。
new時には番号フォームを表示しないなどが必要。
** テーブル名と名前空間
** pluck
~pluck~ は、各レコードを丸ごとオブジェクトとしてとってくるのではなく、引数で指定したカラムのみの *配列* で返すメソッド。
[[https://railsdoc.com/page/model_pluck][pluck | Railsドキュメント]]

~select~ はカラム指定というところは同じだがオブジェクトを返す。
** まとめて処理して高速化
1つ1つ処理するのではなくて、同時に複数のレコードを処理することで高速化する。
** 該当レコード数が莫大な場合
メモリに全体を展開するのでなく、ある数ずつ展開してメモリ消費を抑える。

[[https://railsdoc.com/page/find_each][find_each | Railsドキュメント]] ... 1件ずつ処理。
[[https://railsdoc.com/page/find_in_batches][find_in_batches | Railsドキュメント]] ... 配列で処理。

** 並列処理
重い処理は並列処理する。
#+begin_src ruby
  require 'parallel'
  result = Parallel.each(1..10) do |item|
      item ** 2
  end
#+end_src

** 開発に便利なページ
- /rails/info/routes
  routes一覧。
- /letter_opener(自分で設定する)
  送信したメール一覧を見られる。
  gemが入ってる場合。
  [[https://github.com/ryanb/letter_opener][ryanb/letter_opener: Preview mail in the browser instead of sending.]]
- rails/mailers/
  Action Mailerのプレビューを見られる。
  previewを準備しておくといちいち送信せずとも、ローカルでダミーが入った文面を確認できる。
** 開発環境でしか使えないメソッドが存在する
~class_name~ は開発環境でしか使えない。
gemによってはそういうパターンで使えないことがあることに注意しておく。

- https://stackoverflow.com/questions/38776080/method-class-name-undefined-for-class-object-in-rails
#+begin_quote
class_name method is defined by yard gem. it works only development env.
#+end_quote
** rails console -s
~rails console -s~ としてconsole起動すると、sandbox-modeになりコンソール内のDB操作が終了時にリセットされる。
便利。
** rails cできないとき
springはキャッシュを保存して次のコマンド実行を早くするgem。
テストも高速化できるので便利だが、たまに壊れて反映しなくなったりする。

まずspringを止めて確認する。
#+begin_src shell
  bundle exec spring stop
#+end_src
** system specでTCP error がでるとき
テストがある程度の長さを超えると、メモリの量が足りなくなってエラーを出す。
特にMacだと起こるよう。
#+begin_src shell
  ulimit -n 1024
#+end_src
** どのメソッドか調べる
どのgemのメソッドかわからないときに ~source_location~ が便利。
https://docs.ruby-lang.org/ja/latest/method/Method/i/source_location.html
#+begin_src ruby
  character.method(:draw).source_location
#+end_src
** DBリセット
環境を指定して、リセットを行う。
#+begin_src shell
  RAILS_ENV=test bundle exec rake db:migrate:reset
  rake db:seed_fu
#+end_src

初期データを投入する。
#+begin_src shell
  bundle exec rails db:migrate:reset && rails db:seed_fu
#+end_src
** デイリーでやること
gemのupdateやマイグレーションが起きたときにやる。
どこかで定型化して一気に実行するようにする。
#+begin_src shell
  git checkout develop && bundle install && bundle exec rails db:migrate
#+end_src
** scope
scopeはクラスメソッド的なやつ。インスタンスには使えない。 ~User.scope...~
[[https://railsguides.jp/active_record_querying.html#%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%97][Active Record クエリインターフェイス - Railsガイド]]

#+begin_quote
スコープを設定することで、関連オブジェクトやモデルへのメソッド呼び出しとして参照される、よく使用されるクエリを指定することができます。
#+end_quote
** validation
~valid?~ はAction Modelのバリデーションメソッド。
[[https://devdocs.io/rails~6.1/activemodel/validations#method-i-valid-3F][Ruby on Rails 6.1 / ActiveModel::Validations#valid? — DevDocs]]
引っかかってたらfalseになる。
上書きしてしまいそうになるメソッド名なのに注意。
** ネストしたvalidateは反応しない
 特定の条件だけで発動するvalidation + 条件。`with_options: if`内で`if`を使うと、中のif条件が優先して実行されるため、こう書く必要がある。
#+begin_src ruby
  validates :term_date, date: { after: proc { Time.zone.now } }, if: proc { |p| p.term_date? && p.sellable?  }
#+end_src
** N+1問題
[[id:8b69b8d4-1612-4dc5-8412-96b431fdd101][SQL]]がたくさん実行されて遅くなること。ループしているとレコードの数だけSQLが発行され、一気に遅くなる。
includesを使うと少ないSQLにまとめられる。
https://qiita.com/hirotakasasaki/items/e0be0b3fd7b0eb350327
** 子のデータが存在するとき関連削除しないようにする
~dependent: destroy~ だと子のデータもすべて破壊して整合性を保つ。
それでは具合が悪いときもあるので、消さないようにする。
#+begin_src ruby
  has_many :contents, dependent: :restrict_with_error
#+end_src
** 文字列で返ってくる真偽値をbooleanオブジェクトに変換する
文字列で返ってくる真偽値を、booleanオブジェクトとして扱いとき。ActiveModelのmoduleを使用する。
言われてみるとDBでは文字列かをあまり意識せずに使える。
#+begin_src ruby
  ActiveModel::Type::Boolean.new.cast(value) == true
#+end_src
** slimで条件分岐
[[https://qiita.com/mishiwata1015/items/407e924263d698ddeaae][【Rails】Slimで入れ子になっている要素の親タグのみを分岐させる - Qiita]]
閉じタグがないため階層の上だけ条件分岐するためには特殊な書き方が必要になる。
#+begin_export html
- unless request.variant.present? && request.variant.include?(:phone)
  / PCでのみサイドバーに
  - args = [:section, class: 'sidebar']
- else
  / スマホではメインコンテンツに入れる
  - args = [:section]
= content_tag(*args)
#+end_export
* Tasks
** TODO Advanced Rails Recipe
** TODO [[https://dxd2021.cto-a.org/program/time-table/b-3][クソコード動画「Userクラス」で考える技術的負債解消の観点/DXD2021]]
クソコードから学ぶ。
** TODO loggerを自動オン
Rails console。これくらいはできるはず。
ENVで分岐すれば本番だけログレベルを上げる、ということができるはず。
** TODO [[https://railsguides.jp/][Ruby on Rails ガイド：体系的に Rails を学ぼう]]
:LOGBOOK:
CLOCK: [2021-10-10 Sun 14:09]--[2021-10-10 Sun 14:43] =>  0:34
:END:
Rails のドキュメント。
** TODO [[https://www.codewithjason.com/understanding-factory-bot-syntax-coding-factory-bot/][Understanding Factory Bot syntax by coding your own Factory Bot - Code with Jason]]
Factory Botの作り方。
* Archive
** DONE 誤字
CLOSED: [2021-09-09 木 09:18]
https://github.com/carrierwaveuploader/carrierwave/blob/a3ffc5381e70a4014b61b27b35540aa3b945910d/README.md#retry-option-for-douwload-from-remote-location

PR送信完了。一字だけ。
* References
** [[https://github.com/ankane/strong_migrations][ankane/strong_migrations: Catch unsafe migrations in development]]
READMEに安全なマイグレーションの説明がある。
** [[https://tech.speee.jp/entry/2020/06/30/110000][reg-suit によるビジュアルリグレッションテストで Rails アプリの CSS 改善サイクルが回り始めた話 - Speee DEVELOPER BLOG]]
ビジュアルリグレッションテストの運用方法。
** [[https://zenn.dev/yukito0616/articles/d3b7032e9f1e90][Only My Rails Way]]
Rails Wayの定義について。
** [[https://discuss.rubyonrails.org/][Ruby on Rails Discussions - Ruby on Rails Discussions]]
Rails開発のディスカッション。
** [[https://www.slideshare.net/ockeghem/ruby-on-rails-security-142250872][Railsエンジニアのためのウェブセキュリティ入門]]
わかりやすいスライド。
** [[https://techracho.bpsinc.jp/hachi8833/2020_05_13/91211][Rails開発者が採用面接で聞かれる想定Q&A 53問（翻訳）｜TechRacho by BPS株式会社]]
ちゃんとRailsガイドを読まないときついな。
