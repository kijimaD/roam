:PROPERTIES:
:ID:       e04aa1a3-509c-45b2-ac64-53d69c961214
:END:
#+title: Rails

* shell
** rails cできないとき
#+begin_src shell
bundle exec spring stop
#+end_src
** system specでTCP error がでるとき
#+begin_src shell
ulimit -n 1024
#+end_src
** どのメソッドか調べる
#+begin_src ruby
character.method(:draw).source_location
#+end_src
** DBリセット
テスト環境。
#+begin_src shell
  RAILS_ENV=test bundle exec rake db:migrate:reset
  rake db:seed_fu
#+end_src

develop環境。
#+begin_src shell
  bundle exec rails db:migrate:reset && rails db:seed_fu
#+end_src
** デイリー
bundle install && bundle exec rails db:migrate
* 環境構築
LinuxでのRails環境構築。[[id:1658782a-d331-464b-9fd7-1f8233b8b7f8][docker]]を使う。
** mysql error
bundle installするとmysql2のインストールで詰まる。
Linuxでは↓が必要。
#+begin_src shell
sudo apt-get install libmysqlclient-dev
#+end_src
https://stackoverflow.com/questions/3608287/error-installing-mysql2-failed-to-build-gem-native-extension
** ffi error
対応するffiバージョンが見つからないエラー。違うバージョンを見てたりするらしい。
https://ksmxxxxxx.hatenablog.com/entry/2021/02/06/134943
#+begin_src shell
  bundle config build.ffi --enable-system-libffi
  bundle config build.ffi --disable-system-libffi
#+end_src
うまくいかないので、rbenv, bundlerを入れ直した。

#+begin_src shell
sudo apt-get install libmagick++-dev
#+end_src
** rake error
#+begin_quote
Bundler::GemNotFound: Could not find rake-13.0.6 in any of the sources
#+end_quote

#+begin_src shell
gem install rake -v 13.0.6
gem install bundler:2.2.25
#+end_src
* RSpec
** カバレッジ
#+begin_src shell
COVERAGE=true bundle exec rspec spec/requests/admin/user_spec.rb
open coverage/index.html
#+end_src
** factorybot
create_list - factorybot
** request specでsessionメソッドを使う
#+begin_src ruby
allow_any_instance_of(ActionDispatch::Request).to receive(:session).and_return({})
#+end_src
** たまに失敗するパターン
system specではよくある。
*** 読み込み前に検証して失敗する
#+begin_src ruby
  expect(page).to have_text 'aaa', wait: 5 #発見できなかったときの最大待ち時間を伸ばす
#+end_src
*** 並び順に依存したテスト
同じ秒数に作成されたとき、createした順番に並ばない可能性がある。
#+begin_src ruby
  model1 = create(:model)
  model2 = create(:model)
#+end_src
created_atでソートして表示しているとして、この作成順にソートされるわけではない。
秒数が同じときはidなどがソートに使われるだろう。
1つcreateするのにはわずかな時間なので、たまに失敗するだけで気づきにくい。
*** チェックボックス
チェックに少し時間がかかるのでたまにチェックせずに送信して失敗する。
#+begin_src ruby
  check aaa
  expect(page).to have_checked_field(aaa), wait 5 # チェックを確認する
#+end_src
* ActiveRecord
** ネストしたvalidateは反応しない
 特定の条件だけで発動するvalidation + 条件。`with_options: if`内で`if`を使うと、中のif条件が優先して実行されるため、こう書く必要があります。
#+begin_src ruby
validates :term_date, date: { after: proc { Time.zone.now } }, if: proc { |p| p.term_date? && p.sellable?  }
#+end_src
** N+1問題
includes
N+1問題を回避するために用います。
** 子のデータが存在するとき関連削除しないようにする
#+begin_src ruby
  has_many :contents, dependent: :restrict_with_error
#+end_src
** 文字列で返ってくる真偽値をbooleanオブジェクトに変換する
文字列で返ってくる真偽値を、booleanオブジェクトとして扱いとき。ActiveModelのmoduleを使用する。
言われてみるとDBでは意識せずに使える。
#+begin_src ruby
ActiveModel::Type::Boolean.new.cast(value) == true
#+end_src
* slim
** 条件分岐
[[https://qiita.com/mishiwata1015/items/407e924263d698ddeaae][【Rails】Slimで入れ子になっている要素の親タグのみを分岐させる - Qiita]]
閉じタグがないため階層の上だけ条件分岐するためには特殊な書き方が必要になる。
#+begin_export html
- unless request.variant.present? && request.variant.include?(:phone)
  / PCでのみサイドバーに
  - args = [:section, class: 'sidebar']
- else
  / スマホではメインコンテンツに入れる
  - args = [:section]
= content_tag(*args)
#+end_export
* Mailer
プレビュー
http://localhost:3000/rails/mailers/
