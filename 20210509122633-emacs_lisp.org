:PROPERTIES:
:ID:       c7e81fac-9f8b-4538-9851-21d4ff3c2b08
:header-args+: :wrap :results raw
:END:
#+title: Emacs Lisp
* 概要
[[id:1ad8c3d5-97ba-4905-be11-e6f2626127ad][Emacs]]で使われている[[id:868ac56a-2d42-48d7-ab7f-7047c85a8f39][Programming Language]]、Lispの方言。
Emacs自体のコードの多くがEmacs Lispで構成されているほか、拡張するために用いる。
* arielコードメモ
http://dev.ariel-networks.com/articles/workshop/emacs-lisp-basic/
の元の内容に、たまにコメントをつけて読んだ。
- 実装を見ている
- わかりやすい例
** ring
データ型定義のやり方。型述語の実装。
https://github.com/kijimaD/emacs/blob/master/lisp/emacs-lisp/ring.el#L47
** eww
https://github.com/kijimaD/emacs/blob/master/lisp/net/eww.el#L1
** lisp.h
lispシンボルの実装。
https://github.com/kijimaD/emacs/blob/master/src/lisp.h#L798

#+begin_src emacs-lisp
  (type-of 42)
  =>integer
  (type-of 3.14)
  => float
  (type-of "foo")
  => string
  (type-of '(1 2))
  => cons
  (type-of '[1 2])
  => vector
  (type-of 'foo)
  => symbol
  (type-of ?a)  ; Cの'a'相当。内部的には数値
  => integer
#+end_src
** 中で起こってること
~(setq foo "FOO")~ したとき、symbolオブジェクトは以下のようにセットされます。
#+begin_src c
  // lisp.h
  struct Lisp_Symbol
  {
    struct Lisp_String *name;  => "foo"
      Lisp_Object value;  => "FOO"の値を持つ文字列オブジェクトを指す
      Lisp_Object function;  => 空
      略
      };
#+end_src

↑のように作られているオブジェクトを関数で調べてみます。

#+begin_src emacs-lisp
  (symbolp 'foo)    ; シンボルか否かの判定。tが真。nilが偽。(後述)
  => t
  (symbol-name 'foo)
  => "foo"
  (symbol-value 'foo)
  => "FOO"
  (boundp 'foo)   ; 値セルに値があればt、なければnil
  => t
  (fboundp 'foo)  ; 関数セルに関数があればt、なければnil
  => nil
  (symbol-function 'foo)
                                          ; まだ設定していないので、今はエラー
#+end_src
** クォートの意味
#+begin_quote
クォートは「評価しない」ことを指示します。クォートしないと、基本的に評価されてしまいます。
#+end_quote

#+begin_src emacs-lisp
  (type-of 'foo)
  => symbol
  (type-of foo)
  => string   ; 評価後、つまり値セルの指すオブジェクトの型が出力されます
#+end_src

~'~ は ~quote~ 関数の略記です。
** シンボルのまとめ
#+begin_quote
ここまでで分かったこと

シンボルは名前を持つ (symbol-name関数で確認可能)
シンボルの値セルは任意のオブジェクトを指す (symbol-value関数で確認可能)
シンボルの指すオブジェクトの型はtype-ofで確認可能
#+end_quote
** コンスセルの表記
#+begin_quote
コンスセルとはふたつのポインタ(*)を持ったオブジェクトです。
#+end_quote
実装
https://github.com/kijimaD/emacs/blob/master/src/lisp.h#L1350

#+begin_src c
  struct Lisp_Cons
  {
    union
    {
      struct
      {
        /* Car of this cons cell.  */
        Lisp_Object car;

        union
        {
          /* Cdr of this cons cell.  */
          Lisp_Object cdr;

          /* Used to chain conses on a free list.  */
          struct Lisp_Cons *chain;
        } u;
      } s;
      GCALIGNED_UNION_MEMBER
    } u;
  };
#+end_src
最新のコードは若干変わっている。
- ~union~ って何だろう。
- 2つのポインタ…elispではcarとcdr

#+begin_quote
後述するように、コンスセルのcdrが別のコンスセルを指すことで、リスト構造を作ります。コンスセルで作るリスト処理こそがLisp(LISt Processing)の名前の由来でもあります。
#+end_quote
** コンスセルの表記
~("foo" . "bar")~
これは内部的に。
#+begin_src c
  struct Lisp_Cons
  {
    Lisp_Object car;  => "foo"文字列オブジェクトを指す
      Lisp_Object cdr;  => "bar"文字列オブジェクトを指す
      };
#+end_src

オブジェクトが2つ組み合わされたもの。
** コンスセルの生成
#+begin_src emacs-lisp
  (cons "foo" "bar")
  => ("foo" . "bar")
#+end_src

- consはconstructの略。
** コンスセルの値
コンスセルの値にアクセスするには ~car~ と ~cdr~ だけ使える。getterメソッドみたいなもの。

#+begin_quote
car、cdr以外にコンスセルの中を参照する手段はありません。
#+end_quote

なるほど。

#+begin_src emacs-lisp
  (car '("foo" . "bar"))
  => "foo"
  (cdr '("foo" . "bar"))
  => "bar"
#+end_src

#+begin_quote
Java風に言えば、コンスセルはふたつのprivateフィールドとふたつのアクセサを持つだけの軽いオブジェクトです。
#+end_quote
** プログラム自体がオブジェクト
#+begin_quote
厳密に言えば、("foo" . "bar") という文字列は、コンスセルの(Java風に言えば)シリアライズ化した表現です。
後述するように、elispのプログラム自体はリスト表現で書きます。
これの意味することは、プログラム自体がオブジェクトであり、ソースコードはオブジェクトをシリアライズ化しただけの文字列と言えます。
#+end_quote

- シリアライズ化。
- データとプログラムの区別がない…真髄的なところだということはわかる。
** なんでもオブジェクト
#+begin_src emacs-lisp
  (setq foo '("foo" . 42))  ; carに文字列、cdrに数値のコンスセルを指すシンボルfoo
  => ("foo" . 42)
  (setq bar '(foo . foo))   ; quoteは全体に効いているので、carとcdrの両方がシンボルfoo
  => (foo . foo)
  (symbol-value (car bar))
  => ("foo" . 42)
  (symbol-value (cdr bar))
  => ("foo" . 42)
  (setq bar `(,foo . foo))  ; backquoteの例
  => (("foo" . 42) . foo)   ; ,のついたオブジェクトは評価。そうでないオブジェクトは未評価
#+end_src

bar -> foo -> "foo" -> 42

シンボルを評価すると、値セルを返します。
** cdrが別のコンスセル
#+begin_src emacs-lisp
  (cons "foo" '("bar" . "baz"))
  => ("foo" "bar" . "baz")
#+end_src

~("foo" . "bar" "baz")~ とはならない。

#+begin_src emacs-lisp
  '("foo" . ("bar" . "baz"))
  ;; => ("foo" "bar" . "baz")
#+end_src
** リスト化
最期のcdrをnilにするとリストに。
#+begin_src emacs-lisp
  (cons "foo" '("bar" . nil))
  ;; => ("foo" "bar")
#+end_src

nilじゃないとコンスセルになる(前の節の通り)。
#+begin_src emacs-lisp
  (cons "foo" '("bar" . "aaa"))
  ("foo" "bar" . "aaa")
#+end_src
** リスト操作
#+begin_src emacs-lisp
  (car '("foo" "bar" "baz"))
  => "foo"
  (cdr '("foo" "bar" "baz"))
  => ("bar" "baz")
  (cdr (cdr '("foo" "bar" "baz")))
  => ("baz")    ; dotted pair notationで書けば ("baz" . nil)
  (cdr (cdr (cdr '("foo" "bar" "baz"))))
  => nil
#+end_src

面倒だけど、リストの操作が行えます。

#+begin_src emacs-lisp
  (setq foo "a")
  (setq foo (cons "value" foo))   ; リストfooに要素をprepend
  ;; => ("value" . "a")
  (setq foo (cons "value" foo))   ; さらにprepend
  ;; => ("value" "value" . "a")
  (setq load-path (cons (expand-file-name "~/elisp") load-path))

  (list "foo" "bar" "baz")  ; 引数を要素に持つリストを生成
  => ("foo" "bar" "baz")

  (append '("foo" "bar") '("baz"))  ; 連接したリストを生成
  => ("foo" "bar" "baz")
  (setq load-path (append load-path (list (expand-file-name "~/elisp"))))

  (car (nthcdr 1 '("foo" "bar" "baz")))   ; N番目の要素の取得
  => "bar"
#+end_src
** 評価
#+begin_quote
コンスセルの評価は次のように行います。

リストの先頭要素(先頭のコンスセルのcar)のシンボルの関数セルの指す関数呼び出し
リストの後続要素(先頭以外のコンスセルのcar)を関数の引数として渡す。引数はquoteがなければ、評価してから引数に渡ります
リストの後続要素は、リストであるかもしれません。この場合、内側のリストを評価、つまり関数呼び出しをしてから、外側のリストの関数呼び出しをします(前ページですでにやっていますが)。
#+end_quote

- コンスセルとリストの違い。コンスセルは ~( . )~ で、最後のcdrがnilでないもの。
- リストは最後のcdrがnilのもの。
- ~(append '("foo" "bar") '("baz"))~ の例.
  1. リストの先頭要素 ~append~ の関数セルの指す関数を呼び出す。
  2. リストの後続要素 ~'("foo" "bar") '("baz")~ が引数として呼び出される。quoteがあるので評価されない。リストのときは評価=関数呼び出しを1.と同様に内側→外側の順に行う。

#+begin_src emacs-lisp
  (defun plus1 (n)
    (+ n 1))
  => plus1
  (plus1 10)
  => 11
  (defun my-plus (m n)
    (+ m n))
  => my-plus
  (my-plus 2 5)
  => 7
#+end_src

#+begin_quote
関数の戻り値(=関数の評価結果)は、関数本体の最後の評価結果です
#+end_quote

なるほど。
** 関数に名前はない
#+begin_quote
defunを見て、関数に名前があると思うのは間違いです。

defunは、シンボルを作って、その関数セルが関数定義を指すようにしています。
#+end_quote

シンボルの定義を思い返してみます。

#+begin_src c
  // lisp.h
  struct Lisp_Symbol
  {
    struct Lisp_String *name;  => "foo"
      Lisp_Object value;  => "FOO"の値を持つ文字列オブジェクトを指す
      Lisp_Object function;  => 空
      略
      };
#+end_src

確かに関数定義を指しています。

#+begin_src emacs-lisp
  (defun foo () (message "a"))
  (symbolp 'foo)
  => t
  (symbol-name 'foo)
  => "foo"
  (symbol-value 'foo)
  => error: (void-variable foo)
  (symbol-function 'foo)
  => (lambda nil (message "a"))
  (boundp 'foo)
  => nil
  (fboundp 'foo) ; 関数定義
  => t
#+end_src
** 既存関数も同じ
どれもシンボルで、関数定義を指しています。
#+begin_src emacs-lisp
  (symbol-function 'car)
  => #<subr car>
  (symbol-function 'defun)
  => #<subr defun>
  (symbol-function '+)
  => #<subr +>
#+end_src

#+begin_quote
subr(subroutineの略)は、Cで書かれた関数を意味しています。

構造(シンボルcarやシンボルdefunがあり、それらの関数セルが関数定義を指す)は同じです。
#+end_quote

subrそうだったのか。 ~#<>~ はどういう意味なのだろう。
** fset
#+begin_quote
値セルにsetqやsetがあったように、関数セルにはfsetがあります(fsetqはありません)。
#+end_quote

#+begin_src emacs-lisp
  (fset 'my-plus2
        '(lambda (n) (+ n 2)))   ; defunと同じ
  => (lambda (n) (+ n 2))
  (my-plus2 10)
  => 12
#+end_src

関数セルと値セルを確認します。

#+begin_src emacs-lisp
  (setq foo "foo")
  => "foo"
  (fset 'foo '(lambda (s) (concat s "bar"))) ; 名前とリストの組み合わせ。どちらも未評価で渡す。
  => (lambda (s) (concat s "bar"))
  (foo foo)
  => "foobar"
#+end_src
** lambda
https://github.com/kijimaD/emacs/blob/master/lisp/subr.el#L106

#+begin_src emacs-lisp
  (lambda (引数 ...) (関数本体))
#+end_src

処理の中身。名前と組み合わせると関数になります。

#+begin_src emacs-lisp
  ((lambda (m n) (+ m n)) 2 5)
  => 7
#+end_src

関数定義。declare(...関数やマクロに関する情報、infoで出てくる文章)の箇所を除くとこれだけです。
引数cdr(処理したい内容)でコンスセルを作って、関数セルと組み合わせてリストを作ります。なので名前はありません。
#+begin_src emacs-lisp
  (defmacro lambda (&rest cdr)
    (list 'function (cons 'lambda cdr)))
#+end_src
** 関数とは何か
述語関数から見てます。この方法いいですね。

#+begin_src emacs-lisp
                                          ; subr.el
  (defun functionp (object)
    "Non-nil if OBJECT is a type of object that can be called as a function."
    (or (subrp object) (byte-code-function-p object)
        (eq (car-safe object) 'lambda)
        (and (symbolp object) (fboundp object))))
#+end_src

#+begin_quote
elispにとって、「関数」とは次の4つのいずれかであることが分かります。

- subroutine (Cで書かれた関数)
- バイトコンパイルされた関数 (今はあまり気にしないように)
- シンボルlambdaで始まるリスト
- 関数セルが空ではないシンボル
#+end_quote
** 関数呼び出し
#+begin_quote
リストの先頭要素に「関数」があれば、関数呼び出しになります。
#+end_quote

リストがすべてに優先して存在します。

#+begin_src emacs-lisp
  (my-plus 1 3)   ; シンボルであれば関数セルの指す関数を呼び出す
  => 4
  ((lambda (m n) (+ m n)) 1 3)   ; シンボルlambdaで始まるリストも「関数」
  => 4
#+end_src
** funcall
#+begin_quote
funcall関数は引数の1番目を関数として呼びます。
#+end_quote

#+begin_src emacs-lisp
  (funcall 'my-plus 1 3)
  => 4
  (funcall '(lambda (m n) (+ m n)) 1 3)
  => 4
#+end_src

- ~'(lambda (m n) (+ m n))~ は関数として呼ばれる。
~- (lambda (m n) (+ m n))~ でもいいみたい。

違いは何だっけ。... 評価して渡されるか。この場合は関数なので、評価されるのがいつでも結果は変わらない。

#+begin_src emacs-lisp
  (funcall '(lambda () (+ 1 2)))
  (if (eq 1 (+ 1)) 1) ; 1
  (if (eq 1 '(+ 1)) 1) ; nil

  (+ (+ 1) 1) ; 2
  (+ '(+ 1) 1) ; (wrong-type-argument number-or-marker-p (+ 1))
#+end_src
** 値セルにlambda
つまり、値を関数でも呼び出せます。

#+begin_src emacs-lisp
  (setq foo '(lambda (m n) (+ m n)))
  => (lambda (m n) (+ m n))
  (funcall foo 2 5)
  => 7
#+end_src

なるほど…。
** 明示的に空にする
#+begin_quote
(makunbound 'foo)   ;値セルを空にする
=> foo
(fmakunbound 'foo)  ;関数セルを空にする
=> foo
#+end_quote
** 連想リスト(association list)
#+begin_src emacs-lisp
  '(("foo" . "FOO") ("bar" . "BAR") ("baz" . "BAZ"))
#+end_src

リストの要素がコンスセル。
** 配列
#+begin_quote
配列は次の4つに分類できます。

- ベクタ
- 文字列
- 文字テーブル
- ブールベクタ
#+end_quote

#+begin_quote
言語仕様として「配列」があると言うより、次のarrayp述語で「配列」型(基本型では無い)が定義されているようなものです。
#+end_quote

#+begin_src c
  // data.c
  DEFUN ("arrayp", Farrayp, Sarrayp, 1, 1, 0, "Return t if OBJECT is an array (string or vector).")
    (object)
    Lisp_Object object;
  {
    if (VECTORP (object) || STRINGP (object)
        || CHAR_TABLE_P (object) || BOOL_VECTOR_P (object))
      return Qt;
    return Qnil;
  }
#+end_src

ベクタ/文字/文字テーブル/ブールベクタであればarray。なんだそりゃ。

#+begin_src emacs-lisp
  (arrayp '(1 2)) ; nil
  (arrayp "aaa")  ; t
#+end_src
** ベクタ
#+begin_src emacs-lisp
  [1 3 5]
  => [1 3 5]
  (vectorp [1 3 5])
  => t
  (setq foo [1 3 5])    ; quoteしてもしなくても同じ
  => [1 3 5]
  (vectorp foo)
  => t
#+end_src
** ベクタの操作
#+begin_src emacs-lisp

#+end_src
** 元ページ再掲
http://dev.ariel-networks.com/articles/workshop/emacs-lisp-basic/
* リスト遊び
** リスト
- リストを構成するセルのCDRは ~m~ ，セルかnilを指している。
しかしポイントはなんでも指せるので、CDRはアトム(整数とか)も参照できる。
CARが1。CDRが2のセルは、表記方法では表現できない。
これを表現するために、ドット対表記が用意されている。
#+begin_src emacs-lisp
  (cons 1 (cons 2 nil))
  => (1 2)

  (cons 1 2)
  => (1 . 2)
#+end_src

nilで終端しないセルはドット対で表記する。
この方法で表現すると、
(1) => (1. nil)
(1 2 3) => (1 . (2 . (3. nil)))
みたいになる。ドット対は連想リストで用いられる。
** Lispのデータ
- セル(1対のポインタ。consで作られる。CARとCDRが指しているポインタが指すデータを見るには、carとcdrを用いる)
- アトム(セル以外。整数とか)
** Lispの評価
- 式がセルなら関数を呼び出す。第1要素のシンボルの指す関数を実行する。引数は評価する。
- 式がアトムならその値を返す。
** quote
クオートをつけると評価せずそのまま返す。

#+begin_src emacs-lisp
  (quote (1 2))
  => (1 2)

  同じ意味:
  '(1 2)

  (setq dog 5)
  dog
  => 5   ; 評価結果
  'dog
  => dog ; シンボル自身を表現する
#+end_src

(setq dog "dog")
はシンボルdog(評価しない)に、"dog"を入れるということ。
** ポインタ
変数から変数への代入は、ポインタを複製するということ。

#+begin_src emacs-lisp
  (setq x 'dog)
  (setq y 'dog)
  (eq x y)
  => t
  (setq z y)
  (eq y z)
  => t
#+end_src

#+begin_src emacs-lisp
  (setq x "dog")
  (setq y "dog")
  (eq x y)
  => nil ; 同じ中身の文字列だが、指しているポインタが異なるため。
  (setq z y)
  (eq y z)
  => t   ; 指しているポインタが同じため
#+end_src

変数はポインタを格納する箱。
* On Lisp
[[http://www.asahi-net.or.jp/~kc7k-nd/onlispjhtml/preface.html][On Lisp --- 前書き]]
** もう1つの関数定義

#+begin_src emacs-lisp
  (defun double (x) (* x 2))
  #'double ; 関数オブジェクトを得る

  #'(lambda (x) (* x 2))
#+end_src

#+begin_quote
名前が関数呼び出しの先頭かシャープクォートの次に来ると関数への参照と見
なされ， それ以外では変数名と見なされる．
#+end_quote
なので(double double)とかも可能。変数と関数の名前空間が異なっている。

- 関数は普通のデータオブジェクト。なので変数が値として関数を持てる。

#+begin_src emacs-lisp
  (setq x #'append)
#+end_src

2つの式は大体同じことをしている。
#+begin_src emacs-lisp
  (defun double (x) (* x 2))

  (setf (symbol-function 'double)
        #'(lambda (x) (* x 2)))
#+end_src

手続き定義…名前をコードと関連付ける。

#+begin_quote
関数を作るのにdefunは必要ではなく， 関数は何かのシンボルの値と
して保存されなくてもいい．
defunの背後には， もっと一般的な仕組みが隠れている： 関数を作ることと，
それをある名前に関連づけることは別々の働きだ． Lispの関数の概念の一般性
全体までは必要ないとき， defunはもっと制限の強いプログラミング言語と同
じ位単純に関数定義を行う．
#+end_quote

applyは、オブジェクトを関数として実行する。

#+begin_src emacs-lisp
  (+ 1 2)
  (apply #'+ '(1 2))
  (apply (symbol-function '+) '(1 2))
  (apply #'(lambda (x y) (+ x y)) '(1 2))
#+end_src
** クロージャ
#+begin_src emacs-lisp
  (defun make-adder (n)
    #'(lambda (x) (+ x n)))
#+end_src

は数を取り，「呼ばれると引数にその数を加えるクロージャ」を返す． その足
し算関数のインスタンスは幾らでも作ることができる。

#+begin_src emacs-lisp
  > (setq add2 (make-adder 2)
          add10 (make-adder 10))
  #<Interpreted-Function BF162E>
  > (funcall add2 5)
  7
  > (funcall add10 3)
  13
#+end_src

変数に引数をとった関数を入れる。すごいな。

#+begin_src emacs-lisp
  (defun make-dbms (db)
    (list
     #'(lambda (key)
         (cdr (assoc key db)))
     #'(lambda (key val)
         (push (cons key val) db)
         key)
     #'(lambda (key)
         (setf db (delete key db :key #'car))
         key)))
#+end_src
** 末尾再帰
再帰関数とは自分自身を呼び出す関数だ． そして関数呼び出しの後に行うべき
作業が残っていなければ， その呼び出しは\emph{末尾再帰}だ． 次の関数は末
尾再帰でない。

#+begin_src emacs-lisp :tangle yes
  (defun our-length (lst)
    (if (null lst)
        0
      (1+ (our-length (cdr lst)))))

#+end_src

再帰呼び出しから戻った後，結果を1+ に渡さなければいけないからだ． しか
し次の関数は末尾再帰だ。

#+begin_src emacs-lisp :tangle yes
  (defun our-find-if (fn lst)
    (if (funcall fn (car lst))
        (car lst)
      (our-find-if fn (cdr lst))))
#+end_src
** 抽象化
#+begin_src emacs-lisp :tangle yes
  (defun 1st (exp) (car exp))
  (defun 2nd (exp) (car (cdr exp)))
  (defun 3rd (exp) (car (cdr (cdr exp))))

  (setq order-func1 '((OP . 2nd) (ARG1 . 1st) (ARG2 . 3rd)))
  (setq order-func2 '((OP . 1st) (ARG1 . 2nd) (ARG2 . 3rd)))

  (defun order-func (sym odr-db)
    (cdr (assq sym odr-db)))

  (defun op (exp order-db)
    (funcall (order-func 'OP order-db) exp))
  (defun arg1 (exp order-db)
    (funcall (order-func 'ARG1 order-db) exp))
  (defun arg2 (exp order-db)
    (funcall (order-func 'ARG2 order-db) exp))

  (setq op-func1 '((+ . +) (- . -) (* . *)))
  (setq op-func2 '((add . +) (sub . -) (mul . *)))

  (defun op-func (sym op-db)
    (cdr (assq sym op-db)))

  (defun calc (exp op-db odr-db)
    (cond
     ((atom exp) exp)
     (t (funcall
         (op-func (op exp odr-db) op-db)
         (calc (arg1 exp odr-db) op-db odr-db)
         (calc (arg2 exp odr-db) op-db odr-db)))))

  (calc '(1 + (2 * 3)) op-func1 order-func1)
  (calc '(add 1 (mul 2 3)) op-func2 order-func2)
#+end_src
** 関数
[[http://www.asahi-net.or.jp/~kc7k-nd/onlispjhtml/functions.html][On Lisp --- 関数]]

#+begin_quote
関数的プログラミングとは，副作用ではなく， 値を返すことで動作するプログ
ラムを書くことだ．

副作用とはオブジェクトの破壊的な変更（rplacaの使用等）
や変数への代入（setqの使用等）を含む．

reverse等のオペレータは，副作用でなく返
り値のために呼ばれるよう意図されている
#+end_quote

setqを使うときはたいてい副作用だ。
lispのほとんどの関数は副作用のために呼ばれることを意図されていない。
だから副作用がほしいときはsetqを使う。

#+begin_quote
この習慣を育てるには時間がかかるかもしれない． 一つの方法は，以下のオペ
レータは税金がかかっているつもりで扱うことだ：

set setq setf psetf psetq incf decf push pop pushnew
rplaca rplacd rotatef shiftf remf remprop remhash

あとlet*もそうだ． この中に命令的プログラムが潜んでいることがしばしばあ
る． これらのオペレータに税金がかかっているつもりになるのは， よいLisp
のプログラミング・スタイルへ向かう手助けとして勧めただけで， それがよい
スタイルの基準なのではない． しかし，それだけでもずいぶん進歩できるだろ
う．
#+end_quote

上は危険。

#+begin_src emacs-lisp
  > (multiple-value-bind (int frac) (truncate 26.21875)
      (list int frac))
  (26 0.21875)
#+end_src

多値。

関数的プログラムは，それが欲しがるものを求める。
命令的プログラムは，何をすべきかの指示を求める。

関数的プログラムの 「aと， ~x~ の第1要素の2乗から成るリスト
を返せ．」
#+begin_src emacs-lisp :tangle yes
  (defun fun (x)
    (list 'a (expt (car x) 2)))
#+end_src

命令的プログラミングではこうだ． 「xの第1要素を求め，それを2乗せよ． そ
してaと，先程2乗した値から成るリストを返せ．」
#+begin_src emacs-lisp :tangle yes
  (defun imp (x)
    (let (y sqr)
      (setq y (car x))
      (setq sqr (expt y 2))
      (list 'a sqr)))
#+end_src

#+begin_quote
その方法は，命令的プログラムは関数的プログラムを裏返しにしたものと思う
ことだ． 関数的プログラムが命令的プログラムの中に隠れているのを見つける
には， ただ裏返しにすればいい． この方法をimpで試してみよう．

だからルールはこうあるべきだ： 任意の関数呼び出しが， 自分だけが支配す
るオブジェクトを安全に書き換えられるようにする．

何が引数と返り値を支配するのだろう？関数呼び出しは返り値として受け取る
オブジェクトを支配するが， 引数として渡されるオブジェクトは支配しない，
というのがLispの慣習のようだ． 引数に変更を加える関数は「破壊的」との呼
び名で区別されるが， 返ってくるオブジェクトに変更を加える関数には特に呼
び名がない．
#+end_quote
** ユーティリティ関数
[[http://www.asahi-net.or.jp/~kc7k-nd/onlispjhtml/utilityFunctions.html][On Lisp --- ユーティリティ関数]]

#+begin_quote
Common Lispのオペレータは3種類に分かれる： 関数にマクロ（ユーザが作れる
もの）と，特殊オペレータ（ユーザには作れない）だ． この章では，Lispを新
しい関数で拡張するテクニックを説明する． しかしここで言う「テクニック」
は普通の意味のものではない． そういった関数について知るべき重要な点は，
それらをどうやって書くかということではなく，それらがどこから来たのかと
いうことだ． Lispの拡張には，他の関数を書くときと大体同じテクニックが使
われることになる． そういった拡張を書くとき難しいのは， どうやって書く
かを決めることではなく，何を書くかを決めることだ．
#+end_quote

ユーティリティ関数について。
最初は本屋を検索する関数をこう書いた。

#+begin_src emacs-lisp
  (defun find-books (towns)
    (if (null towns)
        nil
      (let ((shops (bookshops (car towns))))
        (if shops
            (values (car towns) shops)
          (find-books (cdr towns))))))
#+end_src

本当に欲しいのは(val ues (car towns) shops)だ。
これは一般化できる。

#+begin_src emacs-lisp
  (defun find2 (fn lst)
    (if (null lst)
        nil
      (let ((val (funcall fn (car lst))))
        (if val
            (values (car lst) val)
          (find2 fn (cdr lst))))))
#+end_src

(find2 #'bookshops towns)
だけで達成できるようになった。引数で関数を渡すようになった。

#+begin_quote
Lispプログラミング独特の特徴の一つは，引数としての関数の重要性だ． これ
はLispがボトムアップ・プログラミングに適している理由の一部だ． 関数の骨
格を抽象化するのは，引数に関数を使うことで肉付けができるときには比較的
簡単だ．
#+end_quote

なるほど。

#+begin_quote
Lispでは関数全体を引数として渡せるので，この考えをさらに深めることがで
きる． 前述の例の両方で，特定の関数から始めて，関数を引数に取る一般的な
関数に進んだ． 1番目の例ではすでに定義されていたmapcanを使い， 2番目の例
では新しいユーティリティfind2を書いたが， 全体的な原則は同じだ： 一般部
分と個別部分を混ぜ合わせるのでなく， 一般部分を定義して個別部分を引数と
して渡すこと．
#+end_quote

filterは関数と1個のリストを取り， その関数がリスト適用されたときに非
nil値が返されるような要素全てをリストにして返す。

#+begin_src emacs-lisp
  > (filter #'(lambda (x) (if (numberp x) (1+ x)))
            '(a 1 2 b 3 c d 4))
  (2 3 4 5)
#+end_src

#+begin_src emacs-lisp
  (defun longer (x y)
    (labels ((compare (x y)
                      (and (consp x)
                           (or (null y)
                               (compare (cdr x) (cdr y))))))
      (if (and (listp x) (listp y))
          (compare x y)
        (> (length x) (length y)))))

  (defun filter (fn lst)
    (let ((acc nil))
      (dolist (x lst)
        (let ((val (funcall fn x)))
          (if val (push val acc))))
      (nreverse acc)))

  (defun group (source n)
    (if (zerop n) (error "zero length"))
    (labels ((rec (source acc)
                  (let ((rest (nthcdr n source)))
                    (if (consp rest)
                        (rec rest (cons (subseq source 0 n) acc))
                      (nreverse (cons source acc))))))
      (if source (rec source nil) nil)))
#+end_src

さまざまな検索ユーティリティ。

#+begin_src emacs-lisp
  > (split-if #'(lambda (x) (> x 4))
              '(1 2 3 4 5 6 7 8 9 10))
  (1 2 3 4)
  (5 6 7 8 9 10)
#+end_src

#+begin_src emacs-lisp
  (defun mapa-b (fn a b &optional (step 1)
                    (map-> fn
                           a
                           #'(lambda (x) (> x b))
                           #'(lambda (x) (+ x step)))
#+end_src

うーむ。急にむずかしくなってよくわからないぞ。
対応付け関数というのは役立ちそうだが。

#+begin_src emacs-lisp
  (defun map-> (fn start test-fn succ-fn)
    (do ((i start (funcall succ-fn i))
         (result nil))
        ((funcall test-fn i) (nreverse result))
      (push (funcall fn i) result)))
#+end_src
** シンボルとストリング

新しく作るユーティリティについて。
#+begin_quote
それらの新オペレータは，どれも（議論の余地はあるが）プログラムを読み辛
くしてしまう． プログラムを読み取れるようになる前に，それらのユーティリ
ティを全て理解しなければいけない． こういった言明がなぜ誤解されるのかに
ついては， popページで説明した例（一番近い書店を探した例）のことを考え
てみて欲しい． そのプログラムをfind2を使って書けば， 「プログラムを読み
取れるようになる前に， この新ユーティリティの定義を理解しなければいけな
いじゃないか．」 と不満を言う人が出てくる． それでは，find2を使わなかっ
たとしてみよう． するとfind2の定義は理解しなくてもいいが， find-booksの
定義を理解しなければいけない． その中ではfind2の仕事が「書店を見つける」
という個別の課題と混ざっている． find2を理解するのはせいぜいfind-books
と同じくらい難しいだけだ． また，ここでは新ユーティリティは1回しか使っ
ていない． ユーティリティは繰り返し使うよう意図されたものだ． 実際のプ
ログラムでは，find2を理解しなければいけないか， または3, 4個の特定目的
の検索ルーチンを理解しなければいけないかの，どちらかの選択だろう． 前者
の方が確実に簡単だ．
#+end_quote

なるほど。十分に抽象的であればほかでも使えるし、理解として蓄積してほかのプログラムを読み書きするときに利用できる。
** 返り値としての関数
[[http://www.asahi-net.or.jp/~kc7k-nd/onlispjhtml/returningFunctions.html][On Lisp --- 返り値としての関数]]

#+begin_quote
前章では，関数を引数として渡せることが抽象化への可能性をどれ程大きくす
るかを見た． 関数に対して行える操作が豊かな程，その可能性を深く利用でき
る． 新しい関数を生成して返す関数を定義することで， 関数を引数に取るユー
ティリティの効果を増幅できる．
#+end_quote

#+begin_src emacs-lisp
  (defun joiner (obj)
    (typecase obj
      (cons #'append)
      (number #'+)))
#+end_src

#+begin_quote
これはオブジェクトを引数に取り， その型に応じてそれらのオブジェクトを加
え合わせる関数を返す． これは数やリストに対して働く多態的な
(polymorphic)連結関数の定義に使える：
#+end_quote
なるほど。

#+begin_src emacs-lisp
  (defun complement (fn)
    #'(lambda (&rest args) (not (apply fn args))))
  > (remove-if (complement #'oddp) '(1 2 3 4 5 6))
  (1 3 5)
#+end_src

#+begin_quote
関数を引数として渡せることは抽象化のための強力な道具だ． 関数を返す関数
が書けることで，それを最大限に利用できるようになる． 残りの節では関数を
返すユーティリティの例を幾つか挙げる．
#+end_quote

文言のところどころを読んだ覚えがあるのだが、コードは全然覚えてない…。
* memo
** with-demoted-errors
#+begin_src emacs-lisp :tangle yes
(apropos "with-demoted-errors")
#+end_src

#+caption:
#+begin_src emacs-lisp
(with-demoted-errors "これはエラー %S" (/ 1 0))
#+end_src
#+RESULTS:
#+begin_results
nil
#+end_results

** open-line
#+begin_src emacs-lisp :tangle yes
(apropos "open-line")
#+end_src

open-lineは改行するコマンド。カーソルは移動しない。

#+caption: 一行改行する
#+begin_src emacs-lisp :tangle yes
(open-line 1)
#+end_src

** declare
#+begin_src emacs-lisp :tangle yes
(apropos "declare")
#+end_src

謎。

#+caption: よく見かける書き方
#+begin_src emacs-lisp :tangle yes
(declare (indent 2))
#+end_src

#+RESULTS:
#+begin_results
nil
#+end_results

** apply-partially                                                     :WIP:
#+begin_src emacs-lisp :tangle yes
(apropos "apply-partially")
#+end_src

どうやって使うのかわからない。

#+begin_src emacs-lisp :results raw
  (defun my-apply-partially (fun &rest args)
    (lambda (&rest args2)
      (apply fun (append args args2))))
#+end_src

#+RESULTS:
#+begin_results
my-apply-partially
#+end_results

/lisp/subr.el にはいろいろ見慣れた関数があるな。
** cl-block
** 現在のメジャーモードの調べ方
判定や使いかたを調べるのに使える。
#+begin_src ruby
major-mode
#+end_src

#+begin_src
-> "org-mode"
#+end_src
** ~format-spec~ で設定の幅を広げる
~(format-spec)~ で文字と関数をマッピングして、ユーザが設定しやすくできる。

- https://github.com/magit/magit/blob/f805f6a7720aeb894e9a58f0b36769ebdb53dd7c/lisp/magit-mode.el#L921
#+begin_src emacs-lisp
  (format-spec
       magit-buffer-name-format ;; "%x%M%v: %t%x"
       `((?m . ,m)
         (?M . ,(if (eq mode 'magit-status-mode) "magit" m))
         (?v . ,(or v ""))
         (?V . ,(if v (concat " " v) ""))
         (?t . ,n)
         (?x . ,(if magit-uniquify-buffer-names "" "*"))
         (?T . ,(if magit-uniquify-buffer-names n (concat n "*")))))
#+end_src
** 必須ではない依存パッケージの書き方
変数なら
(defvar w3m-current-url)

関数なら
(declare-function w3m-current-title "ext:w3m-util")

と書くことで、読み込み先を指定されてることになるのでbyte-compileのエラーにならなくなる。
** 依存インストール
requireかと思いがちだが、一番上の ~;; Package-Requires: ((emacs "25.1"))~ で依存インストールに利用されてる。requireはあくまでパッケージを読み込むだけ。
** アクションと検索をわける
ace-link.elを見ていて、アクションとリンク検索を分けていた。リンク検索する → 決定を押したときのアクションを、それぞれのメジャーモードで判断するというわけだ。
単純で強力。
あとから追加するときも、その例にならえばいくらでもメジャーモードごとの追加ができるというわけだ。
ここから学べることは多いように思える。

- (ace-link-info) - エントリーポイント
- (ace-link-info-action) - アクション
- (ace-link--info-current) - collectで使われるユーティリティ
- (ace-link--info-collect) - リンクに番号をふる
#+begin_src emacs-lisp
  (defun ace-link-info ()
    "Open a visible link in an `Info-mode' buffer."
    (interactive)
    (let ((pt (avy-with ace-link-info
                (avy-process
                 (mapcar #'cdr
                         (ace-link--info-collect))
                 (avy--style-fn avy-style)))))
      (ace-link--info-action pt)))

  (defun ace-link--info-action (pt)
    (when (numberp pt)
      (push-mark)
      (goto-char pt)
      (let ((we (window-end)))
        (while (not (ignore-errors
                      (Info-follow-nearest-node)))
          (forward-char 1)
          (when (> (point) we)
            (error "Could not follow link"))))))

  (declare-function Info-follow-nearest-node "info")
  (declare-function Info-next-reference "info")
  (declare-function Info-try-follow-nearest-node "info")
  (declare-function Info-goto-node "info")

  (defun ace-link--info-current ()
    "Return the node at point."
    (cons (cl-letf (((symbol-function #'Info-goto-node)
                     (lambda (node _) node))
                    (browse-url-browser-function
                     (lambda (url &rest _) url)))
            (Info-try-follow-nearest-node))
          (point)))

  (defun ace-link--info-collect ()
    "Collect the positions of visible links in the current `Info-mode' buffer."
    (let ((end (window-end))
          points)
      (save-excursion
        (goto-char (window-start))
        (when (ignore-errors (Info-next-reference) t)
          (push (ace-link--info-current) points)
          (Info-next-reference)
          (while (and (< (point) end)
                      (> (point) (cdar points)))
            (push (ace-link--info-current) points)
            (Info-next-reference))
          (nreverse points)))))
#+end_src
** マッピング
(ace-link-setup-default)でマッピングしているところを見つけた。参考になる。
** ディレクトリ探索
(add-node-modules-path)はディレクトリ探索の参考になる。1つづつ上がって、node_modules/binを探索する。
コードが短いのも良い。
** 名前変換
引数の、関数のsymbolを取得する関数。いいな。
#+begin_src emacs-lisp
  (defun all-the-icons--data-name (name)
    "Get the symbol for an icon family function for icon set NAME."
    (intern (concat "all-the-icons-" (downcase (symbol-name name)) "-data")))
#+end_src

↓みたいに使える。

#+begin_src emacs-lisp
  (funcall (all-the-icons--data-name family))
#+end_src
** mapcar
関数引数の関数はミソ。
#+begin_src emacs-lisp
  Function: mapcar function sequence

  この関数は、sequence の各要素に function を適用(訳注：apply)し、その結果のリストを返します。sequence が nil で終るリストでない場合、エラーになります。
#+end_src

#+begin_src emacs-lisp
  (mapcar (function car) '((a b) (c d) (e f)))
  => (a c e)
#+end_src
** debugger を起動しないようにする
何かの拍子に、debugger実行されるようになり、普通に実行できなくなった。
(debugger-list-functions)
で関数を確認。adviceされてるとわかった。
(advice-remove '登録関数 'debug--implement-debug-on-entry) を削除して戻った。
** すべてdebug対象に
(edebug-all-defs)
でevalしただけで対象にするように設定する。→ 結局 C-uつけないとできない気が。
regionを選択して、 C-u M-x eval-region
すると範囲内すべてが対象に。

オフにするときは(edebug-all-defs)をトグルしてオフにしてから、region指定して ~M-x eval-region~
** 外部コマンド系パッケージ
1. ユーザ入力やフラグを通してひたすら引数を収集して、compilation に渡す。
2. コマンドを実行する。
3. バッファを作成して外部コマンドの結果をいい感じに出力する。
** avyの流れ
#+begin_src emacs-lisp
  (let ((pt (avy-with ace-link-custom
              (avy-process
               (ace-link--custom-collect) ; 元バッファからリンクを収集して((名前1 . 位置1) (名前2 . 位置2)...)リストにする
               (avy--style-fn avy-style))))) ; リンク文字を表示して操作を待つ。
    (ace-link--custom-action pt)) ; アクション
#+end_src
** リストのcustomの例

あとから追加、削除、編集が自由にできる。
#+begin_src emacs-lisp
(defcustom devdocs-alist
  '((c-mode           . "c")
    (c++-mode         . "c++")
    (clojure-mode     . "clojure")
    (coffee-mode      . "CoffeeScript")
    (common-lisp-mode . "lisp")
    (cperl-mode       . "perl")
    (css-mode         . "css")
    (elixir-mode      . "elixir")
    (enh-ruby-mode    . "ruby")
    (erlang-mode      . "erlang")
    (gfm-mode         . "markdown")
    (go-mode          . "go")
    (groovy-mode      . "groovy")
    (haskell-mode     . "haskell")
    (html-mode        . "html")
    (java-mode        . "java")
    (js2-mode         . "javascript")
    (js3-mode         . "javascript")
    (less-css-mode    . "less")
    (lua-mode         . "lua")
    (markdown-mode    . "markdown")
    (perl-mode        . "perl")
    (php-mode         . "php")
    (processing-mode  . "processing")
    (puppet-mode      . "puppet")
    (python-mode      . "python")
    (ruby-mode        . "ruby")
    (sass-mode        . "sass")
    (scala-mode       . "scala")
    (tcl-mode         . "tcl"))
  "Alist which maps major modes to names of DevDocs documentations."
  :type '(repeat (cons (symbol :tag "Major mode")
                       (string :tag "DevDocs documentation")))
  :group 'devdocs)
#+end_src

使う関数すらcustomにできる。

#+begin_src emacs-lisp
(defcustom devdocs-build-search-pattern-function
  'devdocs-build-search-pattern-function
  "A function to be called by `devdocs-search'.
It builds search pattern base on some context."
  :type 'function
  :group 'devdocs)
#+end_src
** Gitリポジトリを調べる
(locate-dominating-file directory file)
#+begin_src emacs-lisp
(cl-defun eshell-git-prompt--git-root-dir
    (&optional (directory default-directory))
  "Return Git root directory name if exist, otherwise, return nil."
  (let ((root (locate-dominating-file directory ".git")))
    (and root (file-name-as-directory root))))
#+end_src
** 変数が束縛されていれば、という表現
#+begin_src emacs-lisp
(defun eshell-git-prompt-last-command-status ()
  "Return Eshell last command execution status.
When Eshell just launches, `eshell-last-command-status' is not defined yet,
return 0 (i.e., success)."
  (if (not (boundp 'eshell-last-command-status))
      0
    eshell-last-command-status))
#+end_src
* Tasks
